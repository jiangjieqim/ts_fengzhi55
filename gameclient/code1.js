(function (exports) {
    'use strict';

    class AllianceFightMemberView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightMemberViewUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = MemberItem$1;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender1);
                this._ui.list.vScrollBarSkin = ' ';
            }
        }
        onItemRender1(item) {
            item.setData(item.dataSource);
        }
        onViewUpdate() {
            this._ui.list.array = AllianceFightModel.Ins.playerList;
            this._ui.name_tf.text = this.Data.name;
            this._ui.id_tf.text = this.Data.uid;
            this._ui.rank_tf.text = this.Data.rank;
            const num = AllianceCfgProxy.Ins.GetDataById(1).f_maxjoin;
            this._ui.num_tf.text = `${AllianceFightModel.Ins.playerList.length}/${num}`;
        }
        onInit() {
            this.onViewUpdate();
        }
        onExit() {
        }
    }

    exports.AllianceFightMemberView = AllianceFightMemberView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new AllianceFightModule();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            this.Reg(new AllianceFightGCView(EViewType.AllianceFightGCView));
            this.Reg(new AllianceFightGCTZView(EViewType.AllianceFightGCTZView));
            this.Reg(new AllianceFightGCTZView1(EViewType.AllianceFightGCTZView1));
            this.Reg(new AllianceFight56View(EViewType.AllianceFight56View));
            this.Reg(new AllianceFightBossDetailView(EViewType.AllianceFightBossDetailView));
            this.Reg(new AllianceFightEnrollView(EViewType.AllianceFightEnrollView));
            this.Reg(new AllianceFightHarmDetailView(EViewType.AllianceFightHarmDetailView));
            this.Reg(new AllianceFightRankView(EViewType.AllianceFightRankView));
            this.Reg(new AllianceFightRewardView(EViewType.AllianceFightRewardView));
            this.Reg(new AllianceFightRZView(EViewType.AllianceFightRZView));
            this.Reg(new AllianceFightAwardView(EViewType.AllianceFightAwardView));
            this.Reg(new AllianceFightJSAwardView(EViewType.AllianceFightJSAwardView));
            this.Reg(new AllianceFightAwardView1(EViewType.AllianceFightAwardView1));
            this.Reg(new AllianceFightAwardView2(EViewType.AllianceFightAwardView2));
            this.Reg(new AllianceFightMemberView(EViewType.AllianceFightMemberView));
            E.MsgMgr.AddMsg(MSGID.AllianceWarCityPreview, this.AllianceWarCityPreview, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarCityDetail, this.AllianceWarCityDetail, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarInit, this.onAllianceWarInit, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarTimeChange, this.onAllianceWarTimeChange, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarSignUp, this.onAllianceWarSignUp, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarPsChange, this.onAllianceWarPsChange, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarEnemyLife, this.onAllianceWarEnemyLife, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarBossDamage, this.onAllianceWarBossDamage, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarAllianceRank, this.onAllianceWarAllianceRank, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarInnerRank, this.onAllianceWarInnerRank, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarRewardRank, this.onAllianceWarRewardRank, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarGetRankReward, this.onAllianceWarGetRankReward, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarPlayerDamage, this.onAllianceWarPlayerDamage, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarCityLog, this.AllianceWarCityLog, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarSkins, this.AllianceWarSkins, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarRank, this.AllianceWarRank, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarBounsEnd, this.AllianceWarBounsEnd, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarCan, this.onAllianceWarCan, this);
            E.MsgMgr.AddMsg(MSGID.AllianceWarBounsCan, this.AllianceWarBounsCan, this);
            E.MsgMgr.AddMsg(MSGID.AlliancePlayerList, this.onAlliancePlayerList, this);
        }
        onAlliancePlayerList(revc) {
            AllianceFightModel.Ins.playerList = revc.playerList;
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATE_PLAYER_LIST);
        }
        onAllianceWarCan(revc) {
            if (revc.state) {
                E.ViewMgr.Open(EViewType.AllianceFight56View);
            }
        }
        AllianceWarCityPreview(value) {
            AllianceFightModel.Ins.awcpList = value.dataList;
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATA_AWCP_VIEW);
        }
        AllianceWarCityDetail(value) {
            AllianceFightModel.Ins.takeOverList = value.takeOverList;
            AllianceFightModel.Ins.awccList = value.dataList;
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATA_AWCC_VIEW);
        }
        onAllianceWarInit(value) {
            AllianceFightModel.Ins.timeList = value.times;
            AllianceFightModel.Ins.rank = value.allianceRank;
            AllianceFightModel.Ins.warStatus = value.clientState;
            AllianceModel.Ins.checkWarRedState();
        }
        onAllianceWarTimeChange(value) {
            AllianceFightModel.Ins.warStatus = value.clientState;
            AllianceFightModel.Ins.updateTimeList(value.times);
            AllianceModel.Ins.checkWarRedState();
        }
        onAllianceWarSignUp(value) {
            AllianceFightModel.Ins.isEnrolled = true;
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATE_ENROLL);
            AllianceModel.Ins.checkWarRedState();
        }
        onAllianceWarPsChange(value) {
            AllianceFightModel.Ins.psCount = value.ps;
            AllianceFightModel.Ins.psUnix = value.unix;
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATE_PS);
        }
        onAllianceWarEnemyLife(value) {
            for (const item of value.dataList) {
                const boss = AllianceFightModel.Ins.bossLifeList.find(o => o.id === item.id);
                if (boss) {
                    boss.life = item.life;
                }
                else {
                    AllianceFightModel.Ins.bossLifeList.push(item);
                }
            }
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATE_BOSS_LIFE);
        }
        onAllianceWarBossDamage(value) {
            AllianceFightModel.Ins.bossHarmList = value.dataList;
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATE_BOSS_HARM_DETAIL);
        }
        onAllianceWarAllianceRank(value) {
            AllianceFightModel.Ins.allianceRankList = value.dataList;
            AllianceFightModel.Ins.myAllianceRankVal = value.my;
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATE_ALLIANCE_RANK);
        }
        onAllianceWarInnerRank(value) {
            AllianceFightModel.Ins.innerRankList = value.dataList;
            AllianceFightModel.Ins.myInnerRankVal = value.my;
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATE_INNER_RANK);
        }
        onAllianceWarRewardRank(value) {
            AllianceFightModel.Ins.rewardRankList = value.dataList;
            AllianceFightModel.Ins.myRewardRankVal = value.my;
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATE_REWARD_RANK);
        }
        onAllianceWarGetRankReward(value) {
            if (value.flag === 1) {
                AllianceFightModel.Ins.myAllianceRewardState = value.state;
            }
            else if (value.flag === 2) {
                AllianceFightModel.Ins.myInnerRewardState = value.state;
            }
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATE_REWARD_STATE);
            AllianceModel.Ins.checkWarRedState();
        }
        AllianceWarCityLog(value) {
            AllianceFightModel.Ins.logList = value.dataList;
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATE_LOG);
        }
        onAllianceWarPlayerDamage(value) {
            var _a;
            AllianceFightModel.Ins.totalHarm = value.damage;
            if (value.bossId) {
                const conf = AllianceWarSixBossProxy.Ins.GetDataById(value.bossId);
                const bossLife = ((_a = (AllianceFightModel.Ins.parseAttrList((conf === null || conf === void 0 ? void 0 : conf.f_attribute) || '')).find(o => o.equipAttrId === 10003)) === null || _a === void 0 ? void 0 : _a.attrValue) || 0;
                let rate = 0;
                if (bossLife) {
                    rate = Number((value.damage / bossLife * 100).toFixed(1));
                }
                AllianceFightModel.Ins.totalHarmPercent = rate;
            }
            else {
                AllianceFightModel.Ins.totalHarmPercent = undefined;
            }
        }
        AllianceWarSkins(value) {
            AllianceFightModel.Ins.skinList = value.dataList;
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATE_SKIN);
        }
        AllianceWarRank(value) {
            AllianceFightModel.Ins.rank = value.rank;
            AllianceFightModel.Ins.event(AllianceFightModel.UPDATE_RANK);
            AllianceModel.Ins.checkWarRedState();
        }
        AllianceWarBounsEnd(value) {
            E.ViewMgr.Open(EViewType.AllianceFightJSAwardView, null, value);
        }
        AllianceWarBounsCan(value) {
            if (value.code == 0) {
                E.ViewMgr.Close(EViewType.AllianceFightAwardView1);
                E.ViewMgr.Open(EViewType.AllianceFightAwardView);
            }
            else if (value.code == 1) {
                E.ViewMgr.ShowMidError("已参与奖励关");
            }
        }
    }

    exports.AllianceFightModule = AllianceFightModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiSelVo {
    }
    class BaoShiSelectCtl {
        constructor(skin) {
            this.ctl1 = new SelectListCtl();
            this.ctl2 = new SelectListCtl();
            this.ctl3 = new SelectListCtl();
            this.skin = skin;
            this.skin.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            let arr1 = [];
            let arr2 = [];
            let arr3 = [];
            let arr = BaoShiSelProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].f_gemlevel != "") {
                    let vo = new BaoShiSelVo();
                    vo.color = "fff1d5";
                    vo.txt = arr[i].f_gemlevel.split("-")[1];
                    arr1.push(vo);
                }
                if (arr[i].f_GemColor != "") {
                    let vo = new BaoShiSelVo();
                    vo.color = "fff1d5";
                    vo.txt = arr[i].f_GemColor.split("-")[1];
                    arr2.push(vo);
                }
                if (arr[i].f_GemShape != "") {
                    let vo = new BaoShiSelVo();
                    vo.color = "fff1d5";
                    vo.txt = arr[i].f_GemShape.split("-")[1];
                    arr3.push(vo);
                }
            }
            this.ctl1.init(this.skin.sanjiao1, this.skin.listarea1, this.skin.listcontainer1, this.skin.listtf1, ui.views.baoshi.ui_baoshiSelectItemUI, arr1);
            this.ctl2.init(this.skin.sanjiao2, this.skin.listarea2, this.skin.listcontainer2, this.skin.listtf2, ui.views.baoshi.ui_baoshiSelectItemUI, arr2);
            this.ctl3.init(this.skin.sanjiao3, this.skin.listarea3, this.skin.listcontainer3, this.skin.listtf3, ui.views.baoshi.ui_baoshiSelectItemUI, arr3);
        }
        setHit() {
            this.skin.hitArea = new Laya.Rectangle(0, 356, 331, 44);
        }
        onAdd() {
        }
        onRemove() {
        }
    }

    exports.BaoShiSelVo = BaoShiSelVo;
    exports.BaoShiSelectCtl = BaoShiSelectCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiModel extends Laya.EventDispatcher {
        constructor() {
            super(...arguments);
            this.freeNum = 0;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new BaoShiModel();
            }
            return this._ins;
        }
        isResDot() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.Gem)) {
                if (this.isDHRedTip() || this.isXMRedTip()) {
                    return true;
                }
            }
            return false;
        }
        isDHRedTip() {
            let arr = System_RefreshTimeProxy.Ins.getVal(18).split("|");
            for (let i = 0; i < arr.length; i++) {
                let num = MainModel.Ins.mRoleData.getVal(parseInt(arr[i]));
                if (num > 0) {
                    return true;
                }
            }
            return false;
        }
        isXMRedTip() {
            if (!this.lifeBloodList) {
                return false;
            }
            for (let i = 0; i < this.lifeBloodList.length; i++) {
                if (this.lifeBloodList[i].state == 1) {
                    return true;
                }
            }
            return false;
        }
        getBagListBy(lv = 0, type = 0, xz = 0) {
            let arr = [];
            for (let i = 0; i < this.gemList.length; i++) {
                if (this.gemList[i].type == 0) {
                    let cfg = BaoShiCfgProxy.Ins.getCfgById(this.gemList[i].id);
                    if (xz == 0 || cfg.f_GemShape == xz) {
                        if (type == 0 || cfg.f_GemColor == type) {
                            if (lv == 0 || this.gemList[i].level == lv) {
                                arr.push(this.gemList[i]);
                            }
                        }
                    }
                }
            }
            arr.sort(this.onSort);
            return arr;
        }
        onSort(a, b) {
            if (a.level > b.level) {
                return -1;
            }
            else if (a.level < b.level) {
                return 1;
            }
            else {
                let cfga = BaoShiCfgProxy.Ins.getCfgById(a.id);
                let cfgb = BaoShiCfgProxy.Ins.getCfgById(b.id);
                if (cfga.f_GemColor > cfgb.f_GemColor) {
                    return 1;
                }
                else if (cfga.f_GemColor < cfgb.f_GemColor) {
                    return -1;
                }
                else {
                    return 0;
                }
            }
        }
        getEquipList() {
            let arr = [];
            for (let i = 0; i < this.gemList.length; i++) {
                if (this.gemList[i].type != 0) {
                    arr.push(this.gemList[i]);
                }
            }
            return arr;
        }
        getAttrListByType(value, type, fzId) {
            let arr = [];
            for (let i = 0; i < value.length; i++) {
                let cfg = BaoShiCfgProxy.Ins.getCfgById(value[i].id);
                if (cfg.f_GemColor == type) {
                    arr.push(value[i]);
                }
            }
            let str = "";
            for (let ele of arr) {
                let attrCfg = BaoShiLvProxy.Ins.getCfgByIdAndLv(ele.id, ele.level);
                let attArr = attrCfg.f_GemAttr.split("-");
                str += attArr[0] + ":" + attArr[1] + "|";
            }
            if (str.length > 0) {
                str = str.substr(0, str.length - 1);
            }
            let array = PlayerVoFactory.mergeAttr(str);
            let array1 = [];
            let fzCfg = FaZhengListProxy.Ins.getCfgById(fzId);
            for (let i = 0; i < array.length; i++) {
                if (fzCfg.f_add != "") {
                    let addArr = fzCfg.f_add.split("|");
                    let tt = 0;
                    let addTT = 0;
                    for (let i = 0; i < addArr.length; i++) {
                        let ar = addArr[i].split("-");
                        if (parseInt(ar[0]) == type) {
                            tt = parseInt(ar[0]);
                            addTT = parseInt(ar[1]);
                        }
                    }
                    if (tt) {
                        let arr = array[i].split(":");
                        let adda = BaoShiCfgProxy.Ins.getAttrArrByType(tt);
                        if (adda.indexOf(arr[0]) != -1) {
                            let addVal = parseInt(arr[1]) * (addTT / 10000);
                            let st = arr[0] + ":" + arr[1] + ":" + addVal;
                            array1.push(st);
                        }
                    }
                    else {
                        array1.push(array[i]);
                    }
                }
                else {
                    array1.push(array[i]);
                }
            }
            return array1;
        }
        getAttrListByType1(value, type, fzId) {
            let arr = [];
            for (let i = 0; i < value.length; i++) {
                let cfg = BaoShiCfgProxy.Ins.getCfgById(value[i].id);
                if (cfg.f_GemColor == type) {
                    arr.push(value[i]);
                }
            }
            let array = [];
            for (let ele of arr) {
                let attrCfg = BaoShiLvProxy.Ins.getCfgByIdAndLv(ele.id, ele.level);
                let attArr = attrCfg.f_GemAttr.split("-");
                let str = attArr[0] + ":" + attArr[1] + ":" + ele.level;
                array.push(str);
            }
            let array1 = [];
            let fzCfg = FaZhengListProxy.Ins.getCfgById(fzId);
            for (let i = 0; i < array.length; i++) {
                if (fzCfg.f_add != "") {
                    let addArr = fzCfg.f_add.split("|");
                    let tt = 0;
                    let addTT = 0;
                    for (let i = 0; i < addArr.length; i++) {
                        let ar = addArr[i].split("-");
                        if (parseInt(ar[0]) == type) {
                            tt = parseInt(ar[0]);
                            addTT = parseInt(ar[1]);
                        }
                    }
                    if (tt) {
                        let arr = array[i].split(":");
                        let adda = BaoShiCfgProxy.Ins.getAttrArrByType(tt);
                        if (adda.indexOf(arr[0]) != -1) {
                            let addVal = parseInt(arr[1]) * (addTT / 10000);
                            let st = arr[0] + ":" + arr[1] + ":" + arr[2] + ":" + addVal;
                            array1.push(st);
                        }
                    }
                    else {
                        array1.push(array[i]);
                    }
                }
                else {
                    array1.push(array[i]);
                }
            }
            return array1;
        }
        getFZST(fzid) {
            let st = "";
            let fzCfg = FaZhengListProxy.Ins.getCfgById(fzid);
            if (fzCfg.f_add != "") {
                let attrArr = fzCfg.f_add.split("|");
                for (let i = 0; i < attrArr.length; i++) {
                    let arr = attrArr[i].split("-");
                    st += BaoShiCfgProxy.Ins.getNameByType(parseInt(arr[0])) + "宝石提供的属性增加" + parseInt(arr[1]) / 100 + "%" + "    ";
                }
            }
            else {
                st = "无";
            }
            return st;
        }
        getBaoShiSelArr() {
            let arr1 = [];
            let arr2 = [];
            let arr3 = [];
            let arr = BaoShiSelProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].f_gemlevel != "") {
                    let vo = new BaoShiSelVo();
                    vo.color = "fff1d5";
                    vo.txt = arr[i].f_gemlevel.split("-")[1];
                    arr1.push(vo);
                }
                if (arr[i].f_GemColor != "") {
                    let vo = new BaoShiSelVo();
                    vo.color = "fff1d5";
                    vo.txt = arr[i].f_GemColor.split("-")[1];
                    arr2.push(vo);
                }
                if (arr[i].f_GemShape != "") {
                    let vo = new BaoShiSelVo();
                    vo.color = "fff1d5";
                    vo.txt = arr[i].f_GemShape.split("-")[1];
                    arr3.push(vo);
                }
            }
            return [arr1, arr2, arr3];
        }
        getGMLv() {
            let num = 12;
            let arr = BaoShiModel.Ins.getEquipList();
            if (arr.length >= 12) {
                for (let i = 0; i < arr.length; i++) {
                    num = Math.min(num, arr[i].level);
                }
            }
            else {
                num = 0;
            }
            return num;
        }
    }
    BaoShiModel.BagEnmu = {
        noSort_FY: 0,
        sort_FY: 1
    };
    BaoShiModel.BAOSHI_UPDATA = "BAOSHI_UPDATA";
    BaoShiModel.BAOSHI_HC = "BAOSHI_HC";
    BaoShiModel.FAZHENG_UPDATA = "FAZHENG_UPDATA";
    BaoShiModel.DEFFAZHENG_UPDATA = "DEFFAZHENG_UPDATA";
    BaoShiModel.SELECT_MID = "SELECT_MID";
    BaoShiModel.GemFreeChange = "GemFreeChange";
    BaoShiModel.lifeBloodChange = "lifeBloodChange";

    exports.BaoShiModel = BaoShiModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiAutoHCTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.baoshi.ui_baoshiAutoHCTipUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.startBtn, new Laya.Handler(this, this.onBtnClick)));
                this.selCtl = new SelectListCtl();
                this.selCtl.dirBottom = true;
                this.selCtl.init(this._ui.sanjiao, this._ui.listarea, this._ui.listcontainer, this._ui.listtf, ui.views.main.ui_quick_setting_list_attrUI, this.getList());
                this.selCtl.selectHandler = new Laya.Handler(this, this.onQuaSelHandler);
            }
        }
        onBtnClick() {
            let view = E.ViewMgr.Get(EViewType.BaoShiHCView);
            if (view) {
                view.setAuto(true);
                this.Close();
            }
        }
        getList() {
            let arr = [];
            let l = BaoShiSelProxy.Ins.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_gemselect) {
                    let vo = new QuickQua();
                    vo.f_id = cfg.f_id;
                    vo.color = "FBF0BB";
                    vo.txt = cfg.f_gemselect + "级的及以下";
                    arr.push(vo);
                }
            }
            return arr;
        }
        onQuaSelHandler() {
            let quaCfg = this.selCtl.selectVo;
            RedUpdateModel.Ins.save(RedEnum.BaoShiAutoHC, quaCfg.f_id);
        }
        getSelIndex() {
            let fid;
            let vo = RedUpdateModel.Ins.getByID(RedEnum.BaoShiAutoHC);
            if (vo) {
                fid = vo.type;
            }
            else {
                fid = 1;
            }
            let datalist = this.selCtl.curDataList;
            for (let i = 0; i < datalist.length; i++) {
                let quaCfg = datalist[i];
                if (quaCfg.f_id == fid) {
                    return i;
                }
            }
            return 0;
        }
        onInit() {
            let index = this.getSelIndex();
            this.selCtl.selectIndex(index);
        }
        onExit() {
        }
    }

    exports.BaoShiAutoHCTip = BaoShiAutoHCTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiDHItem extends ui.views.baoshi.ui_baoshiDHItemUI {
        constructor() {
            super();
            this.img_sel.visible = false;
            this.lab_yy.visible = false;
            this.on(Laya.Event.CLICK, this, this.onClick);
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
            BaoShiModel.Ins.on(BaoShiModel.BAOSHI_UPDATA, this, this.onUpdataView);
        }
        onRemove() {
            BaoShiModel.Ins.off(BaoShiModel.BAOSHI_UPDATA, this, this.onUpdataView);
        }
        onUpdataView() {
            this.setDot();
        }
        setData(value) {
            if (!value)
                return;
            this.zhekouImg.visible = false;
            this._data = value;
            let itemVo = new ItemVo();
            itemVo.cfgId = value.f_itemid;
            itemVo.count = 1;
            ItemViewFactory.refreshSlot(this.item, itemVo, false);
            let arr = value.f_price.split("-");
            let val = parseInt(arr[1]);
            this.img.skin = IconUtils.getIconByCfgId(parseInt(arr[0]));
            this.lab.text = val + "";
            this.lab_name.text = itemVo.getName();
            this.setDot();
            if (value.f_freetimes) {
                this.zhekouImg.visible = false;
                this.freeTf.visible = true;
                this.freeTf.text = E.LangMgr.getLang('mrxgcs', BaoShiModel.Ins.freeNum, value.f_freetimes);
                if (BaoShiModel.Ins.freeNum === 0) {
                    this.btn.disabled = true;
                }
                else {
                    this.btn.disabled = false;
                }
            }
            else {
                this.freeTf.visible = false;
            }
        }
        setDot() {
            if (this._data) {
                let arr = this._data.f_price.split("-");
                DotManager.removeDot(this.btn);
                let array = System_RefreshTimeProxy.Ins.getVal(18).split("|");
                if (array.indexOf(arr[0]) != -1) {
                    let num = MainModel.Ins.mRoleData.getVal(parseInt(arr[0]));
                    if (num >= parseInt(arr[1])) {
                        DotManager.addDot(this.btn, 15, -10);
                    }
                }
            }
        }
        onClick() {
            if (this._data.f_freetimes) {
                let req = new GemBuy_req;
                req.id = this._data.f_id;
                req.num = 1;
                SocketMgr.Ins.SendMessageBin(req);
            }
            else {
                E.ViewMgr.Open(EViewType.BaoShiGMView, null, this._data);
            }
        }
    }

    exports.BaoShiDHItem = BaoShiDHItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiItemCtl {
        constructor(skin) {
            this.skin = skin;
            this.skin.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
            MainModel.Ins.on(MainEvent.Open_Equip_switch_View, this, this.onOpen_Equip_switch_View);
        }
        onRemove() {
            MainModel.Ins.on(MainEvent.Open_Equip_switch_View, this, this.onOpen_Equip_switch_View);
            this.clear();
        }
        setVisible(bo) {
            this.skin.visible = bo;
        }
        onOpen_Equip_switch_View() {
            this.clearDrag();
        }
        clear() {
            this._isDrag = false;
            this._isTip = false;
            this.skin.icon.skin = "";
            this.skin.tf1.text = "";
            this.skin.img.visible = false;
            this.skin.img2.visible = false;
            this.skin.maskArea.visible = this.skin.jiao.visible = false;
            this.skin.lab_name.text = "";
            this.clearDrag();
            this.skin.off(Laya.Event.CLICK, this, this.onClick);
            this.skin.off(Laya.Event.MOUSE_DOWN, this, this.onDown);
        }
        clearDrag() {
            if (this._img) {
                this._img.off(Laya.Event.MOUSE_UP, this, this.onUp);
                this._img.stopDrag();
                this._img.removeSelf();
                this._img = null;
            }
        }
        setDataNull() {
            this.clear();
        }
        setData(vo, isDrag, isTip, bgBo = true, flag = false, imgBo = true) {
            this.clear();
            this._vo = vo;
            this._isDrag = isDrag;
            this._isTip = isTip;
            let cfg = BaoShiCfgProxy.Ins.getCfgById(vo.id);
            this.skin.icon.skin = BaoShiCfgProxy.Ins.getBaoShiIcon(cfg.f_gemicon);
            this.skin.tf1.text = "lv" + vo.level;
            this.skin.lab_name.text = cfg.f_GemAttr;
            this.skin.img.visible = imgBo;
            this.skin.img2.visible = !imgBo;
            this.skin.quality.visible = bgBo;
            this.skin.maskArea.visible = this.skin.jiao.visible = flag;
            if (this._isDrag) {
                this.skin.on(Laya.Event.MOUSE_DOWN, this, this.onDown);
            }
            else {
                this.skin.off(Laya.Event.MOUSE_DOWN, this, this.onDown);
            }
            if (this._isTip) {
                this.skin.on(Laya.Event.CLICK, this, this.onClick);
            }
            else {
                this.skin.off(Laya.Event.CLICK, this, this.onClick);
            }
        }
        onClick(e) {
            e.stopPropagation();
            if (this._vo) {
                let cfg = BaoShiCfgProxy.Ins.getCfgById(this._vo.id);
                let lCfg = BaoShiLvProxy.Ins.getCfgByIdAndLv(this._vo.id, this._vo.level);
                let arr = lCfg.f_GemAttr.split("-");
                let dec = cfg.f_GemAttr + "    " + attrConvert(arr[0], arr[1]);
                MainModel.Ins.showSmallTips(cfg.f_gemname, dec, this.skin.icon);
            }
        }
        onDown(e) {
            if (this._vo) {
                e.stopPropagation();
                this._img = new Laya.Image();
                let cfg = BaoShiCfgProxy.Ins.getCfgById(this._vo.id);
                this._img.skin = BaoShiCfgProxy.Ins.getBaoShiIcon(cfg.f_gemicon);
                this._img.x = Laya.stage.mouseX - this._img.width * 0.5;
                this._img.y = Laya.stage.mouseY - this._img.height * 0.5;
                this._img.on(Laya.Event.MOUSE_UP, this, this.onUp);
                LayerMgr.Ins.frameLayer.addChild(this._img);
                this._img.startDrag();
                let view = E.ViewMgr.Get(EViewType.BaoShiXQView).UI;
                let arr = FaZhengProxy.Ins.getCfgById(BaoShiModel.Ins.mationId);
                for (let i = 0; i < arr.length; i++) {
                    if (arr[i].f_GemColor == cfg.f_GemColor) {
                        view.view_bs["ts" + (i + 1)].visible = true;
                    }
                }
            }
        }
        onUp(e) {
            if (!this._img) {
                return;
            }
            let imgX = this._img.x;
            let imgY = this._img.y;
            let imgW = this._img.width;
            let imgH = this._img.height;
            this.clearDrag();
            let view = E.ViewMgr.Get(EViewType.BaoShiXQView).UI;
            for (let i = 1; i < 13; i++) {
                view.view_bs["ts" + i].visible = false;
            }
            let p = new Laya.Point(imgX + imgW * 0.5, imgY + imgH * 0.5);
            let bagX = view.img_dragBg.parent.localToGlobal(new Laya.Point(view.img_dragBg.x, view.img_dragBg.y)).x;
            let bagY = view.img_dragBg.parent.localToGlobal(new Laya.Point(view.img_dragBg.x, view.img_dragBg.y)).y;
            let p1 = new Laya.Point(bagX, bagY + view.img_dragBg.height);
            let p2 = new Laya.Point(bagX, bagY);
            let p3 = new Laya.Point(bagX + view.img_dragBg.width, bagY);
            let p4 = new Laya.Point(bagX + view.img_dragBg.width, bagY + view.img_dragBg.height);
            let bo = GeometryUtil.isPointInRect(p1, p2, p3, p4, p);
            if (bo) {
                if (this._vo.type != BaoShiModel.BagEnmu.noSort_FY) {
                    let req = new GemFormationWear_req();
                    req.type = BaoShiModel.BagEnmu.noSort_FY;
                    req.pos = 0;
                    req.uid = this._vo.uid;
                    SocketMgr.Ins.SendMessageBin(req);
                }
                return;
            }
            let index = 0;
            for (let i = 1; i < 13; i++) {
                let img = view["view_bs"]["img_" + i];
                let xx = img.parent.localToGlobal(new Laya.Point(img.x, img.y)).x;
                let yy = img.parent.localToGlobal(new Laya.Point(img.x, img.y)).y;
                let x = xx - imgX;
                let y = yy - imgY;
                let len = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
                if (len <= 40) {
                    index = i;
                }
            }
            if (index > 0) {
                if (this._vo.pos != index) {
                    let req = new GemFormationWear_req();
                    req.type = BaoShiModel.BagEnmu.sort_FY;
                    req.pos = index;
                    req.uid = this._vo.uid;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
    }

    exports.BaoShiItemCtl = BaoShiItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiItem extends ui.views.baoshi.ui_baoshiItemUI {
        constructor() {
            super();
            this.ctl = new BaoShiItemCtl(this);
        }
    }

    exports.BaoShiItem = BaoShiItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiDHView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.ctl1 = new SelectListCtl();
            this.ctl2 = new SelectListCtl();
            this.ctl3 = new SelectListCtl();
        }
        onAddLoadRes() {
            this.addAtlas('baoshi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.baoshi.ui_baoshiDHViewUI;
                this.bindClose(this._ui.btn_close);
                ValCtl.Create(this._ui.lab1, this._ui.img1, ECellType.BaoShiQuan);
                ValCtl.Create(this._ui.lab2, this._ui.img2, ECellType.GOLD);
                ValCtl.Create(this._ui.lab3, this._ui.img3, ECellType.BaoShiQuanG);
                let arr = BaoShiModel.Ins.getBaoShiSelArr();
                this.ctl1.init(this._ui.sanjiao1, this._ui.listarea1, this._ui.listcontainer1, this._ui.listtf1, ui.views.baoshi.ui_baoshiSelectItemUI, arr[0]);
                this.ctl2.init(this._ui.sanjiao2, this._ui.listarea2, this._ui.listcontainer2, this._ui.listtf2, ui.views.baoshi.ui_baoshiSelectItemUI, arr[1]);
                this.ctl3.init(this._ui.sanjiao3, this._ui.listarea3, this._ui.listcontainer3, this._ui.listtf3, ui.views.baoshi.ui_baoshiSelectItemUI, arr[2]);
                this.ctl1.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this.ctl2.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this.ctl3.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this._ui.list.itemRender = BaoShiItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list1.itemRender = BaoShiDHItem;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender1);
            }
        }
        onInit() {
            BaoShiModel.Ins.on(BaoShiModel.BAOSHI_UPDATA, this, this.onUpdataView);
            BaoShiModel.Ins.on(BaoShiModel.GemFreeChange, this, this.onGemFreeChange);
            this.ctl1.selectIndex(0);
            this.ctl2.selectIndex(0);
            this.ctl3.selectIndex(0);
            this.updataView();
        }
        onExit() {
            BaoShiModel.Ins.off(BaoShiModel.BAOSHI_UPDATA, this, this.onUpdataView);
            BaoShiModel.Ins.off(BaoShiModel.GemFreeChange, this, this.onGemFreeChange);
        }
        onSelectHandler() {
            Laya.timer.callLater(this, this.selectHandler);
        }
        selectHandler() {
            this._ui.list.array = BaoShiModel.Ins.getBagListBy(this.ctl1.curIndex, this.ctl2.curIndex, this.ctl3.curIndex);
        }
        onUpdataView() {
            this._ui.list.array = BaoShiModel.Ins.getBagListBy(this.ctl1.curIndex, this.ctl2.curIndex, this.ctl3.curIndex);
        }
        onGemFreeChange() {
            this.updataView();
        }
        onItemRender(item) {
            item.ctl.setData(item.dataSource, false, true);
        }
        onItemRender1(item) {
            item.setData(item.dataSource);
        }
        updataView() {
            this._ui.lab1.text = MainModel.Ins.mRoleData.getVal(ECellType.BaoShiQuan) + "";
            this._ui.lab2.text = MainModel.Ins.mRoleData.getVal(ECellType.GOLD) + "";
            this._ui.lab3.text = MainModel.Ins.mRoleData.getVal(ECellType.BaoShiQuanG) + "";
            this._ui.list1.array = BaoShiShopProxy.Ins.List;
        }
    }

    exports.BaoShiDHView = BaoShiDHView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiGMView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('baoshi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.baoshi.ui_baoshiGMViewUI;
                this.bindClose(this._ui.close1);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_sub, new Laya.Handler(this, this.onBtnSubClick)), ButtonCtl.Create(this._ui.btn_add, new Laya.Handler(this, this.onBtnAddClick)), ButtonCtl.Create(this._ui.btn_add1, new Laya.Handler(this, this.onBtnAdd1Click)), ButtonCtl.Create(this._ui.btn_qx, new Laya.Handler(this, this.onBtnQXClick)), ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick)));
            }
        }
        onInit() {
            this._data = this.Data;
            let id = parseInt(this._data.f_price.split("-")[0]);
            if (id == ECellType.BaoShiQuan || id == ECellType.BaoShiQuanG) {
                let num = parseInt(this._data.f_price.split("-")[1]);
                let count = MainModel.Ins.mRoleData.getVal(id);
                this._num = Math.floor(count / num);
                if (this._num < 1) {
                    this._num = 1;
                }
            }
            else {
                this._num = 1;
            }
            this.updataView();
        }
        onExit() {
        }
        onBtnSubClick() {
            this._num--;
            this.setBtn();
        }
        onBtnAddClick() {
            this._num++;
            this.setBtn();
        }
        onBtnAdd1Click() {
            this._num += 10;
            this.setBtn();
        }
        onBtnQXClick() {
            this.Close();
        }
        onBtnQDClick() {
            if (this._data) {
                let req = new GemBuy_req;
                req.id = this._data.f_id;
                req.num = this._num;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        updataView() {
            let itemVo = new ItemVo();
            itemVo.cfgId = this._data.f_itemid;
            itemVo.count = 1;
            ItemViewFactory.refreshSlot(this._ui.item, itemVo);
            this.setBtn();
        }
        setBtn() {
            if (this._num <= 1) {
                this._ui.btn_sub.disabled = true;
            }
            else {
                this._ui.btn_sub.disabled = false;
            }
            this._ui.lab_num.text = this._num + "";
            let id = this._data.f_price.split("-")[0];
            let num = this._data.f_price.split("-")[1];
            let needC = parseInt(num) * this._num;
            let count = MainModel.Ins.mRoleData.getVal(parseInt(id));
            this._ui.icon.skin = IconUtils.getIconByCfgId(parseInt(id));
            this._ui.lab_m.text = needC + "";
            this._ui.lab_d.x = this._ui.lab_m.x + this._ui.lab_m.textField.width;
            this._ui.lab_d.text = " 购买宝石";
            if (count >= needC) {
                this._ui.lab_m.color = "#54e80d";
            }
            else {
                this._ui.lab_m.color = "#ff1e00";
            }
        }
    }

    exports.BaoShiGMView = BaoShiGMView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiGongMingItem extends ui.views.baoshi.ui_baoshiGongMingItemUI {
        constructor() {
            super();
        }
        setData(value, index) {
            if (!value)
                return;
            this.zOrder = index + 100;
            let cfg = BaoShiLifeLineProxy.Ins.GetDataById(value.id);
            let arr = cfg.f_attr.split(":");
            let id = parseInt(arr[0]);
            let val = attrConvert(id, parseInt(arr[1]));
            this.lab.text = MainModel.Ins.getAttrNameIdByID(id);
            this.lab4.text = val;
            this.lab2.text = cfg.f_gemTotalLevel + "级";
            if (value.state == 0) {
                this.bg1.skin = "remote/baoshi/gem_gray.png";
                this.lab.color = "#7E7D7D";
                this.bg.skin = "remote/baoshi/gmlw_1.png";
                this.lab1.color = "#7E7D7D";
                this.suo.skin = "remote/baoshi/lock.png";
                this.sp.visible = false;
                this.lab2.color = "#EB4A31";
                this.lab3.text = "解锁";
                this.lab3.color = "#7E7D7D";
            }
            else if (value.state == 1) {
                this.bg1.skin = "remote/baoshi/gem_green.png";
                this.lab.color = "#75AC44";
                this.bg.skin = "remote/baoshi/gmlw.png";
                this.lab1.color = "#9C5F3A";
                this.suo.skin = "remote/baoshi/unlock.png";
                this.sp.visible = false;
                this.lab2.color = "#9C5F3A";
                this.lab3.text = "待激活";
                this.lab3.color = "#75AC44";
            }
            else {
                this.bg1.skin = "remote/baoshi/gem_yello.png";
                this.lab.color = "#9C5F3A";
                this.bg.skin = "remote/baoshi/gmlw.png";
                this.lab1.color = "#9C5F3A";
                this.suo.skin = "";
                this.sp.visible = true;
                this.lab2.color = "#9C5F3A";
                this.lab3.text = "已激活";
                this.lab3.color = "#4AB2EB";
            }
            if (index >= BaoShiModel.Ins.lifeBloodList.length - 1) {
                this.sp1.visible = false;
            }
            else {
                this.sp1.visible = true;
            }
        }
    }

    exports.BaoShiGongMingItem = BaoShiGongMingItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiGongMingView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("baoshi.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.baoshi.ui_baoshiGongMingViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_left, new Laya.Handler(this, this.onBtnLeftClick)), ButtonCtl.Create(this._ui.btn_right, new Laya.Handler(this, this.onBtnRightClick)), ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)), ButtonCtl.Create(this._ui.btn1, new Laya.Handler(this, this.onBtnClick1)), ButtonCtl.Create(this._ui.btn2, new Laya.Handler(this, this.onBtnClick2)));
                for (let i = 1; i < 13; i++) {
                    this["_item" + i] = new BaoShiItemCtl(this._ui["item" + i]);
                }
                this._ui.list.itemRender = BaoShiGongMingItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                const tabsSkin = [this._ui.tab1, this._ui.tab2];
                let st = E.getLang("baoshiTab");
                this.tabList = st.split("-");
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
            }
        }
        onRenderHandler(item, index) {
            item.setData(item.dataSource, index);
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.txt.text = this.tabList[index];
            if (sel) {
                skin.img1.visible = false;
                skin.img2.visible = true;
                skin.txt.color = "#A1572F";
            }
            else {
                skin.img1.visible = true;
                skin.img2.visible = false;
                skin.txt.color = "#e4bb87";
            }
        }
        onTabSelectHandler(v) {
            this._ui.sp1.visible = this._ui.sp2.visible = false;
            this._ui["sp" + (v + 1)].visible = true;
            this["updataView" + (v + 1)]();
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("BaoShiGMTitle", "BaoShiGMDec");
        }
        onBtnClick1() {
            let req = new GemLifeBlood_req;
            req.flag = 0;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnClick2() {
            let req = new GemLifeBlood_req;
            req.flag = 1;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onInit() {
            BaoShiModel.Ins.on(BaoShiModel.lifeBloodChange, this, this.onUpdataView);
            this.tabsCtl.selectIndex = 0;
            this.updataRedTip();
        }
        updataRedTip() {
            if (BaoShiModel.Ins.isXMRedTip()) {
                DotManager.addDot(this._ui.tab2, 10, -10);
                DotManager.addDot(this._ui.btn2, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.tab2);
                DotManager.removeDot(this._ui.btn2);
            }
        }
        onExit() {
            BaoShiModel.Ins.off(BaoShiModel.lifeBloodChange, this, this.onUpdataView);
            this.tabsCtl.dispose();
        }
        onUpdataView() {
            this.updataView2();
        }
        updataView1() {
            let value = BaoShiModel.Ins.getEquipList();
            for (let i = 1; i < 13; i++) {
                if (value) {
                    let vo = value.find(item => item.pos == i);
                    if (vo) {
                        this["_item" + i].setVisible(true);
                        this["_item" + i].setData(vo, false, true, false, false, false);
                    }
                    else {
                        this["_item" + i].setVisible(false);
                    }
                }
                else {
                    this["_item" + i].setVisible(false);
                }
            }
            let arr = FaZhengProxy.Ins.getCfgById(BaoShiModel.Ins.mationId);
            for (let i = 0; i < arr.length; i++) {
                this._ui["img_" + arr[i].f_FormationidPos].skin = "o/gem/" + "bsq_" + arr[i].f_GemColor + ".png";
            }
            if (value.length >= 12) {
                this._ui.lab4.visible = false;
            }
            else {
                this._ui.lab4.visible = true;
            }
            let lv = BaoShiModel.Ins.getGMLv();
            this._ui.lab.text = "Lv." + lv;
            let array = BaoShiResonanceProxy.Ins.List;
            this._index = 0;
            for (let i = 0; i < array.length; i++) {
                if (lv >= array[i].f_gemlevelmin) {
                    this._index = i;
                }
            }
            this.showLab();
        }
        onBtnLeftClick() {
            this._index--;
            this.showLab();
        }
        onBtnRightClick() {
            this._index++;
            this.showLab();
        }
        setBtn() {
            if (this._index <= 0) {
                this._index = 0;
                this._ui.btn_left.disabled = true;
            }
            else {
                this._ui.btn_left.disabled = false;
            }
            let array = BaoShiResonanceProxy.Ins.List;
            if (this._index >= array.length - 1) {
                this._index = array.length - 1;
                this._ui.btn_right.disabled = true;
            }
            else {
                this._ui.btn_right.disabled = false;
            }
        }
        showLab() {
            let array = BaoShiResonanceProxy.Ins.List;
            let cfg = array[this._index];
            this._ui.lab1.text = "lv." + cfg.f_gemlevelmin;
            let lv = BaoShiModel.Ins.getGMLv();
            if (lv > parseInt(cfg.f_gemlevelmin)) {
                this._ui.lab5.text = "";
                this._ui.lab2.color = this._ui.lab3.color = "#B47648";
            }
            else if (lv == parseInt(cfg.f_gemlevelmin)) {
                this._ui.lab5.text = "(激活中)";
                this._ui.lab5.color = "#1FA0EF";
                this._ui.lab2.color = this._ui.lab3.color = "#48A2DC";
            }
            else {
                this._ui.lab5.text = "(等级不足)";
                this._ui.lab5.color = "#ED1B1B";
                this._ui.lab2.color = this._ui.lab3.color = "#7E7D7D";
            }
            let arr = cfg.f_attr.split(":");
            let id = parseInt(arr[0]);
            let val = attrConvert(id, parseInt(arr[1]));
            this._ui.lab2.text = MainModel.Ins.getAttrNameIdByID(id);
            this._ui.lab3.text = val;
            this.setBtn();
        }
        updataView2() {
            this._ui.list.array = BaoShiModel.Ins.lifeBloodList;
            this.updataRedTip();
        }
    }

    exports.BaoShiGongMingView = BaoShiGongMingView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiHCView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.ctl1 = new SelectListCtl();
            this.ctl2 = new SelectListCtl();
            this.ctl3 = new SelectListCtl();
        }
        onAddLoadRes() {
            this.addAtlas('baoshi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.baoshi.ui_baoshiHCViewUI;
                this.bindClose(this._ui.btn_close);
                const tabsSkin = [this._ui.tab1, this._ui.tab2, this._ui.tab3];
                this.tabList = ["合成", "重铸", "变质"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this.btnList.push(ButtonCtl.Create(this._ui.btn_bz, new Laya.Handler(this, this.onBtnBZClick)), ButtonCtl.Create(this._ui.btn_cz, new Laya.Handler(this, this.onBtnCZClick)), ButtonCtl.Create(this._ui.btn_hc, new Laya.Handler(this, this.onBtnHCClick)), ButtonCtl.Create(this._ui.btn_xq, new Laya.Handler(this, this.onBtnXQClick)), ButtonCtl.Create(this._ui.btn_dh, new Laya.Handler(this, this.onBtnHDClick)));
                let arr = BaoShiModel.Ins.getBaoShiSelArr();
                this.ctl1.init(this._ui.sanjiao1, this._ui.listarea1, this._ui.listcontainer1, this._ui.listtf1, ui.views.baoshi.ui_baoshiSelectItemUI, arr[0]);
                this.ctl2.init(this._ui.sanjiao2, this._ui.listarea2, this._ui.listcontainer2, this._ui.listtf2, ui.views.baoshi.ui_baoshiSelectItemUI, arr[1]);
                this.ctl3.init(this._ui.sanjiao3, this._ui.listarea3, this._ui.listcontainer3, this._ui.listtf3, ui.views.baoshi.ui_baoshiSelectItemUI, arr[2]);
                this.ctl1.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this.ctl2.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this.ctl3.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this._ui.list.itemRender = BaoShiItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list.selectEnable = true;
                this._ui.list.selectHandler = new Laya.Handler(this, this.onListSelectHandler);
                this.itemCzCtl = new BaoShiItemCtl(this._ui.item_cz);
                this.itemBzCtl = new BaoShiItemCtl(this._ui.item_bz);
                this.itemHcCtl = new BaoShiItemCtl(this._ui.item_hc);
                this.itemHc1Ctl = new BaoShiItemCtl(this._ui.item_hc1);
                this.itemHc2Ctl = new BaoShiItemCtl(this._ui.item_hc2);
                this.itemHc3Ctl = new BaoShiItemCtl(this._ui.item_hc3);
                ItemUpdateCtl.Create(this._ui.juanzhoutf, ECellType.GemPiece);
                ItemUpdateCtl.Create(this._ui.goldtf, ECellType.GOLD);
                this._ui.juanzhouicon.skin = IconUtils.getIconByCfgId(ECellType.GemPiece);
            }
        }
        onInit() {
            BaoShiModel.Ins.on(BaoShiModel.BAOSHI_HC, this, this.onUpdataView);
            this.setAuto(false);
            this.ctl1.selectIndex(0);
            this.ctl2.selectIndex(0);
            this.ctl3.selectIndex(0);
            this.tabsCtl.selectIndex = 0;
        }
        onExit() {
            BaoShiModel.Ins.off(BaoShiModel.BAOSHI_HC, this, this.onUpdataView);
            this.setBZView();
            this.setCZView();
            this.setHCView();
            if (this._isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("自动合成已关闭");
            }
        }
        onBtnHDClick() {
            if (this._isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("自动合成已关闭");
                return;
            }
            E.ViewMgr.Open(EViewType.BaoShiAutoHCView);
        }
        setAuto(bo) {
            this._isAuto = bo;
            if (this._isAuto) {
                this.sendCmd();
            }
            else {
                Laya.timer.clear(this, this.sendCmd);
            }
        }
        sendCmd() {
            let arr = this.getHCArr();
            if (arr.length) {
                this.setHc(arr, false);
                if (this._hcData1 && this._hcData2 && this._hcData3) {
                    let req = new GemHandler_req;
                    req.type = 1;
                    req.uids = [this._hcData1.uid, this._hcData2.uid, this._hcData3.uid];
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
            else {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("没有可自动合成的宝石");
            }
        }
        onBtnXQClick() {
            if (this._isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("自动合成已关闭");
                return;
            }
            let arr = this.getHCArr(false);
            if (arr.length) {
                this.setHc(arr, true);
            }
            else {
                E.ViewMgr.ShowMidError("没有可一键放入的宝石");
            }
        }
        setHc(arr, flag) {
            this._hcData1 = arr[0];
            this._hcData2 = arr[1];
            this._hcData3 = arr[2];
            this.setHCView(false, null, flag);
            for (let i = 0; i < this._ui.list.array.length; i++) {
                if (this._ui.list.array[i].data.uid.toNumber() == this._hcData1.uid.toNumber() ||
                    this._ui.list.array[i].data.uid.toNumber() == this._hcData2.uid.toNumber() ||
                    this._ui.list.array[i].data.uid.toNumber() == this._hcData3.uid.toNumber()) {
                    this._ui.list.array[i].isSelect = true;
                }
                else {
                    this._ui.list.array[i].isSelect = false;
                }
            }
            this._ui.list.refresh();
        }
        getHCArr(flag = true) {
            if (!this._ui.list.array)
                return;
            let arr = BaoShiModel.Ins.getBagListBy(this.ctl1.curIndex, this.ctl2.curIndex, this.ctl3.curIndex);
            let fid;
            let vo = RedUpdateModel.Ins.getByID(RedEnum.BaoShiAutoHC);
            if (vo) {
                fid = vo.type;
            }
            else {
                fid = 1;
            }
            let lv = BaoShiSelProxy.Ins.GetDataById(fid).f_gemselect;
            let array = [];
            let map = [];
            for (let i = 0; i < arr.length; i++) {
                if (flag) {
                    if (arr[i].level > lv) {
                        continue;
                    }
                }
                if (!map[arr[i].level]) {
                    map[arr[i].level] = [];
                }
                map[arr[i].level].push(arr[i]);
            }
            let maxLv = BaoShiLvProxy.Ins.maxLv;
            for (let i = maxLv - 1; i > 0; i--) {
                if (map[i] && map[i].length >= 3) {
                    array.push(map[i][0]);
                    array.push(map[i][1]);
                    array.push(map[i][2]);
                    break;
                }
            }
            return array;
        }
        onBtnHCClick() {
            if (this._isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("自动合成已关闭");
                return;
            }
            if (this._hcData1 && this._hcData2 && this._hcData3) {
                let req = new GemHandler_req;
                req.type = 1;
                req.uids = [this._hcData1.uid, this._hcData2.uid, this._hcData3.uid];
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onBtnCZClick() {
            if (this._czData) {
                let arr = this.needItems.map(o => ({ moneyCfgId: o.cfgId, moneyVal: o.count }));
                MainModel.Ins.queryMsgs("进行重铸", arr, EQuickMsg.BaoShiCZ, new Laya.Handler(this, this.onBtnCZHandler));
            }
        }
        onBtnCZHandler() {
            let req = new GemHandler_req;
            req.type = 2;
            req.uids = [this._czData.uid];
            req.items = this.needItems.map(item => {
                const o = new stGemItem();
                o.itemId = item.cfgId;
                o.num = item.count;
                return o;
            });
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnBZClick() {
            if (this._bzData) {
                let cfg = BaoShiTransformProxy.Ins.getCfgByLv(this._bzData.level);
                let arr = this.needItems.map(o => ({ moneyCfgId: o.cfgId, moneyVal: o.count }));
                MainModel.Ins.queryMsgs("进行变质", arr, EQuickMsg.BaoShiBZ, new Laya.Handler(this, this.onBtnBZHandler));
            }
        }
        onBtnBZHandler() {
            let req = new GemHandler_req;
            req.type = 3;
            req.items = this.needItems.map(item => {
                const o = new stGemItem();
                o.itemId = item.cfgId;
                o.num = item.count;
                return o;
            });
            req.uids = [this._bzData.uid];
            SocketMgr.Ins.SendMessageBin(req);
        }
        onUpdataView(value) {
            if (value.type == 1) {
                this.setHCView(true, value.handlerAfter);
                let arr = BaoShiModel.Ins.getBagListBy(this.ctl1.curIndex, this.ctl2.curIndex, this.ctl3.curIndex);
                let array = [];
                for (let i = 0; i < arr.length; i++) {
                    array.push({ data: arr[i], isSelect: false });
                }
                this._ui.list.array = array;
                E.ViewMgr.ShowMidOk("合成成功");
                if (this._isAuto) {
                    Laya.timer.once(1500, this, this.sendCmd);
                }
            }
            else if (value.type == 2) {
                this.setCZView(value.handlerAfter);
                let index = this._ui.list.array.findIndex(ele => ele.data.uid.toNumber() == value.handlerAfter.uid.toNumber());
                this._ui.list.array[index].data = value.handlerAfter;
                this._ui.list.refresh();
                E.ViewMgr.ShowMidOk("重铸成功");
            }
            else if (value.type == 3) {
                this.setBZView(value.handlerAfter);
                let index = this._ui.list.array.findIndex(ele => ele.data.uid.toNumber() == value.handlerAfter.uid.toNumber());
                this._ui.list.array[index].data = value.handlerAfter;
                this._ui.list.refresh();
                E.ViewMgr.ShowMidOk("变质成功");
            }
            this.updateUseItem();
        }
        setCZView(value = null) {
            if (value) {
                this._czData = value;
                this.itemCzCtl.setData(value, false, true, true, false);
            }
            else {
                this._czData = null;
                this.itemCzCtl.setDataNull();
            }
            this.setCZBtn();
        }
        setBZView(value = null) {
            if (value) {
                this._bzData = value;
                this.itemBzCtl.setData(value, false, true, true, false);
            }
            else {
                this._bzData = null;
                this.itemBzCtl.setDataNull();
            }
            this.setBZBtn();
        }
        setHCView(flag = true, data = null, bo = true) {
            if (flag) {
                this._hcData1 = this._hcData2 = this._hcData3 = null;
            }
            if (data) {
                this.itemHcCtl.setData(data, false, true, true, false);
            }
            else {
                this.itemHcCtl.setDataNull();
            }
            if (this._hcData1) {
                this.itemHc1Ctl.setData(this._hcData1, false, true, true, false);
            }
            else {
                this.itemHc1Ctl.setDataNull();
            }
            if (this._hcData2) {
                this.itemHc2Ctl.setData(this._hcData2, false, true, true, false);
            }
            else {
                this.itemHc2Ctl.setDataNull();
            }
            if (this._hcData3) {
                this.itemHc3Ctl.setData(this._hcData3, false, true, true, false);
            }
            else {
                this.itemHc3Ctl.setDataNull();
            }
            this.setHCBtn(bo);
        }
        onListSelectHandler(index) {
            if (index == -1) {
                return;
            }
            if (this.tabsCtl.selectIndex == 0) {
                let maxLv = BaoShiLvProxy.Ins.maxLv;
                if (this._ui.list.array[index].data.level >= maxLv) {
                    return;
                }
                if (this._hcData1 && this._hcData1.uid.toNumber() == this._ui.list.array[index].data.uid.toNumber()) {
                    this._hcData1 = null;
                    this.setHCView(false);
                    this._ui.list.array[index].isSelect = !this._ui.list.array[index].isSelect;
                    this._ui.list.refresh();
                    this._ui.list.selectedIndex = -1;
                    return;
                }
                if (this._hcData2 && this._hcData2.uid.toNumber() == this._ui.list.array[index].data.uid.toNumber()) {
                    this._hcData2 = null;
                    this.setHCView(false);
                    this._ui.list.array[index].isSelect = !this._ui.list.array[index].isSelect;
                    this._ui.list.refresh();
                    this._ui.list.selectedIndex = -1;
                    return;
                }
                if (this._hcData3 && this._hcData3.uid.toNumber() == this._ui.list.array[index].data.uid.toNumber()) {
                    this._hcData3 = null;
                    this.setHCView(false);
                    this._ui.list.array[index].isSelect = !this._ui.list.array[index].isSelect;
                    this._ui.list.refresh();
                    this._ui.list.selectedIndex = -1;
                    return;
                }
                if (this._hcData1 && this._hcData2 && this._hcData3) {
                    return;
                }
                let lv = 0;
                if (this._hcData1) {
                    lv = this._hcData1.level;
                }
                if (this._hcData2) {
                    lv = this._hcData2.level;
                }
                if (this._hcData3) {
                    lv = this._hcData3.level;
                }
                if (lv == 0 || this._ui.list.array[index].data.level == lv) {
                    if (!this._hcData1) {
                        this._hcData1 = this._ui.list.array[index].data;
                        this.setHCView(false);
                        this._ui.list.array[index].isSelect = !this._ui.list.array[index].isSelect;
                        this._ui.list.refresh();
                        this._ui.list.selectedIndex = -1;
                        return;
                    }
                    if (!this._hcData2) {
                        this._hcData2 = this._ui.list.array[index].data;
                        this.setHCView(false);
                        this._ui.list.array[index].isSelect = !this._ui.list.array[index].isSelect;
                        this._ui.list.refresh();
                        this._ui.list.selectedIndex = -1;
                        return;
                    }
                    if (!this._hcData3) {
                        this._hcData3 = this._ui.list.array[index].data;
                        this.setHCView(false);
                        this._ui.list.array[index].isSelect = !this._ui.list.array[index].isSelect;
                        this._ui.list.refresh();
                        this._ui.list.selectedIndex = -1;
                        return;
                    }
                }
                else {
                    E.ViewMgr.ShowMidError("请放置相同等级宝石");
                    this._ui.list.selectedIndex = -1;
                    return;
                }
            }
            else if (this.tabsCtl.selectIndex == 1) {
                if (this._ui.list.array[index].data.level < 4) {
                    E.ViewMgr.ShowMidError("需要4级才可重铸");
                    this._ui.list.selectedIndex = -1;
                    return;
                }
                if (this._czData) {
                    if (this._czData == this._ui.list.array[index].data) {
                        this.setCZView();
                    }
                    else {
                        this._ui.list.selectedIndex = -1;
                        return;
                    }
                }
                else {
                    this.setCZView(this._ui.list.array[index].data);
                }
                let cfg = BaoShiTransformProxy.Ins.getCfgByLv(this._ui.list.array[index].data.level);
                this._ui.lab_money.text = cfg.f_Price.split("-")[1];
            }
            else if (this.tabsCtl.selectIndex == 2) {
                if (this._ui.list.array[index].data.level < 4) {
                    E.ViewMgr.ShowMidError("需要4级才可变质");
                    this._ui.list.selectedIndex = -1;
                    return;
                }
                if (this._bzData) {
                    if (this._bzData == this._ui.list.array[index].data) {
                        this.setBZView();
                    }
                    else {
                        this._ui.list.selectedIndex = -1;
                        return;
                    }
                }
                else {
                    this.setBZView(this._ui.list.array[index].data);
                }
                let cfg = BaoShiTransformProxy.Ins.getCfgByLv(this._ui.list.array[index].data.level);
                this._ui.lab_money.text = cfg.f_Price.split("-")[1];
            }
            this.updateUseItem();
            this._ui.list.array[index].isSelect = !this._ui.list.array[index].isSelect;
            this._ui.list.refresh();
            this._ui.list.selectedIndex = -1;
        }
        updateUseItem() {
            this._ui.zhekouImg.visible = false;
            if (this._ui.img_money4.visible) {
                if (this.tabsCtl.selectIndex == 1 || this.tabsCtl.selectIndex == 2) {
                    let _lv;
                    if (this._bzData) {
                        _lv = this._bzData.level;
                    }
                    else if (this._czData) {
                        _lv = this._czData.level;
                    }
                    else {
                        return;
                    }
                    let cfg = BaoShiTransformProxy.Ins.getCfgByLv(_lv);
                    let needItems = [];
                    const [itemId1, itemCount1] = cfg.f_gempiece.split('-').map(Number);
                    const [itemId2] = cfg.f_Price.split('-').map(Number);
                    const itemCount11 = MainModel.Ins.getItemVo(itemId1).count;
                    if (itemCount11 >= itemCount1) {
                        needItems = [ItemViewFactory.convertItem(cfg.f_gempiece)];
                    }
                    else {
                        if (itemCount11) {
                            needItems = [ItemViewFactory.convertItem(`${itemId1}-${itemCount11}`)];
                        }
                        const needItem = ItemViewFactory.convertItem(`${itemId2}-${(itemCount1 - itemCount11) * 100}`);
                        if (MainModel.Ins.isGemOpen) {
                            let f_Discount = cfg.f_Discount / 10000;
                            if (f_Discount < 1) {
                                let price = needItem.count;
                                this._ui.zhekouImg.visible = true;
                                this._ui.oldGoldTf.text = E.getLang("oldprice") + price;
                                let a = (cfg.f_Discount / 1000).toFixed(0);
                                this._ui.zhekouTf.text = E.getLang("limitdiscount", a);
                                needItem.count = price * f_Discount;
                            }
                        }
                        needItems.push(needItem);
                    }
                    const arr = [
                        { img: this._ui.img_money4, tf: this._ui.lab_money },
                        { img: this._ui.img_money05, tf: this._ui.lab_money05 },
                    ];
                    for (let i = 0; i < arr.length; i++) {
                        const item = arr[i];
                        const img = item.img;
                        const tf = item.tf;
                        if (needItems[i]) {
                            tf.text = needItems[i].count + "";
                            img.skin = needItems[i].getIcon();
                            tf.visible = true;
                            img.visible = true;
                        }
                        else {
                            tf.visible = false;
                            img.visible = false;
                        }
                    }
                    this.needItems = needItems;
                }
            }
        }
        onItemRender(item) {
            item.ctl.setData(item.dataSource.data, false, false, true, item.dataSource.isSelect);
        }
        onSelectHandler() {
            Laya.timer.callLater(this, this.selectHandler);
        }
        selectHandler() {
            this._ui.zhekouImg.visible = false;
            if (this._isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("自动合成已关闭");
            }
            let arr = BaoShiModel.Ins.getBagListBy(this.ctl1.curIndex, this.ctl2.curIndex, this.ctl3.curIndex);
            let array = [];
            for (let i = 0; i < arr.length; i++) {
                array.push({ data: arr[i], isSelect: false });
            }
            this._ui.list.array = array;
            if (this.tabsCtl.selectIndex == 0) {
                this.setHCView();
            }
            else if (this.tabsCtl.selectIndex == 1) {
                this.setCZView();
            }
            else if (this.tabsCtl.selectIndex == 2) {
                this.setBZView();
            }
        }
        setHCBtn(flag = true) {
            if (flag) {
                this._ui.img_money4.visible = this._ui.lab_money.visible = false;
                this._ui.img_money05.visible = this._ui.lab_money05.visible = false;
                if (this._hcData1 && this._hcData2 && this._hcData3) {
                    this._ui.btn_hc.disabled = false;
                }
                else {
                    this._ui.btn_hc.disabled = true;
                }
            }
        }
        setCZBtn() {
            if (this._czData) {
                this._ui.img_money4.visible = this._ui.lab_money.visible = true;
                this._ui.img_money05.visible = this._ui.lab_money05.visible = true;
                this._ui.btn_cz.disabled = false;
            }
            else {
                this._ui.img_money4.visible = this._ui.lab_money.visible = false;
                this._ui.img_money05.visible = this._ui.lab_money05.visible = false;
                this._ui.btn_cz.disabled = true;
            }
        }
        setBZBtn() {
            if (this._bzData) {
                this._ui.img_money4.visible = this._ui.lab_money.visible = true;
                this._ui.img_money05.visible = this._ui.lab_money05.visible = true;
                this._ui.btn_bz.disabled = false;
            }
            else {
                this._ui.img_money4.visible = this._ui.lab_money.visible = false;
                this._ui.img_money05.visible = this._ui.lab_money05.visible = false;
                this._ui.btn_bz.disabled = true;
            }
        }
        onTabSelectHandler(v) {
            this._ui.zhekouImg.visible = false;
            switch (v) {
                case 0:
                    this._ui.box_hc.visible = true;
                    this._ui.box_cz.visible = false;
                    this._ui.box_bz.visible = false;
                    this.setHCView();
                    break;
                case 1:
                    this._ui.box_hc.visible = false;
                    this._ui.box_cz.visible = true;
                    this._ui.box_bz.visible = false;
                    this.setCZView();
                    break;
                case 2:
                    this._ui.box_hc.visible = false;
                    this._ui.box_cz.visible = false;
                    this._ui.box_bz.visible = true;
                    this.setBZView();
                    break;
            }
            if (this._ui.list.array) {
                for (let i = 0; i < this._ui.list.array.length; i++) {
                    this._ui.list.array[i].isSelect = false;
                }
                this._ui.list.refresh();
            }
            if (this._isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("自动合成已关闭");
            }
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.txt.text = this.tabList[index];
            if (sel) {
                skin.img1.visible = false;
                skin.img2.visible = true;
                skin.txt.color = "#A1572F";
            }
            else {
                skin.img1.visible = true;
                skin.img2.visible = false;
                skin.txt.color = "#e4bb87";
            }
        }
    }

    exports.BaoShiHCView = BaoShiHCView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiAttrCtl {
        constructor(skin) {
            this.skin = skin;
            this.skin.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            this.skin.list1.itemRender = ui.views.baoshi.ui_baoshiAttrItemUI;
            this.skin.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            this.skin.list2.itemRender = ui.views.baoshi.ui_baoshiAttrItemUI;
            this.skin.list2.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            this.skin.list3.itemRender = ui.views.baoshi.ui_baoshiAttrItemUI;
            this.skin.list3.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            this.skin.list4.itemRender = ui.views.baoshi.ui_baoshiAttrItemUI;
            this.skin.list4.renderHandler = new Laya.Handler(this, this.onRenderHandler);
        }
        onAdd() {
        }
        onRemove() {
        }
        onRenderHandler(item) {
            let arr = item.dataSource.split(":");
            let id = parseInt(arr[0]);
            let val = attrConvert(id, parseInt(arr[1]));
            item.txt.text = MainModel.Ins.getAttrNameIdByID(id) + ":" + val;
            if (arr[2]) {
                item.txt1.text = " (+" + attrConvert(id, parseInt(arr[2])) + ")";
                item.txt1.x = item.txt.x + item.txt.textField.width;
            }
            else {
                item.txt1.text = "";
            }
        }
        setData(value, fzId) {
            this.skin.list1.array = BaoShiModel.Ins.getAttrListByType(value, 1, fzId);
            this.skin.list2.array = BaoShiModel.Ins.getAttrListByType(value, 2, fzId);
            this.skin.list3.array = BaoShiModel.Ins.getAttrListByType(value, 3, fzId);
            this.skin.list4.array = BaoShiModel.Ins.getAttrListByType(value, 4, fzId);
        }
    }

    exports.BaoShiAttrCtl = BaoShiAttrCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiViewItemCtl {
        constructor(skin) {
            this.skin = skin;
            this.skin.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            for (let i = 1; i < 13; i++) {
                this["_item" + i] = new BaoShiItemCtl(this.skin["item" + i]);
            }
        }
        onAdd() {
            for (let i = 1; i < 13; i++) {
                this.skin["ts" + i].visible = false;
            }
        }
        onRemove() {
        }
        setData(value, isDrag, fzId, isTip = true) {
            for (let i = 1; i < 13; i++) {
                if (value) {
                    let vo = value.find(item => item.pos == i);
                    if (vo) {
                        this["_item" + i].setVisible(true);
                        this["_item" + i].setData(vo, isDrag, isTip, false, false, false);
                    }
                    else {
                        this["_item" + i].setVisible(false);
                    }
                }
                else {
                    this["_item" + i].setVisible(false);
                }
            }
            let arr = FaZhengProxy.Ins.getCfgById(fzId);
            for (let i = 0; i < arr.length; i++) {
                this.skin["img_" + arr[i].f_FormationidPos].skin = "o/gem/" + "bsq_" + arr[i].f_GemColor + ".png";
            }
            let cfg = FaZhengListProxy.Ins.getCfgById(fzId);
            this.skin.img_bg.skin = `o/gem/${cfg.f_backpic}`;
        }
    }

    exports.BaoShiViewItemCtl = BaoShiViewItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiMainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('baoshi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.baoshi.ui_baoshiViewUI;
                this.bindClose(this._ui.btn_close);
                this._baoshiCtl = new BaoShiViewItemCtl(this._ui.view_bs);
                this._baoshiAttrCtl = new BaoShiAttrCtl(this._ui.view_attr);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_tj, new Laya.Handler(this, this.onBtnTJClick)), ButtonCtl.Create(this._ui.btn_fz, new Laya.Handler(this, this.onBtnFZGHClick)), ButtonCtl.Create(this._ui.btn_xq, new Laya.Handler(this, this.onBtnXQClick)), ButtonCtl.Create(this._ui.btn_dh, new Laya.Handler(this, this.onBtnDHClick)), ButtonCtl.Create(this._ui.btn_fzdh, new Laya.Handler(this, this.onBtnfzDHClick)), ButtonCtl.Create(this._ui.btn_hc, new Laya.Handler(this, this.onBtnHCClick)), ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)), ButtonCtl.Create(this._ui.btn_gm, new Laya.Handler(this, this.onBtnGMClick)));
            }
        }
        onInit() {
            this.updataView();
            BaoShiModel.Ins.on(BaoShiModel.DEFFAZHENG_UPDATA, this, this.updataView);
            BaoShiModel.Ins.on(BaoShiModel.BAOSHI_UPDATA, this, this.updataView);
            BaoShiModel.Ins.on(BaoShiModel.lifeBloodChange, this, this.updataView1);
        }
        onExit() {
            BaoShiModel.Ins.off(BaoShiModel.DEFFAZHENG_UPDATA, this, this.updataView);
            BaoShiModel.Ins.off(BaoShiModel.BAOSHI_UPDATA, this, this.updataView);
            BaoShiModel.Ins.off(BaoShiModel.lifeBloodChange, this, this.updataView1);
        }
        onBtnTJClick() {
            E.ViewMgr.Open(EViewType.BaoShiTJView);
        }
        onBtnFZGHClick() {
            E.ViewMgr.Open(EViewType.FaZhengGHView);
        }
        onBtnXQClick() {
            E.ViewMgr.Open(EViewType.BaoShiXQView);
        }
        onBtnDHClick() {
            E.ViewMgr.Open(EViewType.BaoShiDHView);
        }
        onBtnfzDHClick() {
            E.ViewMgr.Open(EViewType.FaZhengDHView);
        }
        onBtnHCClick() {
            E.ViewMgr.Open(EViewType.BaoShiHCView);
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("BaoShiTitle1", "BaoShiDec1");
        }
        onBtnGMClick() {
            E.ViewMgr.Open(EViewType.BaoShiGongMingView);
        }
        updataView() {
            let fzCfg = FaZhengListProxy.Ins.getCfgById(BaoShiModel.Ins.mationId);
            let iCfg = ItemProxy.Ins.getCfg(fzCfg.f_itemid);
            this._ui.lab_fz.text = main.itemName(iCfg.f_name);
            this._baoshiCtl.setData(BaoShiModel.Ins.getEquipList(), false, BaoShiModel.Ins.mationId);
            this._baoshiAttrCtl.setData(BaoShiModel.Ins.getEquipList(), BaoShiModel.Ins.mationId);
            this._ui.lab_fzsm.text = BaoShiModel.Ins.getFZST(BaoShiModel.Ins.mationId);
            if (BaoShiModel.Ins.isDHRedTip()) {
                DotManager.addDot(this._ui.btn_dh);
            }
            else {
                DotManager.removeDot(this._ui.btn_dh);
            }
            this.isRedXMTip();
        }
        updataView1() {
            this.isRedXMTip();
        }
        isRedXMTip() {
            if (BaoShiModel.Ins.isXMRedTip()) {
                DotManager.addDot(this._ui.btn_gm);
            }
            else {
                DotManager.removeDot(this._ui.btn_gm);
            }
        }
    }

    exports.BaoShiMainView = BaoShiMainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiTJView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('baoshi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.baoshi.ui_baoshiTJViewUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = ui.views.baoshi.ui_baoshiTJItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onitemHandler);
            }
        }
        onInit() {
            let arr = BaoShiCfgProxy.Ins.List;
            let array = [];
            let obj = {};
            for (let i = 0; i < arr.length; i++) {
                if (!obj[arr[i].f_GemColor]) {
                    obj[arr[i].f_GemColor] = [];
                    array.push(obj[arr[i].f_GemColor]);
                }
                obj[arr[i].f_GemColor].push(arr[i]);
            }
            this._ui.list.array = array;
        }
        onExit() {
        }
        onitemHandler(item) {
            let arr = item.dataSource;
            item.title.text = BaoShiCfgProxy.Ins.getNameByType(arr[0].f_GemColor);
            for (let i = 0; i < arr.length; i++) {
                item["icon" + (i + 1)].skin = BaoShiCfgProxy.Ins.getBaoShiIcon(arr[i].f_gemicon);
                item["lab" + (i + 1)].text = arr[i].f_GemAttr;
            }
        }
    }

    exports.BaoShiTJView = BaoShiTJView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiXQView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.ctl1 = new SelectListCtl();
            this.ctl2 = new SelectListCtl();
            this.ctl3 = new SelectListCtl();
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('baoshi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.baoshi.ui_baoshiXQViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_tj, new Laya.Handler(this, this.onBtnTJGHClick)), ButtonCtl.Create(this._ui.btn_l, new Laya.Handler(this, this.onBtnLClick)), ButtonCtl.Create(this._ui.btn_r, new Laya.Handler(this, this.onBtnRClick)), ButtonCtl.Create(this._ui.btn_fz, new Laya.Handler(this, this.onBtnFZGHClick)), ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)));
                this._baoshiCtl = new BaoShiViewItemCtl(this._ui.view_bs);
                this._baoshiAttrCtl = new BaoShiAttrCtl(this._ui.view_attr);
                let arr = BaoShiModel.Ins.getBaoShiSelArr();
                this.ctl1.init(this._ui.sanjiao1, this._ui.listarea1, this._ui.listcontainer1, this._ui.listtf1, ui.views.baoshi.ui_baoshiSelectItemUI, arr[0]);
                this.ctl2.init(this._ui.sanjiao2, this._ui.listarea2, this._ui.listcontainer2, this._ui.listtf2, ui.views.baoshi.ui_baoshiSelectItemUI, arr[1]);
                this.ctl3.init(this._ui.sanjiao3, this._ui.listarea3, this._ui.listcontainer3, this._ui.listtf3, ui.views.baoshi.ui_baoshiSelectItemUI, arr[2]);
                this.ctl1.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this.ctl2.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this.ctl3.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this._ui.list.itemRender = BaoShiItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
            }
        }
        onInit() {
            BaoShiModel.Ins.on(BaoShiModel.BAOSHI_UPDATA, this, this.onUpdataView);
            BaoShiModel.Ins.on(BaoShiModel.DEFFAZHENG_UPDATA, this, this.onUpdataView);
            this.ctl1.selectIndex(0);
            this.ctl2.selectIndex(0);
            this.ctl3.selectIndex(0);
            this.updataView();
        }
        onExit() {
            BaoShiModel.Ins.off(BaoShiModel.BAOSHI_UPDATA, this, this.onUpdataView);
            BaoShiModel.Ins.off(BaoShiModel.DEFFAZHENG_UPDATA, this, this.onUpdataView);
        }
        onUpdataView() {
            let fzCfg = FaZhengListProxy.Ins.getCfgById(BaoShiModel.Ins.mationId);
            let iCfg = ItemProxy.Ins.getCfg(fzCfg.f_itemid);
            this._ui.lab_fz.text = main.itemName(iCfg.f_name);
            this._baoshiCtl.setData(BaoShiModel.Ins.getEquipList(), true, BaoShiModel.Ins.mationId, false);
            this._baoshiAttrCtl.setData(BaoShiModel.Ins.getEquipList(), BaoShiModel.Ins.mationId);
            this._ui.lab_fzsm.text = BaoShiModel.Ins.getFZST(BaoShiModel.Ins.mationId);
            this._ui.list.array = BaoShiModel.Ins.getBagListBy(this.ctl1.curIndex, this.ctl2.curIndex, this.ctl3.curIndex);
            this.setBtn();
        }
        onSelectHandler() {
            Laya.timer.callLater(this, this.selectHandler);
        }
        selectHandler() {
            this._ui.list.array = BaoShiModel.Ins.getBagListBy(this.ctl1.curIndex, this.ctl2.curIndex, this.ctl3.curIndex);
            this._ui.list.page = 0;
            this.setBtn();
        }
        onItemRender(item) {
            item.ctl.setData(item.dataSource, true, false);
        }
        onBtnTJGHClick() {
            E.ViewMgr.Open(EViewType.BaoShiTJView);
        }
        onBtnFZGHClick() {
            E.ViewMgr.Open(EViewType.FaZhengGHView);
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("BaoShiTitle2", "BaoShiDec2");
        }
        onBtnLClick() {
            this._ui.list.page--;
            this.setBtn();
        }
        onBtnRClick() {
            this._ui.list.page++;
            this.setBtn();
        }
        updataView() {
            let fzCfg = FaZhengListProxy.Ins.getCfgById(BaoShiModel.Ins.mationId);
            let iCfg = ItemProxy.Ins.getCfg(fzCfg.f_itemid);
            this._ui.lab_fz.text = main.itemName(iCfg.f_name);
            this._baoshiCtl.setData(BaoShiModel.Ins.getEquipList(), true, BaoShiModel.Ins.mationId, false);
            this._baoshiAttrCtl.setData(BaoShiModel.Ins.getEquipList(), BaoShiModel.Ins.mationId);
            this._ui.lab_fzsm.text = BaoShiModel.Ins.getFZST(BaoShiModel.Ins.mationId);
        }
        setBtn() {
            let index = this._ui.list.page + 1;
            if (index <= 1) {
                this._ui.btn_l.disabled = true;
            }
            else {
                this._ui.btn_l.disabled = false;
            }
            if (index >= this._ui.list.totalPage) {
                this._ui.btn_r.disabled = true;
            }
            else {
                this._ui.btn_r.disabled = false;
            }
            if (this._ui.list.totalPage != 0) {
                this._ui.lab_page.text = index + "/" + this._ui.list.totalPage;
            }
            else {
                this._ui.lab_page.text = "1/1";
            }
        }
    }

    exports.BaoShiXQView = BaoShiXQView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FazhengDHItem1 extends ui.views.baoshi.ui_baoshiDHItemUI {
        constructor() {
            super();
            this.zhekouImg.visible = false;
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onClickHandler));
            this.on(Laya.Event.CLICK, this, this.onClick);
            this.freeTf.visible = false;
            this.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        onDisplay() {
            BaoShiModel.Ins.on(BaoShiModel.SELECT_MID, this, this.onSelect);
            BaoShiModel.Ins.on(BaoShiModel.FAZHENG_UPDATA, this, this.onFaZheng);
        }
        onUnDisplay() {
            BaoShiModel.Ins.off(BaoShiModel.SELECT_MID, this, this.onSelect);
            BaoShiModel.Ins.off(BaoShiModel.FAZHENG_UPDATA, this, this.onFaZheng);
        }
        onSelect() {
            if (this._data) {
                if (this._data.f_Formationid == BaoShiModel.Ins.selectMid) {
                    this.img_sel.visible = true;
                }
                else {
                    this.img_sel.visible = false;
                }
            }
        }
        onFaZheng() {
            if (BaoShiModel.Ins.mationIdList.indexOf(this._data.f_Formationid) != -1) {
                this.lab_yy.visible = true;
                this.btn.visible = false;
            }
            else {
                this.lab_yy.visible = false;
                this.btn.visible = true;
            }
        }
        onClick() {
            if (this._data) {
                if (BaoShiModel.Ins.selectMid != this._data.f_Formationid) {
                    BaoShiModel.Ins.selectMid = this._data.f_Formationid;
                    BaoShiModel.Ins.event(BaoShiModel.SELECT_MID);
                }
            }
        }
        onClickHandler() {
            if (this._data) {
                let arr = this._data.f_FormationPrice.split("-");
                MainModel.Ins.buy(parseInt(arr[0]), parseInt(arr[1]), this._data.f_itemid, 1, new Laya.Handler(this, this.okBuyHandler));
            }
        }
        okBuyHandler() {
            let req = new GemFormationBuy_req;
            req.id = this._data.f_Formationid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let cfg = FaZhengListProxy.Ins.getCfgById(value.f_Formationid);
            let itemVo = new ItemVo();
            itemVo.cfgId = cfg.f_itemid;
            itemVo.count = 1;
            ItemViewFactory.refreshSlot(this.item, itemVo, false);
            this.lab_name.text = itemVo.getName();
            let arr = value.f_FormationPrice.split("-");
            this.img.skin = IconUtils.getIconByCfgId(parseInt(arr[0]));
            this.lab.text = arr[1];
            if (value.f_Formationid == BaoShiModel.Ins.selectMid) {
                this.img_sel.visible = true;
            }
            else {
                this.img_sel.visible = false;
            }
            if (BaoShiModel.Ins.mationIdList.indexOf(this._data.f_Formationid) != -1) {
                this.lab_yy.visible = true;
                this.btn.visible = false;
            }
            else {
                this.lab_yy.visible = false;
                this.btn.visible = true;
            }
        }
    }

    exports.FazhengDHItem1 = FazhengDHItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FazhengDHLabel extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "FazhengDHLabel";
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ui.views.baoshi.ui_fazhengDHItemLabelUI);
            let vo = this.list[index];
            _skin.lab.text = vo;
            _skin.y = this.y;
            return _skin;
        }
    }
    class FazhengDHItem extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "FazhengDHItem";
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, FazhengDHItem1);
            _skin.setData(this.list[index]);
            _skin.x = index * _skin.width;
            _skin.y = this.y;
            return _skin;
        }
    }
    class FazhengDHView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('baoshi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.baoshi.ui_fazhengDHViewUI;
                this.bindClose(this._ui.btn_close);
                this._ui.btn_fz.visible = false;
                this.btnList.push(ButtonCtl.Create(this._ui.btn_fz, new Laya.Handler(this, this.onBtnFZClick)));
                this._baoshiCtl = new BaoShiViewItemCtl(this._ui.view_bs);
                this._panelCtl = new ScrollPanelControl();
                this._panelCtl.init(this._ui.panel);
            }
        }
        onBtnFZClick() {
            E.ViewMgr.Open(EViewType.FaZhengGHView);
        }
        onInit() {
            BaoShiModel.Ins.selectMid = 0;
            BaoShiModel.Ins.on(BaoShiModel.SELECT_MID, this, this.onSelectMid);
            this.updataView();
        }
        onExit() {
            this._panelCtl.clear();
            BaoShiModel.Ins.off(BaoShiModel.SELECT_MID, this, this.onSelectMid);
        }
        onSelectMid() {
            if (BaoShiModel.Ins.selectMid == BaoShiModel.Ins.mationId) {
                this.updataFZView(BaoShiModel.Ins.getEquipList(), BaoShiModel.Ins.mationId);
            }
            else {
                this.updataFZView([], BaoShiModel.Ins.selectMid);
            }
        }
        getDataList() {
            let fzmap = {};
            let array = [];
            let arr = FaZhengListProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                if (!fzmap[arr[i].f_formationQuality]) {
                    fzmap[arr[i].f_formationQuality] = [];
                }
                fzmap[arr[i].f_formationQuality].push(arr[i]);
            }
            for (let ele in fzmap) {
                let vo = {};
                if (parseInt(ele) == 1) {
                    vo.lab = "初级法阵";
                }
                else if (parseInt(ele) == 2) {
                    vo.lab = "中级法阵";
                }
                else {
                    vo.lab = "高级法阵";
                }
                vo.list = [];
                array.push(vo);
                let voo = {};
                voo.lab = "";
                voo.list = fzmap[ele];
                array.push(voo);
            }
            return array;
        }
        refreshPanel() {
            let arr = this.getDataList();
            this._panelCtl.clear();
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].lab != "") {
                    this._panelCtl.split([arr[i].lab], FazhengDHLabel, 28);
                }
                else {
                    let h = Math.ceil(arr[i].list.length / 3);
                    this._panelCtl.split(arr[i].list, FazhengDHItem, 225, 0, 3);
                }
            }
            this._panelCtl.end();
        }
        updataView() {
            let fzCfg;
            if (BaoShiModel.Ins.selectMid) {
                fzCfg = FaZhengListProxy.Ins.getCfgById(BaoShiModel.Ins.selectMid);
                this._baoshiCtl.setData([], false, BaoShiModel.Ins.selectMid);
                this._ui.lab_fzsm.text = "法阵加成：" + BaoShiModel.Ins.getFZST(BaoShiModel.Ins.selectMid);
            }
            else {
                fzCfg = FaZhengListProxy.Ins.getCfgById(BaoShiModel.Ins.mationId);
                this._baoshiCtl.setData(BaoShiModel.Ins.getEquipList(), false, BaoShiModel.Ins.mationId);
                this._ui.lab_fzsm.text = "法阵加成：" + BaoShiModel.Ins.getFZST(BaoShiModel.Ins.mationId);
            }
            let iCfg = ItemProxy.Ins.getCfg(fzCfg.f_itemid);
            this._ui.lab_fz.text = main.itemName(iCfg.f_name);
            this.refreshPanel();
        }
        updataFZView(list, id) {
            this._baoshiCtl.setData(list, false, id);
            this._ui.lab_fzsm.text = "法阵加成：" + BaoShiModel.Ins.getFZST(id);
        }
    }

    exports.FazhengDHView = FazhengDHView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FazhengGHItem extends ui.views.baoshi.ui_fazhengGHItemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
        }
        onBtnClick() {
            if (this._data) {
                MainModel.Ins.queryMsg("是否确定更换法阵", 0, 0, EQuickMsg.FaZhengGH, new Laya.Handler(this, this.onClickHandler));
            }
        }
        onClickHandler() {
            let req = new GemFormationChange_req;
            req.id = this._data.id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let cfg = FaZhengListProxy.Ins.getCfgById(value.id);
            let iCfg = ItemProxy.Ins.getCfg(cfg.f_itemid);
            this.lab_name.text = main.itemName(iCfg.f_name);
            this.quality.skin = IconUtils.getQuaIcon(iCfg.f_qua);
            this.icon.skin = IconUtils.getIconByCfgId(cfg.f_itemid);
            if (value.isSelect) {
                this.img_sel.visible = true;
            }
            else {
                this.img_sel.visible = false;
            }
            if (cfg.f_Formationid == BaoShiModel.Ins.mationId) {
                this.box.visible = true;
                this.btn.visible = false;
            }
            else {
                this.box.visible = false;
                if (value.isSelect) {
                    this.btn.visible = true;
                }
                else {
                    this.btn.visible = false;
                }
            }
        }
    }

    exports.FazhengGHItem = FazhengGHItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FazhengGHView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('baoshi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.baoshi.ui_fazhengGHViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_tj, new Laya.Handler(this, this.onBtnTJClick)));
                this._baoshiCtl = new BaoShiViewItemCtl(this._ui.view_bs);
                this._baoshiAttrCtl = new BaoShiAttrCtl(this._ui.view_attr);
                this._ui.list.itemRender = FazhengGHItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list.selectEnable = true;
                this._ui.list.selectHandler = new Laya.Handler(this, this.onSelectHandler);
            }
        }
        onInit() {
            BaoShiModel.Ins.on(BaoShiModel.BAOSHI_UPDATA, this, this.onUpdataView);
            BaoShiModel.Ins.on(BaoShiModel.DEFFAZHENG_UPDATA, this, this.onUpdataView);
            this.updataView();
        }
        onExit() {
            this._ui.list.selectedIndex = -1;
            BaoShiModel.Ins.off(BaoShiModel.BAOSHI_UPDATA, this, this.onUpdataView);
            BaoShiModel.Ins.off(BaoShiModel.DEFFAZHENG_UPDATA, this, this.onUpdataView);
        }
        onUpdataView() {
            Laya.timer.callLater(this, this.updataView);
        }
        onBtnTJClick() {
            E.ViewMgr.Open(EViewType.BaoShiTJView);
        }
        onSelectHandler(index) {
            if (index == -1) {
                return;
            }
            for (let i = 0; i < this._ui.list.array.length; i++) {
                if (index == i) {
                    this._ui.list.array[i].isSelect = true;
                }
                else {
                    this._ui.list.array[i].isSelect = false;
                }
            }
            if (this._ui.list.array[index].id == BaoShiModel.Ins.mationId) {
                this._baoshiCtl.setData(BaoShiModel.Ins.getEquipList(), false, BaoShiModel.Ins.mationId);
                this._baoshiAttrCtl.setData(BaoShiModel.Ins.getEquipList(), BaoShiModel.Ins.mationId);
                this._ui.lab_fzsm.text = "法阵加成：" + BaoShiModel.Ins.getFZST(BaoShiModel.Ins.mationId);
            }
            else {
                this._baoshiCtl.setData([], false, this._ui.list.array[index].id);
                this._baoshiAttrCtl.setData([], 1);
                this._ui.lab_fzsm.text = "法阵加成：" + BaoShiModel.Ins.getFZST(this._ui.list.array[index].id);
            }
            this._ui.list.refresh();
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        updataView() {
            this._baoshiCtl.setData(BaoShiModel.Ins.getEquipList(), false, BaoShiModel.Ins.mationId);
            this._baoshiAttrCtl.setData(BaoShiModel.Ins.getEquipList(), BaoShiModel.Ins.mationId);
            this._ui.lab_fzsm.text = "法阵加成：" + BaoShiModel.Ins.getFZST(BaoShiModel.Ins.mationId);
            BaoShiModel.Ins.mationIdList.sort(this.onSort);
            let index = 0;
            let arr = [];
            for (let i = 0; i < BaoShiModel.Ins.mationIdList.length; i++) {
                arr.push({ id: BaoShiModel.Ins.mationIdList[i], isSelect: false });
                if (BaoShiModel.Ins.mationIdList[i] == BaoShiModel.Ins.mationId) {
                    index = i;
                }
            }
            this._ui.list.array = arr;
            this._ui.list.selectedIndex = index;
        }
        onSort(a, b) {
            if (a > b) {
                return -1;
            }
            else if (a < b) {
                return 1;
            }
            else {
                return 0;
            }
        }
    }

    exports.FazhengGHView = FazhengGHView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new BaoShiModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            BaoShiModel.Ins.gemList = [];
            BaoShiModel.Ins.mationIdList = [];
            BaoShiModel.Ins.mationId = 0;
            BaoShiModel.Ins.lifeBloodList = [];
        }
        initMsg() {
            this.Reg(new BaoShiMainView(EViewType.BaoShiMainView));
            this.Reg(new BaoShiXQView(EViewType.BaoShiXQView));
            this.Reg(new BaoShiDHView(EViewType.BaoShiDHView));
            this.Reg(new BaoShiGMView(EViewType.BaoShiGMView));
            this.Reg(new BaoShiTJView(EViewType.BaoShiTJView));
            this.Reg(new FazhengGHView(EViewType.FaZhengGHView));
            this.Reg(new FazhengDHView(EViewType.FaZhengDHView));
            this.Reg(new BaoShiHCView(EViewType.BaoShiHCView));
            this.Reg(new BaoShiAutoHCTip(EViewType.BaoShiAutoHCView));
            this.Reg(new BaoShiGongMingView(EViewType.BaoShiGongMingView));
            E.MsgMgr.AddMsg(MSGID.GemInit, this.GemInit, this);
            E.MsgMgr.AddMsg(MSGID.GemBuy, this.GemBuy, this);
            E.MsgMgr.AddMsg(MSGID.GemChange, this.GemChange, this);
            E.MsgMgr.AddMsg(MSGID.GemRemove, this.GemRemove, this);
            E.MsgMgr.AddMsg(MSGID.GemFormationBuy, this.GemFormationBuy, this);
            E.MsgMgr.AddMsg(MSGID.GemFormationChange, this.GemFormationChange, this);
            E.MsgMgr.AddMsg(MSGID.GemHandler, this.GemHandler, this);
            E.MsgMgr.AddMsg(MSGID.GemFreeChange, this.GemFreeChange, this);
            E.MsgMgr.AddMsg(MSGID.GemLifeBlood, this.GemLifeBlood, this);
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.ValChangeCell, this, this.onValChange);
        }
        onValChange(id) {
            let arr = System_RefreshTimeProxy.Ins.getVal(18).split("|");
            if (arr.indexOf(id.toString()) != -1) {
                this.onMainViewInit();
            }
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (BaoShiModel.Ins.isResDot()) {
                DotManager.addMainDot("icon6", -20, -5);
            }
            else {
                DotManager.remMainDot("icon6");
            }
        }
        GemInit(value) {
            BaoShiModel.Ins.gemList = value.datalist;
            BaoShiModel.Ins.mationIdList = value.formationIds;
            BaoShiModel.Ins.mationId = value.defaultFormationId;
            BaoShiModel.Ins.lifeBloodList = value.lifeBloodList;
        }
        GemBuy() {
            E.ViewMgr.Close(EViewType.BaoShiGMView);
        }
        GemChange(value) {
            for (let i = 0; i < value.datalist.length; i++) {
                let index = BaoShiModel.Ins.gemList.findIndex(ele => ele.uid.toNumber() == value.datalist[i].uid.toNumber());
                if (index != -1) {
                    BaoShiModel.Ins.gemList[index] = value.datalist[i];
                }
                else {
                    BaoShiModel.Ins.gemList.push(value.datalist[i]);
                }
            }
            BaoShiModel.Ins.event(BaoShiModel.BAOSHI_UPDATA);
        }
        GemRemove(value) {
            for (let i = 0; i < value.datalist.length; i++) {
                let index = BaoShiModel.Ins.gemList.findIndex(ele => ele.uid.toNumber() == value.datalist[i].toNumber());
                if (index != -1) {
                    BaoShiModel.Ins.gemList.splice(index, 1);
                }
            }
            BaoShiModel.Ins.event(BaoShiModel.BAOSHI_UPDATA);
        }
        GemFormationBuy(value) {
            BaoShiModel.Ins.mationIdList = value.datalist;
            BaoShiModel.Ins.event(BaoShiModel.FAZHENG_UPDATA);
        }
        GemFormationChange(value) {
            BaoShiModel.Ins.mationId = value.defaultFormationId;
            BaoShiModel.Ins.event(BaoShiModel.DEFFAZHENG_UPDATA);
        }
        GemHandler(value) {
            BaoShiModel.Ins.event(BaoShiModel.BAOSHI_HC, value);
        }
        GemFreeChange(value) {
            var _a;
            const free = ((_a = BaoShiShopProxy.Ins.List.find(o => o.f_freetimes > 0)) === null || _a === void 0 ? void 0 : _a.f_freetimes) || 0;
            BaoShiModel.Ins.freeNum = free - value.freeCount;
            BaoShiModel.Ins.event(BaoShiModel.GemFreeChange, value);
        }
        GemLifeBlood(value) {
            for (let i = 0; i < value.lifeBloodList.length; i++) {
                let index = BaoShiModel.Ins.lifeBloodList.findIndex(ele => ele.id === value.lifeBloodList[i].id);
                if (index != -1) {
                    BaoShiModel.Ins.lifeBloodList[index] = value.lifeBloodList[i];
                }
            }
            BaoShiModel.Ins.event(BaoShiModel.lifeBloodChange);
            this.onMainViewInit();
        }
    }

    exports.BaoShiModule = BaoShiModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChatConfigProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new ChatConfigProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chat_Config";
        }
        getCfg() {
            return this.List[0];
        }
    }

    exports.ChatConfigProxy = ChatConfigProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChatMyItem extends ui.views.chat.ui_chatMyItemUI {
        constructor() {
            super();
            this.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        onDisplay() {
        }
        onUnDisplay() {
        }
        setData(value) {
            if (!value)
                return;
            MainModel.Ins.setTTHead(this.icon, MainModel.Ins.convertHead(value.headUrl));
            this.img_title.skin = ChengHaoModel.Ins.getTitleImg(value.titleId);
            this.lab.text = value.chat;
            this.img_bg.width = this.lab.textField.textWidth + 32;
            this.img_bg.height = this.lab.textField.textHeight + 28;
            if (this.lab.textField.textHeight > (this.lab.fontSize + this.lab.leading)) {
                this.lab.align = "left";
                this.lab.x = 15;
            }
            else {
                this.lab.align = "right";
                this.lab.x = 6;
            }
        }
    }

    exports.ChatMyItem = ChatMyItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChatOtherItem extends ui.views.chat.ui_chatOtherItemUI {
        constructor() {
            super();
            this.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
            ButtonCtl.Create(this.bg, new Laya.Handler(this, this.onBgClick), false);
        }
        onBgClick() {
            if (this._data) {
                ChatModel.Ins.isChat = true;
                let req = new JustWatchPlayer_req();
                req.playerId = this._data.playerId;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onDisplay() {
        }
        onUnDisplay() {
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            MainModel.Ins.setTTHead(this.icon, MainModel.Ins.convertHead(value.headUrl));
            this.lab_name.text = value.name;
            this.img_title.skin = ChengHaoModel.Ins.getTitleImg(value.titleId);
            this.img_title.x = this.lab_name.x + this.lab_name.textField.textWidth + 2;
            this.lab.text = value.chat;
            this.img_bg.width = this.lab.textField.textWidth + 32;
            this.img_bg.height = this.lab.textField.textHeight + 28;
        }
    }

    exports.ChatOtherItem = ChatOtherItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChatTimeItem extends ui.views.chat.ui_chatTimeItemUI {
        constructor() {
            super();
            this.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        onDisplay() {
        }
        onUnDisplay() {
        }
        setData(value) {
            if (!value)
                return;
            this.lab.text = TimeUtil.timestamtoTime2(value);
        }
    }

    exports.ChatTimeItem = ChatTimeItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChatTimeItemNode extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "ChatTimeItemNode";
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ChatTimeItem);
            _skin.setData(this.list[index]);
            _skin.y = this.y;
            return _skin;
        }
    }
    class ChatMyItemNode extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "ChatMyItemNode";
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ChatMyItem);
            _skin.setData(this.list[index].data);
            _skin.height = this.list[index].h;
            _skin.y = this.y;
            return _skin;
        }
    }
    class ChatOtherItemNode extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "ChatOtherItemNode";
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ChatOtherItem);
            _skin.setData(this.list[index].data);
            _skin.height = this.list[index].h;
            _skin.y = this.y;
            return _skin;
        }
    }
    class ChatView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this._panelCtl = new ScrollPanelControl();
            this._time = 0;
        }
        onAddLoadRes() {
            this.addAtlas('chat.atlas');
            this.addAtlas("jjc.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.chat.ui_chatViewUI;
                this.bindClose(this._ui.close1);
                this._ui.input.maxChars = ChatConfigProxy.Ins.getCfg().f_maxcount;
                this._panelCtl.init(this._ui.panel);
                ButtonCtl.Create(this._ui.img_kq, new Laya.Handler(this, this.onBtnKQClick), false);
                ButtonCtl.Create(this._ui.img_tm, new Laya.Handler(this, this.onBtnLeagueClick), false);
                ButtonCtl.Create(this._ui.img_sj, new Laya.Handler(this, this.onBtnWorldClick), false);
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
            }
        }
        onInit() {
            this._type = 0;
            this._isEnter = false;
            ChatModel.Ins.on(ChatModel.UPDATA_VIEW, this, this.onUpdataView);
            this.onBtnWorldClick();
        }
        onExit() {
            ChatModel.Ins.off(ChatModel.UPDATA_VIEW, this, this.onUpdataView);
        }
        onUpdataView() {
            if (this._isEnter) {
                this.updataView();
                this._isEnter = false;
            }
            else {
                if (this._ui.panel.vScrollBar.value >= this._ui.panel.vScrollBar.max) {
                    this.updataView();
                }
                else {
                    this.updataView(false);
                }
            }
        }
        onBtnClick() {
            let time = ChatConfigProxy.Ins.getCfg().f_pertextCD * 1000;
            if (Laya.timer.currTimer - this._time < time) {
                E.ViewMgr.ShowMidError("发送太快 请稍后再试");
                return;
            }
            this._time = Laya.timer.currTimer;
            let req = new WorldChat_req;
            req.chat = this._ui.input.textField.text;
            req.emojiId = 0;
            req.type = this._type;
            SocketMgr.Ins.SendMessageBin(req);
            this._ui.input.text = "";
            this._isEnter = true;
        }
        onBtnKQClick() {
            if (this._type == 1)
                return;
            this._ui.img_kq.skin = "remote/chat/sj.png";
            this._ui.lab_kq.color = "#F2E1C2";
            this._ui.img_tm.skin = "remote/chat/tm.png";
            this._ui.lab_tm.color = "#B1723D";
            this._ui.img_sj.skin = "remote/chat/tm.png";
            this._ui.lab_sj.color = "#B1723D";
            this._ui.input.prompt = "点击输入内容";
            this._type = 1;
            this.updataView();
        }
        onBtnWorldClick() {
            if (this._type == 3)
                return;
            this._ui.img_sj.skin = "remote/chat/sj.png";
            this._ui.lab_sj.color = "#F2E1C2";
            this._ui.img_kq.skin = "remote/chat/tm.png";
            this._ui.lab_kq.color = "#B1723D";
            this._ui.img_tm.skin = "remote/chat/tm.png";
            this._ui.lab_tm.color = "#B1723D";
            let cny = System_RefreshTimeProxy.Ins.getVal(80);
            if (cny == "") {
                this._ui.input.prompt = "点击输入内容";
            }
            else {
                let num = LiBaoModel.Ins.PlayerTotalCnt;
                if (num >= parseInt(cny)) {
                    this._ui.input.prompt = "点击输入内容";
                }
                else {
                    this._ui.input.prompt = E.getLang("naming_charge_15", (num / 100) + "/" + (parseInt(cny) / 100));
                }
            }
            this._type = 3;
            this.updataView();
        }
        onBtnLeagueClick() {
            if (!AllianceModel.Ins.alliance) {
                E.ViewMgr.ShowMidError("请先加入联盟");
                return;
            }
            if (this._type == 2)
                return;
            this._ui.img_tm.skin = "remote/chat/sj.png";
            this._ui.lab_tm.color = "#F2E1C2";
            this._ui.img_kq.skin = "remote/chat/tm.png";
            this._ui.lab_kq.color = "#B1723D";
            this._ui.img_sj.skin = "remote/chat/tm.png";
            this._ui.lab_sj.color = "#B1723D";
            this._ui.input.prompt = "点击输入内容";
            this._type = 2;
            this.updataView();
        }
        updataView(flag = true) {
            let arr = this.getList();
            this._panelCtl.clear();
            let hh = 0;
            for (let i = 0; i < arr.length; i++) {
                let type = arr[i].type;
                let data = arr[i].data;
                if (type == 1) {
                    hh = 22;
                    this._panelCtl.split([data], ChatTimeItemNode, 22, 20);
                }
                else if (type == 2) {
                    let h = this.getHeight(data.chat);
                    hh = h;
                    this._panelCtl.split([{ data: data, h: h }], ChatMyItemNode, h, 20);
                }
                else if (type == 3) {
                    let h = this.getHeight(data.chat);
                    hh = h;
                    this._panelCtl.split([{ data: data, h: h }], ChatOtherItemNode, h, 20);
                }
            }
            Laya.timer.callLater(this, () => {
                if (flag) {
                    this._panelCtl.endLast();
                }
                else {
                    this._panelCtl.end(this._panelCtl.getScrollValue() - (hh + 20));
                }
            });
        }
        getHeight(st) {
            let num = 106;
            this._ui.lab.text = st;
            let h = (this._ui.lab.fontSize + this._ui.lab.leading);
            let hh = 36;
            if (this._ui.lab.textField.textHeight <= h) {
                num = num + hh * 0;
            }
            else if (this._ui.lab.textField.textHeight <= h * 2) {
                num = num + hh * 1;
            }
            else if (this._ui.lab.textField.textHeight <= h * 3) {
                num = num + hh * 2;
            }
            else if (this._ui.lab.textField.textHeight <= h * 4) {
                num = num + hh * 3;
            }
            return num;
        }
        getList() {
            let arr;
            if (this._type == 1) {
                arr = ChatModel.Ins.chatKQList;
            }
            else if (this._type == 2) {
                arr = ChatModel.Ins.chatLeagueList;
            }
            else if (this._type == 3) {
                arr = ChatModel.Ins.chatWorldList;
            }
            let array = [];
            let cfg = ChatConfigProxy.Ins.getCfg();
            for (let i = 0; i < arr.length; i++) {
                let obj = {};
                if (i == 0) {
                    obj.type = 1;
                    obj.data = arr[i].unix;
                    array.push(obj);
                    obj = {};
                    if (arr[i].playerId == MainModel.Ins.mRoleData.mPlayer.AccountId) {
                        obj.type = 2;
                        obj.data = arr[i];
                        array.push(obj);
                    }
                    else {
                        obj.type = 3;
                        obj.data = arr[i];
                        array.push(obj);
                    }
                }
                else {
                    if (arr[i].unix - arr[i - 1].unix > cfg.f_timestage) {
                        obj.type = 1;
                        obj.data = arr[i].unix;
                        array.push(obj);
                        obj = {};
                        if (arr[i].playerId == MainModel.Ins.mRoleData.mPlayer.AccountId) {
                            obj.type = 2;
                            obj.data = arr[i];
                            array.push(obj);
                        }
                        else {
                            obj.type = 3;
                            obj.data = arr[i];
                            array.push(obj);
                        }
                    }
                    else {
                        if (arr[i].playerId == MainModel.Ins.mRoleData.mPlayer.AccountId) {
                            obj.type = 2;
                            obj.data = arr[i];
                            array.push(obj);
                        }
                        else {
                            obj.type = 3;
                            obj.data = arr[i];
                            array.push(obj);
                        }
                    }
                }
            }
            return array;
        }
    }

    exports.ChatView = ChatView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChatModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new ChatModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            ChatModel.Ins.chatKQList = [];
            ChatModel.Ins.chatLeagueList = [];
            ChatModel.Ins.chatWorldList = [];
        }
        initMsg() {
            this.Reg(new ChatView(EViewType.ChatView));
            E.MsgMgr.AddMsg(MSGID.WorldChatList, this.WorldChatList, this);
            E.MsgMgr.AddMsg(MSGID.WorldChatListChange, this.WorldChatListChange, this);
        }
        WorldChatList(value) {
            ChatModel.Ins.setList(value.datalist);
        }
        WorldChatListChange(value) {
            let cfg = ChatConfigProxy.Ins.getCfg();
            for (let i = 0; i < value.datalist.length; i++) {
                if (value.datalist[i].type == 1) {
                    if (ChatModel.Ins.chatKQList.length >= cfg.f_maxmessage) {
                        ChatModel.Ins.chatKQList.shift();
                    }
                    ChatModel.Ins.chatKQList.push(value.datalist[i]);
                }
                else if (value.datalist[i].type == 2) {
                    if (ChatModel.Ins.chatLeagueList.length >= cfg.f_maxmessage) {
                        ChatModel.Ins.chatLeagueList.shift();
                    }
                    ChatModel.Ins.chatLeagueList.push(value.datalist[i]);
                }
                else if (value.datalist[i].type == 3) {
                    if (ChatModel.Ins.chatWorldList.length >= cfg.f_maxmessage) {
                        ChatModel.Ins.chatWorldList.shift();
                    }
                    ChatModel.Ins.chatWorldList.push(value.datalist[i]);
                    ChatModel.Ins.event(ChatModel.UPDATA_MAIN_VIEW, ChatModel.Ins.chatWorldList[ChatModel.Ins.chatWorldList.length - 1]);
                }
            }
            ChatModel.Ins.event(ChatModel.UPDATA_VIEW);
        }
    }

    exports.ChatModule = ChatModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChengHaoItem extends ui.views.chenghao.ui_chenghaoItemUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClick);
            this.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        onDisplay() {
            ChengHaoModel.Ins.on(ChengHaoModel.SELECT_CH, this, this.onSelect);
        }
        onUnDisplay() {
            ChengHaoModel.Ins.off(ChengHaoModel.SELECT_CH, this, this.onSelect);
        }
        onSelect() {
            if (this._data) {
                if (this._data.f_titleid == ChengHaoModel.Ins.selectCh) {
                    this.img_sel.visible = true;
                }
                else {
                    this.img_sel.visible = false;
                }
            }
        }
        onClick() {
            if (this._data) {
                if (ChengHaoModel.Ins.selectCh != this._data.f_titleid) {
                    ChengHaoModel.Ins.selectCh = this._data.f_titleid;
                    let ind = ChengHaoModel.Ins.newTitleList.findIndex(ele => ele.titleId === this._data.f_titleid);
                    if (ind != -1) {
                        if (ChengHaoModel.Ins.newTitleList[ind].isSelect == false) {
                            ChengHaoModel.Ins.newTitleList[ind].isSelect = true;
                            DotManager.removeDot(this);
                        }
                    }
                    ChengHaoModel.Ins.event(ChengHaoModel.SELECT_CH);
                }
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            if (this._data.f_titleid == ChengHaoModel.Ins.selectCh) {
                this.img_sel.visible = true;
            }
            else {
                this.img_sel.visible = false;
            }
            let index = ChengHaoModel.Ins.titleList.findIndex(ele => ele.titleId == value.f_titleid);
            if (index == -1) {
                this.img.gray = this.bg.gray = true;
            }
            else {
                this.img.gray = this.bg.gray = false;
            }
            this.img.skin = "o/title/" + value.f_titlePic;
            let ind = ChengHaoModel.Ins.newTitleList.findIndex(ele => ele.titleId === value.f_titleid);
            if (ind != -1) {
                if (ChengHaoModel.Ins.newTitleList[ind].isSelect == false) {
                    DotManager.addDot(this);
                }
                else {
                    DotManager.removeDot(this);
                }
            }
            else {
                DotManager.removeDot(this);
            }
        }
    }

    exports.ChengHaoItem = ChengHaoItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChengHaoPanLabel extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "ChengHaoPanLabel";
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ui.views.chenghao.ui_chenghaoItem1UI);
            let vo = this.list[index];
            _skin.lab1.text = vo.split("|")[0];
            _skin.lab.text = vo.split("|")[1];
            _skin.y = this.y;
            return _skin;
        }
    }
    class ChengHaoPanItem extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "ChengHaoPanItem";
        }
        createNode(index) {
            let vo = this.list[index];
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ChengHaoItem);
            _skin.setData(vo);
            _skin.y = this.y;
            return _skin;
        }
    }
    class ChengHaoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this._panelCtl = new ScrollPanelControl();
        }
        onAddLoadRes() {
            this.addAtlas('chenghao.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.chenghao.ui_chenghaoUI;
                this.bindClose(this._ui.btn_close);
                const tabsSkin = [this._ui.tab1, this._ui.tab2];
                this.tabList = ["称号", "荣耀"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._panelCtl.init(this._ui.panel);
                ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick));
                ButtonCtl.Create(this._ui.btn_pd, new Laya.Handler(this, this.onBtnPDClick));
                ButtonCtl.Create(this._ui.btn_lq, new Laya.Handler(this, this.onBtnLQClick));
                this._ui.list.itemRender = ui.views.chenghao.ui_chenghaoAttrItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list1.itemRender = ui.views.chenghao.ui_chenghaoAttrItemUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
                this._ui.list3.itemRender = ui.views.chenghao.ui_chenghaoItem2UI;
                this._ui.list3.renderHandler = new Laya.Handler(this, this.onRenderHandler3);
                this._ui.list4.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list4.renderHandler = new Laya.Handler(this, this.onRenderHandler4);
                this.timeCtl = new TimeCtl(this._ui.lab_djs);
                let rightCtl = new TriangleHideCtl();
                rightCtl.oneRow = 2;
                this.rightCtl = rightCtl;
                rightCtl.bind(this._ui.list1, this._ui.sj);
            }
        }
        onRenderHandler(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
        }
        onRenderHandler1(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("chenghaoTitle", "chenghaoDec");
        }
        onBtnPDClick() {
            let req = new TitleChange_req;
            req.titleId = ChengHaoModel.Ins.selectCh;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onTabSelectHandler(v) {
            switch (v) {
                case 0:
                    this._ui.chenghao.visible = true;
                    this._ui.rongyao.visible = false;
                    break;
                case 1:
                    this._ui.chenghao.visible = false;
                    this._ui.rongyao.visible = true;
                    break;
            }
            this._ui.title.text = this.tabList[v];
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.txt.text = this.tabList[index];
            if (sel) {
                skin.img1.visible = false;
                skin.img2.visible = true;
                skin.txt.color = "#A1572F";
            }
            else {
                skin.img1.visible = true;
                skin.img2.visible = false;
                skin.txt.color = "#e4bb87";
            }
        }
        onInit() {
            ChengHaoModel.Ins.on(ChengHaoModel.SELECT_CH, this, this.onUpdataSelCH);
            ChengHaoModel.Ins.on(ChengHaoModel.UPDATA_CHENGHAO, this, this.onUpdataCH);
            ChengHaoModel.Ins.on(ChengHaoModel.UPDATA_VIEW, this, this.updataView);
            ChengHaoModel.Ins.on(ChengHaoModel.UPDATA_VIEW_AWARD, this, this.updataRongYaoView);
            this.tabsCtl.selectIndex = 0;
            ChengHaoModel.Ins.selectCh = ChengHaoModel.Ins.titleList[0].titleId;
            let req = new TitleRefresh_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            ChengHaoModel.Ins.off(ChengHaoModel.SELECT_CH, this, this.onUpdataSelCH);
            ChengHaoModel.Ins.off(ChengHaoModel.UPDATA_CHENGHAO, this, this.onUpdataCH);
            ChengHaoModel.Ins.off(ChengHaoModel.UPDATA_VIEW, this, this.updataView);
            ChengHaoModel.Ins.off(ChengHaoModel.UPDATA_VIEW_AWARD, this, this.updataRongYaoView);
            this.timeCtl.stop();
        }
        onUpdataCH() {
            this._ui.lab_pd.visible = true;
            this._ui.btn_pd.visible = false;
            this._ui.img_ch.skin = MainModel.Ins.getTitleImg();
        }
        onUpdataSelCH() {
            if (ChengHaoModel.Ins.isNewCHRedTip()) {
                DotManager.addDot(this._ui.tab1);
            }
            else {
                DotManager.removeDot(this._ui.tab1);
            }
            let cfg = ChengHaoListProxy.Ins.getCfgByID(ChengHaoModel.Ins.selectCh);
            if (cfg.f_titleAttribute) {
                this._ui.list.array = cfg.f_titleAttribute.split("|");
            }
            else {
                this._ui.list.array = [];
            }
            this._ui.lab_tj.text = cfg.f_titleDec;
            let index = ChengHaoModel.Ins.titleList.findIndex(ele => ele.titleId == ChengHaoModel.Ins.selectCh);
            if (index == -1) {
                this._ui.btn_pd.visible = false;
                this._ui.lab_pd.visible = false;
                this.timeCtl.stop();
                this.endTime();
                if (cfg.f_titleduration) {
                    this._ui.lab_time.text = "获得后有效期" + cfg.f_titleduration + "天";
                }
                else {
                    this._ui.lab_time.text = "";
                }
            }
            else {
                this._ui.lab_time.text = "";
                if (ChengHaoModel.Ins.selectCh == ChengHaoModel.Ins.wearedTitleId) {
                    this._ui.lab_pd.visible = true;
                    this._ui.btn_pd.visible = false;
                }
                else {
                    this._ui.lab_pd.visible = false;
                    this._ui.btn_pd.visible = true;
                }
                if (cfg.f_titleduration) {
                    let time = ChengHaoModel.Ins.titleList[index].endTime - TimeUtil.serverTime;
                    if (time > 0) {
                        this.timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                    }
                    else {
                        this.timeCtl.stop();
                        this.endTime();
                    }
                }
                else {
                    this.timeCtl.stop();
                    this.endTime();
                }
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(time_str + "后消失");
        }
        endTime() {
            this._ui.lab_djs.text = "";
        }
        updataView() {
            this.updataChengHaoView();
            this.updataRongYaoView();
        }
        updataChengHaoView() {
            this.refreshPanel();
            this.onUpdataSelCH();
            this._ui.img_ch.skin = MainModel.Ins.getTitleImg();
            let str = "";
            for (let i = 0; i < ChengHaoModel.Ins.titleList.length; i++) {
                let cfg = ChengHaoListProxy.Ins.getCfgByID(ChengHaoModel.Ins.titleList[i].titleId);
                if (cfg.f_titleAttribute) {
                    let arr = cfg.f_titleAttribute.split("|");
                    for (let j = 0; j < arr.length; j++) {
                        let attArr = arr[j].split("-");
                        str += attArr[0] + ":" + attArr[1] + "|";
                    }
                }
            }
            if (str.length > 0) {
                str = str.substr(0, str.length - 1);
            }
            let array = PlayerVoFactory.mergeAttr(str);
            this._ui.list1.array = array;
            this._ui.list1.scrollTo(0);
            this.rightCtl.onChangeEvt();
        }
        refreshPanel() {
            let arr = this.getDataList();
            this._panelCtl.clear();
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].lab != "") {
                    this._panelCtl.split([arr[i].lab], ChengHaoPanLabel, 38);
                }
                else {
                    this._panelCtl.split(arr[i].list, ChengHaoPanItem, 82, -10);
                }
            }
            this._panelCtl.end();
        }
        getDataList() {
            let array = [];
            let arr1 = [];
            let arr2 = [];
            let arr = ChengHaoListProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                let index = ChengHaoModel.Ins.titleList.findIndex(ele => ele.titleId == arr[i].f_titleid);
                if (index != -1) {
                    arr1.push(arr[i]);
                }
                else {
                    arr2.push(arr[i]);
                }
            }
            let vo = {};
            vo.lab = "已获得|(" + arr1.length + "/" + arr.length + ")";
            vo.list = [];
            array.push(vo);
            vo = {};
            vo.lab = "";
            vo.list = arr1;
            array.push(vo);
            vo = {};
            vo.lab = "未获得|(" + arr2.length + "/" + arr.length + ")";
            vo.list = [];
            array.push(vo);
            vo = {};
            vo.lab = "";
            vo.list = arr2;
            array.push(vo);
            return array;
        }
        onRenderHandler3(item) {
            let id = parseInt(item.dataSource.cfg.split("-")[0]);
            let val = parseInt(item.dataSource.cfg.split("-")[1]);
            let cfg = ChengHaoTaskTypeProxy.Ins.getCfgByID(id);
            let str = "";
            if (cfg.f_IsCh == 1) {
                str = StringUtil.toChinesNum(val);
            }
            else if (cfg.f_IsCh == 2) {
                str = AdventureLevelProxy.Ins.getAdventureTaskName(val);
            }
            else {
                str = val.toString();
            }
            item.lab.text = t_Txt_Config.Ins.replace(StringUtil.format(cfg.f_TitleName, str));
            let count;
            if (parseInt(item.dataSource.val) >= val) {
                count = val;
            }
            else {
                count = parseInt(item.dataSource.val);
            }
            item.lab_num.text = count + "/" + val;
            let t = count / val;
            if (t > 1) {
                t = 1;
            }
            item.pro.width = t * 527;
        }
        onRenderHandler4(item) {
            let vo = new ItemVo();
            vo.cfgId = parseInt(item.dataSource.split("-")[0]);
            vo.count = parseInt(item.dataSource.split("-")[1]);
            ItemViewFactory.refreshSlot(item, vo);
        }
        onBtnLQClick() {
            let req = new TitleReward_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        updataRongYaoView() {
            if (ChengHaoModel.Ins.isNewCHRedTip()) {
                DotManager.addDot(this._ui.tab1);
            }
            else {
                DotManager.removeDot(this._ui.tab1);
            }
            if (ChengHaoModel.Ins.isAwardRedTip()) {
                DotManager.addDot(this._ui.tab2);
            }
            else {
                DotManager.removeDot(this._ui.tab2);
            }
            if (ChengHaoModel.Ins.taskTitleId == 0) {
                this._ui.sp_rw.visible = true;
                this._ui.sp_renwu.visible = false;
                let c = ChengHaoTaskProxy.Ins.List[ChengHaoTaskProxy.Ins.List.length - 1];
                let cc = ChengHaoListProxy.Ins.getCfgByID(c.f_titleid);
                if (cc) {
                    this._ui.img_ch2.skin = "o/title/" + cc.f_titlePic;
                }
            }
            else {
                this._ui.sp_rw.visible = false;
                this._ui.sp_renwu.visible = true;
                let cfg = ChengHaoTaskProxy.Ins.getCfgByID(ChengHaoModel.Ins.taskTitleId);
                let arr = cfg.f_titlesubtask.split("|");
                let array = [];
                let num = 0;
                for (let i = 0; i < arr.length; i++) {
                    let obj = {};
                    obj.cfg = arr[i];
                    obj.val = ChengHaoModel.Ins.vals[i];
                    array.push(obj);
                    let val = arr[i].split("-")[1];
                    if (ChengHaoModel.Ins.vals[i] >= parseInt(val)) {
                        num++;
                    }
                }
                this._ui.list3.array = array;
                this._ui.img_st1.visible = this._ui.img_st2.visible = this._ui.img_st3.visible = false;
                for (let i = 0; i < num; i++) {
                    this._ui["img_st" + (i + 1)].visible = true;
                }
                this._ui.list4.array = cfg.f_taskrewards.split("|");
                let chcfg = ChengHaoListProxy.Ins.getCfgByID(ChengHaoModel.Ins.taskTitleId);
                this._ui.img_ch1.skin = "o/title/" + chcfg.f_titlePic;
                let tcfg = ChengHaoListProxy.Ins.getCfgByID(cfg.f_titleshow);
                if (tcfg) {
                    this._ui.img_ch2.skin = "o/title/" + tcfg.f_titlePic;
                }
                if (ChengHaoModel.Ins.state) {
                    this._ui.btn_lq.disabled = false;
                    DotManager.addDot(this._ui.btn_lq);
                }
                else {
                    this._ui.btn_lq.disabled = true;
                    DotManager.removeDot(this._ui.btn_lq);
                }
            }
        }
    }

    exports.ChengHaoView = ChengHaoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChengHaoModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new ChengHaoModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            ChengHaoModel.Ins.newTitleList = [];
        }
        initMsg() {
            this.Reg(new ChengHaoView(EViewType.CHENGHAO));
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            ChengHaoModel.Ins.on(ChengHaoModel.SELECT_CH, this, this.onMainViewInit);
            E.MsgMgr.AddMsg(MSGID.TitleInfo, this.TitleInfo, this);
            E.MsgMgr.AddMsg(MSGID.TitleStateUpdate, this.TitleStateUpdate, this);
            E.MsgMgr.AddMsg(MSGID.TitleUpdate, this.TitleUpdate, this);
            E.MsgMgr.AddMsg(MSGID.TitleReward, this.TitleReward, this);
            E.MsgMgr.AddMsg(MSGID.TitleChange, this.TitleChange, this);
            E.MsgMgr.AddMsg(MSGID.TitleExpire, this.TitleExpire, this);
            E.MsgMgr.AddMsg(MSGID.TitleRefresh, this.TitleRefresh, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            let view = E.ViewMgr.Get(EViewType.Main);
            if (view) {
                if (ChengHaoModel.Ins.isRedTip()) {
                    view.setTitleRed(true);
                }
                else {
                    view.setTitleRed(false);
                }
            }
        }
        TitleInfo(value) {
            ChengHaoModel.Ins.titleList = value.titleList;
            ChengHaoModel.Ins.wearedTitleId = value.wearedTitleId;
            ChengHaoModel.Ins.state = value.state;
            ChengHaoModel.Ins.newTitleList = [];
            this.onMainViewInit();
        }
        TitleUpdate(value) {
            for (let i = 0; i < value.titleList.length; i++) {
                ChengHaoModel.Ins.titleList.push(value.titleList[i]);
                let index = ChengHaoModel.Ins.newTitleList.findIndex(ele => ele.titleId === value.titleList[i].titleId);
                if (index != -1) {
                    ChengHaoModel.Ins.newTitleList[index].isSelect = false;
                }
                else {
                    let obj = {};
                    obj.titleId = value.titleList[i].titleId;
                    obj.isSelect = false;
                    ChengHaoModel.Ins.newTitleList.push(obj);
                }
            }
            ChengHaoModel.Ins.event(ChengHaoModel.UPDATA_VIEW);
            this.onMainViewInit();
        }
        TitleStateUpdate(value) {
            ChengHaoModel.Ins.state = value.state;
            this.onMainViewInit();
        }
        TitleReward(value) {
            ChengHaoModel.Ins.taskTitleId = value.titleId;
            ChengHaoModel.Ins.state = value.state;
            ChengHaoModel.Ins.vals = value.vals;
            ChengHaoModel.Ins.event(ChengHaoModel.UPDATA_VIEW_AWARD);
            this.onMainViewInit();
        }
        TitleRefresh(value) {
            ChengHaoModel.Ins.taskTitleId = value.titleId;
            ChengHaoModel.Ins.state = value.state;
            ChengHaoModel.Ins.vals = value.vals;
            ChengHaoModel.Ins.event(ChengHaoModel.UPDATA_VIEW);
        }
        TitleChange(value) {
            ChengHaoModel.Ins.wearedTitleId = value.titleId;
            ChengHaoModel.Ins.event(ChengHaoModel.UPDATA_CHENGHAO);
        }
        TitleExpire(value) {
            for (let i = 0; i < value.titleList.length; i++) {
                let index = ChengHaoModel.Ins.titleList.findIndex(ele => ele.titleId === value.titleList[i].titleId);
                ChengHaoModel.Ins.titleList.splice(index, 1);
            }
            ChengHaoModel.Ins.event(ChengHaoModel.UPDATA_VIEW);
        }
    }

    exports.ChengHaoModule = ChengHaoModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DrawEventTaskProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new DrawEventTaskProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_DrawEvent_Task";
        }
    }
    class DrawEventPackProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new DrawEventPackProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_DrawEvent_Pack";
        }
    }
    class DrawEventConfigProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new DrawEventConfigProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_DrawEvent_Config";
        }
        getCfgByType(type) {
            return this.List.find(ele => ele.f_EventType == type);
        }
    }
    class DrawEventRewardsProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let eventType = this.List[i].f_EventType;
                if (!this._map[eventType]) {
                    this._map[eventType] = [];
                }
                this._map[eventType].push(this.List[i]);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new DrawEventRewardsProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_DrawEvent_Rewards";
        }
        getListByType(eventType) {
            return this._map[eventType];
        }
    }
    class DrawEventCumulateRewardsProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let eventType = this.List[i].f_EventType;
                if (!this._map[eventType]) {
                    this._map[eventType] = [];
                }
                this._map[eventType].push(this.List[i]);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new DrawEventCumulateRewardsProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_DrawEvent_CumulateRewards";
        }
        getListByType(eventType) {
            return this._map[eventType];
        }
    }
    class DrawEventRateProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let eventType = this.List[i].f_EventType;
                if (!this._map[eventType]) {
                    this._map[eventType] = [];
                }
                this._map[eventType].push(this.List[i]);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new DrawEventRateProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_DrawEvent_Rate";
        }
        getCfgByType(eventType, type) {
            let arr = this._map[eventType];
            return arr.find(ele => ele.f_RewardsType == type);
        }
    }

    exports.DrawEventConfigProxy = DrawEventConfigProxy;
    exports.DrawEventCumulateRewardsProxy = DrawEventCumulateRewardsProxy;
    exports.DrawEventPackProxy = DrawEventPackProxy;
    exports.DrawEventRateProxy = DrawEventRateProxy;
    exports.DrawEventRewardsProxy = DrawEventRewardsProxy;
    exports.DrawEventTaskProxy = DrawEventTaskProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DrawEventModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new DrawEventModel();
            }
            return this._ins;
        }
        isMainDot() {
            if (MainModel.Ins.isOpenByFuncId(EFuncDef.DrawEvent.toString())) {
                if (this.isTabRedTip1() || this.isTabRedTip2() || this.isTabRedTip3()) {
                    return true;
                }
            }
            return false;
        }
        isTabRedTip1() {
            let cfg = DrawEventConfigProxy.Ins.getCfgByType(this.type);
            if (cfg) {
                let id = parseInt(cfg.f_DrawCost.split("-")[0]);
                let count = MainModel.Ins.mRoleData.getVal(id);
                if (count) {
                    return true;
                }
                if (this.isCumAwardRedTip()) {
                    return true;
                }
            }
            return false;
        }
        isTabRedTip2() {
            if (!this.packList) {
                return false;
            }
            for (let i = 0; i < this.packList.length; i++) {
                let cfg = DrawEventPackProxy.Ins.GetDataById(this.packList[i].fid);
                if (cfg.f_PackType == 1) {
                    if (this.packList[i].count < cfg.f_PackBuyLimit) {
                        return true;
                    }
                }
            }
            return false;
        }
        isTabRedTip3() {
            if (!this.taskList) {
                return false;
            }
            for (let i = 0; i < this.taskList.length; i++) {
                if (this.taskList[i].state == 1) {
                    return true;
                }
            }
            return false;
        }
        isCumAwardRedTip() {
            if (!this.cumulateRewardList) {
                return false;
            }
            for (let i = 0; i < this.cumulateRewardList.length; i++) {
                if (this.cumulateRewardList[i].state == 2) {
                    return true;
                }
            }
            return false;
        }
    }
    DrawEventModel.UPDATA_VIEW_TASK = "UPDATA_VIEW_TASK";
    DrawEventModel.UPDATA_VIEW_PACK = "UPDATA_VIEW_PACK";
    DrawEventModel.UPDATA_VIEW_FID = "UPDATA_VIEW_FID";
    DrawEventModel.UPDATA_VIEW_AWARD = "UPDATA_VIEW_AWARD";
    DrawEventModel.UPDATA_VIEW_LINQUAWARD = "UPDATA_VIEW_LINQUAWARD";
    DrawEventModel.PLAY_EFF = "PLAY_EFF";
    DrawEventModel.END_EFF = "END_EFF";

    exports.DrawEventModel = DrawEventModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    let keyCls$1 = "DrawEventNodeSkin";
    let nodeKey$1 = "DrawEventCellItem";
    let rowMax$1 = 4;
    class DrawEventItemShowSkin extends ui.views.drawEvent.ui_DrawEventItem4UI {
    }
    class DrawEventCellItem extends ui.views.drawEvent.ui_DrawEventItem3UI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onSlotClickHandler);
        }
        onSlotClickHandler(e) {
            if (!this.cfg) {
                return;
            }
            e.stopPropagation();
            let _vo = ItemViewFactory.convertItem(this.cfg.f_Rewards);
            MainModel.Ins.showSmallTips(_vo.getName(), _vo.getDesc(), this);
        }
        reset() {
            this.cfg = null;
        }
    }
    class DrawEventConfigQua {
    }
    class DrawEventNode extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = keyCls$1;
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, DrawEventItemShowSkin);
            let data = this.list[index];
            if (data.type == 1) {
                _skin.tf1.text = E.getLang("drawEvent1");
            }
            else {
                _skin.tf1.text = E.getLang("drawEvent2");
            }
            _skin.gailvTf.text = E.getLang("labordayrate") + parseFloat((data.rate / 100).toFixed(2)) + "%";
            while (_skin.con1.numChildren) {
                let cell = _skin.con1.getChildAt(0);
                cell.removeSelf();
                Laya.Pool.recover(nodeKey$1, cell);
            }
            let max = rowMax$1;
            let ox = 0;
            let oy = 0;
            let height = 0;
            for (let i = 0; i < data.cfgList.length; i++) {
                let cell = Laya.Pool.getItemByClass(this.clsKey, DrawEventCellItem);
                cell.reset();
                let cfg = data.cfgList[i];
                cell.cfg = cfg;
                let _itemVo = ItemViewFactory.convertItem(cfg.f_Rewards);
                cell.icon.skin = _itemVo.getIcon();
                cell.tf1.text = _itemVo.count.toString();
                cell.quality.skin = _itemVo.quaIcon();
                cell.cntTf.text = "";
                if (i % max == 0) {
                    ox = 0;
                    oy += cell.height;
                }
                cell.x = ox;
                cell.y = oy - cell.height;
                ox += cell.width;
                height = cell.y + cell.height;
                _skin.con1.addChild(cell);
            }
            _skin.bg1.height = height + 35;
            _skin.hitArea = new Laya.Rectangle(0, 0, _skin.bg1.width, _skin.bg1.height + _skin.bg1.y);
            _skin.y = this.y;
            return _skin;
        }
        static getHeight(count) {
            let _skin = Laya.Pool.getItemByClass(keyCls$1, DrawEventItemShowSkin);
            let cell = Laya.Pool.getItemByClass(nodeKey$1, DrawEventCellItem);
            return _skin.con1.y + cell.height * Math.ceil(count / rowMax$1);
        }
    }
    class DrawEventShowReward extends ViewBase {
        constructor() {
            super(...arguments);
            this._panelCtl = new ScrollPanelControl();
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.drawEvent.ui_DrawEventView3UI;
                this.bindClose(this._ui.close1);
                this._panelCtl.init(this._ui.panel1);
            }
        }
        onInit() {
            this._panelCtl.clear();
            let arr = DrawEventRewardsProxy.Ins.getListByType(DrawEventModel.Ins.type);
            let array = [];
            for (let i = 1; i < 3; i++) {
                let vo = new DrawEventConfigQua;
                vo.type = i;
                vo.rate = DrawEventRateProxy.Ins.getCfgByType(DrawEventModel.Ins.type, i).f_DrawRate;
                vo.cfgList = [];
                for (let j = 0; j < arr.length; j++) {
                    if (arr[j].f_RewardsType == i) {
                        vo.cfgList.push(arr[j]);
                    }
                }
                array.push(vo);
            }
            for (let i = 0; i < array.length; i++) {
                let data = array[i];
                let h = DrawEventNode.getHeight(data.cfgList.length);
                this._panelCtl.split([data], DrawEventNode, h);
            }
            this._panelCtl.end();
        }
    }

    exports.DrawEventConfigQua = DrawEventConfigQua;
    exports.DrawEventShowReward = DrawEventShowReward;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DrawEventItemCtl {
        constructor(skin) {
            this._ui = skin;
            this._ui.gou.mouseEnabled = false;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
            DrawEventModel.Ins.on(DrawEventModel.PLAY_EFF, this, this.onPlay);
            this._ui.icon.on(Laya.Event.CLICK, this, this.onClick);
            this._eff = new SimpleEffect(this._ui.sp, `o/spine/uidenlong/uidenlong`);
            this._eff.play(0, true);
        }
        onRemove() {
            DrawEventModel.Ins.off(DrawEventModel.PLAY_EFF, this, this.onPlay);
            this._ui.icon.off(Laya.Event.CLICK, this, this.onClick);
            if (this._eff)
                this._eff.dispose();
            if (this._eff1)
                this._eff1.dispose();
        }
        onPlay() {
            if (!this._eff1) {
                this._eff1 = new SimpleEffect(this._ui.sp1, `o/spine/uidenlonglight/uidenlonglight`);
            }
            this._eff1.play(0, false, this, this.onEndEff);
        }
        onEndEff() {
            DrawEventModel.Ins.event(DrawEventModel.END_EFF);
        }
        onClick(e) {
            if (this._data) {
                e.stopPropagation();
                let itemVo = new ItemVo();
                itemVo.cfgId = parseInt(this._data.f_Rewards.split("-")[0]);
                itemVo.count = parseInt(this._data.f_Rewards.split("-")[1]);
                MainModel.Ins.showSmallTips(itemVo.getName(), itemVo.getDesc(), this._ui.icon);
            }
        }
        setData(value, flag = true, flag1 = true) {
            if (!value)
                return;
            this._data = value;
            this._ui.sp1.visible = flag;
            let st = value.f_Rewards;
            let id = parseInt(st.split("-")[0]);
            let count = parseInt(st.split("-")[1]);
            this._ui.icon.skin = IconUtils.getIconByCfgId(id);
            this._ui.lab.text = count + "";
            if (value.f_RewardsType == 3) {
                let data = DrawEventModel.Ins.rewardList.find(ele => ele.fid == value.f_id);
                if (data.state == 2) {
                    if (!flag1) {
                        this._ui.gou.visible = false;
                    }
                    else {
                        this._ui.gou.visible = true;
                    }
                }
                else {
                    this._ui.gou.visible = false;
                }
            }
            else {
                this._ui.gou.visible = false;
            }
        }
    }

    exports.DrawEventItemCtl = DrawEventItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DrawEventPackItem extends ui.views.drawEvent.ui_DrawEventLBItemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn1, new Laya.Handler(this, this.onBtnClick1));
            ButtonCtl.Create(this.btn2, new Laya.Handler(this, this.onBtnClick2));
            ButtonCtl.Create(this.btn3, new Laya.Handler(this, this.onBtnClick3));
        }
        onBtnClick() {
            if (this._cfg) {
                ActivityModel.Ins.recharge(this._cfg.f_PackPurchase);
            }
        }
        onBtnClick1() {
            if (this._cfg) {
                let req = new DrawEventPack_req;
                req.fid = this._cfg.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onBtnClick2() {
            if (!this._cfg)
                return;
            E.sendTrack("ad_watch", { type: "drawEvent_mf" });
            E.sdk.lookVideo((type) => {
                switch (type) {
                    case 0:
                        break;
                    case 1:
                        E.sendTrack("ad_finish", { type: "drawEvent_mf" });
                        let req = new DrawEventPack_req;
                        req.fid = this._cfg.f_id;
                        SocketMgr.Ins.SendMessageBin(req);
                        break;
                }
            });
        }
        onBtnClick3() {
            if (this._cfg) {
                let req = new DrawEventPack_req;
                req.fid = this._cfg.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._cfg = DrawEventPackProxy.Ins.GetDataById(value.fid);
            this.lab_name.text = this._cfg.f_PackName;
            ItemViewFactory.renderItemSlots(this.sp, this._cfg.f_PackRewards, 10, 0.8, "left");
            this.lab2.text = "限购：" + value.count + "/" + this._cfg.f_PackBuyLimit;
            if (value.count >= this._cfg.f_PackBuyLimit) {
                this.btn.disabled = this.btn1.disabled = this.btn2.disabled = this.btn3.disabled = true;
            }
            else {
                this.btn.disabled = this.btn1.disabled = this.btn2.disabled = this.btn3.disabled = false;
            }
            DotManager.removeDot(this.btn1);
            if (this._cfg.f_PackType == 1) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn2.visible = false;
                this.btn3.visible = false;
                if (value.count < this._cfg.f_PackBuyLimit) {
                    DotManager.addDot(this.btn1, 10, -10);
                }
            }
            else if (this._cfg.f_PackType == 2) {
                this.btn.visible = false;
                this.btn1.visible = false;
                this.btn2.visible = true;
                this.btn3.visible = false;
            }
            else if (this._cfg.f_PackType == 3) {
                this.btn.visible = true;
                this.btn1.visible = false;
                this.btn2.visible = false;
                this.btn3.visible = false;
                let priceCfg = t_Purchase_PriceProxy.Ins.GetDataById(this._cfg.f_PackPurchase);
                this.lab.text = StringUtil.moneyCv(priceCfg.f_price) + "元";
            }
            else if (this._cfg.f_PackType == 4) {
                this.btn.visible = false;
                this.btn1.visible = false;
                this.btn2.visible = false;
                this.btn3.visible = true;
                let id = parseInt(this._cfg.f_Price.split("-")[0]);
                let num = parseInt(this._cfg.f_Price.split("-")[1]);
                this.icon.skin = IconUtils.getIconByCfgId(id);
                this.lab3.text = num + "";
            }
        }
    }

    exports.DrawEventPackItem = DrawEventPackItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DrawEventTaskItem extends ui.views.drawEvent.ui_DrawEventTaskItemUI {
        constructor() {
            super();
            this.list.itemRender = ui.views.main.ui_slot_itemUI;
            this.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn1, new Laya.Handler(this, this.onBtn1Click));
        }
        onBtnClick() {
            if (this._cfg) {
                E.ViewMgr.Close(EViewType.DrawEventView);
                if (this._cfg.f_viewjump != 0) {
                    E.ViewMgr.OpenByFuncid(this._cfg.f_viewjump, false);
                }
            }
        }
        onBtn1Click() {
            if (this._data) {
                let req = new DrawEventTask_req;
                req.fid = this._data.fid;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onRenderHandler(item) {
            let itemVo = new ItemVo();
            let arr = item.dataSource.split("-");
            itemVo.cfgId = parseInt(arr[0]);
            itemVo.count = parseInt(arr[1]);
            ItemViewFactory.refreshSlot(item, itemVo);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this._cfg = DrawEventTaskProxy.Ins.GetDataById(value.fid);
            let stt;
            if (value.count >= this._cfg.f_TaskContent) {
                stt = this._cfg.f_TaskContent + "/" + this._cfg.f_TaskContent;
            }
            else {
                stt = value.count + "/" + this._cfg.f_TaskContent;
            }
            let st = StringUtil.format(t_Txt_Config.Ins.replace(this._cfg.f_Taskintro), this._cfg.f_TaskContent) + "(" + stt + ")";
            this.lab.text = t_Txt_Config.Ins.replace(st);
            this.list.array = this._cfg.f_TaskRewards.split("|");
            DotManager.removeDot(this.btn1);
            if (value.state == 2) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn1.mouseEnabled = false;
                this.btn1.skin = "remote/common/base/anniu_grey.png";
                this.lab2.text = "已领取";
            }
            else if (value.state == 1) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn1.mouseEnabled = true;
                this.btn1.skin = "remote/common/base/anniu_blue.png";
                this.lab2.text = "领取";
                DotManager.addDot(this.btn1, 0, -10);
            }
            else if (value.state == 0) {
                this.btn.visible = true;
                this.btn1.visible = false;
            }
        }
    }

    exports.DrawEventTaskItem = DrawEventTaskItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DrawEventView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.mMaskClick = false;
            this.autoFree = true;
            this._checkFlag = false;
        }
        onAddLoadRes() {
            this.addAtlas("drawEvent.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.drawEvent.ui_DrawEventViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)), ButtonCtl.Create(this._ui.sp_click, new Laya.Handler(this, this.onBtnSpClick), false), ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick)), ButtonCtl.Create(this._ui.btn_award, new Laya.Handler(this, this.onBtnAwardClick)));
                this._ui.spIcon.on(Laya.Event.CLICK, this, this.onSpIconClick);
                const tabsSkin = [this._ui.tab1, this._ui.tab2, this._ui.tab3];
                let st = E.getLang("drawEventTab");
                this.tabList = st.split("-");
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._ui.gouImg.mouseEnabled = false;
                this._timeCtl = new TimeCtl(this._ui.lab_time);
                this._ui.list1.itemRender = DrawEventTaskItem;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onTaskRender);
                this._timeCtlTask = new TimeCtl(this._ui.lab_time2);
                this._ui.list.itemRender = DrawEventPackItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onPackRender);
                this._timeCtlPack = new TimeCtl(this._ui.lab_time1);
                this._checkCtl = new CheckBoxCtl({ bg: this._ui.ckbg, gou: this._ui.gou });
                this._checkCtl.selected = this._checkFlag;
                this._checkCtl.selectHander = new Laya.Handler(this, this.onCheckHandler);
                this._ctl = new DrawEventItemCtl(this._ui.item);
                for (let i = 1; i < 9; i++) {
                    this["_ctl" + i] = new DrawEventItemCtl(this._ui["item" + i]);
                }
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("drawEventTitle", "drawEventDesc");
        }
        onBtnSpClick() {
            E.ViewMgr.Open(EViewType.DrawEventView1);
        }
        onSpIconClick(e) {
            E.ViewMgr.Open(EViewType.DrawEventView2);
        }
        onBtnClick() {
            let data = DrawEventModel.Ins.rewardList.find(ele => ele.fid == DrawEventModel.Ins.rewardFid);
            if (data.state == 2) {
                E.ViewMgr.Open(EViewType.DrawEventView1);
            }
            else {
                let req = new DrawEvent_req;
                req.type = this._checkCtl.selected ? 2 : 1;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onBtnAwardClick() {
            E.ViewMgr.Open(EViewType.DrawEventShowReward);
        }
        onCheckHandler() {
            this._checkFlag = this._checkCtl.selected;
        }
        updataRes() {
            let cfg = DrawEventConfigProxy.Ins.getCfgByType(DrawEventModel.Ins.type);
            let id = parseInt(cfg.f_DrawCost.split("-")[0]);
            let count = MainModel.Ins.mRoleData.getVal(id);
            this._ui.img.skin = IconUtils.getIconByCfgId(id);
            this._ui.lab_count.text = count + "";
            if (count) {
                DotManager.addDot(this._ui.btn, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.btn);
            }
            this.isRedTip();
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab.text = this.tabList[index];
            if (sel) {
                skin.img.visible = true;
            }
            else {
                skin.img.visible = false;
            }
        }
        onTabSelectHandler(v) {
            this._ui.sp1.visible = this._ui.sp2.visible = this._ui.sp3.visible = false;
            this._ui["sp" + (v + 1)].visible = true;
            this["updataView" + (v + 1)]();
        }
        onInit() {
            this._num = 0;
            this._ui.mouseEnabled = true;
            DrawEventModel.Ins.on(DrawEventModel.UPDATA_VIEW_FID, this, this.onLQUpdataView);
            DrawEventModel.Ins.on(DrawEventModel.UPDATA_VIEW_AWARD, this, this.onUpdataView);
            DrawEventModel.Ins.on(DrawEventModel.END_EFF, this, this.onEndView);
            DrawEventModel.Ins.on(DrawEventModel.UPDATA_VIEW_LINQUAWARD, this, this.onLQUpdataView);
            DrawEventModel.Ins.on(DrawEventModel.UPDATA_VIEW_TASK, this, this.onUpdataTaskView);
            DrawEventModel.Ins.on(DrawEventModel.UPDATA_VIEW_PACK, this, this.onUpdataPackView);
            MainModel.Ins.on(MainEvent.ValChangeCell, this, this.onValChange);
            this.tabsCtl.selectIndex = 0;
        }
        onExit() {
            DrawEventModel.Ins.off(DrawEventModel.UPDATA_VIEW_FID, this, this.onLQUpdataView);
            DrawEventModel.Ins.off(DrawEventModel.UPDATA_VIEW_AWARD, this, this.onUpdataView);
            DrawEventModel.Ins.off(DrawEventModel.END_EFF, this, this.onEndView);
            DrawEventModel.Ins.off(DrawEventModel.UPDATA_VIEW_LINQUAWARD, this, this.onLQUpdataView);
            DrawEventModel.Ins.off(DrawEventModel.UPDATA_VIEW_TASK, this, this.onUpdataTaskView);
            DrawEventModel.Ins.off(DrawEventModel.UPDATA_VIEW_PACK, this, this.onUpdataPackView);
            MainModel.Ins.off(MainEvent.ValChangeCell, this, this.onValChange);
            this.tabsCtl.dispose();
            this._timeCtl.dispose();
            this._timeCtlTask.dispose();
            this._timeCtlPack.dispose();
        }
        onValChange(id) {
            let cfg = DrawEventConfigProxy.Ins.getCfgByType(DrawEventModel.Ins.type);
            let idd = parseInt(cfg.f_DrawCost.split("-")[0]);
            if (id == idd) {
                this.updataRes();
            }
        }
        onUpdataView() {
            this._num = 0;
            this._ui.mouseEnabled = false;
            DrawEventModel.Ins.event(DrawEventModel.PLAY_EFF);
        }
        onEndView() {
            this._num++;
            if (this._num >= 9) {
                this._ui.mouseEnabled = true;
                this.updataView1();
                let req = new DrawEventReward_req;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onLQUpdataView() {
            this.updataView1();
        }
        onUpdataPackView() {
            this.updataView2();
        }
        onUpdataTaskView() {
            this.updataView3();
        }
        isRedTip() {
            if (DrawEventModel.Ins.isTabRedTip1()) {
                DotManager.addDot(this._ui.tab1, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.tab1);
            }
            if (DrawEventModel.Ins.isTabRedTip2()) {
                DotManager.addDot(this._ui.tab2, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.tab2);
            }
            if (DrawEventModel.Ins.isTabRedTip3()) {
                DotManager.addDot(this._ui.tab3, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.tab3);
            }
        }
        updataView1() {
            this.updataRes();
            this.updataAward();
            this.updataCumAward();
            let cfg = DrawEventConfigProxy.Ins.getCfgByType(DrawEventModel.Ins.type);
            this._ui.lab_pro.text = DrawEventModel.Ins.fuYunCount + "/" + cfg.f_ProtectLimite;
            this._ui.pro.width = DrawEventModel.Ins.fuYunCount / cfg.f_ProtectLimite * 575;
            let time = DrawEventModel.Ins.endUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
            if (DrawEventModel.Ins.isCumAwardRedTip()) {
                DotManager.addDot(this._ui.spIcon, 20, -10);
            }
            else {
                DotManager.removeDot(this._ui.spIcon);
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        updataAward() {
            let data = DrawEventRewardsProxy.Ins.GetDataById(DrawEventModel.Ins.rewardFid);
            this._ctl.setData(data, false);
            let arr = DrawEventRewardsProxy.Ins.getListByType(DrawEventModel.Ins.type);
            let arr1 = [];
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].f_UIItem) {
                    arr1.push(arr[i]);
                }
            }
            arr1.sort((a, b) => {
                return a.f_UIItem - b.f_UIItem;
            });
            for (let i = 0; i < arr1.length; i++) {
                this["_ctl" + (i + 1)].setData(arr1[i]);
            }
        }
        updataCumAward() {
            let awCfg;
            let awArr = DrawEventCumulateRewardsProxy.Ins.getListByType(DrawEventModel.Ins.type);
            for (let i = 0; i < awArr.length; i++) {
                let min = parseInt(awArr[i].f_Clientplay.split("-")[0]);
                let max = parseInt(awArr[i].f_Clientplay.split("-")[1]);
                if (DrawEventModel.Ins.count >= min && DrawEventModel.Ins.count <= max) {
                    awCfg = awArr[i];
                    break;
                }
            }
            if (awCfg) {
                this._ui.lab_num1.text = DrawEventModel.Ins.count + "/" + awCfg.f_DrawTimes;
                this._ui.gouImg.visible = false;
            }
            else {
                this._ui.lab_num1.text = "";
                this._ui.gouImg.visible = true;
                awCfg = awArr[awArr.length - 1];
            }
            let id = parseInt(awCfg.f_CumulateRewards.split("-")[0]);
            let count = parseInt(awCfg.f_CumulateRewards.split("-")[1]);
            this._ui.icon.skin = IconUtils.getIconByCfgId(id);
            this._ui.lab_num.text = count + "";
        }
        updataView2() {
            let time = DrawEventModel.Ins.refreshUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtlPack.start(time, new Laya.Handler(this, this.onUpdatePackTime), new Laya.Handler(this, this.endPackTime));
            }
            else {
                this.endPackTime();
                this._timeCtlPack.stop();
            }
            this._ui.list.array = DrawEventModel.Ins.packList;
            this.isRedTip();
        }
        onUpdatePackTime() {
            let time_str = TimeUtil.subTime(this._timeCtlPack.tickVal) + "后重置";
            this._timeCtlPack.setText(time_str);
        }
        endPackTime() {
            this._timeCtlPack.setText("");
        }
        onPackRender(item) {
            item.setData(item.dataSource);
        }
        updataView3() {
            let time = DrawEventModel.Ins.refreshUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtlTask.start(time, new Laya.Handler(this, this.onUpdateTaskTime), new Laya.Handler(this, this.endTaskTime));
            }
            else {
                this.endTaskTime();
                this._timeCtlTask.stop();
            }
            let arr = [];
            let arr1 = [];
            let arr2 = [];
            for (let i = 0; i < DrawEventModel.Ins.taskList.length; i++) {
                let vo = DrawEventModel.Ins.taskList[i];
                if (vo.state == 1) {
                    arr.push(vo);
                }
                else if (vo.state == 0) {
                    arr1.push(vo);
                }
                else if (vo.state == 2) {
                    arr2.push(vo);
                }
            }
            this._ui.list1.array = arr.concat(arr1.concat(arr2));
            this.isRedTip();
        }
        onUpdateTaskTime() {
            let time_str = TimeUtil.subTime(this._timeCtlTask.tickVal) + "后重置";
            this._timeCtlTask.setText(time_str);
        }
        endTaskTime() {
            this._timeCtlTask.setText("");
        }
        onTaskRender(item) {
            item.setData(item.dataSource);
        }
    }

    exports.DrawEventView = DrawEventView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DrawEventView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.mMaskClick = false;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("drawEvent.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.drawEvent.ui_DrawEventView1UI;
                this.bindClose(this._ui.close1);
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
                ButtonCtl.Create(this._ui.btn1, new Laya.Handler(this, this.Close));
                this._ui.list.itemRender = ui.views.drawEvent.ui_DrawEventItem1UI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRendler);
                this._ui.list.selectEnable = true;
                this._ctl = new DrawEventItemCtl(this._ui.item);
            }
        }
        onBtnClick() {
            let req = new DrawEventChoose_req;
            let data = DrawEventModel.Ins.rewardList[this._index];
            if (data.state == 1) {
                req.fid = data.fid;
                SocketMgr.Ins.SendMessageBin(req);
                this.Close();
            }
            else if (data.state == 2) {
                E.ViewMgr.ShowMidError("已抽取");
            }
            else if (data.state == 3) {
                E.ViewMgr.ShowMidError("未解锁");
            }
        }
        onItemRendler(item, index) {
            let cfg = DrawEventRewardsProxy.Ins.GetDataById(item.dataSource.fid);
            let vo = new ItemVo;
            vo.cfgId = parseInt(cfg.f_Rewards.split("-")[0]);
            vo.count = parseInt(cfg.f_Rewards.split("-")[1]);
            ItemViewFactory.refreshSlot(item.item, vo, false);
            let data = DrawEventModel.Ins.rewardList.find(ele => ele.fid == cfg.f_id);
            if (data.state == 1) {
                item.lab.text = vo.getName();
                item.lab.color = "#9C5F3A";
                item.maskbg.visible = false;
                item.gouImg.visible = false;
            }
            else if (data.state == 2) {
                item.lab.text = vo.getName();
                item.maskbg.visible = true;
                item.gouImg.visible = true;
                item.lab.color = "#9C5F3A";
            }
            else {
                item.lab.text = `抽取${cfg.f_UnlockCondi}次可选`;
                item.maskbg.visible = true;
                item.gouImg.visible = false;
                item.lab.color = "#FF2122";
            }
            if (index == this._ui.list.selectedIndex) {
                item.img_xz.visible = true;
                this._ctl.setData(cfg, true, false);
                this._index = this._ui.list.selectedIndex;
            }
            else {
                item.img_xz.visible = false;
            }
        }
        onInit() {
            this._ui.list.array = DrawEventModel.Ins.rewardList;
            this._index = DrawEventModel.Ins.rewardList.findIndex(ele => ele.fid == DrawEventModel.Ins.rewardFid);
            this._ui.list.selectedIndex = this._index;
            this._ui.list.scrollTo(this._index);
        }
        onExit() {
        }
    }

    exports.DrawEventView1 = DrawEventView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DrawEventItem extends ui.views.drawEvent.ui_DrawEventItem2UI {
        constructor() {
            super();
            this.list.itemRender = ui.views.main.ui_slot_itemUI;
            this.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn1, new Laya.Handler(this, this.onBtn1Click));
        }
        onBtnClick() {
            E.ViewMgr.Close(EViewType.DrawEventView2);
        }
        onBtn1Click() {
            if (this._data) {
                let req = new DrawEventCumulateReward_req;
                req.fid = this._data.fid;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onRenderHandler(item) {
            let itemVo = new ItemVo();
            let arr = item.dataSource.split("-");
            itemVo.cfgId = parseInt(arr[0]);
            itemVo.count = parseInt(arr[1]);
            ItemViewFactory.refreshSlot(item, itemVo);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let cfg = DrawEventCumulateRewardsProxy.Ins.GetDataById(value.fid);
            this.lab.text = `累计祈福${cfg.f_DrawTimes}次`;
            if (DrawEventModel.Ins.count > cfg.f_DrawTimes) {
                this.lab1.text = cfg.f_DrawTimes + "/" + cfg.f_DrawTimes;
            }
            else {
                this.lab1.text = DrawEventModel.Ins.count + "/" + cfg.f_DrawTimes;
            }
            this.list.array = cfg.f_CumulateRewards.split("|");
            DotManager.removeDot(this.btn1);
            if (value.state == 1) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn1.mouseEnabled = false;
                this.btn1.skin = "remote/common/base/anniu_grey.png";
                this.lab2.text = "已领取";
            }
            else if (value.state == 2) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn1.mouseEnabled = true;
                this.btn1.skin = "remote/common/base/anniu_blue.png";
                this.lab2.text = "领取";
                DotManager.addDot(this.btn1, 0, -10);
            }
            else if (value.state == 0) {
                this.btn.visible = true;
                this.btn1.visible = false;
            }
        }
    }

    exports.DrawEventItem = DrawEventItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DrawEventView2 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("drawEvent.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.drawEvent.ui_DrawEventView2UI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = DrawEventItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRendler);
            }
        }
        onItemRendler(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            DrawEventModel.Ins.on(DrawEventModel.UPDATA_VIEW_LINQUAWARD, this, this.onLQUpdataView);
            this.onLQUpdataView();
            this._ui.lab.text = DrawEventModel.Ins.count + "次";
        }
        onExit() {
            DrawEventModel.Ins.off(DrawEventModel.UPDATA_VIEW_LINQUAWARD, this, this.onLQUpdataView);
        }
        onLQUpdataView() {
            let arr = [];
            let arr1 = [];
            let arr2 = [];
            for (let i = 0; i < DrawEventModel.Ins.cumulateRewardList.length; i++) {
                let vo = DrawEventModel.Ins.cumulateRewardList[i];
                if (vo.state == 2) {
                    arr.push(vo);
                }
                else if (vo.state == 0) {
                    arr1.push(vo);
                }
                else if (vo.state == 1) {
                    arr2.push(vo);
                }
            }
            this._ui.list.array = arr.concat(arr1.concat(arr2));
        }
    }

    exports.DrawEventView2 = DrawEventView2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DrawEventModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new DrawEventModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            DrawEventModel.Ins.rewardList = [];
            DrawEventModel.Ins.cumulateRewardList = [];
            DrawEventModel.Ins.taskList = [];
            DrawEventModel.Ins.packList = [];
        }
        initMsg() {
            this.Reg(new DrawEventView(EViewType.DrawEventView));
            this.Reg(new DrawEventView1(EViewType.DrawEventView1));
            this.Reg(new DrawEventView2(EViewType.DrawEventView2));
            this.Reg(new DrawEventShowReward(EViewType.DrawEventShowReward));
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.ValChangeCell, this, this.onMainViewInit);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onMainViewInit);
            E.MsgMgr.AddMsg(MSGID.DrawEventInit, this.DrawEventInit, this);
            E.MsgMgr.AddMsg(MSGID.DrawEventChoose, this.DrawEventChoose, this);
            E.MsgMgr.AddMsg(MSGID.DrawEventRewardUpdate, this.DrawEventRewardUpdate, this);
            E.MsgMgr.AddMsg(MSGID.DrawEventTaskUpdate, this.DrawEventTaskUpdate, this);
            E.MsgMgr.AddMsg(MSGID.DrawEventPack, this.DrawEventPack, this);
            E.MsgMgr.AddMsg(MSGID.DrawEventCumulateReward, this.DrawEventCumulateReward, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (DrawEventModel.Ins.isMainDot()) {
                MainModel.Ins.funcSetRed(EFuncDef.DrawEvent, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.DrawEvent, false);
            }
        }
        DrawEventInit(value) {
            DrawEventModel.Ins.rewardFid = value.rewardFid;
            DrawEventModel.Ins.type = value.type;
            DrawEventModel.Ins.count = value.count;
            DrawEventModel.Ins.fuYunCount = value.fuYunCount;
            DrawEventModel.Ins.rewardList = value.rewardList;
            DrawEventModel.Ins.cumulateRewardList = value.cumulateRewardList;
            DrawEventModel.Ins.taskList = value.taskList;
            DrawEventModel.Ins.packList = value.packList;
            DrawEventModel.Ins.refreshUnix = value.refreshUnix;
            DrawEventModel.Ins.endUnix = value.endUnix;
            DrawEventModel.Ins.event(DrawEventModel.UPDATA_VIEW_TASK);
            DrawEventModel.Ins.event(DrawEventModel.UPDATA_VIEW_PACK);
            this.onMainViewInit();
        }
        DrawEventChoose(value) {
            DrawEventModel.Ins.rewardFid = value.fid;
            DrawEventModel.Ins.event(DrawEventModel.UPDATA_VIEW_FID);
        }
        DrawEventRewardUpdate(value) {
            DrawEventModel.Ins.count = value.count;
            DrawEventModel.Ins.fuYunCount = value.fuYunCount;
            DrawEventModel.Ins.rewardList = value.rewardList;
            DrawEventModel.Ins.cumulateRewardList = value.cumulateRewardList;
            DrawEventModel.Ins.event(DrawEventModel.UPDATA_VIEW_AWARD);
            this.onMainViewInit();
        }
        DrawEventTaskUpdate(value) {
            for (let i = 0; i < value.taskList.length; i++) {
                let index = DrawEventModel.Ins.taskList.findIndex(ele => ele.fid == value.taskList[i].fid);
                if (index != -1) {
                    DrawEventModel.Ins.taskList[index] = value.taskList[i];
                }
            }
            DrawEventModel.Ins.event(DrawEventModel.UPDATA_VIEW_TASK);
            this.onMainViewInit();
        }
        DrawEventPack(value) {
            let index = DrawEventModel.Ins.packList.findIndex(ele => ele.fid == value.data.fid);
            if (index != -1) {
                DrawEventModel.Ins.packList[index] = value.data;
            }
            DrawEventModel.Ins.event(DrawEventModel.UPDATA_VIEW_PACK);
            this.onMainViewInit();
        }
        DrawEventCumulateReward(value) {
            for (let i = 0; i < value.cumulateRewardList.length; i++) {
                let index = DrawEventModel.Ins.cumulateRewardList.findIndex(ele => ele.fid == value.cumulateRewardList[i].fid);
                if (index != -1) {
                    DrawEventModel.Ins.cumulateRewardList[index] = value.cumulateRewardList[i];
                }
            }
            DrawEventModel.Ins.event(DrawEventModel.UPDATA_VIEW_LINQUAWARD);
            this.onMainViewInit();
        }
    }

    exports.DrawEventModule = DrawEventModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangAttrView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangAttrViewUI;
                this.bindClose(this._ui.close1);
                this._ui.list4.itemRender = ui.views.fujiang.ui_fujiangAttrItemUI;
                this._ui.list4.renderHandler = new Laya.Handler(this, this.onRenderHandler4);
                this._ui.list5.itemRender = ui.views.fujiang.ui_fujiangAttrItemUI;
                this._ui.list5.renderHandler = new Laya.Handler(this, this.onRenderHandler5);
            }
        }
        onInit() {
            this._data = this.Data;
            let cCfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
            this._ui.list4.array = this._data.attrs;
            this._ui.list5.array = cCfg.f_specialattrinit.split("|");
        }
        onExit() {
        }
        onRenderHandler4(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.lab.visible = false;
        }
        onRenderHandler5(item, index) {
            item.tf1.color = item.valTf.color = "#FB5AFB";
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            let cCfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
            let lvSt = cCfg.f_specialupgrade.split("|")[index];
            let starSt = cCfg.f_specialupstar.split("|")[index];
            let lvNum = parseInt(lvSt.split(":")[1]) * (this._data.level - 1);
            let starNum = parseInt(starSt.split(":")[1]) * (this._data.star - 1);
            val = val + lvNum + starNum;
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            let starLv = parseInt(cCfg.f_specialunlock.split("|")[index]);
            if (this._data.star >= starLv) {
                item.tf1.color = item.valTf.color = "#FB5AFB";
                item.valTf.text = attrConvert(id, val);
                item.lab.visible = false;
            }
            else {
                item.tf1.color = item.valTf.color = "#D3D3D3";
                item.valTf.text = attrConvert(id, val);
                item.lab.visible = true;
                item.lab.text = "(" + starLv + "星)";
            }
        }
    }

    exports.FuJiangAttrView = FuJiangAttrView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangAttrView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangAttrView1UI;
                this.bindClose(this._ui.btn_close);
                this._ui.list1.itemRender = ui.views.fujiang.ui_fujiangAttrItem8UI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
            }
        }
        onRenderHandler1(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            val = val + FuJiangModel.Ins.getFZFJJCAttr(id);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            let idd;
            switch (id) {
                case 10026:
                    idd = 10002;
                    break;
                case 10027:
                    idd = 10003;
                    break;
                case 10028:
                    idd = 10004;
                    break;
                case 10029:
                    idd = 10005;
                    break;
            }
            let val1 = MainModel.Ins.mRoleData.getVal(idd);
            item.lab.text = "主角当前" + MainModel.Ins.getAttrNameIdByID(id) + ":" + val1;
            let val2 = val1 * (val / 10000);
            item.lab1.text = "+" + Math.floor(val2);
        }
        onInit() {
            let cCfg = FuJiangListProxy.Ins.getCfgById(this.Data.cheifId);
            this._ui.list1.array = cCfg.f_inherit.split("|");
        }
        onExit() {
        }
    }

    exports.FuJiangAttrView1 = FuJiangAttrView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangChouKaView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangChouKaViewUI;
                this._ui.btn_zm1.visible = false;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_gl, new Laya.Handler(this, this.onBtnGLClick));
                ButtonCtl.Create(this._ui.btn_add1, new Laya.Handler(this, this.onBtnAdd1Click));
                ButtonCtl.Create(this._ui.btn_add2, new Laya.Handler(this, this.onBtnAdd2Click));
                ButtonCtl.Create(this._ui.btn_zm2, new Laya.Handler(this, this.onBtnZM2Click));
                ButtonCtl.Create(this._ui.btn_zm3, new Laya.Handler(this, this.onBtnZM3Click));
                ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick));
                ValCtl.Create(this._ui.lab_m1, this._ui.img_m1, ECellType.GOLD);
                ValCtl.Create(this._ui.lab_m2, this._ui.img_m2, ECellType.JunLingZhuang);
                this._eff = new SimpleEffect(this._ui.sp, `o/spine/cardfly/cardfly`, 0, 0, 1.0);
                this._effSX = new SimpleEffect(this._ui.sp1, `o/spine/cardstone/cardstone`, 0, 0, 1.0);
                this._effDL1 = new SimpleEffect(this._ui.sp2, `o/spine/cardlab/cardlab`);
                this._effDL2 = new SimpleEffect(this._ui.sp3, `o/spine/cardlab/cardlab`);
                this._checkBoxCtl = new CheckBoxCtl({ bg: this._ui.bg, gou: this._ui.gou });
                this._checkBoxCtl.selected = false;
                this._checkBoxCtl1 = new CheckBoxCtl({ bg: this._ui.ck, gou: this._ui.gou1 });
                this._checkBoxCtl1.selectHander = new Laya.Handler(this, this.onSelectHander);
                this._checkBoxCtl1.selected = false;
            }
        }
        onSelectHander() {
            this.updataZKView();
        }
        onInit() {
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_ZHAOMU_UPDATA, this, this.onZMView);
            FuJiangModel.Ins.on(FuJiangModel.CHOUKA_LEVEL, this, this.updataLevel);
            this._isPlay = false;
            this.updataView();
            this._effSX.play(0, true);
            this._effDL1.play(0, true);
            this._effDL2.play(0, true);
        }
        onExit() {
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_ZHAOMU_UPDATA, this, this.onZMView);
            FuJiangModel.Ins.off(FuJiangModel.CHOUKA_LEVEL, this, this.updataLevel);
            if (this._eff) {
                this._eff.stop();
            }
            if (this._effSX) {
                this._effSX.stop();
            }
            if (this._effDL1) {
                this._effDL1.stop();
            }
            if (this._effDL2) {
                this._effDL2.stop();
            }
            this._isPlay = false;
        }
        onZMView() {
            if (this._checkBoxCtl.selected) {
                if (FuJiangModel.Ins.zmNum == 1) {
                    E.ViewMgr.Open(EViewType.FuJiangHuoDe, null, [FuJiangModel.Ins.getIndexEff(), this._itemVo]);
                }
                else if (FuJiangModel.Ins.zmNum == 2) {
                    E.ViewMgr.Open(EViewType.FuJiangHDView1, null, this._itemVo);
                }
            }
            else {
                this._isPlay = true;
                this.setEff();
            }
        }
        updataLevel() {
            this._ui.lab_lv.text = "lv." + FuJiangModel.Ins.drawLevel;
            let cfg = FuJiangDrawExpProxy.Ins.getCfgById(FuJiangModel.Ins.drawLevel);
            let nextCfg = FuJiangDrawExpProxy.Ins.getCfgById(FuJiangModel.Ins.drawLevel + 1);
            if (nextCfg) {
                this._ui.lab_exp.text = FuJiangModel.Ins.curDrawExp + "/" + cfg.f_exp;
                let w = FuJiangModel.Ins.curDrawExp / cfg.f_exp;
                this._ui.pro.width = w * 316;
            }
            else {
                this._ui.lab_exp.text = "已满级";
                this._ui.pro.width = 316;
            }
        }
        setEff() {
            if (FuJiangModel.Ins.zmNum == 1) {
                this._eff.play(0, false, this, this.effEnd);
                this._ui.sp.x = 170;
                this._ui.sp.y = 956;
            }
            else {
                this._eff.play(1, false, this, this.effEnd);
                this._ui.sp.x = 510;
                this._ui.sp.y = 956;
            }
        }
        effEnd() {
            this._effSX.play(FuJiangModel.Ins.getIndexEff(), false, this, this.effEndOpenView);
        }
        effEndOpenView() {
            this._isPlay = false;
            this._effSX.play(0, true);
            Laya.timer.callLater(this, this.onLayer);
        }
        onLayer() {
            if (this.IsShow()) {
                if (FuJiangModel.Ins.zmNum == 1) {
                    E.ViewMgr.Open(EViewType.FuJiangHuoDe, null, [FuJiangModel.Ins.getIndexEff(), this._itemVo]);
                }
                else if (FuJiangModel.Ins.zmNum == 2) {
                    E.ViewMgr.Open(EViewType.FuJiangHDView1, null, this._itemVo);
                }
            }
        }
        updataView() {
            this._ui.lab_m1.text = MainModel.Ins.mRoleData.getVal(ECellType.GOLD) + "";
            this._ui.lab_m2.text = MainModel.Ins.mRoleData.getVal(ECellType.JunLingZhuang) + "";
            this._cfgOne = FuJiangConfigProxy.Ins.List[0].f_drawsingle;
            this._ui.icon1.skin = IconUtils.getIconByCfgId(this._cfgOne.split("-")[0]);
            this._ui.lab1.text = this._cfgOne.split("-")[1];
            this.updataZKView();
            this.updataLevel();
        }
        updataZKView() {
            let cfg = FuJiangConfigProxy.Ins.List[0];
            let tenNum;
            let num;
            if (this._checkBoxCtl1.selected) {
                tenNum = parseInt(cfg.f_drawten_gold.split("-")[1]);
                num = parseInt(cfg.f_FeastDiscount_gold.split("-")[1]);
                this._ui.icon2.skin = IconUtils.getIconByCfgId(parseInt(cfg.f_drawten_gold.split("-")[0]));
            }
            else {
                tenNum = parseInt(cfg.f_drawten.split("-")[1]);
                num = parseInt(cfg.f_FeastDiscount.split("-")[1]);
                this._ui.icon2.skin = IconUtils.getIconByCfgId(parseInt(cfg.f_drawten.split("-")[0]));
            }
            if (FuJiangFeastModel.Ins.isOpen || NewPlayerFujiangFeastModel.Ins.isOpen) {
                this._ui.zhekouImg.visible = true;
                this._ui.zhekouTf.text = `限时${cfg.f_discountvalue}折`;
                this._ui.lab3.text = num + "";
                this._ui.oldTf.visible = this._ui.line1.visible = true;
                this._ui.oldTf.text = tenNum + "";
            }
            else {
                this._ui.zhekouImg.visible = false;
                this._ui.oldTf.visible = this._ui.line1.visible = false;
                this._ui.lab3.text = tenNum + "";
            }
            let val;
            let val1;
            if (this._checkBoxCtl1.selected) {
                val = parseInt(cfg.f_drawmulti_gold.split("-")[1]);
                val1 = parseInt(cfg.f_Drawsinglediscount_gold.split("-")[1]);
                this._ui.icon22.skin = IconUtils.getIconByCfgId(parseInt(cfg.f_drawmulti_gold.split("-")[0]));
            }
            else {
                val = parseInt(cfg.f_drawmulti.split("-")[1]);
                val1 = parseInt(cfg.f_Drawsinglediscount.split("-")[1]);
                this._ui.icon22.skin = IconUtils.getIconByCfgId(parseInt(cfg.f_drawmulti.split("-")[0]));
            }
            if (FuJiangFeastModel.Ins.isOpen || NewPlayerFujiangFeastModel.Ins.isOpen) {
                this._ui.zhekouImg1.visible = true;
                this._ui.zhekouTf1.text = `限时${cfg.f_discountvalue}折`;
                this._ui.lab33.text = val1 + "";
                this._ui.oldTf1.visible = this._ui.line11.visible = true;
                this._ui.oldTf1.text = val + "";
            }
            else {
                this._ui.zhekouImg1.visible = false;
                this._ui.oldTf1.visible = this._ui.line11.visible = false;
                this._ui.lab33.text = val + "";
            }
        }
        onBtnGLClick() {
            if (this._isPlay) {
                return;
            }
            E.ViewMgr.openHelpView("fujiangTitle", "fujiangDec");
        }
        onBtnAdd1Click() {
            if (this._isPlay) {
                return;
            }
            E.ViewMgr.Open(EViewType.Shop);
        }
        onBtnAdd2Click() {
            if (this._isPlay) {
                return;
            }
            E.ViewMgr.Open(EViewType.FuJiangGouMai);
        }
        onBtnZM2Click() {
            if (this._isPlay) {
                return;
            }
            let cfg = FuJiangConfigProxy.Ins.List[0];
            if (FuJiangFeastModel.Ins.isOpen || NewPlayerFujiangFeastModel.Ins.isOpen) {
                if (this._checkBoxCtl1.selected) {
                    this._itemVo = ItemViewFactory.convertItem(cfg.f_FeastDiscount_gold);
                }
                else {
                    this._itemVo = ItemViewFactory.convertItem(cfg.f_FeastDiscount);
                }
            }
            else {
                if (this._checkBoxCtl1.selected) {
                    this._itemVo = ItemViewFactory.convertItem(cfg.f_drawten_gold);
                }
                else {
                    this._itemVo = ItemViewFactory.convertItem(cfg.f_drawten);
                }
            }
            if (this._itemVo.cfg.f_itemid == 293) {
                if (!MainModel.Ins.isItemEnough(this._itemVo.cfg.f_itemid, this._itemVo.count)) {
                    E.ViewMgr.Open(EViewType.FuJiangGouMai);
                    return;
                }
            }
            if (MainModel.Ins.isItemEnough(this._itemVo.cfg.f_itemid, this._itemVo.count), true) {
                FuJiangModel.Ins.zmNum = 1;
                this.sendCmd(FuJiangModel.Ins.zmNum);
            }
        }
        onBtnTipClick() {
            E.ViewMgr.Open(EViewType.FuJiangGLTip);
        }
        onBtnZM3Click() {
            if (this._isPlay) {
                return;
            }
            let cfg = FuJiangConfigProxy.Ins.List[0];
            if (FuJiangFeastModel.Ins.isOpen || NewPlayerFujiangFeastModel.Ins.isOpen) {
                if (this._checkBoxCtl1.selected) {
                    this._itemVo = ItemViewFactory.convertItem(cfg.f_Drawsinglediscount_gold);
                }
                else {
                    this._itemVo = ItemViewFactory.convertItem(cfg.f_Drawsinglediscount);
                }
            }
            else {
                if (this._checkBoxCtl1.selected) {
                    this._itemVo = ItemViewFactory.convertItem(cfg.f_drawmulti_gold);
                }
                else {
                    this._itemVo = ItemViewFactory.convertItem(cfg.f_drawmulti);
                }
            }
            if (this._itemVo.cfg.f_itemid == 293) {
                if (!MainModel.Ins.isItemEnough(this._itemVo.cfg.f_itemid, this._itemVo.count)) {
                    E.ViewMgr.Open(EViewType.FuJiangGouMai);
                    return;
                }
            }
            if (MainModel.Ins.isItemEnough(this._itemVo.cfg.f_itemid, this._itemVo.count), true) {
                FuJiangModel.Ins.zmNum = 2;
                this.sendCmd(FuJiangModel.Ins.zmNum);
            }
        }
        sendCmd(type) {
            let req = new RecruitChief_req;
            req.itemId = this._itemVo.cfg.f_itemid;
            req.type = type;
            SocketMgr.Ins.SendMessageBin(req);
        }
    }

    exports.FuJiangChouKaView = FuJiangChouKaView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangItemCtl1 {
        constructor(skin) {
            this._ui = skin;
        }
        setData(value, bo = true) {
            if (!value)
                return;
            let cCfg = FuJiangListProxy.Ins.getCfgById(value.cheifId);
            this._ui.img_qua.skin = FuJiangListProxy.Ins.getQuaSkin(cCfg.f_cheifQuality);
            this._ui.img.skin = FuJiangListProxy.Ins.getFuJiangSkin(cCfg.f_cheifid);
            if (bo) {
                if (value.pos) {
                    this._ui.img_g.visible = true;
                }
                else {
                    this._ui.img_g.visible = false;
                }
            }
            else {
                this._ui.img_g.visible = false;
            }
            this._ui.lab.text = "Lv." + value.level;
            this._ui.lab_name.text = cCfg.f_cheif;
            this._ui.lab_name.color = "#" + EquipmentQualityProxy.Ins.getByQua(cCfg.f_cheifQuality).f_chiefcolor;
            this._ui.lab_snum.text = "x" + value.star;
        }
    }

    exports.FuJiangItemCtl1 = FuJiangItemCtl1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangItem1 extends ui.views.fujiang.ui_fujiangItem1UI {
        constructor() {
            super();
            this.ctl = new FuJiangItemCtl1(this);
        }
    }

    exports.FuJiangItem1 = FuJiangItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangCKView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangCKViewUI;
                this.bindClose(this._ui.btn_close);
                const tabsSkin = [this._ui.tab1, this._ui.tab2, this._ui.tab3, this._ui.tab4, this._ui.tab5, this._ui.tab6, this._ui.tab7];
                this.tabList = ["全部", "一般", "精良", "稀有", "史诗", "天赐", "神铸"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._ui.list.itemRender = FuJiangItem1;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list.selectEnable = true;
                this._ui.list.selectHandler = new Laya.Handler(this, this.onSelectHandler);
            }
        }
        onInit() {
            this._type = this.Data[0];
            this._data = this.Data[1];
            this._index = this.Data[2];
            this.tabsCtl.selectIndex = 0;
        }
        onExit() {
            this.tabsCtl.selectIndex = -1;
            this._ui.list.selectedIndex = -1;
        }
        onRenderHandler(item) {
            item.ctl.setData(item.dataSource);
        }
        onSelectHandler(index) {
            if (index == -1) {
                return;
            }
            let data = this._ui.list.array[index];
            if (this._type == 1) {
                E.ViewMgr.Open(EViewType.FuJiangWuSun1, null, [this._type, this._data, data]);
            }
            else if (this._type == 2) {
                E.ViewMgr.Open(EViewType.FuJiangPY, null, data);
                this.Close();
            }
            this._ui.list.selectedIndex = -1;
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab_name.text = this.tabList[index];
            switch (index) {
                case 0:
                    skin.lab_name.color = "#FCEABE";
                    break;
                case 1:
                    skin.lab_name.color = "#ededed";
                    break;
                case 2:
                    skin.lab_name.color = "#5ea6ff";
                    break;
                case 3:
                    skin.lab_name.color = "#c060f7";
                    break;
                case 4:
                    skin.lab_name.color = "#fff43d";
                    break;
                case 5:
                    skin.lab_name.color = "#f83535";
                    break;
                case 6:
                    skin.lab_name.color = "#1cf2ff";
                    break;
            }
            if (sel) {
                skin.img1.visible = true;
                skin.img2.visible = false;
            }
            else {
                skin.img1.visible = false;
                skin.img2.visible = true;
            }
        }
        onTabSelectHandler(v) {
            if (v == -1)
                return;
            let arr = FuJiangModel.Ins.getFuJiangList(v);
            if (this._type == 1) {
                let index1 = arr.findIndex(ele => ele.cheifId == this._data.cheifId);
                if (index1 != -1) {
                    arr.splice(index1, 1);
                }
            }
            else if (this._type == 2) {
                if (this._data) {
                    let index2 = arr.findIndex(ele => ele.cheifId == this._data.cheifId);
                    if (index2 != -1) {
                        arr.splice(index2, 1);
                    }
                }
                let index = arr.findIndex(ele => ele.pos > 0);
                if (index != -1) {
                    arr.splice(index, 1);
                }
            }
            this._ui.list.array = arr;
        }
    }

    exports.FuJiangCKView = FuJiangCKView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangCZView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangCZViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_qx, new Laya.Handler(this, this.onBtnQXClick));
                ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick));
            }
        }
        onBtnQXClick() {
            this.Close();
        }
        onBtnQDClick() {
            if (this._data) {
                let req = new CheifReturn_req;
                req.cheifId = this._data.cheifId;
                req.type = this._type;
                SocketMgr.Ins.SendMessageBin(req);
                this.Close();
            }
        }
        onInit() {
            this._data = this.Data[0];
            this._type = this.Data[1];
            let arr = [];
            let m = {};
            if (this._type == 0) {
                this._ui.lab.text = "返还全部养成资源，副将等级重置为1级";
                for (let i = 1; i < this._data.level; i++) {
                    let cfg = FuJiangLvProxy.Ins.getCfgByLv(i);
                    let id = parseInt(cfg.f_upgradecost.split("-")[0]);
                    let val = parseInt(cfg.f_upgradecost.split("-")[1]);
                    if (!m[id]) {
                        m[id] = new stCellValue();
                        m[id].id = id;
                        m[id].count = 0;
                        arr.push(m[id]);
                    }
                    m[id].count += val;
                }
            }
            else if (this._type == 1) {
                this._ui.lab.text = "返还全部养成资源，副将全部装备重置为1级";
                for (let i = 0; i < this._data.equips.length; i++) {
                    let aCfg = FuJiangEquipAttrProxy.Ins.getCfgByStarAndLv(this._data.equips[i].equipStar, this._data.equips[i].equipLevel);
                    let len = aCfg.f_id;
                    for (let j = 1; j < len; j++) {
                        let ccfg = FuJiangEquipAttrProxy.Ins.getCfgByID(j);
                        let array = ccfg.f_upgradecost.split("-");
                        let id = parseInt(array[0]);
                        let val = parseInt(array[1]);
                        if (!m[id]) {
                            m[id] = new stCellValue();
                            m[id].id = id;
                            m[id].count = 0;
                            arr.push(m[id]);
                        }
                        m[id].count += val;
                    }
                }
            }
            else if (this._type == 2) {
                this._ui.lab.text = "返还全部养成资源，副将技能等级重置为1级";
                for (let i = 0; i < this._data.skills.length; i++) {
                    let len = this._data.skills[i].skillLevel;
                    for (let j = 1; j < len; j++) {
                        let lvCfg = FuJiangSkillLvProxy.Ins.getCfgByLv(j);
                        let skillArr = lvCfg.f_upgradeskillcost.split("|");
                        for (let n = 0; n < skillArr.length; n++) {
                            let array = skillArr[n].split("-");
                            let id = parseInt(array[0]);
                            let val = parseInt(array[1]);
                            if (!m[id]) {
                                m[id] = new stCellValue();
                                m[id].id = id;
                                m[id].count = 0;
                                arr.push(m[id]);
                            }
                            m[id].count += val;
                        }
                    }
                }
            }
            ItemViewFactory.renderItemSlots(this._ui.rewardCon, arr);
        }
        onExit() {
        }
    }

    exports.FuJiangCZView = FuJiangCZView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangGLTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangglTipUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_l, new Laya.Handler(this, this.onBtnLClick));
                ButtonCtl.Create(this._ui.btn_r, new Laya.Handler(this, this.onBtnRClick));
                this._ui.list.itemRender = ui.views.fujiang.ui_fujiangglItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onRenderHandler(item, index) {
            let cfg = EquipmentQualityProxy.Ins.getByQua(item.dataSource);
            item.lab.text = cfg.f_chiefinfo;
            item.lab.color = "#" + cfg.f_chiefcolor;
            item.img.skin = "remote/fujiang/gl_" + item.dataSource + ".png";
            let arr = FuJiangDrawRateProxy.Ins.getListByLv(this._index + 1);
            let num = arr[index].f_QualityRate;
            item.lab1.text = num / 100 + "%";
        }
        onBtnLClick() {
            this._index--;
            this.updataView();
        }
        onBtnRClick() {
            this._index++;
            this.updataView();
        }
        onInit() {
            this._index = FuJiangModel.Ins.drawLevel - 1;
            this.updataView();
        }
        onExit() {
        }
        updataView() {
            let cfg = FuJiangDrawExpProxy.Ins.List[this._index];
            this._ui.lab_lv.text = cfg.f_drawlevel + "";
            if (this._index <= 0) {
                this._index = 0;
                this._ui.btn_l.visible = false;
            }
            else {
                this._ui.btn_l.visible = true;
            }
            if (this._index >= FuJiangDrawExpProxy.Ins.List.length - 1) {
                this._index = FuJiangDrawExpProxy.Ins.List.length - 1;
                this._ui.btn_r.visible = false;
            }
            else {
                this._ui.btn_r.visible = true;
            }
            this._ui.list.array = [1, 4, 5, 6, 8, 9];
        }
    }

    exports.FuJiangGLTip = FuJiangGLTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangGMView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangGMViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.Create(this._ui.btn_sub, new Laya.Handler(this, this.onBtnSubClick));
                ButtonCtl.Create(this._ui.btn_add, new Laya.Handler(this, this.onBtnAddClick));
                ButtonCtl.Create(this._ui.btn_add1, new Laya.Handler(this, this.onBtnAdd1Click));
                ButtonCtl.Create(this._ui.btn_qx, new Laya.Handler(this, this.onBtnQXClick));
                ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick));
            }
        }
        onInit() {
            this._data = {};
            this._data.f_price = FuJiangConfigProxy.Ins.List[0].f_tokenprice;
            let id = parseInt(this._data.f_price.split("-")[0]);
            if (id == ECellType.JunLingZhuang) {
                let num = parseInt(this._data.f_price.split("-")[1]);
                let count = MainModel.Ins.mRoleData.getVal(id);
                this._num = Math.floor(count / num);
                if (this._num < 1) {
                    this._num = 1;
                }
            }
            else {
                this._num = 1;
            }
            this.updataView();
        }
        onExit() {
        }
        onBtnSubClick() {
            this._num--;
            this.setBtn();
        }
        onBtnAddClick() {
            this._num++;
            this.setBtn();
        }
        onBtnAdd1Click() {
            this._num += 10;
            this.setBtn();
        }
        onBtnQXClick() {
            this.Close();
        }
        onBtnQDClick() {
            if (this._data) {
                let req = new BuyMilitaryPledge_req;
                req.num = this._num;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        updataView() {
            let itemVo = new ItemVo();
            itemVo.cfgId = ECellType.JunLingZhuang;
            itemVo.count = 1;
            ItemViewFactory.refreshSlot(this._ui.item, itemVo);
            this.setBtn();
        }
        setBtn() {
            if (this._num <= 1) {
                this._ui.btn_sub.disabled = true;
            }
            else {
                this._ui.btn_sub.disabled = false;
            }
            this._ui.lab_num.text = this._num + "";
            let id = this._data.f_price.split("-")[0];
            let num = this._data.f_price.split("-")[1];
            let needC = parseInt(num) * this._num;
            let count = MainModel.Ins.mRoleData.getVal(parseInt(id));
            this._ui.icon.skin = IconUtils.getIconByCfgId(parseInt(id));
            this._ui.lab_m.text = needC + "";
            this._ui.lab_d.x = this._ui.lab_m.x + this._ui.lab_m.textField.width;
            this._ui.lab_d.text = " 购买军令状";
            if (count >= needC) {
                this._ui.lab_m.color = "#54e80d";
            }
            else {
                this._ui.lab_m.color = "#ff1e00";
            }
        }
    }

    exports.FuJiangGMView = FuJiangGMView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangCKItemCtl {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_ZM_DH, this, this.onDHOK);
        }
        onRemove() {
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_ZM_DH, this, this.onDHOK);
            if (this._eff) {
                this._eff.dispose();
                this._eff = null;
            }
        }
        setEffOne(index) {
            this._isTen = false;
            this._ui.sp1.visible = false;
            this._eff = new SimpleEffect(this._ui.sp, `o/spine/cardxiyou${index}/cardxiyou${index}`);
            this._eff.play(0, false, this, this.effEndOne2);
        }
        effEndOne1() {
            this._eff.play(1, false, this, this.effEndOne2);
        }
        effEndOne2() {
            this._eff.play(2, false, this, this.effEndOne3);
        }
        effEndOne3() {
            this._eff.play(3, false, this, this.effEndOne4);
            this._ui.sp1.visible = true;
        }
        effEndOne4() {
            this._eff.play(4, true);
            if (this._isTen) {
                FuJiangModel.Ins.playNum++;
                if (FuJiangModel.Ins.playNum >= 10) {
                    FuJiangModel.Ins.event(FuJiangModel.FUJIANG_ZM_DH_OK);
                }
                else {
                    FuJiangModel.Ins.event(FuJiangModel.FUJIANG_ZM_DH);
                }
            }
            else {
                FuJiangModel.Ins.event(FuJiangModel.FUJIANG_ZM_DH_OK);
            }
        }
        onDHOK() {
            if (FuJiangModel.Ins.playNum == 2) {
                if (this._pos == 3 || this._pos == 4 || this._pos == 5) {
                    this._eff.play(2, false, this, this.effEndOne3);
                }
            }
            else if (FuJiangModel.Ins.playNum == 5) {
                if (this._pos == 6 || this._pos == 7 || this._pos == 8) {
                    this._eff.play(2, false, this, this.effEndOne3);
                }
            }
            else if (FuJiangModel.Ins.playNum == 8) {
                if (this._pos == 9 || this._pos == 10) {
                    this._eff.play(2, false, this, this.effEndOne3);
                }
            }
        }
        setEffTen(index, pos) {
            this._isTen = true;
            this._pos = pos;
            this._ui.sp1.visible = false;
            this._eff = new SimpleEffect(this._ui.sp, `o/spine/cardxiyou${index}/cardxiyou${index}`);
            this._eff.play(0, false, this, this.effEndTen1);
        }
        effEndTen1() {
            if (this._pos == 1 || this._pos == 2) {
                this._eff.play(2, false, this, this.effEndOne3);
            }
        }
        setData(cfg) {
            this._pos = 0;
            FuJiangModel.Ins.playNum = 0;
            if (cfg.cheifId) {
                let fjCfg = FuJiangListProxy.Ins.getCfgById(cfg.cheifId);
                this._ui.img_qua.skin = FuJiangListProxy.Ins.getQuaSkin(fjCfg.f_cheifQuality);
                this._ui.img.skin = FuJiangListProxy.Ins.getFuJiangSkin(fjCfg.f_cheifid);
                this._ui.img_qua1.skin = "";
                this._ui.img_s.visible = false;
                this._ui.lab.text = "";
                this._ui.lab_name.text = fjCfg.f_cheif;
                if (cfg.itemId) {
                    this._ui.sp_new.visible = false;
                    let iCfg = ItemProxy.Ins.getCfg(cfg.itemId);
                    this._ui.img11.skin = IconUtils.getIconByCfgId(cfg.itemId);
                    this._ui.lab11.visible = true;
                    this._ui.lab_num.text = cfg.count + "";
                }
                else {
                    this._ui.sp_new.visible = true;
                    this._ui.img11.skin = "";
                    this._ui.lab11.visible = false;
                    this._ui.lab_num.text = "";
                }
            }
            else {
                let iCfg = ItemProxy.Ins.getCfg(cfg.itemId);
                let qua = iCfg.f_qua;
                if (qua == 3 || qua == 4 || qua == 5) {
                    qua += 1;
                }
                this._ui.img_qua.skin = FuJiangListProxy.Ins.getQuaSkin(qua);
                this._ui.img.skin = "";
                this._ui.img_qua1.skin = IconUtils.getIconByCfgId(cfg.itemId);
                this._ui.img_s.visible = true;
                this._ui.lab.text = "x" + cfg.count;
                this._ui.lab_name.text = main.itemName(iCfg.f_name);
                this._ui.sp_new.visible = false;
                this._ui.img11.skin = "";
                this._ui.lab11.visible = false;
                this._ui.lab_num.text = "";
            }
        }
    }

    exports.FuJiangCKItemCtl = FuJiangCKItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangHDView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangHDViewUI;
                ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick));
                ButtonCtl.Create(this._ui.btn_ok, new Laya.Handler(this, this.onBtnOKClick));
                for (let i = 0; i < 11; i++) {
                    this["_ctl" + i] = new FuJiangCKItemCtl(this._ui["item" + i]);
                }
                this._eff = new SimpleEffect(this._ui.sp1, `o/spine/cardgongxi/cardgongxi`);
            }
        }
        onInit() {
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_ZM_DH_OK, this, this.onOk);
            this._indexEff = this.Data[0];
            this._itemVo = this.Data[1];
            this._eff.play(0, false, this, this.effEnd);
            this.visItem();
            if (FuJiangModel.Ins.zmNum == 0) {
                this._ui.lab_num.text = "招募一次";
            }
            else {
                this._ui.lab_num.text = "招募十次";
            }
            this._ui.btn_qd.visible = this._ui.btn_ok.visible = false;
        }
        onExit() {
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_ZM_DH_OK, this, this.onOk);
            if (this._eff) {
                this._eff.stop();
            }
        }
        onOk() {
            this._ui.btn_qd.visible = this._ui.btn_ok.visible = true;
        }
        effEnd() {
            this.playEff();
        }
        visItem() {
            for (let i = 0; i < 11; i++) {
                this._ui["item" + i].visible = false;
            }
        }
        playEff() {
            if (FuJiangModel.Ins.zmNum == 0) {
                this._ui.item0.visible = true;
                this.playOne();
            }
            else {
                this.playTen();
            }
        }
        playOne() {
            let cfg;
            let qua;
            if (FuJiangModel.Ins.recruitChief[0].cheifId) {
                cfg = FuJiangListProxy.Ins.getCfgById(FuJiangModel.Ins.recruitChief[0].cheifId);
                qua = cfg.f_cheifQuality;
            }
            else {
                cfg = ItemProxy.Ins.getCfg(FuJiangModel.Ins.recruitChief[0].itemId);
                qua = cfg.f_qua;
                if (qua == 3 || qua == 4 || qua == 5) {
                    qua += 1;
                }
            }
            let index = FuJiangModel.Ins.quaList.findIndex(ele => ele == qua) + 1;
            if (index == 6) {
                index = this._indexEff;
            }
            this._ctl0.setData(FuJiangModel.Ins.recruitChief[0]);
            this._ctl0.setEffOne(index);
        }
        playTen() {
            for (let i = 0; i < 10; i++) {
                let cfg;
                let qua;
                if (FuJiangModel.Ins.recruitChief[i].cheifId) {
                    cfg = FuJiangListProxy.Ins.getCfgById(FuJiangModel.Ins.recruitChief[i].cheifId);
                    qua = cfg.f_cheifQuality;
                }
                else {
                    cfg = ItemProxy.Ins.getCfg(FuJiangModel.Ins.recruitChief[i].itemId);
                    qua = cfg.f_qua;
                    if (qua == 3 || qua == 4 || qua == 5) {
                        qua += 1;
                    }
                }
                let index = FuJiangModel.Ins.quaList.findIndex(ele => ele == qua) + 1;
                if (index == 6) {
                    index = this._indexEff;
                }
                this._ui["item" + (i + 1)].visible = true;
                this["_ctl" + (i + 1)].setData(FuJiangModel.Ins.recruitChief[i]);
                this["_ctl" + (i + 1)].setEffTen(index, i + 1);
            }
        }
        onBtnQDClick() {
            this.Close();
        }
        onBtnOKClick() {
            if (this._itemVo.cfg.f_itemid == 293) {
                if (!MainModel.Ins.isItemEnough(this._itemVo.cfg.f_itemid, this._itemVo.count)) {
                    E.ViewMgr.Open(EViewType.FuJiangGouMai);
                    return;
                }
            }
            if (MainModel.Ins.isItemEnough(this._itemVo.cfg.f_itemid, this._itemVo.count), true) {
                this.Close();
                let req = new RecruitChief_req;
                req.itemId = this._itemVo.cfg.f_itemid;
                req.type = FuJiangModel.Ins.zmNum;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
    }

    exports.FuJiangHDView = FuJiangHDView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangHDView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangHDView1UI;
                ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick));
                ButtonCtl.Create(this._ui.btn_ok, new Laya.Handler(this, this.onBtnOKClick));
                this._eff = new SimpleEffect(this._ui.sp1, `o/spine/cardgongxi/cardgongxi`);
            }
        }
        onBtnQDClick() {
            this.Close();
        }
        onBtnOKClick() {
            if (this._itemVo.cfg.f_itemid == 293) {
                if (!MainModel.Ins.isItemEnough(this._itemVo.cfg.f_itemid, this._itemVo.count)) {
                    E.ViewMgr.Open(EViewType.FuJiangGouMai);
                    return;
                }
            }
            if (MainModel.Ins.isItemEnough(this._itemVo.cfg.f_itemid, this._itemVo.count), true) {
                this.Close();
                let req = new RecruitChief_req;
                req.itemId = this._itemVo.cfg.f_itemid;
                req.type = FuJiangModel.Ins.zmNum;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onInit() {
            this._itemVo = this.Data;
            this._num = 0;
            this._ui.panel.mouseEnabled = false;
            while (this._ui.panel.numChildren) {
                this._ui.panel.removeChildAt(0);
            }
            this._ui.btn_qd.visible = this._ui.btn_ok.visible = false;
            this._eff.play(0, false, this, this.effEnd);
        }
        onExit() {
            if (this._eff) {
                this._eff.stop();
            }
            Laya.Tween.clearAll(this._ui.panel.vScrollBar);
        }
        effEnd() {
            this.updataView();
        }
        updataView() {
            if (this._num >= 35) {
                Laya.timer.once(300, this, this.updataView1);
                return;
            }
            if (this._num == 16) {
                Laya.Tween.to(this._ui.panel.vScrollBar, { value: 2100 }, 4500, null, Laya.Handler.create(this, this.onTweenComplete));
            }
            let xx = this._num % 4;
            let yy = Math.floor(this._num / 4);
            let item = new ui.views.fujiang.ui_fujiangItem8UI;
            this.setItem(item);
            item.x = xx * 180;
            item.y = yy * 224 + 30;
            this._ui.panel.addChild(item);
            this._num++;
            Laya.timer.once(100, this, this.updataView);
        }
        setItem(item) {
            let cfg = FuJiangModel.Ins.recruitChief[this._num];
            if (cfg.cheifId) {
                let fjCfg = FuJiangListProxy.Ins.getCfgById(cfg.cheifId);
                item.img_qua.skin = FuJiangListProxy.Ins.getQuaSkin(fjCfg.f_cheifQuality);
                item.img.skin = FuJiangListProxy.Ins.getFuJiangSkin(fjCfg.f_cheifid);
                item.img_qua1.skin = "";
                item.img_s.visible = false;
                item.lab.text = "";
                item.lab_name.text = fjCfg.f_cheif;
                if (cfg.itemId) {
                    item.sp_new.visible = false;
                    let iCfg = ItemProxy.Ins.getCfg(cfg.itemId);
                    item.img11.skin = IconUtils.getIconByCfgId(cfg.itemId);
                    item.lab11.visible = true;
                    item.lab_num.text = cfg.count + "";
                }
                else {
                    item.sp_new.visible = true;
                    item.img11.skin = "";
                    item.lab11.visible = false;
                    item.lab_num.text = "";
                }
            }
            else {
                let iCfg = ItemProxy.Ins.getCfg(cfg.itemId);
                let qua = iCfg.f_qua;
                if (qua == 3 || qua == 4 || qua == 5) {
                    qua += 1;
                }
                item.img_qua.skin = FuJiangListProxy.Ins.getQuaSkin(qua);
                item.img.skin = "";
                item.img_qua1.skin = IconUtils.getIconByCfgId(cfg.itemId);
                item.img_s.visible = true;
                item.lab.text = "x" + cfg.count;
                item.lab_name.text = main.itemName(iCfg.f_name);
                item.sp_new.visible = false;
                item.img11.skin = "";
                item.lab11.visible = false;
                item.lab_num.text = "";
            }
        }
        updataView1() {
            this._ui.btn_qd.visible = this._ui.btn_ok.visible = true;
            this._ui.panel.vScrollBar.value = 2100;
            Laya.Tween.clearAll(this._ui.panel.vScrollBar);
            this._ui.panel.mouseEnabled = true;
        }
        onTweenComplete() {
        }
    }

    exports.FuJiangHDView1 = FuJiangHDView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function getQua(vo) {
        return Mount_ListProxy.Ins.getCfg(vo.id).f_Quality;
    }
    class ZuoqiFactory {
        static createZuoQiVo(cell) {
            let _vo = new ZuoqiVo();
            _vo.curVo = cell;
            return _vo;
        }
        static sortStar(a, b) {
            if (a.star > b.star) {
                return -1;
            }
            else if (a.star < b.star) {
                return 1;
            }
            return 0;
        }
        static sortLv(a, b) {
            if (a.lv > b.lv) {
                return -1;
            }
            else if (a.lv < b.lv) {
                return 1;
            }
            return 0;
        }
        static sortQua(a, b) {
            let aq = ZuoqiFactory.getQua(a);
            let bq = ZuoqiFactory.getQua(b);
            if (aq > bq) {
                return -1;
            }
            else if (aq < bq) {
                return 1;
            }
            return 0;
        }
        static getQua(vo) {
            return Mount_ListProxy.Ins.getCfg(vo.id).f_Quality;
        }
        static sortLvStarFunc(a, b) {
            if (a.lv > b.lv) {
                if (a.star < b.star) {
                    return 1;
                }
                return -1;
            }
            else if (a.lv < b.lv) {
                if (a.star > b.star) {
                    return -1;
                }
                return 1;
            }
            return 0;
        }
        static sortList(l) {
            l = l.sort(this.sortQua);
            let quaMap = {};
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let qua = getQua(cell);
                if (!quaMap[qua]) {
                    quaMap[qua] = [];
                }
                quaMap[qua].push(cell);
            }
            for (let c in quaMap) {
                let arr = quaMap[c];
                arr = arr.sort(this.sortLv);
                let lvMaps = {};
                for (let i = 0; i < arr.length; i++) {
                    let cell = arr[i];
                    if (!lvMaps[cell.lv]) {
                        lvMaps[cell.lv] = [];
                    }
                    lvMaps[cell.lv].push(cell);
                }
                for (let v in lvMaps) {
                    let arrlv = lvMaps[v];
                    arrlv = arrlv.sort(this.sortStar);
                }
            }
            let _maxQua = Mount_ListProxy.Ins.maxQua;
            let a = [];
            for (let i = 1; i <= _maxQua; i++) {
                let m = quaMap[i];
                if (m) {
                    a.push(m);
                }
            }
            a = a.reverse();
            let b = [];
            for (let i = 0; i < a.length; i++) {
                b = b.concat(a[i]);
            }
            return b;
        }
    }

    exports.ZuoqiFactory = ZuoqiFactory;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangItem8 extends ui.views.fujiang.ui_fujiangItem9UI {
        constructor() {
            super();
            this.model = ZuoQiModel.Ins;
            this.ctl = new ZuoQiSlotCtl(this, true);
            this.ctl.clickHandler = new Laya.Handler(this, this.onClickHandler);
        }
        onClickHandler() {
            let view = E.ViewMgr.Get(EViewType.FuJiangMountCKView);
            if (view.selectRideId && view.selectRideId == this.data.id) {
                view.selectRideId = undefined;
            }
            else {
                view.selectRideId = this.data.id;
            }
            view.refreshView();
        }
        setData(data) {
            this.data = data;
            this.ctl.mData = ZuoqiFactory.createZuoQiVo(data);
            this.ctl.refresh();
            this.updateSelect();
            let vo = FuJiangModel.Ins.getMountDataByMountId(data.id);
            if (vo) {
                if (vo.cheifId > 0) {
                    this.img.visible = true;
                    this.lab_my.visible = false;
                    this.img_role.visible = true;
                    this.img_role.skin = FuJiangListProxy.Ins.getFuJiangSkin(vo.cheifId);
                }
                else if (vo.cheifId == 0) {
                    this.img.visible = true;
                    this.lab_my.visible = true;
                    this.img_role.visible = false;
                }
                else {
                    this.img.visible = false;
                }
            }
            else {
                this.img.visible = false;
            }
        }
        updateSelect() {
            let view = E.ViewMgr.Get(EViewType.FuJiangMountCKView);
            let _bo = false;
            if (view.selectRideId == this.data.id) {
                _bo = true;
            }
            this.ctl.mSelected = _bo;
        }
    }

    exports.FuJiangItem8 = FuJiangItem8;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangMountCKView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onExit() {
            this.selectRideId = undefined;
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = ZuoQiModel.Ins;
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangMountCKViewUI();
                this._ui.list1.itemRender = FuJiangItem8;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list1.array = [];
                this.btnList.push(ButtonCtl.Create(this._ui.qichenBtn, new Laya.Handler(this, this.onRideHandler)), ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.Close)));
            }
        }
        onRideHandler() {
            if (this.selectRideId != undefined) {
                let cheifId = this.Data;
                if (cheifId) {
                    let cfg = FuJiangModel.Ins.getMountDataByCheifId(cheifId);
                    if (cfg && cfg.mountId == this.selectRideId) {
                        E.ViewMgr.ShowMidError("已骑乘当前坐骑");
                        return;
                    }
                    let req = new MountChiefChange_req;
                    req.cheifId = cheifId;
                    req.mountId = this.selectRideId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
                else {
                    if (this.model.rideVo.rideId == this.selectRideId) {
                        E.ViewMgr.ShowMidError("已骑乘当前坐骑");
                        return;
                    }
                    else {
                        this.model.rideUpdate(this.selectRideId);
                    }
                }
            }
            this.Close();
        }
        onItemRender(item, index) {
            item.setData(item.dataSource);
        }
        refreshView() {
            this._ui.list1.refresh();
        }
        onInit() {
            let l = ZuoqiFactory.sortList(this.model.storgeList);
            this._ui.list1.array = l;
            this._ui.list1.scrollTo(0);
            this.refreshView();
        }
    }

    exports.FuJiangMountCKView = FuJiangMountCKView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangItem10 extends ui.views.fujiang.ui_fujiangItem10UI {
        constructor() {
            super();
        }
        setData(value, cheifId, index, selIndex) {
            if (!value)
                return;
            this._data = FuJiangSkinProxy.Ins.getCfgById(value);
            let cCfg = FuJiangListProxy.Ins.getCfgById(cheifId);
            this.img_qua.skin = FuJiangListProxy.Ins.getQuaSkin(cCfg.f_cheifQuality);
            this.img.skin = "o/chief/" + this._data.f_skinicon;
            this.lab_name.text = this._data.f_skinname;
            if (index == selIndex) {
                this.img_sel.visible = true;
            }
            else {
                this.img_sel.visible = false;
            }
            let cfg = FuJiangModel.Ins.getFuJiangCfgById(cheifId);
            if (this._data.f_skinid == cfg.skinId) {
                this.gou.visible = true;
            }
            else {
                this.gou.visible = false;
            }
            if (cfg.skinIds.indexOf(this._data.f_skinid) != -1) {
                this.box.gray = false;
                this.lab_js.visible = false;
            }
            else {
                this.box.gray = true;
                this.lab_js.visible = true;
                if (this._data.f_skintype == 1) {
                    this.lab_js.text = this._data.f_p1 + "星 解锁";
                }
            }
        }
    }

    exports.FuJiangItem10 = FuJiangItem10;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangItem3 extends ui.views.fujiang.ui_fujiangItem3UI {
        constructor() {
            super();
            this._starCtl = new FuJiangStarCtl(this.star);
        }
        setData(value) {
            if (!value)
                return;
            let cfg = FuJiangListProxy.Ins.getCfgById(value.id);
            let eCfg = EquipmentIDProxy.Ins.GetDataById(value.data.partId);
            let starCfg = FuJiangEquipStarProxy.Ins.getCfgByStar(value.data.equipStar);
            let attrCfg = FuJiangEquipAttrProxy.Ins.getCfgByStarAndLv(value.data.equipStar, value.data.equipLevel);
            this.img_qua.skin = IconUtils.getQuaIcon(starCfg.f_starquality);
            this.icon.skin = FuJiangListProxy.Ins.getFuJiangEquipSkin(value.data.partId, cfg.f_equipiconid);
            this._starCtl.setStar(value.data.equipStar);
            this.lab_name.text = EquipmentQualityProxy.Ins.getByQua(starCfg.f_starquality).f_EquipmentLevel + "的" + eCfg.f_name;
            this.lab_name.color = "#" + EquipmentQualityProxy.Ins.getByQua(starCfg.f_starquality).f_Color;
            this.lab_lv.text = "Lv." + value.data.equipLevel;
            let st = attrCfg["f_position" + value.data.partId];
            let id = parseInt(st.split(":")[0]);
            let val = parseInt(st.split(":")[1]);
            if (value.data.partId == 10) {
                this.lan_attr.text = "全忽视:";
            }
            else {
                this.lan_attr.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            }
            this.lab_va.text = attrConvert(id, val);
        }
    }

    exports.FuJiangItem3 = FuJiangItem3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangSkillCtl {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnSkillClick), false);
        }
        onAdd() {
        }
        onRemove() {
        }
        onBtnSkillClick() {
            E.ViewMgr.Open(EViewType.FuJiangSkillTip, null, [this._skillId, this._skillLv, this._skillStar]);
        }
        setData(id, index, lv, star) {
            this._skillLv = lv;
            this._skillStar = 0;
            let cfg = FuJiangSkillProxy.Ins.getCfgById(id);
            let arr1 = cfg.f_starpoint.split("|");
            let ind;
            for (let i = 0; i < arr1.length; i++) {
                let arr2 = arr1[i].split("-");
                if (star >= parseInt(arr2[0]) && star <= parseInt(arr2[1])) {
                    ind = i;
                    break;
                }
            }
            let arr = cfg["f_clientskill" + index].split("|");
            if (parseInt(arr[ind]) > 0) {
                this._skillId = parseInt(arr[ind]);
                this._ui.lab_lv.text = "lv." + lv;
                this._ui.lv_xx.text = "";
                this._ui.btn.gray = false;
            }
            else {
                let ii;
                for (let i = 0; i < arr.length; i++) {
                    if (parseInt(arr[i]) > 0) {
                        this._skillId = parseInt(arr[i]);
                        ii = i;
                        break;
                    }
                }
                this._ui.lab_lv.text = "";
                this._skillStar = parseInt(arr1[ii].split("-")[0]);
                this._ui.lv_xx.text = this._skillStar + "星";
                this._ui.btn.gray = true;
            }
            let skillCfg = FuJiangSkillClientProxy.Ins.getCfgById(this._skillId);
            this._ui.lab.text = skillCfg.f_skillname;
        }
    }

    exports.FuJiangSkillCtl = FuJiangSkillCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangItem7 extends ui.views.fujiang.ui_fujiangItem7UI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            this._ctl = new FuJiangSkillCtl(this.btn_skill);
        }
        onBtnClick() {
            if (!this._data)
                return;
            let lvCfg = FuJiangSkillLvProxy.Ins.getCfgByLv(this._skillLv);
            if (!MainModel.Ins.isItemEnoughStArr(lvCfg.f_upgradeskillcost, true)) {
                return;
            }
            let req = new CheifSkillUp_req;
            req.cheifId = this._data.cheifId;
            req.skillPos = this._index;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setData(index, data, skillId) {
            if (!data)
                return;
            this._data = data;
            this._index = index;
            let cfg = data.skills.find(ele => ele.skillPos == index);
            this._skillLv = 1;
            if (cfg) {
                this._skillLv = cfg.skillLevel;
            }
            this._ctl.setData(data.cheifId, index, this._skillLv, data.star);
            if (cfg) {
                this.lab_lv.text = "当前等级: lv" + this._skillLv;
                this.bg1.gray = false;
                this.lab_s.visible = this.sp_suo.visible = false;
                let skillCfg = FuJiangSkillClientProxy.Ins.getCfgById(skillId);
                let array = [];
                let arr = skillCfg.f_valuenum.split("|");
                for (let i = 0; i < arr.length; i++) {
                    if (arr[i] != "" && arr[i] != "0") {
                        array.push(parseInt(arr[i]) * cfg.skillLevel);
                    }
                }
                if (cfg.skillLevel >= FuJiangSkillLvProxy.Ins.maxLv) {
                    this.lab_max.visible = true;
                    this.sp.visible = false;
                }
                else {
                    this.lab_max.visible = false;
                    this.sp.visible = true;
                    let lvCfg = FuJiangSkillLvProxy.Ins.getCfgByLv(cfg.skillLevel);
                    let arr = lvCfg.f_upgradeskillcost.split("|");
                    let id = parseInt(arr[0].split("-")[0]);
                    let val = parseInt(arr[0].split("-")[1]);
                    let val1 = MainModel.Ins.mRoleData.getVal(id);
                    this.img2.skin = IconUtils.getIconByCfgId(id);
                    this.lab_num2.text = val + "";
                    if (val1 < val) {
                        this.lab_num2.color = "#D02525";
                    }
                    else {
                        this.lab_num2.color = "#FFEEC2";
                    }
                    if (arr.length == 1) {
                        this.bg.width = 140;
                        this.img1.skin = "";
                        this.lab_num1.text = "";
                    }
                    else if (arr.length == 2) {
                        this.bg.width = 280;
                        id = parseInt(arr[1].split("-")[0]);
                        val = parseInt(arr[1].split("-")[1]);
                        val1 = MainModel.Ins.mRoleData.getVal(id);
                        this.img1.skin = IconUtils.getIconByCfgId(id);
                        this.lab_num1.text = val + "";
                        if (val1 < val) {
                            this.lab_num1.color = "#D02525";
                        }
                        else {
                            this.lab_num1.color = "#FFEEC2";
                        }
                    }
                }
            }
            else {
                this.lab_lv.text = "";
                this.bg1.gray = this.lab_s.gray = true;
                this.lab_s.visible = this.sp_suo.visible = true;
                this.lab_max.visible = false;
                this.sp.visible = false;
                let ii;
                let scfg = FuJiangSkillProxy.Ins.getCfgById(data.cheifId);
                let arr = scfg["f_clientskill" + index].split("|");
                for (let i = 0; i < arr.length; i++) {
                    if (parseInt(arr[i]) > 0) {
                        ii = i;
                        break;
                    }
                }
                let arr1 = scfg.f_starpoint.split("|");
                this.lab_s.text = "副将升星至" + parseInt(arr1[ii].split("-")[0]) + "星解锁技能";
            }
        }
    }

    exports.FuJiangItem7 = FuJiangItem7;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangPYView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangPYViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_l, new Laya.Handler(this, this.onBtnLeftClick));
                ButtonCtl.Create(this._ui.btn_r, new Laya.Handler(this, this.onBtnRightClick));
                ButtonCtl.Create(this._ui.btn_cz, new Laya.Handler(this, this.onBtnCZClick));
                ButtonCtl.Create(this._ui.btn_lv, new Laya.Handler(this, this.onBtnLVClick));
                ButtonCtl.Create(this._ui.btn_yjsj, new Laya.Handler(this, this.onBtnYJSJClick));
                ButtonCtl.Create(this._ui.btn_yjcs, new Laya.Handler(this, this.onBtnYJCSClick));
                ButtonCtl.Create(this._ui.btn_add, new Laya.Handler(this, this.onBtnAddClick));
                ButtonCtl.Create(this._ui.btn_yssx, new Laya.Handler(this, this.onBtnYssxClick));
                ButtonCtl.Create(this._ui.btn_pf, new Laya.Handler(this, this.onBtnPFClick));
                ButtonCtl.Create(this._ui.btn_cs, new Laya.Handler(this, this.onBtnCSClick));
                ButtonCtl.Create(this._ui.btn_sz, new Laya.Handler(this, this.onBtnSZClick));
                ValCtl.Create(this._ui.lv_lab, this._ui.lv_img, ECellType.FuJiangLv);
                ValCtl.Create(this._ui.equip_lb1, this._ui.equip_img1, ECellType.FuJiangEquipStar);
                ValCtl.Create(this._ui.equip_lb2, this._ui.equip_img2, ECellType.FuJiangEquipLv);
                ValCtl.Create(this._ui.skill_lab1, this._ui.skill_img1, ECellType.FuJiangSkill2);
                ValCtl.Create(this._ui.skill_lab2, this._ui.skill_img2, ECellType.FuJiangSkill1);
                this._ui.tab2.visible = false;
                this._ui.sp22.visible = false;
                const tabsSkin = [this._ui.tab1, this._ui.tab3, this._ui.tab4, this._ui.tab5];
                this.tabList = ["属性", "升星", "技能", "皮肤"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._plusCtl = FontCtlFactory.createPlus();
                this._ui.list4.itemRender = ui.views.fujiang.ui_fujiangAttrItemUI;
                this._ui.list4.renderHandler = new Laya.Handler(this, this.onRenderHandler4);
                this._ui.list5.itemRender = ui.views.fujiang.ui_fujiangAttrItemUI;
                this._ui.list5.renderHandler = new Laya.Handler(this, this.onRenderHandler5);
                this._ui.list6.itemRender = ui.views.fujiang.ui_fujiangAttrItemUI;
                this._ui.list6.renderHandler = new Laya.Handler(this, this.onRenderHandler6);
                this._ui.list7.itemRender = ui.views.fujiang.ui_fujiangAttrItemUI;
                this._ui.list7.renderHandler = new Laya.Handler(this, this.onRenderHandler5);
                this._ui.list1.itemRender = FuJiangItem3;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
                this._ui.list2.itemRender = ui.views.fujiang.ui_fujiangAttrItem1UI;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onRenderHandler2);
                this._ui.list.itemRender = FuJiangItem7;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list_pf.itemRender = FuJiangItem10;
                this._ui.list_pf.renderHandler = new Laya.Handler(this, this.onRenderHandler10);
                this._ui.list_pf.selectEnable = true;
            }
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab.text = this.tabList[index];
            if (sel) {
                skin.img1.visible = false;
                skin.img2.visible = true;
                skin.lab.color = "#90501F";
            }
            else {
                skin.img1.visible = true;
                skin.img2.visible = false;
                skin.lab.color = "#FCEABE";
            }
        }
        onTabSelectHandler(v) {
            if (v == -1)
                return;
            for (let i = 0; i < 4; i++) {
                if (i == v) {
                    this._ui["sp" + (i + 1)].visible = true;
                }
                else {
                    this._ui["sp" + (i + 1)].visible = false;
                }
            }
            this._ui.lv_box.visible = false;
            this._ui.equip_box1.visible = this._ui.equip_box2.visible = false;
            this._ui.skill_box1.visible = this._ui.skill_box2.visible = false;
            if (v == 0) {
                this._ui.lv_box.visible = true;
            }
            else if (v == 2) {
                this._ui.skill_box1.visible = this._ui.skill_box2.visible = true;
            }
            if (this._data && this._avatar) {
                let cCfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
                let pfArr = cCfg.f_chiefskin.split("|");
                let index = pfArr.indexOf(this._data.skinId.toString());
                this._ui.list_pf.selectedIndex = index;
            }
        }
        onBtnCZClick() {
            if (this._data) {
                if (this._data.level <= 1) {
                    E.ViewMgr.ShowMidError("已是最低等级");
                    return;
                }
                E.ViewMgr.Open(EViewType.FuJiangCZ, null, [this._data, 0]);
            }
        }
        onBtnLeftClick() {
            this._index--;
            this.setBtn();
        }
        onBtnRightClick() {
            this._index++;
            this.setBtn();
        }
        onInit() {
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_UPDATA, this, this.onUpdataView);
            let arr = FuJiangModel.Ins.getFuJiangList();
            this._index = arr.findIndex(ele => ele.cheifId === this.Data.cheifId);
            this.setBtn();
            this.tabsCtl.selectIndex = 0;
        }
        onExit() {
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_UPDATA, this, this.onUpdataView);
            this.tabsCtl.selectIndex = -1;
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        setBtn() {
            let arr = FuJiangModel.Ins.getFuJiangList();
            this._data = arr[this._index];
            if (!this._data)
                return;
            this.updataView();
            let cCfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
            let pfArr = cCfg.f_chiefskin.split("|");
            let index = pfArr.indexOf(this._data.skinId.toString());
            this._ui.list_pf.selectedIndex = index;
            if (arr.length == 1) {
                this._ui.btn_l.visible = false;
                this._ui.btn_r.visible = false;
            }
            else {
                if (this._index == 0) {
                    this._ui.btn_l.visible = false;
                    this._ui.btn_r.visible = true;
                }
                else if (this._index == arr.length - 1) {
                    this._ui.btn_l.visible = true;
                    this._ui.btn_r.visible = false;
                }
                else {
                    this._ui.btn_l.visible = true;
                    this._ui.btn_r.visible = true;
                }
            }
        }
        onUpdataView() {
            let arr = FuJiangModel.Ins.getFuJiangList();
            this._data = arr[this._index];
            if (!this._data)
                return;
            this.updataView();
        }
        updataView() {
            let cCfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
            let qCfg = EquipmentQualityProxy.Ins.getByQua(cCfg.f_cheifQuality);
            this._ui.lab_name.text = cCfg.f_cheif;
            this._ui.lab_qua.text = qCfg.f_chiefinfo;
            this._ui.lab_name.color = this._ui.lab_qua.color = "#" + qCfg.f_chiefcolor;
            this._ui.lab_lv.text = "Lv." + this._data.level;
            let v = StringUtil.val2Atlas(this._data.cheifFight);
            this._plusCtl.setValue(this._ui.plusCon, v);
            this._ui.img_zy.skin = FuJiangListProxy.Ins.getProfessionSkin(cCfg.f_cheifClass);
            this._ui.lab_zy.text = FuJiangClasProxy.Ins.getCfgByPre(cCfg.f_cheifClass).f_chiefclass;
            let skin = FuJiangModel.Ins.getFuJiangSkin(cCfg.f_cheifid);
            if (!this._avatar) {
                this._avatar = AvatarFactory.createAvatarByStSkin(skin, EAvatarAnim.NormalStand, EAvatarDir.Right);
                this._avatar.scale(1.1, 1.1);
                this._ui.sp.addChild(this._avatar);
            }
            else {
                this._avatar.mSkin = skin;
            }
            this._ui.img_sz.visible = false;
            this._ui.lab_sz1.text = "上阵";
            this._type = 0;
            if (this._data.pos) {
                this._ui.img_sz.visible = true;
                this._ui.lab_sz.text = "已上阵";
                this._ui.lab_sz1.text = "下阵";
                this._type = 1;
            }
            else {
                if (this._data.assistId) {
                    this._ui.img_sz.visible = true;
                    this._ui.lab_sz.text = "已助阵";
                    this._ui.lab_sz1.text = "下阵";
                    this._type = 2;
                }
            }
            if (this._data.pos) {
                this._ui.img_plusCon.visible = true;
            }
            else {
                this._ui.img_plusCon.visible = false;
            }
            this.updataSXView();
            this.updataStarView();
            this.updataSkillView();
            this.updataSkinView();
        }
        onRenderHandler4(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.lab.visible = false;
        }
        onRenderHandler5(item, index) {
            item.tf1.color = item.valTf.color = "#FB5AFB";
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            let cCfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
            let lvSt = cCfg.f_specialupgrade.split("|")[index];
            let starSt = cCfg.f_specialupstar.split("|")[index];
            let lvNum = parseInt(lvSt.split(":")[1]) * (this._data.level - 1);
            let starNum = parseInt(starSt.split(":")[1]) * (this._data.star - 1);
            val = val + lvNum + starNum;
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            let starLv = parseInt(cCfg.f_specialunlock.split("|")[index]);
            if (this._data.star >= starLv) {
                item.tf1.color = item.valTf.color = "#FB5AFB";
                item.valTf.text = attrConvert(id, val);
                item.lab.visible = false;
            }
            else {
                item.tf1.color = item.valTf.color = "#D3D3D3";
                item.valTf.text = attrConvert(id, val);
                item.lab.visible = true;
                item.lab.text = "(" + starLv + "星)";
            }
        }
        onRenderHandler6(item) {
            item.lab.visible = false;
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
        }
        updataSXView() {
            this._ui.lab_num.color = "#FFEEC2";
            DotManager.removeDot(this._ui.tab1);
            DotManager.removeDot(this._ui.btn_lv);
            let nextCfg = FuJiangLvProxy.Ins.getCfgByLv(this._data.level + 1);
            let cfg = FuJiangLvProxy.Ins.getCfgByLv(this._data.level);
            if (!nextCfg) {
                this._ui.lab_ma.visible = true;
                this._ui.btn_lv.visible = false;
            }
            else {
                this._ui.lab_ma.visible = false;
                this._ui.btn_lv.visible = true;
                this._ui.img1.skin = IconUtils.getIconByCfgId(ECellType.FuJiangLv);
                if (t_Platform.Ins.isOneLvUp) {
                    this._lvType = 0;
                    this._ui.lab_num.text = cfg.f_upgradecost.split("-")[1];
                    this._ui.lab.text = "一键升级";
                    let val = MainModel.Ins.mRoleData.getVal(ECellType.FuJiangLv);
                    if (val < parseInt(cfg.f_upgradecost.split("-")[1])) {
                        this._ui.lab_num.color = "#D02525";
                    }
                    this._lvNum = 0;
                    let count = 0;
                    for (let i = this._data.level; i < FuJiangLvProxy.Ins.maxLv; i++) {
                        if (i >= MainModel.Ins.mRoleData.lv) {
                            break;
                        }
                        let cc = FuJiangLvProxy.Ins.getCfgByLv(i);
                        count += parseInt(cc.f_upgradecost.split("-")[1]);
                        if (val >= count) {
                            this._lvNum++;
                        }
                        else {
                            break;
                        }
                    }
                }
                else {
                    let n = FuJiangModel.Ins.getShowLv(this._data.level);
                    if (n) {
                        this._lvType = 1;
                        this._ui.lab_num.text = n + "";
                        this._ui.lab.text = "升十级";
                        DotManager.addDot(this._ui.tab1, 15, -10);
                        DotManager.addDot(this._ui.btn_lv, 15, -10);
                    }
                    else {
                        this._lvType = 0;
                        this._ui.lab_num.text = cfg.f_upgradecost.split("-")[1];
                        this._ui.lab.text = "升级";
                        let val = MainModel.Ins.mRoleData.getVal(ECellType.FuJiangLv);
                        if (val < parseInt(cfg.f_upgradecost.split("-")[1])) {
                            this._ui.lab_num.color = "#D02525";
                        }
                    }
                }
            }
            let cCfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
            if (this._data.pos) {
                this._ui.spp1.visible = true;
                this._ui.spp2.visible = false;
                this._ui.list4.array = this._data.attrs;
                this._ui.list5.array = cCfg.f_specialattrinit.split("|");
            }
            else {
                this._ui.spp1.visible = false;
                this._ui.spp2.visible = true;
                this._ui.list6.array = cCfg.f_inherit.split("|");
                this._ui.list7.array = cCfg.f_specialattrinit.split("|");
            }
        }
        onBtnLVClick() {
            if (this._data) {
                let req = new CheifUpgrade_req;
                req.cheifId = this._data.cheifId;
                req.type = this._lvType;
                if (t_Platform.Ins.isOneLvUp) {
                    req.cnt = this._lvNum;
                }
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onRenderHandler1(item) {
            item.setData(item.dataSource);
        }
        updataZBView() {
            let arr = FuJiangEquipSortProxy.Ins.List;
            let array = [];
            for (let i = 0; i < arr.length; i++) {
                let vo = this._data.equips.find(ele => ele.partId === arr[i].f_Equipmentsort);
                let obj = {};
                obj.id = this._data.cheifId;
                obj.data = vo;
                array.push(obj);
            }
            this._ui.list1.array = array;
        }
        onBtnYJSJClick() {
            if (this._data) {
                let req = new CheifEquipUp_req;
                req.cheifId = this._data.cheifId;
                req.partId = 0;
                req.type = 0;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onBtnYJCSClick() {
            if (this._data) {
                let star = 1;
                let lv = 1;
                for (let i = 0; i < this._data.equips.length; i++) {
                    star = Math.max(star, this._data.equips[i].equipStar);
                    lv = Math.max(lv, this._data.equips[i].equipLevel);
                }
                if (star == 1 && lv == 1) {
                    E.ViewMgr.ShowMidError("已是最低等级");
                    return;
                }
                E.ViewMgr.Open(EViewType.FuJiangCZ, null, [this._data, 1]);
            }
        }
        onBtnAddClick() {
            E.ViewMgr.Open(EViewType.FuJiangChouKa);
        }
        onBtnYssxClick() {
            if (!this._data) {
                return;
            }
            let cfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
            let starCfg = FuJiangStarProxy.Ins.getCfgByStar(this._data.star);
            if (!MainModel.Ins.isItemEnough(cfg.f_piecesid, starCfg.f_upstarcost_new, true)) {
                return;
            }
            FuJiangModel.Ins.oldStar = this._data.star;
            FuJiangModel.Ins.oldAllStar = FuJiangModel.Ins.getAllStarNum();
            let req = new CheifStarUp_req;
            req.cheifId = this._data.cheifId;
            req.num = 1;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onRenderHandler2(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = "+" + attrConvert(id, val);
        }
        updataStarView() {
            this._ui.lab_snum.text = "x" + this._data.star;
            let nStarCfg = FuJiangStarProxy.Ins.getCfgByStar(this._data.star + 1);
            if (nStarCfg) {
                this._ui.sp_srat.visible = true;
                this._ui.lab_maxstar.visible = false;
                this._ui.img_xx.x = 144;
                let starCfg = FuJiangStarProxy.Ins.getCfgByStar(this._data.star);
                let cfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
                let val = MainModel.Ins.mRoleData.getVal(cfg.f_piecesid);
                this._ui.lab_snum1.text = "x" + nStarCfg.f_starid;
                let arr = [];
                for (let i = 0; i < FuJiangStarValueProxy.Ins.List.length; i++) {
                    let arrid = FuJiangStarValueProxy.Ins.List[i].f_attrid;
                    let val = FuJiangModel.Ins.getStarAttr(this._data.cheifId, arrid, this._data.level, this._data.star);
                    let val1 = FuJiangModel.Ins.getStarAttr(this._data.cheifId, arrid, this._data.level, nStarCfg.f_starid);
                    let data = new stEquipAttr;
                    data.id = arrid;
                    data.value = val1 - val;
                    arr.push(data);
                }
                this._ui.list2.array = arr;
                this._ui.img_qua1.skin = FuJiangListProxy.Ins.getQuaSkin(cfg.f_cheifQuality);
                this._ui.img_icon.skin = IconUtils.getIconByCfgId(cfg.f_piecesid);
                this._ui.lab_spname.text = IconUtils.getNameByID(cfg.f_piecesid);
                this._ui.lab_pro.text = val + "/" + starCfg.f_upstarcost_new;
                let s = val / starCfg.f_upstarcost_new;
                if (s >= 1) {
                    s = 1;
                }
                this._ui.pro.width = s * 209;
                if (starCfg.f_isupstage_new) {
                    this._ui.lab_starName.text = "升阶";
                }
                else {
                    this._ui.lab_starName.text = "升星";
                }
            }
            else {
                this._ui.sp_srat.visible = false;
                this._ui.lab_maxstar.visible = true;
                this._ui.img_xx.x = 304;
            }
            if (FuJiangModel.Ins.isStarRedTip(this._data.cheifId, this._data.star)) {
                DotManager.addDot(this._ui.btn_yssx, 15, -10);
                DotManager.addDot(this._ui.tab3, 15, -10);
            }
            else {
                DotManager.removeDot(this._ui.btn_yssx);
                DotManager.removeDot(this._ui.tab3);
            }
        }
        onRenderHandler(item, index) {
            item.setData(index + 1, this._data, item.dataSource);
        }
        updataSkillView() {
            let cfg = FuJiangSkillProxy.Ins.getCfgById(this._data.cheifId);
            let arr1 = cfg.f_starpoint.split("|");
            let index;
            for (let i = 0; i < arr1.length; i++) {
                let arr2 = arr1[i].split("-");
                if (this._data.star >= parseInt(arr2[0]) && this._data.star <= parseInt(arr2[1])) {
                    index = i;
                    break;
                }
            }
            let array = [];
            for (let i = 1; i < 5; i++) {
                let arr = cfg["f_clientskill" + i].split("|");
                if (parseInt(arr[index]) > 0) {
                    array.push(parseInt(arr[index]));
                }
                else {
                    for (let j = 0; j < arr.length; j++) {
                        if (parseInt(arr[j]) > 0) {
                            array.push(parseInt(arr[j]));
                            break;
                        }
                    }
                }
            }
            this._ui.list.array = array;
        }
        onRenderHandler10(item, index) {
            let id = parseInt(item.dataSource);
            item.setData(id, this._data.cheifId, index, this._ui.list_pf.selectedIndex);
            if (index == this._ui.list_pf.selectedIndex) {
                let data = FuJiangSkinProxy.Ins.getCfgById(id);
                let cfg = FuJiangModel.Ins.getFuJiangCfgById(this._data.cheifId);
                if (cfg.skinId == data.f_skinid) {
                    this._ui.btn_pf.visible = false;
                    this._ui.lab_pf.visible = true;
                }
                else {
                    this._ui.lab_pf.visible = false;
                    this._ui.btn_pf.visible = true;
                    if (cfg.skinIds.indexOf(data.f_skinid) != -1) {
                        this._ui.btn_pf.disabled = false;
                    }
                    else {
                        this._ui.btn_pf.disabled = true;
                    }
                }
                let skin = FuJiangModel.Ins.getFuJiangSkin(1, data.f_skinid);
                if (this._avatar) {
                    this._avatar.mSkin = skin;
                }
            }
        }
        updataSkinView() {
            let cfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
            this._ui.list_pf.array = cfg.f_chiefskin.split("|");
        }
        onBtnPFClick() {
            let data = FuJiangSkinProxy.Ins.getCfgById(parseInt(this._ui.list_pf.selectedItem));
            if (data) {
                let req = new CheifChangeSkin_req;
                req.cheifId = this._data.cheifId;
                req.skinId = data.f_skinid;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onBtnCSClick() {
            if (this._data) {
                let flag = false;
                for (let i = 0; i < this._data.skills.length; i++) {
                    if (this._data.skills[i].skillLevel > 1) {
                        flag = true;
                        break;
                    }
                }
                if (!flag) {
                    E.ViewMgr.ShowMidError("没有技能可以重生");
                    return;
                }
                E.ViewMgr.Open(EViewType.FuJiangCZ, null, [this._data, 2]);
            }
        }
        onBtnSZClick() {
            if (this._type == 1) {
                let req = new ChiefIntoBattle_req;
                req.type = 0;
                req.pos = 0;
                req.isChief = this._data.isChief;
                req.cheifId = this._data.cheifId;
                SocketMgr.Ins.SendMessageBin(req);
            }
            else if (this._type == 2) {
                let req = new ChiefAssist_req;
                req.assistId = 0;
                req.cheifId = this._data.cheifId;
                SocketMgr.Ins.SendMessageBin(req);
            }
            else {
                let index1 = FuJiangModel.Ins.getSZPos();
                if (index1) {
                    let req = new ChiefIntoBattle_req;
                    req.type = 1;
                    req.pos = index1;
                    req.isChief = this._data.isChief;
                    req.cheifId = this._data.cheifId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
                else {
                    let index2 = this.getzzIndex();
                    if (index2) {
                        let req = new ChiefAssist_req;
                        req.assistId = index2;
                        req.cheifId = this._data.cheifId;
                        SocketMgr.Ins.SendMessageBin(req);
                    }
                    else {
                        E.ViewMgr.ShowMidError("上阵人数已满");
                    }
                }
            }
        }
        getzzIndex() {
            let arr = FuJiangSupportInheritProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                let data = FuJiangModel.Ins.getFuJiangByAssid(arr[i].f_id);
                if (!data) {
                    return arr[i].f_id;
                }
            }
            return 0;
        }
    }

    exports.FuJiangPYView = FuJiangPYView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangSkillTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this._offY = 18;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangJNTipUI;
            }
        }
        onInit() {
            let skillId = this.Data[0];
            let skillLv = this.Data[1];
            let skillStar = this.Data[2];
            let skillCfg = FuJiangSkillClientProxy.Ins.getCfgById(skillId);
            this._ui.lab_name.text = skillCfg.f_skillname + " lv." + skillLv;
            if (skillStar) {
                this._ui.lab_js.text = "(解锁星级:" + skillStar + "星)";
            }
            else {
                this._ui.lab_js.text = "";
            }
            let array = [];
            let nArray = [];
            let arr = skillCfg.f_valuenum.split("|");
            let arrJC = skillCfg.f_initvalue.split("|");
            let st = "";
            for (let i = 0; i < arr.length; i++) {
                if (arr[i] != "" && arr[i] != "0") {
                    let num = parseInt(arrJC[i]);
                    let numadd = parseInt(arr[i]);
                    st = (num + numadd * (skillLv - 1)) / 100 + "%";
                    array.push(st);
                    st = (num + numadd * skillLv) / 100 + "%";
                    nArray.push(st);
                }
            }
            this._ui.lab_dec.text = StringUtil.format(skillCfg.f_skillintro, array);
            let offY;
            if (skillLv >= FuJiangSkillLvProxy.Ins.maxLv) {
                this._ui.lab_next.visible = false;
                this._ui.lab_nextdec.text = "";
                offY = this._ui.lab_dec.y + this._ui.lab_dec.textField.textHeight + this._offY;
            }
            else {
                this._ui.lab_next.visible = true;
                this._ui.lab_nextdec.text = StringUtil.format(skillCfg.f_skillintro, nArray);
                this._ui.lab_next.y = this._ui.lab_dec.y + this._ui.lab_dec.textField.textHeight + this._offY;
                this._ui.lab_nextdec.y = this._ui.lab_next.y + this._ui.lab_next.textField.textHeight + this._offY;
                offY = this._ui.lab_nextdec.y + this._ui.lab_nextdec.textField.textHeight + this._offY;
            }
            if (skillCfg.f_upskillinfo == "") {
                this._ui.lab_jh.visible = false;
                this._ui.lab_jhjs.text = "";
                this._ui.lab_jhdec.text = "";
                this._ui.bg.height = offY;
            }
            else {
                this._ui.lab_jh.visible = true;
                this._ui.lab_jhjs.text = "(解锁星级:" + skillCfg.f_upskillunlock + "星)";
                this._ui.lab_jhdec.text = skillCfg.f_upskillinfo;
                this._ui.lab_jh.y = offY + this._offY;
                this._ui.lab_jhjs.y = offY + this._offY + 5;
                this._ui.lab_jhdec.y = this._ui.lab_jh.y + this._ui.lab_jh.textField.textHeight + this._offY;
                this._ui.bg.height = this._ui.lab_jhdec.y + this._ui.lab_jhdec.textField.textHeight + this._offY;
            }
        }
        onExit() {
        }
    }

    exports.FuJiangSkillTip = FuJiangSkillTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangSQTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangSQTipUI;
                this.bindClose(this._ui.btn_close);
                this._ui.list.itemRender = ui.views.fujiang.ui_fujiangAttrItem6UI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnTipClick));
            }
        }
        onRenderHandler(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
        }
        onInit() {
            let nCfg = FuJiangCMoraleProxy.Ins.getCfgByStar(FuJiangModel.Ins.getAllStarNum());
            let nArr = nCfg.f_MoraleAttr.split("|");
            this._ui.list.array = nArr;
        }
        onExit() {
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("FuJiangSQTitle", "FuJiangSQDec");
        }
    }

    exports.FuJiangSQTip = FuJiangSQTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangStarView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangSXTipUI;
                this._ui.list.itemRender = ui.views.fujiang.ui_fujiangAttrItem5UI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.renderhandler1);
                this._ui.list1.itemRender = ui.views.fujiang.ui_fujiangAttrItem5UI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.renderhandler1);
            }
        }
        renderhandler1(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            let val1 = parseInt(item.dataSource.value1);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.valTf1.text = attrConvert(id, val1);
        }
        setEff() {
            if (!this._eff) {
                this._eff = new SimpleEffect(this._ui.sp, `o/spine/succeed/shengli`);
            }
            this._eff.play(2, false, this, this.effEnd);
        }
        effEnd() {
            if (this._eff) {
                this._eff.play(3, true);
            }
        }
        onInit() {
            let cfg = FuJiangModel.Ins.getFuJiangCfgById(this.Data);
            this._ui.lab_snum.text = "x" + FuJiangModel.Ins.oldStar;
            this._ui.lab_snum1.text = "x" + cfg.star;
            let arr = [];
            for (let i = 0; i < FuJiangStarValueProxy.Ins.List.length; i++) {
                let arrid = FuJiangStarValueProxy.Ins.List[i].f_attrid;
                let val = FuJiangModel.Ins.getStarAttr(cfg.cheifId, arrid, cfg.level, FuJiangModel.Ins.oldStar);
                let val1 = FuJiangModel.Ins.getStarAttr(cfg.cheifId, arrid, cfg.level, cfg.star);
                let data = {};
                data.id = arrid;
                data.value = val;
                data.value1 = val1;
                arr.push(data);
            }
            this._ui.list.array = arr;
            arr = [];
            let oCfg = FuJiangCMoraleProxy.Ins.getCfgByStar(FuJiangModel.Ins.oldAllStar);
            let oArr = oCfg.f_MoraleAttr.split("|");
            let nCfg = FuJiangCMoraleProxy.Ins.getCfgByStar(FuJiangModel.Ins.getAllStarNum());
            let nArr = nCfg.f_MoraleAttr.split("|");
            for (let i = 0; i < oArr.length; i++) {
                let data = {};
                data.id = parseInt(oArr[i].split(":")[0]);
                data.value = parseInt(oArr[i].split(":")[1]);
                data.value1 = parseInt(nArr[i].split(":")[1]);
                arr.push(data);
            }
            this._ui.list1.array = arr;
            this.setEff();
        }
        onExit() {
            if (this._eff) {
                this._eff.dispose();
                this._eff = null;
            }
        }
    }

    exports.FuJiangStarView = FuJiangStarView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangStarView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangStarView1UI;
                this._ui.list.itemRender = ui.views.fujiang.ui_fujiangItem11UI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.renderhandler);
                ButtonCtl.Create(this._ui.sp, new Laya.Handler(this, this.onSpClick), false);
            }
        }
        onSpClick() {
            this.Close();
        }
        renderhandler(item) {
            let cfg = item.dataSource.cfg;
            item.img_qua.skin = FuJiangListProxy.Ins.getQuaSkin(cfg.f_cheifQuality);
            item.img.skin = FuJiangListProxy.Ins.getFuJiangSkin(cfg.f_cheifid);
            item.lab_name.text = cfg.f_cheif;
            item.lab_name.color = "#" + EquipmentQualityProxy.Ins.getByQua(cfg.f_cheifQuality).f_chiefcolor;
            item.lab.text = item.dataSource.nowNum + "";
            item.lab1.text = parseInt(item.dataSource.nowNum) + parseInt(item.dataSource.val) + "";
        }
        onInit() {
            this._ui.list.array = FuJiangModel.Ins.oldStarArr;
        }
        onExit() {
        }
    }

    exports.FuJiangStarView1 = FuJiangStarView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangRoleCtl {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
        }
        onRemove() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            this.clear();
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.clear();
            this._ui.on(Laya.Event.MOUSE_DOWN, this, this.onDown);
            if (FuJiangModel.Ins.changefjList) {
                let index = FuJiangModel.Ins.changefjList.findIndex(item => item.cheifId == value.cheifId);
                if (index == -1) {
                    return;
                }
            }
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            if (value.isChief) {
                let cCfg = FuJiangListProxy.Ins.getCfgById(value.cheifId);
                let skin = FuJiangModel.Ins.getFuJiangSkin(cCfg.f_cheifid);
                let vo = FuJiangModel.Ins.getMountDataByCheifId(value.cheifId);
                if (vo) {
                    skin.f_MountID = vo.mountId;
                }
                this._avatar = AvatarFactory.createAvatarByStSkin(skin, EAvatarAnim.NormalStand, EAvatarDir.Right);
                this._ui.img.skin = FuJiangListProxy.Ins.getProfessionSkin(cCfg.f_cheifClass);
                this._ui.lab_lv.text = "Lv." + value.level;
                this._ui.lab_name.text = cCfg.f_cheif;
            }
            else {
                this._avatar = AvatarFactory.getStandNormalMainAvatar(EAvatarDir.Right);
                this._ui.img.skin = FuJiangListProxy.Ins.getProfessionSkin(5);
                this._ui.lab_lv.text = "Lv." + MainModel.Ins.mRoleData.lv;
                this._ui.lab_name.text = MainModel.Ins.mRoleData.NickName;
            }
            this._ui.sp.addChild(this._avatar);
            this._index = value.pos;
            this.rester();
        }
        onDown(e) {
            Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onUp);
            this._ui.zOrder = 100;
            this._ui.startDrag();
        }
        onUp(e) {
            this.clearDrag();
            let view = E.ViewMgr.Get(EViewType.FuJiang).UI;
            let imgX = Laya.stage.mouseX;
            let imgY = Laya.stage.mouseY;
            let imgW = 4;
            let imgH = 4;
            let index = 0;
            for (let i = 1; i < 7; i++) {
                let img = view["view1"]["img_" + i];
                let p = new Laya.Point(imgX + imgW * 0.5, imgY + imgH * 0.5);
                let bagX = img.parent.localToGlobal(new Laya.Point(img.x, img.y)).x;
                let bagY = img.parent.localToGlobal(new Laya.Point(img.x, img.y)).y;
                let p1 = new Laya.Point(bagX, bagY + img.height);
                let p2 = new Laya.Point(bagX, bagY);
                let p3 = new Laya.Point(bagX + img.width, bagY);
                let p4 = new Laya.Point(bagX + img.width, bagY + img.height);
                let bo = GeometryUtil.isPointInRect(p1, p2, p3, p4, p);
                if (bo) {
                    index = i;
                }
            }
            if (index > 0) {
                if (index == this._index) {
                    this.rester();
                    if (this._data.isChief) {
                        E.ViewMgr.Open(EViewType.FuJiangPY, null, this._data);
                    }
                }
                else {
                    let lvv;
                    let lv = MainModel.Ins.mRoleData.lv;
                    let sCfg = FuJiangSlotProxy.Ins.getCfgById(index);
                    if (sCfg.f_pos_available) {
                        if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                            lvv = sCfg.f_unlocklevel_v1;
                        }
                        else {
                            if (FuJiangModel.Ins.isNewServer) {
                                lvv = sCfg.f_unlocklevelnew;
                            }
                            else {
                                lvv = sCfg.f_unlocklevel;
                            }
                        }
                        if (lv < lvv) {
                            this.rester();
                        }
                        else {
                            let req = new ChiefIntoBattle_req;
                            req.type = 1;
                            req.pos = index;
                            req.isChief = this._data.isChief;
                            req.cheifId = this._data.cheifId;
                            SocketMgr.Ins.SendMessageBin(req);
                        }
                    }
                    else {
                        this.rester();
                    }
                }
            }
            else {
                this.rester();
            }
        }
        rester() {
            this._ui.x = FuJiangModel.fjXY[this._index - 1].x;
            this._ui.y = FuJiangModel.fjXY[this._index - 1].y;
            this._ui.zOrder = FuJiangModel.fjZorder[this._index - 1];
        }
        clear() {
            this.clearDrag();
            this._ui.off(Laya.Event.MOUSE_DOWN, this, this.onDown);
        }
        clearDrag() {
            this._ui.stopDrag();
            Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onUp);
        }
    }

    exports.FuJiangRoleCtl = FuJiangRoleCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangViewCtl1 {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            for (let i = 1; i < 7; i++) {
                let cfg = FuJiangSlotProxy.Ins.getCfgById(i);
                if (cfg.f_pos_available) {
                    this._ui["img_" + i].visible = true;
                }
                else {
                    this._ui["img_" + i].visible = false;
                }
                this["_itemCtl" + i] = new FuJiangRoleCtl(this._ui["item" + i]);
            }
            ButtonCtl.Create(this._ui.btn_chouka, new Laya.Handler(this, this.onBtnChouKaClick));
            ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick));
            ButtonCtl.Create(this._ui.btn_zz, new Laya.Handler(this, this.onBtnZZClick));
            this._ui.list.itemRender = FuJiangItem1;
            this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            this._ui.list.selectEnable = true;
            this._ui.list.selectHandler = new Laya.Handler(this, this.onSelectHandler);
            const tabsSkin = [this._ui.tab1, this._ui.tab2, this._ui.tab3, this._ui.tab4, this._ui.tab5, this._ui.tab6, this._ui.tab7];
            this.tabList = ["全部", "一般", "精良", "稀有", "史诗", "天赐", "神铸"];
            this.tabsCtl = new TabControl();
            this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
            this._plusCtl = FontCtlFactory.createPlus();
        }
        onAdd() {
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_UPDATA, this, this.updataView);
            this.tabsCtl.selectIndex = 0;
            FuJiangModel.Ins.changefjList = null;
            this.updataView();
        }
        onRemove() {
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_UPDATA, this, this.updataView);
            this.tabsCtl.selectIndex = -1;
            this._ui.list.selectedIndex = -1;
        }
        onSelectHandler(index) {
            if (index == -1) {
                return;
            }
            let data = this._ui.list.array[index];
            if (data) {
                E.ViewMgr.Open(EViewType.FuJiangPY, null, data);
            }
            this._ui.list.selectedIndex = -1;
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab_name.text = this.tabList[index];
            switch (index) {
                case 0:
                    skin.lab_name.color = "#FCEABE";
                    break;
                case 1:
                    skin.lab_name.color = "#ededed";
                    break;
                case 2:
                    skin.lab_name.color = "#5ea6ff";
                    break;
                case 3:
                    skin.lab_name.color = "#c060f7";
                    break;
                case 4:
                    skin.lab_name.color = "#fff43d";
                    break;
                case 5:
                    skin.lab_name.color = "#f83535";
                    break;
                case 6:
                    skin.lab_name.color = "#1cf2ff";
                    break;
            }
            if (sel) {
                skin.img1.visible = true;
                skin.img2.visible = false;
            }
            else {
                skin.img1.visible = false;
                skin.img2.visible = true;
            }
        }
        onTabSelectHandler(v) {
            if (v == -1)
                return;
            this._ui.list.array = FuJiangModel.Ins.getFuJiangList(v);
        }
        onRenderHandler(item, index) {
            item.ctl.setData(item.dataSource);
        }
        onBtnChouKaClick() {
            E.ViewMgr.Open(EViewType.FuJiangChouKa);
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("FuJiangTitle", "FuJiangDec");
        }
        onBtnZZClick() {
            E.ViewMgr.Open(EViewType.FujiangSCZZView);
        }
        updataView() {
            for (let i = 1; i < 7; i++) {
                let cfg = FuJiangModel.Ins.getFuJiangCfgByPos(i);
                if (cfg) {
                    this._ui["item" + i].visible = true;
                    this["_itemCtl" + i].setData(cfg);
                }
                else {
                    this._ui["item" + i].visible = false;
                    this["_itemCtl" + i].onRemove();
                }
                let lv = MainModel.Ins.mRoleData.lv;
                let lvv;
                let sCfg = FuJiangSlotProxy.Ins.getCfgById(i);
                if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                    lvv = sCfg.f_unlocklevel_v1;
                }
                else {
                    if (FuJiangModel.Ins.isNewServer) {
                        lvv = sCfg.f_unlocklevelnew;
                    }
                    else {
                        lvv = sCfg.f_unlocklevel;
                    }
                }
                if (lv >= lvv) {
                    this._ui["sp_suo" + i].visible = false;
                }
                else {
                    this._ui["sp_suo" + i].visible = true;
                    this._ui["lab_suo" + i].text = lvv + "级解锁";
                }
            }
            this._ui.list.array = FuJiangModel.Ins.getFuJiangList(this.tabsCtl.selectIndex);
            this.onUpdataFight();
            if (FuJiangModel.Ins.isFreeRed()) {
                DotManager.addDot(this._ui.btn_chouka, 0, 25);
            }
            else {
                DotManager.removeDot(this._ui.btn_chouka);
            }
            this._ui.img_zq.skin = FuJiangFlagListProxy.Ins.getFlagBIcon(FuJiangModel.Ins.flagId);
        }
        onUpdataFight() {
            let n = FuJiangModel.Ins.getFightNum();
            let v = StringUtil.val2Atlas(n);
            this._plusCtl.setValue(this._ui.plusCon, v);
        }
    }

    exports.FuJiangViewCtl1 = FuJiangViewCtl1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangItem12 extends ui.views.fujiang.ui_fujiangItem12UI {
        constructor() {
            super();
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            ButtonCtl.Create(this.img_qua, new Laya.Handler(this, this.onTXClick), false);
            ButtonCtl.Create(this.btn_add, new Laya.Handler(this, this.onAddClick));
            this.list.itemRender = ui.views.fujiang.ui_fujiangAttrItem10UI;
            this.list.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
        }
        onAdd() {
        }
        onRemove() {
        }
        onRenderHandler1(item, index) {
            item.tf1.color = item.valTf.color = "#FB5AFB";
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            let cCfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
            let lvSt = cCfg.f_specialupgrade.split("|")[index];
            let starSt = cCfg.f_specialupstar.split("|")[index];
            let lvNum = parseInt(lvSt.split(":")[1]) * (this._data.level - 1);
            let starNum = parseInt(starSt.split(":")[1]) * (this._data.star - 1);
            val = val + lvNum + starNum;
            val = val * (this._value.f_support / 10000);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            let starLv = parseInt(cCfg.f_specialunlock.split("|")[index]);
            if (this._data.star >= starLv) {
                item.tf1.color = item.valTf.color = "#FB5AFB";
                item.valTf.text = attrConvert(id, val);
                item.lab.visible = false;
            }
            else {
                item.tf1.color = item.valTf.color = "#D3D3D3";
                item.valTf.text = attrConvert(id, val);
                item.lab.visible = true;
                item.lab.text = "(" + starLv + "星)";
            }
        }
        onAddClick() {
            if (this._value) {
                E.ViewMgr.Open(EViewType.FuJiangCK, null, [2, null, this._value.f_id]);
            }
        }
        onTXClick() {
            if (this._data) {
                E.ViewMgr.Open(EViewType.FuJiangPY, null, this._data);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._value = value;
            this.lab_zz.text = value.f_support / 100 + "%助战槽位";
            let data = FuJiangModel.Ins.getFuJiangByAssid(value.f_id);
            if (data) {
                this.sp.visible = true;
                this.sp2.visible = false;
                this._data = data;
                let cCfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
                this.img_qua.skin = FuJiangListProxy.Ins.getQuaSkin(cCfg.f_cheifQuality);
                this.img.skin = FuJiangListProxy.Ins.getFuJiangSkin(cCfg.f_cheifid);
                this.lab_lv.text = "Lv." + this._data.level;
                this.lab_snum.text = "x" + this._data.star;
                this.lab_name.text = cCfg.f_cheif;
                this.lab_name.color = "#" + EquipmentQualityProxy.Ins.getByQua(cCfg.f_cheifQuality).f_chiefcolor;
                this.list.array = cCfg.f_specialattrinit.split("|");
                DotManager.removeDot(this.img_qua);
                let nextCfg = FuJiangLvProxy.Ins.getCfgByLv(this._data.level + 1);
                if (nextCfg) {
                    let n = FuJiangModel.Ins.getShowLv(this._data.level);
                    if (n) {
                        DotManager.addDot(this.img_qua, 15, -10);
                    }
                    else {
                        if (FuJiangModel.Ins.isStarRedTip(this._data.cheifId, this._data.star)) {
                            DotManager.addDot(this.img_qua, 15, -10);
                        }
                    }
                }
            }
            else {
                this.sp.visible = false;
                this.sp2.visible = true;
                this._data = null;
            }
        }
    }

    exports.FuJiangItem12 = FuJiangItem12;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangViewCtl2 {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            ValCtl.Create(this._ui.lab1, this._ui.img2, ECellType.FuJiangLv);
            this._plusCtl = FontCtlFactory.createPlus();
            ButtonCtl.Create(this._ui.img_qua, new Laya.Handler(this, this.onTXClick), false);
            ButtonCtl.Create(this._ui.switchBtn, new Laya.Handler(this, this.onBtnSwitchClick));
            this._ui.list.itemRender = FuJiangItem12;
            this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            this._ui.list4.itemRender = ui.views.fujiang.ui_fujiangAttrItemUI;
            this._ui.list4.renderHandler = new Laya.Handler(this, this.onRenderHandler4);
        }
        onAdd() {
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_UPDATA, this, this.updataView);
            this.updataView();
        }
        onRemove() {
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_UPDATA, this, this.updataView);
        }
        onTXClick() {
            if (this._data) {
                E.ViewMgr.Open(EViewType.FuJiangPY, null, this._data);
            }
        }
        onBtnSwitchClick() {
            if (this._data) {
                E.ViewMgr.Open(EViewType.FuJiangAttrView1, null, this._data);
            }
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onRenderHandler4(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.lab.visible = false;
        }
        updataView() {
            let val = MainModel.Ins.mRoleData.getVal(ECellType.FuJiangLv);
            this._ui.lab1.text = StringUtil.val2m(val);
            this._data = FuJiangModel.Ins.getZJFJData();
            if (this._data) {
                this._ui.sp.visible = true;
                this._ui.sp2.visible = false;
                this._ui.lab_zz.visible = true;
                let len = FuJiangSupportInheritProxy.Ins.List.length;
                this._ui.lab_zz.text = "助战副将(" + FuJiangModel.Ins.getFZFJArr().length + "/" + len + ")";
                this._ui.list.visible = true;
                this._ui.list4.array = this._data.attrs;
                this.updataFJ();
            }
            else {
                this._ui.sp.visible = false;
                this._ui.sp2.visible = true;
                this._ui.lab_zz.visible = false;
                this._ui.list.visible = false;
            }
            this._ui.list.array = FuJiangSupportInheritProxy.Ins.List;
        }
        updataFJ() {
            if (!this._data)
                return;
            let cCfg = FuJiangListProxy.Ins.getCfgById(this._data.cheifId);
            this._ui.img_qua.skin = FuJiangListProxy.Ins.getQuaSkin(cCfg.f_cheifQuality);
            this._ui.img.skin = FuJiangListProxy.Ins.getFuJiangSkin(cCfg.f_cheifid);
            this._ui.lab_lv.text = "Lv." + this._data.level;
            this._ui.lab_name.text = cCfg.f_cheif;
            this._ui.lab_name.color = "#" + EquipmentQualityProxy.Ins.getByQua(cCfg.f_cheifQuality).f_chiefcolor;
            this._ui.lab_snum.text = "x" + this._data.star;
            let v = StringUtil.val2Atlas(this._data.cheifFight);
            this._plusCtl.setValue(this._ui.plusCon, v);
            DotManager.removeDot(this._ui.img_qua);
            let nextCfg = FuJiangLvProxy.Ins.getCfgByLv(this._data.level + 1);
            if (nextCfg) {
                let n = FuJiangModel.Ins.getShowLv(this._data.level);
                if (n) {
                    DotManager.addDot(this._ui.img_qua, 15, -10);
                }
                else {
                    if (FuJiangModel.Ins.isStarRedTip(this._data.cheifId, this._data.star)) {
                        DotManager.addDot(this._ui.img_qua, 15, -10);
                    }
                }
            }
        }
    }

    exports.FuJiangViewCtl2 = FuJiangViewCtl2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangViewCtl33 {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            ValCtl.Create(this._ui.lab1, this._ui.img1, ECellType.FuJiangEquipLv);
            ValCtl.Create(this._ui.lab2, this._ui.img2, ECellType.FuJiangEquipStar);
            ButtonCtl.Create(this._ui.shengxingBtn, new Laya.Handler(this, this.onBtnSXClick));
            ButtonCtl.Create(this._ui.exchangeBtn, new Laya.Handler(this, this.onBtnGHClick));
            this._plusCtl = FontCtlFactory.createPlus();
            this._ui.list.itemRender = ui.views.fujiang.ui_fujiangAttrItem11UI;
            this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            this._ui.list1.itemRender = ui.views.fujiang.ui_fujiangAttrItem11UI;
            this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
            this._ui.list2.itemRender = ui.views.fujiang.ui_fujiangAttrItem11UI;
            this._ui.list2.renderHandler = new Laya.Handler(this, this.onRenderHandler2);
        }
        onAdd() {
            FuJiangModel.Ins.on(FuJiangModel.FLAG_ID, this, this.updataView);
            FuJiangModel.Ins.on(FuJiangModel.FLAG_LEVEL, this, this.updataView);
            this.updataView();
        }
        onRemove() {
            FuJiangModel.Ins.off(FuJiangModel.FLAG_ID, this, this.updataView);
            FuJiangModel.Ins.off(FuJiangModel.FLAG_LEVEL, this, this.updataView);
        }
        onBtnSXClick() {
            let req = new ChiefUpgradeFlag_req;
            if (t_Platform.Ins.isOneLvUp && this._uCfg.f_flag_isupstage != 1) {
                req.cnt = this._lvNum;
            }
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnGHClick() {
            E.ViewMgr.Open(EViewType.FuJIiangZQGHView);
        }
        onRenderHandler(item, index) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            let lvSt = this._cfg.f_flag_upgrade.split("|")[index];
            let lv = this._uCfg.f_id - this._uCfg.f_flagstage;
            let lvNum = parseInt(lvSt.split(":")[1]) * (lv - 1);
            let val1 = val + lvNum;
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf1.text = attrConvert(id, val1);
            if (this._uCfg.f_flag_isupstage) {
                item.upimg.visible = item.valTf2.visible = false;
            }
            else {
                if (this._nextuCfg) {
                    item.upimg.visible = item.valTf2.visible = true;
                    let lvNum1 = parseInt(lvSt.split(":")[1]) * lv;
                    let val2 = val + lvNum1;
                    item.valTf2.text = attrConvert(id, val2);
                }
                else {
                    item.upimg.visible = item.valTf2.visible = false;
                }
            }
        }
        onRenderHandler1(item, index) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            let lvSt = this._cfg.f_flag_defence_upgrade.split("|")[index];
            let lvNum = parseInt(lvSt.split(":")[1]) * (this._uCfg.f_flagstage - 1);
            let val1 = val + lvNum;
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf1.text = attrConvert(id, val1);
            if (!this._uCfg.f_flag_isupstage) {
                item.upimg.visible = item.valTf2.visible = false;
            }
            else {
                if (this._nextuCfg) {
                    item.upimg.visible = item.valTf2.visible = true;
                    let lvNum1 = parseInt(lvSt.split(":")[1]) * this._uCfg.f_flagstage;
                    let val2 = val + lvNum1;
                    item.valTf2.text = attrConvert(id, val2);
                }
                else {
                    item.upimg.visible = item.valTf2.visible = false;
                }
            }
        }
        onRenderHandler2(item, index) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            let lvSt = this._cfg.f_flag_defence_upgrade_dentifty.split("|")[index];
            let lvNum = parseInt(lvSt.split(":")[1]) * (this._uCfg.f_flagstage - 1);
            let val1 = val + lvNum;
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf1.text = attrConvert(id, val1);
            if (!this._uCfg.f_flag_isupstage) {
                item.upimg.visible = item.valTf2.visible = false;
            }
            else {
                if (this._nextuCfg) {
                    item.upimg.visible = item.valTf2.visible = true;
                    let lvNum1 = parseInt(lvSt.split(":")[1]) * this._uCfg.f_flagstage;
                    let val2 = val + lvNum1;
                    item.valTf2.text = attrConvert(id, val2);
                }
                else {
                    item.upimg.visible = item.valTf2.visible = false;
                }
            }
        }
        updataView() {
            this._cfg = FuJiangFlagListProxy.Ins.getCfgById(FuJiangModel.Ins.flagId);
            this._uCfg = FuJiangFlagUpgradeProxy.Ins.getCfgById(FuJiangModel.Ins.flagSerial);
            this._nextuCfg = FuJiangFlagUpgradeProxy.Ins.getCfgById(FuJiangModel.Ins.flagSerial + 1);
            this._ui.icon.skin = FuJiangFlagListProxy.Ins.getFlagIcon(this._cfg.f_id);
            this._ui.lab_name.text = this._cfg.f_flag;
            this._ui.lab_lv.text = this._uCfg.f_flagstage + "阶" + this._uCfg.f_flaglevel + "级";
            let v = StringUtil.val2Atlas(FuJiangModel.Ins.flagFight);
            this._plusCtl.setValue(this._ui.plusCon, v);
            this._ui.list.array = this._cfg.f_flag_initi.split("|");
            this._ui.list1.array = this._cfg.f_flag_defence.split("|");
            if (this._cfg.f_flag_defence_dentifty != "") {
                this._ui.list2.array = this._cfg.f_flag_defence_dentifty.split("|");
            }
            else {
                this._ui.list2.array = [];
            }
            if (this._uCfg.f_flag_isupstage) {
                this._ui.lab_dec.text = "";
                this._ui.shengxintf.text = "升阶";
            }
            else {
                let arr = FuJiangFlagUpgradeProxy.Ins.getListByJJ(this._uCfg.f_flagstage);
                this._ui.lab_dec.text = "再升" + (arr.length - this._uCfg.f_flaglevel) + "级可进阶";
                let id = parseInt(this._uCfg.f_flag_upgrade.split("-")[0]);
                let num = MainModel.Ins.mRoleData.getVal(id);
                if (t_Platform.Ins.isOneLvUp) {
                    this._ui.shengxintf.text = "一键升级";
                    let len = arr[arr.length - 1].f_id;
                    this._lvNum = 0;
                    let count = 0;
                    for (let i = this._uCfg.f_id; i < len; i++) {
                        let cc = FuJiangFlagUpgradeProxy.Ins.getCfgById(i);
                        count += parseInt(cc.f_flag_upgrade.split("-")[1]);
                        if (num >= count) {
                            this._lvNum++;
                        }
                        else {
                            break;
                        }
                    }
                }
                else {
                    this._ui.shengxintf.text = "升级";
                }
            }
            DotManager.removeDot(this._ui.shengxingBtn);
            if (this._nextuCfg) {
                this._ui.sp.visible = true;
                this._ui.lab_max.visible = false;
                let id = parseInt(this._uCfg.f_flag_upgrade.split("-")[0]);
                let val = parseInt(this._uCfg.f_flag_upgrade.split("-")[1]);
                this._ui.icon1.skin = IconUtils.getIconByCfgId(id);
                let num = MainModel.Ins.mRoleData.getVal(id);
                this._ui.lab11.text = num + "";
                if (num >= val) {
                    this._ui.lab11.color = "#1BD24B";
                    DotManager.addDot(this._ui.shengxingBtn);
                }
                else {
                    this._ui.lab11.color = "#ff0000";
                }
                this._ui.lab22.text = "/" + val;
                this._ui.lab22.x = this._ui.lab11.x + this._ui.lab11.textField.width;
                this._ui.img11.width = this._ui.lab11.textField.width + this._ui.lab22.textField.width + 50;
            }
            else {
                this._ui.sp.visible = false;
                this._ui.lab_max.visible = true;
            }
        }
    }

    exports.FuJiangViewCtl33 = FuJiangViewCtl33;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoQiAttrView extends ui.views.zuoqi.ui_zuoqi_main_attrUI {
        constructor() {
            super();
            this.ctl = new RideItemAttrCtl(this);
        }
        setData(_cell) {
            this.ctl.refresh(_cell);
        }
    }
    class RideItemAttrCtl {
        constructor(skin) {
            this.skin = skin;
        }
        refresh(_cell) {
            let vis = true;
            let val = _cell.value;
            let model = MainModel.Ins;
            let _attrName = model.getAttrNameIdByID(_cell.id);
            this.skin.attrtf.text = _attrName;
            if (!_cell.lock) {
                this.skin.tf1.text = "";
                this.skin.jiesuoimg.skin = `remote/main/main/jiesuo.png`;
                this.skin.showv.visible = true;
                this.skin.attrtf.color = this.skin.valTf.color = "#FB5AFB";
            }
            else {
                if (_cell.lockStar > Mount_ListProxy.Ins.wakeStar) {
                    vis = false;
                }
                this.skin.tf1.text = (_cell.lockStar || 0).toString();
                this.skin.jiesuoimg.skin = `remote/main/main/jiesuo_1.png`;
                this.skin.showv.visible = false;
                this.skin.attrtf.color = this.skin.valTf.color = "#D3D3D3";
            }
            this.skin.valTf.text = attrConvert(_cell.id, val);
            this.skin.visible = vis;
        }
    }

    exports.RideItemAttrCtl = RideItemAttrCtl;
    exports.ZuoQiAttrView = ZuoQiAttrView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangItem9 extends ui.views.fujiang.ui_fujiangAttrItem3UI {
        constructor() {
            super();
            this.ctl = new RideItemAttrCtl(this);
        }
        setData(_cell) {
            this.ctl.refresh(_cell);
        }
    }

    exports.FuJiangItem9 = FuJiangItem9;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EquipAttrSkinProxy {
        static isEmpty(_attrVo) {
            if (_attrVo == "empty") {
                return true;
            }
            return false;
        }
        static drawAttr(skin, attrVo) {
            let model = MainModel.Ins;
            skin.tf1.text = model.getAttrNameIdByID(attrVo.id);
            skin.valTf.text = attrConvert(attrVo.id, attrVo.value);
            skin.valTf.x = skin.upimg.x - skin.valTf.textField.displayWidth - 7;
        }
        static isThreeBetter(_attrVos, thatVos) {
            let cnt = 0;
            for (let i = 0; i < _attrVos.length; i++) {
                let cell = _attrVos[i];
                let tCell = thatVos[i];
                if (cell && tCell && cell.value > tCell.value) {
                    cnt++;
                    if (cnt >= 3) {
                        return true;
                    }
                }
            }
            return false;
        }
        static setDataThan(skin, _attrVo, thatVo = null, _defaultShowImg = false) {
            if (this.isEmpty(_attrVo)) {
                skin.visible = false;
                return;
            }
            skin.visible = true;
            let attrVo = _attrVo;
            this.drawAttr(skin, attrVo);
            let mShowImg = _defaultShowImg;
            if (thatVo && attrVo.id == thatVo.id) {
                if (attrVo.value > thatVo.value) {
                    mShowImg = true;
                    skin.upimg.skin = `remote/common/base/green.png`;
                }
                else if (attrVo.value < thatVo.value) {
                    mShowImg = true;
                    skin.upimg.skin = `remote/common/base/red.png`;
                }
            }
            skin.upimg.visible = mShowImg;
        }
    }

    exports.EquipAttrSkinProxy = EquipAttrSkinProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EquipAttrShow {
        constructor() {
            this.lock = false;
        }
    }
    class AttrCtl {
        constructor() {
        }
        refresh(vo) {
            this.def = this.skin.tf1.color;
            let _attrVo = this.skin.dataSource;
            EquipAttrSkinProxy.setDataThan(this.skin, _attrVo);
            let qua = vo.getAttrQua(_attrVo.id);
            this.mColor = EquipmentQualityProxy.Ins.getByQuaDefault(this.def, qua);
        }
        set mColor(v) {
            this.skin.tf1.color = v;
            this.skin.valTf.color = v;
        }
    }
    class AttrItemUI extends ui.views.main.ui_main_zuoqi_attrUI {
        refresh(vo) {
            if (!this.ctl) {
                this.ctl = new AttrCtl();
                this.ctl.skin = this;
            }
            this.ctl.refresh(vo);
        }
    }
    class FuJiangAttrItemUI extends ui.views.fujiang.ui_fujiangAttrItem2UI {
        constructor() {
            super();
            this.def = this.tf1.color;
        }
        refresh(vo) {
            let _attrVo = this.dataSource;
            let qua = vo.getAttrQua(_attrVo.id);
            this.mColor = EquipmentQualityProxy.Ins.getByQuaDefault(this.def, qua);
            this.tf1.text = MainModel.Ins.getAttrNameIdByID(_attrVo.id);
            this.valTf.text = attrConvert(_attrVo.id, _attrVo.value);
        }
        set mColor(v) {
            this.tf1.color = v;
            this.valTf.color = v;
        }
    }
    class ZuoQiAttrCtl {
        constructor(leftList, rightList, specLvUplist, specList, nameTf, quaTf, plusCon, type = 0, type1 = 0, cls) {
            let baseAttrList = Mount_ValueProxy.Ins.getAttrList();
            this.baseAttrList = baseAttrList;
            if (type == 0) {
                leftList.itemRender = cls || AttrItemUI;
                leftList.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
                rightList.itemRender = cls || AttrItemUI;
                rightList.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
            }
            else {
                leftList.itemRender = FuJiangAttrItemUI;
                leftList.renderHandler = new Laya.Handler(this, this.onAttrItemHandler1);
                rightList.itemRender = FuJiangAttrItemUI;
                rightList.renderHandler = new Laya.Handler(this, this.onAttrItemHandler1);
            }
            if (specLvUplist) {
                if (type1 == 0) {
                    specLvUplist.itemRender = ZuoQiAttrView;
                    specLvUplist.renderHandler = new Laya.Handler(this, this.onLvUpSpeaiclAttr);
                }
                else {
                    specLvUplist.itemRender = FuJiangItem9;
                    specLvUplist.renderHandler = new Laya.Handler(this, this.onLvUpSpeaiclAttr1);
                }
            }
            if (specList) {
                specList.itemRender = ui.views.zuoqi.ui_zuoqi_spec_attr1UI;
                specList.renderHandler = new Laya.Handler(this, this.onSpeclHandler);
            }
            this.specLvUplist = specLvUplist;
            this.leftList = leftList;
            this.rightList = rightList;
            this.specList = specList;
            this.nameTf = nameTf;
            this.quaTf = quaTf;
            this.plusCon = plusCon;
            this._plusCtl = FontCtlFactory.createPlus();
        }
        onSpeclHandler(item, index) {
            let attrVo = item.dataSource;
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(attrVo.id);
            item.valTf.text = attrConvert(attrVo.id, attrVo.value);
            item.tf1.color = item.valTf.color = ZuoQiAttrCtl.getColor(attrVo.f_UnlockVal);
        }
        static getColor(f_UnlockVal) {
            return f_UnlockVal > Mount_ListProxy.Ins.wakeStar ? "#FCF03F" : "#EE61D9";
        }
        getAttrVal(rideId, star, stAttr, index) {
            let obj = new EquipAttrShow();
            obj.id = stAttr.id;
            obj.value = stAttr.value;
            obj.lockStar = Mount_ListProxy.Ins.getUnLockStar(rideId, index);
            obj.lock = star < obj.lockStar;
            return obj;
        }
        onLvUpSpeaiclAttr(item) {
            item.setData(item.dataSource);
        }
        onLvUpSpeaiclAttr1(item) {
            item.setData(item.dataSource);
        }
        onAttrItemHandler(skin) {
            skin.refresh(this.zuoqiVo);
        }
        onAttrItemHandler1(skin) {
            skin.refresh(this.zuoqiVo);
        }
        getBase(l) {
            let rs = [];
            for (let i = 0; i < l.length; i++) {
                if (this.baseAttrList.indexOf(l[i].id) != -1) {
                    rs.push(l[i]);
                }
            }
            return rs;
        }
        getOther(l) {
            let rs = [];
            for (let i = 0; i < l.length; i++) {
                if (this.baseAttrList.indexOf(l[i].id) == -1) {
                    rs.push(l[i]);
                }
            }
            return rs;
        }
        updateDesc() {
            if (this.skin && this.skin.high_desctf && this.skin.high_nametf) {
                let zuoqiVo = this.zuoqiVo;
                this.skin.high_desctf.visible = this.skin.high_nametf.visible = false;
                let lv = zuoqiVo.starLv;
                let minlv = 7;
                if (lv >= minlv && zuoqiVo.quality >= 11) {
                    let cfg = Mount_ListProxy.Ins.getCfg(zuoqiVo.rideId);
                    if (cfg && cfg.f_7StarSkill) {
                        this.skin.high_desctf.visible = this.skin.high_nametf.visible = true;
                        let index = lv - minlv;
                        let arr = cfg.f_7StarSkill.split(";");
                        let name = arr[index].split("|")[0];
                        let dec = arr[index].split("|")[1];
                        this.skin.high_nametf.text = name != "" ? (name + "：") : "";
                        this.skin.high_desctf.text = dec;
                        this.skin.high_desctf.x = this.skin.high_nametf.x + this.skin.high_nametf.textField.width;
                    }
                }
            }
        }
        refresh(zuoqiVo) {
            this.zuoqiVo = zuoqiVo;
            let color = zuoqiVo.getQuaColor();
            this.updateDesc();
            let rideId = zuoqiVo.rideId;
            this.nameTf.text = zuoqiVo.getName();
            this.quaTf.text = zuoqiVo.getQuaText();
            this.nameTf.color = color;
            this.quaTf.color = color;
            this._plusCtl.setValue(this.plusCon, StringUtil.val2Atlas(zuoqiVo.plus || 0));
            let attr = zuoqiVo.equipVo.attrList || [];
            this.leftList.array = this.getBase(attr);
            this.rightList.array = this.getOther(attr);
            if (this.specLvUplist) {
                let configAttrs = Mount_ListProxy.Ins.getSpeaicelAttr(rideId);
                let _attrShowList = [];
                for (let i = 0; i < configAttrs.length; i++) {
                    let cell = configAttrs[i];
                    let obj = this.getAttrVal(zuoqiVo.rideId, zuoqiVo.starLv, cell, i);
                    _attrShowList.push(obj);
                }
                this.specLvUplist.array = _attrShowList;
            }
            if (this.specList) {
                let attrList = Mount_ListProxy.Ins.getRideSpeclAttr(zuoqiVo.rideId, zuoqiVo.starLv);
                this.specList.array = attrList;
            }
        }
    }

    exports.AttrCtl = AttrCtl;
    exports.EquipAttrShow = EquipAttrShow;
    exports.ZuoQiAttrCtl = ZuoQiAttrCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoQiMainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMainSnapshot = true;
            this.packUid = 16;
            this.mMask = true;
        }
        get zuoqiData() {
            return this.Data;
        }
        get zuoqiId() {
            return this.zuoqiData.rideId;
        }
        onAddLoadRes() {
            this.addAtlas("zuoqi.atlas");
            this.addAtlas('huodong.atlas');
        }
        onExit() {
            MainModel.Ins.off(MainEvent.ValChange, this, this.onValChangeEvt);
            this.model.off(ZuoQiEvent.UpdateInfoEvt, this, this.onValChangeEvt);
            this.model.off(ZuoQiEvent.RedUpdate, this, this.onRedUpdate);
            ActivityModel.Ins.off(ActivityEvent.PopWinUpdate, this, ActivityModel.Ins.onPop);
            this.avatar.dispose();
            this.avatar = null;
            this.mountId = 0;
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = ZuoQiModel.Ins;
                this.UI = this._ui = new ui.views.zuoqi.ui_zuoqi_mainUI();
                this.zuoSkinCtl = new ZuoqiMainCtl(this._ui);
                this.btnList.push(ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.Close)), ButtonCtl.Create(this._ui.switchBtn, new Laya.Handler(this, this.onSwitchHandler)), ButtonCtl.Create(this._ui.shengxingBtn, new Laya.Handler(this, this.onQuaUp)), ButtonCtl.Create(this._ui.zuoqicankuBtn, new Laya.Handler(this, this.storgeHandler)), ButtonCtl.Create(this._ui.btn_xslb, new Laya.Handler(this, this.onBtnXslbClick)));
                this.yunshubtnCtl = ButtonCtl.Create(this._ui.yunshubtn, new Laya.Handler(this, this.onTransportHandler));
                this.zuoqichouBtnCtl = ButtonCtl.Create(this._ui.zuoqichouBtn, new Laya.Handler(this, this.onChouka));
                this._attrZuoqi = new ZuoQiAttrCtl(this._ui.listleft, this._ui.listright, this._ui.list2, null, this._ui.nameTf, this._ui.quaTf, this._ui.plusCon);
                this._attrZuoqi.skin = this._ui;
                this.btnList.push(this.yunshubtnCtl, this.zuoqichouBtnCtl);
            }
        }
        onBtnXslbClick() {
            ActivityModel.Ins.diamondEject(this.packUid);
        }
        onRedUpdate() {
            if (this.model.isFoodFull) {
                DotManager.addDot(this.yunshubtnCtl.skin);
            }
            else {
                DotManager.removeDot(this.yunshubtnCtl.skin);
            }
            if (this.model.hasFreeTime) {
                DotManager.addDot(this.zuoqichouBtnCtl.skin);
            }
            else {
                DotManager.removeDot(this.zuoqichouBtnCtl.skin);
            }
        }
        storgeHandler() {
            E.ViewMgr.Open(EViewType.FuJiangMountCKView);
        }
        onChouka() {
            E.ViewMgr.Open(EViewType.ZuoqiChouQu);
        }
        onSwitchHandler() {
            E.ViewMgr.Open(EViewType.FuJiangMountCKView);
        }
        onTransportHandler() {
            E.ViewMgr.Open(EViewType.ZuoqiYunShu);
        }
        onQuaUp() {
            this.model.quaUp(this.zuoqiId);
        }
        onValChangeEvt() {
            let result = this.model.getLvZuoqiNeed(this.zuoqiData);
            if (!result) {
                return;
            }
            this.zuoSkinCtl.refresh(result, this.zuoqiData, this._attrZuoqi);
            this.layoutView();
            this.showAvatar();
        }
        layoutView() {
            let cx = 284;
            if (this._ui.starupg.visible && this._ui.lvupg.visible) {
                this._ui.lvupg.x = 128;
                this._ui.starupg.x = 436;
            }
            else if (this._ui.starupg.visible) {
                this._ui.starupg.x = cx;
            }
            else {
                this._ui.lvupg.x = cx;
            }
        }
        onInit() {
            this.model.on(ZuoQiEvent.UpdateInfoEvt, this, this.onValChangeEvt);
            this.model.on(ZuoQiEvent.RedUpdate, this, this.onRedUpdate);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onValChangeEvt);
            ActivityModel.Ins.on(ActivityEvent.PopWinUpdate, this, ActivityModel.Ins.onPop, [this.packUid, this._ui.btn_xslb]);
            ActivityModel.Ins.onPop(this.packUid, this._ui.btn_xslb);
            this.onValChangeEvt();
            this.onRedUpdate();
        }
        showAvatar() {
            let _zqVo = this.zuoqiData;
            if (this.mountId != _zqVo.rideId) {
                this.mountId = _zqVo.rideId;
                if (this.avatar) {
                    this.avatar.dispose();
                }
                this.avatar = AvatarFactory.createRide(_zqVo.rideId);
                this._ui.rideCon.addChild(this.avatar);
            }
        }
    }
    class ZuoqiMainCtl {
        constructor(_ui) {
            this._ui = _ui;
            this.model = ZuoQiModel.Ins;
            this.backHomeCtl = ButtonCtl.CreateBtn(this._ui.backBtn, this, this.onBackHome);
            this.washAttrBtnCtl = ButtonCtl.CreateBtn(this._ui.washAttrBtn, this, this.onWashHandler);
            ButtonCtl.Create(this._ui.shengjiBtn, new Laya.Handler(this, this.onLevelUp));
            this._progressCtl = new ChestProgressCtl(this._ui.progcontainer);
            this._ui.liangcaonexttf.color = "#A55E1B";
            if (initConfig.clienttype == EClientType.Discount) {
                _ui.shenjiTf.text = E.getLang("onelvup");
            }
            else {
                _ui.shenjiTf.text = E.getLang("lvup");
            }
        }
        get needLv() {
            return initConfig.clienttype == EClientType.Discount ? this.model.calLv(this.zuoqiData) : 0;
        }
        onLevelUp() {
            this.model.lvUp(this.zuoqiData.rideId, this.needLv);
            ActivityModel.Ins.runEnough(EPopWinID.HorseFood);
        }
        onWashHandler() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.Mount_Wash, true)) {
                let lv = G.gameData.mountWashMaxLv;
                if (this.zuoqiData.lv < lv) {
                    E.ViewMgr.ShowMidError(E.getLang("mount_1", lv));
                }
                else {
                    E.ViewMgr.Open(EViewType.MountWash, null, this.zuoqiData.rideId);
                }
            }
        }
        onBackHome() {
            E.ViewMgr.Open(EViewType.BackHome, null, this.zuoqiData);
        }
        refresh(result, _zqVo, _attrZuoqi) {
            this.zuoqiData = _zqVo;
            let _quaConfig = MountConfigProxy.Ins.getByQualityID(_zqVo.quality);
            this._ui.isLvFullTf.visible = false;
            this._ui.tf1.text = "Lv." + _zqVo.lv;
            if (result.isMax) {
                this._ui.lvupg.visible = false;
            }
            else {
                this._ui.lvupg.visible = true;
                this._ui.liangcaotf.text = StringUtil.val2m(result.have);
                this._ui.liangcaonexttf.text = "/" + result.need;
                this._ui.liangcaonexttf.x = this._ui.liangcaotf.x + this._ui.liangcaotf.textField.width;
                if (result.have >= result.need) {
                    this._ui.liangcaotf.color = "#1BD24B";
                }
                else {
                    this._ui.liangcaotf.color = "#ff0000";
                }
                this._ui.liangcaoIcon.skin = IconUtils.getIconByCfgId(result.needItemid);
            }
            this._progressCtl.blackWidth = 2;
            this._progressCtl.setVal(result.stepVal, result.stepMax);
            this._ui.yanchengtf.text = result.step.toString();
            let _zqqua = this.model.getQuaLvNeed(_zqVo);
            ItemViewFactory.setStar(this._ui.starcon, _zqVo.starLv, _zqqua.f_MaxStar);
            if (_zqqua.isMax) {
                this._ui.starupg.visible = false;
            }
            else {
                this._ui.starupg.visible = true;
                let btnName = E.getLang("ride02");
                this._ui.itemImg1.visible = false;
                let hasHigh = false;
                if (_quaConfig.f_AwakeCost7) {
                    if (_zqVo.starLv >= Mount_ListProxy.Ins.wakeStar) {
                        hasHigh = true;
                        btnName = E.getLang("ride01");
                    }
                }
                if (hasHigh) {
                    this._ui.itemImg0.x = -76;
                    this._ui.itemImg1.visible = true;
                    let arr = _quaConfig[`f_AwakeCost${(_zqVo.starLv + 1)}`].split("|");
                    ItemViewFactory.updateRideStar(this._ui.iconShouHun, this._ui.rtf1, this._ui.rtf2, arr[1]);
                    ItemViewFactory.updateRideStar(this._ui.iconItem, this._ui.rtf3, this._ui.rtf4, arr[0]);
                }
                else {
                    this._ui.itemImg0.x = 20;
                    ItemViewFactory.updateRideStar(this._ui.iconShouHun, this._ui.rtf1, this._ui.rtf2, _quaConfig.f_UpgradeStar);
                }
                this._ui.shengxintf.text = btnName;
            }
            _attrZuoqi.refresh(_zqVo);
            let cfg = MountConfigProxy.Ins.getByQualityID(_zqVo.quality);
            this._ui.limtTf.text = E.getLang("zuoqilvlimit", cfg.f_MaxLevel);
            this.backHomeCtl.grayMouseDisable = !_zqVo.mBackHome;
            if (result.isMax && _zqqua.isMax) {
                this._ui.isLvFullTf.visible = true;
                this._ui.progress.visible = false;
            }
            else {
                this._ui.progress.visible = true;
            }
        }
    }

    exports.ZuoQiMainView = ZuoQiMainView;
    exports.ZuoqiMainCtl = ZuoqiMainCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangViewCtl4 {
        constructor(skin) {
            this._ui = skin;
            this.zuoSkinCtl = new ZuoqiMainCtl(this._ui);
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            ButtonCtl.Create(this._ui.btn_ck, new Laya.Handler(this, this.storgeHandler));
            ButtonCtl.Create(this._ui.switchBtn, new Laya.Handler(this, this.storgeHandler));
            ButtonCtl.Create(this._ui.shengxingBtn, new Laya.Handler(this, this.onQuaUp));
            ButtonCtl.Create(this._ui.btn_cq, new Laya.Handler(this, this.onBtnCQClick));
            this._attrZuoqi = new ZuoQiAttrCtl(this._ui.listleft, this._ui.listright, this._ui.list2, null, this._ui.nameTf, this._ui.quaTf, this._ui.plusCon, 1, 1);
            this._attrZuoqi.skin = this._ui;
        }
        onAdd() {
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_MOUNT_UPDATA, this, this.onUpdataView);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onUpdataView);
            this.onUpdataView();
        }
        onRemove() {
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_MOUNT_UPDATA, this, this.onUpdataView);
            MainModel.Ins.off(MainEvent.ValChange, this, this.onUpdataView);
            if (this.avatar) {
                this.avatar.dispose();
                this.avatar = null;
            }
        }
        storgeHandler() {
            if (this._data) {
                E.ViewMgr.Open(EViewType.FuJiangMountCKView, null, this._data.cheifId);
            }
            else {
                E.ViewMgr.ShowMidError("请先上阵副将");
            }
        }
        onQuaUp() {
            ZuoQiModel.Ins.quaUp(this._mountVo.rideId);
        }
        onBtnCQClick() {
            E.ViewMgr.Open(EViewType.ZuoqiChouQu);
        }
        updataView(value) {
        }
        onUpdataView() {
            this._data = FuJiangModel.Ins.getZJFJData();
            if (this._data) {
                let data = FuJiangModel.Ins.getMountDataByCheifId(this._data.cheifId);
                if (data) {
                    this._mountVo = ZuoQiModel.Ins.getMountVoById(data.mountId);
                    this._ui.sp.visible = true;
                    this._ui.sp1.visible = false;
                    let result = ZuoQiModel.Ins.getLvZuoqiNeed(this._mountVo);
                    if (!result) {
                        return;
                    }
                    this.zuoSkinCtl.refresh(result, this._mountVo, this._attrZuoqi);
                    this.layoutView();
                    this.showAvatar();
                }
                else {
                    this._ui.sp.visible = false;
                    this._ui.sp1.visible = true;
                }
                if (FuJiangModel.Ins.isMountRedTip(this._data.cheifId)) {
                    DotManager.addDot(this._ui.btn_ck, 15, -10);
                }
                else {
                    DotManager.removeDot(this._ui.btn_ck);
                }
            }
            else {
                this._ui.sp.visible = false;
                this._ui.sp1.visible = true;
                DotManager.removeDot(this._ui.btn_ck);
            }
        }
        layoutView() {
            let cx = 225;
            if (this._ui.starupg.visible && this._ui.lvupg.visible) {
                this._ui.lvupg.x = 105;
                this._ui.starupg.x = 367;
            }
            else if (this._ui.starupg.visible) {
                this._ui.starupg.x = cx;
            }
            else {
                this._ui.lvupg.x = cx;
            }
        }
        showAvatar() {
            if (this.avatar) {
                this.avatar.dispose();
            }
            this.avatar = AvatarFactory.createRide(this._mountVo.rideId);
            this._ui.rideCon.addChild(this.avatar);
        }
    }

    exports.FuJiangViewCtl4 = FuJiangViewCtl4;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HuYouModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new HuYouModel();
            }
            return this._ins;
        }
        getAttr(uid) {
            for (let ele in this.bagSoulInfoAttr) {
                if (this.bagSoulInfoAttr[ele]) {
                    if (uid.equals(this.bagSoulInfoAttr[ele].uid)) {
                        return this.bagSoulInfoAttr[ele].attrList[0];
                    }
                }
            }
        }
        getEquipSameSoulPos(attrID, cheifId) {
            let arr = this.getBagList(HuYouModel.BagEnmu.sort_FY, cheifId);
            for (let ele of arr) {
                let attr = this.getAttr(ele.uid);
                if (attrID == attr.id) {
                    return ele.pos;
                }
            }
            return -1;
        }
        getSortBagAttList(cheifId) {
            let list = [];
            let arr = this.getBagList(HuYouModel.BagEnmu.sort_FY, cheifId);
            for (let ele of arr) {
                list.push(this.getAttr(ele.uid));
            }
            return list;
        }
        getSuitAttrShow(cheifId = 0) {
            let str = "";
            let arr = HuYouAttrNameProxy.Ins.List;
            let list = this.getSortBagAttList(cheifId);
            for (let ele of arr) {
                let vo = list.find(item => item.id == parseInt(ele.f_AttributeID));
                if (vo) {
                    str += vo.id + ":" + vo.value + "|";
                }
                else {
                    str += ele.f_AttributeID + ":" + 0 + "|";
                }
            }
            if (str.length > 0) {
                str = str.substr(0, str.length - 1);
            }
            let array = PlayerVoFactory.mergeAttr(str);
            return array;
        }
        initBag(value) {
            this.bagList = {};
            for (let ele of value) {
                if (!this.bagList[ele.type]) {
                    this.bagList[ele.type] = [];
                }
                this.bagList[ele.type].push(ele);
            }
        }
        updataPushBag(value) {
            if (value.bagInfo.length) {
                for (let i = 0; i < value.bagInfo.length; i++) {
                    let bagVo = value.bagInfo[i];
                    if (!this.bagList[bagVo.type]) {
                        this.bagList[bagVo.type] = [];
                    }
                    if (bagVo.actionType == 0) {
                        this.bagList[bagVo.type].push(bagVo);
                        if (value.bagInfoAttr[i]) {
                            this.bagSoulInfoAttr.push(value.bagInfoAttr[i]);
                        }
                    }
                    else if (bagVo.actionType == 1) {
                        let index = this.bagList[bagVo.type].findIndex(item => item.uid.equals(bagVo.uid));
                        if (index != -1) {
                            this.bagList[bagVo.type][index] = bagVo;
                        }
                        index = this.bagSoulInfoAttr.findIndex(item => item.uid.equals(value.bagInfoAttr[i].uid));
                        if (index != -1) {
                            this.bagSoulInfoAttr[index] = value.bagInfoAttr[i];
                        }
                    }
                }
            }
        }
        updataDelBag(value) {
            for (let ele of value) {
                let index = this.bagList[ele.type].findIndex(item => item.uid.equals(ele.uid));
                if (index != -1) {
                    this.bagList[ele.type].splice(index, 1);
                }
                index = this.bagSoulInfoAttr.findIndex(item => item.uid.equals(ele.uid));
                if (index != -1) {
                    this.bagSoulInfoAttr.splice(index, 1);
                }
            }
        }
        getBagList(type, cheifId = 0) {
            if (!this.bagList) {
                return [];
            }
            if (!this.bagList[type]) {
                return [];
            }
            if (type == HuYouModel.BagEnmu.noSort_FY) {
                return this.bagList[type];
            }
            let array = [];
            let arr = this.bagList[type];
            for (let ele of arr) {
                if (ele.cheifId == cheifId) {
                    array.push(ele);
                }
            }
            return array;
        }
        isDotMain() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.CiFu)) {
                if (this.isDotFree() || this.isDotEquipAll()) {
                    return true;
                }
            }
            return false;
        }
        isDotEquipAll(cheifId = 0) {
            for (let i = 1; i < 9; i++) {
                if (this.isDotEquip(i, cheifId)) {
                    return true;
                }
            }
            return false;
        }
        isDotFree() {
            if (this.freeCount) {
                return true;
            }
            return false;
        }
        isDotEquip(index, cheifId = 0) {
            let soltNum = HuYouSlotProxy.Ins.getSlotNum();
            if (soltNum >= index) {
                let array = this.getBagList(HuYouModel.BagEnmu.noSort_FY, cheifId);
                let arr = this.getBagList(HuYouModel.BagEnmu.sort_FY, cheifId);
                let idx = arr.findIndex(item => item.pos == index);
                if (array.length > 0 && idx == -1) {
                    return true;
                }
            }
            return false;
        }
    }
    HuYouModel.UPDATA_VIEW = "UPDATA_VIEW";
    HuYouModel.UPDATA_VIEW_Level = "UPDATA_VIEW_Level";
    HuYouModel.UPDATA_VIEW_Item = "UPDATA_VIEW_Item";
    HuYouModel.UPDATA_AUTO = "UPDATA_AUTO";
    HuYouModel.BagEnmu = {
        noSort_FY: 0,
        sort_FY: 1,
    };

    exports.HuYouModel = HuYouModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GridItemCtl {
        constructor(skin) {
            this.skin = skin;
            this.skin.icon.y += 2;
            this.skin.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        get curVo() {
            return this._vo;
        }
        setVisible(bo) {
            this.skin.visible = bo;
        }
        setQuaVis(bo) {
            this.skin.quality.visible = bo;
        }
        onAdd() {
            MainModel.Ins.on(MainEvent.Open_Equip_switch_View, this, this.onOpen_Equip_switch_View);
        }
        onRemove() {
            MainModel.Ins.on(MainEvent.Open_Equip_switch_View, this, this.onOpen_Equip_switch_View);
            this.clearEff();
            this.clear();
        }
        onOpen_Equip_switch_View() {
            this.clearDrag();
        }
        onClick() {
            if (this._vo) {
                switch (this._vo.itemCfg.f_sub_type) {
                    case 4:
                        E.ViewMgr.Open(EViewType.CIFU_ITEMTIP, null, this._vo);
                        break;
                    case 7:
                        E.ViewMgr.Open(EViewType.CIFU_ITEMTIP1, null, this._vo);
                        break;
                }
            }
        }
        setBagData(vo, isTip = false, isDrag = false, isLv = false, cheifId = 0) {
            this.clear();
            this._cheifId = cheifId;
            this._vo = vo;
            if (vo) {
                if (!vo.isNull) {
                    this.setEvent(isTip, isDrag);
                    this.skin.icon.skin = vo.getIconSkin();
                    if (vo.count > 1) {
                        this.skin.tf1.text = "x" + vo.count;
                    }
                    if (isLv) {
                        this.skin.tf1.text = "lv." + vo.stItem.level;
                    }
                    this.setEff(vo.itemCfg.f_qua);
                }
                else {
                    this.clearEff();
                }
            }
            else {
                this.clearEff();
            }
        }
        setDataBySoulItemID(itemID, attrID, isTip = false, isDrag = false) {
            this.clear();
            this.setEvent(isTip, isDrag);
            let cfg = HuYouIconProxy.Ins.getCfgByIdAndAttr(itemID, attrID);
            if (!cfg) {
                LogSys.Error(`setDataBySoulItemID itemID attrID=====> ${itemID} ${attrID}`);
            }
            this.skin.icon.skin = `o/bless/${cfg.f_icon}`;
            let itemCfg = ItemProxy.Ins.getCfg(itemID);
            this.setEff(itemCfg.f_qua);
        }
        setDataByItemID(itemID, count = 1, isTip = false, isDrag = false) {
            this.clear();
            this.setEvent(isTip, isDrag);
            let itemCfg = ItemProxy.Ins.getCfg(itemID);
            this.skin.icon.skin = IconUtils.getIcon(itemCfg.f_icon);
            if (count > 1) {
                this.skin.tf1.text = "x" + count;
            }
            this.setEff(itemCfg.f_qua);
        }
        setEff(qua) {
            if (qua > 4) {
                if (!this._eff) {
                    this._eff = new SimpleEffect(this.skin, `o/spine/fuyuan/fuyuan`);
                    this._eff.once(Laya.Event.COMPLETE, this, () => {
                        let w = 100 - this._eff.anim.container.width;
                        let h = 100 - this._eff.anim.container.height;
                        this._eff.anim.container.x = w * 0.5 - 1;
                        this._eff.anim.container.y = h * 0.5;
                        this._eff.play(0, true);
                    });
                }
            }
            else {
                this.clearEff();
            }
        }
        setEvent(isTip, isDrag) {
            this._isTip = isTip;
            this._isDrag = isDrag;
            if (this._isDrag) {
                this.skin.on(Laya.Event.MOUSE_DOWN, this, this.onDown);
            }
            else {
                this.skin.off(Laya.Event.MOUSE_DOWN, this, this.onDown);
            }
            if (this._isTip) {
                this.skin.on(Laya.Event.CLICK, this, this.onClick);
            }
            else {
                this.skin.off(Laya.Event.CLICK, this, this.onClick);
            }
        }
        onDown(e) {
            if (HuYouModel.Ins.isAuto) {
                E.ViewMgr.ShowMidError("正在祈福中");
                return;
            }
            if (this._vo && this._vo.itemCfg.f_sub_type == 4) {
                e.stopPropagation();
                this._img = new Laya.Image();
                this._img.skin = this._vo.getIconSkin();
                this._img.x = Laya.stage.mouseX - this._img.width * 0.5;
                this._img.y = Laya.stage.mouseY - this._img.height * 0.5;
                this._img.on(Laya.Event.MOUSE_UP, this, this.onUp);
                LayerMgr.Ins.frameLayer.addChild(this._img);
                this._img.startDrag();
                this._dragTime = Laya.timer.currTimer;
                let view;
                if (this._cheifId == 0) {
                    view = E.ViewMgr.Get(EViewType.CIFU).UI;
                }
                else {
                    let vw = E.ViewMgr.Get(EViewType.FuJiang).UI;
                    view = vw["view5"];
                }
                view.txt_dragdec.visible = true;
                let attrID = HuYouModel.Ins.getAttr(this._vo.uid).id;
                let pos = HuYouModel.Ins.getEquipSameSoulPos(attrID, this._cheifId);
                if (pos != -1) {
                    view["img_liang" + pos].visible = true;
                }
                else {
                    let soltNum;
                    if (this._cheifId == 0) {
                        soltNum = HuYouSlotProxy.Ins.getSlotNum();
                    }
                    else {
                        soltNum = FuJiangFYSlotProxy.Ins.getSlotNum(this._cheifId);
                    }
                    for (let i = 1; i < 9; i++) {
                        if (soltNum >= i) {
                            view["img_liang" + i].visible = true;
                        }
                    }
                }
            }
        }
        onUp(e) {
            if (!this._img) {
                return;
            }
            let imgX = this._img.x;
            let imgY = this._img.y;
            let imgW = this._img.width;
            let imgH = this._img.height;
            this.clearDrag();
            let view;
            if (this._cheifId == 0) {
                view = E.ViewMgr.Get(EViewType.CIFU).UI;
            }
            else {
                let vw = E.ViewMgr.Get(EViewType.FuJiang).UI;
                view = vw["view5"];
            }
            for (let i = 1; i < 9; i++) {
                view["img_liang" + i].visible = false;
            }
            view.txt_dragdec.visible = false;
            if (Laya.timer.currTimer - this._dragTime <= 200) {
                E.ViewMgr.Open(EViewType.CIFU_ITEMTIP, null, this._vo);
                return;
            }
            let p = new Laya.Point(imgX + imgW * 0.5, imgY + imgH * 0.5);
            let bagX = view.img_dragBg.parent.localToGlobal(new Laya.Point(view.img_dragBg.x, view.img_dragBg.y)).x;
            let bagY = view.img_dragBg.parent.localToGlobal(new Laya.Point(view.img_dragBg.x, view.img_dragBg.y)).y;
            let p1 = new Laya.Point(bagX, bagY + view.img_dragBg.height);
            let p2 = new Laya.Point(bagX, bagY);
            let p3 = new Laya.Point(bagX + view.img_dragBg.width, bagY);
            let p4 = new Laya.Point(bagX + view.img_dragBg.width, bagY + view.img_dragBg.height);
            let bo = GeometryUtil.isPointInRect(p1, p2, p3, p4, p);
            if (bo) {
                if (this._vo.stItem.type != HuYouModel.BagEnmu.noSort_FY) {
                    let req = new BlessingWear_req();
                    req.type = HuYouModel.BagEnmu.noSort_FY;
                    req.pos = 0;
                    req.uid = this._vo.uid;
                    req.cheifId = this._cheifId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
                return;
            }
            let index = 0;
            for (let i = 1; i < 9; i++) {
                let img = view["drag_img" + i];
                let xx = img.parent.localToGlobal(new Laya.Point(img.x, img.y)).x;
                let yy = img.parent.localToGlobal(new Laya.Point(img.x, img.y)).y;
                let x = xx - imgX;
                let y = yy - imgY;
                let len = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
                if (len <= 40) {
                    index = i;
                }
            }
            if (index > 0) {
                let soltNum;
                if (this._cheifId == 0) {
                    soltNum = HuYouSlotProxy.Ins.getSlotNum();
                }
                else {
                    soltNum = FuJiangFYSlotProxy.Ins.getSlotNum(this._cheifId);
                }
                if (index <= soltNum) {
                    let req = new BlessingWear_req();
                    req.type = HuYouModel.BagEnmu.sort_FY;
                    req.pos = index;
                    req.uid = this._vo.uid;
                    req.cheifId = this._cheifId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        clearDrag() {
            if (this._img) {
                this._img.off(Laya.Event.MOUSE_UP, this, this.onUp);
                this._img.stopDrag();
                this._img.removeSelf();
                this._img = null;
            }
        }
        clearEff() {
            if (this._eff) {
                this._eff.dispose();
                this._eff = null;
            }
        }
        clear() {
            this._isTip = false;
            this._isDrag = false;
            this.skin.icon.skin = "";
            this.skin.tf1.text = "";
            this.clearDrag();
            this.skin.off(Laya.Event.CLICK, this, this.onClick);
            this.skin.off(Laya.Event.MOUSE_DOWN, this, this.onDown);
        }
    }

    exports.GridItemCtl = GridItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GridItemView extends ui.views.main.ui_slot_itemUI {
        constructor() {
            super();
            this.ctl = new GridItemCtl(this);
        }
    }

    exports.GridItemView = GridItemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GridItemVo {
        get uid() {
            return this._uid;
        }
        get cheifId() {
            return this._cheifId;
        }
        get itemID() {
            return this._itemID;
        }
        get stItem() {
            return this._stItem;
        }
        get itemCfg() {
            return this._itemCfg;
        }
        get count() {
            return this._count;
        }
        getName() {
            if (this._itemCfg.f_sub_type == 4) {
                let attr = HuYouModel.Ins.getAttr(this._uid);
                if (attr) {
                    let cfg = HuYouIconProxy.Ins.getCfgByIdAndAttr(this._itemID, attr.id);
                    return cfg ? cfg.f_SoulName : "" + attr.id;
                }
            }
            else {
                return main.itemName(this._itemCfg.f_name);
            }
        }
        getQua() {
            return QualityUtils.getQuaColor(this._itemCfg.f_qua);
        }
        getDec() {
            return main.itemName(this._itemCfg.f_info);
        }
        getIconSkin() {
            if (this._itemCfg.f_sub_type == 4) {
                let attr = HuYouModel.Ins.getAttr(this._uid);
                if (attr) {
                    let cfg = HuYouIconProxy.Ins.getCfgByIdAndAttr(this._itemID, attr.id);
                    return cfg ? `o/bless/${cfg.f_icon}` : "remote/common/base/wh.png";
                }
            }
            else {
                return IconUtils.getIcon(this._itemCfg.f_icon);
            }
        }
        init(value) {
            this._stItem = value;
            this._uid = value.uid;
            this._cheifId = value.cheifId;
            this._itemID = value.id;
            this._count = value.count;
            this._itemCfg = ItemProxy.Ins.getCfg(value.id);
        }
    }

    exports.GridItemVo = GridItemVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HuYouDuiHuanItem extends ui.views.fuyou.ui_duihuanItemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn_dh, new Laya.Handler(this, this.onBtnDHClick));
            this._item = new GridItemCtl(this.item);
        }
        onBtnDHClick() {
            if (!MainModel.Ins.isItemEnoughSt(this._data.f_Price, true)) {
                return;
            }
            let req = new BlessingShop_req();
            req.id = this._data.f_id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setData(data) {
            if (!data)
                return;
            this._data = data;
            this.txt_name.text = data.f_ItemName;
            let cfg = ItemProxy.Ins.getCfg(data.f_itemID);
            this.txt_name.color = QualityUtils.getQuaColor(cfg.f_qua);
            this.img.skin = IconUtils.getIcon(data.f_Price.split("-")[0]);
            this.txt_value.text = data.f_Price.split("-")[1];
            if (data.f_Attribute && data.f_ItemType == 1) {
                let id = data.f_Attribute.split("-")[0];
                let value = data.f_Attribute.split("-")[1];
                this.txt_attrName.text = MainModel.Ins.getAttrNameIdByID(parseInt(id)) + " : " + attrConvert(parseInt(id), parseInt(value));
                this._item.setDataBySoulItemID(data.f_itemID, parseInt(id));
            }
            else {
                this.txt_attrName.text = "";
                this._item.setDataByItemID(data.f_itemID);
            }
        }
    }

    exports.HuYouDuiHuanItem = HuYouDuiHuanItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HuYouQuickBtn1 extends ui.views.fuyou.ui_zhuanhuaItem1UI {
    }
    class HuYouView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.isClearTimer = false;
            this.autoFree = true;
            this.mMainSnapshot = true;
        }
        get packUid() {
            return this._ui.qifu.visible ? 20 : 21;
        }
        onAddLoadRes() {
            this.addAtlas('fuyou.atlas');
            this.addAtlas('huodong.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fuyou.ui_cifuUI;
                this.btnlist = [];
                this.bindClose(this._ui.close1);
                const tabsSkin = [this._ui.tab1, this._ui.tab2, this._ui.tab3];
                this.tabList = E.LangMgr.getLang("HuYouTab").split("|");
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                ValCtl.Create(this._ui.txt_money4, this._ui.img_money4, ECellType.GOLD);
                ValCtl.Create(this._ui.txt_money3, this._ui.img_money3, ECellType.QiYun);
                ValCtl.Create(this._ui.txt_money2, this._ui.img_money2, ECellType.DaoQi);
                ValCtl.Create(this._ui.txt_money1, this._ui.img_money1, ECellType.GouYu);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_l, new Laya.Handler(this, this.onBtnLClick)), ButtonCtl.Create(this._ui.btn_r, new Laya.Handler(this, this.onBtnRClick)), ButtonCtl.Create(this._ui.levelUpBtn, new Laya.Handler(this, this.onBtnlevelUpClick)), ButtonCtl.Create(this._ui.tujianbtn, new Laya.Handler(this, this.onBtntujianbtnClick)), ButtonCtl.Create(this._ui.btn_shezhi, new Laya.Handler(this, this.onBtnSheZhiClick)), ButtonCtl.Create(this._ui.btn_attr, new Laya.Handler(this, this.onBtnAttrClick)), ButtonCtl.Create(this._ui.btn_xslb, new Laya.Handler(this, this.onBtnXslbClick)));
                this._checkBoxCtl = new CheckBoxCtl({ bg: this._ui.ckbg, gou: this._ui.gou });
                this._checkBoxCtl.selectHander = new Laya.Handler(this, this.updataMoneyRes);
                this._ui.list.itemRender = GridItemView;
                this._ui.list.renderHandler = new Laya.Handler(this, this.itemRender);
                this._ui.list1.itemRender = GridItemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.itemRender1);
                this._ui.list2.itemRender = HuYouDuiHuanItem;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.itemDuiHuanRender);
                this.timeCtl = new TimeCtl(this._ui.txt_time);
                for (let i = 1; i < 9; i++) {
                    this["_item" + i] = new GridItemCtl(this._ui["item" + i]);
                }
                for (let i = 1; i < 7; i++) {
                    this["_eff" + i] = new SimpleEffect(this._ui["box" + i], `o/spine/lantern2/lantern2`);
                    this["_eff" + i].once(Laya.Event.COMPLETE, this, () => {
                        this["_eff" + i].anim.container.x = 36;
                        this["_eff" + i].anim.container.y = 115;
                    });
                }
                this.initSelectUI();
                this._ui.img_moneyIcon.skin = IconUtils.getIcon(31);
                for (let i = 2; i < 7; i++) {
                    this._ui["img" + i].visible = false;
                }
                let _animCtl = new Sell2Spine();
                _animCtl.load(`o/spine/sell2/sell2.skel`);
                _animCtl.once(Laya.Event.COMPLETE, this, this.onAnimCompleteHandler);
                this._animCtl = _animCtl;
            }
        }
        onAnimCompleteHandler() {
            this._ui.addChild(this._animCtl.baseSkel);
            this._animCtl.baseSkel.pos(370, 480);
        }
        initSelectUI() {
            let size = 5;
            let cnt = HuYouQualityProxy.Ins.getListByType(1).length + 1;
            let cellHeight = 0;
            for (let i = cnt - 1; i >= 0; i--) {
                let _item = new HuYouQuickBtn1();
                _item.y = (cnt - i - 1) * _item.height + size;
                _item.x = size;
                this._ui.listcontainer.addChild(_item);
                cellHeight = _item.height;
                let cfg;
                if (i == cnt - 1) {
                    cfg = {};
                    cfg.f_QualityID = 0;
                    cfg.f_SoulQualityName = "全部";
                    cfg.f_Color = "ffeec2";
                }
                else {
                    cfg = HuYouQualityProxy.Ins.GetDataById(i + 1);
                }
                _item.cfg = cfg;
                this.updateCell(_item.tf, cfg);
                _item.btn.clickHandler = new Laya.Handler(this, this.onItemClickHandler, [cfg, cnt - i - 1]);
                this.btnlist.push(_item);
            }
            this.curIndex = this.btnlist.length - 1;
            this._ui.listcontainer.height = cnt * cellHeight + size * 2;
            this._ui.listcontainer.y = this._ui.listarea.y - this._ui.listcontainer.height;
            this._ui.listarea.on(Laya.Event.CLICK, this, this.onAreaHander);
        }
        updateCell(label, cfg) {
            label.text = cfg.f_SoulQualityName;
            label.color = `#${cfg.f_Color}`;
        }
        onItemClickHandler(cfg, _index) {
            this._ui.listcontainer.visible = false;
            this.selectIndex(_index);
        }
        selectIndex(index) {
            this.curIndex = index;
            this.updateCell(this._ui.listtf, this.btnlist[index].cfg);
            this.updataFuYou();
        }
        onAreaHander() {
            this._ui.listcontainer.visible = !this._ui.listcontainer.visible;
            if (this._ui.listcontainer.visible) {
                this._ui.sanjiao.rotation = 180;
            }
            else {
                this._ui.sanjiao.rotation = 0;
            }
        }
        onTabSelectHandler(v) {
            if (!this.isInit && HuYouModel.Ins.isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError(E.getLang("HuYou_tips1"));
            }
            this.isInit = false;
            switch (v) {
                case 0:
                    this._ui.qifu.visible = true;
                    this._ui.fuyou.visible = false;
                    this._ui.duihuan.visible = false;
                    this._ui.gold1.visible = this._ui.gold2.visible = this._ui.gold3.visible = this._ui.gold4.visible = true;
                    this._ui.gold1.x = 0;
                    this._ui.gold2.x = 158;
                    ActivityModel.Ins.onPop(this.packUid, this._ui.btn_xslb);
                    break;
                case 1:
                    this._ui.qifu.visible = false;
                    this._ui.fuyou.visible = true;
                    this._ui.duihuan.visible = false;
                    this._ui.gold2.visible = true;
                    this._ui.gold2.x = 483;
                    this._ui.gold1.visible = this._ui.gold3.visible = this._ui.gold4.visible = false;
                    ActivityModel.Ins.onPop(this.packUid, this._ui.btn_xslb);
                    break;
                case 2:
                    this._ui.qifu.visible = false;
                    this._ui.fuyou.visible = false;
                    this._ui.duihuan.visible = true;
                    this._ui.gold1.visible = true;
                    this._ui.gold1.x = 483;
                    this._ui.gold2.visible = this._ui.gold3.visible = this._ui.gold4.visible = false;
                    break;
            }
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.txt.text = this.tabList[index];
            if (sel) {
                skin.img1.visible = false;
                skin.img2.visible = true;
                skin.txt.color = "#A1572F";
            }
            else {
                skin.img1.visible = true;
                skin.img2.visible = false;
                skin.txt.color = "#e4bb87";
            }
        }
        onInit() {
            this.isInit = true;
            if (!HuYouModel.Ins.isAuto) {
                this.setAuto(false);
            }
            this._ui.txt_money1.text = MainModel.Ins.mRoleData.getVal(ECellType.GouYu) + "";
            this._ui.txt_money2.text = MainModel.Ins.mRoleData.getVal(ECellType.DaoQi) + "";
            this._ui.txt_money3.text = MainModel.Ins.mRoleData.getVal(ECellType.QiYun) + "";
            this._ui.txt_money4.text = MainModel.Ins.mRoleData.getVal(ECellType.GOLD) + "";
            Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onStageUp);
            HuYouModel.Ins.on(HuYouModel.UPDATA_VIEW, this, this.updataView);
            HuYouModel.Ins.on(HuYouModel.UPDATA_VIEW_Level, this, this.updataViewLv1);
            HuYouModel.Ins.on(HuYouModel.UPDATA_VIEW_Item, this, this.updataViewItem);
            ActivityModel.Ins.on(ActivityEvent.PopWinUpdate, this, this.onPop);
            this.tabsCtl.selectIndex = 0;
            this._checkBoxCtl.selected = false;
            for (let i = 1; i < 9; i++) {
                this._ui["img_liang" + i].visible = false;
            }
            this._ui.txt_dragdec.visible = false;
            this._ui.listcontainer.visible = false;
            this._ui.sanjiao.rotation = 0;
            this.curIndex = 0;
            this.selectIndex(this.curIndex);
            this.updataView();
            this.updataDuiHuan();
            let _avatar = AvatarFactory.getStandUiMainAvatar();
            this._avatar = _avatar;
            this._ui.heroContainer.addChild(_avatar);
        }
        onPop() {
            ActivityModel.Ins.onPop(this.packUid, this._ui.btn_xslb);
        }
        onExit() {
            Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onStageUp);
            HuYouModel.Ins.off(HuYouModel.UPDATA_VIEW, this, this.updataView);
            HuYouModel.Ins.off(HuYouModel.UPDATA_VIEW_Level, this, this.updataViewLv1);
            HuYouModel.Ins.off(HuYouModel.UPDATA_VIEW_Item, this, this.updataViewItem);
            Laya.timer.clear(this, this.onUpdataViewItem);
            ActivityModel.Ins.off(ActivityEvent.PopWinUpdate, this, ActivityModel.Ins.onPop);
            this.timeCtl.stop();
            MainModel.Ins.event(MainEvent.AddHero);
            for (let i = 1; i < 7; i++) {
                this["_eff" + i].stop();
            }
            this._animCtl.stop();
            this._animCtl.baseSkel.visible = false;
            this._animCtl.dispose();
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        getVal(l, type) {
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.id == type) {
                    return cell.count;
                }
            }
            return 0;
        }
        updataViewItem(value) {
            Laya.timer.once(1000, this, this.onUpdataViewItem, [value]);
        }
        onUpdataViewItem(value) {
            if (!this._ui.destroyed && this._animCtl.baseSkel) {
                let spNum = this.getVal(value, ECellType.DaoQi);
                let gyNum = this.getVal(value, ECellType.GouYu);
                this._animCtl.baseSkel.visible = true;
                this._animCtl.playHappy(spNum, gyNum);
            }
        }
        onStageUp() {
        }
        updataView() {
            this.updataQiFu();
            this.updataFuYou();
        }
        updataViewLv(lv) {
            this.isPlay = true;
            let index = 0;
            if (HuYouModel.Ins.isAuto && HuYouModel.Ins.wtSelect2) {
                if (lv >= 4) {
                    index = lv + 1;
                    if (index > 6) {
                        this.setSucc(lv);
                    }
                    else {
                        this._ui["bg" + index].visible = false;
                        this["_eff" + index].play(0, false, this, this.setSucc, [lv]);
                    }
                }
                else {
                    let len = 4 - lv;
                    for (let i = 0; i < len; i++) {
                        this._ui["bg" + (i + lv + 1)].visible = false;
                        if (i == len - 1) {
                            this["_eff" + (i + lv + 1)].play(0, false, this, this.setSucc, [i]);
                        }
                        else {
                            this["_eff" + (i + lv + 1)].play(0, false);
                        }
                    }
                }
            }
            else if (!HuYouModel.Ins.isAuto && this._checkBoxCtl.selected) {
                if (lv >= 4) {
                    index = lv + 1;
                    if (index > 6) {
                        this.setSucc(lv);
                    }
                    else {
                        this._ui["bg" + index].visible = false;
                        this["_eff" + index].play(0, false, this, this.setSucc, [lv]);
                    }
                }
                else {
                    let len = 4 - lv;
                    for (let i = 0; i < len; i++) {
                        this._ui["bg" + (i + lv + 1)].visible = false;
                        if (i == len - 1) {
                            this["_eff" + (i + lv + 1)].play(0, false, this, this.setSucc, [i]);
                        }
                        else {
                            this["_eff" + (i + lv + 1)].play(0, false);
                        }
                    }
                }
            }
            else {
                index = lv + 1;
                if (index > 6) {
                    this.setSucc(lv);
                }
                else {
                    this._ui["bg" + index].visible = false;
                    this["_eff" + index].play(0, false, this, this.setSucc, [lv]);
                }
            }
        }
        setSucc(lv) {
            if (HuYouModel.Ins.level == 0) {
                let len = lv + 1;
                if (len > 6) {
                    len = 6;
                }
                for (let i = 1; i <= len; i++) {
                    this._ui["bg" + i].visible = true;
                    this["_eff" + i].play(2, false, this, this.effOK);
                }
            }
            else {
                this.effOK();
            }
        }
        updataViewLv1(lv) {
            this.isPlay = true;
            let type = 0;
            if (lv == 6) {
                type = 2;
            }
            else if (HuYouModel.Ins.level > lv) {
                type = 1;
            }
            else {
                type = 0;
            }
            let index = lv + 1;
            switch (type) {
                case 0:
                    this._ui["bg" + index].visible = false;
                    this["_eff" + index].play(2, false, this, this.effOK);
                    for (let i = 1; i <= lv; i++) {
                        this["_eff" + i].play(3, false);
                    }
                    break;
                case 1:
                    if (HuYouModel.Ins.isAuto && HuYouModel.Ins.wtSelect2) {
                        if (lv >= 4) {
                            this._ui["bg" + index].visible = false;
                            this["_eff" + index].play(0, false, this, this.effOK);
                        }
                        else {
                            let len = 4 - lv;
                            for (let i = 0; i < len; i++) {
                                this._ui["bg" + (i + lv + 1)].visible = false;
                                if (i == len - 1) {
                                    this["_eff" + (i + lv + 1)].play(0, false, this, this.effOK, [i]);
                                }
                                else {
                                    this["_eff" + (i + lv + 1)].play(0, false);
                                }
                            }
                        }
                    }
                    else if (!HuYouModel.Ins.isAuto && this._checkBoxCtl.selected) {
                        if (lv >= 4) {
                            this._ui["bg" + index].visible = false;
                            this["_eff" + index].play(0, false, this, this.effOK);
                        }
                        else {
                            let len = 4 - lv;
                            for (let i = 0; i < len; i++) {
                                this._ui["bg" + (i + lv + 1)].visible = false;
                                if (i == len - 1) {
                                    this["_eff" + (i + lv + 1)].play(0, false, this, this.effOK, [i]);
                                }
                                else {
                                    this["_eff" + (i + lv + 1)].play(0, false);
                                }
                            }
                        }
                    }
                    else {
                        this._ui["bg" + index].visible = false;
                        this["_eff" + index].play(0, false, this, this.effOK);
                    }
                    break;
                case 2:
                    for (let i = 1; i <= 6; i++) {
                        this["_eff" + i].play(4, false, this, this.effOK);
                    }
                    break;
            }
        }
        effOK() {
            this.isPlay = false;
            this.updataQiFu();
        }
        itemRender(item) {
            item.ctl.setBagData(item.dataSource, true, false, true);
        }
        itemRender1(item) {
            item.ctl.setBagData(item.dataSource, true, true, true);
        }
        onBtnlevelUpClick() {
            if (HuYouModel.Ins.isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError(E.getLang("HuYou_tips1"));
                return;
            }
            if (this.isPlay) {
                return;
            }
            if (this._checkBoxCtl.selected && HuYouModel.Ins.level < 4) {
                let typeList = HuYouGetStageProxy.Ins.getListByType(1);
                if (!MainModel.Ins.isItemEnoughSt(typeList[0].f_UpgradeCost, true)) {
                    return;
                }
            }
            else {
                if (HuYouModel.Ins.freeCount <= 0) {
                    let typeList = HuYouGetStageProxy.Ins.getListByType(0);
                    let cfg;
                    for (let ele in typeList) {
                        if (parseInt(typeList[ele].f_ItemID) == HuYouModel.Ins.level) {
                            cfg = typeList[ele];
                            break;
                        }
                    }
                    if (cfg.f_UpgradeCost != "") {
                        if (!MainModel.Ins.isItemEnoughSt(cfg.f_UpgradeCost, true)) {
                            return;
                        }
                    }
                }
            }
            let req = new BlessingOnce_req();
            req.isPay = this._checkBoxCtl.selected ? 1 : 0;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtntujianbtnClick() {
            if (HuYouModel.Ins.isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError(E.getLang("HuYou_tips1"));
                return;
            }
            if (this.isPlay) {
                E.ViewMgr.ShowMidError("正在祈福中");
                return;
            }
            E.ViewMgr.Open(EViewType.CIFU_ZHUANHUAN);
        }
        onBtnSheZhiClick() {
            if (HuYouModel.Ins.isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError(E.getLang("HuYou_tips1"));
                return;
            }
            E.ViewMgr.Open(EViewType.CIFU_SHEZHI);
        }
        onBtnAttrClick() {
            E.ViewMgr.Open(EViewType.AttrShow, null, HuYouModel.Ins.getSuitAttrShow());
        }
        onBtnXslbClick() {
            ActivityModel.Ins.diamondEject(this.packUid);
        }
        onBlessingLevel() {
            let req = new BlessingLevel_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        updataQiFu() {
            if (!this.UI || this.UI && this.UI.destroyed) {
                return;
            }
            if (!this.isPlay) {
                if (HuYouModel.Ins.level == 6) {
                    Laya.timer.once(500, this, this.onBlessingLevel);
                }
                for (let i = 1; i < 7; i++) {
                    if (HuYouModel.Ins.level >= i) {
                        if (!this["_eff" + i].anim.isPlaying) {
                            this["_eff" + i].play(1, true);
                        }
                        this._ui["bg" + i].visible = false;
                    }
                    else {
                        this["_eff" + i].stop();
                        this._ui["bg" + i].visible = true;
                    }
                }
                let list = [];
                let len = HuYouCfgProxy.Ins.GetDataById(1).f_StorageMax;
                let bagList = HuYouModel.Ins.getBagList(HuYouModel.BagEnmu.noSort_FY);
                for (let i = 0; i < len; i++) {
                    let vo = new GridItemVo();
                    let data = bagList[i];
                    if (data) {
                        vo.isNull = false;
                        vo.init(data);
                    }
                    else {
                        vo.isNull = true;
                    }
                    list.push(vo);
                }
                this._ui.list.array = list;
                this._ui.txt_num2.text = bagList.length + "/" + len;
            }
            this.updataMoneyRes();
            if (HuYouModel.Ins.freeCount) {
                DotManager.addDot(this._ui.tab1);
                DotManager.addDot(this._ui.levelUpBtn);
                this._ui.txt_time.text = "";
                this._ui.txt_freeNum.text = "免费次数" + HuYouModel.Ins.freeCount + "/" + HuYouCfgProxy.Ins.GetDataById(1).f_FreeTimes;
            }
            else {
                DotManager.removeDot(this._ui.levelUpBtn);
                DotManager.removeDot(this._ui.tab1);
                this._ui.txt_freeNum.text = "";
                this.refreshTime();
            }
        }
        updataMoneyRes() {
            let typeList = HuYouGetStageProxy.Ins.getListByType(0);
            let cfg;
            for (let ele in typeList) {
                if (parseInt(typeList[ele].f_ItemID) == HuYouModel.Ins.level) {
                    cfg = typeList[ele];
                    break;
                }
            }
            this._ui.levelUpBtnLabel.x = 105;
            if (cfg.f_UpgradeCost == "") {
                this._ui.money3.text = "";
                this._ui.img_moneyIcon1.visible = false;
                this._ui.img_moneyIcon.visible = true;
            }
            else {
                if (HuYouModel.Ins.level < 4) {
                    if (this._checkBoxCtl.selected || HuYouModel.Ins.wtSelect2) {
                        this._ui.img_moneyIcon1.visible = true;
                        this._ui.img_moneyIcon.visible = false;
                        cfg = HuYouGetStageProxy.Ins.getListByType(1)[0];
                        this._ui.money3.text = cfg.f_UpgradeCost.split("-")[1];
                    }
                    else {
                        if (HuYouModel.Ins.freeCount) {
                            this._ui.money3.text = "";
                            this._ui.img_moneyIcon1.visible = false;
                            this._ui.img_moneyIcon.visible = false;
                            this._ui.levelUpBtnLabel.x = 63;
                        }
                        else {
                            this._ui.money3.text = cfg.f_UpgradeCost.split("-")[1];
                            this._ui.img_moneyIcon1.visible = false;
                            this._ui.img_moneyIcon.visible = true;
                        }
                    }
                }
                else {
                    if (HuYouModel.Ins.freeCount) {
                        this._ui.money3.text = "";
                        this._ui.img_moneyIcon1.visible = false;
                        this._ui.img_moneyIcon.visible = false;
                        this._ui.levelUpBtnLabel.x = 63;
                    }
                    else {
                        this._ui.money3.text = cfg.f_UpgradeCost.split("-")[1];
                        this._ui.img_moneyIcon1.visible = false;
                        this._ui.img_moneyIcon.visible = true;
                    }
                }
            }
            typeList = HuYouGetStageProxy.Ins.getListByType(1);
            this._ui.txt_num.text = typeList[0].f_UpgradeCost.split("-")[1];
        }
        refreshTime() {
            this.timeCtl.start(HuYouModel.Ins.startTime, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.refreshTime));
        }
        onUpdateTime() {
            if (!this._ui.destroyed) {
                let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
                this.timeCtl.setText(time_str + E.getLang("TimeSub"));
            }
        }
        onAutoHandler() {
            if (!this._ui.destroyed) {
                this._ui.chilun.rotation += 1;
            }
        }
        setAuto(v) {
            HuYouModel.Ins.isAuto = v;
            if (v) {
                if (!this._ui.destroyed) {
                    Laya.timer.frameLoop(1, this, this.onAutoHandler);
                    this.setLabe("祈福中");
                }
                this.wtSendCmd();
            }
            else {
                Laya.timer.clear(this, this.onAutoHandler);
                Laya.timer.clear(this, this.wtSendCmd);
                HuYouModel.Ins.wtSelect1 = HuYouModel.Ins.wtSelect2 = false;
                if (!this._ui.destroyed) {
                    this.setLabe("祈福");
                    this.updataMoneyRes();
                }
            }
            HuYouModel.Ins.event(HuYouModel.UPDATA_AUTO);
        }
        setLabe(str) {
            if (this._ui && !this._ui.destroyed) {
                this._ui.levelUpBtnLabel.text = str;
            }
        }
        wtSendCmd() {
            if (!HuYouModel.Ins.isAuto) {
                Laya.timer.clear(this, this.wtSendCmd);
                return;
            }
            if (this.isPlay) {
                Laya.timer.once(500, this, this.wtSendCmd);
                return;
            }
            let len = HuYouCfgProxy.Ins.GetDataById(1).f_StorageMax;
            let bagList = HuYouModel.Ins.getBagList(HuYouModel.BagEnmu.noSort_FY);
            if (bagList.length >= len) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("福佑背包已满");
                return;
            }
            if (HuYouModel.Ins.wtSelect2 && HuYouModel.Ins.level < 4) {
                let typeList = HuYouGetStageProxy.Ins.getListByType(1);
                if (!MainModel.Ins.isItemEnoughSt(typeList[0].f_UpgradeCost, true)) {
                    this.setAuto(false);
                    return;
                }
            }
            else {
                if (HuYouModel.Ins.freeCount <= 0) {
                    let typeList = HuYouGetStageProxy.Ins.getListByType(0);
                    let cfg;
                    for (let ele in typeList) {
                        if (parseInt(typeList[ele].f_ItemID) == HuYouModel.Ins.level) {
                            cfg = typeList[ele];
                            break;
                        }
                    }
                    if (cfg.f_UpgradeCost == "") {
                        Laya.timer.once(500, this, this.wtSendCmd);
                        return;
                    }
                    if (!MainModel.Ins.isItemEnoughSt(cfg.f_UpgradeCost, true)) {
                        this.setAuto(false);
                        return;
                    }
                }
            }
            let req = new BlessingAuto_req();
            req.qua = HuYouModel.Ins.wtQua;
            req.isFlag = HuYouModel.Ins.wtSelect1 ? 1 : 0;
            req.isPay = HuYouModel.Ins.wtSelect2 ? 1 : 0;
            SocketMgr.Ins.SendMessageBin(req);
            Laya.timer.once(500, this, this.wtSendCmd);
        }
        updataFuYou() {
            let soltNum = HuYouSlotProxy.Ins.getSlotNum();
            let equipList = HuYouModel.Ins.getBagList(HuYouModel.BagEnmu.sort_FY);
            for (let i = 1; i < 9; i++) {
                if (soltNum >= i) {
                    this._ui["suo" + i].visible = false;
                }
                else {
                    this._ui["suo" + i].visible = true;
                    this._ui["txt_suo" + i].text = "Lv." + HuYouSlotProxy.Ins.getCfgByCount(i).f_PlayerLevel + "解锁";
                }
                if (equipList) {
                    let vo = equipList.find(item => item.pos == i);
                    if (vo) {
                        let voo = new GridItemVo();
                        voo.isNull = false;
                        voo.init(vo);
                        this["_item" + i].setVisible(true);
                        this["_item" + i].setQuaVis(false);
                        this["_item" + i].setBagData(voo, true, true);
                        this._ui["img_line" + i].visible = true;
                        this._ui["txt_lv" + i].visible = true;
                        this._ui["txt_lv" + i].text = voo.getName() + " " + "lv." + voo.stItem.level;
                    }
                    else {
                        this["_item" + i].setVisible(false);
                        this._ui["img_line" + i].visible = false;
                        this._ui["txt_lv" + i].visible = false;
                    }
                }
                else {
                    this["_item" + i].setVisible(false);
                    this._ui["img_line" + i].visible = false;
                    this._ui["txt_lv" + i].visible = false;
                }
                if (HuYouModel.Ins.isDotEquip(i)) {
                    DotManager.addDot(this._ui["red" + i], 30, -10);
                }
                else {
                    DotManager.removeDot(this._ui["red" + i]);
                }
            }
            let list = [];
            let len = HuYouCfgProxy.Ins.GetDataById(1).f_StorageMax;
            let qua = this.btnlist[this.curIndex].cfg.f_QualityID;
            let bagList = HuYouModel.Ins.getBagList(HuYouModel.BagEnmu.noSort_FY);
            let showList;
            if (qua == 0) {
                showList = bagList;
            }
            else {
                showList = [];
                for (let ele of bagList) {
                    let itemCfg = ItemProxy.Ins.getCfg(ele.id);
                    if (qua == itemCfg.f_qua) {
                        showList.push(ele);
                    }
                }
            }
            for (let i = 0; i < len; i++) {
                let vo = new GridItemVo();
                let data = showList[i];
                if (data) {
                    vo.isNull = false;
                    vo.init(data);
                }
                else {
                    vo.isNull = true;
                }
                list.push(vo);
            }
            this._ui.list1.array = list;
            this._ui.list1.page = 0;
            this.setBtn();
            if (HuYouModel.Ins.isDotEquipAll()) {
                DotManager.addDot(this._ui.tab2);
            }
            else {
                DotManager.removeDot(this._ui.tab2);
            }
        }
        onBtnLClick() {
            this._ui.list1.page--;
            this.setBtn();
        }
        onBtnRClick() {
            this._ui.list1.page++;
            this.setBtn();
        }
        setBtn() {
            let index = this._ui.list1.page + 1;
            if (index <= 1) {
                this._ui.btn_l.disabled = true;
            }
            else {
                this._ui.btn_l.disabled = false;
            }
            if (index >= this._ui.list1.totalPage) {
                this._ui.btn_r.disabled = true;
            }
            else {
                this._ui.btn_r.disabled = false;
            }
            if (this._ui.list1.totalPage != 0) {
                this._ui.lab_page.text = index + "/" + this._ui.list1.totalPage;
            }
            else {
                this._ui.lab_page.text = "1/1";
            }
        }
        itemDuiHuanRender(item) {
            item.setData(item.dataSource);
        }
        updataDuiHuan() {
            this._ui.list2.array = HuYouShopProxy.Ins.List;
        }
    }

    exports.HuYouQuickBtn1 = HuYouQuickBtn1;
    exports.HuYouView = HuYouView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangSelCtl {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            this._ui.list.itemRender = ui.views.fujiang.ui_fujiangItem4UI;
            this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderhandler);
            this._ui.list.selectEnable = true;
        }
        onAdd() {
        }
        onRemove() {
            for (let i = 0; i < 5; i++) {
                if (this["_avatar" + (i + 1)]) {
                    this["_avatar" + (i + 1)].dispose();
                    this["_avatar" + (i + 1)] = null;
                }
            }
        }
        onRenderhandler(item, index) {
            if (this._ui.list.selectedIndex == index) {
                item.sp1.visible = true;
                FuJiangModel.Ins.fujiangSelectIndex = index;
                FuJiangModel.Ins.event(FuJiangModel.SELECT_FUJIANG, item.dataSource);
            }
            else {
                item.sp1.visible = false;
            }
            if (!this["_avatar" + (index + 1)]) {
                let skin = FuJiangModel.Ins.getFuJiangSkin(item.dataSource.cheifId);
                this["_avatar" + (index + 1)] = AvatarFactory.createAvatarByStSkin(skin, EAvatarAnim.NormalStand, EAvatarDir.Right);
                this["_avatar" + (index + 1)].scale(1.1, 1.1);
                item.sp.addChild(this["_avatar" + (index + 1)]);
            }
        }
        setData() {
            let arr = FuJiangModel.Ins.getSZNoList();
            this._ui.list.array = arr;
            if (arr.length >= FuJiangModel.Ins.fujiangSelectIndex + 1) {
                this._ui.list.selectedIndex = FuJiangModel.Ins.fujiangSelectIndex;
            }
            else {
                this._ui.list.selectedIndex = 0;
            }
            for (let i = 0; i < 5; i++) {
                this._ui["dot" + (i + 1)].visible = false;
            }
        }
        addRedTip(index) {
            this._ui["dot" + (index + 1)].visible = true;
        }
        remRedTip(index) {
            this._ui["dot" + (index + 1)].visible = false;
        }
    }

    exports.FuJiangSelCtl = FuJiangSelCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangViewCtl5 {
        constructor(skin) {
            this.btnlist = [];
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            ValCtl.Create(this._ui.lab2, this._ui.img2, ECellType.DaoQi);
            ButtonCtl.Create(this._ui.btn_l, new Laya.Handler(this, this.onBtnLClick));
            ButtonCtl.Create(this._ui.btn_r, new Laya.Handler(this, this.onBtnRClick));
            ButtonCtl.Create(this._ui.btn_attr, new Laya.Handler(this, this.onBtnAttrClick));
            ButtonCtl.Create(this._ui.btn_qf, new Laya.Handler(this, this.onBtnQFClick));
            this.initSelectUI();
            this._selCtl = new FuJiangSelCtl(this._ui.view);
            for (let i = 1; i < 9; i++) {
                this["_item" + i] = new GridItemCtl(this._ui["item" + i]);
                this._ui["txt_suo" + i].x = this._ui["txt_suo" + i].x - 25;
            }
            this._ui.list1.itemRender = GridItemView;
            this._ui.list1.renderHandler = new Laya.Handler(this, this.itemRender1);
        }
        itemRender1(item) {
            item.ctl.setBagData(item.dataSource, true, true, true, this._data.cheifId);
        }
        initSelectUI() {
            let size = 5;
            let cnt = HuYouQualityProxy.Ins.getListByType(1).length + 1;
            let cellHeight = 0;
            for (let i = cnt - 1; i >= 0; i--) {
                let _item = new HuYouQuickBtn1();
                _item.y = (cnt - i - 1) * _item.height + size;
                _item.x = size;
                this._ui.listcontainer.addChild(_item);
                cellHeight = _item.height;
                let cfg;
                if (i == cnt - 1) {
                    cfg = {};
                    cfg.f_QualityID = 0;
                    cfg.f_SoulQualityName = "全部";
                    cfg.f_Color = "ffeec2";
                }
                else {
                    cfg = HuYouQualityProxy.Ins.GetDataById(i + 1);
                }
                _item.cfg = cfg;
                this.updateCell(_item.tf, cfg);
                _item.btn.clickHandler = new Laya.Handler(this, this.onItemClickHandler, [cfg, cnt - i - 1]);
                this.btnlist.push(_item);
            }
            this.curIndex = this.btnlist.length - 1;
            this._ui.listcontainer.height = cnt * cellHeight + size * 2;
            this._ui.listcontainer.y = this._ui.listarea.y - this._ui.listcontainer.height;
            this._ui.listarea.on(Laya.Event.CLICK, this, this.onAreaHander);
        }
        updateCell(label, cfg) {
            label.text = cfg.f_SoulQualityName;
            label.color = `#${cfg.f_Color}`;
        }
        onItemClickHandler(cfg, _index) {
            this._ui.listcontainer.visible = false;
            this.selectIndex(_index);
        }
        selectIndex(index) {
            this.curIndex = index;
            this.updateCell(this._ui.listtf, this.btnlist[index].cfg);
            this.updataFuYou();
            this._ui.list1.page = 0;
            this.setBtn();
        }
        onAreaHander() {
            this._ui.listcontainer.visible = !this._ui.listcontainer.visible;
            if (this._ui.listcontainer.visible) {
                this._ui.sanjiao.rotation = 180;
            }
            else {
                this._ui.sanjiao.rotation = 0;
            }
        }
        onAdd() {
            FuJiangModel.Ins.on(FuJiangModel.SELECT_FUJIANG, this, this.updataView);
            HuYouModel.Ins.on(HuYouModel.UPDATA_VIEW, this, this.onUpdataFuYou);
            this._ui.txt_dragdec.visible = false;
            this._ui.lab2.text = MainModel.Ins.mRoleData.getVal(ECellType.DaoQi) + "";
            for (let i = 1; i < 9; i++) {
                this._ui["img_liang" + i].visible = false;
            }
            this._ui.listcontainer.visible = false;
            this._ui.sanjiao.rotation = 0;
            this.curIndex = 0;
            this._selCtl.setData();
        }
        onRemove() {
            FuJiangModel.Ins.off(FuJiangModel.SELECT_FUJIANG, this, this.updataView);
            HuYouModel.Ins.off(HuYouModel.UPDATA_VIEW, this, this.onUpdataFuYou);
            this._selCtl.onRemove();
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        updataView(value) {
            this._data = value;
            this.selectIndex(this.curIndex);
        }
        onUpdataFuYou() {
            this.updataFuYou();
            this.setBtn();
        }
        updataFuYou() {
            if (!this._data)
                return;
            let soltNum = FuJiangFYSlotProxy.Ins.getSlotNum(this._data.cheifId);
            let equipList = HuYouModel.Ins.getBagList(HuYouModel.BagEnmu.sort_FY, this._data.cheifId);
            let skin = FuJiangModel.Ins.getFuJiangSkin(this._data.cheifId);
            if (!this._avatar) {
                this._avatar = AvatarFactory.createAvatarByStSkin(skin, EAvatarAnim.NormalStand, EAvatarDir.Right);
                this._avatar.scale(1.1, 1.1);
                this._ui.heroContainer.addChild(this._avatar);
            }
            else {
                this._avatar.mSkin = skin;
            }
            for (let i = 1; i < 9; i++) {
                if (soltNum >= i) {
                    this._ui["suo" + i].visible = false;
                }
                else {
                    this._ui["suo" + i].visible = true;
                    this._ui["txt_suo" + i].text = "副将" + FuJiangFYSlotProxy.Ins.getCfgByCount(i) + "级解锁";
                }
                if (equipList) {
                    let vo = equipList.find(item => item.pos == i);
                    if (vo) {
                        let voo = new GridItemVo();
                        voo.isNull = false;
                        voo.init(vo);
                        this["_item" + i].setVisible(true);
                        this["_item" + i].setQuaVis(false);
                        this["_item" + i].setBagData(voo, true, true, false, this._data.cheifId);
                        this._ui["img_line" + i].visible = true;
                        this._ui["txt_lv" + i].visible = true;
                        this._ui["txt_lv" + i].text = voo.getName() + " " + "lv." + voo.stItem.level;
                    }
                    else {
                        this["_item" + i].setVisible(false);
                        this._ui["img_line" + i].visible = false;
                        this._ui["txt_lv" + i].visible = false;
                    }
                }
                else {
                    this["_item" + i].setVisible(false);
                    this._ui["img_line" + i].visible = false;
                    this._ui["txt_lv" + i].visible = false;
                }
                if (FuJiangModel.Ins.isDotEquip(i, this._data.cheifId)) {
                    DotManager.addDot(this._ui["red" + i], 30, -10);
                }
                else {
                    DotManager.removeDot(this._ui["red" + i]);
                }
            }
            this.updataList();
            this.setRedTip();
        }
        setRedTip() {
            let arr = FuJiangModel.Ins.getSZNoList();
            for (let i = 0; i < arr.length; i++) {
                if (FuJiangModel.Ins.isDotEquipOne(arr[i].cheifId)) {
                    this._selCtl.addRedTip(i);
                }
                else {
                    this._selCtl.remRedTip(i);
                }
            }
        }
        onBtnAttrClick() {
            E.ViewMgr.Open(EViewType.AttrShow, null, HuYouModel.Ins.getSuitAttrShow(this._data.cheifId));
        }
        onBtnQFClick() {
            E.ViewMgr.Open(EViewType.CIFU);
        }
        onBtnLClick() {
            this._ui.list1.page--;
            this.setBtn();
        }
        onBtnRClick() {
            this._ui.list1.page++;
            this.setBtn();
        }
        setBtn() {
            let index = this._ui.list1.page + 1;
            if (index <= 1) {
                this._ui.btn_l.disabled = true;
            }
            else {
                this._ui.btn_l.disabled = false;
            }
            if (index >= this._ui.list1.totalPage) {
                this._ui.btn_r.disabled = true;
            }
            else {
                this._ui.btn_r.disabled = false;
            }
            if (this._ui.list1.totalPage != 0) {
                this._ui.lab_page.text = index + "/" + this._ui.list1.totalPage;
            }
            else {
                this._ui.lab_page.text = "1/1";
            }
        }
        updataList() {
            let list = [];
            let qua = this.btnlist[this.curIndex].cfg.f_QualityID;
            let bagList = HuYouModel.Ins.getBagList(HuYouModel.BagEnmu.noSort_FY, this._data.cheifId);
            let showList;
            if (qua == 0) {
                showList = bagList;
            }
            else {
                showList = [];
                for (let ele of bagList) {
                    let itemCfg = ItemProxy.Ins.getCfg(ele.id);
                    if (qua == itemCfg.f_qua) {
                        showList.push(ele);
                    }
                }
            }
            for (let i = 0; i < showList.length; i++) {
                let vo = new GridItemVo();
                vo.isNull = false;
                vo.init(showList[i]);
                list.push(vo);
            }
            this._ui.list1.array = list;
        }
    }

    exports.FuJiangViewCtl5 = FuJiangViewCtl5;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangItem6 extends ui.views.fujiang.ui_fujiangItem6UI {
        constructor() {
            super();
            ButtonCtl.Create(this.sp, new Laya.Handler(this, this.onBtnBoxClick), false);
        }
        onBtnClick() {
            if (!FuJiangModel.Ins.isPlayStarAni) {
                FuJiangModel.Ins.oldStar = this._nowNum;
                FuJiangModel.Ins.oldAllStar = FuJiangModel.Ins.getAllStarNum();
                let req = new CheifStarUp_req;
                req.cheifId = this._data.f_cheifid;
                req.num = this._addNum;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onBtnBoxClick() {
            E.ViewMgr.Open(EViewType.FuJiangXQView, null, this._data);
        }
        setData(va) {
            if (!va)
                return;
            let value = va.cfg;
            this._nowNum = va.nowNum;
            this._data = value;
            this._addNum = va.val;
            this.img_qua.skin = FuJiangListProxy.Ins.getQuaSkin(value.f_cheifQuality);
            this.img.skin = FuJiangListProxy.Ins.getFuJiangSkin(value.f_cheifid);
            this.lab_name.text = value.f_cheif;
            this.lab_name.color = "#" + EquipmentQualityProxy.Ins.getByQua(value.f_cheifQuality).f_chiefcolor;
            let val1 = 0;
            let data = FuJiangModel.Ins.getFuJiangCfgById(value.f_cheifid);
            let val = MainModel.Ins.mRoleData.getVal(value.f_piecesid);
            if (data) {
                this.img1.visible = this.lab_star.visible = true;
                this.lab_star.text = "x" + data.star;
                this.box.gray = false;
                val1 = FuJiangStarProxy.Ins.getCfgByStar(data.star).f_upstarcost_new;
                let nextCfg = FuJiangStarProxy.Ins.getCfgByStar(data.star + 1);
                if (nextCfg) {
                    this.lab.text = val + "/" + val1;
                }
                else {
                    this.lab.text = "已满星";
                }
            }
            else {
                this.img1.visible = this.lab_star.visible = false;
                this.box.gray = true;
                val1 = FuJiangStarProxy.Ins.getCfgByStar(0).f_upstarcost_new;
                this.lab.text = val + "/" + val1;
            }
            let num = val / val1;
            if (num > 1) {
                num = 1;
            }
            this.pro.width = num * 136;
            if (va.val) {
                this.redtip.visible = true;
            }
            else {
                this.redtip.visible = false;
            }
        }
    }

    exports.FuJiangItem6 = FuJiangItem6;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangViewCtl6 {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            const tabsSkin = [this._ui.tab1, this._ui.tab2, this._ui.tab3, this._ui.tab4, this._ui.tab5, this._ui.tab6, this._ui.tab7];
            this.tabList = ["全部", "一般", "精良", "稀有", "史诗", "天赐", "神铸"];
            this.tabsCtl = new TabControl();
            this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
            this._ui.list.itemRender = FuJiangItem6;
            this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            ButtonCtl.Create(this._ui.btn_lq, new Laya.Handler(this, this.onBtnLQClick));
            ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this._ui.btn_jb, new Laya.Handler(this, this.onBtnJBClick));
            ButtonCtl.Create(this._ui.btn_sx, new Laya.Handler(this, this.onBtnSXClick));
            this._ui.sp.x = this._ui.sp.x + 7;
            this._ui.sp.y = this._ui.sp.y - 32;
        }
        onBtnJBClick() {
            E.ViewMgr.Open(EViewType.FujiangJBView);
        }
        onBtnSXClick() {
            FuJiangModel.Ins.oldStarArr = [];
            for (let i = 0; i < this._array.length; i++) {
                if (this._array[i].val) {
                    FuJiangModel.Ins.oldStarArr.push(this._array[i]);
                }
            }
            if (FuJiangModel.Ins.oldStarArr.length > 0) {
                let arr = [];
                for (let i = 0; i < FuJiangModel.Ins.oldStarArr.length; i++) {
                    let data = new stCheifStarUp;
                    data.cheifId = FuJiangModel.Ins.oldStarArr[i].cfg.f_cheifid;
                    data.num = FuJiangModel.Ins.oldStarArr[i].val;
                    arr.push(data);
                }
                let req = new CheifStarUpMulti_req;
                req.dataList = arr;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab_name.text = this.tabList[index];
            switch (index) {
                case 0:
                    skin.lab_name.color = "#FCEABE";
                    break;
                case 1:
                    skin.lab_name.color = "#ededed";
                    break;
                case 2:
                    skin.lab_name.color = "#5ea6ff";
                    break;
                case 3:
                    skin.lab_name.color = "#c060f7";
                    break;
                case 4:
                    skin.lab_name.color = "#fff43d";
                    break;
                case 5:
                    skin.lab_name.color = "#f83535";
                    break;
                case 6:
                    skin.lab_name.color = "#1cf2ff";
                    break;
            }
            if (sel) {
                skin.img1.visible = true;
                skin.img2.visible = false;
            }
            else {
                skin.img1.visible = false;
                skin.img2.visible = true;
            }
        }
        onTabSelectHandler(v) {
            if (v == -1)
                return;
            this._array = [];
            let array = [];
            let arr = [];
            let arr1 = [];
            for (let i = 0; i < FuJiangListProxy.Ins.List.length; i++) {
                let cfg = FuJiangListProxy.Ins.List[i];
                if (v == 0 || cfg.f_country == v) {
                    let nowNum = 0;
                    let data = FuJiangModel.Ins.getFuJiangCfgById(cfg.f_cheifid);
                    if (data) {
                        nowNum = data.star;
                    }
                    else {
                        nowNum = 0;
                    }
                    let obj = {};
                    if (nowNum >= FuJiangStarProxy.Ins.maxLv) {
                        obj.cfg = cfg;
                        obj.val = 0;
                        obj.nowNum = nowNum;
                        arr.push(obj);
                        continue;
                    }
                    let lvNum = -1;
                    let num = 0;
                    let val = MainModel.Ins.mRoleData.getVal(cfg.f_piecesid);
                    let starArr = FuJiangStarProxy.Ins.List;
                    for (let j = nowNum; j < starArr.length; j++) {
                        num += starArr[j].f_upstarcost_new;
                        if (val < num) {
                            lvNum = j;
                            break;
                        }
                    }
                    if (lvNum == -1) {
                        lvNum = FuJiangStarProxy.Ins.maxLv;
                    }
                    if (lvNum - nowNum > 0) {
                        obj.cfg = cfg;
                        obj.val = lvNum - nowNum;
                        obj.nowNum = nowNum;
                        array.push(obj);
                    }
                    else {
                        if (data) {
                            obj.cfg = cfg;
                            obj.val = 0;
                            obj.nowNum = nowNum;
                            arr.push(obj);
                        }
                        else {
                            obj.cfg = cfg;
                            obj.val = 0;
                            obj.nowNum = nowNum;
                            arr1.push(obj);
                        }
                    }
                }
            }
            array.sort(this.onSort1);
            arr.sort(this.onSort1);
            arr1.sort(this.onSort1);
            this._array = array.concat(arr.concat(arr1));
            this._ui.list.array = this._array;
            if (FuJiangModel.Ins.isTJStarRedTip(v)) {
                DotManager.addDot(this._ui.btn_sx, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.btn_sx);
            }
        }
        onSort1(a, b) {
            let aCfg = a.cfg;
            let bCfg = b.cfg;
            if (aCfg.f_cheifQuality > bCfg.f_cheifQuality) {
                return -1;
            }
            else if (aCfg.f_cheifQuality < bCfg.f_cheifQuality) {
                return 1;
            }
            else {
                if (aCfg.f_id > bCfg.f_id) {
                    return 1;
                }
                else if (aCfg.f_id < bCfg.f_id) {
                    return -1;
                }
                else {
                    return 0;
                }
            }
        }
        onAdd() {
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_UPDATA, this, this.onUpdataView);
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_SHIQI_UPDATA, this, this.updataPro);
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_STAR, this, this.starAni);
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_JIBAN, this, this.setJBRedTip);
            this.tabsCtl.selectIndex = 0;
            this.updataView();
        }
        onRemove() {
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_UPDATA, this, this.onUpdataView);
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_SHIQI_UPDATA, this, this.updataPro);
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_STAR, this, this.starAni);
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_JIBAN, this, this.setJBRedTip);
            this.tabsCtl.selectIndex = -1;
            FuJiangModel.Ins.isPlayStarAni = false;
        }
        starAni(cheifId) {
            FuJiangModel.Ins.isPlayStarAni = true;
            this._cheifId = cheifId;
            let vo = FuJiangModel.Ins.getFuJiangCfgById(this._cheifId);
            this._numAll = vo.star - FuJiangModel.Ins.oldStar;
            this._num = 0;
            for (let i = 0; i < this._numAll; i++) {
                Laya.timer.once(i * 300, this, this.platEff, null, false);
            }
        }
        platEff() {
            let ani = new SimpleEffect(this._ui.sp, `o/spine/shengxing/shengxing`);
            ani.play(0, false, this, this.effEnd, [ani]);
        }
        effEnd(ani) {
            if (ani) {
                ani.dispose();
                ani = null;
            }
            this._num++;
            if (this._num == this._numAll) {
                FuJiangModel.Ins.isPlayStarAni = false;
                E.ViewMgr.Open(EViewType.FuJiangStar, null, this._cheifId);
            }
        }
        onBtnLQClick() {
            let req = new CheifMoraleReward_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnClick() {
            E.ViewMgr.Open(EViewType.FuJiangSQTip);
        }
        onRenderHandler(item, index) {
            item.setData(item.dataSource);
        }
        updataView() {
            this.updataPro();
            this.setJBRedTip();
        }
        onUpdataView() {
            this.onTabSelectHandler(this.tabsCtl.selectIndex);
            this.updataPro();
            this.setJBRedTip();
        }
        updataPro() {
            let num = FuJiangCollConProxy.Ins.GetDataById(1).f_starlevel;
            this._ui.lab_num.text = FuJiangModel.Ins.getAllStarNum() + "";
            this._ui.lab_dec.text = "每集齐" + num + "颗星可获得奖励";
            this._ui.lab_pro.text = FuJiangModel.Ins.moraleRewardNum + "/" + num;
            if (FuJiangModel.Ins.isAwardRedTip()) {
                this._ui.btn_lq.skin = "remote/fujiang/fj_bx_1.png";
                this._ui.btn_lq.mouseEnabled = true;
                this._ui.pro.width = 544;
                DotManager.addDot(this._ui.btn_lq, 0, 5);
            }
            else {
                this._ui.btn_lq.skin = "remote/fujiang/fj_bx.png";
                this._ui.btn_lq.mouseEnabled = false;
                this._ui.pro.width = FuJiangModel.Ins.moraleRewardNum / num * 544;
                DotManager.removeDot(this._ui.btn_lq);
            }
            for (let i = 0; i < 7; i++) {
                if (FuJiangModel.Ins.isTJStarRedTip(i)) {
                    DotManager.addDot(this._ui["tab" + (i + 1)], 10, -10);
                }
                else {
                    DotManager.removeDot(this._ui["tab" + (i + 1)]);
                }
            }
        }
        setJBRedTip() {
            if (FuJiangModel.Ins.isFJJBRedTip()) {
                DotManager.addDot(this._ui.btn_jb, 15, -15);
            }
            else {
                DotManager.removeDot(this._ui.btn_jb);
            }
        }
    }

    exports.FuJiangViewCtl6 = FuJiangViewCtl6;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangViewUI;
                this.bindClose(this._ui.btn_close);
                const tabsSkin = [this._ui.tab1, this._ui.tab2, this._ui.tab3, this._ui.tab4,
                    this._ui.tab5, this._ui.tab6];
                this.tabList = ["布阵", "助战", "战旗", "坐骑", "福源", "图鉴"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._viewCtl1 = new FuJiangViewCtl1(this._ui.view1);
                this._viewCtl2 = new FuJiangViewCtl2(this._ui.view2);
                this._viewCtl3 = new FuJiangViewCtl33(this._ui.view3);
                this._viewCtl4 = new FuJiangViewCtl4(this._ui.view4);
                this._viewCtl5 = new FuJiangViewCtl5(this._ui.view5);
                this._viewCtl6 = new FuJiangViewCtl6(this._ui.view6);
                this._ui.tab5.visible = false;
                this._ui.tab1.x = 127;
                this._ui.tab2.x = 241;
                this._ui.tab3.x = 358;
                this._ui.tab4.x = 471;
                this._ui.tab6.x = 584;
            }
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab.text = this.tabList[index];
            skin.img_1.skin = "remote/fujiang/fj_gn_" + (index + 1) + ".png";
            skin.img_2.skin = "remote/fujiang/fj_gn_" + (index + 1) + "s.png";
            if (sel) {
                skin.img2.visible = skin.img_1.visible = true;
                skin.img1.visible = skin.img_2.visible = false;
                skin.lab.color = "#F9F0BB";
                MainModel.Ins.event(MainEvent.ButtonCtlClick, tabSkin);
            }
            else {
                skin.img2.visible = skin.img_1.visible = false;
                skin.img1.visible = skin.img_2.visible = true;
                skin.lab.color = "#CAB165";
            }
        }
        onTabSelectHandler(v) {
            if (v == -1)
                return;
            for (let i = 1; i < 7; i++) {
                this["_viewCtl" + i].onRemove();
                this._ui["view" + i].visible = false;
            }
            this["_viewCtl" + (v + 1)].onAdd();
            this._ui["view" + (v + 1)].visible = true;
        }
        onInit() {
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_UPDATA, this, this.onUpdataView);
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_SHIQI_UPDATA, this, this.onUpdataView);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onUpdataView);
            this.tabsCtl.selectIndex = 0;
            this.setRedTip();
            let req = new CheifOnOpen_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_UPDATA, this, this.onUpdataView);
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_SHIQI_UPDATA, this, this.onUpdataView);
            MainModel.Ins.off(MainEvent.ValChange, this, this.onUpdataView);
            this.tabsCtl.selectIndex = -1;
        }
        onUpdataView() {
            Laya.timer.callLater(this, this.setRedTip);
        }
        setRedTip() {
            if (FuJiangModel.Ins.tab1RedTip()) {
                DotManager.addDot(this._ui.tab1);
            }
            else {
                DotManager.removeDot(this._ui.tab1);
            }
            if (FuJiangModel.Ins.tab2RedTip()) {
                DotManager.addDot(this._ui.tab2);
            }
            else {
                DotManager.removeDot(this._ui.tab2);
            }
            if (FuJiangModel.Ins.tab3RedTip()) {
                DotManager.addDot(this._ui.tab3);
            }
            else {
                DotManager.removeDot(this._ui.tab3);
            }
            if (FuJiangModel.Ins.tab4RedTip()) {
                DotManager.addDot(this._ui.tab4);
            }
            else {
                DotManager.removeDot(this._ui.tab4);
            }
            if (FuJiangModel.Ins.tab5RedTip()) {
                DotManager.addDot(this._ui.tab5);
            }
            else {
                DotManager.removeDot(this._ui.tab5);
            }
            if (FuJiangModel.Ins.tab6RedTip()) {
                DotManager.addDot(this._ui.tab6);
            }
            else {
                DotManager.removeDot(this._ui.tab6);
            }
        }
    }

    exports.FuJiangView = FuJiangView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangWSView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangWSViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_xc, new Laya.Handler(this, this.onBtnXCClick));
                ButtonCtl.Create(this._ui.btn_hj, new Laya.Handler(this, this.onBtnHJClick));
                this._itemCtl = new FuJiangItemCtl1(this._ui.item);
            }
        }
        onInit() {
            this._data = this.Data;
            this._itemCtl.setData(this._data);
        }
        onExit() {
        }
        onBtnXCClick() {
            let req = new ChiefIntoBattle_req;
            req.type = 0;
            req.pos = 0;
            req.isChief = this._data.isChief;
            req.cheifId = this._data.cheifId;
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        onBtnHJClick() {
            this.Close();
            E.ViewMgr.Open(EViewType.FuJiangCK, null, [1, this._data]);
        }
    }

    exports.FuJiangWSView = FuJiangWSView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangWSView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangWSView1UI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_qx, new Laya.Handler(this, this.onBtnQXClick));
                ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick));
                this._itemCtl = new FuJiangItemCtl1(this._ui.item);
                this._itemCtl1 = new FuJiangItemCtl1(this._ui.item1);
            }
        }
        onInit() {
            this._type = this.Data[0];
            this._data = this.Data[1];
            this._data1 = this.Data[2];
            this._index = this.Data[3];
            this._itemCtl.setData(this._data);
            this._itemCtl1.setData(this._data1);
        }
        onExit() {
        }
        onBtnQXClick() {
            this.Close();
        }
        onBtnQDClick() {
            if (this._type == 1) {
                let req = new ChiefLosslessReplacement_req;
                req.cheifId = this._data.cheifId;
                req.cheifReplaceId = this._data1.cheifId;
                SocketMgr.Ins.SendMessageBin(req);
            }
            else if (this._type == 2) {
                let req = new ChiefAssist_req;
                req.assistId = this._index;
                req.cheifId = this._data1.cheifId;
                SocketMgr.Ins.SendMessageBin(req);
            }
            this.Close();
            E.ViewMgr.Close(EViewType.FuJiangCK);
        }
    }

    exports.FuJiangWSView1 = FuJiangWSView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangXQView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangXQViewUI;
                this.bindClose(this._ui.btn_close);
                this._ui.list6.itemRender = ui.views.fujiang.ui_fujiangAttrItemUI;
                this._ui.list6.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list7.itemRender = ui.views.fujiang.ui_fujiangAttrItemUI;
                this._ui.list7.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
                this._plusCtl = FontCtlFactory.createPlus();
                this._skillctl1 = new FuJiangSkillCtl(this._ui.item_jn1);
                this._skillctl2 = new FuJiangSkillCtl(this._ui.item_jn2);
                this._skillctl3 = new FuJiangSkillCtl(this._ui.item_jn3);
                this._skillctl4 = new FuJiangSkillCtl(this._ui.item_jn4);
            }
        }
        onRenderHandler(item) {
            item.lab.visible = false;
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
        }
        onRenderHandler1(item, index) {
            item.tf1.color = item.valTf.color = "#FB5AFB";
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            let cCfg = FuJiangListProxy.Ins.getCfgById(this._data.f_cheifid);
            let lvSt = cCfg.f_specialupgrade.split("|")[index];
            let starSt = cCfg.f_specialupstar.split("|")[index];
            let lvNum = parseInt(lvSt.split(":")[1]) * (FuJiangLvProxy.Ins.maxLv - 1);
            let starNum = parseInt(starSt.split(":")[1]) * (FuJiangStarProxy.Ins.maxLv - 1);
            val = val + lvNum + starNum;
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.tf1.color = item.valTf.color = "#FB5AFB";
            item.valTf.text = attrConvert(id, val);
            item.lab.visible = false;
        }
        onInit() {
            this._data = this.Data;
            this.updataView();
        }
        onExit() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        updataView() {
            let cCfg = FuJiangListProxy.Ins.getCfgById(this._data.f_cheifid);
            let qCfg = EquipmentQualityProxy.Ins.getByQua(cCfg.f_cheifQuality);
            this._ui.lab_name.text = cCfg.f_cheif;
            this._ui.lab_qua.text = qCfg.f_chiefinfo;
            this._ui.lab_name.color = this._ui.lab_qua.color = "#" + qCfg.f_chiefcolor;
            this._ui.lab_lv.text = "Lv." + FuJiangLvProxy.Ins.maxLv;
            this._ui.img_zy.skin = FuJiangListProxy.Ins.getProfessionSkin(cCfg.f_cheifClass);
            let zyCfg = FuJiangClasProxy.Ins.getCfgByPre(cCfg.f_cheifClass);
            let stzy = zyCfg.f_chiefclass;
            this._ui.lab_zy.text = stzy;
            if (!this._avatar) {
                let skin = FuJiangModel.Ins.getFuJiangSkin(cCfg.f_cheifid);
                this._avatar = AvatarFactory.createAvatarByStSkin(skin, EAvatarAnim.NormalStand, EAvatarDir.Right);
                this._avatar.scale(1.1, 1.1);
                this._ui.sp.addChild(this._avatar);
            }
            let ii = 0;
            for (let i = 1; i < 5; i++) {
                let cfg = FuJiangSkillProxy.Ins.getCfgById(this._data.f_cheifid);
                let arr = cfg["f_clientskill" + i].split("|");
                let flag = false;
                for (let j = 0; j < arr.length; j++) {
                    if (parseInt(arr[j]) > 0) {
                        flag = true;
                        break;
                    }
                }
                if (flag) {
                    ii++;
                    this._ui["item_jn" + i].visible = true;
                    this["_skillctl" + i].setData(this._data.f_cheifid, i, FuJiangSkillLvProxy.Ins.maxLv, FuJiangStarProxy.Ins.maxLv);
                }
                else {
                    this._ui["item_jn" + i].visible = false;
                }
            }
            if (ii == 2) {
                this._ui.box.x = 168;
            }
            else if (ii == 3) {
                this._ui.box.x = 85;
            }
            else {
                this._ui.box.x = 0;
            }
            this._ui.lab_snum.text = "x" + FuJiangStarProxy.Ins.maxLv;
            this._ui.list6.array = cCfg.f_inherit.split("|");
            this._ui.list7.array = cCfg.f_specialattrinit.split("|");
            this._ui.img_plusCon.visible = false;
        }
    }

    exports.FuJiangXQView = FuJiangXQView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJIiangZQGHView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangZQGHViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_qx, new Laya.Handler(this, this.onBtnXCClick));
                ButtonCtl.Create(this._ui.btn_gm, new Laya.Handler(this, this.onBtnGMClick));
                ButtonCtl.Create(this._ui.btn_yjgm, new Laya.Handler(this, this.onBtnYJGMClick));
                this._ui.list.itemRender = ui.views.fujiang.ui_fujiangAttrItem9UI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list1.itemRender = ui.views.fujiang.ui_fujiangZQItemUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
                this._ui.list1.selectEnable = true;
            }
        }
        onBtnXCClick() {
            let cfg = this._ui.list1.selectedItem;
            if (cfg) {
                let req = new ChiefChangeFlag_req;
                req.id = cfg.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onBtnGMClick() {
            let cfg = this._ui.list1.selectedItem;
            if (cfg) {
                let vo = new ItemVo;
                vo.cfgId = parseInt(cfg.f_flagprice.split("-")[0]);
                vo.count = parseInt(cfg.f_flagprice.split("-")[1]);
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, `确定使用${vo.count}个${vo.getName()}购买?`, new Laya.Handler(this, () => {
                    let req = new ChiefBuyFlag_req;
                    req.id = cfg.f_id;
                    SocketMgr.Ins.SendMessageBin(req);
                }));
            }
        }
        onBtnYJGMClick() {
            let st = System_RefreshTimeProxy.Ins.getVal(85);
            let arr = st.split("|");
            let num = arr[1].split("-")[1];
            E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, "是否花费" + num + "元宝一键购买全部战旗？", new Laya.Handler(this, () => {
                let req = new ChiefBuyFlag_req;
                req.id = 0;
                SocketMgr.Ins.SendMessageBin(req);
            }));
        }
        onRenderHandler(item, index) {
            item.tf1.color = item.valTf.color = "#FB5AFB";
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            let cfg = this._ui.list1.selectedItem;
            let uCfg = FuJiangFlagUpgradeProxy.Ins.getCfgById(FuJiangModel.Ins.flagSerial);
            let lvSt = cfg.f_flag_defence_upgrade_dentifty.split("|")[index];
            let lvNum = parseInt(lvSt.split(":")[1]) * (uCfg.f_flagstage - 1);
            let val1 = val + lvNum;
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val1);
        }
        onRenderHandler1(item, index) {
            if (this._ui.list1.selectedIndex == -1)
                return;
            let cfg = item.dataSource;
            item.icon.skin = FuJiangFlagListProxy.Ins.getFlagIcon(cfg.f_id);
            if (cfg.f_id == FuJiangModel.Ins.flagId) {
                item.ck.visible = true;
            }
            else {
                item.ck.visible = false;
            }
            if (FuJiangModel.Ins.flagList.indexOf(cfg.f_id) == -1) {
                item.lockMask.visible = true;
            }
            else {
                item.lockMask.visible = false;
            }
            if (index == this._ui.list1.selectedIndex) {
                item.sel.visible = true;
                this._ui.icon.skin = FuJiangFlagListProxy.Ins.getFlagIcon(cfg.f_id);
                this._ui.lab_name.text = cfg.f_flag;
                if (cfg.f_flag_defence_dentifty != "") {
                    this._ui.list.array = cfg.f_flag_defence_dentifty.split("|");
                }
                else {
                    this._ui.list.array = [];
                }
                this._ui.btn_gm.visible = false;
                this._ui.btn_yjgm.visible = false;
                if (cfg.f_id == FuJiangModel.Ins.flagId) {
                    this._ui.lab_sel.visible = true;
                    this._ui.btn_qx.visible = false;
                }
                else {
                    this._ui.lab_sel.visible = false;
                    if (FuJiangModel.Ins.flagList.indexOf(cfg.f_id) == -1) {
                        this._ui.btn_qx.visible = false;
                        if (t_Platform.Ins.isOneLvUp) {
                            this._ui.btn_yjgm.visible = true;
                            let st = System_RefreshTimeProxy.Ins.getVal(85);
                            let arr = st.split("|");
                            this._ui.lab_num.text = arr[1].split("-")[1];
                            this._ui.lab_num1.text = arr[0].split("-")[1];
                            this._ui.img1.skin = IconUtils.getIconByCfgId(parseInt(arr[0].split("-")[0]));
                        }
                        else {
                            this._ui.btn_gm.visible = true;
                        }
                    }
                    else {
                        this._ui.btn_qx.visible = true;
                    }
                }
            }
            else {
                item.sel.visible = false;
            }
        }
        onInit() {
            FuJiangModel.Ins.on(FuJiangModel.FLAG_LIST, this, this.onupdataView);
            FuJiangModel.Ins.on(FuJiangModel.FLAG_ID, this, this.onupdataView);
            this.updataView();
        }
        onExit() {
            FuJiangModel.Ins.off(FuJiangModel.FLAG_LIST, this, this.onupdataView);
            FuJiangModel.Ins.off(FuJiangModel.FLAG_ID, this, this.onupdataView);
            this._ui.list1.selectedIndex = -1;
        }
        onupdataView() {
            this._ui.list1.refresh();
        }
        updataView() {
            let arr = FuJiangFlagListProxy.Ins.List;
            this._ui.list1.array = arr;
            let index = 0;
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].f_id == FuJiangModel.Ins.flagId) {
                    index = i;
                    break;
                }
            }
            this._ui.list1.selectedIndex = index;
        }
    }

    exports.FuJIiangZQGHView = FuJIiangZQGHView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FujiangJBSXView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangJBSXViewUI;
                this.bindClose(this._ui.btn_close);
                this._ui.list.itemRender = ui.views.fujiang.ui_fujiangAttrItem6UI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onRenderHandler(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
        }
        onInit() {
            let arr = [];
            for (let i = 0; i < FuJiangModel.Ins.jbDataList.length; i++) {
                if (FuJiangModel.Ins.jbDataList[i].id) {
                    let cfg = FuJiangTrammelsChiefProxy.Ins.GetDataById(FuJiangModel.Ins.jbDataList[i].id);
                    let attrArr = cfg.f_Attribute.split(":");
                    let fjArr = cfg.f_ChiefID.split("|");
                    let star = 0;
                    for (let j = 0; j < fjArr.length; j++) {
                        let fjCfg = FuJiangModel.Ins.getFuJiangCfgById(parseInt(fjArr[j]));
                        if (fjCfg) {
                            star += fjCfg.star;
                        }
                    }
                    let val = parseInt(attrArr[1]);
                    val += star * cfg.f_Upgrade;
                    arr.push(attrArr[0] + ":" + val);
                }
            }
            this._ui.list.array = arr;
        }
        onExit() {
        }
    }

    exports.FujiangJBSXView = FujiangJBSXView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FujiangJBItem extends ui.views.fujiang.ui_fujiangJBItemUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClick);
            ButtonCtl.Create(this.img_lock, new Laya.Handler(this, this.onBtnLockClick), false);
        }
        onBtnLockClick() {
            let arr = System_RefreshTimeProxy.Ins.getVal(51).split("-");
            MainModel.Ins.queryMsg("解锁该格子", parseInt(arr[0]), parseInt(arr[1]), EQuickMsg.NULL, new Laya.Handler(this, this.buyEndHandler));
        }
        buyEndHandler() {
            let req = new TrammelsChiefUnlock_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onClick() {
            if (this._data) {
                if (this._data.id) {
                    let req = new TrammelsChief_req;
                    req.id = 0;
                    req.pos = this._data.pos;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            if (this._data.id) {
                this.img_lock.visible = false;
                let cfg = FuJiangTrammelsChiefProxy.Ins.GetDataById(this._data.id);
                this.quality.skin = IconUtils.getQuaIcon(cfg.f_TrammelsQuality);
                if (cfg.f_TrammelsName.length > 3) {
                    this.lab.visible = false;
                    this.lab1.visible = true;
                    this.lab1.text = cfg.f_TrammelsName;
                }
                else {
                    this.lab.visible = true;
                    this.lab.text = cfg.f_TrammelsName;
                    this.lab1.visible = false;
                }
            }
            else {
                this.quality.skin = "remote/common/base/jiangli1.png";
                this.lab.visible = false;
                this.lab1.visible = false;
                if (this._data.state) {
                    this.img_lock.visible = false;
                }
                else {
                    this.img_lock.visible = true;
                }
            }
        }
    }

    exports.FujiangJBItem = FujiangJBItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FujiangJBItem2 extends ui.views.fujiang.ui_fujiangJBItem2UI {
        constructor() {
            super();
            this._starCtl = new FuJiangStarCtl(this.star);
        }
        setData(value) {
            let cCfg = FuJiangListProxy.Ins.getCfgById(parseInt(value));
            this.img_qua.skin = FuJiangListProxy.Ins.getQuaSkin(cCfg.f_cheifQuality);
            this.img.skin = FuJiangListProxy.Ins.getFuJiangSkin(cCfg.f_cheifid);
            this.lab_name.text = cCfg.f_cheif;
            this.lab_name.color = "#" + EquipmentQualityProxy.Ins.getByQua(cCfg.f_cheifQuality).f_chiefcolor;
            let fjCfg = FuJiangModel.Ins.getFuJiangCfgById(parseInt(value));
            if (fjCfg) {
                this.star.visible = true;
                this._starCtl.setStar(fjCfg.star);
                this.box.gray = false;
            }
            else {
                this.box.gray = true;
                this.star.visible = false;
            }
        }
    }

    exports.FujiangJBItem2 = FujiangJBItem2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FujiangJBItem1 extends ui.views.fujiang.ui_fujiangJBItem1UI {
        constructor() {
            super();
            this.list.itemRender = FujiangJBItem2;
            this.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            ButtonCtl.Create(this.btn_qd, new Laya.Handler(this, this.onBtnQDClick));
        }
        onBtnQDClick() {
            if (this._data) {
                E.ViewMgr.Open(EViewType.FujiangJBZBView, null, this._data.f_id);
            }
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let co = "#" + EquipmentQualityProxy.Ins.getByQua(value.f_TrammelsQuality).f_Color;
            let fjArr = value.f_ChiefID.split("|");
            let star = 0;
            for (let i = 0; i < fjArr.length; i++) {
                let fjCfg = FuJiangModel.Ins.getFuJiangCfgById(parseInt(fjArr[i]));
                if (fjCfg) {
                    star += fjCfg.star;
                }
            }
            this.lab_name.text = value.f_TrammelsName;
            this.lab_name.color = co;
            this.lab_num.text = "(" + star + "/" + value.f_Star + ")";
            this.lab_num.color = co;
            let attrArr = value.f_Attribute.split(":");
            let id = parseInt(attrArr[0]);
            let val = parseInt(attrArr[1]);
            this.lab_attr.text = MainModel.Ins.getAttrNameIdByID(id) + ":" + attrConvert(id, val);
            this.lab_attr.color = co;
            this.lab_ew.color = co;
            let val1 = star * value.f_Upgrade;
            this.lab_attr1.text = attrConvert(id, val1);
            this.lab_attr1.color = co;
            this.list.array = fjArr;
            let vo = FuJiangModel.Ins.jbDataList.find(ele => ele.id == value.f_id);
            if (vo) {
                this.lab_btn.text = "已装备";
                this.btn_qd.skin = "remote/common/base/anniu_blue1.png";
                this.btn_qd.mouseEnabled = false;
                this.btn_qd.gray = false;
            }
            else {
                this.lab_btn.text = "装备";
                this.btn_qd.skin = "remote/common/base/anniu_green.png";
                if (FuJiangModel.Ins.isFJJBJH(value)) {
                    this.btn_qd.mouseEnabled = true;
                    this.btn_qd.gray = false;
                }
                else {
                    this.btn_qd.mouseEnabled = false;
                    this.btn_qd.gray = true;
                }
            }
        }
    }

    exports.FujiangJBItem1 = FujiangJBItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FujiangJBView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangJBViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick));
                ButtonCtl.Create(this._ui.btn_attr, new Laya.Handler(this, this.onBtnAttrClick));
                ButtonCtl.Create(this._ui.btn_zm, new Laya.Handler(this, this.onBtnZMClick));
                this._ui.list.itemRender = FujiangJBItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list1.itemRender = FujiangJBItem1;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("fjjbTitle", "fjjbDec");
        }
        onBtnAttrClick() {
            E.ViewMgr.Open(EViewType.FujiangJBSXView);
        }
        onBtnZMClick() {
            E.ViewMgr.Open(EViewType.FuJiangChouKa);
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onRenderHandler1(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_JIBAN, this, this.updataView);
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_UPDATA, this, this.updataView);
            this.updataView();
        }
        onExit() {
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_JIBAN, this, this.updataView);
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_UPDATA, this, this.updataView);
        }
        updataView() {
            this._ui.list.array = FuJiangModel.Ins.jbDataList;
            let arr = FuJiangTrammelsChiefProxy.Ins.List;
            let array = [];
            let array1 = [];
            let array2 = [];
            for (let i = 0; i < arr.length; i++) {
                let vo = FuJiangModel.Ins.jbDataList.find(ele => ele.id == arr[i].f_id);
                if (vo) {
                    array.push(arr[i]);
                    continue;
                }
                if (FuJiangModel.Ins.isFJJBJH(arr[i])) {
                    array1.push(arr[i]);
                    continue;
                }
                array2.push(arr[i]);
            }
            this._ui.list1.array = array.concat(array1).concat(array2);
        }
    }

    exports.FujiangJBView = FujiangJBView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FujiangJBZBItem extends ui.views.fujiang.ui_fujiangZBJBItemUI {
        constructor() {
            super();
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            this.on(Laya.Event.CLICK, this, this.onClick);
        }
        onAdd() {
            FuJiangModel.Ins.on(FuJiangModel.SELECT_JB_POS, this, this.setXZ);
        }
        onRemove() {
            FuJiangModel.Ins.off(FuJiangModel.SELECT_JB_POS, this, this.setXZ);
        }
        onClick() {
            if (this._data) {
                if (this._data.state) {
                    FuJiangModel.Ins.jbPos = this._data.pos;
                    FuJiangModel.Ins.event(FuJiangModel.SELECT_JB_POS);
                }
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            if (this._data.id) {
                this.img_lock.visible = false;
                let cfg = FuJiangTrammelsChiefProxy.Ins.GetDataById(this._data.id);
                this.quality.skin = IconUtils.getQuaIcon(cfg.f_TrammelsQuality);
                if (cfg.f_TrammelsName.length > 3) {
                    this.lab.visible = false;
                    this.lab1.visible = true;
                    this.lab1.text = cfg.f_TrammelsName;
                }
                else {
                    this.lab.visible = true;
                    this.lab.text = cfg.f_TrammelsName;
                    this.lab1.visible = false;
                }
            }
            else {
                this.quality.skin = "remote/common/base/jiangli1.png";
                this.lab.visible = false;
                this.lab1.visible = false;
                if (this._data.state) {
                    this.img_lock.visible = false;
                }
                else {
                    this.img_lock.visible = true;
                }
            }
            this.setXZ();
        }
        setXZ() {
            if (this._data.pos == FuJiangModel.Ins.jbPos) {
                this.img_xz.visible = true;
            }
            else {
                this.img_xz.visible = false;
            }
        }
    }

    exports.FujiangJBZBItem = FujiangJBZBItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FujiangJBZBView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangZBJBViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.Create(this._ui.btn_qx, new Laya.Handler(this, this.onBtnQXClick));
                ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick));
                this._ui.list.itemRender = FujiangJBZBItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onBtnQXClick() {
            this.Close();
        }
        onBtnQDClick() {
            let req = new TrammelsChief_req;
            req.id = parseInt(this.Data);
            req.pos = FuJiangModel.Ins.jbPos;
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            FuJiangModel.Ins.on(FuJiangModel.SELECT_JB_POS, this, this.setBtn);
            FuJiangModel.Ins.jbPos = 0;
            for (let i = 0; i < FuJiangModel.Ins.jbDataList.length; i++) {
                let vo = FuJiangModel.Ins.jbDataList[i];
                if (vo.state && vo.id == 0) {
                    FuJiangModel.Ins.jbPos = i;
                    break;
                }
            }
            this._ui.list.array = FuJiangModel.Ins.jbDataList;
            this.setBtn();
        }
        onExit() {
            FuJiangModel.Ins.off(FuJiangModel.SELECT_JB_POS, this, this.setBtn);
        }
        setBtn() {
            let vo = FuJiangModel.Ins.jbDataList.find(ele => ele.pos == FuJiangModel.Ins.jbPos);
            if (vo.id) {
                this._ui.lab_qd.text = "替换";
            }
            else {
                this._ui.lab_qd.text = "装备";
            }
        }
    }

    exports.FujiangJBZBView = FujiangJBZBView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FujiangSCZZView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('fujiang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fujiang.ui_fujiangSCZZViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
                this._ui.list.itemRender = ui.views.fujiang.ui_fujiangSCZZItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onBtnClick() {
            E.ViewMgr.openHelpView("sczzTitle", "sczzDec");
        }
        onRenderHandler(item, index) {
            if (index == this._index) {
                item.bg.visible = true;
            }
            else {
                item.bg.visible = false;
            }
            let cfg = item.dataSource;
            item.lab_name.text = "总等级达到" + cfg.f_Level + "级";
            let arr = cfg.f_Attribute.split("|");
            for (let i = 0; i < arr.length; i++) {
                let id = parseInt(arr[i].split(":")[0]);
                let val = parseInt(arr[i].split(":")[1]);
                item["lab" + (i + 1)].text = MainModel.Ins.getAttrNameIdByID(id) + "+" + attrConvert(id, val);
            }
        }
        onInit() {
            let arr = FuJiangModel.Ins.getSZNoList();
            let lv = 0;
            for (let i = 0; i < arr.length; i++) {
                lv += arr[i].level;
            }
            this._index = FuJiangTrammelsStageProxy.Ins.getCfgByLv(lv);
            this._ui.lab_lv.text = lv + "";
            this._ui.list.array = FuJiangTrammelsStageProxy.Ins.List;
            if (this._index > -1) {
                this._ui.list.scrollTo(this._index);
            }
            else {
                this._ui.list.scrollTo(0);
            }
        }
        onExit() {
        }
    }

    exports.FujiangSCZZView = FujiangSCZZView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new FuJiangModule();
            }
            return this._ins;
        }
        onInitCallBack() { }
        initMsg() {
            this.Reg(new FuJiangView(EViewType.FuJiang));
            this.Reg(new FuJiangChouKaView(EViewType.FuJiangChouKa));
            this.Reg(new FuJiangGMView(EViewType.FuJiangGouMai));
            this.Reg(new FuJiangHDView(EViewType.FuJiangHuoDe));
            this.Reg(new FuJiangWSView(EViewType.FuJiangWuSun));
            this.Reg(new FuJiangCKView(EViewType.FuJiangCK));
            this.Reg(new FuJiangWSView1(EViewType.FuJiangWuSun1));
            this.Reg(new FuJiangPYView(EViewType.FuJiangPY));
            this.Reg(new FuJiangCZView(EViewType.FuJiangCZ));
            this.Reg(new FuJiangStarView(EViewType.FuJiangStar));
            this.Reg(new FuJiangSkillTip(EViewType.FuJiangSkillTip));
            this.Reg(new FuJiangSQTip(EViewType.FuJiangSQTip));
            this.Reg(new FuJiangXQView(EViewType.FuJiangXQView));
            this.Reg(new FuJiangMountCKView(EViewType.FuJiangMountCKView));
            this.Reg(new FuJiangAttrView(EViewType.FuJiangAttrView));
            this.Reg(new FuJIiangZQGHView(EViewType.FuJIiangZQGHView));
            this.Reg(new FuJiangStarView1(EViewType.FuJiangStarView1));
            this.Reg(new FuJiangHDView1(EViewType.FuJiangHDView1));
            this.Reg(new FujiangSCZZView(EViewType.FujiangSCZZView));
            this.Reg(new FujiangJBSXView(EViewType.FujiangJBSXView));
            this.Reg(new FujiangJBView(EViewType.FujiangJBView));
            this.Reg(new FujiangJBZBView(EViewType.FujiangJBZBView));
            this.Reg(new FuJiangAttrView1(EViewType.FuJiangAttrView1));
            this.Reg(new FuJiangGLTip(EViewType.FuJiangGLTip));
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onMainViewInit);
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_UPDATA, this, this.onMainViewInit);
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_SHIQI_UPDATA, this, this.onMainViewInit);
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_JIBAN, this, this.onMainViewInit);
            E.MsgMgr.AddMsg(MSGID.ChiefInit, this.ChiefInit, this);
            E.MsgMgr.AddMsg(MSGID.ChiefMainChange, this.ChiefMainChange, this);
            E.MsgMgr.AddMsg(MSGID.RecruitChief, this.RecruitChief, this);
            E.MsgMgr.AddMsg(MSGID.BuyMilitaryPledge, this.BuyMilitaryPledge, this);
            E.MsgMgr.AddMsg(MSGID.CheifStarUp, this.CheifStarUp, this);
            E.MsgMgr.AddMsg(MSGID.CheifMoraleReward, this.CheifMoraleReward, this);
            E.MsgMgr.AddMsg(MSGID.MountChief, this.MountChief, this);
            E.MsgMgr.AddMsg(MSGID.TrammelsChiefInit, this.TrammelsChiefInit, this);
            E.MsgMgr.AddMsg(MSGID.TrammelsChief, this.TrammelsChief, this);
            E.MsgMgr.AddMsg(MSGID.ChiefBuyFlag, this.ChiefBuyFlag, this);
            E.MsgMgr.AddMsg(MSGID.ChiefChangeFlag, this.ChiefChangeFlag, this);
            E.MsgMgr.AddMsg(MSGID.ChiefUpgradeFlag, this.ChiefUpgradeFlag, this);
            E.MsgMgr.AddMsg(MSGID.CheifStarUpMulti, this.CheifStarUpMulti, this);
            E.MsgMgr.AddMsg(MSGID.DrawLevelChange, this.DrawLevelChange, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setRedTip);
        }
        setRedTip() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.FuJiang)) {
                if (FuJiangModel.Ins.isFuJiangRedTip()) {
                    MainModel.Ins.funcSetRed(EFuncDef.FuJiang, true);
                }
                else {
                    MainModel.Ins.funcSetRed(EFuncDef.FuJiang, false);
                }
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.FuJiang, false);
            }
            if (FuJiangModel.Ins.isFJJBRedTip()) {
                MainModel.Ins.funcSetRed(EFuncDef.FuJiangJB, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.FuJiangJB, false);
            }
        }
        ChiefInit(value) {
            FuJiangModel.Ins.fujiangList = value.dataList;
            FuJiangModel.Ins.nextFreeUnix = value.nextFreeUnix;
            FuJiangModel.Ins.freeCount = value.freeCount;
            FuJiangModel.Ins.moraleRewardNum = value.moraleRewardNum;
            FuJiangModel.Ins.isNewServer = value.isNewServer;
            FuJiangModel.Ins.flagList = value.flagList;
            FuJiangModel.Ins.flagId = value.flag;
            FuJiangModel.Ins.flagSerial = value.flagSerial;
            FuJiangModel.Ins.flagFight = value.flagFight;
            FuJiangModel.Ins.drawLevel = value.drawLevel;
            FuJiangModel.Ins.curDrawExp = value.curDrawExp;
        }
        ChiefMainChange(value) {
            for (let i = 0; i < value.dataList.length; i++) {
                let index = FuJiangModel.Ins.fujiangList.findIndex(ele => ele.cheifId == value.dataList[i].cheifId);
                if (index != -1) {
                    FuJiangModel.Ins.fujiangList[index] = value.dataList[i];
                }
                else {
                    FuJiangModel.Ins.fujiangList.push(value.dataList[i]);
                }
            }
            FuJiangModel.Ins.changefjList = value.dataList;
            FuJiangModel.Ins.nextFreeUnix = value.nextFreeUnix;
            FuJiangModel.Ins.freeCount = value.freeCount;
            FuJiangModel.Ins.event(FuJiangModel.FUJIANG_UPDATA);
        }
        RecruitChief(value) {
            FuJiangModel.Ins.recruitChief = value.dataList;
            FuJiangModel.Ins.event(FuJiangModel.FUJIANG_ZHAOMU_UPDATA);
        }
        BuyMilitaryPledge(value) {
            E.ViewMgr.Close(EViewType.FuJiangGouMai);
        }
        CheifStarUp(value) {
            if (E.ViewMgr.IsOpen(EViewType.FuJiangPY)) {
                E.ViewMgr.Open(EViewType.FuJiangStar, null, value.cheifId);
            }
            else {
                FuJiangModel.Ins.event(FuJiangModel.FUJIANG_STAR, value.cheifId);
            }
        }
        CheifMoraleReward(value) {
            FuJiangModel.Ins.moraleRewardNum = value.moraleRewardNum;
            FuJiangModel.Ins.event(FuJiangModel.FUJIANG_SHIQI_UPDATA);
        }
        MountChief(value) {
            let _zqModel = ZuoQiModel.Ins;
            FuJiangModel.Ins.mountRelationList = value.dataList;
            let l = value.dataList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let findCell = _zqModel.getMountVoById(cell.mountId);
                if (findCell) {
                    findCell.equipVo = cell.equipItem;
                    findCell.washList = cell.refinements;
                    findCell.washCanLock = cell.canLock;
                    findCell.curVo = _zqModel.getRideVo(cell.mountId);
                }
                else {
                    let vo = ItemViewFactory.createRideVo(cell);
                    _zqModel.rideVoList.push(vo);
                }
            }
            FuJiangModel.Ins.event(FuJiangModel.FUJIANG_MOUNT_UPDATA);
            _zqModel.event(ZuoQiEvent.MountRefinement);
        }
        TrammelsChiefInit(value) {
            FuJiangModel.Ins.jbDataList = value.dataList;
        }
        TrammelsChief(value) {
            let vo = FuJiangModel.Ins.jbDataList.find(ele => ele.pos == value.data.pos);
            if (vo) {
                vo.id = value.data.id;
                vo.state = value.data.state;
            }
            FuJiangModel.Ins.event(FuJiangModel.FUJIANG_JIBAN);
        }
        ChiefBuyFlag(value) {
            FuJiangModel.Ins.flagList = value.dataList;
            FuJiangModel.Ins.event(FuJiangModel.FLAG_LIST);
        }
        ChiefChangeFlag(value) {
            FuJiangModel.Ins.flagId = value.id;
            FuJiangModel.Ins.flagFight = value.flagFight;
            FuJiangModel.Ins.event(FuJiangModel.FLAG_ID);
        }
        ChiefUpgradeFlag(value) {
            FuJiangModel.Ins.flagSerial = value.flagSerial;
            FuJiangModel.Ins.flagFight = value.flagFight;
            FuJiangModel.Ins.event(FuJiangModel.FLAG_LEVEL);
        }
        CheifStarUpMulti(value) {
            E.ViewMgr.Open(EViewType.FuJiangStarView1);
        }
        DrawLevelChange(value) {
            FuJiangModel.Ins.drawLevel = value.drawLevel;
            FuJiangModel.Ins.curDrawExp = value.curDrawExp;
            FuJiangModel.Ins.event(FuJiangModel.CHOUKA_LEVEL);
        }
    }

    exports.FuJiangModule = FuJiangModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GuaJiCfgProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new GuaJiCfgProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_AFK_Config";
        }
    }
    class GuaJiRewardsProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new GuaJiRewardsProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_AFK_Rewards";
        }
        getCfgByLv(lv) {
            let l = this.List;
            return l.find(item => item.f_AFKRewardsLevel == lv);
        }
    }
    class GuaJiPackProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new GuaJiPackProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_AFK_Pack";
        }
    }

    exports.GuaJiCfgProxy = GuaJiCfgProxy;
    exports.GuaJiPackProxy = GuaJiPackProxy;
    exports.GuaJiRewardsProxy = GuaJiRewardsProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GuaJiKuaiSuZC extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas('guaji.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.guaji.ui_kuaisuzhenchaUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.Create(this._ui.btn_yb, new Laya.Handler(this, this.onBtnYBClick));
                ButtonCtl.Create(this._ui.btn_mf, new Laya.Handler(this, this.onBtnMFClick));
                this._ui.list.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.itemRender);
                this.timeCtl = new TimeCtl(this._ui.lab_time);
                if (t_Platform.Ins.isADclose) {
                    this._ui.freeCon.visible = false;
                    this._ui.goldCon.x = 189;
                }
            }
        }
        onInit() {
            GuaJiModel.Ins.on(GuaJiModel.UPDATA_KUAISUVIEW, this, this.updataView);
            GuaJiModel.Ins.on(GuaJiModel.UPDATA_CD_TIME, this, this.updataView);
            this.updataView();
        }
        onExit() {
            GuaJiModel.Ins.off(GuaJiModel.UPDATA_KUAISUVIEW, this, this.updataView);
            GuaJiModel.Ins.off(GuaJiModel.UPDATA_CD_TIME, this, this.updataView);
            this.timeCtl.stop();
        }
        onBtnYBClick() {
            if (GuaJiModel.Ins.fastData.fastAfkBuyNum >= GuaJiCfgProxy.Ins.GetDataById(1).f_QuickAFKTimes) {
                E.ViewMgr.ShowMidError("今日购买已达上限,请明日再来");
                return;
            }
            let req = new AfkFast_req();
            req.type = 1;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnMFClick() {
            if (GuaJiModel.Ins.fastData.fastAfkVideoNum >= GuaJiCfgProxy.Ins.GetDataById(1).f_WatchTimes) {
                E.ViewMgr.ShowMidError("今日观看已达上限,请明日再来");
                return;
            }
            E.sendTrack("ad_watch", { type: "tanxian" });
            E.sdk.lookVideo((type) => {
                LogSys$1.Log('type: ' + type);
                switch (type) {
                    case 0:
                        break;
                    case 1:
                        E.sendTrack("ad_finish", { type: "tanxian" });
                        let req = new AdWatchDone_req;
                        req.pos = GuaJiModel.CDEnmu.GuaJi;
                        SocketMgr.Ins.SendMessageBin(req);
                        break;
                }
            });
        }
        itemRender(item) {
            ItemViewFactory.refreshSlot(item, item.dataSource);
        }
        updataView() {
            this._cfg = GuaJiRewardsProxy.Ins.getCfgByLv(GuaJiModel.Ins.mianData.level);
            let count = GuaJiCfgProxy.Ins.GetDataById(1).f_QuickAFK / this._cfg.f_RewardsInterval;
            let array = [];
            let arr = this._cfg.f_AFKReward.split("|");
            for (let ele of arr) {
                let vo = new ItemVo();
                vo.cfgId = parseInt(ele.split("-")[0]);
                vo.count = parseInt(ele.split("-")[1]) * count;
                array.push(vo);
            }
            this._ui.list.array = array;
            let num2 = GuaJiCfgProxy.Ins.GetDataById(1).f_QuickAFKTimes - GuaJiModel.Ins.fastData.fastAfkBuyNum;
            if (num2) {
                this._ui.btn_yb.disabled = false;
            }
            else {
                this._ui.btn_yb.disabled = true;
            }
            this._ui.lab2.text = num2 + "";
            if (GuaJiModel.Ins.fastData.fastAfkBuyNum == 0) {
                this._ui.labFree.visible = true;
                this._ui.lab_yb.visible = this._ui.img_yb.visible = false;
                DotManager.addDot(this._ui.btn_yb);
            }
            else {
                this._ui.labFree.visible = false;
                this._ui.lab_yb.visible = this._ui.img_yb.visible = true;
                let num = GuaJiCfgProxy.Ins.GetDataById(1).f_QuickAFKCost.split("-")[1];
                let n = GuaJiCfgProxy.Ins.GetDataById(1).f_QuickAFKCostGrow.split("-")[1];
                this._ui.lab_yb.text = parseInt(num) + (GuaJiModel.Ins.fastData.fastAfkBuyNum - 1) * parseInt(n) + "";
                DotManager.removeDot(this._ui.btn_yb);
            }
            if (MainModel.Ins.verify) {
                this._ui.btn_mf.visible = false;
                this._ui.lab_cishu.visible = false;
                this._ui.lab1.visible = false;
                this._ui.lab_time.visible = false;
            }
            else {
                this._ui.btn_mf.visible = true;
                this.setCDBtn();
            }
        }
        setCDBtn() {
            let num1 = GuaJiCfgProxy.Ins.GetDataById(1).f_WatchTimes - GuaJiModel.Ins.fastData.fastAfkVideoNum;
            this._ui.lab1.text = num1 + "";
            if (num1) {
                let time = GuaJiModel.Ins.getstAdCdByType(GuaJiModel.CDEnmu.GuaJi).endUnix - TimeUtil.serverTime;
                if (time > 0) {
                    this._ui.lab_cishu.visible = false;
                    this._ui.lab1.visible = false;
                    this._ui.lab_time.visible = true;
                    this._ui.btn_mf.disabled = true;
                    this.timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                }
                else {
                    this.timeCtl.stop();
                    this.endTime();
                }
            }
            else {
                this._ui.btn_mf.disabled = true;
                this._ui.lab_cishu.visible = true;
                this._ui.lab1.visible = true;
                this._ui.lab_time.visible = false;
                this.timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(time_str + "后刷新");
        }
        endTime() {
            this._ui.lab_cishu.visible = true;
            this._ui.lab1.visible = true;
            this._ui.lab_time.visible = false;
            this._ui.btn_mf.disabled = false;
        }
    }

    exports.GuaJiKuaiSuZC = GuaJiKuaiSuZC;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TimeCtlMs extends TimeCtl {
        constructor(tf) {
            super(tf);
        }
        start(ms, update = null, end = null) {
            super.start(ms, update, end);
        }
        subTicket() {
            this.ticket -= 1000;
        }
    }

    exports.TimeCtlMs = TimeCtlMs;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GuaJiView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('guaji.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.guaji.ui_guajiUI;
                this.bindClose(this._ui.close1);
                let tqBtnCtl = ButtonCtl.Create(this._ui.img_tq, new Laya.Handler(this, this.onBtnTQClick));
                this.btnList.push(ButtonCtl.Create(this._ui.btn_lq, new Laya.Handler(this, this.onBtnLQClick)), ButtonCtl.Create(this._ui.btn_time, new Laya.Handler(this, this.onBtnTimeClick)), ButtonCtl.Create(this._ui.btn_zc, new Laya.Handler(this, this.onBtnZCClick)), tqBtnCtl);
                this._ui.list.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.itemRender);
                this._timeCtl = new TimeCtlMs(this._ui.lab_time2);
                this._timeCtl1 = new TimeCtlMs(this._ui.lab_btnTime);
                for (let i = 1; i < 6; i++) {
                    this["_timeCtl2" + i] = new Laya.Timer;
                }
                this._timeCtl3 = new Laya.Timer;
                if (t_Platform.Ins.isHideAdImg) {
                    this.UI.height -= (this._ui.img_tq.height + 20);
                    tqBtnCtl.visible = false;
                }
            }
        }
        onBtnTQClick() {
            E.ViewMgr.Open(EViewType.ZhongShenKa);
        }
        onInit() {
            this._count = -1;
            GuaJiModel.Ins.on(GuaJiModel.UPDATA_VIEW, this, this.onUpdataView);
            GuaJiModel.Ins.on(GuaJiModel.UPDATA_KUAISUVIEW, this, this.updataFree);
            let req = new AfkRefresh_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            GuaJiModel.Ins.off(GuaJiModel.UPDATA_VIEW, this, this.onUpdataView);
            GuaJiModel.Ins.off(GuaJiModel.UPDATA_KUAISUVIEW, this, this.updataFree);
            this._timeCtl.stop();
            this._timeCtl1.stop();
            Laya.timer.clear(this, this.onTimer);
            for (let i = 1; i < 6; i++) {
                this["_timeCtl2" + i].clear(this, this.sendCmd);
            }
            this._timeCtl3.clear(this, this.sendCmd3);
        }
        onBtnLQClick() {
            let req = new AfkReward_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnTimeClick() {
            E.ViewMgr.Open(EViewType.GUAJIADDTIME);
        }
        onBtnZCClick() {
            E.ViewMgr.Open(EViewType.GUAJIkUAISU);
        }
        itemRender(item) {
            ItemViewFactory.refreshSlot(item, item.dataSource);
        }
        setSend() {
            for (let i = 1; i < 6; i++) {
                this["_timeCtl2" + i].clear(this, this.sendCmd);
            }
            for (let i = 0; i < GuaJiModel.Ins.inviteeData.length; i++) {
                let tt = GuaJiModel.Ins.inviteeData[i].endUnix - TimeUtil.serverTime;
                if (tt > 0) {
                    this["_timeCtl2" + (i + 1)].once(tt, this, this.sendCmd);
                }
            }
            this._timeCtl3.clear(this, this.sendCmd3);
            let t = GuaJiModel.Ins.packEndUnix - TimeUtil.serverTime;
            if (t > 0) {
                this._timeCtl3.once(t, this, this.sendCmd3);
            }
        }
        sendCmd() {
            let req = new AfkInviteeTimeUp_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        sendCmd3() {
            let req = new AfkPackTimeUp_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        updataFree() {
            if (GuaJiModel.Ins.isFree()) {
                DotManager.addDot(this._ui.btn_zc);
            }
            else {
                DotManager.removeDot(this._ui.btn_zc);
            }
        }
        onUpdataView() {
            this.setSend();
            this.updataFree();
            this._ui.lab_lv.text = "LV." + GuaJiModel.Ins.mianData.level;
            this._cfg = GuaJiRewardsProxy.Ins.getCfgByLv(GuaJiModel.Ins.mianData.level);
            let arrTime = this._cfg.f_AFKReward.split("|");
            for (let i = 0; i < 2; i++) {
                this._ui["lab" + (i + 1)].text = parseInt(arrTime[i].split("-")[1]) / 10 + "/分钟";
                this._ui["icon" + (i + 1)].skin = IconUtils.getIcon(arrTime[i].split("-")[0]);
            }
            this.onTimer();
            DotManager.removeDot(this._ui.btn_lq);
            this._timeCtl.stop();
            this._time = GuaJiModel.Ins.mianData.endUnix.toNumber() - TimeUtil.serverTimeMS;
            if (this._time > 0) {
                this._timeCtl.start(this._time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
            }
            let time = TimeUtil.serverTimeMS - GuaJiModel.Ins.mianData.startUnix.toNumber();
            if (time > this._cfg.f_RewardsInterval * 1000) {
                this._ui.btn_lq.visible = true;
                this._ui.btn_gray.visible = false;
                this._timeCtl1.stop();
            }
            else {
                this._ui.btn_lq.visible = false;
                this._ui.btn_gray.visible = true;
                this._timeCtl1.start(this._cfg.f_RewardsInterval * 1000 - time, new Laya.Handler(this, this.onUpdateTime1), new Laya.Handler(this, this.endTime1));
            }
        }
        onUpdateTime1() {
            let t = Math.floor(this._timeCtl1.tickVal / 1000);
            let time_str = TimeUtil.subTime(t);
            this._timeCtl1.setText(time_str);
        }
        endTime1() {
            this._ui.btn_lq.visible = true;
            this._timeCtl1.setText("");
            this._ui.btn_gray.visible = false;
            this._timeCtl1.stop();
        }
        onUpdateTime() {
            let time = GuaJiCfgProxy.Ins.GetDataById(1).f_AFKTimeLimit;
            time += GuaJiModel.Ins.inviteeData.length * GuaJiCfgProxy.Ins.GetDataById(1).f_SingleFriendHelpTime;
            if (GuaJiModel.Ins.packEndUnix > TimeUtil.serverTime) {
                time += GuaJiPackProxy.Ins.GetDataById(1).f_Item;
            }
            let tt = Math.floor(this._timeCtl.tickVal / 1000);
            let time_str = TimeUtil.subTime(tt);
            this._timeCtl.setText(time_str);
            let t = tt / time;
            this._ui.pro.width = t * 215;
        }
        endTime() {
            DotManager.addDot(this._ui.btn_lq);
            this._ui.pro.width = 0;
            this._timeCtl.setText("");
            this._timeCtl.stop();
        }
        onTimer() {
            let time;
            let t = TimeUtil.serverTimeMS - GuaJiModel.Ins.mianData.endUnix.toNumber();
            if (t >= 0) {
                time = GuaJiModel.Ins.mianData.endUnix.toNumber() - GuaJiModel.Ins.mianData.startUnix.toNumber();
                Laya.timer.clear(this, this.onTimer);
            }
            else {
                time = TimeUtil.serverTimeMS - GuaJiModel.Ins.mianData.startUnix.toNumber();
                Laya.timer.once(1000, this, this.onTimer);
            }
            if (time < 0) {
                this._ui.lab_time1.text = "";
            }
            else {
                this._ui.lab_time1.text = TimeUtil.subTime(Math.floor(time / 1000));
            }
            let tt = this._cfg.f_RewardsInterval * 1000;
            let count = Math.floor(time / tt);
            this.setReward(count);
        }
        setReward(count) {
            if (this._count == count)
                return;
            this._count = count;
            if (this._count <= 0) {
                this._ui.list.array = [];
            }
            else {
                let array = [];
                let arr = this._cfg.f_AFKReward.split("|");
                for (let ele of arr) {
                    let vo = new ItemVo();
                    vo.cfgId = parseInt(ele.split("-")[0]);
                    vo.count = parseInt(ele.split("-")[1]) * this._count;
                    array.push(vo);
                }
                this._ui.list.array = array;
            }
        }
    }

    exports.GuaJiView = GuaJiView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GuaJiYQItem extends ui.views.guaji.ui_yaoQingItemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
        }
        onBtnClick() {
            E.sdk.goShareData('afkinviter=' + MainModel.Ins.mRoleData.AccountId);
        }
        setData(value) {
            if (value.data) {
                MainModel.Ins.setTTHead(this.icon, MainModel.Ins.convertHead(value.data.portrait));
                let t = GuaJiCfgProxy.Ins.GetDataById(1).f_SingleFriendHelpTime;
                this.lab.text = "+" + TimeUtil.getTimeShow(t);
                this.btn.visible = false;
            }
            else {
                this.icon.skin = "";
                this.lab.text = "";
                this.btn.visible = true;
            }
        }
    }

    exports.GuaJiYQItem = GuaJiYQItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GuaJiZhenChaNJ extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas('guaji.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.guaji.ui_zhenchanaijiuUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = GuaJiYQItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._timeCtl = new TimeCtlMs(this._ui.lab_time);
                this.hotBtn = new RateBtn01Ctl(this._ui.btnhot, this, this.onBtnBuyClick, ESkinRateBtn.Yellow);
                this.btn_buyCtl = ButtonCtl.Create(this._ui.btn_buy, new Laya.Handler(this, this.onBtnBuyClick));
                if (initConfig.clienttype == EClientType.Discount) {
                    this._ui.yqCon.visible = false;
                    this._ui.botCon.y = 219;
                }
                else {
                    this._ui.yqCon.visible = true;
                    this._ui.botCon.y = 377;
                }
            }
        }
        onInit() {
            GuaJiModel.Ins.on(GuaJiModel.UPDATA_VIEW, this, this.updataView);
            this.updataView();
        }
        onExit() {
            GuaJiModel.Ins.off(GuaJiModel.UPDATA_VIEW, this, this.updataView);
            this._timeCtl.stop();
        }
        onBtnBuyClick() {
            ActivityModel.Ins.recharge(GuaJiPackProxy.Ins.GetDataById(1).f_PurchaseID);
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        updataView() {
            this._timeCtl.stop();
            let t = GuaJiModel.Ins.mianData.endUnix.toNumber() - TimeUtil.serverTimeMS;
            if (t > 0) {
                this._timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
            }
            let arr = [];
            let len = GuaJiCfgProxy.Ins.GetDataById(1).f_FriendHelpLimit;
            for (let i = 0; i < len; i++) {
                if (GuaJiModel.Ins.inviteeData[i]) {
                    arr.push({ data: GuaJiModel.Ins.inviteeData[i] });
                }
                else {
                    arr.push({ data: null });
                }
            }
            this._ui.list.array = arr;
            let ppCfg = t_Purchase_PriceProxy.Ins.GetDataById(GuaJiPackProxy.Ins.GetDataById(1).f_PurchaseID);
            let time = GuaJiPackProxy.Ins.GetDataById(1).f_Item;
            let t1 = GuaJiCfgProxy.Ins.GetDataById(1).f_AFKTimeLimit;
            let t2 = GuaJiModel.Ins.inviteeData.length * GuaJiCfgProxy.Ins.GetDataById(1).f_SingleFriendHelpTime;
            this._ui.lab_time1.text = TimeUtil.getTimeShow(t1 + t2);
            this._ui.lab_time2.text = TimeUtil.getTimeShow(t1 + t2 + time);
            let btn;
            this.hotBtn.visible = false;
            this.btn_buyCtl.visible = false;
            if (ppCfg.f_isVoucher == EShopPayType.Voucher) {
                this.hotBtn.cfg = ppCfg;
                btn = this.hotBtn.btnCtl;
            }
            else {
                btn = this.btn_buyCtl;
            }
            if (TimeUtil.serverTime > GuaJiModel.Ins.packEndUnix) {
                this._ui.lab_gm.visible = false;
                btn.visible = true;
            }
            else {
                this._ui.lab_gm.visible = true;
                btn.visible = false;
            }
        }
        onUpdateTime() {
            let tt = Math.floor(this._timeCtl.tickVal / 1000);
            let time_str = TimeUtil.subTime(tt);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("00:00:00");
            this._timeCtl.stop();
        }
    }

    exports.GuaJiZhenChaNJ = GuaJiZhenChaNJ;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GuaJiModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new GuaJiModule();
            }
            return this._ins;
        }
        onInitCallBack() { }
        initMsg() {
            this.Reg(new GuaJiView(EViewType.GUAJI));
            this.Reg(new GuaJiKuaiSuZC(EViewType.GUAJIkUAISU));
            this.Reg(new GuaJiZhenChaNJ(EViewType.GUAJIADDTIME));
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            E.MsgMgr.AddMsg(MSGID.AfkInit, this.AfkInit, this);
            E.MsgMgr.AddMsg(MSGID.AfkUpdate, this.AfkUpdate, this);
            E.MsgMgr.AddMsg(MSGID.AfkFastUpdate, this.AfkFastUpdate, this);
            E.MsgMgr.AddMsg(MSGID.AfkInviteeUpdate, this.AfkInviteeUpdate, this);
            E.MsgMgr.AddMsg(MSGID.AfkPackUpdate, this.AfkPackUpdate, this);
            E.MsgMgr.AddMsg(MSGID.AdCdInit, this.AdCdInit, this);
            E.MsgMgr.AddMsg(MSGID.AdCdChange, this.AdCdChange, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
            Laya.timer.callLater(this, this.cdSetDot);
        }
        setDot() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.GuaJi) && GuaJiModel.Ins.mianData) {
                let time = GuaJiModel.Ins.mianData.endUnix.toNumber() - TimeUtil.serverTimeMS;
                if (time <= 0 || GuaJiModel.Ins.isFree()) {
                    this.setRed(true);
                }
                else {
                    this.setRed(false);
                    Laya.timer.once(time, this, this.onTimer);
                }
            }
        }
        onTimer() {
            this.setRed(true);
        }
        setRed(v) {
            MainModel.Ins.funcSetRed(EFuncDef.GuaJi, v);
        }
        AfkInit(value) {
            GuaJiModel.Ins.mianData = value.mianData;
            GuaJiModel.Ins.fastData = value.fastData;
            GuaJiModel.Ins.setInviteeData(value.inviteeData);
            GuaJiModel.Ins.setPackEndUnix(value.packEndUnix);
            GuaJiModel.Ins.event(GuaJiModel.UPDATA_VIEW);
        }
        AfkUpdate(value) {
            GuaJiModel.Ins.mianData = value.data;
            GuaJiModel.Ins.event(GuaJiModel.UPDATA_VIEW);
            console.log("GuaJiModel.Ins.mianData>>>>>>>>>>>>>", GuaJiModel.Ins.mianData);
            this.setDot();
        }
        AfkFastUpdate(value) {
            GuaJiModel.Ins.fastData = value.data;
            GuaJiModel.Ins.event(GuaJiModel.UPDATA_KUAISUVIEW);
            this.setDot();
        }
        AfkInviteeUpdate(value) {
            GuaJiModel.Ins.setInviteeData(value.inviteeList);
            GuaJiModel.Ins.mianData.endUnix = value.endUnix;
            GuaJiModel.Ins.event(GuaJiModel.UPDATA_VIEW);
        }
        AfkPackUpdate(value) {
            GuaJiModel.Ins.setPackEndUnix(value.packEndUnix);
            GuaJiModel.Ins.mianData.endUnix = value.endUnix;
            GuaJiModel.Ins.event(GuaJiModel.UPDATA_VIEW);
        }
        AdCdInit(value) {
            GuaJiModel.Ins.stAdCdList = value.datalist;
            GuaJiModel.Ins.event(GuaJiModel.UPDATA_CD_TIME);
            this.cdSetDot();
        }
        AdCdChange(value) {
            for (let i = 0; i < value.datalist.length; i++) {
                let index = GuaJiModel.Ins.stAdCdList.findIndex(ele => ele.pos == value.datalist[i].pos);
                if (index != -1) {
                    GuaJiModel.Ins.stAdCdList[index] = value.datalist[i];
                }
            }
            GuaJiModel.Ins.event(GuaJiModel.UPDATA_CD_TIME);
            this.cdSetDot();
        }
        cdSetDot() {
            this.advertisementRed = false;
            if (TaskModel.Ins.isFuncOpen(EFuncDef.GuangGao)) {
                let cfg = GuaJiModel.Ins.getstAdCdByType(GuaJiModel.CDEnmu.GuangGao);
                if (cfg) {
                    let num = parseInt(System_RefreshTimeProxy.Ins.GetDataById(16).f_SystemConfig) - cfg.times;
                    let time = cfg.endUnix - TimeUtil.serverTime;
                    if (num) {
                        if (time <= 0) {
                            this.advertisementRed = true;
                        }
                        else {
                            Laya.timer.once(time * 1000, this, this.onTimerCD);
                        }
                    }
                }
            }
        }
        onTimerCD() {
            this.advertisementRed = true;
        }
        set advertisementRed(v) {
            MainModel.Ins.funcSetRed(EFuncDef.GuangGao, v);
        }
    }

    exports.GuaJiModule = GuaJiModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuYouItemTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('fuyou.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fuyou.ui_cifuLevelUI();
                this.bindClose(this._ui.close1);
                this._ui.maskbg.on(Laya.Event.CLICK, this, this.Close);
                this.btnLv = ButtonCtl.Create(this._ui.btn_lv, new Laya.Handler(this, this.onBtnLvClick));
                this.btnList.push(ButtonCtl.Create(this._ui.btn_zh, new Laya.Handler(this, this.onBtnZhClick)));
                this.btnList.push(this.btnLv);
                this._item1 = new GridItemCtl(this._ui.item);
            }
        }
        onInit() {
            HuYouModel.Ins.on(HuYouModel.UPDATA_VIEW, this, this.updateView1);
            this.updateView();
        }
        onExit() {
            HuYouModel.Ins.off(HuYouModel.UPDATA_VIEW, this, this.updateView1);
        }
        onBtnLvClick() {
            if (!MainModel.Ins.isItemEnoughSt(this._lvCfg[this._quaCfg.f_QualityField], true)) {
                return;
            }
            let req = new BlessingLevelUp_req();
            req.uid = this.Data.uid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnZhClick() {
            if (this.Data.stItem.pos) {
                MainModel.Ins.queryMsg("是否转化该福源?", 0, 0, EQuickMsg.FuYuanZH, new Laya.Handler(this, this.sendCmd));
                return;
            }
            this.sendCmd();
        }
        sendCmd() {
            let view = E.ViewMgr.Get(EViewType.CIFU);
            if (view) {
                if (HuYouModel.Ins.isAuto) {
                    view.setAuto(false);
                    E.ViewMgr.ShowMidError(E.getLang("HuYou_tips1"));
                    return;
                }
                if (view.isPlay) {
                    E.ViewMgr.ShowMidError(E.getLang("正在祈福中"));
                    return;
                }
            }
            let req = new BlessingConvert_req();
            req.datalist = [this.Data.uid];
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        updateView1() {
            let bagList = HuYouModel.Ins.getBagList(HuYouModel.BagEnmu.noSort_FY, this.Data.cheifId);
            let vo = bagList.find(item => item.uid.equals(this.Data.uid));
            if (vo) {
                this.Data.stItem.level = vo.level;
            }
            else {
                bagList = HuYouModel.Ins.getBagList(HuYouModel.BagEnmu.sort_FY, this.Data.cheifId);
                vo = bagList.find(item => item.uid.equals(this.Data.uid));
                this.Data.stItem.level = vo.level;
            }
            this.updateView();
        }
        updateView() {
            this._item1.setBagData(this.Data);
            let cfg = HuYouQualityProxy.Ins.getCfgByQua(this.Data.itemCfg.f_qua);
            this._ui.txt_name.text = this.Data.getName() + ` (${cfg.f_SoulQualityName})`;
            this._ui.txt_name.color = this.Data.getQua();
            this._ui.txt_level.text = "Lv." + this.Data.stItem.level;
            let attr = HuYouModel.Ins.getAttr(this.Data.uid);
            this._ui.txt1.text = MainModel.Ins.getAttrNameIdByID(attr.id) + ":";
            this._ui.txt2.text = attrConvert(attr.id, attr.value) + "";
            this._lvCfg = HuYouSoulExpProxy.Ins.getCfgByLv(this.Data.stItem.level + 1);
            this._quaCfg = HuYouQualityProxy.Ins.getCfgByItemID(this.Data.itemID);
            if (this._lvCfg) {
                this._ui.gold3.visible = true;
                let id = this._lvCfg[this._quaCfg.f_QualityField].split("-")[0];
                this._ui.img_money3.skin = IconUtils.getIcon(id);
                this._ui.img_tt.skin = IconUtils.getIcon(id);
                let nextCount = this._lvCfg[this._quaCfg.f_QualityField].split("-")[1];
                let count = MainModel.Ins.mRoleData.getVal(id);
                this._ui.txt_money1.text = count + "";
                this._ui.txt_money2.text = "/" + nextCount;
                if (count >= nextCount) {
                    this._ui.txt_money1.color = EGameColor.GREED;
                }
                else {
                    this._ui.txt_money1.color = EGameColor.NotEnough;
                }
                this._ui.txt_sj.text = "升级";
                this.btnLv.mouseEnable = true;
            }
            else {
                this._ui.txt_sj.text = "已满级";
                this.btnLv.mouseEnable = false;
                this._ui.gold3.visible = false;
                let lvCfg = HuYouSoulExpProxy.Ins.getCfgByLv(this.Data.stItem.level);
                let idd = lvCfg[this._quaCfg.f_QualityField].split("-")[0];
                this._ui.img_tt.skin = IconUtils.getIcon(idd);
            }
        }
    }

    exports.FuYouItemTip = FuYouItemTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuYouItemTip1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('fuyou.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fuyou.ui_cifuLevel1UI();
                this.bindClose(this._ui.close1);
                this._ui.maskbg.on(Laya.Event.CLICK, this, this.Close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_zh, new Laya.Handler(this, this.onBtnZhClick)));
                this._item1 = new GridItemCtl(this._ui.item);
            }
        }
        onInit() {
            this.updateView();
        }
        onExit() {
        }
        onBtnZhClick() {
            let view = E.ViewMgr.Get(EViewType.CIFU);
            if (view) {
                if (HuYouModel.Ins.isAuto) {
                    view.setAuto(false);
                    E.ViewMgr.ShowMidError(E.getLang("HuYou_tips1"));
                    return;
                }
                if (view.isPlay) {
                    E.ViewMgr.ShowMidError(E.getLang("正在祈福中"));
                    return;
                }
            }
            let req = new BlessingConvert_req();
            req.datalist = [this.Data.uid];
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        updateView() {
            this._item1.setBagData(this.Data);
            this._ui.txt_name.text = this.Data.getName();
            this._ui.txt_name.color = this.Data.getQua();
            this._ui.txt_level.text = this.Data.getDec();
        }
    }

    exports.FuYouItemTip1 = FuYouItemTip1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HuYouQuickBtn extends ui.views.fuyou.ui_zhuanhuaItemUI {
    }
    class ZhuanHuanTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.curIndex = 0;
            this.btnlist = [];
            this.cfglist = [];
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.cfglist = [];
                this.btnlist = [];
                this.UI = this._ui = new ui.views.fuyou.ui_zhuanhuaUI;
                this.bindClose(this._ui.close1);
                this.btnList.push(ButtonCtl.Create(this._ui.startBtn, new Laya.Handler(this, this.onStartHandler)));
                this._ui.maskbg.on(Laya.Event.CLICK, this, this.Close);
                this.initSelectUI();
                this._ui.listcontainer.visible = false;
            }
        }
        onStartHandler() {
            let list = [];
            let cfgg = this.cfglist[this.curIndex];
            let bagList = HuYouModel.Ins.getBagList(HuYouModel.BagEnmu.noSort_FY);
            for (let i = 0; i < bagList.length; i++) {
                let cfg = ItemProxy.Ins.getCfg(bagList[i].id);
                if (cfg.f_qua <= cfgg.f_QualityID) {
                    list.push(bagList[i].uid);
                }
            }
            let req = new BlessingConvert_req();
            req.datalist = list;
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        initSelectUI() {
            let size = 5;
            let cnt = HuYouQualityProxy.Ins.getListQuaByType(1).length;
            let cellHeight = 0;
            for (let i = cnt - 1; i >= 0; i--) {
                let cfg = HuYouQualityProxy.Ins.GetDataById(i + 1);
                let _item = new HuYouQuickBtn();
                _item.y = (cnt - i - 1) * _item.height + size;
                _item.x = size;
                this._ui.listcontainer.addChild(_item);
                cellHeight = _item.height;
                _item.cfg = cfg;
                this.updateCell(_item.tf, cfg);
                _item.btn.clickHandler = new Laya.Handler(this, this.onItemClickHandler, [cfg, cnt - i - 1]);
                this.btnlist.push(_item);
                this.cfglist.push(cfg);
            }
            this.curIndex = this.cfglist.length - 1;
            this._ui.listcontainer.height = cnt * cellHeight + size * 2;
            this._ui.listcontainer.y = this._ui.listarea.y - this._ui.listcontainer.height;
            this._ui.listarea.on(Laya.Event.CLICK, this, this.onAreaHander);
        }
        updateCell(label, cfg) {
            label.text = cfg.f_SoulQualityName + "的及以下";
            label.color = `#${cfg.f_Color}`;
        }
        onItemClickHandler(cfg, _index) {
            this._ui.listcontainer.visible = false;
            this.selectIndex(_index);
        }
        selectIndex(index) {
            let cfg;
            for (let i = 0; i < this.btnlist.length; i++) {
                let cell = this.btnlist[i];
                if (index == i) {
                    cfg = cell.cfg;
                    break;
                }
            }
            if (cfg) {
                this.curIndex = index;
                this.updateCell(this._ui.listtf, cfg);
            }
        }
        onAreaHander() {
            this._ui.listcontainer.visible = !this._ui.listcontainer.visible;
            if (this._ui.listcontainer.visible) {
                this._ui.sanjiao.rotation = 180;
            }
            else {
                this._ui.sanjiao.rotation = 0;
            }
        }
        onInit() {
            this._ui.listcontainer.visible = false;
            this._ui.sanjiao.rotation = 0;
            this.selectIndex(this.curIndex);
        }
        onExit() {
        }
    }

    exports.HuYouQuickBtn = HuYouQuickBtn;
    exports.ZhuanHuanTip = ZhuanHuanTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WeiTuoTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.curIndex = 0;
            this.cfglist = [];
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fuyou.ui_cifuAutoUI;
                this.bindClose(this._ui.close1);
                this.btnlist = [];
                this.btnList.push(ButtonCtl.Create(this._ui.startBtn, new Laya.Handler(this, this.onStartHandler)));
                this._ui.maskbg.on(Laya.Event.CLICK, this, this.Close);
                this._checkBoxCtl1 = new CheckBoxCtl({ bg: this._ui.bg, gou: this._ui.gou });
                this._checkBoxCtl2 = new CheckBoxCtl({ bg: this._ui.ckbg, gou: this._ui.gou1 });
                this._checkBoxCtl1.selectHander = new Laya.Handler(this, this.onSelectHander1);
                this._checkBoxCtl2.selectHander = new Laya.Handler(this, this.onSelectHander2);
                this.cfglist = [];
                this.initSelectUI();
            }
        }
        onSelectHander1() {
            HuYouModel.Ins.wtSelect1 = this._checkBoxCtl1.selected;
            this.uploadConfig();
        }
        onSelectHander2() {
            HuYouModel.Ins.wtSelect2 = this._checkBoxCtl2.selected;
            this.uploadConfig();
        }
        onStartHandler() {
            let view = E.ViewMgr.Get(EViewType.CIFU);
            view.setAuto(true);
            this.Close();
        }
        initSelectUI() {
            let size = 5;
            let cnt = HuYouQualityProxy.Ins.getListByType(1).length;
            let cellHeight = 0;
            for (let i = cnt - 1; i >= 0; i--) {
                let _item = new HuYouQuickBtn();
                _item.y = (cnt - i - 1) * _item.height + size;
                _item.x = size;
                this._ui.listcontainer.addChild(_item);
                cellHeight = _item.height;
                let cfg = HuYouQualityProxy.Ins.GetDataById(i + 1);
                _item.cfg = cfg;
                this.updateCell(_item.tf, cfg);
                _item.btn.clickHandler = new Laya.Handler(this, this.onItemClickHandler, [cfg, cnt - i - 1]);
                this.btnlist.push(_item);
                this.cfglist.push(cfg);
            }
            this.curIndex = this.cfglist.length - 1;
            this._ui.listcontainer.height = cnt * cellHeight + size * 2;
            this._ui.listcontainer.y = this._ui.listarea.y - this._ui.listcontainer.height;
            this._ui.listcontainer.visible = false;
            this._ui.listarea.on(Laya.Event.CLICK, this, this.onAreaHander);
        }
        onSelCallBack(index) {
            this.selectIndex(index);
        }
        updateCell(label, cfg) {
            label.text = cfg.f_SoulQualityName + "的及以下";
            label.color = `#${cfg.f_Color}`;
        }
        onItemClickHandler(cfg, _index) {
            this._ui.listcontainer.visible = false;
            this.selectIndex(_index);
        }
        selectIndex(index) {
            let curIndex = 0;
            let cfg;
            for (let i = 0; i < this.btnlist.length; i++) {
                let cell = this.btnlist[i];
                if (index == i) {
                    cfg = cell.cfg;
                    break;
                }
            }
            if (cfg) {
                curIndex = index;
                this.updateCell(this._ui.listtf, cfg);
            }
            this.curIndex = curIndex;
            HuYouModel.Ins.wtQua = this.cfglist[curIndex].f_QualityID;
            this.uploadConfig();
        }
        uploadConfig() {
            let l1 = [];
            RedUpdateUtils.push(l1, RedEnum.CIFU_CK1, this._checkBoxCtl1);
            RedUpdateUtils.push(l1, RedEnum.CIFU_CK2, this._checkBoxCtl2);
            RedUpdateUtils.push(l1, RedEnum.CIFU_QUA, this.curIndex);
            RedUpdateModel.Ins.saveArr(l1);
        }
        onAreaHander() {
            this._ui.listcontainer.visible = !this._ui.listcontainer.visible;
            if (this._ui.listcontainer.visible) {
                this._ui.sanjiao.rotation = 180;
            }
            else {
                this._ui.sanjiao.rotation = 0;
            }
        }
        onInit() {
            RedUpdateUtils.refreshByConfig(this._checkBoxCtl1, RedEnum.CIFU_CK1, false);
            RedUpdateUtils.refreshByConfig(this._checkBoxCtl2, RedEnum.CIFU_CK2, false);
            RedUpdateUtils.refreshByConfig(new Laya.Handler(this, this.onSelCallBack), RedEnum.CIFU_QUA, this.curIndex);
            this._ui.listcontainer.visible = false;
            this._ui.sanjiao.rotation = 0;
            HuYouModel.Ins.wtSelect1 = this._checkBoxCtl1.selected;
            HuYouModel.Ins.wtSelect2 = this._checkBoxCtl2.selected;
        }
        onExit() {
        }
    }

    exports.WeiTuoTip = WeiTuoTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HuYouModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new HuYouModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            HuYouModel.Ins.bagList = {};
            HuYouModel.Ins.isAuto = false;
            HuYouModel.Ins.event(HuYouModel.UPDATA_AUTO);
        }
        initMsg() {
            this.Reg(new HuYouView(EViewType.CIFU, ELayerType.frameLayer));
            this.Reg(new ZhuanHuanTip(EViewType.CIFU_ZHUANHUAN, ELayerType.frameLayer));
            this.Reg(new WeiTuoTip(EViewType.CIFU_SHEZHI, ELayerType.frameLayer));
            this.Reg(new FuYouItemTip(EViewType.CIFU_ITEMTIP, ELayerType.frameLayer));
            this.Reg(new FuYouItemTip1(EViewType.CIFU_ITEMTIP1, ELayerType.frameLayer));
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            E.MsgMgr.AddMsg(MSGID.BlessingInit, this.onBlessingInit, this);
            E.MsgMgr.AddMsg(MSGID.BlessingChange, this.BlessingChange, this);
            E.MsgMgr.AddMsg(MSGID.BlessingRes, this.BlessingRes, this);
            E.MsgMgr.AddMsg(MSGID.BlessingItemRemove, this.BlessingItemRemove, this);
            E.MsgMgr.AddMsg(MSGID.BlessingMaxLevelRewards, this.BlessingMaxLevelRewards, this);
            E.MsgMgr.AddMsg(MSGID.BlessingAutoZH_revc, this.BlessingAutoZH_revc, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (HuYouModel.Ins.isDotMain()) {
                DotManager.addMainDot("icon4", -20, -5);
            }
            else {
                DotManager.remMainDot("icon4");
            }
        }
        onBlessingInit(data) {
            HuYouModel.Ins.initBag(data.bagInfo);
            HuYouModel.Ins.bagSoulInfoAttr = data.bagInfoAttr;
            HuYouModel.Ins.startTime = data.startTime;
            HuYouModel.Ins.level = data.level;
            HuYouModel.Ins.freeCount = data.count;
        }
        BlessingChange(data) {
            HuYouModel.Ins.updataPushBag(data);
            HuYouModel.Ins.startTime = data.startTime;
            HuYouModel.Ins.freeCount = data.count;
            HuYouModel.Ins.event(HuYouModel.UPDATA_VIEW);
            this.setDot();
        }
        BlessingRes(data) {
            let lv = HuYouModel.Ins.level;
            HuYouModel.Ins.level = data.level;
            HuYouModel.Ins.event(HuYouModel.UPDATA_VIEW_Level, lv);
        }
        BlessingItemRemove(data) {
            HuYouModel.Ins.updataDelBag(data.datalist);
            HuYouModel.Ins.event(HuYouModel.UPDATA_VIEW);
            this.setDot();
        }
        BlessingMaxLevelRewards(data) {
            E.ViewMgr.openReward(data);
        }
        BlessingAutoZH_revc(value) {
            HuYouModel.Ins.event(HuYouModel.UPDATA_VIEW_Item, [value.rewardList]);
        }
    }

    exports.HuYouModule = HuYouModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JieDongFengModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new JieDongFengModel();
            }
            return this._ins;
        }
        setDataList(value) {
            if (!this.dataList) {
                this.dataList = [];
                for (let i = 0; i < 3; i++) {
                    let obj = {};
                    obj.type = i + 1;
                    let vo = value.find(ele => ele.type == (i + 1));
                    if (vo) {
                        obj.data = vo;
                        obj.selectId = vo.id;
                    }
                    else {
                        obj.data = null;
                        obj.selectId = 0;
                    }
                    this.dataList.push(obj);
                }
            }
            else {
                for (let i = 0; i < value.length; i++) {
                    let index = this.dataList.findIndex(ele => ele.type == value[i].type);
                    if (index != -1) {
                        this.dataList[index].data = value[i];
                        this.dataList[index].selectId = value[i].id;
                    }
                }
            }
        }
        setSelectId(type, id) {
            let vo = this.dataList.find(ele => ele.type == type);
            if (vo) {
                vo.selectId = id;
            }
        }
        isRedTip() {
            if (MainModel.Ins.isOpenByFuncId(EFuncDef.JieDongFeng.toString())) {
                return MainModel.Ins.needRed(RedEnum.RED_JieDongFeng);
            }
        }
    }
    JieDongFengModel.UpdataView = "UpdataView";

    exports.JieDongFengModel = JieDongFengModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class NewplayerAttributeProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new NewplayerAttributeProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Newplayer_Attribute";
        }
        getListByType(type) {
            let arr = [];
            for (let i = 0; i < this.List.length; i++) {
                if (this.List[i].f_attrtype == type) {
                    arr.push(this.List[i]);
                }
            }
            return arr;
        }
    }

    exports.NewplayerAttributeProxy = NewplayerAttributeProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JieDongFengItem extends ui.views.jiedoufeng.ui_jiedoufengitemUI {
        constructor() {
            super();
            this._timeCtl = new TimeCtl(this.timetf);
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemoved);
            ButtonCtl.Create(this.img, new Laya.Handler(this, this.onImgClick), false);
            ButtonCtl.Create(this.img_add, new Laya.Handler(this, this.onImgClick), false);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            this._eff = new SimpleEffect(this.eff, `o/spine/uief1/uief1`);
        }
        onBtnClick() {
            if (this._data) {
                if (this._data.selectId) {
                    E.sendTrack("ad_watch", { type: "jiedongfeng" });
                    E.sdk.lookVideo((type) => {
                        LogSys$1.Log('type: ', type);
                        switch (type) {
                            case 0:
                                break;
                            case 1:
                                E.sendTrack("ad_finish", { type: "jiedongfeng" });
                                let req = new NewPlayerAttr_req;
                                req.type = this._data.type;
                                req.id = this._data.selectId;
                                SocketMgr.Ins.SendMessageBin(req);
                                break;
                        }
                    });
                }
                else {
                    this.onImgClick();
                }
            }
        }
        onImgClick() {
            if (this._data) {
                E.ViewMgr.Open(EViewType.JieDongFengView1, null, this._data.type);
            }
        }
        onAdd() {
        }
        onRemoved() {
            this._timeCtl.stop();
            if (this._eff) {
                this._eff.stop();
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            if (value.data) {
                this._eff.play(0, true);
                let cfg = NewplayerAttributeProxy.Ins.GetDataById(value.selectId);
                this.img_add.mouseEnabled = false;
                this.img.visible = true;
                this.img.mouseEnabled = false;
                this.img.skin = "o/adattr/" + cfg.f_icon;
                this.sp.visible = false;
                let arr = cfg.f_attribute.split(":");
                this.nameTf.text = MainModel.Ins.getAttrNameIdByID(parseInt(arr[0])) + ":" + attrConvert(parseInt(arr[0]), parseInt(arr[1]));
                this.btn.visible = false;
                this.img_time.visible = true;
                let time = value.data.endUnix - TimeUtil.serverTime;
                if (time > 0) {
                    this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                }
                else {
                    this.endTime();
                }
            }
            else {
                this._eff.stop();
                this._timeCtl.stop();
                this.btn.visible = true;
                this.img_time.visible = false;
                if (value.selectId > 0) {
                    this.sp.visible = true;
                    this.img.visible = true;
                    this.img.mouseEnabled = true;
                    let ccfg = NewplayerAttributeProxy.Ins.GetDataById(value.selectId);
                    let arr = ccfg.f_attribute.split(":");
                    this.nameTf.text = MainModel.Ins.getAttrNameIdByID(parseInt(arr[0])) + ":" + attrConvert(parseInt(arr[0]), parseInt(arr[1]));
                    this.img.skin = "o/adattr/" + ccfg.f_icon;
                    this.img_add.mouseEnabled = false;
                }
                else {
                    let arr = NewplayerAttributeProxy.Ins.getListByType(value.type);
                    this.nameTf.text = arr[0].f_attrname;
                    this.sp.visible = false;
                    this.img.visible = false;
                    this.img_add.mouseEnabled = true;
                }
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
            this._eff.stop();
            this._timeCtl.stop();
            if (this._data) {
                this.btn.visible = true;
                this.img_time.visible = false;
                this.sp.visible = true;
                this.img.visible = true;
                this.img.mouseEnabled = true;
                let ccfg = NewplayerAttributeProxy.Ins.GetDataById(this._data.selectId);
                let arr = ccfg.f_attribute.split(":");
                this.nameTf.text = MainModel.Ins.getAttrNameIdByID(parseInt(arr[0])) + ":" + attrConvert(parseInt(arr[0]), parseInt(arr[1]));
                this.img.skin = "o/adattr/" + ccfg.f_icon;
                this.img_add.mouseEnabled = false;
            }
        }
    }

    exports.JieDongFengItem = JieDongFengItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JieDongFengView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("jiedongfeng.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jiedoufeng.ui_jiedoufengviewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.img_tq, new Laya.Handler(this, this.onBtnTQClick));
                this._timeCtl = new TimeCtl(this._ui.timetf);
                this._ui.list.itemRender = JieDongFengItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onBtnTQClick() {
            E.ViewMgr.Open(EViewType.ZhongShenKa);
        }
        onInit() {
            if (MainModel.Ins.needRed(RedEnum.RED_JieDongFeng)) {
                RedUpdateModel.Ins.save(RedEnum.RED_JieDongFeng, TimeUtil.serverTime);
            }
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.updataView);
            JieDongFengModel.Ins.on(JieDongFengModel.UpdataView, this, this.updataView);
            this.updataView();
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.updataView);
            JieDongFengModel.Ins.off(JieDongFengModel.UpdataView, this, this.updataView);
            this._timeCtl.stop();
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        updataView() {
            this._activityVo = ActivityModel.Ins.getVo(EActivityType.JieDongFeng);
            if (this._activityVo) {
                let time = this._activityVo.vo.endtime - TimeUtil.serverTime;
                if (time > 0) {
                    this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                }
                else {
                    this.endTime();
                    this._timeCtl.stop();
                }
                this._ui.list.array = JieDongFengModel.Ins.dataList;
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
    }

    exports.JieDongFengView = JieDongFengView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JieDongFengView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("jiedongfeng.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jiedoufeng.ui_jiedoufengview1UI;
                this.bindClose(this._ui.close1);
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
                this._ui.list.itemRender = ui.views.jiedoufeng.ui_jiedoufengitem1UI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list.selectEnable = true;
            }
        }
        onBtnClick() {
            let cfg = this._ui.list.selectedItem;
            JieDongFengModel.Ins.setSelectId(cfg.f_attrtype, cfg.f_id);
            JieDongFengModel.Ins.event(JieDongFengModel.UpdataView);
            this.Close();
        }
        onRenderHandler(item, index) {
            if (index == this._ui.list.selectedIndex) {
                item.img_xz.visible = true;
            }
            else {
                item.img_xz.visible = false;
            }
            let cfg = item.dataSource;
            item.img.skin = "o/adattr/" + cfg.f_icon;
            let arr = cfg.f_attribute.split(":");
            item.nameTf.text = MainModel.Ins.getAttrNameIdByID(parseInt(arr[0])) + ":" + attrConvert(parseInt(arr[0]), parseInt(arr[1]));
        }
        onInit() {
            this._ui.list.array = NewplayerAttributeProxy.Ins.getListByType(this.Data);
            this._ui.list.selectedIndex = 0;
        }
        onExit() {
        }
    }

    exports.JieDongFengView1 = JieDongFengView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JieDongFengModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new JieDongFengModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            JieDongFengModel.Ins.dataList = null;
        }
        initMsg() {
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onMainViewInit);
            RedUpdateModel.Ins.on(RedUpdateModel.UPDATA, this, this.onMainViewInit);
            this.Reg(new JieDongFengView(EViewType.JieDongFengView));
            this.Reg(new JieDongFengView1(EViewType.JieDongFengView1));
            E.MsgMgr.AddMsg(MSGID.NewPlayerAttr, this.NewPlayerAttr, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (JieDongFengModel.Ins.isRedTip()) {
                MainModel.Ins.funcSetRed(EFuncDef.JieDongFeng, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.JieDongFeng, false);
            }
        }
        NewPlayerAttr(value) {
            JieDongFengModel.Ins.setDataList(value.dataList);
            JieDongFengModel.Ins.event(JieDongFengModel.UpdataView);
        }
    }

    exports.JieDongFengModule = JieDongFengModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ExpValueProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new ExpValueProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_ExpValue";
        }
        getBylv(lv) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_lv == lv) {
                    return cfg;
                }
            }
        }
    }

    exports.ExpValueProxy = ExpValueProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class UpstageRankProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new UpstageRankProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Upstage_Rank";
        }
        getCfgByID(id) {
            return this.List.find(item => item.f_id == id);
        }
    }
    class UpstageTaskProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new UpstageTaskProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Upsatage_Task";
        }
        getCfgByID(id) {
            return this.List.find(item => item.f_id == id);
        }
    }

    exports.UpstageRankProxy = UpstageRankProxy;
    exports.UpstageTaskProxy = UpstageTaskProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JinShengModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new JinShengModel();
            }
            return this._ins;
        }
        isRedTip() {
            if (this.isJSRedTip() || this.isLQRedTip()) {
                return true;
            }
            return false;
        }
        isJSRedTip() {
            let nextCfg = UpstageRankProxy.Ins.getCfgByID(this.promotionLevel + 1);
            if (nextCfg) {
                let num = 0;
                for (let i = 0; i < this.promotionList.length; i++) {
                    if (this.promotionList[i].rewardStatus == 1) {
                        num++;
                    }
                }
                if (num >= this.promotionList.length) {
                    let cfg = UpstageRankProxy.Ins.getCfgByID(this.promotionLevel);
                    if (MainModel.Ins.lv > cfg.f_maxlevel) {
                        return true;
                    }
                    let expCfg = ExpValueProxy.Ins.getBylv(MainModel.Ins.lv);
                    if (expCfg && MainModel.Ins.exp >= expCfg.f_ExpValue) {
                        return true;
                    }
                }
            }
            return false;
        }
        isLQRedTip() {
            let nextCfg = UpstageRankProxy.Ins.getCfgByID(this.promotionLevel + 1);
            if (nextCfg) {
                for (let i = 0; i < this.promotionList.length; i++) {
                    let value = this.promotionList[i];
                    if (value.rewardStatus == 0) {
                        let cfg = UpstageTaskProxy.Ins.getCfgByID(value.taskId);
                        if (cfg.f_tasktype == 2) {
                            if (value.taskContent == 1) {
                                return true;
                            }
                        }
                        else {
                            if (value.taskContent >= cfg.f_taskcontact) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }
    }
    JinShengModel.Updata_View = "Updata_View";

    exports.JinShengModel = JinShengModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JinShengItem extends ui.views.jinsheng.ui_jinshengItem1UI {
        constructor() {
            super();
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemoved);
            this.on(Laya.Event.CLICK, this, this.onClick);
        }
        onClick() {
            if (this._data) {
                if (this._data.rewardStatus == 0 && this._flag) {
                    let req = new PromotionReward_req;
                    req.taskId = this._data.taskId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        onAdd() {
        }
        onRemoved() {
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let cfg = UpstageTaskProxy.Ins.getCfgByID(value.taskId);
            let itemVo = new ItemVo();
            itemVo.cfgId = parseInt(cfg.f_rewards.split("-")[0]);
            itemVo.count = parseInt(cfg.f_rewards.split("-")[1]);
            ItemViewFactory.refreshSlot(this.item, itemVo);
            this._flag = false;
            if (cfg.f_tasktype == 2) {
                this.lab1.text = StringUtil.format(cfg.f_taskinfo, AdventureLevelProxy.Ins.getAdventureTaskName(cfg.f_taskcontact));
                if (value.taskContent == 1) {
                    this.lab2.text = "1/1";
                    this.pro.width = 163;
                    this._flag = true;
                }
                else {
                    this.lab2.text = "0/1";
                    this.pro.width = 0;
                }
            }
            else {
                this.lab1.text = StringUtil.format(cfg.f_taskinfo, cfg.f_taskcontact);
                if (value.taskContent >= cfg.f_taskcontact) {
                    this._flag = true;
                }
                this.lab2.text = value.taskContent + "/" + cfg.f_taskcontact;
                let num = value.taskContent / cfg.f_taskcontact;
                if (num > 1)
                    num = 1;
                this.pro.width = num * 163;
            }
            DotManager.removeDot(this.img);
            if (value.rewardStatus == 1) {
                this.img.skin = "remote/jinsheng/lq.png";
                this.lab.text = "已领取";
            }
            else {
                if (this._flag) {
                    this.img.skin = "remote/jinsheng/jxz.png";
                    this.lab.text = "已完成";
                    DotManager.addDot(this.img);
                }
                else {
                    this.img.skin = "remote/jinsheng/wc.png";
                    this.lab.text = "进行中";
                }
            }
        }
    }

    exports.JinShengItem = JinShengItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JinShengView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("jinsheng.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jinsheng.ui_jinshengViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
                this._ui.list.itemRender = ui.views.jinsheng.ui_jinshengItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list1.itemRender = ui.views.jinsheng.ui_jinshengItemUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
                this._ui.list2.itemRender = JinShengItem;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onRenderHandler2);
            }
        }
        onBtnClick() {
            let req = new Promotion_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onInit() {
            JinShengModel.Ins.on(JinShengModel.Updata_View, this, this.onUpdataView);
            this.updataView();
        }
        onExit() {
            JinShengModel.Ins.off(JinShengModel.Updata_View, this, this.onUpdataView);
        }
        onUpdataView() {
            this.updataView();
        }
        onRenderHandler(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.lab.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.lab1.text = attrConvert(id, val);
        }
        onRenderHandler1(item) {
            item.lab.color = item.lab1.color = "#53915A";
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.lab.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.lab1.text = attrConvert(id, val);
        }
        onRenderHandler2(item) {
            item.setData(item.dataSource);
        }
        updataView() {
            let cfg = UpstageRankProxy.Ins.getCfgByID(JinShengModel.Ins.promotionLevel);
            this._ui.lab.text = cfg.f_name;
            this._ui.labb.text = cfg.f_namestage;
            this._ui.lab_lv.text = cfg.f_maxlevel + "";
            this._ui.list.array = cfg.f_attr.split("|");
            let nextCfg = UpstageRankProxy.Ins.getCfgByID(JinShengModel.Ins.promotionLevel + 1);
            if (nextCfg) {
                this._ui.spV.x = 66;
                this._ui.spV1.visible = this._ui.spV2.visible = true;
                this._ui.lab_max.visible = false;
                this._ui.lab1.text = nextCfg.f_name;
                this._ui.labb1.text = nextCfg.f_namestage;
                this._ui.lab_lv1.text = nextCfg.f_maxlevel + "";
                this._ui.list1.array = nextCfg.f_attr.split("|");
                this._ui.list2.array = JinShengModel.Ins.promotionList;
                let cfg = ExpValueProxy.Ins.getBylv(MainModel.Ins.lv);
                if (cfg) {
                    this._ui.lab2.text = MainModel.Ins.exp + "/" + cfg.f_ExpValue;
                    let val = MainModel.Ins.exp / cfg.f_ExpValue;
                    if (val > 1)
                        val = 1;
                    this._ui.pro.width = val * 600;
                }
            }
            else {
                this._ui.spV.x = 236;
                this._ui.spV1.visible = this._ui.spV2.visible = false;
                this._ui.lab_max.visible = true;
            }
            if (JinShengModel.Ins.isJSRedTip()) {
                DotManager.addDot(this._ui.btn);
            }
            else {
                DotManager.removeDot(this._ui.btn);
            }
        }
    }

    exports.JinShengView = JinShengView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JinShengView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("jinsheng.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jinsheng.ui_jinshengView1UI;
                this._ui.list.itemRender = ui.views.jinsheng.ui_jinshengItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list1.itemRender = ui.views.jinsheng.ui_jinshengItemUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
                this._ui.sp.y = 10;
            }
        }
        onRenderHandler(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.lab.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.lab1.text = attrConvert(id, val);
        }
        onRenderHandler1(item) {
            item.lab.color = item.lab1.color = "#53915A";
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.lab.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.lab1.text = attrConvert(id, val);
        }
        onInit() {
            this._ui.spV.visible = this._ui.spV1.visible = false;
            if (!this._eff) {
                this._eff = new SimpleEffect(this._ui.sp, `o/spine/succeed/shengli`);
            }
            this._eff.play(4, false, this, this.effEnd);
            this.updataView();
            Laya.timer.once(500, this, this.updataView1);
        }
        onExit() {
            if (this._eff) {
                this._eff.dispose();
                this._eff = null;
            }
            Laya.timer.clear(this, this.updataView1);
        }
        updataView() {
            let cfg = UpstageRankProxy.Ins.getCfgByID(JinShengModel.Ins.promotionLevel - 1);
            this._ui.lab.text = cfg.f_name;
            this._ui.labb.text = cfg.f_namestage;
            this._ui.list.array = cfg.f_attr.split("|");
            let nextCfg = UpstageRankProxy.Ins.getCfgByID(JinShengModel.Ins.promotionLevel);
            this._ui.lab1.text = nextCfg.f_name;
            this._ui.labb1.text = nextCfg.f_namestage;
            this._ui.list1.array = nextCfg.f_attr.split("|");
        }
        effEnd() {
            if (this._eff) {
                this._eff.play(5, true);
            }
        }
        updataView1() {
            this._ui.spV.visible = this._ui.spV1.visible = true;
        }
    }

    exports.JinShengView1 = JinShengView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JinShengModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new JinShengModule();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            this.Reg(new JinShengView(EViewType.JinShengView));
            this.Reg(new JinShengView1(EViewType.JinShengView1));
            E.MsgMgr.AddMsg(MSGID.PromotionInit, this.PromotionInit, this);
            E.MsgMgr.AddMsg(MSGID.PromotionUgraded, this.PromotionUgraded, this);
            E.MsgMgr.AddMsg(MSGID.PromotionDataChange, this.PromotionDataChange, this);
        }
        PromotionInit(value) {
            JinShengModel.Ins.promotionLevel = value.promotionLevel;
            JinShengModel.Ins.promotionList = value.dataList;
        }
        PromotionUgraded(value) {
            JinShengModel.Ins.promotionLevel = value.promotionLevel;
            JinShengModel.Ins.promotionList = value.dataList;
            JinShengModel.Ins.event(JinShengModel.Updata_View);
            E.ViewMgr.Open(EViewType.JinShengView1);
        }
        PromotionDataChange(value) {
            for (let i = 0; i < value.dataList.length; i++) {
                let index = JinShengModel.Ins.promotionList.findIndex(ele => ele.taskId == value.dataList[i].taskId);
                JinShengModel.Ins.promotionList[index] = value.dataList[i];
            }
            JinShengModel.Ins.event(JinShengModel.Updata_View);
        }
    }

    exports.JinShengModule = JinShengModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class KaiFuChongBangModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new KaiFuChongBangModel();
            }
            return this._ins;
        }
        isRedTip() {
            if (MainModel.Ins.isOpenByFuncId(EFuncDef.KaiFuChongBang.toString())) {
                if (this.isGuanKaRedTip()) {
                    return true;
                }
            }
            return false;
        }
        isGuanKaRedTip() {
            return false;
        }
    }
    KaiFuChongBangModel.UpdataView_Rank = "UpdataView_Rank";

    exports.KaiFuChongBangModel = KaiFuChongBangModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class KFCBAdvantureRewardProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new KFCBAdvantureRewardProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_OpenServerActivity_AdvantureReward";
        }
    }
    class KFCBRankRewardProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new KFCBRankRewardProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_OpenServerActivity_RankReward";
        }
    }

    exports.KFCBAdvantureRewardProxy = KFCBAdvantureRewardProxy;
    exports.KFCBRankRewardProxy = KFCBRankRewardProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class KaiFuChongBangAwardView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.kaifuchongbang.ui_KaiFuChongBangAwardViewUI;
                this.bindClose(this._ui.close1);
                this._timeCtl = new TimeCtl(this._ui.time1);
                this._ui.list.itemRender = ui.views.kaifuchongbang.ui_KaiFuChongBangAwardItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRewardItemRender);
            }
        }
        onRewardItemRender(item) {
            let cfg = item.dataSource;
            let arr = cfg.f_Level.split("|");
            if (arr.length == 1) {
                let rank = parseInt(arr[0]);
                if (rank == 1 || rank == 2 || rank == 3) {
                    item.rankTf.visible = false;
                    item.icon1.visible = true;
                    item.icon1.skin = "remote/main/main/dfjjc_mc" + rank + ".png";
                }
                else {
                    item.rankTf.visible = true;
                    item.rankTf.text = rank + "";
                    item.icon1.visible = false;
                }
            }
            else {
                item.rankTf.visible = true;
                item.rankTf.text = arr[0] + "-" + arr[1];
                item.icon1.visible = false;
            }
            ItemViewFactory.renderItemSlots(item.rewardList, cfg.f_Reward, 10, 0.85, "right");
        }
        onInit() {
            this.updataView();
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        onExit() {
            this._timeCtl.stop();
        }
        updataView() {
            this._activityVo = ActivityModel.Ins.getVo(EActivityType.KaiFuChongBang);
            if (!this._activityVo)
                return;
            let time = this._activityVo.vo.endtime - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
            if (KaiFuChongBangModel.Ins.self.length) {
                this._ui.lab.text = KaiFuChongBangModel.Ins.self[0].ranking + "";
            }
            else {
                this._ui.lab.text = "未上榜";
            }
            this._ui.list.array = KFCBRankRewardProxy.Ins.List;
        }
    }

    exports.KaiFuChongBangAwardView = KaiFuChongBangAwardView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class KaiFuChongBangCtl {
        constructor(skin) {
            this._ui = skin;
            this._plusCtl = FontCtlFactory.createPlus();
            this._ui.on(Laya.Event.CLICK, this, this.onClickHanlder);
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
        }
        onRemove() {
            this.clearAvatar();
        }
        onClickHanlder() {
            if (this._data) {
                let vo = KaiFuChongBangModel.Ins.rankList.find(ele => ele.ranking == this._data.rank);
                if (vo) {
                    if (vo.accountId != MainModel.Ins.mRoleData.mPlayer.AccountId) {
                        let req = new CommonWatchPlayerInfo_req();
                        req.accountId = vo.accountId;
                        req.type = 1;
                        SocketMgr.Ins.SendMessageBin(req);
                    }
                }
            }
        }
        setData(value) {
            if (value) {
                this._ui.visible = true;
                this._data = value;
                this._ui.icon1.skin = "remote/main/main/dfjjc_mc" + this._data.rank + ".png";
                this._ui.titleImg.skin = ChengHaoModel.Ins.getTitleImg(this._data.titleid);
                let vo = KaiFuChongBangModel.Ins.rankList.find(ele => ele.ranking == this._data.rank);
                if (vo) {
                    this._ui.lab.text = AdventureLevelProxy.Ins.getAdventureTaskName(vo.commonNum);
                    this._ui.nameTf.text = vo.nickName;
                    let v = StringUtil.val2Atlas(vo.plus);
                    this._plusCtl.setValue(this._ui.plugs, v);
                }
                else {
                    this._ui.lab.text = "";
                    this._ui.nameTf.text = "";
                    this._plusCtl.setValue(this._ui.plugs, "");
                }
                this.clearAvatar();
                this.avatar = AvatarFactory.createAvatarByStSkin(this._data.enemySkin);
                this.avatar.dir = EAvatarDir.Right;
                this._ui.avatarCon.addChild(this.avatar);
            }
            else {
                this._ui.visible = false;
                this.clearAvatar();
            }
        }
        clearAvatar() {
            if (this.avatar) {
                this.avatar.dispose();
                this.avatar = null;
            }
        }
    }

    exports.KaiFuChongBangCtl = KaiFuChongBangCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class KaiFuChongBangCtl1 {
        constructor(skin) {
            this._ui = skin;
            this._ui.bg1.on(Laya.Event.CLICK, this, this.onClick);
            this._plusCtl = FontCtlFactory.createPlus();
        }
        onClick() {
            if (this._data) {
                if (this._data.accountId != MainModel.Ins.mRoleData.mPlayer.AccountId) {
                    let req = new CommonWatchPlayerInfo_req();
                    req.accountId = this._data.accountId;
                    req.type = 1;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        setData(value, type = 1) {
            if (!value)
                return;
            this._data = value;
            if (this._data.ranking == 1 || this._data.ranking == 2 || this._data.ranking == 3) {
                this._ui.sp.visible = false;
                this._ui.paiming.skin = "remote/main/main/dfjjc_mc" + this._data.ranking + ".png";
            }
            else {
                this._ui.sp.visible = true;
                this._ui.paiming.skin = "";
                if (this._data.ranking <= 200) {
                    this._ui.mingcitf.text = this._data.ranking + "";
                }
                else {
                    this._ui.mingcitf.text = "200+";
                }
            }
            MainModel.Ins.setTTHead(this._ui.icon, MainModel.Ins.convertHead(this._data.headUrl));
            this._ui.nameTf.text = this._data.nickName;
            this._ui.img_title.skin = ChengHaoModel.Ins.getTitleImg(this._data.titleId);
            let v = StringUtil.val2Atlas(this._data.plus);
            this._plusCtl.setValue(this._ui.plusCon, v);
            this._ui.lab_num.text = AdventureLevelProxy.Ins.getAdventureTaskName(this._data.commonNum);
            if (type == 1) {
                this._ui.bg.skin = "remote/kaifuchongbang/dfjjc_xs.png";
            }
            else {
                this._ui.bg.skin = "remote/kaifuchongbang/dfjjc_xszj.png";
            }
        }
    }

    exports.KaiFuChongBangCtl1 = KaiFuChongBangCtl1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class KaiFuChongBangItem1 extends ui.views.kaifuchongbang.ui_KaiFuChongBangitem1UI {
        constructor() {
            super();
            this.ctl = new KaiFuChongBangCtl1(this);
        }
    }

    exports.KaiFuChongBangItem1 = KaiFuChongBangItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class KaiFuChongBangItem2 extends ui.views.kaifuchongbang.ui_KaiFuChongBangitem2UI {
        constructor() {
            super();
            this.list.itemRender = ui.views.main.ui_slot_itemUI;
            this.list.renderHandler = new Laya.Handler(this, this.onItemHandler);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
        }
        onBtnClick() {
            if (this._activityVo && this._data) {
                ActivityModel.Ins.lingQu(this._activityVo.uid, this._data.f_id);
            }
        }
        onItemHandler(item) {
            let vo = new ItemVo();
            vo.cfgId = parseInt(item.dataSource.split("-")[0]);
            vo.count = parseInt(item.dataSource.split("-")[1]);
            ItemViewFactory.refreshSlot(item, vo);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.lab.text = "通过冒险" + AdventureLevelProxy.Ins.getAdventureTaskName(value.f_LevelID);
            this.list.array = value.f_Reward.split("|");
            DotManager.removeDot(this.btn);
            this._activityVo = ActivityModel.Ins.getVo(EActivityType.KaiFuChongBang);
            if (this._activityVo) {
                let voo = this._activityVo.vo.datalist.find(item => item.id == value.f_id);
                if (voo) {
                    if (voo.param1 == 1) {
                        this.btn.disabled = true;
                        this.lab_btn.text = "已领取";
                    }
                    else if (voo.param1 == 2) {
                        this.btn.disabled = false;
                        this.lab_btn.text = "领取";
                        DotManager.addDot(this.btn);
                    }
                    else if (voo.param1 == 0) {
                        this.btn.disabled = true;
                        this.lab_btn.text = "领取";
                    }
                }
                else {
                    this.btn.disabled = true;
                    this.lab_btn.text = "领取";
                }
            }
            else {
                this.btn.disabled = true;
                this.lab_btn.text = "领取";
            }
        }
    }

    exports.KaiFuChongBangItem2 = KaiFuChongBangItem2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class KaiFuChongBangItem3 extends ui.views.kaifuchongbang.ui_KaiFuChongBangitem3UI {
        constructor() {
            super();
            this.list.itemRender = ui.views.main.ui_slot_itemUI;
            this.list.renderHandler = new Laya.Handler(this, this.onItemHandler);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
        }
        onBtnClick() {
            if (this._data) {
                ActivityModel.Ins.recharge(this._data.f_PurchaseID);
            }
        }
        onItemHandler(item) {
            let vo = new ItemVo();
            vo.cfgId = parseInt(item.dataSource.split("-")[0]);
            vo.count = parseInt(item.dataSource.split("-")[1]);
            ItemViewFactory.refreshSlot(item, vo);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.lab.text = value.f_PackName;
            let cfg = t_Purchase_PriceProxy.Ins.GetDataById(value.f_PurchaseID);
            this.cnYuan.text = StringUtil.moneyCv(cfg.f_price) + "元";
            this.list.array = value.f_Reward.split("|");
            this._activityVo = ActivityModel.Ins.getVo(EActivityType.KaiFuChongBang);
            if (this._activityVo) {
                let voo = this._activityVo.vo.datalist.find(item => item.id == value.f_id);
                if (voo) {
                    this.lab_xg.text = voo.param1 + "/" + value.f_LimitTimes;
                    if (voo.param1 >= value.f_LimitTimes) {
                        this.btn.disabled = true;
                    }
                    else {
                        this.btn.disabled = false;
                    }
                }
                else {
                    this.btn.disabled = true;
                }
            }
            else {
                this.btn.disabled = true;
            }
        }
    }

    exports.KaiFuChongBangItem3 = KaiFuChongBangItem3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class KaiFuChongBangView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("jjc.atlas");
            this.addAtlas("kaifuchongbang.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.kaifuchongbang.ui_KaiFuChongBangViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_rank, new Laya.Handler(this, this.onBtnRankClick));
                this._ui.tab1.visible = this._ui.tab2.visible = this._ui.tab3.visible = false;
                this._ui.view2.visible = false;
                this._ui.view3.visible = false;
                this._timeCtl = new TimeCtl(this._ui.timetf);
                this._ui.list.itemRender = KaiFuChongBangItem2;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemHandler);
                this._ui.list_lb.itemRender = KaiFuChongBangItem3;
                this._ui.list_lb.renderHandler = new Laya.Handler(this, this.onItemHandler1);
                this._item = new KaiFuChongBangCtl1(this._ui.item);
                this._item1 = new KaiFuChongBangCtl(this._ui.item2);
                this._item2 = new KaiFuChongBangCtl(this._ui.item1);
                this._item3 = new KaiFuChongBangCtl(this._ui.item3);
                this._ui.list_rank.itemRender = KaiFuChongBangItem1;
                this._ui.list_rank.renderHandler = new Laya.Handler(this, this.onItemRender);
            }
        }
        onInit() {
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.updataView);
            KaiFuChongBangModel.Ins.on(KaiFuChongBangModel.UpdataView_Rank, this, this.updataView);
            let req = new OpenServerAdventureRank_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.updataView);
            KaiFuChongBangModel.Ins.off(KaiFuChongBangModel.UpdataView_Rank, this, this.updataView);
            this._timeCtl.stop();
        }
        updataView() {
            this._activityVo = ActivityModel.Ins.getVo(EActivityType.KaiFuChongBang);
            if (!this._activityVo)
                return;
            let time = this._activityVo.vo.endtime - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
            if (KaiFuChongBangModel.Ins.isGuanKaRedTip()) {
                DotManager.addDot(this._ui.tab2);
            }
            else {
                DotManager.removeDot(this._ui.tab2);
            }
            this.updataRankView();
            this.updataVGView();
            this.updataLBView();
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        updataRankView() {
            let arr = [];
            for (let i = 0; i < KaiFuChongBangModel.Ins.rankList.length; i++) {
                if (KaiFuChongBangModel.Ins.rankList[i].ranking > 3) {
                    arr.push(KaiFuChongBangModel.Ins.rankList[i]);
                }
            }
            this._ui.list_rank.array = arr;
            if (KaiFuChongBangModel.Ins.self.length) {
                this._ui.item.visible = true;
                this._item.setData(KaiFuChongBangModel.Ins.self[0], 2);
            }
            else {
                this._ui.item.visible = false;
            }
            for (let i = 0; i < 3; i++) {
                if (KaiFuChongBangModel.Ins.top3[i]) {
                    this["_item" + (i + 1)].setData(KaiFuChongBangModel.Ins.top3[i]);
                }
                else {
                    this["_item" + (i + 1)].setData(null);
                }
            }
        }
        onItemRender(item) {
            item.ctl.setData(item.dataSource);
        }
        onBtnRankClick() {
            E.ViewMgr.Open(EViewType.KaiFuChongBangAwardView);
        }
        updataVGView() {
            let array = [];
            let arr = KFCBAdvantureRewardProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].f_Type == 1) {
                    array.push(arr[i]);
                }
            }
            this._ui.list.array = array;
        }
        onItemHandler(item) {
            item.setData(item.dataSource);
        }
        updataLBView() {
            let array = [];
            let arr = KFCBAdvantureRewardProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].f_Type == 2) {
                    array.push(arr[i]);
                }
            }
            this._ui.list_lb.array = array;
        }
        onItemHandler1(item) {
            item.setData(item.dataSource);
        }
    }

    exports.KaiFuChongBangView = KaiFuChongBangView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class KaiFuChongBangModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new KaiFuChongBangModule();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onMainViewInit);
            this.Reg(new KaiFuChongBangView(EViewType.KaiFuChongBangView));
            this.Reg(new KaiFuChongBangAwardView(EViewType.KaiFuChongBangAwardView));
            E.MsgMgr.AddMsg(MSGID.OpenServerAdventureRank, this.OpenServerAdventureRank, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (KaiFuChongBangModel.Ins.isRedTip()) {
                MainModel.Ins.funcSetRed(EFuncDef.KaiFuChongBang, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.KaiFuChongBang, false);
            }
        }
        OpenServerAdventureRank(value) {
            KaiFuChongBangModel.Ins.rankList = value.dataList;
            KaiFuChongBangModel.Ins.self = value.self;
            KaiFuChongBangModel.Ins.top3 = value.top3;
            KaiFuChongBangModel.Ins.event(KaiFuChongBangModel.UpdataView_Rank);
        }
    }

    exports.KaiFuChongBangModule = KaiFuChongBangModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LCZQRankModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new LCZQRankModel();
            }
            return this._ins;
        }
    }
    LCZQRankModel.UPDATA_VIEW = "UPDATA_VIEW";

    exports.LCZQRankModel = LCZQRankModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongXMItem extends ui.views.lingchong.ui_lingchongXMItemUI {
        constructor() {
            super();
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            this.on(Laya.Event.CLICK, this, this.onClick);
        }
        onAdd() {
            LingChongModel.Ins.on(LingChongModel.UPDATA_LEVEL_XM, this, this.onUpdataView);
        }
        onRemove() {
            LingChongModel.Ins.off(LingChongModel.UPDATA_LEVEL_XM, this, this.onUpdataView);
            if (this.eff) {
                this.eff.stop();
            }
        }
        playAnim() {
            if (!this.eff) {
                this.eff = new SimpleEffect(this.sp, "o/spine/change/change", this.sp.width / 2 + 1, this.sp.height / 2 + 1);
            }
            this.eff.play(0, false, null, null, null, true);
        }
        onUpdataView(index) {
            if (this._index == index) {
                this.playAnim();
            }
        }
        onClick(e) {
            if (this._dec) {
                e.stopPropagation();
                MainModel.Ins.showSmallTips("", this._dec, e.target);
            }
        }
        setData(value, index) {
            if (!value)
                return;
            this._index = index;
            if (value.data) {
                let data = PetTalentProxy.Ins.getCfgById(value.data.talentId);
                let id = parseInt(data.f_attr.split(":")[0]);
                let val = parseInt(data.f_attr.split(":")[1]) * value.data.talentLevel;
                this.quality.skin = IconUtils.getQuaIcon(data.f_quality);
                this.lab.text = MainModel.Ins.getAttrNameIdByID(id);
                this.lab_lv.text = "Lv." + value.data.talentLevel;
                this._dec = MainModel.Ins.getAttrNameIdByID(id) + ":" + attrConvert(id, val);
                this.wh.visible = false;
            }
            else {
                this.wh.visible = true;
                this.quality.skin = "remote/common/base/jiangli1.png";
                this.lab.text = "";
                this.lab_lv.text = "";
                this._dec = "";
            }
        }
    }

    exports.LingChongXMItem = LingChongXMItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LCZQRankTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('lingchong.atlas');
            this.addAtlas('jjcAttr.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lczqrank.lczqRankTipUI;
                this.bindClose(this._ui.btn_close);
                this._plusCtl = FontCtlFactory.createPlus();
                this._plusCtl1 = FontCtlFactory.createPlus();
                this._starMyCtl = new FuJiangStarCtl(this._ui.item.star);
                this._ui.list_attr.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
                this._ui.list_attr.renderHandler = new Laya.Handler(this, this.onRenderHandller1);
                this._ui.list_xm.itemRender = LingChongXMItem;
                this._ui.list_xm.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._starOtherCtl = new FuJiangStarCtl(this._ui.item1.star);
                this._ui.list_attr1.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
                this._ui.list_attr1.renderHandler = new Laya.Handler(this, this.onRenderHandller2);
                this._ui.list_xm1.itemRender = LingChongXMItem;
                this._ui.list_xm1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onRenderHandler(item, index) {
            item.setData(item.dataSource, index);
        }
        onRenderHandller1(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            let val1 = PlayerVoFactory.getEquipVal(this._list, id);
            if (val > val1) {
                item.upimg.skin = `remote/common/base/green.png`;
            }
            else if (val < val1) {
                item.upimg.skin = `remote/common/base/red.png`;
            }
            else {
                item.upimg.skin = "";
            }
        }
        onRenderHandller2(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.upimg.visible = false;
        }
        onInit() {
            MainModel.Ins.setTTHead(this._ui.icon, MainModel.Ins.mRoleData.headUrl);
            this._ui.nameTF.text = MainModel.Ins.mRoleData.getName();
            this._ui.lab.text = "(" + MainModel.Ins.mRoleData.serverName + ")";
            this._ui.img_title.skin = ChengHaoModel.Ins.getTitleImg(ChengHaoModel.Ins.wearedTitleId);
            let v = StringUtil.val2Atlas(MainModel.Ins.mRoleData.getBattleValue());
            this._plusCtl.setValue(this._ui.plusCon, v);
            let data = this.Data;
            MainModel.Ins.setTTHead(this._ui.icon1, MainModel.Ins.convertHead(data.HeadUrl));
            this._ui.nameTF1.text = data.NickName;
            this._ui.lab1.text = "(" + data.serverName + ")";
            this._ui.img_title1.skin = ChengHaoModel.Ins.getTitleImg(data.titleId);
            let vv = StringUtil.val2Atlas(data.plus);
            this._plusCtl1.setValue(this._ui.plusCon1, vv);
            this.updataView(data);
        }
        onExit() {
        }
        updataView(value) {
            let myData = LingChongModel.Ins.getSZPetData();
            if (myData) {
                this.setMyData(myData);
            }
            else {
                this._ui.item.visible = false;
                this._ui.lab_name.text = "";
                this._ui.list_attr.array = [];
                this._ui.list_xm.array = [];
                this._ui.item_jn.visible = false;
                this._ui.panel.visible = false;
            }
            if (value.petInfo.length) {
                this.setOtherData(value.petInfo[0]);
            }
            else {
                this._ui.item1.visible = false;
                this._ui.lab_name1.text = "";
                this._ui.list_attr1.array = [];
                this._ui.list_xm1.array = [];
                this._ui.item_jn1.visible = false;
                this._ui.panel1.visible = false;
            }
        }
        setMyData(value) {
            this._ui.item.visible = true;
            this._ui.item_jn.visible = true;
            this._ui.panel.visible = true;
            this._ui.item.jiao.visible = false;
            let cfg = PetListProxy.Ins.getCfgById(value.petId);
            this._ui.item.quality.skin = IconUtils.getQuaIcon(cfg.f_petquality);
            this._ui.item.icon.skin = PetListProxy.Ins.getPetIconById(cfg.f_petid);
            this._ui.item.lab_lv.text = "Lv." + value.petLevel;
            this._ui.item.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            this._ui.item.tab.img2.visible = false;
            if (value.petStar) {
                this._ui.item.sp.visible = true;
                this._ui.item.star.visible = true;
                this._starMyCtl.setStar(value.petStar);
            }
            else {
                this._ui.item.sp.visible = false;
                this._ui.item.star.visible = false;
            }
            this._ui.lab_name.text = cfg.f_petname;
            this._ui.list_attr.array = LingChongModel.Ins.getAttrArr(value.petId, value.petLevel, value.petStar);
            let array = [];
            for (let i = 0; i < value.petTalents.length; i++) {
                array.push({ data: value.petTalents[i] });
            }
            this._ui.list_xm.array = array;
            let sCfg = PetSkillClientProxy.Ins.getCfgById(cfg.f_petskillid);
            this._ui.item_jn.lab.text = sCfg.f_skillname;
            let lv = LingChongModel.Ins.getSkillLv(value.petStar);
            this._ui.item_jn.lab_lv.text = "Lv." + lv;
            this._ui.lab_jn.text = LingChongModel.Ins.getSkillDec(cfg.f_petskillid, lv);
        }
        setOtherData(value) {
            this._ui.item1.visible = true;
            this._ui.item_jn1.visible = true;
            this._ui.panel1.visible = true;
            this._ui.item1.jiao.visible = false;
            let cfg = PetListProxy.Ins.getCfgById(value.petId);
            this._ui.item1.quality.skin = IconUtils.getQuaIcon(cfg.f_petquality);
            this._ui.item1.icon.skin = PetListProxy.Ins.getPetIconById(cfg.f_petid);
            this._ui.item1.lab_lv.text = "Lv." + value.petLevel;
            this._ui.item1.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            this._ui.item1.tab.img2.visible = false;
            if (value.petStar) {
                this._ui.item1.sp.visible = true;
                this._ui.item1.star.visible = true;
                this._starOtherCtl.setStar(value.petStar);
            }
            else {
                this._ui.item1.sp.visible = false;
                this._ui.item1.star.visible = false;
            }
            this._ui.lab_name1.text = cfg.f_petname;
            let list = LingChongModel.Ins.getAttrArr(value.petId, value.petLevel, value.petStar);
            this._list = [];
            for (let i = 0; i < list.length; i++) {
                let e = new stEquipAttr;
                e.id = parseInt(list[i].split(":")[0]);
                e.value = parseInt(list[i].split(":")[1]);
                this._list.push(e);
            }
            this._ui.list_attr1.array = this._list;
            let array = [];
            for (let i = 0; i < value.petTalents.length; i++) {
                array.push({ data: value.petTalents[i] });
            }
            this._ui.list_xm1.array = array;
            let sCfg = PetSkillClientProxy.Ins.getCfgById(cfg.f_petskillid);
            this._ui.item_jn1.lab.text = sCfg.f_skillname;
            let lv = LingChongModel.Ins.getSkillLv(value.petStar);
            this._ui.item_jn1.lab_lv.text = "Lv." + lv;
            this._ui.lab_jn1.text = LingChongModel.Ins.getSkillDec(cfg.f_petskillid, lv);
        }
    }

    exports.LCZQRankTip = LCZQRankTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LCZQRankTip1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('jjcAttr.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lczqrank.lczqRankTip1UI;
                this.bindClose(this._ui.btn_close);
                this._plusCtl = FontCtlFactory.createPlus();
                this._plusCtl1 = FontCtlFactory.createPlus();
                this._ui.list1.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
                this._ui.list3.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
                this._ui.list3.renderHandler = new Laya.Handler(this, this.onSelfMountAttr);
                this._ui.list4.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
                this._ui.list4.renderHandler = new Laya.Handler(this, this.onAttrItemHandler1);
                this._ui.list6.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
                this._ui.list6.renderHandler = new Laya.Handler(this, this.onOtherMountAttr);
                this._ui.list2.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onAttrItemHandler2);
                this._ui.list5.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
                this._ui.list5.renderHandler = new Laya.Handler(this, this.onAttrItemHandler2);
            }
        }
        onOtherMountAttr(item) {
            this.refreshAttr(item);
            item.upimg.visible = false;
            let id = parseInt(item.dataSource.id);
            let value = this.Data;
            if (value.ride && value.ride.length > 0 && value.ride[0].attr && value.ride[0].attr.length > 0) {
                let equipVo = value.ride[0].attr[0];
                let qua = ZuoQiModel.Ins.getAttrQua(equipVo, id);
                this.updataCellView(item, qua);
            }
        }
        onSelfMountAttr(item) {
            this.refreshAttr(item);
            item.upimg.visible = false;
            let id = parseInt(item.dataSource.id);
            let qua = ZuoQiModel.Ins.rideVo.getAttrQua(id);
            this.updataCellView(item, qua);
        }
        updataCellView(item, qua) {
            let mColor = EquipmentQualityProxy.Ins.getByQuaDefault("#F9F0BB", qua);
            item.tf1.color = item.valTf.color = mColor;
        }
        refreshAttr(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            let val1 = PlayerVoFactory.getEquipVal(this._list, id);
            if (val > val1) {
                item.upimg.skin = `remote/common/base/green.png`;
            }
            else if (val < val1) {
                item.upimg.skin = `remote/common/base/red.png`;
            }
            else {
                item.upimg.skin = "";
            }
            item.tf1.color = item.valTf.color = "#F9F0BB";
        }
        onAttrItemHandler(item) {
            this.refreshAttr(item);
        }
        onAttrItemHandler1(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.upimg.visible = false;
        }
        onAttrItemHandler2(item) {
            let attrVo = item.dataSource;
            let id = attrVo.id;
            let val = attrVo.value;
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.upimg.visible = false;
            item.tf1.color = item.valTf.color = ZuoQiAttrCtl.getColor(attrVo.f_UnlockVal);
        }
        onInit() {
            MainModel.Ins.setTTHead(this._ui.icon, MainModel.Ins.mRoleData.headUrl);
            this._ui.nameTF.text = MainModel.Ins.mRoleData.getName();
            this._ui.lab.text = "(" + MainModel.Ins.mRoleData.serverName + ")";
            this._ui.img_title.skin = ChengHaoModel.Ins.getTitleImg(ChengHaoModel.Ins.wearedTitleId);
            let v = StringUtil.val2Atlas(MainModel.Ins.mRoleData.getBattleValue());
            this._plusCtl.setValue(this._ui.plusCon, v);
            let data = this.Data;
            MainModel.Ins.setTTHead(this._ui.icon1, MainModel.Ins.convertHead(data.HeadUrl));
            this._ui.nameTF1.text = data.NickName;
            this._ui.lab1.text = "(" + data.serverName + ")";
            this._ui.img_title1.skin = ChengHaoModel.Ins.getTitleImg(data.titleId);
            let vv = StringUtil.val2Atlas(data.plus);
            this._plusCtl1.setValue(this._ui.plusCon1, vv);
            this.updataView(data);
        }
        onExit() {
        }
        updataView(value) {
            this._ui.slot2.sel.visible = this._ui.slot2.ck.visible = this._ui.slot2.typename.visible = false;
            if (value.ride.length && value.ride[0].baseInfo) {
                this._ui.slot2.visible = true;
                this._ui.slot2.icon.skin = IconUtils.getHorseIcon(value.ride[0].baseInfo.id);
                this._ui.slot2.tf1.text = IconUtils.str2Lv(value.ride[0].baseInfo.lv);
                let cfg = Mount_ListProxy.Ins.getCfg(value.ride[0].baseInfo.id);
                this._ui.slot2.qua.skin = IconUtils.getQuaIcon(cfg.f_Quality);
                f_setStar(this._ui.slot2, value.ride[0].baseInfo.star);
                let ecfg = EquipmentQualityProxy.Ins.GetDataById(cfg.f_Quality);
                let color = QualityUtils.getQuaColor(cfg.f_Quality);
                this._ui.nameTf1.text = cfg.f_MountName;
                this._ui.quaTf1.text = ecfg.f_EquipmentLevel;
                this._ui.nameTf1.color = color;
                this._ui.quaTf1.color = color;
                let attr = value.ride[0].attr[0].attrList || [];
                this._list = this.getBase(attr);
                this._ui.list4.array = this._list;
                this._ui.list6.array = this.getOther(attr);
                let _rideVo = value.ride[0];
                this._ui.list5.array = Mount_ListProxy.Ins.getRideSpeclAttr(_rideVo.baseInfo.id, _rideVo.baseInfo.star);
            }
            else {
                this._ui.slot2.visible = false;
                this._ui.nameTf1.text = "";
                this._ui.quaTf1.text = "";
                this._ui.list4.array = [];
                this._ui.list5.array = [];
                this._ui.list6.array = [];
            }
            this._ui.slot1.sel.visible = this._ui.slot1.ck.visible = this._ui.slot1.typename.visible = false;
            if (ZuoQiModel.Ins.rideVo && ZuoQiModel.Ins.rideVo.equipVo) {
                this._ui.slot1.visible = true;
                this._ui.slot1.icon.skin = IconUtils.getHorseIcon(ZuoQiModel.Ins.rideVo.rideId);
                this._ui.slot1.tf1.text = IconUtils.str2Lv(ZuoQiModel.Ins.rideVo.lv);
                this._ui.slot1.qua.skin = IconUtils.getQuaIcon(ZuoQiModel.Ins.rideVo.quality);
                let zuoqiVo = ZuoQiModel.Ins.rideVo;
                f_setStar(this._ui.slot1, zuoqiVo.starLv);
                let cfg = Mount_ListProxy.Ins.getCfg(ZuoQiModel.Ins.rideVo.rideId);
                let ecfg = EquipmentQualityProxy.Ins.GetDataById(cfg.f_Quality);
                let color = QualityUtils.getQuaColor(cfg.f_Quality);
                this._ui.nameTf.text = cfg.f_MountName;
                this._ui.quaTf.text = ecfg.f_EquipmentLevel;
                this._ui.nameTf.color = color;
                this._ui.quaTf.color = color;
                let attr = ZuoQiModel.Ins.rideVo.equipVo.attrList || [];
                this._ui.list1.array = this.getBase(attr);
                this._ui.list3.array = this.getOther(attr);
                this._ui.list2.array = Mount_ListProxy.Ins.getRideSpeclAttr(zuoqiVo.rideId, zuoqiVo.starLv);
            }
            else {
                this._ui.slot1.visible = false;
                this._ui.nameTf.text = "";
                this._ui.quaTf.text = "";
                this._ui.list1.array = [];
                this._ui.list2.array = [];
                this._ui.list3.array = [];
            }
        }
        getBase(l) {
            let rs = [];
            let baseAttrList = Mount_ValueProxy.Ins.getAttrList();
            for (let i = 0; i < l.length; i++) {
                if (baseAttrList.indexOf(l[i].id) != -1) {
                    rs.push(l[i]);
                }
            }
            return rs;
        }
        getOther(l) {
            let rs = [];
            let baseAttrList = Mount_ValueProxy.Ins.getAttrList();
            for (let i = 0; i < l.length; i++) {
                if (baseAttrList.indexOf(l[i].id) == -1) {
                    rs.push(l[i]);
                }
            }
            return rs;
        }
    }

    exports.LCZQRankTip1 = LCZQRankTip1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LCRankCtl {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.CLICK, this, this.onClickHanlder);
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            this._starCtl = new FuJiangStarCtl(this._ui.star);
            this._ui.avatarCon.y = this._ui.avatarCon.y - 40;
        }
        onAdd() {
        }
        onRemove() {
            this.clearAvatar();
        }
        onClickHanlder() {
            if (this._data) {
                if (this._data.accountId != MainModel.Ins.mRoleData.mPlayer.AccountId) {
                    let req = new WatchSkyRank_req();
                    req.accountId = this._data.accountId;
                    req.serialNum = this._data.serialNum;
                    req.type = 2;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        setData(value) {
            if (value) {
                this._ui.visible = true;
                this._data = value;
                this._ui.icon1.skin = "remote/main/main/dfjjc_mc" + this._data.ranking + ".png";
                this._ui.nameTf.text = this._data.serverName + " " + this._data.nickName;
                this._starCtl.setStar(this._data.star);
                this._starCtl.centerX2();
                this.creatAvatar();
            }
            else {
                this._ui.visible = false;
                this.clearAvatar();
            }
        }
        creatAvatar() {
            if (!this._data)
                return;
            let cfg = PetListProxy.Ins.getCfgById(this._data.id);
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            this._avatar = AvatarFactory.createPet(cfg.f_petid);
            this._avatar.play(EAvatarAnim.HandBookStand);
            this._avatar.dir = EAvatarDir.Left;
            this._ui.avatarCon.addChild(this._avatar);
        }
        clearAvatar() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
    }

    exports.LCRankCtl = LCRankCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LCRankCtl1 {
        constructor(skin) {
            this._ui = skin;
            this._ui.quality.on(Laya.Event.CLICK, this, this.onClick1);
            this._starCtl = new FuJiangStarCtl(this._ui.star);
        }
        onClick() {
            if (this._data) {
                if (this._data.accountId != MainModel.Ins.mRoleData.mPlayer.AccountId) {
                    let req = new StarWatchPlayerInfo_req();
                    req.accountId = this._data.accountId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        onClick1() {
            if (this._data) {
                if (this._data.accountId != MainModel.Ins.mRoleData.mPlayer.AccountId) {
                    let req = new WatchSkyRank_req();
                    req.accountId = this._data.accountId;
                    req.serialNum = this._data.serialNum;
                    req.type = 2;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        setData(value, type = 1) {
            if (!value)
                return;
            this._data = value;
            if (this._data.ranking == 1 || this._data.ranking == 2 || this._data.ranking == 3) {
                this._ui.sp.visible = false;
                this._ui.paiming.skin = "remote/main/main/dfjjc_mc" + this._data.ranking + ".png";
            }
            else {
                this._ui.sp.visible = true;
                this._ui.paiming.skin = "";
                if (this._data.ranking <= 200) {
                    this._ui.mingcitf.text = this._data.ranking + "";
                }
                else {
                    this._ui.mingcitf.text = "200+";
                }
            }
            let cfg = PetListProxy.Ins.getCfgById(this._data.id);
            this._ui.quality.skin = IconUtils.getQuaIcon(cfg.f_petquality);
            this._ui.icon1.skin = PetListProxy.Ins.getPetIconById(cfg.f_petid);
            this._ui.lab_lv.text = "Lv." + this._data.level;
            this._starCtl.setStar(this._data.star);
            this._ui.lab_name.text = cfg.f_petname;
            this._ui.lab_name.color = QualityUtils.getQuaColor(cfg.f_petquality);
            MainModel.Ins.setTTHead(this._ui.icon, MainModel.Ins.convertHead(this._data.headUrl));
            this._ui.nameTf.text = this._data.nickName;
            this._ui.lab_qf.text = "(" + this._data.serverName + ")";
            if (type == 1) {
                this._ui.bg.skin = "remote/lczqrank/dfjjc_xs.png";
            }
            else {
                this._ui.bg.skin = "remote/lczqrank/dfjjc_xszj.png";
            }
        }
    }

    exports.LCRankCtl1 = LCRankCtl1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LCRankItem1 extends ui.views.lczqrank.lczqRankItem1UI {
        constructor() {
            super();
            this.ctl = new LCRankCtl1(this);
        }
    }

    exports.LCRankItem1 = LCRankItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZQRankCtl {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.CLICK, this, this.onClickHanlder);
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            this._plusCtl = FontCtlFactory.createPlus();
        }
        onAdd() {
        }
        onRemove() {
            this.clearAvatar();
        }
        onClickHanlder() {
            if (this._data) {
                if (this._data.accountId != MainModel.Ins.mRoleData.mPlayer.AccountId) {
                    let req = new WatchSkyRank_req();
                    req.accountId = this._data.accountId;
                    req.serialNum = this._data.serialNum;
                    req.type = 1;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        setData(value) {
            if (value) {
                this._ui.visible = true;
                this._data = value;
                this._ui.icon1.skin = "remote/main/main/dfjjc_mc" + this._data.ranking + ".png";
                this._ui.nameTf.text = this._data.serverName + " " + this._data.nickName;
                ItemViewFactory.setStar(this._ui.starcon, this._data.star, this._data.star, true, 0.7);
                let v = StringUtil.val2Atlas(value.plus);
                this._plusCtl.setValue(this._ui.plusCon, v);
                this.creatAvatar();
            }
            else {
                this._ui.visible = false;
                this.clearAvatar();
            }
        }
        creatAvatar() {
            if (!this._data)
                return;
            let skin = new stSkin();
            skin.f_MountID = this._data.id;
            if (!this._avatar) {
                this._avatar = AvatarFactory.createAvatarByStSkin(skin, EAvatarAnim.None);
                this._ui.avatarCon.addChild(this._avatar);
            }
            else {
                this._avatar.mSkin = skin;
            }
        }
        clearAvatar() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
    }

    exports.ZQRankCtl = ZQRankCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZQRankCtl1 {
        constructor(skin) {
            this._ui = skin;
            this._ui.quality.on(Laya.Event.CLICK, this, this.onClick1);
            this._plusCtl = FontCtlFactory.createPlus();
        }
        onClick() {
            if (this._data) {
                if (this._data.accountId != MainModel.Ins.mRoleData.mPlayer.AccountId) {
                    let req = new StarWatchPlayerInfo_req();
                    req.accountId = this._data.accountId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        onClick1() {
            if (this._data) {
                if (this._data.accountId != MainModel.Ins.mRoleData.mPlayer.AccountId) {
                    let req = new WatchSkyRank_req();
                    req.accountId = this._data.accountId;
                    req.serialNum = this._data.serialNum;
                    req.type = 1;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        setData(value, type = 1) {
            if (!value)
                return;
            this._data = value;
            if (this._data.ranking == 1 || this._data.ranking == 2 || this._data.ranking == 3) {
                this._ui.sp.visible = false;
                this._ui.paiming.skin = "remote/main/main/dfjjc_mc" + this._data.ranking + ".png";
            }
            else {
                this._ui.sp.visible = true;
                this._ui.paiming.skin = "";
                if (this._data.ranking <= 200) {
                    this._ui.mingcitf.text = this._data.ranking + "";
                }
                else {
                    this._ui.mingcitf.text = "200+";
                }
            }
            let cfg = Mount_ListProxy.Ins.getCfg(value.id);
            this._ui.quality.skin = IconUtils.getQuaIcon(cfg.f_Quality);
            this._ui.icon1.skin = IconUtils.getHorseIcon(cfg.f_MountID);
            this._ui.lab_lv.text = "Lv." + this._data.level;
            ItemViewFactory.setStar(this._ui.starcon, this._data.star, this._data.star, false);
            let v = StringUtil.val2Atlas(value.plus);
            this._plusCtl.setValue(this._ui.plusCon, v);
            this._ui.labname1.text = cfg.f_MountName;
            this._ui.labname1.color = QualityUtils.getQuaColor(cfg.f_Quality);
            MainModel.Ins.setTTHead(this._ui.icon, MainModel.Ins.convertHead(this._data.headUrl));
            this._ui.nameTf.text = this._data.nickName;
            this._ui.lab_qf.text = "(" + this._data.serverName + ")";
            if (type == 1) {
                this._ui.bg.skin = "remote/lczqrank/dfjjc_xs.png";
            }
            else {
                this._ui.bg.skin = "remote/lczqrank/dfjjc_xszj.png";
            }
        }
    }

    exports.ZQRankCtl1 = ZQRankCtl1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZQRankItem1 extends ui.views.lczqrank.lczqRankItem3UI {
        constructor() {
            super();
            this.ctl = new ZQRankCtl1(this);
        }
    }

    exports.ZQRankItem1 = ZQRankItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LCZQRankView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("jjc.atlas");
            this.addAtlas('jjcAttr.atlas');
            this.addAtlas("lczqrank.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lczqrank.lczqRankViewUI;
                this.bindClose(this._ui.btn_close);
                const tabsSkin = [this._ui.tab1, this._ui.tab2];
                this.tabList = ["灵宠", "坐骑"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._ui.list.itemRender = LCRankItem1;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list1.itemRender = ZQRankItem1;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
                this.lcItem = new LCRankCtl1(this._ui.sItem);
                this.lcItem1 = new LCRankCtl(this._ui.item1);
                this.lcItem2 = new LCRankCtl(this._ui.item2);
                this.lcItem3 = new LCRankCtl(this._ui.item3);
                this.zqItem = new ZQRankCtl1(this._ui.sItem1);
                this.zqItem1 = new ZQRankCtl(this._ui.item11);
                this.zqItem2 = new ZQRankCtl(this._ui.item22);
                this.zqItem3 = new ZQRankCtl(this._ui.item33);
                this._ui.title1.text = E.getLang("ranktitle1");
            }
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.txt.text = this.tabList[index];
            if (sel) {
                skin.img2.visible = true;
                skin.img1.visible = false;
                skin.txt.color = "#A1572F";
            }
            else {
                skin.img2.visible = false;
                skin.img1.visible = true;
                skin.txt.color = "#e4bb87";
            }
        }
        onTabSelectHandler(v) {
            if (v == -1)
                return;
            let req = new SkyRank_req;
            if (v == 0) {
                req.type = 2;
            }
            else {
                req.type = 1;
            }
            SocketMgr.Ins.SendMessageBin(req);
        }
        onInit() {
            LCZQRankModel.Ins.on(LCZQRankModel.UPDATA_VIEW, this, this.updataView);
            this._ui.sp.visible = false;
            this._ui.sp1.visible = false;
            this.tabsCtl.selectIndex = 0;
        }
        onExit() {
            LCZQRankModel.Ins.off(LCZQRankModel.UPDATA_VIEW, this, this.updataView);
            this.tabsCtl.selectIndex = -1;
        }
        onRenderHandler(item) {
            item.ctl.setData(item.dataSource);
        }
        onRenderHandler1(item) {
            item.ctl.setData(item.dataSource);
        }
        updataView(value) {
            if (value.type == 2) {
                this._ui.sp.visible = true;
                this._ui.sp1.visible = false;
                this.updataLCView(value);
            }
            else {
                this._ui.sp.visible = false;
                this._ui.sp1.visible = true;
                this.updataZQView(value);
            }
        }
        updataZQView(value) {
            let arr = [];
            let arr1 = [];
            for (let i = 0; i < value.dataList.length; i++) {
                if (value.dataList[i].ranking <= 3) {
                    arr.push(value.dataList[i]);
                }
                else {
                    arr1.push(value.dataList[i]);
                }
            }
            for (let i = 0; i < 3; i++) {
                if (arr[i]) {
                    this["zqItem" + (i + 1)].setData(arr[i]);
                }
                else {
                    this["zqItem" + (i + 1)].setData(null);
                }
            }
            this._ui.list1.array = arr1;
            if (value.self.length) {
                this._ui.sItem1.visible = true;
                this.zqItem.setData(value.self[0], 2);
            }
            else {
                this._ui.sItem1.visible = false;
            }
        }
        updataLCView(value) {
            let arr = [];
            let arr1 = [];
            for (let i = 0; i < value.dataList.length; i++) {
                if (value.dataList[i].ranking <= 3) {
                    arr.push(value.dataList[i]);
                }
                else {
                    arr1.push(value.dataList[i]);
                }
            }
            for (let i = 0; i < 3; i++) {
                if (arr[i]) {
                    this["lcItem" + (i + 1)].setData(arr[i]);
                }
                else {
                    this["lcItem" + (i + 1)].setData(null);
                }
            }
            this._ui.list.array = arr1;
            if (value.self.length) {
                this._ui.sItem.visible = true;
                this.lcItem.setData(value.self[0], 2);
            }
            else {
                this._ui.sItem.visible = false;
            }
        }
    }

    exports.LCZQRankView = LCZQRankView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LCZQRankModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new LCZQRankModule();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            this.Reg(new LCZQRankView(EViewType.LCZQRankView));
            this.Reg(new LCZQRankTip(EViewType.LCZQRankTip));
            this.Reg(new LCZQRankTip1(EViewType.LCZQRankTip1));
            E.MsgMgr.AddMsg(MSGID.SkyRank, this.SkyRank, this);
            E.MsgMgr.AddMsg(MSGID.WatchSkyRank, this.WatchSkyRank, this);
        }
        SkyRank(value) {
            LCZQRankModel.Ins.event(LCZQRankModel.UPDATA_VIEW, value);
        }
        WatchSkyRank(value) {
            if (value.type == 2) {
                E.ViewMgr.Open(EViewType.LCZQRankTip, null, value);
            }
            else {
                E.ViewMgr.Open(EViewType.LCZQRankTip1, null, value);
            }
        }
    }

    exports.LCZQRankModule = LCZQRankModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MountLiBaoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("libao.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.libao.ui_mountLiBaoViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
                this._ui.list.itemRender = ui.views.libao.ui_liBaoItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._timeCtl = new TimeCtl(this._ui.time1);
            }
        }
        onBtnClick() {
            if (!this._data)
                return;
            ActivityModel.Ins.recharge(this._data.f_PurchaseID);
        }
        onInit() {
            this.updataView();
        }
        onExit() {
            if (this.avatar) {
                this.avatar.dispose();
                this.avatar = null;
            }
            Laya.timer.clear(this, this.showAvatar);
            this._timeCtl.stop();
        }
        onRenderHandler(item) {
            let vo = new ItemVo();
            vo.cfgId = parseInt(item.dataSource.split("-")[0]);
            vo.count = parseInt(item.dataSource.split("-")[1]);
            ItemViewFactory.refreshSlot(item.item, vo);
            item.lab.text = vo.getName();
        }
        updataView() {
            this._data = LiBaoZSProxy.Ins.getCfgByType(1);
            if (!this._data)
                return;
            this._ui.list.array = this._data.f_Item.split("|");
            this._ui.lab.text = this._data.f_trueprice + "元";
            let purCfg = t_Purchase_PriceProxy.Ins.GetDataById(this._data.f_PurchaseID);
            this._ui.lab1.text = StringUtil.moneyCv(purCfg.f_price) + "元抢购";
            this._num = 0;
            this.showAvatar();
            Laya.timer.loop(2000, this, this.showAvatar);
            let vo = ActivityModel.Ins.getByUid(49);
            if (!vo)
                return;
            let time = vo.vo.endtime - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        showAvatar() {
            if (!this._data)
                return;
            let arr = this._data.f_ranID.split("|");
            if (this._num >= arr.length) {
                this._num = 0;
            }
            let id = parseInt(arr[this._num]);
            if (!this.avatar) {
                this.avatar = AvatarFactory.createRide(id);
                this._ui.sp.addChild(this.avatar);
                this.avatar.scale(2, 2);
            }
            else {
                let skin = new stSkin();
                skin.f_MountID = id;
                this.avatar.mSkin = skin;
            }
            this._num++;
        }
    }

    exports.MountLiBaoView = MountLiBaoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PetLiBaoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("libao.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.libao.ui_petLiBaoViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnCtl = ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
                this.rateCtl = new RateBtn01Ctl(this._ui.ratebtn, this, this.onBtnClick, ESkinRateBtn.Red);
                this._ui.list.itemRender = ui.views.libao.ui_liBaoItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._timeCtl = new TimeCtl(this._ui.time1);
            }
        }
        onBtnClick() {
            if (!this._data)
                return;
            ActivityModel.Ins.recharge(this._data.f_PurchaseID);
        }
        onInit() {
            this.updataView();
        }
        onExit() {
            this._timeCtl.stop();
        }
        onRenderHandler(item) {
            let vo = new ItemVo();
            vo.cfgId = parseInt(item.dataSource.split("-")[0]);
            vo.count = parseInt(item.dataSource.split("-")[1]);
            ItemViewFactory.refreshSlot(item.item, vo);
            item.lab.text = vo.getName();
        }
        updataView() {
            this._data = LiBaoZSProxy.Ins.getCfgByType(2);
            if (!this._data)
                return;
            this._ui.list.array = this._data.f_Item.split("|");
            this._ui.lab.text = this._data.f_trueprice + "元";
            let purCfg = t_Purchase_PriceProxy.Ins.GetDataById(this._data.f_PurchaseID);
            this._ui.lab1.text = StringUtil.moneyCv(purCfg.f_price) + "元抢购";
            let curBtn = this.btnCtl;
            if (purCfg.f_isVoucher == EShopPayType.Voucher) {
                curBtn = this.rateCtl.btnCtl;
                this.rateCtl.cfg = purCfg;
            }
            RateBtnUtils.Refresh(curBtn, this.btnCtl, this.rateCtl.btnCtl);
            let vo = ActivityModel.Ins.getByUid(49);
            if (!vo)
                return;
            let time = vo.vo.endtime - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
    }

    exports.PetLiBaoView = PetLiBaoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LiBaoModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new LiBaoModule();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            ActivityModel.Ins.on(ActivityEvent.OpenCloseStatusUpdate, this, this.onActivityUpdateData);
            this.Reg(new MountLiBaoView(EViewType.MountLiBaoView));
            this.Reg(new PetLiBaoView(EViewType.PetLiBaoView));
            E.MsgMgr.AddMsg(MSGID.PlayerTotalCnt, this.PlayerTotalCnt, this);
        }
        onActivityUpdateData() {
            if (LiBaoModel.Ins.isOpenByFid(49) == false) {
                E.ViewMgr.Close(EViewType.MountLiBaoView);
            }
            if (LiBaoModel.Ins.isOpenByFid(50) == false) {
                E.ViewMgr.Close(EViewType.PetLiBaoView);
            }
        }
        PlayerTotalCnt(value) {
            LiBaoModel.Ins.PlayerTotalCnt = value.totalCnt;
        }
    }

    exports.LiBaoModule = LiBaoModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongRH_Model extends BaseModel {
        constructor() {
            super(...arguments);
            this.DEALY_TIME = 1000;
            this.selIdList = [];
            this.isAuto = false;
        }
        ;
        static get Ins() {
            if (!this._ins) {
                this._ins = new LingChongRH_Model();
            }
            return this._ins;
        }
        getList() {
            let arr = [];
            let l = PetQualityProxy.Ins.List;
            let vo = new QuickQua();
            vo.f_id = 0;
            vo.txt = E.getLang("all");
            vo.color = "ffffff";
            arr.push(vo);
            for (let i = 0; i < l.length - 1; i++) {
                let cfg = l[i];
                let vo = new QuickQua();
                vo.f_id = cfg.f_id;
                vo.color = EquipmentQualityProxy.Ins.getByQua(cfg.f_quality).f_Color;
                vo.txt = cfg.f_qualityname;
                arr.push(vo);
            }
            return arr;
        }
        needCheckRh(pet) {
            let flag = false;
            if (pet.petLevel) {
                flag = true;
            }
            if (pet.petStar) {
                flag = true;
            }
            let num = 0;
            let talents = pet.petTalents;
            for (let j = 0; j < talents.length; j++) {
                num += talents[j].talentLevel;
            }
            if (num > talents.length) {
                flag = true;
            }
            return flag;
        }
        getListSel() {
            let arr = [];
            let l = PetQualityProxy.Ins.List;
            for (let i = 0; i < l.length - 1; i++) {
                let cfg = l[i];
                let vo = new QuickQua();
                vo.f_id = cfg.f_id;
                vo.color = EquipmentQualityProxy.Ins.getByQua(cfg.f_quality).f_Color;
                vo.txt = cfg.f_qualityname + E.getLang("petDec6");
                arr.push(vo);
            }
            return arr;
        }
        initMsg() {
            this.Reg(new LingChongSucceed(EViewType.LingChongRH_Succeed));
            this.Reg(new LingChongAutoHCTip(EViewType.LingChongAutoRh));
            E.MsgMgr.AddMsg(MSGID.PetFusion_revc, this.onPetFusion_revc, this);
        }
        onPetFusion_revc(revc) {
            let result = revc.result;
            this.openSucceedResult(revc);
            this.event(LingChongRH_Model.EVENT_UPDATE_FUSION, [result]);
        }
        openSucceedResult(_Data) {
            let type = EViewType.LingChongRH_Succeed;
            if (E.ViewMgr.isOpenReg(type)) {
                let view = E.ViewMgr.Get(type);
                view.refreshView(_Data);
            }
            else {
                E.ViewMgr.Open(type, null, _Data);
            }
        }
        get petList() {
            return LingChongModel.Ins.petDataList || [];
        }
        onInitCallBack() {
            this.clearSelIds();
            this.isAuto = false;
        }
        isSelect(id) {
            return this.selIdList.indexOf(id) >= 0;
        }
        setSelect(id) {
            let index = this.selIdList.indexOf(id);
            if (index == -1) {
                this.selIdList.push(id);
            }
        }
        canPushByQua(id) {
            if (this.selIdList.length <= 0) {
                return true;
            }
            let useID = this.selIdList[this.setSelect.length - 1];
            let cell = this.petList.find(item => item.petSerialNum == useID);
            if (cell) {
                let cfg = PetListProxy.Ins.getCfgById(cell.petId);
                let cell2 = this.petList.find(item => item.petSerialNum == id);
                let cfg2 = PetListProxy.Ins.getCfgById(cell2.petId);
                return cfg.f_petquality == cfg2.f_petquality;
            }
        }
        clearSelIds() {
            this.selIdList = [];
        }
        delSelect(id) {
            let index = this.selIdList.indexOf(id);
            if (index >= 0) {
                this.selIdList.splice(index, 1);
            }
        }
    }
    LingChongRH_Model.EVENT_UPDATE_FUSION = "EVENT_SUCCEED_FUSION";
    class LingChongSucceed extends ViewBase {
        constructor() {
            super(...arguments);
            this.PageType = EPageType.None;
        }
        onAddLoadRes() { }
        onExit() {
            this.disposeAvatar();
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = LingChongRH_Model.Ins;
                this.UI = this._ui = new ui.views.lingchong.ui_lingchong_RH_succeedUI();
                this.mMask = true;
                this.mClickAnyAreaClose = true;
                this._ui.list1.itemRender = ui.views.lingchong.ui_lingchong_attr1UI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        playCongratulatEffect() {
            if (!this.congratulatEffect) {
                this.congratulatEffect = new SimpleEffect(this._ui.effcon, "o/spine/cardgongxi/cardgongxi");
            }
            this.congratulatEffect.play(0, false, this, this.onPlayEnd, null, true);
        }
        onPlayEnd() {
        }
        onRenderHandler(item) {
            let data = item.dataSource;
            let arr = data.split(":");
            let id = parseInt(arr[0]);
            let val = parseInt(arr[1]);
            item.nameTf.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
        }
        disposeAvatar() {
            if (this._petAvatar) {
                this._petAvatar.dispose();
                this._petAvatar = null;
            }
        }
        onInit() {
            this.refreshView(this.Data);
        }
        refreshView(_serverData) {
            this._ui.succeed.visible = false;
            this._ui.fail.visible = false;
            if (_serverData.result) {
                let id = _serverData.petSerialNum;
                let _petVo = this.model.petList.find(item => item.petSerialNum == id);
                if (!_petVo) {
                    return;
                }
                this._vo = _petVo;
                this._ui.succeed.visible = true;
                this.disposeAvatar();
                this._petAvatar = AvatarFactory.createPet(this._vo.petId);
                this._ui.ani.addChild(this._petAvatar);
                let cfg = PetListProxy.Ins.getCfgById(this._vo.petId);
                let sCfg = PetSkillClientProxy.Ins.getCfgById(cfg.f_petskillid);
                this._ui.skillTf.text = sCfg.f_skillname;
                let skillLv = LingChongModel.Ins.getSkillLv(this._vo.petStar);
                this._ui.lvTf.text = "Lv." + skillLv;
                this._ui.nametf.text = cfg.f_petname;
                this._ui.nametf.color = "#" + EquipmentQualityProxy.Ins.getByQua(cfg.f_petquality).f_Color;
                this._ui.desctf.text = LingChongModel.Ins.getSkillDec(cfg.f_petskillid, skillLv);
                this._ui.tf2.text = E.getLang("petDec3", cfg.f_talentslot);
                let attrlist = LingChongModel.Ins.getAttrArr(cfg.f_petid, this._vo.petLevel, this._vo.petStar);
                this._ui.list1.array = attrlist;
                this.playCongratulatEffect();
                ItemViewFactory.renderItemSlots(this._ui.rewardCon, _serverData.rewardList);
            }
            else {
                this._ui.fail.visible = true;
                ItemViewFactory.renderItemSlots(this._ui.reward, _serverData.rewardList);
            }
            if (this.model.isAuto) {
                Laya.timer.once(this.model.DEALY_TIME, this, this.onGoonHander);
            }
        }
        onGoonHander() {
            this.model.view.refreshAuto();
        }
    }
    class LingChongRhItem extends ui.views.lingchong.ui_lingchongRHItemUI {
        constructor() {
            super();
            this.ctl = new LingChongItemCtl(this, ELingChongSkin.Normal);
            this.model = LingChongRH_Model.Ins;
        }
        refresh() {
            this.plus.visible = false;
            let vo = this.dataSource;
            this.vo = vo;
            this.ctl.refresh(vo);
        }
    }
    var ELingChongSkin;
    (function (ELingChongSkin) {
        ELingChongSkin[ELingChongSkin["Top"] = 0] = "Top";
        ELingChongSkin[ELingChongSkin["Normal"] = 1] = "Normal";
    })(ELingChongSkin || (ELingChongSkin = {}));
    class LingChongItemCtl {
        constructor(skin, skinType) {
            this.model = LingChongRH_Model.Ins;
            this.skinType = skinType;
            this.skin = skin;
            this.starCtl = new FuJiangStarCtl(this.skin.star);
            this.skin.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler(e) {
            if (this.skinType == ELingChongSkin.Normal) {
                let sel = !this.model.isSelect(this.vo.petSerialNum);
                if (sel) {
                    if (this.model.view.selList.length >= 2) {
                        return;
                    }
                }
                if (sel) {
                    if (this.model.canPushByQua(this.vo.petSerialNum)) {
                        this.model.setSelect(this.vo.petSerialNum);
                    }
                    else {
                        E.ViewMgr.ShowMidError(E.getLang("petDec10"));
                        return;
                    }
                }
                else {
                    this.model.delSelect(this.vo.petSerialNum);
                }
                this.model.view.refreshList(this.vo, sel);
            }
            else if (this.skinType == ELingChongSkin.Top) {
                if (this.vo) {
                    this.model.delSelect(this.vo.petSerialNum);
                    this.model.view.refreshList(this.vo, false);
                }
            }
        }
        refresh(vo) {
            this.vo = vo;
            this.skin.mask1.visible = false;
            this.skin.gou1.visible = false;
            this.skin.lab_lv.visible = false;
            this.skin.icon.visible = false;
            this.skin.plus.visible = false;
            this.skin.starBg.visible = false;
            if (vo) {
                this.skin.star.visible = true;
                if (vo.petStar) {
                    this.skin.starBg.visible = true;
                }
                this.starCtl.setStar(vo.petStar);
                let cfg = PetListProxy.Ins.getCfgById(vo.petId);
                this.skin.icon.visible = true;
                this.skin.icon.skin = PetListProxy.Ins.getPetIconById(vo.petId);
                this.skin.quality.skin = IconUtils.getQuaIcon(cfg.f_petquality);
                this.skin.lab_lv.visible = true;
                this.skin.lab_lv.text = `Lv.${vo.petLevel}`;
                if (this.skinType == ELingChongSkin.Normal) {
                    if (this.model.isSelect(this.vo.petSerialNum)) {
                        this.skin.mask1.visible = true;
                        this.skin.gou1.visible = true;
                    }
                }
                this.skin.tab.visible = true;
                this.skin.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
                this.skin.tab.img2.visible = false;
            }
            else {
                this.skin.plus.visible = true;
                this.skin.star.visible = false;
                this.skin.quality.skin = `remote/common/base/jiangli1.png`;
                this.skin.tab.visible = false;
            }
        }
        refreshSkin() {
            if (this.vo && !this.model.isSelect(this.vo.petSerialNum)) {
                this.refresh(null);
            }
        }
    }
    class LingChongViewCtl2 {
        constructor(skin) {
            this.MAX_COUNT = 2;
            this.topList = [];
            this.selCtl = new SelectListCtl();
            this.skin = skin;
            this.model = LingChongRH_Model.Ins;
            this.model.view = this;
            this._ui = skin;
            for (let i = 0; i < 2; i++) {
                let item = new LingChongItemCtl(skin['item' + i], ELingChongSkin.Top);
                this.topList.push(item);
            }
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            ButtonCtl.CreateBtn(skin.tujian, this, this.onTuJian);
            ButtonCtl.CreateBtn(skin.zidongrh, this, this.onAutoHandle);
            ButtonCtl.CreateBtn(skin.ronghe, this, this.onRongHe);
            ButtonCtl.CreateBtn(skin.btn_cq, this, this.onCuiQU);
            ValCtl.Create(this._ui.moneyTf, this._ui.moneyIcon, ECellType.LingChongSMJH);
            this.skin.descTf.text = E.getLang("petDec7");
            this.selCtl.dirBottom = true;
            this.selCtl.mCompose = true;
            this.selCtl.init(skin.qualist.sj0, skin.qualist.listarea0, skin.qualist.listcon0, skin.qualist.tf0, ui.views.lingchong.ui_lingchong_list_attrUI, this.model.getList());
            this.selCtl.selectHandler = new Laya.Handler(this, this.onQuaSelHandler);
            skin.list1.itemRender = LingChongRhItem;
            skin.list1.renderHandler = new Laya.Handler(this, this.itemHadnler);
            ButtonCtl.CreateBtn(skin.yijianfang, this, this.onYiJiangHandler);
            this.exchangeBtnCtl = ButtonCtl.CreateBtn(this._ui.exchangeBtn, this, this.onExchangeEvt);
            if (initConfig.clienttype == EClientType.Discount) {
                this._ui.moneyCon.visible = false;
                this.exchangeBtnCtl.visible = false;
            }
        }
        onExchangeEvt() {
            E.ViewMgr.Open(EViewType.LingChongExchange);
        }
        onRongHe() {
            let ids = [];
            let needAlert;
            for (let i = 0; i < this.topList.length; i++) {
                let vo = this.topList[i].vo;
                if (vo) {
                    ids.push(vo.petSerialNum);
                    if (this.model.needCheckRh(vo)) {
                        needAlert = true;
                    }
                }
            }
            if (needAlert) {
                MainModel.Ins.queryMsg(E.getLang("petDec11"), 0, 0, EQuickMsg.NULL, new Laya.Handler(this, this.okRongHe, [ids]));
            }
            else {
                this.okRongHe(ids);
            }
        }
        onCuiQU() {
            E.ViewMgr.Open(EViewType.LingChongCQView);
        }
        okRongHe(ids) {
            if (ids.length >= 2) {
                let req = new PetFusion_req();
                req.isAuto = this.model.isAuto ? 1 : 0;
                req.datalist = ids;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onAutoHandle() {
            this.clearRongHeUI();
            E.ViewMgr.Open(EViewType.LingChongAutoRh);
        }
        action(resList) {
            let petMap = {};
            const maxCount = this.MAX_COUNT;
            for (let i = resList.length - 1; i >= 0; i--) {
                let cell = resList[i];
                let cfg = PetListProxy.Ins.getCfgById(cell.petId);
                if (!petMap[cfg.f_petquality]) {
                    petMap[cfg.f_petquality] = [];
                }
                petMap[cfg.f_petquality].push(cell);
            }
            let myArr = null;
            for (let qua in petMap) {
                let petList = petMap[qua];
                if (petList.length >= maxCount) {
                    myArr = petList;
                    break;
                }
            }
            return myArr;
        }
        isCanRongHeByQua() {
            let l = this.skin.list1.array;
            let resList = [];
            for (let i = 0; i < l.length; i++) {
                let vo = this.skin.list1.array[i];
                if (this.model.needCheckRh(vo)) ;
                else {
                    let cfg = PetListProxy.Ins.getCfgById(vo.petId);
                    if (cfg.f_petquality <= this.model.autoView.quality) {
                        resList.push(vo);
                    }
                }
            }
            if (resList.length < this.MAX_COUNT) {
                return false;
            }
            return true;
        }
        err() {
            if (this.model.isAuto) {
                E.ViewMgr.ShowMidError(E.getLang("petDec8"));
            }
            else {
                E.ViewMgr.ShowMidError(E.getLang("petDec2"));
            }
            this.setAuto(false);
        }
        onYiJiangHandler() {
            let id1 = 0;
            let id2 = 0;
            if (this.topList[0].vo) {
                id1 = this.topList[0].vo.petSerialNum;
            }
            if (this.topList[1].vo) {
                id2 = this.topList[1].vo.petSerialNum;
            }
            let l = this.skin.list1.array;
            if (id1 == 0 && id2 == 0) {
                let resList = [];
                for (let i = 0; i < l.length; i++) {
                    let vo = this.skin.list1.array[i];
                    if (this.model.needCheckRh(vo)) ;
                    else {
                        if (this.model.isAuto) {
                            let cfg = PetListProxy.Ins.getCfgById(vo.petId);
                            if (cfg.f_petquality <= this.model.autoView.quality) {
                                resList.push(vo);
                            }
                        }
                        else {
                            resList.push(vo);
                        }
                    }
                }
                if (resList.length < this.MAX_COUNT) {
                    this.err();
                }
                else {
                    let myArr = this.action(resList);
                    if (myArr) {
                        for (let i = 0; i < this.MAX_COUNT; i++) {
                            let cell = myArr[i];
                            this.model.setSelect(cell.petSerialNum);
                            this.topList[i].refresh(cell);
                        }
                        this.skin.list1.refresh();
                    }
                    else {
                        this.err();
                    }
                }
            }
            else if (id1 != 0 && id2 != 0) {
                this.err();
            }
            else {
                let id = 0;
                let index;
                if (id1) {
                    id = id1;
                    index = 1;
                }
                if (id2) {
                    id = id2;
                    index = 0;
                }
                let petVo = this.model.petList.find(item => item.petSerialNum == id);
                if (petVo) {
                    let cfg1 = PetListProxy.Ins.getCfgById(petVo.petId);
                    let resList = [];
                    for (let i = 0; i < l.length; i++) {
                        let vo = this.skin.list1.array[i];
                        if (this.model.needCheckRh(vo)) ;
                        else {
                            if (this.model.isSelect(vo.petSerialNum)) ;
                            else {
                                let cfg = PetListProxy.Ins.getCfgById(vo.petId);
                                if (cfg.f_petquality == cfg1.f_petquality) {
                                    resList.push(vo);
                                }
                            }
                        }
                    }
                    if (resList.length > 0) {
                        let cell = resList[0];
                        this.model.setSelect(cell.petSerialNum);
                        this.topList[index].refresh(cell);
                        this.skin.list1.refresh();
                    }
                    else {
                        this.err();
                    }
                }
            }
            this.updateSucceedProbability();
        }
        itemHadnler(item) {
            item.refresh();
        }
        refreshList(vo, sel) {
            this.skin.list1.refresh();
            if (sel) {
                let item = this.getCanUse();
                if (item) {
                    item.refresh(vo);
                }
            }
            else {
                for (let i = 0; i < this.topList.length; i++) {
                    let item = this.topList[i];
                    if (item.vo && item.vo.petSerialNum == vo.petSerialNum) {
                        item.refresh(null);
                    }
                }
            }
            this.updateSucceedProbability();
        }
        getCanUse() {
            for (let i = 0; i < this.topList.length; i++) {
                let item = this.topList[i];
                if (!item.vo) {
                    return item;
                }
            }
        }
        get selList() {
            let l = [];
            for (let i = 0; i < this.skin.list1.array.length; i++) {
                let vo = this.skin.list1.array[i];
                if (this.model.isSelect(vo.petSerialNum)) {
                    l.push(vo);
                }
            }
            return l;
        }
        updateSucceedProbability() {
            let petid = 0;
            for (let i = 0; i < this.topList.length; i++) {
                let vo = this.topList[i].vo;
                if (vo) {
                    petid = vo.petId;
                    break;
                }
            }
            let str;
            if (petid) {
                let cfg = PetListProxy.Ins.getCfgById(petid);
                let pCfg = t_Pet_Fusion_Rate.Ins.getByLv(cfg.f_petquality + 1);
                if (pCfg) {
                    str = E.getLang("petDec5") + (pCfg.f_fusionrate_Client / 100) + "%";
                }
            }
            if (str) {
                this._ui.succeedProbabilityTf.visible = true;
                this._ui.succeedProbabilityTf.text = str;
            }
            else {
                this._ui.succeedProbabilityTf.visible = false;
            }
            this.onPetTip();
        }
        getPetListByQua(qua) {
            let petList = [];
            let l = this.model.petList;
            if (qua == 0) {
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    if (cell.onBattle) ;
                    else {
                        petList.push(cell);
                    }
                }
            }
            else {
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    if (cell.onBattle) ;
                    else {
                        let cfg = PetListProxy.Ins.getCfgById(cell.petId);
                        if (cfg.f_petquality == qua) {
                            petList.push(cell);
                        }
                    }
                }
            }
            return petList;
        }
        onQuaSelHandler() {
            let quaCfg = this.selCtl.selectVo;
            LingChongModel.Ins.petDataList.sort(LingChongModel.Ins.petSort);
            let l = this.getPetListByQua(quaCfg.f_id);
            this.skin.list1.array = l;
            this.skin.list1.scrollTo(0);
        }
        onTuJian() {
            E.ViewMgr.Open(EViewType.LingChongTJView);
        }
        onAdd() {
            this.selCtl.selectIndex(0);
            this.clearTop();
            this.model.on(LingChongRH_Model.EVENT_UPDATE_FUSION, this, this.onSucceedHandler);
            LingChongModel.Ins.on(LingChongModel.REMOVE_LingChong, this, this.onSucceedHandler);
            MainModel.Ins.on(MainEvent.EventPetFusionBaoDi, this, this.onPetTip);
            this.onPetTip();
        }
        onPetTip() {
            let petid = 0;
            for (let i = 0; i < this.topList.length; i++) {
                let vo = this.topList[i].vo;
                if (vo) {
                    petid = vo.petId;
                    break;
                }
            }
            let str = "";
            if (petid) {
                let cfg = PetListProxy.Ins.getCfgById(petid);
                let qua = cfg.f_petquality + 1;
                let pCfg = t_Pet_Fusion_Rate.Ins.getByLv(qua);
                if (pCfg) {
                    let quaName = EquipmentQualityProxy.Ins.getByQua(qua).f_EquipmentLevel;
                    let baodi = MainModel.Ins.getLvByQuaPet(qua);
                    if (baodi == null) ;
                    else {
                        if (baodi == 0) {
                            str = E.getLang("pet08", quaName);
                        }
                        else {
                            str = E.getLang("pet07") + baodi + E.getLang("pet09", quaName);
                        }
                    }
                }
            }
            this._ui.outTf.text = str;
        }
        clearTop() {
            for (let i = 0; i < this.topList.length; i++) {
                this.topList[i].refresh(null);
            }
            this._ui.succeedProbabilityTf.visible = false;
        }
        clearRongHeUI() {
            this.model.clearSelIds();
            this.onQuaSelHandler();
            this.clearTop();
        }
        onSucceedHandler(result) {
            this.clearRongHeUI();
            if (result == 0) {
                Laya.timer.once(this.model.DEALY_TIME, this, this.refreshAuto);
            }
        }
        onRemove() {
            this.setAuto(false);
            this.model.selIdList = [];
            this.model.off(LingChongRH_Model.EVENT_UPDATE_FUSION, this, this.onSucceedHandler);
            LingChongModel.Ins.off(LingChongModel.REMOVE_LingChong, this, this.onSucceedHandler);
            MainModel.Ins.off(MainEvent.EventPetFusionBaoDi, this, this.onPetTip);
        }
        setAuto(v) {
            this.model.isAuto = v;
            this.refreshAuto();
            if (v) ;
            else {
                if (this.model.autoView) {
                    this.model.autoView.clearClickEvt();
                }
                E.ViewMgr.Close(EViewType.LingChongRH_Succeed);
            }
        }
        refreshAuto() {
            if (this.model.isAuto) {
                LingChongModel.Ins.petDataList.sort(LingChongModel.Ins.petSort);
                let l = this.getPetListByQua(0);
                this.skin.list1.array = l;
                this.skin.list1.scrollTo(0);
                this.clearTop();
                this.onYiJiangHandler();
                this.onRongHe();
            }
        }
    }
    class LingChongAutoHCTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.selCtl = new SelectListCtl();
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.model = LingChongRH_Model.Ins;
                this.model.autoView = this;
                this.UI = this._ui = new ui.views.lingchong.ui_lingchongAutoHCTipUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.startBtn, new Laya.Handler(this, this.onBtnClick));
                this.selCtl.dirBottom = true;
                this.selCtl.init(this._ui.sanjiao, this._ui.listarea, this._ui.listcontainer, this._ui.listtf, ui.views.main.ui_quick_setting_list_attrUI, this.model.getListSel());
                this.selCtl.selectHandler = new Laya.Handler(this, this.onQuaSelHandler);
                this._ui.bg.alpha = 0.1;
                this.bindClose(this._ui.bg);
            }
        }
        onBtnClick() {
            let view = this.model.view;
            if (view) {
                if (!view.isCanRongHeByQua()) {
                    E.ViewMgr.ShowMidError(E.getLang("pet01"));
                    this.Close();
                    return;
                }
                Laya.timer.callLater(this, this.addClick);
                view.setAuto(true);
                this.Close();
            }
        }
        addClick() {
            this._ui.on(Laya.Event.CLICK, this, this.onStageClick);
        }
        onStageClick() {
            this.model.view.setAuto(false);
            LogSys$1.Log("onStageClick false");
        }
        clearClickEvt() {
            this._ui.off(Laya.Event.CLICK, this, this.onStageClick);
        }
        onQuaSelHandler() {
            let quaCfg = this.selCtl.selectVo;
        }
        get quality() {
            let quaCfg = this.selCtl.selectVo;
            let cfg = PetQualityProxy.Ins.GetDataById(quaCfg.f_id);
            return cfg.f_quality;
        }
        getSelIndex() {
            let fid = 1;
            let datalist = this.selCtl.curDataList;
            for (let i = 0; i < datalist.length; i++) {
                let quaCfg = datalist[i];
                if (quaCfg.f_id == fid) {
                    return i;
                }
            }
            return 0;
        }
        onInit() {
            let index = this.getSelIndex();
            this.selCtl.selectIndex(index);
        }
        onExit() {
        }
    }

    exports.LingChongRH_Model = LingChongRH_Model;
    exports.LingChongViewCtl2 = LingChongViewCtl2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongItem2 extends ui.views.lingchong.ui_lingchongItem2UI {
        constructor() {
            super();
            this._starCtl = new FuJiangStarCtl(this.star);
        }
        setData(value, flag) {
            if (!value)
                return;
            let cfg = PetListProxy.Ins.getCfgById(value.petId);
            this.quality.skin = IconUtils.getQuaIcon(cfg.f_petquality);
            this.icon.skin = PetListProxy.Ins.getPetIconById(cfg.f_petid);
            this.lab_lv.text = "Lv." + value.petLevel;
            if (value.petStar) {
                this.sp.visible = true;
                this.star.visible = true;
                this._starCtl.setStar(value.petStar);
            }
            else {
                this.sp.visible = false;
                this.star.visible = false;
            }
            this.tab.visible = true;
            this.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            this.tab.img2.visible = false;
            if (flag) {
                this.mask1.visible = this.gou1.visible = true;
            }
            else {
                this.mask1.visible = this.gou1.visible = false;
            }
        }
    }

    exports.LingChongItem2 = LingChongItem2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongCQView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.selCtl = new SelectListCtl();
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lingchong.ui_lingchongCuiQuViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_cq, new Laya.Handler(this, this.onBtnCQClick));
                ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick));
                this.selCtl.dirBottom = true;
                this.selCtl.mCompose = true;
                this.selCtl.init(this._ui.qualist.sj0, this._ui.qualist.listarea0, this._ui.qualist.listcon0, this._ui.qualist.tf0, ui.views.lingchong.ui_lingchong_list_attrUI, this.getList());
                this.selCtl.selectHandler = new Laya.Handler(this, this.onQuaSelHandler);
                this._ui.list.itemRender = LingChongItem2;
                this._ui.list.renderHandler = new Laya.Handler(this, this.itemHadnler);
                this._ui.list.selectEnable = true;
                this._ui.list.selectHandler = new Laya.Handler(this, this.onSelectHandller);
                this._starCtl = new FuJiangStarCtl(this._ui.item.star);
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("petCQTitle", "petCQDec");
        }
        onBtnCQClick() {
            if (!this._selectData)
                return;
            let flag = false;
            if (this._selectData.petLevel) {
                flag = true;
            }
            if (this._selectData.petStar) {
                flag = true;
            }
            let num = 0;
            let talents = this._selectData.petTalents;
            for (let j = 0; j < talents.length; j++) {
                num += talents[j].talentLevel;
            }
            if (num > talents.length) {
                flag = true;
            }
            if (flag) {
                MainModel.Ins.queryMsg("选择灵宠已升级、觉醒或升星!萃取后只返还部分养成素材,是否确认萃取？", 0, 0, EQuickMsg.NULL, new Laya.Handler(this, this.sendCmd));
            }
            else {
                this.sendCmd();
            }
        }
        sendCmd() {
            let req = new PetDecompose_req;
            req.petSerialNum = this._selectData.petSerialNum;
            SocketMgr.Ins.SendMessageBin(req);
        }
        getList() {
            let arr = [];
            let l = PetQualityProxy.Ins.List;
            let vo = new QuickQua();
            vo.f_id = 0;
            vo.txt = E.getLang("all");
            vo.color = "ffffff";
            arr.push(vo);
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                let vo = new QuickQua();
                vo.f_id = cfg.f_id;
                vo.color = EquipmentQualityProxy.Ins.getByQua(cfg.f_quality).f_Color;
                vo.txt = cfg.f_qualityname;
                arr.push(vo);
            }
            return arr;
        }
        onQuaSelHandler() {
            let quaCfg = this.selCtl.selectVo;
            LingChongModel.Ins.petDataList.sort(LingChongModel.Ins.petSort);
            let l = this.getPetListByQua(quaCfg.f_id);
            this._ui.list.array = l;
            this._ui.list.scrollTo(0);
        }
        getPetListByQua(qua) {
            let petList = [];
            let l = LingChongModel.Ins.petDataList;
            if (qua == 0) {
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    if (cell.onBattle) ;
                    else {
                        petList.push(cell);
                    }
                }
            }
            else {
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    if (cell.onBattle) ;
                    else {
                        let cfg = PetListProxy.Ins.getCfgById(cell.petId);
                        if (cfg.f_petquality == qua) {
                            petList.push(cell);
                        }
                    }
                }
            }
            return petList;
        }
        itemHadnler(item, index) {
            if (this._selectData && this._selectData == item.dataSource) {
                item.setData(item.dataSource, true);
            }
            else {
                item.setData(item.dataSource, false);
            }
        }
        onSelectHandller(index) {
            if (index == -1)
                return;
            let data = this._ui.list.array[index];
            if (this._selectData && this._selectData == data) {
                this._selectData = null;
            }
            else {
                this._selectData = data;
            }
            this.updataItem();
            this._ui.list.selectedIndex = -1;
        }
        updataItem() {
            if (this._selectData) {
                this._ui.item.visible = true;
                let cfg = PetListProxy.Ins.getCfgById(this._selectData.petId);
                this._ui.item.quality.skin = IconUtils.getQuaIcon(cfg.f_petquality);
                this._ui.item.icon.skin = PetListProxy.Ins.getPetIconById(cfg.f_petid);
                this._ui.item.lab_lv.text = "Lv." + this._selectData.petLevel;
                if (this._selectData.petStar) {
                    this._ui.item.sp.visible = true;
                    this._ui.item.star.visible = true;
                    this._starCtl.setStar(this._selectData.petStar);
                }
                else {
                    this._ui.item.sp.visible = false;
                    this._ui.item.star.visible = false;
                }
                this._ui.item.tab.visible = true;
                this._ui.item.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
                this._ui.item.tab.img2.visible = false;
                this._ui.item.mask1.visible = this._ui.item.gou1.visible = false;
            }
            else {
                this._ui.item.visible = false;
            }
        }
        onInit() {
            LingChongModel.Ins.on(LingChongModel.REMOVE_LingChong, this, this.onUpdataView);
            this.selCtl.selectIndex(0);
            this._selectData = null;
            this.updataItem();
        }
        onUpdataView() {
            this._selectData = null;
            this.updataItem();
            this.onQuaSelHandler();
        }
        onExit() {
            LingChongModel.Ins.off(LingChongModel.REMOVE_LingChong, this, this.onUpdataView);
            this._ui.list.selectedIndex == -1;
        }
    }

    exports.LingChongCQView = LingChongCQView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongCZView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lingchong.ui_lingchongCZViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_qx, new Laya.Handler(this, this.onBtnQXClick));
                ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick));
            }
        }
        onBtnQXClick() {
            this.Close();
        }
        onBtnQDClick() {
            if (this._data) {
                let req = new PetRebirth_req;
                req.petSerialNum = this._data.petSerialNum;
                SocketMgr.Ins.SendMessageBin(req);
                this.Close();
            }
        }
        onInit() {
            this._data = this.Data;
            let arr = [];
            this._ui.lab.text = E.getLang("petDec1");
            let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
            let qCfg = PetQualityProxy.Ins.getCfgById(cfg.f_petquality);
            if (this._data.petLevel) {
                let id = parseInt(qCfg.f_initicost.split("-")[0]);
                let num = parseInt(qCfg.f_initicost.split("-")[1]);
                let addNum = parseInt(qCfg.f_preupgrade.split("-")[1]);
                let val = num * this._data.petLevel;
                let tmpLevelTimes = 0;
                for (let i = 0; i < this._data.petLevel; i++) {
                    tmpLevelTimes += i;
                }
                let vval = tmpLevelTimes * addNum;
                let cv = new stCellValue;
                cv.id = id;
                cv.count = val + vval;
                arr.push(cv);
            }
            let lv = 0;
            for (let i = 0; i < this._data.petTalents.length; i++) {
                lv += this._data.petTalents[i].talentLevel;
            }
            let addLv = lv - this._data.petTalents.length;
            if (addLv > 0) {
                let id1 = parseInt(qCfg.f_bloodupcost.split("-")[0]);
                let num1 = parseInt(qCfg.f_bloodupcost.split("-")[1]);
                let addNum1 = parseInt(qCfg.f_bloodpreupcost.split("-")[1]);
                let val1 = num1 * addLv;
                let tmpLevelTimes1 = 0;
                for (let i = 0; i < addLv; i++) {
                    tmpLevelTimes1 += i;
                }
                let vval1 = tmpLevelTimes1 * addNum1;
                let cv1 = new stCellValue;
                cv1.id = id1;
                cv1.count = val1 + vval1;
                arr.push(cv1);
            }
            if (this._data.petStar) {
                let id2 = parseInt(qCfg.f_upstarcost.split("-")[0]);
                let num2 = parseInt(qCfg.f_upstarcost.split("-")[1]);
                let cv2 = new stCellValue;
                cv2.id = id2;
                cv2.count = num2 * this._data.petStar;
                arr.push(cv2);
            }
            ItemViewFactory.renderItemSlots(this._ui.rewardCon, arr);
        }
        onExit() {
        }
    }

    exports.LingChongCZView = LingChongCZView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongFangPaiItemCtl {
        constructor(skin) {
            this.useTime = 500;
            this.skin = skin;
            this.iconTween = new Laya.Tween();
            this.bgTween = new Laya.Tween();
            this.skin.bg.alpha = 0.0;
            this.clearUI();
        }
        clearUI() {
            this.skin.icon11.visible = false;
        }
        set visible(v) {
            this.skin.visible = v;
        }
        set data(v) {
            if (v) {
                this._data = v;
                this.clearUI();
                this.iconTween.clear();
                this.bgTween.clear();
                this.playHorseCard();
            }
        }
        playHorseCard() {
            if (!this.horsecard) {
                this.horsecard = new SimpleEffect(this.skin, "o/spine/horsecard2/horsecard", this.skin.width >> 1, this.skin.height >> 1);
            }
            this.horsecard.play(0, false, this, this.onPlayHorseCardComplete, null, true);
        }
        onPlayHorseCardComplete() {
            if (this.skin.destroyed) {
                LogSys.Warn("LingChongFangPaiItemCtl skin is destroyed");
                return;
            }
            this.refresh();
            this.skin.icon11.visible = true;
            this.skin.icon.alpha = 0;
            this.iconTween.to(this.skin.icon, { alpha: 1.0 }, this.useTime, null, new Laya.Handler(this, this.onComplete));
        }
        getQua(qua) {
            let l = ZuoQiModel.Ins.cards;
            let icon = l[qua - 1];
            if (!icon) {
                return l[l.length - 1];
            }
            return icon;
        }
        refresh() {
            let cfg = PetListProxy.Ins.getCfgById(this._data);
            this.skin.nametf.text = cfg.f_petname;
            this.skin.nametf.color = "#" + EquipmentQualityProxy.Ins.getByQua(cfg.f_petquality).f_Color;
            this.skin.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            let icon = `remote/lingchong/${this.getQua(cfg.f_petquality)}.png`;
            this.skin.icon.skin = icon;
            this.skin.horseIcon.skin = PetListProxy.Ins.getPetIconById(this._data);
        }
        onComplete() {
        }
    }

    exports.LingChongFangPaiItemCtl = LingChongFangPaiItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongFanPaiView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.ctlList = [];
        }
        onAddLoadRes() {
            this.addAtlas("lingchong.atlas");
        }
        onExit() {
            this._ui.tf1.visible = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = LingChongModel.Ins;
                this.UI = this._ui = new ui.views.lingchong.ui_lingchongFPViewUI();
                ButtonCtl.Create(this._ui.diban, new Laya.Handler(this, this.mClose));
                for (let i = 0; i < 3; i++) {
                    this.ctlList.push(new LingChongFangPaiItemCtl(this._ui["item" + i]));
                }
            }
        }
        mClose() {
            if (this.model.ckList.length > 0) {
                this.refresh(this.model.ckList.shift());
            }
            else {
                if (this._ui.tf1.visible) {
                    E.ViewMgr.Close(this.ViewType);
                }
            }
        }
        onInit() {
            this._ui.tf1.visible = false;
            this.updateRideView();
        }
        refresh(itemlist) {
            if (!this.oldW) {
                this.oldW = this.ctlList[0].skin.x + this.ctlList[0].skin.width;
                this.offsetX = this.ctlList[0].skin.x;
            }
            let count = 0;
            for (let i = 0; i < this.ctlList.length; i++) {
                let ctl = this.ctlList[i];
                ctl.visible = true;
                let _data = itemlist[i];
                if (_data) {
                    ctl.visible = true;
                    count++;
                }
                else {
                    ctl.visible = false;
                }
                ctl.data = _data;
            }
            let ox = (this._ui.width - count * this.oldW + this.offsetX) / 2;
            for (let i = 0; i < this.ctlList.length; i++) {
                let ctl = this.ctlList[i];
                if (ctl.skin.visible) {
                    ctl.skin.x = ox + i * this.oldW;
                }
            }
            this.playCongratulatEffect();
        }
        playCongratulatEffect() {
            if (!this.congratulatEffect) {
                this.congratulatEffect = new SimpleEffect(this._ui.effcon, "o/spine/cardgongxi/cardgongxi");
            }
            this.congratulatEffect.play(0, false, this, this.onPlayEnd, null, true);
        }
        onPlayEnd() {
            this._ui.tf1.visible = true;
        }
        updateRideView() {
            if (this.model.ckList.length > 0) {
                let cell = this.model.ckList.shift();
                this.refresh(cell);
            }
        }
    }

    exports.LingChongFanPaiView = LingChongFanPaiView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongGMView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lingchong.ui_lingchouGMViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.Create(this._ui.btn_sub, new Laya.Handler(this, this.onBtnSubClick));
                ButtonCtl.Create(this._ui.btn_add, new Laya.Handler(this, this.onBtnAddClick));
                ButtonCtl.Create(this._ui.btn_add1, new Laya.Handler(this, this.onBtnAdd1Click));
                ButtonCtl.Create(this._ui.btn_qx, new Laya.Handler(this, this.onBtnQXClick));
                ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick));
            }
        }
        onInit() {
            this._num = 1;
            this.updataView();
        }
        onExit() {
        }
        onBtnSubClick() {
            this._num--;
            this.setBtn();
        }
        onBtnAddClick() {
            this._num++;
            this.setBtn();
        }
        onBtnAdd1Click() {
            this._num += 10;
            this.setBtn();
        }
        onBtnQXClick() {
            this.Close();
        }
        onBtnQDClick() {
            let req = new PetBuyFlute_req;
            req.num = this._num;
            SocketMgr.Ins.SendMessageBin(req);
        }
        updataView() {
            let itemVo = new ItemVo();
            itemVo.cfgId = ECellType.LingChouZM;
            itemVo.count = 1;
            ItemViewFactory.refreshSlot(this._ui.item, itemVo);
            this.setBtn();
        }
        setBtn() {
            if (this._num <= 1) {
                this._ui.btn_sub.disabled = true;
            }
            else {
                this._ui.btn_sub.disabled = false;
            }
            this._ui.lab_num.text = this._num + "";
            let cfg = PetConfigProxy.Ins.List[0];
            let id = cfg.f_fluteprice.split("-")[0];
            let num = cfg.f_fluteprice.split("-")[1];
            let needC = parseInt(num) * this._num;
            let count = MainModel.Ins.mRoleData.getVal(parseInt(id));
            this._ui.icon.skin = IconUtils.getIconByCfgId(parseInt(id));
            this._ui.lab_m.text = needC + "";
            this._ui.lab_d.x = this._ui.lab_m.x + this._ui.lab_m.textField.width;
            this._ui.lab_d.text = " 购买唤灵笛";
            if (count >= needC) {
                this._ui.lab_m.color = "#54e80d";
            }
            else {
                this._ui.lab_m.color = "#ff1e00";
            }
        }
    }

    exports.LingChongGMView = LingChongGMView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongLVView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lingchong.ui_lingchongLvViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_lv, new Laya.Handler(this, this.onBtnLVClick));
                this._starCtl = new FuJiangStarCtl(this._ui.star);
                this._ui.list_attr.itemRender = ui.views.lingchong.ui_lingchongAttrItemUI;
                this._ui.list_attr.renderHandler = new Laya.Handler(this, this.onRenderHandller1);
                if (t_Platform.Ins.isOneLvUp) {
                    this._ui.labb.text = "一键升级";
                }
                else {
                    this._ui.labb.text = "升级";
                }
            }
        }
        onRenderHandller1(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
        }
        onBtnLVClick() {
            if (this._data) {
                let req = new PetUpgradeLevel_req;
                req.petSerialNum = this._data.petSerialNum;
                if (t_Platform.Ins.isOneLvUp) {
                    req.cnt = this._lvNum;
                }
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onInit() {
            LingChongModel.Ins.on(LingChongModel.Updata_LingChong, this, this.onUpdataView);
            this._data = this.Data;
            this.creatAvatar();
            this.updataView();
        }
        onExit() {
            LingChongModel.Ins.off(LingChongModel.Updata_LingChong, this, this.onUpdataView);
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        onUpdataView() {
            if (!this._data)
                return;
            this._data = LingChongModel.Ins.petDataList.find(ele => ele.petSerialNum == this._data.petSerialNum);
            this.updataView();
        }
        updataView() {
            if (!this._data)
                return;
            let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
            let qCfg = PetQualityProxy.Ins.getCfgById(cfg.f_petquality);
            this._ui.lab_name.text = cfg.f_petname;
            this._ui.lab_lv.text = "Lv." + this._data.petLevel;
            this._starCtl.setStar(this._data.petStar);
            this._ui.lab_maxLv.text = "Lv." + qCfg.f_maxlevel;
            this._ui.list_attr.array = LingChongModel.Ins.getAttrArr(this._data.petId, this._data.petLevel, this._data.petStar);
            this._ui.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            this._ui.tab.img2.visible = false;
            if (this._data.petLevel >= qCfg.f_maxlevel) {
                this._ui.addbtn.visible = false;
                this._ui.btn_lv.visible = false;
                this._ui.lab_sz.visible = true;
            }
            else {
                this._ui.addbtn.visible = true;
                this._ui.btn_lv.visible = true;
                this._ui.lab_sz.visible = false;
                let id = parseInt(qCfg.f_initicost.split("-")[0]);
                let num = parseInt(qCfg.f_initicost.split("-")[1]);
                let addNum = parseInt(qCfg.f_preupgrade.split("-")[1]);
                let xNum = num + this._data.petLevel * addNum;
                this._ui.yuanbaoicon.skin = IconUtils.getIconByCfgId(id);
                let val = MainModel.Ins.mRoleData.getVal(id);
                this._ui.goldtf.text = StringUtil.val3m(val);
                this._ui.lab_x.text = "/" + xNum;
                if (val >= xNum) {
                    this._ui.goldtf.color = EGameColor.GREED;
                }
                else {
                    this._ui.goldtf.color = EGameColor.NotEnough;
                }
                this._lvNum = 0;
                let count = 0;
                for (let i = this._data.petLevel; i < qCfg.f_maxlevel; i++) {
                    count += num + i * addNum;
                    if (val >= count) {
                        this._lvNum++;
                    }
                    else {
                        break;
                    }
                }
            }
        }
        creatAvatar() {
            if (!this._data)
                return;
            let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            this._avatar = AvatarFactory.createPet(cfg.f_petid);
            this._avatar.play(EAvatarAnim.HandBookStand);
            this._avatar.dir = EAvatarDir.Left;
            this._ui.avatr.addChild(this._avatar);
        }
    }

    exports.LingChongLVView = LingChongLVView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongItem extends ui.views.lingchong.ui_lingchongItemUI {
        constructor() {
            super();
            this._starCtl = new FuJiangStarCtl(this.star);
        }
        setData(value, flag) {
            if (!value)
                return;
            let data = value.data;
            if (data) {
                this.img_xz.visible = flag;
                let cfg = PetListProxy.Ins.getCfgById(data.petId);
                if (data.onBattle) {
                    this.sp.visible = true;
                }
                else {
                    this.sp.visible = false;
                }
                this.quality.skin = IconUtils.getQuaIcon(cfg.f_petquality);
                this.icon.skin = PetListProxy.Ins.getPetIconById(cfg.f_petid);
                this.lab_lv.text = "Lv." + data.petLevel;
                if (data.petStar) {
                    this.spbg.visible = true;
                    this.star.visible = true;
                    this._starCtl.setStar(data.petStar);
                }
                else {
                    this.spbg.visible = false;
                    this.star.visible = false;
                }
                this.tab.visible = true;
                this.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
                this.tab.img2.visible = false;
            }
            else {
                this.img_xz.visible = false;
                this.sp.visible = false;
                this.quality.skin = "remote/common/base/jiangli1.png";
                this.icon.skin = "";
                this.spbg.visible = false;
                this.star.visible = false;
                this.lab_lv.text = "";
                this.tab.visible = false;
            }
        }
    }

    exports.LingChongItem = LingChongItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongViewCtl1 {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            ButtonCtl.Create(this._ui.btn_cz, new Laya.Handler(this, this.onBtnCZClick));
            ButtonCtl.Create(this._ui.btn_sz, new Laya.Handler(this, this.onBtnSZClick));
            ButtonCtl.Create(this._ui.btn_lv, new Laya.Handler(this, this.onBtnLvClick));
            ButtonCtl.Create(this._ui.btn_star, new Laya.Handler(this, this.onBtnStarClick));
            ButtonCtl.Create(this._ui.btn_xm, new Laya.Handler(this, this.onBtnXMClick));
            this._ui.list_lc.itemRender = LingChongItem;
            this._ui.list_lc.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            this._ui.list_lc.selectEnable = true;
            this._ui.list_xm.itemRender = LingChongXMItem;
            this._ui.list_xm.renderHandler = new Laya.Handler(this, this.onXMRenderHandler);
            this._ui.list_attr.itemRender = ui.views.lingchong.ui_lingchongAttrItemUI;
            this._ui.list_attr.renderHandler = new Laya.Handler(this, this.onRenderHandller1);
            this._starCtl = new FuJiangStarCtl(this._ui.star);
            if (t_Platform.Ins.isOneLvUp) {
                this._ui.lab_qd.text = "一键升级";
            }
            else {
                this._ui.lab_qd.text = "升级";
            }
        }
        onRenderHandler(item, index) {
            if (index == -1)
                return;
            let flag = false;
            if (this._ui.list_lc.selectedIndex == index) {
                let data = item.dataSource.data;
                if (data == null) {
                    this._ui.list_lc.selectedIndex = this._index;
                    return;
                }
                this._index = this._ui.list_lc.selectedIndex;
                flag = true;
                this.updataView();
            }
            item.setData(item.dataSource, flag);
        }
        onXMRenderHandler(item, index) {
            item.setData(item.dataSource, index);
        }
        onRenderHandller1(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
        }
        onBtnCZClick() {
            if (!this._data)
                return;
            let lv = 0;
            for (let i = 0; i < this._data.petTalents.length; i++) {
                lv += this._data.petTalents[i].talentLevel;
            }
            if (this._data.petLevel == 0 && lv <= this._data.petTalents.length && this._data.petStar == 0) {
                E.ViewMgr.ShowMidError("灵宠没有养成资源可以返还");
                return;
            }
            E.ViewMgr.Open(EViewType.LingChongCZView, null, this._data);
        }
        onBtnSZClick() {
            if (!this._data)
                return;
            let req = new PetOnBattle_req;
            req.petSerialNum = this._data.petSerialNum;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnLvClick() {
            if (!this._data)
                return;
            E.ViewMgr.Open(EViewType.LingChongLVView, null, this._data);
        }
        onBtnStarClick() {
            if (!this._data)
                return;
            E.ViewMgr.Open(EViewType.LingChongStarView, null, this._data);
        }
        onBtnXMClick() {
            if (!this._data)
                return;
            E.ViewMgr.Open(EViewType.LingChongXMView, null, this._data);
        }
        onAdd() {
            LingChongModel.Ins.on(LingChongModel.Updata_LingChong, this, this.onUpdataView);
            this._data = null;
            this._index = -1;
            this._updataIndex = -1;
            this._petanimid = 0;
            let arr = this.getList();
            this._ui.list_lc.array = arr;
            if (LingChongModel.Ins.petDataList.length) {
                let indexx = 0;
                for (let i = 0; i < arr.length; i++) {
                    if (arr[i].data && arr[i].data.onBattle) {
                        indexx = i;
                        break;
                    }
                }
                this._ui.list_lc.selectedIndex = indexx;
                this._ui.list_lc.scrollTo(indexx);
                this._ui.sp.visible = true;
                this._ui.sp_k.visible = this._ui.lab_k.visible = false;
            }
            else {
                this._ui.list_lc.selectedIndex = -1;
                this._ui.sp.visible = false;
                this._ui.sp_k.visible = this._ui.lab_k.visible = true;
            }
        }
        onRemove() {
            LingChongModel.Ins.off(LingChongModel.Updata_LingChong, this, this.onUpdataView);
            this._ui.list_lc.selectedIndex = -1;
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        getList() {
            let arr = LingChongModel.Ins.petDataList.sort(LingChongModel.Ins.petSort);
            if (this._data) {
                this._updataIndex = arr.findIndex(ele => ele.petSerialNum == this._data.petSerialNum);
            }
            let len = PetConfigProxy.Ins.List[0].f_bagmax;
            let array = [];
            for (let i = 0; i < len; i++) {
                let obj = {};
                if (arr[i]) {
                    obj.data = arr[i];
                }
                else {
                    obj.data = null;
                }
                array.push(obj);
            }
            return array;
        }
        onUpdataView() {
            if (!this._data)
                return;
            this._ui.list_lc.array = this.getList();
            if (this._updataIndex != -1) {
                this._ui.list_lc.selectedIndex = this._updataIndex;
            }
            this.updataView();
        }
        updataView() {
            this._data = this._ui.list_lc.array[this._ui.list_lc.selectedIndex].data;
            if (!this._data)
                return;
            this.creatAvatar();
            let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
            this._ui.lab_name.text = cfg.f_petname;
            this._ui.lab_name.color = "#" + EquipmentQualityProxy.Ins.getByQua(cfg.f_petquality).f_Color;
            this._ui.lab_lv.text = "Lv." + this._data.petLevel;
            this._starCtl.setStar(this._data.petStar);
            this._ui.list_attr.array = LingChongModel.Ins.getAttrArr(cfg.f_petid, this._data.petLevel, this._data.petStar);
            this._ui.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            this._ui.tab.img2.visible = false;
            if (this._data.onBattle) {
                this._ui.btn_sz.visible = false;
                this._ui.lab_sz.visible = true;
            }
            else {
                this._ui.btn_sz.visible = true;
                this._ui.lab_sz.visible = false;
            }
            let sCfg = PetSkillClientProxy.Ins.getCfgById(cfg.f_petskillid);
            this._ui.jnItem.lab.text = sCfg.f_skillname;
            let lv = LingChongModel.Ins.getSkillLv(this._data.petStar);
            this._ui.jnItem.lab_lv.text = "Lv." + lv;
            this._ui.lab_jn.text = LingChongModel.Ins.getSkillDec(cfg.f_petskillid, lv);
            let array = [];
            for (let i = 0; i < this._data.petTalents.length; i++) {
                array.push({ data: this._data.petTalents[i] });
            }
            this._ui.list_xm.array = array;
        }
        creatAvatar() {
            if (!this._data)
                return;
            let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
            if (this._petanimid == cfg.f_petanimid) {
                return;
            }
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            this._avatar = AvatarFactory.createPet(cfg.f_petid);
            this._petanimid = cfg.f_petanimid;
            this._avatar.play(EAvatarAnim.HandBookStand);
            this._avatar.dir = EAvatarDir.Left;
            this._ui.avatr.addChild(this._avatar);
        }
    }

    exports.LingChongViewCtl1 = LingChongViewCtl1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongViewCtl3 {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            ButtonCtl.Create(this._ui.btn_add1, new Laya.Handler(this, this.onBtnAdd1Click));
            ButtonCtl.Create(this._ui.btn_add2, new Laya.Handler(this, this.onBtnAdd2Click));
            ButtonCtl.Create(this._ui.tips, new Laya.Handler(this, this.onBtnTipClick));
            ButtonCtl.Create(this._ui.xunzaoBtn, new Laya.Handler(this, this.onBtnCQClick));
            ButtonCtl.Create(this._ui.xunzaoBtn1, new Laya.Handler(this, this.onBtnCQ1Click));
            ButtonCtl.Create(this._ui.btn_tj, new Laya.Handler(this, this.onBtnTJClick));
            ValCtl.Create(this._ui.lab_m1, this._ui.img_m1, ECellType.GOLD);
            ValCtl.Create(this._ui.lab_m2, this._ui.img_m2, ECellType.LingChouZM);
            this._timeCtl = new TimeCtl(this._ui.timetf);
            this._checkBoxCtl = new CheckBoxCtl({ bg: this._ui.bg, gou: this._ui.gou });
            this._checkBoxCtl.selectHander = new Laya.Handler(this, this.onSelectHander);
            this._checkBoxCtl.selected = false;
            this._ui.zhekouImg.mouseEnabled = false;
        }
        onSelectHander() {
            this.updataMoney();
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("petCKTitle", "petCKDec");
        }
        onBtnAdd1Click() {
            E.ViewMgr.Open(EViewType.Shop);
        }
        onBtnAdd2Click() {
            E.ViewMgr.Open(EViewType.LingChongGMView);
        }
        onBtnCQClick() {
            if (Laya.timer.currTimer - this._time < 300) {
                return;
            }
            this._time = Laya.timer.currTimer;
            let req = new PetExtract_req;
            if (LingChongModel.Ins.freeCount) {
                req.itemId = 0;
                req.type = 1;
                SocketMgr.Ins.SendMessageBin(req);
            }
            else {
                LingChongModel.Ins.getPetAction(this._checkBoxCtl.selected, 1);
            }
        }
        onBtnCQ1Click() {
            if (Laya.timer.currTimer - this._time < 300) {
                return;
            }
            this._time = Laya.timer.currTimer;
            LingChongModel.Ins.getPetAction(this._checkBoxCtl.selected, 2);
        }
        onBtnTJClick() {
            E.ViewMgr.Open(EViewType.LingChongTJView);
        }
        onAdd() {
            LingChongModel.Ins.on(LingChongModel.Updata_ChouKa, this, this.updataView);
            this.updataView();
        }
        onRemove() {
            LingChongModel.Ins.off(LingChongModel.Updata_ChouKa, this, this.updataView);
            this._timeCtl.stop();
        }
        updataView() {
            let qua = PetConfigProxy.Ins.List[0].f_protectquality;
            let name = EquipmentQualityProxy.Ins.getByQua(qua).f_EquipmentLevel;
            this._ui.lab_num.text = `再抽取${LingChongModel.Ins.baoDi}次后必出${name}灵宠`;
            this.updataMoney();
            DotManager.removeDot(this._ui.xunzaoBtn);
            if (LingChongModel.Ins.freeCount) {
                const free = PetConfigProxy.Ins.List[0].f_freetime;
                this._ui.freetf.text = E.LangMgr.getLang('mfcq', free - LingChongModel.Ins.freeCount, free);
                this.endTime();
            }
            else {
                this._ui.freetf.text = '';
                this._ui.img_yb1.visible = this._ui.lab_yb1.visible = true;
                this._ui.xunzhaotf.text = "抽取一次";
                let time = LingChongModel.Ins.nextFreeUnix - TimeUtil.serverTime;
                if (time > 0) {
                    this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                }
                else {
                    this.endTime();
                }
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal) + "后免费";
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._ui.img_yb1.visible = this._ui.lab_yb1.visible = false;
            this._timeCtl.setText("");
            this._timeCtl.stop();
            DotManager.addDot(this._ui.xunzaoBtn);
        }
        updataMoney() {
            let cfg = PetConfigProxy.Ins.List[0];
            let id;
            let num;
            let _now;
            this._ui.zhekouImg.visible = false;
            let num1 = parseInt(cfg.f_triplepricegold.split("-")[1]);
            if (this._checkBoxCtl.selected) {
                if (LingChongFeastModel.Ins.isOpen) {
                    this._ui.zhekouImg.visible = true;
                    _now = parseInt(cfg.f_Discount.split("-")[1]);
                    let a = (_now / num1 * 10).toFixed(0);
                    this._ui.zhekouTf.text = E.getLang("limitdiscount", a);
                    this._ui.oldGoldTf.text = E.getLang("oldprice") + num1;
                }
                else {
                    _now = num1;
                }
                id = parseInt(cfg.f_singlepricegold.split("-")[0]);
                num = parseInt(cfg.f_singlepricegold.split("-")[1]);
            }
            else {
                id = parseInt(cfg.f_singleprice.split("-")[0]);
                num = parseInt(cfg.f_singleprice.split("-")[1]);
                _now = parseInt(cfg.f_tripleprice.split("-")[1]);
            }
            this._ui.img_yb1.skin = this._ui.img_yb2.skin = IconUtils.getIconByCfgId(id);
            this._ui.lab_yb1.text = num + "";
            this._ui.lab_yb2.text = _now + "";
        }
    }

    exports.LingChongViewCtl3 = LingChongViewCtl3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongMainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('lingchong.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lingchong.ui_lingchongMainViewUI;
                this.bindClose(this._ui.btn_close);
                const tabsSkin = [this._ui.tab1, this._ui.tab2, this._ui.tab3];
                this.tabList = ["培养灵宠", "灵宠融合", "灵宠召唤"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._viewCtl1 = new LingChongViewCtl1(this._ui.view1);
                this._viewCtl2 = new LingChongViewCtl2(this._ui.view2);
                this._viewCtl3 = new LingChongViewCtl3(this._ui.view3);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)));
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("petTitle", "petDec");
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.txt.text = this.tabList[index];
            if (sel) {
                skin.img1.visible = true;
                skin.img2.visible = false;
                skin.txt.color = "#A1572F";
                MainModel.Ins.event(MainEvent.ButtonCtlClick, tabSkin);
            }
            else {
                skin.img1.visible = false;
                skin.img2.visible = true;
                skin.txt.color = "#e4bb87";
            }
        }
        onTabSelectHandler(v) {
            if (v == -1)
                return;
            for (let i = 1; i < 4; i++) {
                this["_viewCtl" + i].onRemove();
                this._ui["view" + i].visible = false;
            }
            this["_viewCtl" + (v + 1)].onAdd();
            this._ui["view" + (v + 1)].visible = true;
        }
        onInit() {
            LingChongModel.Ins.on(LingChongModel.Updata_ChouKa, this, this.setRedTip);
            this.tabsCtl.selectIndex = 0;
            this.setRedTip();
        }
        onExit() {
            LingChongModel.Ins.off(LingChongModel.Updata_ChouKa, this, this.setRedTip);
            this.tabsCtl.selectIndex = -1;
            this.tabsCtl.dispose();
        }
        setRedTip() {
            if (LingChongModel.Ins.isFreeRedTip()) {
                DotManager.addDot(this._ui.tab3);
            }
            else {
                DotManager.removeDot(this._ui.tab3);
            }
        }
    }

    exports.LingChongMainView = LingChongMainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongStarItem extends ui.views.lingchong.ui_lingchongItem1UI {
        constructor() {
            super();
            this._starCtl = new FuJiangStarCtl(this.star);
        }
        setData(value, flag) {
            if (!value)
                return;
            this.jiao.visible = flag;
            let cfg = PetListProxy.Ins.getCfgById(value.petId);
            this.quality.skin = IconUtils.getQuaIcon(cfg.f_petquality);
            this.icon.skin = PetListProxy.Ins.getPetIconById(cfg.f_petid);
            this.lab_lv.text = "Lv." + value.petLevel;
            this.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            this.tab.img2.visible = false;
            if (value.petStar) {
                this.sp.visible = true;
                this.star.visible = true;
                this._starCtl.setStar(value.petStar);
            }
            else {
                this.sp.visible = false;
                this.star.visible = false;
            }
        }
    }

    exports.LingChongStarItem = LingChongStarItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongStarView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lingchong.ui_lingchongStarViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_star, new Laya.Handler(this, this.onBtnStarClick));
                ButtonCtl.Create(this._ui.btn_star1, new Laya.Handler(this, this.onBtnStar1Click));
                this._starCtl = new FuJiangStarCtl(this._ui.star);
                this._ui.list.itemRender = LingChongStarItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandller);
                this._ui.list.selectEnable = true;
                this._ui.list.selectHandler = new Laya.Handler(this, this.onSelectHandller);
                this._ui.list_attr.itemRender = ui.views.lingchong.ui_lingchongAttrItem1UI;
                this._ui.list_attr.renderHandler = new Laya.Handler(this, this.onRenderHandller1);
            }
        }
        onRenderHandller(item) {
            let index = this._selectList.findIndex(ele => ele == item.dataSource);
            if (index != -1) {
                item.setData(item.dataSource, true);
            }
            else {
                item.setData(item.dataSource, false);
            }
        }
        onSelectHandller(index) {
            if (index == -1)
                return;
            if (!this._data)
                return;
            if (!this._qCfg)
                return;
            let num = this._data.petStar + this._selectStarNum;
            let indexx = this._selectList.findIndex(ele => ele == this._ui.list.array[index]);
            if (num >= this._qCfg.f_maxstar) {
                if (indexx == -1) {
                    return;
                }
            }
            if (indexx == -1) {
                this._selectList.push(this._ui.list.array[index]);
            }
            else {
                this._selectList.splice(indexx, 1);
            }
            this._selectStarNum = this.getStarNum();
            num = this._data.petStar + this._selectStarNum;
            this._ui.list.refresh();
            this._ui.list_attr.refresh();
            this._ui.list.selectedIndex = -1;
            if (num >= this._qCfg.f_maxstar) {
                this._starCtl.setStar(this._qCfg.f_maxstar);
            }
            else {
                this._starCtl.setStar(num);
            }
            this.setSkillView(this._data.petStar, this._selectStarNum);
            this.updataStarBtn();
        }
        onRenderHandller1(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            if (this._selectStarNum) {
                if (this._qCfg) {
                    let arr = this._qCfg.f_upstarvalue.split("|");
                    let addVal = 0;
                    for (let i = 0; i < arr.length; i++) {
                        let idd = parseInt(arr[i].split(":")[0]);
                        if (idd == id) {
                            addVal = parseInt(arr[i].split(":")[1]);
                            break;
                        }
                    }
                    if (addVal) {
                        item.valTf1.text = "(+" + attrConvert(id, addVal * this._selectStarNum) + ")";
                    }
                    else {
                        item.valTf1.text = "";
                    }
                }
            }
            else {
                item.valTf1.text = "";
            }
        }
        getStarNum() {
            let num = 0;
            for (let i = 0; i < this._selectList.length; i++) {
                num += this._selectList[i].petStar + 1;
            }
            return num;
        }
        onBtnStarClick() {
            if (!this._data)
                return;
            if (this._selectList.length == 0)
                return;
            let flag = false;
            for (let i = 0; i < this._selectList.length; i++) {
                if (this._selectList[i].petLevel) {
                    flag = true;
                }
                if (this._selectList[i].petStar) {
                    flag = true;
                }
                let num = 0;
                let talents = this._selectList[i].petTalents;
                for (let j = 0; j < talents.length; j++) {
                    num += talents[j].talentLevel;
                }
                if (num > talents.length) {
                    flag = true;
                }
            }
            if (flag) {
                MainModel.Ins.queryMsg("选择灵宠已升级、觉醒或升星!升星后只返还部分养成素材,是否确认升星？", 0, 0, EQuickMsg.NULL, new Laya.Handler(this, this.sendCmd));
            }
            else {
                this.sendCmd();
            }
        }
        onBtnStar1Click() {
            let req = new PetUpgradeStar_req;
            req.petSerialNum = this._data.petSerialNum;
            req.sameQuaPetSerialNums = [];
            req.type = 1;
            SocketMgr.Ins.SendMessageBin(req);
        }
        sendCmd() {
            let array = [];
            for (let i = 0; i < this._selectList.length; i++) {
                array.push(this._selectList[i].petSerialNum);
            }
            let req = new PetUpgradeStar_req;
            req.petSerialNum = this._data.petSerialNum;
            req.sameQuaPetSerialNums = array;
            req.type = 0;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onInit() {
            LingChongModel.Ins.on(LingChongModel.Updata_LingChong, this, this.onUpdataView);
            this._data = this.Data;
            this.creatAvatar();
            this.updataView();
        }
        onExit() {
            LingChongModel.Ins.off(LingChongModel.Updata_LingChong, this, this.onUpdataView);
            this._ui.list.selectedIndex = -1;
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        onUpdataView() {
            if (!this._data)
                return;
            this._data = LingChongModel.Ins.petDataList.find(ele => ele.petSerialNum == this._data.petSerialNum);
            this.updataView();
        }
        updataView() {
            if (!this._data)
                return;
            this._selectList = [];
            let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
            this._qCfg = PetQualityProxy.Ins.getCfgById(cfg.f_petquality);
            this._ui.lab_name.text = cfg.f_petname;
            this._ui.lab_lv.text = "Lv." + this._data.petLevel;
            this._starCtl.setStar(this._data.petStar);
            this._ui.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            this._ui.tab.img2.visible = false;
            let arr = LingChongModel.Ins.petDataList.sort(LingChongModel.Ins.petSort);
            let array = [];
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].petSerialNum == this._data.petSerialNum) {
                    continue;
                }
                if (arr[i].petId == this._data.petId) {
                    array.push(arr[i]);
                }
            }
            this._ui.list.array = array;
            this._selectStarNum = this.getStarNum();
            this._ui.list_attr.array = LingChongModel.Ins.getAttrArr(this._data.petId, this._data.petLevel, this._data.petStar);
            this.setSkillView(this._data.petStar);
            if (this._data.petStar >= this._qCfg.f_maxstar) {
                this._ui.lab_sz.visible = true;
                this._ui.btn_star.visible = false;
                this._ui.lab_sz1.visible = true;
                this._ui.btn_star1.visible = false;
                this._ui.addbtn.visible = false;
            }
            else {
                this._ui.lab_sz.visible = false;
                this._ui.btn_star.visible = true;
                this._ui.lab_sz1.visible = false;
                this._ui.btn_star1.visible = true;
                this._ui.addbtn.visible = true;
                let qCfg = PetQualityProxy.Ins.getCfgById(cfg.f_petquality);
                let id = parseInt(qCfg.f_upstarcost.split("-")[0]);
                let num = parseInt(qCfg.f_upstarcost.split("-")[1]);
                this._ui.yuanbaoicon.skin = IconUtils.getIconByCfgId(id);
                let val = MainModel.Ins.mRoleData.getVal(id);
                this._ui.goldtf.text = StringUtil.val3m(val);
                this._ui.lab_x.text = "/" + num;
                if (val >= num) {
                    this._ui.goldtf.color = EGameColor.GREED;
                }
                else {
                    this._ui.goldtf.color = EGameColor.NotEnough;
                }
            }
            this.updataStarBtn();
        }
        updataStarBtn() {
            if (this._selectList.length == 0) {
                this._ui.btn_star.disabled = true;
            }
            else {
                this._ui.btn_star.disabled = false;
            }
        }
        setSkillView(star, add = 0) {
            if (!this._data)
                return;
            if (!this._qCfg)
                return;
            let addStar = star + add;
            if (addStar > this._qCfg.f_maxstar) {
                addStar = this._qCfg.f_maxstar;
                add = this._qCfg.f_maxstar - star;
            }
            if (add) {
                this._ui.valTf1.text = "技能等级+" + add;
                this._ui.item_jn.lab_lv.color = "#24C6FF";
            }
            else {
                this._ui.valTf1.text = "";
                this._ui.item_jn.lab_lv.color = "#FFEBD2";
            }
            let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
            let sCfg = PetSkillClientProxy.Ins.getCfgById(cfg.f_petskillid);
            this._ui.item_jn.lab.text = sCfg.f_skillname;
            let lv = LingChongModel.Ins.getSkillLv(addStar);
            this._ui.item_jn.lab_lv.text = "Lv." + lv;
            this._ui.lab_jn.text = LingChongModel.Ins.getSkillDec(cfg.f_petskillid, lv);
        }
        creatAvatar() {
            if (!this._data)
                return;
            let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            this._avatar = AvatarFactory.createPet(cfg.f_petid);
            this._avatar.play(EAvatarAnim.HandBookStand);
            this._avatar.dir = EAvatarDir.Left;
            this._ui.avatr.addChild(this._avatar);
        }
    }

    exports.LingChongStarView = LingChongStarView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongTJItem extends ui.views.lingchong.ui_lingchongItemUI {
        constructor() {
            super();
            this._starCtl = new FuJiangStarCtl(this.star);
        }
        setData(value, flag) {
            if (!value)
                return;
            this.img_xz.visible = flag;
            this.sp.visible = false;
            this.spbg.visible = false;
            this.quality.skin = IconUtils.getQuaIcon(value.f_petquality);
            this.icon.skin = PetListProxy.Ins.getPetIconById(value.f_petid);
            this.star.visible = false;
            this.lab_lv.text = "";
            this.tab.visible = false;
        }
    }

    exports.LingChongTJItem = LingChongTJItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongTJView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("lingchong.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lingchong.ui_lingchongTJViewUI;
                this.bindClose(this._ui.btn_close);
                let tabsSkin = [];
                for (let i = 0; i < 11; i++) {
                    this._ui["tab" + i].img.skin = `remote/lingchong/tj${i}.png`;
                    tabsSkin.push(this._ui["tab" + i]);
                }
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._ui.list_lc.itemRender = LingChongTJItem;
                this._ui.list_lc.renderHandler = new Laya.Handler(this, this.onRenderHandller);
                this._ui.list_lc.selectEnable = true;
                this._ui.list_attr.itemRender = ui.views.lingchong.ui_lingchongAttrItemUI;
                this._ui.list_attr.renderHandler = new Laya.Handler(this, this.onRenderHandller1);
                this._starCtl = new FuJiangStarCtl(this._ui.star);
                ButtonCtl.Create(this._ui.btn_tj, new Laya.Handler(this, this.onBtnTJClick));
            }
        }
        onBtnTJClick() {
            E.ViewMgr.Open(EViewType.LingChongXMTJView);
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            if (sel) {
                skin.img2.visible = true;
            }
            else {
                skin.img2.visible = false;
            }
        }
        onTabSelectHandler(v) {
            if (v == -1)
                return;
            let arr = LingChongModel.Ins.getPetListByType(v);
            arr = arr.sort(this.onSort);
            this._ui.list_lc.array = arr;
            this._ui.list_lc.selectedIndex = 0;
        }
        onSort(a, b) {
            if (a.f_petquality > b.f_petquality) {
                return -1;
            }
            else if (a.f_petquality < b.f_petquality) {
                return 1;
            }
            else {
                if (a.f_petid > b.f_petid) {
                    return 1;
                }
                else if (a.f_petid < b.f_petid) {
                    return -1;
                }
                else {
                    return 0;
                }
            }
        }
        onRenderHandller(item, index) {
            let bo;
            if (this._ui.list_lc.selectedIndex == index) {
                bo = true;
                this.updataView();
            }
            else {
                bo = false;
            }
            item.setData(item.dataSource, bo);
        }
        onRenderHandller1(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
        }
        onInit() {
            this._petanimid = 0;
            this.tabsCtl.selectIndex = 0;
        }
        onExit() {
            this.tabsCtl.selectIndex = -1;
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        updataView() {
            this.creatAvatar();
            let cfg = this._ui.list_lc.selectedItem;
            let qCfg = PetQualityProxy.Ins.getCfgById(cfg.f_petquality);
            this._ui.lab_name.text = cfg.f_petname;
            this._ui.lab_name.color = "#" + EquipmentQualityProxy.Ins.getByQua(cfg.f_petquality).f_Color;
            this._ui.lab_lv.text = "Lv." + qCfg.f_maxlevel;
            this._starCtl.setStar(qCfg.f_maxstar);
            this._ui.valTf1.text = `血脉天赋数量上限${cfg.f_talentslot}个`;
            this._ui.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            this._ui.tab.img2.visible = false;
            let sCfg = PetSkillClientProxy.Ins.getCfgById(cfg.f_petskillid);
            this._ui.item_jn.lab.text = sCfg.f_skillname;
            let lv = LingChongModel.Ins.getSkillLv(qCfg.f_maxstar);
            this._ui.item_jn.lab_lv.text = "Lv." + lv;
            this._ui.lab_jn.text = LingChongModel.Ins.getSkillDec(cfg.f_petskillid, lv);
            this._ui.list_attr.array = LingChongModel.Ins.getAttrArr(cfg.f_petid, qCfg.f_maxlevel, qCfg.f_maxstar);
        }
        creatAvatar() {
            let cfg = this._ui.list_lc.selectedItem;
            if (this._petanimid == cfg.f_petanimid) {
                return;
            }
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            if (cfg) {
                this._avatar = AvatarFactory.createPet(cfg.f_petid);
                this._petanimid = cfg.f_petanimid;
                this._avatar.play(EAvatarAnim.HandBookStand);
                this._avatar.dir = EAvatarDir.Left;
                this._ui.avatr.addChild(this._avatar);
            }
        }
    }

    exports.LingChongTJView = LingChongTJView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongXMTJItem extends ui.views.lingchong.ui_lingchongXMItemUI {
        constructor() {
            super();
            this.wh.visible = false;
            this.on(Laya.Event.CLICK, this, this.onClick);
        }
        onClick(e) {
            e.stopPropagation();
            MainModel.Ins.showSmallTips("", this._dec, e.target);
        }
        setData(value) {
            let id = parseInt(value.f_attr.split(":")[0]);
            let val = parseInt(value.f_attr.split(":")[1]) * value.f_maxlevel;
            this.quality.skin = IconUtils.getQuaIcon(value.f_quality);
            this.lab.text = MainModel.Ins.getAttrNameIdByID(id);
            this.lab_lv.text = "Lv." + value.f_maxlevel;
            this._dec = MainModel.Ins.getAttrNameIdByID(id) + ":" + attrConvert(id, val);
        }
    }

    exports.LingChongXMTJItem = LingChongXMTJItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongXMTJView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("lingchong.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lingchong.ui_lingchongXMTJViewUI;
                this.bindClose(this._ui.btn_close);
                this._ui.list.itemRender = LingChongXMTJItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            let arr = PetTalentProxy.Ins.List.sort(this.onSort);
            this._ui.list.array = arr;
        }
        onSort(a, b) {
            if (a.f_quality > b.f_quality) {
                return -1;
            }
            else if (a.f_quality < b.f_quality) {
                return 1;
            }
            else {
                if (a.f_talentid > b.f_talentid) {
                    return 1;
                }
                else if (a.f_talentid < b.f_talentid) {
                    return -1;
                }
                else {
                    return 0;
                }
            }
        }
        onExit() {
        }
    }

    exports.LingChongXMTJView = LingChongXMTJView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongXMItem1 extends ui.views.lingchong.ui_lingchongXMItem1UI {
        constructor() {
            super();
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            this.quality.on(Laya.Event.CLICK, this, this.onClick);
            ButtonCtl.Create(this.img_lock, new Laya.Handler(this, this.onBtnLockClick));
        }
        onAdd() {
            LingChongModel.Ins.on(LingChongModel.UPDATA_LEVEL_XM, this, this.onUpdataView);
        }
        onRemove() {
            LingChongModel.Ins.off(LingChongModel.UPDATA_LEVEL_XM, this, this.onUpdataView);
            if (this.eff) {
                this.eff.stop();
            }
        }
        onBtnLockClick() {
            if (this._data) {
                if (this._data.petTalentIdToDo) {
                    E.ViewMgr.ShowMidError("请先处理当前血脉天赋");
                    return;
                }
                if (this._data1) {
                    let index = LingChongModel.Ins.xmLockIds.indexOf(this._data1.talentId);
                    if (index == -1) {
                        let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
                        if (LingChongModel.Ins.xmLockIds.length >= cfg.f_talentslot - 1) {
                            E.ViewMgr.ShowMidError("不能全部锁定");
                            return;
                        }
                        else {
                            LingChongModel.Ins.xmLockIds.push(this._data1.talentId);
                            this.img_lock.skin = "remote/lingchong/lock_1.png";
                        }
                    }
                    else {
                        LingChongModel.Ins.xmLockIds.splice(index, 1);
                        this.img_lock.skin = "remote/lingchong/lock_2.png";
                    }
                }
                LingChongModel.Ins.event(LingChongModel.UPDATA_XM_LOCK);
            }
        }
        playAnim() {
            if (!this.eff) {
                this.eff = new SimpleEffect(this.sp, "o/spine/change/change", this.sp.width / 2 + 1, this.sp.height / 2 + 1);
            }
            this.eff.play(0, false, null, null, null, true);
        }
        onUpdataView(index) {
            if (this._index == index) {
                this.playAnim();
            }
        }
        onClick(e) {
            if (this._dec) {
                e.stopPropagation();
                MainModel.Ins.showSmallTips("", this._dec, e.target);
            }
        }
        setData(value, index, value1) {
            if (!value)
                return;
            this._data = value1;
            this._data1 = value.data;
            this._index = index;
            if (value.data) {
                let data = PetTalentProxy.Ins.getCfgById(value.data.talentId);
                let id = parseInt(data.f_attr.split(":")[0]);
                let val = parseInt(data.f_attr.split(":")[1]) * value.data.talentLevel;
                this.quality.skin = IconUtils.getQuaIcon(data.f_quality);
                this.lab.text = MainModel.Ins.getAttrNameIdByID(id);
                this.lab_lv.text = "Lv." + value.data.talentLevel;
                this._dec = MainModel.Ins.getAttrNameIdByID(id) + ":" + attrConvert(id, val);
                this.wh.visible = false;
                let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
                if (this._data.petTalents.length >= cfg.f_talentslot) {
                    this.img_lock.visible = true;
                    if (value.data.lock) {
                        this.img_lock.skin = "remote/lingchong/lock_1.png";
                    }
                    else {
                        this.img_lock.skin = "remote/lingchong/lock_2.png";
                    }
                }
                else {
                    this.img_lock.visible = false;
                }
            }
            else {
                this.wh.visible = true;
                this.quality.skin = "remote/common/base/jiangli1.png";
                this.lab.text = "";
                this.lab_lv.text = "";
                this._dec = "";
                this.img_lock.visible = false;
            }
        }
    }

    exports.LingChongXMItem1 = LingChongXMItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongXMView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("lingchong.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lingchong.ui_lingchongXMJXViewUI;
                this.bindClose(this._ui.btn_close);
                ValCtl.Create(this._ui.goldtf, this._ui.yuanbaoicon, ECellType.LingChouXM);
                ValCtl.Create(this._ui.goldtf1, this._ui.yuanbaoicon1, ECellType.GOLD);
                ButtonCtl.Create(this._ui.btn_tj, new Laya.Handler(this, this.onBtnTJClick));
                ButtonCtl.Create(this._ui.btn_jx, new Laya.Handler(this, this.onBtnJXClick));
                ButtonCtl.Create(this._ui.btn_lv, new Laya.Handler(this, this.onBtnLVClick));
                ButtonCtl.Create(this._ui.btn_fq, new Laya.Handler(this, this.onBtnFQClick));
                this._btnTHCtl = ButtonCtl.Create(this._ui.btn_th, new Laya.Handler(this, this.onBtnTHClick));
                this._ui.quality.on(Laya.Event.CLICK, this, this.onBtnQClick);
                this._starCtl = new FuJiangStarCtl(this._ui.star);
                this._ui.list_xm.itemRender = LingChongXMItem1;
                this._ui.list_xm.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                if (initConfig.clienttype == EClientType.Discount) {
                    this._ui.addbtn.visible = false;
                }
            }
        }
        onBtnTJClick() {
            E.ViewMgr.Open(EViewType.LingChongXMTJView);
        }
        onBtnJXClick() {
            if (this._isPlay)
                return;
            if (!this._data)
                return;
            let req = new PetNewTalent_req;
            req.petSerialNum = this._data.petSerialNum;
            req.lockTalentIds = LingChongModel.Ins.xmLockIds;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnLVClick() {
            if (this._isPlay)
                return;
            if (!this._data)
                return;
            let req = new PetUpgradeTalent_req;
            req.petSerialNum = this._data.petSerialNum;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnFQClick() {
            if (this._isPlay)
                return;
            if (!this._data)
                return;
            let req = new PetHandleNewTalent_req;
            req.petSerialNum = this._data.petSerialNum;
            req.type = 2;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnTHClick() {
            if (this._isPlay)
                return;
            if (!this._data)
                return;
            let req = new PetHandleNewTalent_req;
            req.petSerialNum = this._data.petSerialNum;
            req.type = this._type;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnQClick(e) {
            if (this._dec) {
                e.stopPropagation();
                MainModel.Ins.showSmallTips("", this._dec, e.target);
            }
        }
        onRenderHandler(item, index) {
            item.setData(item.dataSource, index, this._data);
        }
        onInit() {
            LingChongModel.Ins.on(LingChongModel.UPDATA_NEW_XM, this, this.onUpdataView);
            LingChongModel.Ins.on(LingChongModel.UPDATA_LEVEL_XM, this, this.onUpdataView);
            LingChongModel.Ins.on(LingChongModel.UPDATA_EQUIP_XM, this, this.onEquipUpdataView);
            LingChongModel.Ins.on(LingChongModel.UPDATA_XM_LOCK, this, this.onUpdataLab1View);
            this._isPlay = false;
            this._data = this.Data;
            this.creatAvatar();
            this.updataView();
        }
        onExit() {
            LingChongModel.Ins.off(LingChongModel.UPDATA_LEVEL_XM, this, this.onUpdataView);
            LingChongModel.Ins.off(LingChongModel.UPDATA_LEVEL_XM, this, this.onUpdataView);
            LingChongModel.Ins.off(LingChongModel.UPDATA_EQUIP_XM, this, this.onEquipUpdataView);
            LingChongModel.Ins.off(LingChongModel.UPDATA_XM_LOCK, this, this.onUpdataLab1View);
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            Laya.Tween.clearAll(this._ui.tImg);
        }
        onUpdataView() {
            if (!this._data)
                return;
            this._data = LingChongModel.Ins.petDataList.find(ele => ele.petSerialNum == this._data.petSerialNum);
            this.updataView();
        }
        onEquipUpdataView(revc) {
            if (!this._data)
                return;
            this._data = LingChongModel.Ins.petDataList.find(ele => ele.petSerialNum == this._data.petSerialNum);
            if (revc.type == 2) {
                this.updataView();
            }
            else {
                this.playTween(revc.idx);
            }
        }
        playTween(index) {
            this._isPlay = true;
            this._ui.tImg.visible = true;
            let listX = this._ui.list_xm.x + index * 91;
            let xx = listX + 60;
            let yy = 465;
            Laya.Tween.to(this._ui.tImg, { x: xx, y: yy, scaleX: 0.8, scaleY: 0.8 }, 300, null, Laya.Handler.create(this, this.onTweenComplete));
        }
        onTweenComplete() {
            this._isPlay = false;
            this.updataView();
        }
        updataView() {
            if (!this._data)
                return;
            this._ui.tImg.visible = false;
            let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
            this._ui.lab_name.text = cfg.f_petname;
            this._ui.lab_lv.text = "Lv." + this._data.petLevel;
            this._starCtl.setStar(this._data.petStar);
            this._ui.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            this._ui.tab.img2.visible = false;
            LingChongModel.Ins.xmLockIds = [];
            let array = [];
            let xmlv = 0;
            for (let i = 0; i < cfg.f_talentslot; i++) {
                if (this._data.petTalents[i]) {
                    array.push({ data: this._data.petTalents[i] });
                    xmlv += this._data.petTalents[i].talentLevel;
                    if (this._data.petTalents[i].lock) {
                        LingChongModel.Ins.xmLockIds.push(this._data.petTalents[i].talentId);
                    }
                }
                else {
                    array.push({ data: null });
                }
            }
            this._ui.list_xm.array = array;
            this._ui.list_xm.x = (this._ui.box.width - array.length * 91) * 0.5;
            let qCfg = PetQualityProxy.Ins.getCfgById(cfg.f_petquality);
            if (this._data.petTalentIdToDo) {
                this._ui.sp_th.visible = true;
                this._ui.sp_xm.visible = false;
                let tCfg = PetTalentProxy.Ins.getCfgById(this._data.petTalentIdToDo);
                let tid = parseInt(tCfg.f_attr.split(":")[0]);
                let tval = parseInt(tCfg.f_attr.split(":")[1]) * 1;
                this._ui.quality.skin = IconUtils.getQuaIcon(tCfg.f_quality);
                this._ui.lab_attr.text = MainModel.Ins.getAttrNameIdByID(tid);
                this._dec = MainModel.Ins.getAttrNameIdByID(tid) + ":" + attrConvert(tid, tval);
                this._ui.tImg.x = 280;
                this._ui.tImg.y = 656;
                this._ui.tImg.scaleX = this._ui.tImg.scaleY = 1;
                this._ui.tImg.skin = IconUtils.getQuaIcon(tCfg.f_quality);
                this._ui.tlab.text = MainModel.Ins.getAttrNameIdByID(tid);
                if (this._data.petTalents.length < cfg.f_talentslot) {
                    this._ui.lab_th.text = "装备";
                    this._ui.lab_thdec.text = "点击装备获得新的血脉天赋";
                    this._type = 0;
                    this._ui.btn_fq.visible = false;
                    this._btnTHCtl.setpos(142, 241);
                }
                else {
                    this._ui.lab_th.text = "替换";
                    this._ui.lab_thdec.text = "点击替换会随机替换一条血脉天赋，并继承等级";
                    this._type = 1;
                    this._ui.btn_fq.visible = true;
                    this._btnTHCtl.setpos(291, 241);
                }
            }
            else {
                this._ui.sp_th.visible = false;
                this._ui.sp_xm.visible = true;
                this.onUpdataLab1View();
                let val1 = parseInt(qCfg.f_bloodupcost.split("-")[1]);
                let addNum = parseInt(qCfg.f_bloodpreupcost.split("-")[1]);
                let xNum = val1 + (xmlv - this._data.petTalents.length) * addNum;
                this._ui.lab2.text = xNum + "";
                if (this._data.petTalents.length < cfg.f_talentslot) {
                    this._ui.sp_btn1.x = 147;
                    this._ui.sp_btn2.visible = false;
                    this._ui.lab_sz.visible = false;
                    this._ui.sp_lab.visible = false;
                }
                else {
                    this._ui.sp_lab.visible = true;
                    this._ui.sp_btn1.x = 0;
                    let allNum = 0;
                    let num = 0;
                    for (let i = 0; i < this._data.petTalents.length; i++) {
                        let cfg = PetTalentProxy.Ins.getCfgById(this._data.petTalents[i].talentId);
                        allNum += cfg.f_maxlevel;
                        num += this._data.petTalents[i].talentLevel;
                    }
                    if (num >= allNum) {
                        this._ui.lab_sz.visible = true;
                        this._ui.sp_btn2.visible = false;
                    }
                    else {
                        this._ui.lab_sz.visible = false;
                        this._ui.sp_btn2.visible = true;
                    }
                }
            }
        }
        onUpdataLab1View() {
            if (!this._data)
                return;
            let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
            let qCfg = PetQualityProxy.Ins.getCfgById(cfg.f_petquality);
            let id = parseInt(qCfg.f_bloodgetcost.split("-")[0]);
            let val = parseInt(qCfg.f_bloodgetcost.split("-")[1]);
            this._ui.img1.skin = this._ui.img2.skin = IconUtils.getIconByCfgId(id);
            val = val * (LingChongModel.Ins.xmLockIds.length + 1);
            this._ui.lab1.text = val + "";
            if (LingChongModel.Ins.xmLockIds.length) {
                this._ui.img1.x = 0;
                this._ui.lab1.x = 31;
                let arr = qCfg.f_bloodlockcost.split("|");
                let value = arr[LingChongModel.Ins.xmLockIds.length - 1];
                let id1 = parseInt(value.split("-")[0]);
                let val1 = parseInt(value.split("-")[1]);
                this._ui.img3.skin = IconUtils.getIconByCfgId(id1);
                this._ui.lab3.text = val1 + "";
            }
            else {
                this._ui.img1.x = 85;
                this._ui.lab1.x = 114;
                this._ui.img3.skin = "";
                this._ui.lab3.text = "";
            }
        }
        creatAvatar() {
            if (!this._data)
                return;
            let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            this._avatar = AvatarFactory.createPet(cfg.f_petid);
            this._avatar.play(EAvatarAnim.HandBookStand);
            this._avatar.dir = EAvatarDir.Left;
            this._ui.avatr.addChild(this._avatar);
        }
    }

    exports.LingChongXMView = LingChongXMView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongExchangeItemView extends ui.views.lingchong.ui_lingchongExchangeItemUI {
        constructor() {
            super();
            DebugUtil.draw(this);
            DebugUtil.draw(this.moneyIcon);
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            MainModel.Ins.buyItem(this.price, this.exchangeItem, new Laya.Handler(this, this.onOkHandler), null, true);
        }
        onOkHandler() {
            let req = new PetSoulExchange_req();
            req.fid = this._cfg.f_id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        refresh() {
            this._cfg = this.dataSource;
            let price = ItemViewFactory.convertItem(this._cfg.f_price);
            this.price = price;
            this.moneyIcon.skin = price.getIcon();
            let haveCount = MainModel.Ins.mRoleData.getVal(this.price.cfgId);
            this.moneyNumLabel.text = haveCount + "/" + price.count;
            if (haveCount >= this.price.count) {
                this.moneyNumLabel.color = "#ffeec2";
            }
            else {
                this.moneyNumLabel.color = EGameColor.RED;
            }
            let exchangeItem = ItemViewFactory.convertItem(this._cfg.f_exchangeitem);
            this.exchangeItem = exchangeItem;
            this.iconBg.skin = exchangeItem.quaIcon();
            this.countLabel.text = exchangeItem.count + "";
            this.icon.skin = exchangeItem.getIcon();
            this.itemNameLabel.text = this.exchangeItem.getName();
        }
    }
    class LingChongExchangeView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
            MainModel.Ins.off(MainEvent.ValChange, this, this.onUpdateView);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.lingchong.ui_lingchongExchangeUI();
                this.bindClose(this._ui.btn_close);
                this._ui.list1.itemRender = LingChongExchangeItemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender);
            }
        }
        onItemRender(item) {
            item.refresh();
        }
        onInit() {
            MainModel.Ins.on(MainEvent.ValChange, this, this.onUpdateView);
            this.onUpdateView();
        }
        onUpdateView() {
            this._ui.list1.array = t_Pet_Fusion_Protection.Ins.List;
            this._ui.list1.scrollTo(0);
        }
    }

    exports.LingChongExchangeView = LingChongExchangeView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new LingChongModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            this._model.nextFreeUnix = 0;
            this._model.freeCount = 0;
            this._model.baoDi = 0;
            this._model.petDataList = [];
        }
        initMsg() {
            this._model = LingChongModel.Ins;
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            this.Reg(new LingChongMainView(EViewType.LingChongMainView));
            this.Reg(new LingChongGMView(EViewType.LingChongGMView));
            this.Reg(new LingChongFanPaiView(EViewType.LingChongFanPaiView));
            this.Reg(new LingChongTJView(EViewType.LingChongTJView));
            this.Reg(new LingChongXMTJView(EViewType.LingChongXMTJView));
            this.Reg(new LingChongCZView(EViewType.LingChongCZView));
            this.Reg(new LingChongLVView(EViewType.LingChongLVView));
            this.Reg(new LingChongStarView(EViewType.LingChongStarView));
            this.Reg(new LingChongXMView(EViewType.LingChongXMView));
            this.Reg(new LingChongCQView(EViewType.LingChongCQView));
            this.Reg(new LingChongExchangeView(EViewType.LingChongExchange));
            E.MsgMgr.AddMsg(MSGID.PetInit, this.PetInit, this);
            E.MsgMgr.AddMsg(MSGID.PetChange, this.PetChange, this);
            E.MsgMgr.AddMsg(MSGID.PetFreeChange, this.PetFreeChange, this);
            E.MsgMgr.AddMsg(MSGID.PetBaoDiChange, this.PetBaoDiChange, this);
            E.MsgMgr.AddMsg(MSGID.PetRemove, this.PetRemove, this);
            E.MsgMgr.AddMsg(MSGID.PetHandleNewTalent, this.PetHandleNewTalent, this);
            E.MsgMgr.AddMsg(MSGID.PetBuyFlute, this.PetBuyFlute, this);
            E.MsgMgr.AddMsg(MSGID.PetExtractSuccess, this.PetExtractSuccess, this);
            E.MsgMgr.AddMsg(MSGID.PetUpgradeTalent, this.PetUpgradeTalent, this);
            E.MsgMgr.AddMsg(MSGID.PetNewTalent, this.PetNewTalent, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setRedTip);
        }
        setRedTip() {
            if (LingChongModel.Ins.isRedTip()) {
                MainModel.Ins.funcSetRed(EFuncDef.LingChong, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.LingChong, false);
            }
        }
        PetInit(value) {
            this._model.nextFreeUnix = value.nextFreeUnix;
            this._model.freeCount = value.freeCount;
            this._model.baoDi = value.baoDi;
            this._model.petDataList = value.dataList;
        }
        PetChange(value) {
            for (let i = 0; i < value.dataList.length; i++) {
                let index = this._model.petDataList.findIndex(ele => ele.petSerialNum == value.dataList[i].petSerialNum);
                if (index != -1) {
                    this._model.petDataList[index] = value.dataList[i];
                }
                else {
                    this._model.petDataList.push(value.dataList[i]);
                }
            }
            this._model.event(LingChongModel.Updata_LingChong);
        }
        PetFreeChange(value) {
            this._model.nextFreeUnix = value.nextFreeUnix;
            this._model.freeCount = value.freeCount;
            this._model.event(LingChongModel.Updata_ChouKa);
            this.onMainViewInit();
        }
        PetBaoDiChange(value) {
            this._model.baoDi = value.baoDi;
            this._model.event(LingChongModel.Updata_ChouKa);
        }
        PetRemove(value) {
            for (let i = 0; i < value.petSerialNums.length; i++) {
                let index = this._model.petDataList.findIndex(ele => ele.petSerialNum == value.petSerialNums[i]);
                if (index != -1) {
                    this._model.petDataList.splice(index, 1);
                }
            }
            this._model.event(LingChongModel.REMOVE_LingChong);
        }
        PetNewTalent(value) {
            LingChongModel.Ins.event(LingChongModel.UPDATA_NEW_XM);
        }
        PetHandleNewTalent(value) {
            LingChongModel.Ins.event(LingChongModel.UPDATA_EQUIP_XM, value);
        }
        PetUpgradeTalent(value) {
            LingChongModel.Ins.event(LingChongModel.UPDATA_LEVEL_XM, value.idx);
        }
        PetBuyFlute(value) {
            E.ViewMgr.Close(EViewType.LingChongGMView);
        }
        PetExtractSuccess(value) {
            this._model.ckList.push(value.petIds);
            E.ViewMgr.Open(EViewType.LingChongFanPaiView);
        }
    }

    exports.LingChongModule = LingChongModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MeiRiZhuanPanModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new MeiRiZhuanPanModel();
            }
            return this._ins;
        }
        isRedTip() {
            if (MainModel.Ins.isOpenByFuncId(EFuncDef.MeiRiZhuanPan.toString())) {
                if (this.isItemRedTip() || this.isAwardRedTip()) {
                    return true;
                }
            }
            return false;
        }
        isItemRedTip() {
            if (this.setItemId == 0) {
                return true;
            }
            return false;
        }
        isAwardRedTip() {
            let vo = ActivityModel.Ins.getVo(EActivityType.DayZhuanPan);
            if (vo) {
                let arr = vo.vo.datalist;
                for (let i = 0; i < arr.length; i++) {
                    if (arr[i].param1 == 2) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    MeiRiZhuanPanModel.UPDATA_ITEMID = "UPDATA_ITEMID";
    MeiRiZhuanPanModel.UPDATA_ZHUANPAN = "UPDATA_ZHUANPAN";

    exports.MeiRiZhuanPanModel = MeiRiZhuanPanModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MeiRiZhuanPanTip1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("meirizhuanpan.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.meirizhuanpan.ui_meirizhuanpan1UI;
                this.bindClose(this._ui.close1);
                this.btnCtl = ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnQDClick));
                this.btn1Ctl = ButtonCtl.Create(this._ui.btn1, new Laya.Handler(this, this.onBtnQD1Click));
                if (t_Platform.Ins.isADclose) {
                    this.btn1Ctl.visible = false;
                    this.btnCtl.setX(185);
                }
            }
        }
        onBtnQDClick() {
            let req = new DailyWheelTurn_req;
            req.ad = 0;
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        onBtnQD1Click() {
            E.sendTrack("ad_watch", { type: "zhuanpan_mf" });
            E.sdk.lookVideo((type) => {
                switch (type) {
                    case 0:
                        break;
                    case 1:
                        E.sendTrack("ad_finish", { type: "zhuanpan_mf" });
                        let req = new DailyWheelTurn_req;
                        req.ad = 1;
                        SocketMgr.Ins.SendMessageBin(req);
                        this.Close();
                        break;
                }
            });
        }
        onInit() {
        }
        onExit() {
        }
    }

    exports.MeiRiZhuanPanTip1 = MeiRiZhuanPanTip1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WheelRewardsProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new WheelRewardsProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Wheel_Rewards";
        }
    }
    class WheelRPriceProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new WheelRPriceProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Wheel_Price";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_id == id);
        }
    }

    exports.WheelRPriceProxy = WheelRPriceProxy;
    exports.WheelRewardsProxy = WheelRewardsProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MeiRiZhuanPanTip2 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("meirizhuanpan.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.meirizhuanpan.ui_meirizhuanpan2UI;
                this.bindClose(this._ui.close1);
                this._btnCtl = ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnQDClick));
                this._btn1Ctl = ButtonCtl.Create(this._ui.btn1, new Laya.Handler(this, this.onBtn1QDClick));
            }
        }
        onBtnQDClick() {
            let vo = ActivityModel.Ins.getVo(EActivityType.DayZhuanPan);
            if (!vo)
                return;
            let req = new ActivityAction_req;
            req.uid = vo.cfg.f_id;
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        onBtn1QDClick() {
            let vo = ActivityModel.Ins.getVo(EActivityType.DayZhuanPan);
            if (!vo)
                return;
            E.sendTrack("ad_watch", { type: "zhuanpan_sb" });
            E.sdk.lookVideo((type) => {
                switch (type) {
                    case 0:
                        break;
                    case 1:
                        E.sendTrack("ad_finish", { type: "zhuanpan_sb" });
                        let req = new ActivityAction_req;
                        req.uid = vo.cfg.f_id;
                        req.extra = "1";
                        SocketMgr.Ins.SendMessageBin(req);
                        this.Close();
                        break;
                }
            });
        }
        onInit() {
            let st;
            let cfg = WheelRewardsProxy.Ins.List.find(ele => ele.f_id === this.Data);
            if (!cfg)
                return;
            if (cfg.f_ischoose == 1) {
                let arr = cfg.f_Rewards.split("|");
                for (let i = 0; i < arr.length; i++) {
                    let id = parseInt(arr[i].split("-")[0]);
                    if (id == MeiRiZhuanPanModel.Ins.setItemId) {
                        st = arr[i];
                        break;
                    }
                }
            }
            else {
                st = cfg.f_Rewards;
            }
            let vo = new ItemVo;
            vo.cfgId = parseInt(st.split("-")[0]);
            vo.count = parseInt(st.split("-")[1]);
            ItemViewFactory.refreshSlot(this._ui.item, vo);
            this._ui.lab.text = vo.count + "";
            if (cfg.f_isad == 1 && !t_Platform.Ins.isADclose) {
                this._ui.btn1.visible = true;
                this._btnCtl.setpos(58, 332);
                this._ui.lab_title.visible = true;
            }
            else {
                this._ui.btn1.visible = false;
                this._btnCtl.setpos(185, 332);
                this._ui.lab_title.visible = false;
            }
        }
        onExit() {
        }
    }

    exports.MeiRiZhuanPanTip2 = MeiRiZhuanPanTip2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MeiRiZhuanPanTip3 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("meirizhuanpan.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.meirizhuanpan.ui_meirizhuanpan3UI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = ui.views.meirizhuanpan.ui_meirizhuanItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRendler);
                this._ui.list.selectEnable = true;
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
            }
        }
        onItemRendler(item, index) {
            let vo = new ItemVo;
            vo.cfgId = parseInt(item.dataSource.split("-")[0]);
            vo.count = parseInt(item.dataSource.split("-")[1]);
            ItemViewFactory.refreshSlot(item.item, vo, false);
            item.lab.text = vo.getName();
            if (index == this._ui.list.selectedIndex) {
                item.img_xz.visible = true;
            }
            else {
                item.img_xz.visible = false;
            }
        }
        onBtnClick() {
            let req = new DailyWheelBigPrize_req;
            let id = parseInt(this._ui.list.selectedItem.split("-")[0]);
            req.itemId = id;
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        onInit() {
            let arr = WheelRewardsProxy.Ins.List;
            let array = [];
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].f_ischoose == 1) {
                    array = arr[i].f_Rewards.split("|");
                    break;
                }
            }
            this._ui.list.array = array;
            this._ui.list.selectedIndex = 0;
        }
        onExit() {
        }
    }

    exports.MeiRiZhuanPanTip3 = MeiRiZhuanPanTip3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MeiRiZhuanPanView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("meirizhuanpan.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.meirizhuanpan.ui_meirizhuanpanUI;
                let img_tqCtl = ButtonCtl.Create(this._ui.img_tq, new Laya.Handler(this, this.onBtnTQClick));
                this.btnList.push(ButtonCtl.Create(this._ui.btn_tz, new Laya.Handler(this, this.onBtnQDClick)), ButtonCtl.Create(this._ui.img_add, new Laya.Handler(this, this.onBtnAddClick)), img_tqCtl);
                for (let i = 1; i < 11; i++) {
                    this._ui["img_" + i].on(Laya.Event.CLICK, this, this.onImgClick, [i]);
                }
                this._tm = new Laya.Timer;
                this._timeCtl = new TimeCtl(this._ui.timetf);
                this._ui.sp_click.on(Laya.Event.CLICK, this, this.onClick);
                if (t_Platform.Ins.isHideAdImg) {
                    img_tqCtl.visible = false;
                    this.UI.height -= this._ui.img_tq.height;
                }
            }
        }
        onBtnTQClick() {
            E.ViewMgr.Open(EViewType.ZhongShenKa);
        }
        onClick() {
            this.Close();
        }
        onImgClick(index, e) {
            e.stopPropagation();
            if (index == 1) {
                if (MeiRiZhuanPanModel.Ins.setItemId) {
                    let vo1 = new ItemVo;
                    vo1.cfgId = MeiRiZhuanPanModel.Ins.setItemId;
                    MainModel.Ins.showSmallTips(vo1.getName(), vo1.getDesc(), e.target);
                }
            }
            else {
                let cfg = WheelRewardsProxy.Ins.List.find(ele => ele.f_id === index);
                if (cfg) {
                    let vo = new ItemVo;
                    vo.cfgId = parseInt(cfg.f_Rewards.split("-")[0]);
                    MainModel.Ins.showSmallTips(vo.getName(), vo.getDesc(), e.target);
                }
            }
        }
        onInit() {
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.updataView);
            MeiRiZhuanPanModel.Ins.on(MeiRiZhuanPanModel.UPDATA_ITEMID, this, this.updataItem);
            MeiRiZhuanPanModel.Ins.on(MeiRiZhuanPanModel.UPDATA_ZHUANPAN, this, this.playTween);
            this._ui.img_zz.visible = true;
            this._ui.img_zz1.visible = false;
            this._ui.img_zz1.rotation = 0;
            this._now = 1;
            this._isPlay = false;
            this._ui.btn_tz.visible = true;
            if (main.skinStyle == EMainSkin.Drum) {
                this._ui.img_6.skin = "remote/meirizhuanpan/3_3.png";
                this._ui.zhuanpan.skin = "remote/meirizhuanpan/lunpan1.png";
            }
            else if (main.skinStyle == EMainSkin.Kotow) {
                this._ui.img_6.skin = "remote/meirizhuanpan/3.png";
                this._ui.zhuanpan.skin = "remote/meirizhuanpan/lunpan.png";
            }
            this.updataView();
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.updataView);
            MeiRiZhuanPanModel.Ins.off(MeiRiZhuanPanModel.UPDATA_ITEMID, this, this.updataItem);
            MeiRiZhuanPanModel.Ins.off(MeiRiZhuanPanModel.UPDATA_ZHUANPAN, this, this.playTween);
            this._tm.clearAll(this);
            this._timeCtl.stop();
        }
        updataView() {
            this._activityVo = ActivityModel.Ins.getVo(EActivityType.DayZhuanPan);
            if (this._activityVo) {
                let flag = false;
                let arr = this._activityVo.vo.datalist;
                let arr1 = WheelRewardsProxy.Ins.List;
                for (let i = 0; i < arr1.length; i++) {
                    let vo = arr.find(ele => ele.id === arr1[i].f_id);
                    if (vo && vo.param1 == 1) {
                        this._ui["zz_" + (i + 1)].visible = true;
                    }
                    else {
                        this._ui["zz_" + (i + 1)].visible = false;
                    }
                    if (vo && vo.param1 == 2) {
                        flag = true;
                    }
                }
                if (MeiRiZhuanPanModel.Ins.setItemId) {
                    this._ui.img_add.visible = false;
                    this._ui.img_1.visible = true;
                    if (MeiRiZhuanPanModel.Ins.setItemId == 3) {
                        if (main.skinStyle == EMainSkin.Drum) {
                            this._ui.img_1.skin = "remote/meirizhuanpan/tj_3_3.png";
                        }
                        else if (main.skinStyle == EMainSkin.Kotow) {
                            this._ui.img_1.skin = "remote/meirizhuanpan/tj_3.png";
                        }
                    }
                    else {
                        this._ui.img_1.skin = "remote/meirizhuanpan/tj_" + MeiRiZhuanPanModel.Ins.setItemId + ".png";
                    }
                    DotManager.removeDot(this._ui.img_add);
                }
                else {
                    this._ui.img_add.visible = true;
                    this._ui.img_1.visible = false;
                    DotManager.addDot(this._ui.img_add);
                }
                if (flag) {
                    this._ui.btn_tz.disabled = false;
                    this._ui.lab_name.text = "领取";
                    this._ui.img.visible = this._ui.lab.visible = false;
                    DotManager.addDot(this._ui.btn_tz);
                }
                else {
                    this._ui.lab_name.text = "启动";
                    DotManager.removeDot(this._ui.btn_tz);
                    let index = this._activityVo.vo.datalist.length + 1;
                    let cfg = WheelRPriceProxy.Ins.getCfgById(index);
                    if (cfg) {
                        this._ui.btn_tz.disabled = false;
                        this._ui.img.visible = this._ui.lab.visible = true;
                        let id = parseInt(cfg.f_price.split("-")[0]);
                        let num = parseInt(cfg.f_price.split("-")[1]);
                        this._ui.img.skin = IconUtils.getIconByCfgId(id);
                        this._ui.lab.text = num + "";
                    }
                    else {
                        this._ui.btn_tz.disabled = true;
                        this._ui.img.visible = this._ui.lab.visible = false;
                    }
                }
                let time = this._activityVo.vo.endtime - TimeUtil.serverTime;
                if (time > 0) {
                    this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                }
                else {
                    this.endTime();
                    this._timeCtl.stop();
                }
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        updataItem() {
            if (MeiRiZhuanPanModel.Ins.setItemId) {
                this._ui.img_add.visible = false;
                this._ui.img_1.visible = true;
                if (MeiRiZhuanPanModel.Ins.setItemId == 3) {
                    if (main.skinStyle == EMainSkin.Drum) {
                        this._ui.img_1.skin = "remote/meirizhuanpan/tj_3_3.png";
                    }
                    else if (main.skinStyle == EMainSkin.Kotow) {
                        this._ui.img_1.skin = "remote/meirizhuanpan/tj_3.png";
                    }
                }
                else {
                    this._ui.img_1.skin = "remote/meirizhuanpan/tj_" + MeiRiZhuanPanModel.Ins.setItemId + ".png";
                }
                DotManager.removeDot(this._ui.img_add);
            }
            else {
                DotManager.addDot(this._ui.img_add);
            }
        }
        onBtnQDClick() {
            if (this._isPlay) {
                return;
            }
            if (!this._activityVo) {
                return;
            }
            if (MeiRiZhuanPanModel.Ins.setItemId == 0) {
                E.ViewMgr.Open(EViewType.MeiRiZhuanPanTip3);
                return;
            }
            let arr = this._activityVo.vo.datalist;
            if (arr.length == 0) {
                E.ViewMgr.Open(EViewType.MeiRiZhuanPanTip1);
                return;
            }
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].param1 == 2) {
                    E.ViewMgr.Open(EViewType.MeiRiZhuanPanTip2, null, arr[i].id);
                    return;
                }
            }
            let req = new DailyWheelTurn_req;
            req.ad = 0;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnAddClick() {
            E.ViewMgr.Open(EViewType.MeiRiZhuanPanTip3);
        }
        playTween() {
            this._isPlay = true;
            this._ui.btn_tz.visible = false;
            if (MeiRiZhuanPanModel.Ins.pos >= this._now) {
                this._index = MeiRiZhuanPanModel.Ins.pos - this._now;
            }
            else {
                this._index = MeiRiZhuanPanModel.Ins.pos + 10 - this._now;
            }
            this._now = MeiRiZhuanPanModel.Ins.pos;
            this._num1 = 0;
            this._num2 = 0;
            this._time = 350;
            this._tm.once(200, this, this.onComplete4);
        }
        onComplete4() {
            this._ui.img_zz.visible = false;
            this._ui.img_zz1.visible = true;
            if (this._num1 == 40) {
                this.onComplete5();
            }
            else {
                this._ui.img_zz1.rotation += 36;
                this._time -= 50;
                if (this._time <= 50) {
                    this._time = 50;
                }
                this._tm.once(this._time, this, this.onComplete4, null, false);
            }
            this._num1++;
        }
        onComplete5() {
            if (this._num2 == this._index) {
                this.onComplete6();
            }
            else {
                this._ui.img_zz1.rotation += 36;
                this._tm.once(100, this, this.onComplete5, null, false);
            }
            this._num2++;
        }
        onComplete6() {
            this._isPlay = false;
            this._ui.btn_tz.visible = true;
            E.ViewMgr.Open(EViewType.MeiRiZhuanPanTip2, null, MeiRiZhuanPanModel.Ins.pos);
        }
    }

    exports.MeiRiZhuanPanView = MeiRiZhuanPanView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MeiRiZhuanPanModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new MeiRiZhuanPanModule();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            this._model = MeiRiZhuanPanModel.Ins;
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onMainViewInit);
            this.Reg(new MeiRiZhuanPanView(EViewType.MeiRiZhuanPanView));
            this.Reg(new MeiRiZhuanPanTip1(EViewType.MeiRiZhuanPanTip1));
            this.Reg(new MeiRiZhuanPanTip2(EViewType.MeiRiZhuanPanTip2));
            this.Reg(new MeiRiZhuanPanTip3(EViewType.MeiRiZhuanPanTip3));
            E.MsgMgr.AddMsg(MSGID.DailyWheelBigPrize, this.DailyWheelBigPrize, this);
            E.MsgMgr.AddMsg(MSGID.DailyWheelTurn, this.DailyWheelTurn, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (MeiRiZhuanPanModel.Ins.isRedTip()) {
                MainModel.Ins.funcSetRed(EFuncDef.MeiRiZhuanPan, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.MeiRiZhuanPan, false);
            }
        }
        DailyWheelBigPrize(value) {
            this._model.setItemId = value.itemId;
            this.onMainViewInit();
            this._model.event(MeiRiZhuanPanModel.UPDATA_ITEMID);
        }
        DailyWheelTurn(value) {
            this._model.pos = value.pos;
            this._model.event(MeiRiZhuanPanModel.UPDATA_ZHUANPAN);
        }
    }

    exports.MeiRiZhuanPanModule = MeiRiZhuanPanModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DailyEventPositionProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new DailyEventPositionProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_DailyEvent_Position";
        }
    }
    class DailyEventTaskProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new DailyEventTaskProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_DailyEvent_Task";
        }
    }

    exports.DailyEventPositionProxy = DailyEventPositionProxy;
    exports.DailyEventTaskProxy = DailyEventTaskProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MoJinXiaoWeiModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new MoJinXiaoWeiModel();
            }
            return this._ins;
        }
        showView() {
            if (MoJinXiaoWeiModel.Ins.xlList && MoJinXiaoWeiModel.Ins.xlList.length) {
                let data = MoJinXiaoWeiModel.Ins.xlList.shift();
                Laya.timer.callLater(this, this.openView, [data]);
            }
        }
        openView(data) {
            if (data.type == 1) {
                E.ViewMgr.Open(EViewType.MoJinXiaoWeiView2, null, data);
            }
            else {
                E.ViewMgr.Open(EViewType.MoJinXiaoWeiView1, null, data);
            }
        }
        isDotMain() {
            if (this.isDotTab1() || this.isDotTab2()) {
                return true;
            }
            return false;
        }
        isDotTab1() {
            let cfg = DailyEventPositionProxy.Ins.GetDataById(1);
            let id = parseInt(cfg.f_Cost.split("-")[0]);
            let count = MainModel.Ins.mRoleData.getVal(id);
            let max = parseInt(System_RefreshTimeProxy.Ins.getVal(75));
            if (count >= max) {
                return true;
            }
            return false;
        }
        isDotTab2() {
            for (let i = 0; i < this.taskList.length; i++) {
                if (this.taskList[i].state == 1) {
                    return true;
                }
            }
            return false;
        }
    }
    MoJinXiaoWeiModel.UPDATA_TASK_VIEW = "UPDATA_TASK_VIEW";
    MoJinXiaoWeiModel.UPDATA_XL_VIEW = "UPDATA_XL_VIEW";

    exports.MoJinXiaoWeiModel = MoJinXiaoWeiModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MoJinXiaoWeiItem extends ui.views.mojinxiaowei.ui_mojinxiaoweiItemUI {
        constructor() {
            super();
            this.list.itemRender = ui.views.main.ui_slot_itemUI;
            this.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn1, new Laya.Handler(this, this.onBtn1Click));
        }
        onBtnClick() {
            if (this._cfg) {
                E.ViewMgr.Close(EViewType.MoJinXiaoWeiView);
                if (this._cfg.f_viewjump != 0) {
                    E.ViewMgr.OpenByFuncid(this._cfg.f_viewjump, false);
                }
            }
        }
        onBtn1Click() {
            if (this._data) {
                let req = new DailyEventTask_req;
                req.fid = this._data.fid;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onRenderHandler(item) {
            let itemVo = new ItemVo();
            let arr = item.dataSource.split("-");
            itemVo.cfgId = parseInt(arr[0]);
            itemVo.count = parseInt(arr[1]);
            ItemViewFactory.refreshSlot(item, itemVo);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this._cfg = DailyEventTaskProxy.Ins.GetDataById(value.fid);
            let stt;
            if (value.count >= this._cfg.f_taskcontent) {
                stt = this._cfg.f_taskcontent + "/" + this._cfg.f_taskcontent;
            }
            else {
                stt = value.count + "/" + this._cfg.f_taskcontent;
            }
            let st = StringUtil.format(t_Txt_Config.Ins.replace(this._cfg.f_taskinfo), this._cfg.f_taskcontent) + "(" + stt + ")";
            this.lab.text = t_Txt_Config.Ins.replace(st);
            this.list.array = this._cfg.f_rewards.split("|");
            DotManager.removeDot(this.btn1);
            if (value.state == 2) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn1.mouseEnabled = false;
                this.btn1.skin = "remote/common/base/anniu_grey.png";
                this.lab2.text = "已领取";
            }
            else if (value.state == 1) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn1.mouseEnabled = true;
                this.btn1.skin = "remote/common/base/anniu_blue.png";
                this.lab2.text = "领取";
                DotManager.addDot(this.btn1, 10, -10);
            }
            else if (value.state == 0) {
                this.btn.visible = true;
                this.btn1.visible = false;
            }
        }
    }

    exports.MoJinXiaoWeiItem = MoJinXiaoWeiItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MoJinXiaoWeiView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.mMaskClick = false;
        }
        onAddLoadRes() {
            this.addAtlas("mojinxiaowei.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.mojinxiaowei.ui_mojinxiaoweiViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick)), ButtonCtl.Create(this._ui.btn_help, new Laya.Handler(this, this.onBtnTipClick)));
                const tabsSkin = [this._ui.tab1, this._ui.tab2];
                let st = E.getLang("mojinxiaoweiTab");
                this.tabList = st.split("-");
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this.selCtl = new SelectListCtl();
                this.selCtl.init(this._ui.sanjiao3, this._ui.listarea3, this._ui.listcontainer3, this._ui.listtf3, ui.views.mojinxiaowei.ui_mojinxiaoweiItem1UI, this.chestQuaSelectConfigList);
                this.selCtl.selectHandler = new Laya.Handler(this, this.onQuaSelHandler);
                this._timeCtlTask = new TimeCtl(this._ui.lab_time);
                this._ui.list.itemRender = MoJinXiaoWeiItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onTaskRender);
                this._checkCtl = new CheckBoxCtl({ bg: this._ui.ckbg, gou: this._ui.gou });
                this._checkCtl.selected = false;
                this._checkCtl.selectHander = new Laya.Handler(this, this.onCheckHandler);
            }
        }
        onQuaSelHandler() {
            let l = DailyEventPositionProxy.Ins.List;
            let quaCfg = this.selCtl.selectVo;
            for (let i = 0; i < l.length; i++) {
                if (quaCfg.f_id == l[i].f_id) {
                    this._ui["img" + (i + 1)].skin = "remote/mojinxiaowei/bq.png";
                }
                else {
                    this._ui["img" + (i + 1)].skin = "remote/mojinxiaowei/bq_1.png";
                }
            }
            this.updataRes();
        }
        get chestQuaSelectConfigList() {
            let _listData = [];
            let l = DailyEventPositionProxy.Ins.List;
            for (let i = 0; i < l.length; i++) {
                let vo = new QuickQua();
                vo.f_id = l[i].f_id;
                vo.color = "FBF0B6";
                vo.txt = l[i].f_positionName;
                _listData.push(vo);
                this._ui["lab" + (i + 1)].text = l[i].f_positionName;
            }
            return _listData;
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab.text = this.tabList[index];
            if (sel) {
                skin.img.skin = "remote/mojinxiaowei/lanwei_2.png";
            }
            else {
                skin.img.skin = "remote/mojinxiaowei/lanwei_1.png";
            }
        }
        onTabSelectHandler(v) {
            if (v == -1)
                return;
            this._ui.sp1.visible = this._ui.sp2.visible = false;
            this._ui["sp" + (v + 1)].visible = true;
            this["updataView" + (v + 1)]();
        }
        onCheckHandler() {
            this.updataRes();
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("mojinxiaoweiTitle", "mojinxiaoweiDesc");
        }
        onBtnClick() {
            if (this._cfg) {
                let type;
                if (this._checkCtl.selected) {
                    type = 2;
                }
                else {
                    type = 1;
                }
                let req = new DailyEventSearch_req;
                req.type = type;
                req.position = this._cfg.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onInit() {
            this._ui.mouseEnabled = true;
            MainModel.Ins.on(MainEvent.ValChangeCell, this, this.onValChange);
            MoJinXiaoWeiModel.Ins.on(MoJinXiaoWeiModel.UPDATA_TASK_VIEW, this, this.onupdataTaskView);
            MoJinXiaoWeiModel.Ins.on(MoJinXiaoWeiModel.UPDATA_XL_VIEW, this, this.onupdataXLView);
            this.tabsCtl.selectIndex = 0;
            this.selCtl.selectIndex(0);
        }
        onExit() {
            MainModel.Ins.off(MainEvent.ValChangeCell, this, this.onValChange);
            MoJinXiaoWeiModel.Ins.off(MoJinXiaoWeiModel.UPDATA_TASK_VIEW, this, this.onupdataTaskView);
            MoJinXiaoWeiModel.Ins.off(MoJinXiaoWeiModel.UPDATA_XL_VIEW, this, this.onupdataXLView);
            this.tabsCtl.selectIndex = -1;
            this._timeCtlTask.stop();
            if (this._eff) {
                this._eff.dispose();
                this._eff = null;
            }
        }
        onupdataTaskView() {
            this.updataView2();
        }
        onupdataXLView() {
            if (!this._eff) {
                this._eff = new SimpleEffect(this._ui.sp, `o/spine/uiluopan/uiluopan`, 0, 0, 1.0);
            }
            this._ui.mouseEnabled = false;
            this._eff.play(0, false, this, this.effEnd);
        }
        effEnd() {
            this._eff.stop();
            this._ui.mouseEnabled = true;
            MoJinXiaoWeiModel.Ins.showView();
        }
        updataDot() {
            if (MoJinXiaoWeiModel.Ins.isDotTab1()) {
                DotManager.addDot(this._ui.tab1, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.tab1);
            }
            if (MoJinXiaoWeiModel.Ins.isDotTab2()) {
                DotManager.addDot(this._ui.tab2, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.tab2);
            }
        }
        updataView1() {
        }
        onValChange(id) {
            if (this._cfg) {
                let idd = parseInt(this._cfg.f_Cost.split("-")[0]);
                if (id == idd) {
                    this.updataRes();
                }
            }
        }
        updataRes() {
            this._cfg = DailyEventPositionProxy.Ins.GetDataById(this.selCtl.selectVo.f_id);
            let st;
            if (this._checkCtl.selected) {
                st = this._cfg.f_CostTen;
            }
            else {
                st = this._cfg.f_Cost;
            }
            let id = parseInt(st.split("-")[0]);
            let count = MainModel.Ins.mRoleData.getVal(id);
            let max = parseInt(System_RefreshTimeProxy.Ins.getVal(75));
            this._ui.img.skin = IconUtils.getIconByCfgId(id);
            this._ui.lab.text = count + "/" + max;
            if (count >= max) {
                DotManager.addDot(this._ui.btn, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.btn);
            }
            this.updataDot();
        }
        updataView2() {
            let time = MoJinXiaoWeiModel.Ins.taskEndUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtlTask.start(time, new Laya.Handler(this, this.onUpdateTaskTime), new Laya.Handler(this, this.endTaskTime));
            }
            else {
                this.endTaskTime();
                this._timeCtlTask.stop();
            }
            let arr = [];
            let arr1 = [];
            let arr2 = [];
            for (let i = 0; i < MoJinXiaoWeiModel.Ins.taskList.length; i++) {
                let vo = MoJinXiaoWeiModel.Ins.taskList[i];
                if (vo.state == 1) {
                    arr.push(vo);
                }
                else if (vo.state == 0) {
                    arr1.push(vo);
                }
                else if (vo.state == 2) {
                    arr2.push(vo);
                }
            }
            this._ui.list.array = arr.concat(arr1.concat(arr2));
            this.updataDot();
        }
        onUpdateTaskTime() {
            let time_str = TimeUtil.subTime(this._timeCtlTask.tickVal) + "后重置";
            this._timeCtlTask.setText(time_str);
        }
        endTaskTime() {
            this._timeCtlTask.setText("");
        }
        onTaskRender(item) {
            item.setData(item.dataSource);
        }
    }

    exports.MoJinXiaoWeiView = MoJinXiaoWeiView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MoJinXiaoWeiView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.mMaskClick = false;
        }
        onAddLoadRes() {
            this.addAtlas("mojinxiaowei.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.mojinxiaowei.ui_mojinxiaoweiView1UI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.Close));
                this._ui.list.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onRenderHandler(item) {
            let itemVo = new ItemVo();
            itemVo.cfgId = item.dataSource.id;
            itemVo.count = item.dataSource.count;
            ItemViewFactory.refreshSlot(item, itemVo);
        }
        onInit() {
            let data = this.Data;
            let cfg = DailyEventPositionProxy.Ins.GetDataById(MoJinXiaoWeiModel.Ins.xlPosition);
            this._ui.lab_name.text = cfg.f_positionName;
            this._ui.lab.text = cfg["f_introType" + data.type];
            this._ui.list.array = data.rewardList;
            if (data.rewardList.length >= this._ui.list.repeatX) {
                this._ui.list.width = 605;
            }
            else {
                this._ui.list.width = (data.rewardList.length * 100) + (data.rewardList.length - 1) * this._ui.list.spaceX;
            }
        }
        onExit() {
            MoJinXiaoWeiModel.Ins.showView();
        }
    }

    exports.MoJinXiaoWeiView1 = MoJinXiaoWeiView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MoJinXiaoWeiView2 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.mMaskClick = false;
        }
        onAddLoadRes() {
            this.addAtlas("mojinxiaowei.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.mojinxiaowei.ui_mojinxiaoweiView2UI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.Close));
            }
        }
        onInit() {
            let data = this.Data;
            let cfg = DailyEventPositionProxy.Ins.GetDataById(MoJinXiaoWeiModel.Ins.xlPosition);
            this._ui.lab_name.text = cfg.f_positionName;
            this._ui.lab.text = cfg["f_introType" + data.type];
            this._ui.img.skin = "remote/mojinxiaowei/" + cfg.f_type2Pic;
            ItemViewFactory.renderItemSlots(this._ui.sp, data.rewardList, 10, 0.8, "center");
        }
        onExit() {
            MoJinXiaoWeiModel.Ins.showView();
        }
    }

    exports.MoJinXiaoWeiView2 = MoJinXiaoWeiView2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MoJinXiaoWeiModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new MoJinXiaoWeiModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            MoJinXiaoWeiModel.Ins.taskList = [];
        }
        initMsg() {
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.ValChangeCell, this, this.onMainViewInit);
            this.Reg(new MoJinXiaoWeiView(EViewType.MoJinXiaoWeiView));
            this.Reg(new MoJinXiaoWeiView1(EViewType.MoJinXiaoWeiView1));
            this.Reg(new MoJinXiaoWeiView2(EViewType.MoJinXiaoWeiView2));
            E.MsgMgr.AddMsg(MSGID.DailyEventInit, this.DailyEventInit, this);
            E.MsgMgr.AddMsg(MSGID.DailyEventTaskUpdate, this.DailyEventTaskUpdate, this);
            E.MsgMgr.AddMsg(MSGID.DailyEventSearch, this.DailyEventSearch, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (MoJinXiaoWeiModel.Ins.isDotMain()) {
                MainModel.Ins.funcSetRed(EFuncDef.MoJinXiaoWei, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.MoJinXiaoWei, false);
            }
        }
        DailyEventInit(value) {
            MoJinXiaoWeiModel.Ins.taskList = value.taskList;
            MoJinXiaoWeiModel.Ins.taskEndUnix = value.taskEndUnix;
            MoJinXiaoWeiModel.Ins.event(MoJinXiaoWeiModel.UPDATA_TASK_VIEW);
            this.onMainViewInit();
        }
        DailyEventTaskUpdate(value) {
            for (let i = 0; i < value.taskList.length; i++) {
                let index = MoJinXiaoWeiModel.Ins.taskList.findIndex(ele => ele.fid == value.taskList[i].fid);
                if (index != -1) {
                    MoJinXiaoWeiModel.Ins.taskList[index] = value.taskList[i];
                }
            }
            MoJinXiaoWeiModel.Ins.event(MoJinXiaoWeiModel.UPDATA_TASK_VIEW);
            this.onMainViewInit();
        }
        DailyEventSearch(value) {
            MoJinXiaoWeiModel.Ins.xlList = value.dataList;
            MoJinXiaoWeiModel.Ins.xlList.sort((this.onSort));
            MoJinXiaoWeiModel.Ins.xlPosition = value.position;
            MoJinXiaoWeiModel.Ins.event(MoJinXiaoWeiModel.UPDATA_XL_VIEW);
        }
        onSort(a, b) {
            return a.type - b.type;
        }
    }

    exports.MoJinXiaoWeiModule = MoJinXiaoWeiModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MonopolyTileRewardsProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let eventType = this.List[i].f_EventType;
                if (!this._map[eventType]) {
                    this._map[eventType] = {};
                }
                let areaType = this.List[i].f_AreaType;
                if (!this._map[eventType][areaType]) {
                    this._map[eventType][areaType] = [];
                }
                this._map[eventType][areaType].push(this.List[i]);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new MonopolyTileRewardsProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Monopoly_TileRewards";
        }
        getListByEventAndArea(eventType, areaType) {
            return this._map[eventType][areaType];
        }
    }
    class MonopolyMapProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new MonopolyMapProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Monopoly_Map";
        }
    }
    class MonopolyTaskProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new MonopolyTaskProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Monopoly_Task";
        }
    }
    class MonopolyPackProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new MonopolyPackProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Monopoly_Pack";
        }
    }
    class MonopolyRoundRewardsProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let eventType = this.List[i].f_EventType;
                if (!this._map[eventType]) {
                    this._map[eventType] = {};
                }
                let areaType = this.List[i].f_AreaID;
                if (!this._map[eventType][areaType]) {
                    this._map[eventType][areaType] = [];
                }
                this._map[eventType][areaType].push(this.List[i]);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new MonopolyRoundRewardsProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Monopoly_RoundRewards";
        }
        getListByEventAndArea(eventType, areaType) {
            return this._map[eventType][areaType];
        }
    }
    class MonopolyConfigProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new MonopolyConfigProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Monopoly_Config";
        }
    }

    exports.MonopolyConfigProxy = MonopolyConfigProxy;
    exports.MonopolyMapProxy = MonopolyMapProxy;
    exports.MonopolyPackProxy = MonopolyPackProxy;
    exports.MonopolyRoundRewardsProxy = MonopolyRoundRewardsProxy;
    exports.MonopolyTaskProxy = MonopolyTaskProxy;
    exports.MonopolyTileRewardsProxy = MonopolyTileRewardsProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MonopolyModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new MonopolyModel();
            }
            return this._ins;
        }
        isRedTip() {
            if (MainModel.Ins.isOpenByFuncId(EFuncDef.Monopoly.toString())) {
                if (this.isRedTab1() || this.isRedTab2()) {
                    return true;
                }
            }
            return false;
        }
        isRedTab1() {
            if (this.isRedLBTip()) {
                return true;
            }
            return false;
        }
        isRedTab2() {
            if (!this.taskList) {
                return false;
            }
            for (let i = 0; i < this.taskList.length; i++) {
                if (this.taskList[i].state == 1) {
                    return true;
                }
            }
            return false;
        }
        isRedLBTip() {
            if (!this.packList) {
                return false;
            }
            for (let i = 0; i < this.packList.length; i++) {
                let cfg = MonopolyPackProxy.Ins.GetDataById(this.packList[i].fid);
                if (cfg.f_PackType == 1) {
                    if (this.packList[i].count < cfg.f_PackBuyLimit) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    MonopolyModel.UPDATA_VIEW_MAP = "UPDATA_VIEW_MAP";
    MonopolyModel.UPDATA_VIEW_TASK = "UPDATA_VIEW_TASK";
    MonopolyModel.UPDATA_VIEW_PACK = "UPDATA_VIEW_PACK";
    MonopolyModel.UPDATA_AWARD = "UPDATA_AWARD";

    exports.MonopolyModel = MonopolyModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MonopolyAwardView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("monopoly.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.monopoly.ui_MonopolyAwardViewUI;
                this.bindClose(this._ui.close1);
                this.btnList.push();
                this._ui.list.itemRender = ui.views.monopoly.ui_MonopolyAwardItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRender);
            }
        }
        onRender(item, index) {
            if (index >= this._arr.length - 1) {
                item.lab.text = `10圈游历后重复奖励`;
            }
            else {
                item.lab.text = `进行${item.dataSource.f_Round}圈游历`;
            }
            ItemViewFactory.renderItemSlots(item.rewardList, item.dataSource.f_RoundRewards, 10, 0.8, "right");
        }
        onInit() {
            this._data = this.Data;
            let cfg = MonopolyMapProxy.Ins.GetDataById(this._data.fid);
            this._arr = MonopolyRoundRewardsProxy.Ins.getListByEventAndArea(cfg.f_EventType, cfg.f_AreaID);
            this._ui.list.array = this._arr;
        }
        onExit() {
        }
    }

    exports.MonopolyAwardView = MonopolyAwardView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MonopolyAwardView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.mMaskClick = false;
        }
        onAddLoadRes() {
            this.addAtlas("monopoly.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.monopoly.ui_MonopolyAwardView1UI;
                this.bindClose(this._ui.close1);
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.Close));
                this._timer = new Laya.Timer;
            }
        }
        onInit() {
            this._data = this.Data;
            let cfg = MonopolyMapProxy.Ins.GetDataById(this._data.fid);
            this._ui.lab.text = `当前已在${cfg.f_AreaName}进行了：`;
            this._ui.lab1.text = this._data.count + "";
            let arr = MonopolyRoundRewardsProxy.Ins.getListByEventAndArea(cfg.f_EventType, cfg.f_AreaID);
            let c = arr[this._data.count - 1];
            if (!c) {
                c = arr[arr.length - 1];
            }
            let itemVo = new ItemVo();
            itemVo.cfgId = parseInt(c.f_RoundRewards.split("-")[0]);
            itemVo.count = parseInt(c.f_RoundRewards.split("-")[1]);
            ItemViewFactory.refreshSlot(this._ui.slot, itemVo);
            this._ui.lab3.text = itemVo.getName();
            this._timer.once(500, this, () => {
                let req = new MonopolyReward_req;
                req.type = 2;
                SocketMgr.Ins.SendMessageBin(req);
            });
        }
        onExit() {
            MonopolyModel.Ins.event(MonopolyModel.UPDATA_AWARD);
        }
    }

    exports.MonopolyAwardView1 = MonopolyAwardView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MonopolyLBItem extends ui.views.monopoly.ui_MonopolyLBItemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn1, new Laya.Handler(this, this.onBtnClick1));
            ButtonCtl.Create(this.btn2, new Laya.Handler(this, this.onBtnClick2));
        }
        onBtnClick() {
            if (this._cfg) {
                ActivityModel.Ins.recharge(this._cfg.f_PackPurchase);
            }
        }
        onBtnClick1() {
            if (this._cfg) {
                let req = new MonopolyPack_req;
                req.fid = this._cfg.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onBtnClick2() {
            if (!this._cfg)
                return;
            E.sendTrack("ad_watch", { type: "monopoly_mf" });
            E.sdk.lookVideo((type) => {
                switch (type) {
                    case 0:
                        break;
                    case 1:
                        E.sendTrack("ad_finish", { type: "monopoly_mf" });
                        let req = new MonopolyPack_req;
                        req.fid = this._cfg.f_id;
                        SocketMgr.Ins.SendMessageBin(req);
                        break;
                }
            });
        }
        setData(value) {
            if (!value)
                return;
            this._cfg = MonopolyPackProxy.Ins.GetDataById(value.fid);
            this.lab1.text = this._cfg.f_PackName;
            ItemViewFactory.renderItemSlots(this.sp, this._cfg.f_PackRewards, 10, 0.8, "left");
            this.lab2.text = "限购：" + value.count + "/" + this._cfg.f_PackBuyLimit;
            if (value.count >= this._cfg.f_PackBuyLimit) {
                this.btn.disabled = this.btn1.disabled = this.btn2.disabled = true;
            }
            else {
                this.btn.disabled = this.btn1.disabled = this.btn2.disabled = false;
            }
            DotManager.removeDot(this.btn1);
            if (this._cfg.f_PackType == 1) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn2.visible = false;
                if (value.count < this._cfg.f_PackBuyLimit) {
                    DotManager.addDot(this.btn1, 10, -10);
                }
            }
            else if (this._cfg.f_PackType == 2) {
                this.btn.visible = false;
                this.btn1.visible = false;
                this.btn2.visible = true;
            }
            else {
                this.btn.visible = true;
                this.btn1.visible = false;
                this.btn2.visible = false;
                let priceCfg = t_Purchase_PriceProxy.Ins.GetDataById(this._cfg.f_PackPurchase);
                this.lab.text = StringUtil.moneyCv(priceCfg.f_price) + "元";
            }
        }
    }

    exports.MonopolyLBItem = MonopolyLBItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MonopolyLBView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("monopoly.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.monopoly.ui_MonopolyLBViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push();
                this._timeCtl = new TimeCtl(this._ui.lab_time);
                this._ui.list.itemRender = MonopolyLBItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onLBRender);
            }
        }
        onInit() {
            MonopolyModel.Ins.on(MonopolyModel.UPDATA_VIEW_PACK, this, this.updataView);
            this.updataView();
        }
        onExit() {
            MonopolyModel.Ins.off(MonopolyModel.UPDATA_VIEW_PACK, this, this.updataView);
            this._timeCtl.stop();
        }
        updataView() {
            let time = MonopolyModel.Ins.refreshUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
            this._ui.list.array = MonopolyModel.Ins.packList;
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal) + "后重置";
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        onLBRender(item) {
            item.setData(item.dataSource);
        }
    }

    exports.MonopolyLBView = MonopolyLBView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MonopolyTaskItem extends ui.views.monopoly.ui_MonopolyTaskItemUI {
        constructor() {
            super();
            this.list.itemRender = ui.views.monopoly.ui_MonopolyIconItemUI;
            this.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn1, new Laya.Handler(this, this.onBtn1Click));
        }
        onBtnClick() {
            if (this._cfg) {
                E.ViewMgr.Close(EViewType.MonopolyMainView);
                if (this._cfg.f_viewjump != 0) {
                    E.ViewMgr.OpenByFuncid(this._cfg.f_viewjump, false);
                }
            }
        }
        onBtn1Click() {
            if (this._data) {
                let req = new MonopolyTask_req;
                req.fid = this._data.fid;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onRenderHandler(item) {
            let itemVo = new ItemVo();
            let arr = item.dataSource.split("-");
            itemVo.cfgId = parseInt(arr[0]);
            itemVo.count = parseInt(arr[1]);
            ItemViewFactory.refreshSlot(item.slot, itemVo);
            item.maskbg.visible = this._bo;
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this._cfg = MonopolyTaskProxy.Ins.GetDataById(value.fid);
            let st = StringUtil.format(this._cfg.f_Taskintro, this._cfg.f_TaskContent);
            this.lab.text = t_Txt_Config.Ins.replace(st);
            if (value.count >= this._cfg.f_TaskContent) {
                this.lab1.text = this._cfg.f_TaskContent + "/" + this._cfg.f_TaskContent;
            }
            else {
                this.lab1.text = value.count + "/" + this._cfg.f_TaskContent;
            }
            if (value.state == 2) {
                this._bo = true;
            }
            else {
                this._bo = false;
            }
            this.list.array = this._cfg.f_TaskRewards.split("|");
            DotManager.removeDot(this.btn1);
            if (value.state == 2) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn1.mouseEnabled = false;
                this.btn1.skin = "remote/monopoly/lqan_h.png";
                this.lab2.text = "已领取";
            }
            else if (value.state == 1) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn1.mouseEnabled = true;
                this.btn1.skin = "remote/monopoly/lqan.png";
                this.lab2.text = "领取";
                DotManager.addDot(this.btn1, 10, -10);
            }
            else if (value.state == 0) {
                this.btn.visible = true;
                this.btn1.visible = false;
            }
        }
    }

    exports.MonopolyTaskItem = MonopolyTaskItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MonopolyItemCtl {
        constructor(skin) {
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
            this._ui.on(Laya.Event.CLICK, this, this.onClick);
        }
        onRemove() {
            this._ui.off(Laya.Event.CLICK, this, this.onClick);
        }
        onClick() {
            if (this._data) {
                if (this._data.type) {
                    E.ViewMgr.Open(EViewType.MonopolyView, null, this._data);
                }
                else {
                    E.ViewMgr.ShowMidError("未解锁");
                }
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let cfg = MonopolyMapProxy.Ins.GetDataById(value.fid);
            this._ui.img.skin = `remote/monopoly/${cfg.f_Res}`;
            this._ui.lab.text = cfg.f_AreaName;
            if (value.type) {
                this._ui.img.gray = false;
                this._ui.lab1.text = "已解锁";
            }
            else {
                this._ui.img.gray = true;
                let lastCfg = MonopolyMapProxy.Ins.GetDataById(cfg.f_id - 1);
                let lastData = MonopolyModel.Ins.mapList.find(ele => ele.fid === cfg.f_id - 1);
                this._ui.lab1.text = `需游历${lastCfg.f_AreaName}${lastData.count}/${cfg.f_UnlockCondi}圈`;
            }
            let itemVo = new ItemVo();
            itemVo.cfgId = parseInt(cfg.f_BigRewards.split("-")[0]);
            itemVo.count = parseInt(cfg.f_BigRewards.split("-")[1]);
            ItemViewFactory.refreshSlot(this._ui.slot, itemVo);
        }
    }

    exports.MonopolyItemCtl = MonopolyItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MonopolyMainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
            this.mMaskClick = false;
        }
        onAddLoadRes() {
            this.addAtlas("monopoly.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.monopoly.ui_MonopolyMainViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_lb, new Laya.Handler(this, this.onLBBtnClick)), ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)));
                const tabsSkin = [this._ui.tab1, this._ui.tab2];
                let st = E.getLang("monoyTab");
                this.tabList = st.split("-");
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._timeCtl = new TimeCtl(this._ui.lab_time);
                this._ctl1 = new MonopolyItemCtl(this._ui.item1);
                this._ctl2 = new MonopolyItemCtl(this._ui.item2);
                this._ctl3 = new MonopolyItemCtl(this._ui.item3);
                this._ctl4 = new MonopolyItemCtl(this._ui.item4);
                this._ctl5 = new MonopolyItemCtl(this._ui.item5);
                this._timeCtlTask = new TimeCtl(this._ui.lab_time1);
                this._ui.list.itemRender = MonopolyTaskItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onTaskRender);
            }
        }
        onLBBtnClick() {
            E.ViewMgr.Open(EViewType.MonopolyLBView);
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("monopolyTitle", "monopolyDesc");
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab.text = this.tabList[index];
            if (sel) {
                skin.lab.color = "#9F562B";
                skin.img.skin = "remote/monopoly/an_1.png";
            }
            else {
                skin.lab.color = "#F7FFFF";
                skin.img.skin = "remote/monopoly/an_2.png";
            }
        }
        onTabSelectHandler(v) {
            this._ui.sp1.visible = this._ui.sp2.visible = false;
            this._ui["sp" + (v + 1)].visible = true;
            this["updataView" + (v + 1)]();
        }
        onInit() {
            MonopolyModel.Ins.on(MonopolyModel.UPDATA_VIEW_MAP, this, this.onUpdataView1);
            MonopolyModel.Ins.on(MonopolyModel.UPDATA_VIEW_TASK, this, this.onUpdataView2);
            this.tabsCtl.selectIndex = 0;
        }
        onExit() {
            MonopolyModel.Ins.off(MonopolyModel.UPDATA_VIEW_MAP, this, this.onUpdataView1);
            MonopolyModel.Ins.off(MonopolyModel.UPDATA_VIEW_TASK, this, this.onUpdataView2);
            this.tabsCtl.dispose();
            this.tabsCtl = null;
            this._timeCtl.stop();
            this._timeCtlTask.dispose();
        }
        updataRedTip() {
            if (MonopolyModel.Ins.isRedTab1()) {
                DotManager.addDot(this._ui.tab1, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.tab1);
            }
            if (MonopolyModel.Ins.isRedTab2()) {
                DotManager.addDot(this._ui.tab2, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.tab2);
            }
            if (MonopolyModel.Ins.isRedLBTip()) {
                DotManager.addDot(this._ui.btn_lb, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.btn_lb);
            }
        }
        onUpdataView1() {
            this.updataView1();
        }
        onUpdataView2() {
            this.updataView2();
        }
        updataView1() {
            let time = MonopolyModel.Ins.endUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
            for (let i = 0; i < MonopolyModel.Ins.mapList.length; i++) {
                this["_ctl" + (i + 1)].setData(MonopolyModel.Ins.mapList[i]);
            }
            this.updataRedTip();
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        updataView2() {
            let time = MonopolyModel.Ins.refreshUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtlTask.start(time, new Laya.Handler(this, this.onUpdateTaskTime), new Laya.Handler(this, this.endTaskTime));
            }
            else {
                this.endTaskTime();
                this._timeCtlTask.stop();
            }
            let arr = [];
            let arr1 = [];
            let arr2 = [];
            for (let i = 0; i < MonopolyModel.Ins.taskList.length; i++) {
                let vo = MonopolyModel.Ins.taskList[i];
                if (vo.state == 1) {
                    arr.push(vo);
                }
                else if (vo.state == 0) {
                    arr1.push(vo);
                }
                else if (vo.state == 2) {
                    arr2.push(vo);
                }
            }
            this._ui.list.array = arr.concat(arr1.concat(arr2));
            this.updataRedTip();
        }
        onUpdateTaskTime() {
            let time_str = TimeUtil.subTime(this._timeCtlTask.tickVal) + "后重置";
            this._timeCtlTask.setText(time_str);
        }
        endTaskTime() {
            this._timeCtlTask.setText("");
        }
        onTaskRender(item) {
            item.setData(item.dataSource);
        }
    }

    exports.MonopolyMainView = MonopolyMainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MonopolyView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
            this.mMaskClick = false;
            this._checkBoxFlag = false;
        }
        onAddLoadRes() {
            this.addAtlas("monopoly.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.monopoly.ui_MonopolyViewUI;
                this._ui.img0.visible = false;
                this.btnList.push(ButtonCtl.Create(this._ui.btn_add, new Laya.Handler(this, this.onBtnAddClick)), ButtonCtl.Create(this._ui.btn_close, new Laya.Handler(this, this.onBtnCloseClick), false));
                this._checkBoxCtl = new CheckBoxCtl({ bg: this._ui.ckbg, gou: this._ui.gou });
                this._checkBoxCtl.selected = this._checkBoxFlag;
                this._checkBoxCtl.selectHander = new Laya.Handler(this, this.onCheckHandler);
                this._tw = new Laya.Tween;
                this._timeCtl = new TimeCtl(this._ui.lab_time);
            }
        }
        onBtnAddClick() {
            E.ViewMgr.Open(EViewType.MonopolyLBView);
        }
        onBtnCloseClick() {
            if (this._isMove)
                return;
            if (this._eff.anim.isPlaying)
                return;
            this.Close();
        }
        onCheckHandler() {
            this._checkBoxFlag = this._checkBoxCtl.selected;
        }
        onInit() {
            this._ui.sp_click.on(Laya.Event.CLICK, this, this.onClick);
            this._ui.sp1.on(Laya.Event.CLICK, this, this.onSpClick);
            this._ui.sp2.on(Laya.Event.CLICK, this, this.onSpClick);
            MonopolyModel.Ins.on(MonopolyModel.UPDATA_VIEW_MAP, this, this.onUpdataView);
            MonopolyModel.Ins.on(MonopolyModel.UPDATA_AWARD, this, this.onUpdataAward);
            MainModel.Ins.on(MainEvent.ValChangeCell, this, this.onValChange);
            this._data = this.Data;
            this._isMove = false;
            this._index = this._data.num;
            let cfg = MonopolyMapProxy.Ins.GetDataById(this._data.fid);
            this._arr = MonopolyTileRewardsProxy.Ins.getListByEventAndArea(cfg.f_EventType, cfg.f_AreaID);
            for (let i = 0; i < this._arr.length; i++) {
                let cfg = this._arr[i];
                let id = parseInt(cfg.f_Rewards.split("-")[0]);
                this._ui["img" + (i + 1)].skin = IconUtils.getIconByCfgId(id);
            }
            this._ui.bg.skin = "static/" + cfg.f_backgroundpic;
            this._avatar = AvatarFactory.getFightMainAvatar(EAvatarDir.Left, 0, 0, false, MainModel.Ins.imageID);
            this._ui.av.addChild(this._avatar);
            this.setDir();
            this._xx = 25;
            this._yy = 45;
            this._ui.av.x = this._ui["img" + this._index].x + this._xx;
            this._ui.av.y = this._ui["img" + this._index].y + this._yy;
            this.setAward();
            this.updataRes();
            if (!this._eff) {
                this._eff = new SimpleEffect(this._ui.sp, `o/spine/uitouzi/uitouzi`, 0, 0, 1.0);
                this._eff.anim.on(Laya.Event.COMPLETE, this, this.setAnimIndex);
            }
            let time = MonopolyModel.Ins.endUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        setAnimIndex(index = 0) {
            this._eff.play(index);
            this._eff.anim.avatar.currentTime = this._eff.anim.avatar.duration;
        }
        onExit() {
            this._ui.sp_click.off(Laya.Event.CLICK, this, this.onClick);
            this._ui.sp1.off(Laya.Event.CLICK, this, this.onSpClick);
            this._ui.sp2.off(Laya.Event.CLICK, this, this.onSpClick);
            MonopolyModel.Ins.off(MonopolyModel.UPDATA_VIEW_MAP, this, this.onUpdataView);
            MonopolyModel.Ins.off(MonopolyModel.UPDATA_AWARD, this, this.onUpdataAward);
            MainModel.Ins.off(MainEvent.ValChangeCell, this, this.onValChange);
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            Laya.Tween.clearAll(this._ui.av);
            this._tw.clear();
            if (this._eff) {
                this._eff.dispose();
                this._eff = null;
            }
            this._timeCtl.stop();
        }
        onValChange(id) {
            let cfg = MonopolyConfigProxy.Ins.GetDataById(1);
            let idd = parseInt(cfg.f_Cost.split("-")[0]);
            if (id == idd) {
                this.updataRes();
            }
        }
        updataRes() {
            let cfg = MonopolyConfigProxy.Ins.GetDataById(1);
            let idd = parseInt(cfg.f_Cost.split("-")[0]);
            let count = MainModel.Ins.mRoleData.getVal(idd);
            this._ui.lab_num.text = count + "";
        }
        setAward() {
            this._ui.lab_num1.text = this._data.count + "";
            let cfg = MonopolyMapProxy.Ins.GetDataById(this._data.fid);
            let arr = MonopolyRoundRewardsProxy.Ins.getListByEventAndArea(cfg.f_EventType, cfg.f_AreaID);
            let rCfg;
            let rrCfg;
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].f_BigPrize) {
                    if (this._data.count < arr[i].f_Round) {
                        rCfg = arr[i];
                        break;
                    }
                    rrCfg = arr[i];
                }
            }
            if (rCfg) {
                this._ui.gou1.visible = false;
                let id = parseInt(rCfg.f_RoundRewards.split("-")[0]);
                this._ui.icon.skin = IconUtils.getIconByCfgId(id);
                this._ui.lab_num2.text = rCfg.f_Round + "圈奖励";
            }
            else {
                this._ui.gou1.visible = true;
                let idd = parseInt(rrCfg.f_RoundRewards.split("-")[0]);
                this._ui.icon.skin = IconUtils.getIconByCfgId(idd);
                this._ui.lab_num2.text = "已领取";
            }
            let c = arr[this._data.count];
            if (!c) {
                c = arr[arr.length - 1];
            }
            let iddd = parseInt(c.f_RoundRewards.split("-")[0]);
            this._ui.icon1.skin = IconUtils.getIconByCfgId(iddd);
        }
        onClick() {
            if (this._isMove)
                return;
            if (this._eff.anim.isPlaying)
                return;
            let req = new MonopolyGo_req;
            req.mapId = this._data.fid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onSpClick() {
            E.ViewMgr.Open(EViewType.MonopolyAwardView, null, this._data);
        }
        setDir() {
            let dir;
            if (this._index == 0) {
                dir = EAvatarDir.Left;
            }
            else {
                if (this._arr[this._index - 1].f_direct == 0) {
                    dir = EAvatarDir.Left;
                }
                else {
                    dir = EAvatarDir.Right;
                }
            }
            this._avatar.dir = dir;
        }
        onUpdataView() {
            this._data = MonopolyModel.Ins.mapList.find(ele => ele.fid === this._data.fid);
            let index;
            if (this._data.num > this._index) {
                index = this._data.num - this._index;
            }
            else {
                index = 39 - this._index + 1 + this._data.num;
            }
            if (this._checkBoxFlag) {
                this.setAnimIndex(index - 1);
                this.playMove();
            }
            else {
                this._eff.play(index - 1, false, this, this.playMove);
            }
        }
        playMove() {
            this._isMove = true;
            this._index++;
            if (this._index > 39) {
                this._index = 0;
            }
            let xx = this._ui["img" + this._index].x + this._xx;
            let yy = this._ui["img" + this._index].y + this._yy;
            this._tw.to(this._ui.av, { x: xx, y: yy }, 500, Laya.Ease.sineOut, Laya.Handler.create(this, this.onComplete));
        }
        onComplete() {
            this._isMove = false;
            this.setDir();
            if (this._index == 0) {
                this.setAward();
                E.ViewMgr.Open(EViewType.MonopolyAwardView1, null, this._data);
                return;
            }
            if (this._index == this._data.num) {
                let req = new MonopolyReward_req;
                req.type = 1;
                SocketMgr.Ins.SendMessageBin(req);
                return;
            }
            this.playMove();
        }
        onUpdataAward() {
            if (this._index == this._data.num) {
                return;
            }
            this.playMove();
        }
    }

    exports.MonopolyView = MonopolyView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MonopolyModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new MonopolyModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            MonopolyModel.Ins.mapList = [];
            MonopolyModel.Ins.taskList = [];
            MonopolyModel.Ins.packList = [];
        }
        initMsg() {
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.ValChangeCell, this, this.onMainViewInit);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onMainViewInit);
            this.Reg(new MonopolyMainView(EViewType.MonopolyMainView));
            this.Reg(new MonopolyView(EViewType.MonopolyView));
            this.Reg(new MonopolyLBView(EViewType.MonopolyLBView));
            this.Reg(new MonopolyAwardView(EViewType.MonopolyAwardView));
            this.Reg(new MonopolyAwardView1(EViewType.MonopolyAwardView1));
            E.MsgMgr.AddMsg(MSGID.MonopolyInit, this.MonopolyInit, this);
            E.MsgMgr.AddMsg(MSGID.MonopolyMapUpdate, this.MonopolyMapUpdate, this);
            E.MsgMgr.AddMsg(MSGID.MonopolyTaskUpdate, this.MonopolyTaskUpdate, this);
            E.MsgMgr.AddMsg(MSGID.MonopolyPackUpdate, this.MonopolyPackUpdate, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (MonopolyModel.Ins.isRedTip()) {
                MainModel.Ins.funcSetRed(EFuncDef.Monopoly, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.Monopoly, false);
            }
        }
        MonopolyInit(value) {
            MonopolyModel.Ins.type = value.type;
            MonopolyModel.Ins.mapList = value.mapList;
            MonopolyModel.Ins.taskList = value.taskList;
            MonopolyModel.Ins.packList = value.packList;
            MonopolyModel.Ins.refreshUnix = value.refreshUnix;
            MonopolyModel.Ins.endUnix = value.endUnix;
            MonopolyModel.Ins.event(MonopolyModel.UPDATA_VIEW_TASK);
            MonopolyModel.Ins.event(MonopolyModel.UPDATA_VIEW_PACK);
            this.onMainViewInit();
        }
        MonopolyMapUpdate(value) {
            MonopolyModel.Ins.mapList = value.mapList;
            MonopolyModel.Ins.event(MonopolyModel.UPDATA_VIEW_MAP);
            this.onMainViewInit();
        }
        MonopolyTaskUpdate(value) {
            for (let i = 0; i < value.taskList.length; i++) {
                let index = MonopolyModel.Ins.taskList.findIndex(ele => ele.fid == value.taskList[i].fid);
                if (index != -1) {
                    MonopolyModel.Ins.taskList[index] = value.taskList[i];
                }
            }
            MonopolyModel.Ins.event(MonopolyModel.UPDATA_VIEW_TASK);
            this.onMainViewInit();
        }
        MonopolyPackUpdate(value) {
            let index = MonopolyModel.Ins.packList.findIndex(ele => ele.fid == value.data.fid);
            if (index != -1) {
                MonopolyModel.Ins.packList[index] = value.data;
            }
            MonopolyModel.Ins.event(MonopolyModel.UPDATA_VIEW_PACK);
            this.onMainViewInit();
        }
    }

    exports.MonopolyModule = MonopolyModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangCfgProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new PaoShangCfgProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Station_Config";
        }
    }
    class PaoShangSlotOpenProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new PaoShangSlotOpenProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Station_SlotOpen";
        }
        getListByType(type) {
            let list = [];
            for (let ele of this.List) {
                if (ele.f_Enable == type) {
                    list.push(ele);
                }
            }
            return list;
        }
    }
    class PaoShangMissionListProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new PaoShangMissionListProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Station_Mission_List";
        }
        getCfgByMissionID(id) {
            let l = this.List;
            return l.find(item => item.f_MissionID == id);
        }
    }
    class PaoShangCostProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new PaoShangCostProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Station_Cost";
        }
        getCfgByNum(num) {
            let cfg = PaoShangCostProxy.Ins.GetDataById(num + 1);
            if (!cfg) {
                cfg = PaoShangCostProxy.Ins.GetDataById(this.List.length);
            }
            return cfg;
        }
    }

    exports.PaoShangCfgProxy = PaoShangCfgProxy;
    exports.PaoShangCostProxy = PaoShangCostProxy;
    exports.PaoShangMissionListProxy = PaoShangMissionListProxy;
    exports.PaoShangSlotOpenProxy = PaoShangSlotOpenProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new PaoShangModel();
            }
            return this._ins;
        }
        setMissionList(value) {
            this.missionList = value;
            this.missionList.sort(this.paoshangSort);
        }
        paoshangSort(a, b) {
            let aa = PaoShangMissionListProxy.Ins.getCfgByMissionID(a.missionId);
            let bb = PaoShangMissionListProxy.Ins.getCfgByMissionID(b.missionId);
            if (aa.f_MissionQuality > bb.f_MissionQuality) {
                return -1;
            }
            else if (aa.f_MissionQuality < bb.f_MissionQuality) {
                return 1;
            }
            else {
                if (aa.f_MissionType > bb.f_MissionType) {
                    return 1;
                }
                else if (aa.f_MissionType < bb.f_MissionType) {
                    return -1;
                }
                else {
                    return 0;
                }
            }
        }
        getStationIcon(id) {
            let cfg = PaoShangMissionListProxy.Ins.getCfgByMissionID(id);
            if (cfg.f_MissionType == 2) {
                return `o/station/${cfg.f_typepic.split("|")[main.skinStyle - 1]}.png`;
            }
            else {
                return `o/station/${cfg.f_MissionType}.png`;
            }
        }
        isDotMain() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.PaoShang)) {
                if (this.isDotTXZ() || this.isDotOk() || this.isDotLD()) {
                    return true;
                }
            }
            return false;
        }
        isDotTXZ() {
            let count = MainModel.Ins.mRoleData.getVal(ECellType.TongXingZheng);
            if (count >= PaoShangModel.Ins.passports && this.freeStationNum > 0) {
                return true;
            }
            return false;
        }
        isDotOk() {
            if (this.stItemStationList) {
                for (let i = 0; i < this.stItemStationList.length; i++) {
                    if (this.stItemStationList[i].state == 1) {
                        return true;
                    }
                }
            }
            return false;
        }
        isDotLD() {
            let num = parseInt(PaoShangCfgProxy.Ins.GetDataById(1).f_LootMax);
            if (this.pillagesNew >= num) {
                return true;
            }
            return false;
        }
    }
    PaoShangModel.UPDATA_VIEW = "UPDATA_VIEW";
    PaoShangModel.UPDATA_OTHER_VIEW = "UPDATA_OTHER_VIEW";
    PaoShangModel.UPDATA_TXZ = "UPDATA_TXZ";
    PaoShangModel.UPDATA_TASK = "UPDATA_TASK";
    PaoShangModel.UPDATA_RIZHI = "UPDATA_RIZHI";
    PaoShangModel.UPDATA_NEARVIEW = "UPDATA_NEARVIEW";
    PaoShangModel.UPDATA_FRIENDVIEW = "UPDATA_FRIENDVIEW";
    PaoShangModel.UPDATA_RES = "UPDATA_RES";

    exports.PaoShangModel = PaoShangModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangJSItem extends ui.views.paoshang.ui_paoshangJSItemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onClick));
        }
        onClick() {
            if (this._data.f_Enable == 1) {
                let req = new StationBuy_req();
                req.id = this._data.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
            else if (this._data.f_Enable == 2) {
                E.ViewMgr.Open(EViewType.YueKa);
            }
            else if (this._data.f_Enable == 3) {
                E.ViewMgr.Open(EViewType.ZhongShenKa);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            switch (value.f_Enable) {
                case 1:
                    this.img2.visible = this.img3.visible = false;
                    this.img1.visible = true;
                    this.txt.text = "花费" + value.f_SlotOpen.split("-")[1];
                    break;
                case 2:
                    this.img1.visible = this.img3.visible = false;
                    this.img2.visible = true;
                    break;
                case 3:
                    this.img1.visible = this.img2.visible = false;
                    this.img3.visible = true;
                    break;
            }
        }
    }

    exports.PaoShangJSItem = PaoShangJSItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangJSView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas('paoshang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.paoshang.ui_paoshangJSUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = PaoShangJSItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.itemRender);
            }
        }
        onInit() {
            this.updataView();
        }
        onExit() {
        }
        itemRender(item) {
            item.setData(item.dataSource);
        }
        updataView() {
            let arr = [];
            let index = -1;
            let list = PaoShangSlotOpenProxy.Ins.getListByType(1);
            for (let ele of list) {
                if (PaoShangModel.Ins.buyIds) {
                    index = PaoShangModel.Ins.buyIds.findIndex(item => item == parseInt(ele.f_id));
                }
                if (index == -1) {
                    let dex = arr.findIndex(item => parseInt(item.f_Enable) == 1);
                    if (dex == -1) {
                        arr.push(ele);
                    }
                }
            }
            for (let i = 2; i < 4; i++) {
                list = PaoShangSlotOpenProxy.Ins.getListByType(i);
                if (PaoShangModel.Ins.buyIds) {
                    index = PaoShangModel.Ins.buyIds.findIndex(item => item == parseInt(list[0].f_id));
                }
                if (index == -1) {
                    arr.push(list[0]);
                }
            }
            this._ui.list.array = arr;
        }
    }

    exports.PaoShangJSView = PaoShangJSView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangNearItem1 extends ui.views.paoshang.ui_paoshangYZItem1UI {
        constructor() {
            super();
            this.list.itemRender = ui.views.paoshang.ui_paoshangYZItem3UI;
            this.list.renderHandler = new Laya.Handler(this, this.itemRender);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onClick));
        }
        onClick() {
            let req = new StationNearByDetail_req();
            req.isRealPlayer = this._data.isRealPlayer;
            req.playerId = this._data.playerId;
            req.type = 1;
            SocketMgr.Ins.SendMessageBin(req);
            let view = E.ViewMgr.Get(EViewType.PAOSHANG);
            if (view) {
                view.setList();
            }
            E.ViewMgr.Close(EViewType.PAOSHANGNEAR);
        }
        itemRender(item) {
            let data = item.dataSource;
            let cfg = PaoShangMissionListProxy.Ins.getCfgByMissionID(data.missionId);
            switch (data.state) {
                case 1:
                    item.img_tou.visible = false;
                    item.box1.visible = true;
                    item.icon.skin = PaoShangModel.Ins.getStationIcon(data.missionId);
                    item.box.visible = false;
                    break;
                case 2:
                    item.img_tou.visible = true;
                    item.box1.visible = true;
                    item.icon.skin = PaoShangModel.Ins.getStationIcon(data.missionId);
                    item.box.visible = false;
                    break;
                case 3:
                    item.img_tou.visible = false;
                    item.box1.visible = false;
                    item.box.visible = true;
                    item.icon3.skin = PaoShangModel.Ins.getStationIcon(data.missionId);
                    break;
            }
            item.img_tou.filters = item.img_mc1.filters = item.icon.filters = item.img_mc2.filters = item.icon3.filters = [];
            switch (data.handlerState) {
                case 0:
                    item.img_tou.filters = item.img_mc1.filters = item.icon.filters
                        = item.img_mc2.filters = item.icon3.filters = ColorUtil.CreateColorFilter(1);
                    item.img_bg.visible = false;
                    item.txt.text = "";
                    break;
                case 1:
                    item.img_bg.visible = true;
                    item.txt.text = "可掠夺";
                    break;
                case 2:
                    item.img_bg.visible = true;
                    item.txt.text = "可破坏";
                    break;
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.icon.skin = value.headUrl;
            this.txt_name.text = value.nickName;
            this.txt_num.text = value.underwayNum + "/" + value.totalNum;
            value.datalist.sort((a, b) => {
                if (a.handlerState > b.handlerState) {
                    return -1;
                }
                else if (a.handlerState < b.handlerState) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            this.list.array = value.datalist;
            if (PaoShangModel.Ins.isDotLD()) {
                DotManager.addDot(this.btn);
            }
            else {
                DotManager.removeDot(this.btn);
            }
        }
    }

    exports.PaoShangNearItem1 = PaoShangNearItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangNearItem2 extends ui.views.paoshang.ui_paoshangYZItem2UI {
        constructor() {
            super();
            this.list.itemRender = ui.views.paoshang.ui_paoshangYZItem3UI;
            this.list.renderHandler = new Laya.Handler(this, this.itemRender);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onClick));
            ButtonCtl.Create(this.btn_del, new Laya.Handler(this, this.onDelClick));
        }
        onClick() {
            let req = new StationNearByDetail_req();
            req.isRealPlayer = this._data.isRealPlayer;
            req.playerId = this._data.playerId;
            req.type = 2;
            SocketMgr.Ins.SendMessageBin(req);
            let view = E.ViewMgr.Get(EViewType.PAOSHANG);
            if (view) {
                view.setList();
            }
            E.ViewMgr.Close(EViewType.PAOSHANGNEAR);
        }
        onDelClick() {
            MainModel.Ins.queryMsg("是否确定删除该标记?", 0, 0, EQuickMsg.PaoShangDel, new Laya.Handler(this, this.onDelHandler));
        }
        onDelHandler() {
            let req = new RemRemarkStationNearBy_req();
            req.isRealPlayer = this._data.isRealPlayer;
            req.playerId = this._data.playerId;
            SocketMgr.Ins.SendMessageBin(req);
        }
        itemRender(item) {
            let data = item.dataSource;
            let cfg = PaoShangMissionListProxy.Ins.getCfgByMissionID(data.missionId);
            switch (data.state) {
                case 1:
                    item.img_tou.visible = false;
                    item.box1.visible = true;
                    item.icon.skin = PaoShangModel.Ins.getStationIcon(data.missionId);
                    item.box.visible = false;
                    break;
                case 2:
                    item.img_tou.visible = true;
                    item.box1.visible = true;
                    item.icon.skin = PaoShangModel.Ins.getStationIcon(data.missionId);
                    item.box.visible = false;
                    break;
                case 3:
                    item.img_tou.visible = false;
                    item.box1.visible = false;
                    item.box.visible = true;
                    item.icon3.skin = PaoShangModel.Ins.getStationIcon(data.missionId);
                    break;
            }
            item.img_tou.filters = item.img_mc1.filters = item.icon.filters = item.img_mc2.filters = item.icon3.filters = [];
            switch (data.handlerState) {
                case 0:
                    item.img_bg.visible = false;
                    item.txt.text = "";
                    item.img_tou.filters = item.img_mc1.filters = item.icon.filters
                        = item.img_mc2.filters = item.icon3.filters = ColorUtil.CreateColorFilter(1);
                    break;
                case 1:
                    item.img_bg.visible = true;
                    item.txt.text = "可掠夺";
                    break;
                case 2:
                    item.img_bg.visible = true;
                    item.txt.text = "可破坏";
                    break;
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.icon.skin = value.headUrl;
            this.txt_name.text = value.nickName;
            this.txt_num.text = value.underwayNum + "/" + value.totalNum;
            value.datalist.sort((a, b) => {
                if (a.handlerState > b.handlerState) {
                    return -1;
                }
                else if (a.handlerState < b.handlerState) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            this.list.array = value.datalist;
        }
    }

    exports.PaoShangNearItem2 = PaoShangNearItem2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangNearView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas('paoshang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.paoshang.ui_paoshangYZUI;
                this.bindClose(this._ui.close1);
                const tabsSkin = [this._ui.tab1, this._ui.tab2];
                this.tabList = ["附近商队", "标记名单"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
                this._ui.list1.itemRender = PaoShangNearItem1;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.itemRender1);
                this._ui.list2.itemRender = PaoShangNearItem2;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.itemRender2);
                this.timeCtl1 = new TimeCtl(this._ui.lab_sx);
                this.timeCtl = new TimeCtl(this._ui.lab_time);
            }
        }
        onInit() {
            Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onStageUp);
            PaoShangModel.Ins.on(PaoShangModel.UPDATA_NEARVIEW, this, this.updataNearView);
            PaoShangModel.Ins.on(PaoShangModel.UPDATA_FRIENDVIEW, this, this.updataFriendView);
            PaoShangModel.Ins.on(PaoShangModel.UPDATA_RES, this, this.updataRes);
            this.tabsCtl.forceSelectIndex(0);
        }
        onExit() {
            Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onStageUp);
            PaoShangModel.Ins.off(PaoShangModel.UPDATA_NEARVIEW, this, this.updataNearView);
            PaoShangModel.Ins.off(PaoShangModel.UPDATA_FRIENDVIEW, this, this.updataFriendView);
            PaoShangModel.Ins.off(PaoShangModel.UPDATA_RES, this, this.updataRes);
            this.timeCtl.stop();
            this.timeCtl1.stop();
        }
        onStageUp() {
        }
        onBtnClick() {
            let req = new FreshStationNearBy_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        itemRender1(item) {
            item.setData(item.dataSource);
        }
        itemRender2(item) {
            item.setData(item.dataSource);
        }
        onTabSelectHandler(v) {
            switch (v) {
                case 0:
                    let req = new OpenStationNearBy_req();
                    SocketMgr.Ins.SendMessageBin(req);
                    break;
                case 1:
                    let reqq = new RemarkStationList_req();
                    SocketMgr.Ins.SendMessageBin(reqq);
                    break;
            }
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.txt.text = this.tabList[index];
            if (sel) {
                skin.img1.visible = false;
                skin.img2.visible = true;
            }
            else {
                skin.img1.visible = true;
                skin.img2.visible = false;
            }
        }
        updataNearView() {
            this.updataRes();
            if (PaoShangModel.Ins.nearCD) {
                this.timeCtl1.start(PaoShangModel.Ins.nearCD, new Laya.Handler(this, this.onUpdateTime1), new Laya.Handler(this, this.endTime1));
            }
            else {
                this.endTime1();
                this.timeCtl1.stop();
            }
            this._ui.list1.visible = true;
            this._ui.list1.array = PaoShangModel.Ins.nearDataList;
            this._ui.list2.visible = false;
            this._ui.list2.array = [];
            this._ui.btn.visible = true;
            this._ui.lab_f.visible = this._ui.lab_f_num.visible = false;
        }
        onUpdateTime1() {
            let time_str = TimeUtil.subTime(this.timeCtl1.tickVal);
            this.timeCtl1.setText(time_str);
        }
        endTime1() {
            this.timeCtl1.setText("刷新");
        }
        updataFriendView() {
            this._ui.list1.visible = false;
            this._ui.list1.array = [];
            this._ui.list2.visible = true;
            this._ui.list2.array = PaoShangModel.Ins.friendDataList;
            this._ui.btn.visible = false;
            this._ui.lab_f.visible = this._ui.lab_f_num.visible = true;
            this._ui.lab_f_num.text = PaoShangModel.Ins.friendDataList.length + "/" + PaoShangCfgProxy.Ins.GetDataById(1).f_MarkListMax;
        }
        updataRes() {
            if (PaoShangModel.Ins.nextRecoverUnix) {
                let t = PaoShangModel.Ins.nextRecoverUnix - TimeUtil.serverTime;
                if (t > 0) {
                    this.timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                }
            }
            else {
                this.timeCtl.setText("");
                this.timeCtl.stop();
            }
            this._ui.tx1.text = PaoShangModel.Ins.pillagesNew + "/" + PaoShangCfgProxy.Ins.GetDataById(1).f_LootMax;
            this._ui.txt2.text = PaoShangModel.Ins.passportsFromDestory + "/" + PaoShangCfgProxy.Ins.GetDataById(1).f_DestoryMax;
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(time_str);
        }
        endTime() {
            this.timeCtl.setText("");
            let req = new StationPillagesNew_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
    }

    exports.PaoShangNearView = PaoShangNearView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangPHTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas('paoshang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.paoshang.ui_paoshangPHUI();
                this.bindClose(this._ui.close1);
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
            }
        }
        onInit() {
            this.updataView();
        }
        onExit() {
        }
        onBtnClick() {
            let data = this.Data;
            let req = new HandleStationNearBy_req;
            req.flag = 2;
            req.id = data.id;
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        updataView() {
            let data = this.Data;
            let cfg = PaoShangMissionListProxy.Ins.getCfgByMissionID(data.missionId);
            this._ui.icon.skin = PaoShangModel.Ins.getStationIcon(data.missionId);
            let itemVo = ItemViewFactory.convertItemList(cfg.f_DestoryRewards)[0];
            ItemViewFactory.refreshSlot(this._ui.item, itemVo);
        }
    }

    exports.PaoShangPHTip = PaoShangPHTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangRiZhiItem extends ui.views.paoshang.ui_rizhiItemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onClick));
        }
        onClick() {
            if (this._data) {
                let req = new HandleStationRevenge_req();
                req.logId = this._data.logId;
                SocketMgr.Ins.SendMessageBin(req);
                let view = E.ViewMgr.Get(EViewType.PAOSHANG);
                if (view) {
                    view.setList();
                }
                E.ViewMgr.Close(EViewType.PAOSHANGRIZHI);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.icon.skin = value.headUrl;
            let color;
            if (value.isWho == 1) {
                this.txt1.text = "你从";
                this.txt2.text = value.nickName + "的商队";
                color = "#22A01C";
                this.btn.visible = false;
            }
            else {
                this.txt1.text = value.nickName + "从";
                this.txt2.text = "你的商队";
                color = "#E83232";
                this.btn.visible = true;
            }
            if (value.flag == 1) {
                this.txt3.text = "破坏了";
                this.txt4.x = this.txt3.x + this.txt3.width + 2;
                this.txt4.text = "你的马车";
                this.txt4.color = color;
            }
            else {
                this.txt3.text = "掠夺了";
                this.txt4.x = this.txt3.x + this.txt3.width + 2;
                this.txt4.text = "[" + value.rewards[0].count + "个" + IconUtils.getNameByID(value.rewards[0].id) + "]";
                this.txt4.color = color;
            }
            this.txt_time.text = TimeUtil.getTimeShow(TimeUtil.serverTime - value.logUnix) + "前";
        }
    }

    exports.PaoShangRiZhiItem = PaoShangRiZhiItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangRiZhiView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas('paoshang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.paoshang.ui_rizhiUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = PaoShangRiZhiItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.itemRender);
            }
        }
        onInit() {
            PaoShangModel.Ins.on(PaoShangModel.UPDATA_RIZHI, this, this.updataView);
            let req = new HandleStationLogs_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            PaoShangModel.Ins.off(PaoShangModel.UPDATA_RIZHI, this, this.updataView);
        }
        itemRender(item) {
            item.setData(item.dataSource);
        }
        updataView() {
            this._ui.list.array = PaoShangModel.Ins.riZhiList;
        }
    }

    exports.PaoShangRiZhiView = PaoShangRiZhiView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangTaskItemCtl {
        constructor(skin) {
            this.skin = skin;
            this.skin.box1.visible = false;
            ButtonCtl.Create(this.skin.btn, new Laya.Handler(this, this.onClick));
        }
        onClick() {
            if (this._data) {
                if (PaoShangModel.Ins.freeStationNum) {
                    let req = new DoMissions_req();
                    req.missionIds = [this._data.uid];
                    SocketMgr.Ins.SendMessageBin(req);
                }
                else {
                    E.ViewMgr.ShowMidError(E.getLang("paoshangtips1"));
                }
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            if (value.type) {
                this.skin.filters = ColorUtil.CreateColorFilter(1);
                this.skin.lab_ycf.visible = true;
                this.skin.box.visible = false;
            }
            else {
                this.skin.box.visible = true;
                this.skin.lab_ycf.visible = false;
                this.skin.filters = [];
            }
            let cfg = PaoShangMissionListProxy.Ins.getCfgByMissionID(value.missionId);
            let itemVo = ItemViewFactory.convertItemList(cfg.f_MissionRewards)[0];
            ItemViewFactory.refreshSlot(this.skin.item, itemVo);
            this.skin.txt_name.text = itemVo.getName();
            this.skin.txt_time.text = TimeUtil.getTimeShow(cfg.f_MissionTime);
            let arr = cfg.f_PassportCost.split("-");
            this.skin.img_icon.skin = IconUtils.getIconByCfgId(parseInt(arr[0]));
            this.skin.txt_num.text = arr[1];
            for (let i = 1; i <= 5; i++) {
                if (i <= cfg.f_MissionQuality) {
                    this.skin["img_s" + i].visible = true;
                }
                else {
                    this.skin["img_s" + i].visible = false;
                }
            }
            this.skin.box_star.x = (200 - cfg.f_MissionQuality * 25) * 0.5 - 5;
            if (PaoShangModel.Ins.isDotTXZ()) {
                DotManager.addDot(this.skin.btn, 20, -10);
            }
            else {
                DotManager.removeDot(this.skin.btn);
            }
        }
    }

    exports.PaoShangTaskItemCtl = PaoShangTaskItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangTaskView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this._time = 0;
        }
        onAddLoadRes() {
            this.addAtlas('paoshang.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.paoshang.ui_paoshangTaskUI;
                this.bindClose(this._ui.close1);
                ValCtl.Create(this._ui.txt_money11, this._ui.img_money11, ECellType.COPPER_MONEY);
                ValCtl.Create(this._ui.txt_money22, this._ui.img_money22, ECellType.GOLD);
                ValCtl.Create(this._ui.txt_money3, this._ui.img_money3, ECellType.TongXingZheng);
                ButtonCtl.Create(this._ui.btn_qq, new Laya.Handler(this, this.onBtnQQClick));
                ButtonCtl.Create(this._ui.btn_cf, new Laya.Handler(this, this.onBtnCFClick));
                this.timeCtl = new TimeCtl(this._ui.txt_time);
                this.timeCtl1 = new TimeCtl(this._ui.lab_cd);
                for (let i = 1; i < 6; i++) {
                    this["_item" + i] = new PaoShangTaskItemCtl(this._ui["item" + i]);
                }
            }
        }
        onInit() {
            this._ui.txt_money11.text = MainModel.Ins.mRoleData.getVal(ECellType.COPPER_MONEY) + "";
            this._ui.txt_money22.text = MainModel.Ins.mRoleData.getVal(ECellType.GOLD) + "";
            this._ui.txt_money3.text = MainModel.Ins.mRoleData.getVal(ECellType.TongXingZheng) + "";
            let req = new DelegatePage_req();
            SocketMgr.Ins.SendMessageBin(req);
            PaoShangModel.Ins.on(PaoShangModel.UPDATA_TASK, this, this.updataView);
        }
        onExit() {
            this.timeCtl.stop();
            PaoShangModel.Ins.off(PaoShangModel.UPDATA_TASK, this, this.updataView);
        }
        onBtnQQClick() {
            let time = PaoShangCfgProxy.Ins.GetDataById(1).f_RefreshCD * 1000;
            if (Laya.timer.currTimer - this._time < time) {
                E.ViewMgr.ShowMidError("任务刷新冷却中");
                return;
            }
            this._time = Laya.timer.currTimer;
            if (this._isFree) {
                let req = new FreshMission_req();
                SocketMgr.Ins.SendMessageBin(req);
            }
            else {
                let cfg = PaoShangCostProxy.Ins.getCfgByNum(PaoShangModel.Ins.freshTimes);
                if (!MainModel.Ins.isItemEnoughSt(cfg.f_RefreshCost, true)) {
                    return;
                }
                let req = new FreshMission_req();
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onBtnCFClick() {
            let num = 0;
            for (let i = 0; i < PaoShangModel.Ins.missionList.length; i++) {
                if (PaoShangModel.Ins.missionList[i].type == 1) {
                    num++;
                }
            }
            if (num == PaoShangModel.Ins.missionList.length) {
                E.ViewMgr.ShowMidError("没有可以出发的任务");
                return;
            }
            if (PaoShangModel.Ins.freeStationNum) {
                this._flag = false;
                this._arr = [];
                this._num = 0;
                for (let i = 0; i < PaoShangModel.Ins.freeStationNum; i++) {
                    this.getUid();
                }
                if (this._arr.length == 0) {
                    if (this._flag) {
                        E.ViewMgr.ShowMidError("您的宝箱已经堆积如山");
                    }
                    else {
                        E.ViewMgr.ShowMidError("通行证不足");
                    }
                    return;
                }
                let req = new DoMissions_req();
                req.missionIds = this._arr;
                SocketMgr.Ins.SendMessageBin(req);
            }
            else {
                E.ViewMgr.ShowMidError(E.getLang("paoshangtips1"));
            }
        }
        getUid() {
            for (let i = 0; i < PaoShangModel.Ins.missionList.length; i++) {
                if (PaoShangModel.Ins.missionList[i] && PaoShangModel.Ins.missionList[i].type == 0) {
                    if (this._arr.indexOf(PaoShangModel.Ins.missionList[i].uid) != -1) {
                        continue;
                    }
                    let cfg = PaoShangMissionListProxy.Ins.getCfgByMissionID(PaoShangModel.Ins.missionList[i].missionId);
                    let itemId = parseInt(cfg.f_PassportCost.split("-")[0]);
                    let myCount = MainModel.Ins.mRoleData.getVal(itemId);
                    let count = parseInt(cfg.f_PassportCost.split("-")[1]);
                    if (myCount >= this._num + count) {
                        this._arr.push(PaoShangModel.Ins.missionList[i].uid);
                        this._num += count;
                        break;
                    }
                }
            }
        }
        updataView() {
            this._ui.txt.text = PaoShangModel.Ins.freeStationNum + "/" + PaoShangModel.Ins.totalStationNum;
            for (let i = 0; i < PaoShangModel.Ins.missionList.length; i++) {
                this["_item" + (i + 1)].setData(PaoShangModel.Ins.missionList[i]);
            }
            let cfg = PaoShangCostProxy.Ins.getCfgByNum(PaoShangModel.Ins.freshTimes);
            let arr = cfg.f_RefreshCost.split("-");
            this._ui.img_money2.skin = IconUtils.getIconByCfgId(parseInt(arr[0]));
            this._ui.txt_money2.text = arr[1];
            if (PaoShangModel.Ins.nextRefreshTime) {
                this._isFree = false;
                this.timeCtl.start(PaoShangModel.Ins.nextRefreshTime, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.timeCtl.stop();
                this.endTime();
            }
            if (PaoShangModel.Ins.taskCD) {
                this.timeCtl1.start(PaoShangModel.Ins.taskCD, new Laya.Handler(this, this.onUpdateTime1), new Laya.Handler(this, this.endTime1));
            }
            else {
                this.timeCtl1.stop();
                this.endTime1();
            }
        }
        onUpdateTime1() {
            let time_str = TimeUtil.subTime(this.timeCtl1.tickVal);
            this.timeCtl1.setText(time_str);
        }
        endTime1() {
            this.timeCtl1.setText("刷新任务");
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(time_str + "后免费");
        }
        endTime() {
            this._isFree = true;
            this.timeCtl.setText("本次免费");
        }
    }

    exports.PaoShangTaskView = PaoShangTaskView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangItem extends ui.views.paoshang.ui_paoshangItemUI {
        constructor() {
            super();
            this._offY = 15;
            this.timeCtl = new TimeCtl(this.txt);
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemoved);
        }
        onAdd() {
            this.on(Laya.Event.CLICK, this, this.onClick);
        }
        onRemoved() {
            this.off(Laya.Event.CLICK, this, this.onClick);
            this.timeCtl.stop();
            Laya.Tween.clearAll(this.img_qp);
            this.clearEff();
        }
        onClick() {
            switch (this._data.state) {
                case 1:
                    let req = new StationRewards_req();
                    req.id = this._data.id;
                    SocketMgr.Ins.SendMessageBin(req);
                    break;
                case 4:
                    E.ViewMgr.Open(EViewType.PAOSHANGTASK);
                    break;
                case 5:
                    E.ViewMgr.Open(EViewType.PAOSHANGJS);
                    break;
            }
        }
        setTween(img) {
            Laya.Tween.to(img, { y: img.y + 6 }, 500, Laya.Ease.linearNone, Laya.Handler.create(this, this.onComplete, [img]));
        }
        onComplete(img) {
            Laya.Tween.to(img, { y: img.y - 6 }, 700, Laya.Ease.linearNone, Laya.Handler.create(this, this.setTween, [img]));
        }
        setData(value) {
            if (!value)
                return;
            Laya.Tween.clearAll(this.img_qp);
            this.img_qp.y = 45;
            this.timeCtl.stop();
            this.txt.color = "#ffeec2";
            this._data = value;
            let cfg = PaoShangMissionListProxy.Ins.getCfgByMissionID(value.missionId);
            let count = (10 - value.count) / 10;
            this.img_bgm.y = 204;
            this.txt.y = 218;
            let t = 0;
            this.img_mc.filters = [];
            switch (value.state) {
                case 1:
                    this.img_suo.visible = false;
                    this.img_tou.visible = false;
                    this.img_qp.visible = true;
                    this.setTween(this.img_qp);
                    this.img_qp1.visible = false;
                    this.box1.visible = true;
                    this.img_mc.visible = false;
                    this.icon.visible = false;
                    this.box2.visible = false;
                    this.icon.skin = PaoShangModel.Ins.getStationIcon(value.missionId);
                    this.icon1.skin = IconUtils.getIconByCfgId(parseInt(cfg.f_MissionRewards.split("-")[0]));
                    this.txt.text = "完成";
                    this.txt_wzd.text = "完整度";
                    this.img_pro.visible = true;
                    this.pro.width = 110 * count;
                    this.txt1.text = count * 100 + "%";
                    this.txt2.text = "";
                    this.txt3.text = "";
                    this.setEff(cfg.f_finish);
                    break;
                case 2:
                    this.img_tou.visible = false;
                    this.img_suo.visible = false;
                    this.img_qp.visible = false;
                    this.img_qp1.visible = false;
                    this.box1.visible = true;
                    this.img_mc.visible = false;
                    this.icon.visible = false;
                    this.box2.visible = false;
                    this.icon.skin = PaoShangModel.Ins.getStationIcon(value.missionId);
                    t = value.endUnix - TimeUtil.serverTime;
                    if (t > 0) {
                        this.timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                    }
                    this.txt_wzd.text = "";
                    this.img_pro.visible = false;
                    this.pro.width = 110 * count;
                    this.txt1.text = "";
                    this.txt2.text = "";
                    this.txt3.text = "运输中";
                    this.setEff(cfg.f_progress);
                    break;
                case 3:
                    this.img_suo.visible = false;
                    this.img_tou.visible = false;
                    this.img_qp.visible = false;
                    this.img_qp1.visible = false;
                    this.box1.visible = true;
                    this.img_mc.visible = false;
                    this.icon.visible = false;
                    this.box2.visible = false;
                    this.icon3.skin = PaoShangModel.Ins.getStationIcon(value.missionId);
                    this.txt_wzd.text = "";
                    this.img_pro.visible = false;
                    this.txt1.text = "";
                    this.txt2.text = "";
                    this.txt3.text = "维修中";
                    this.txt.color = "#ff0000";
                    t = value.destoryEndUnix - TimeUtil.serverTime;
                    if (t > 0) {
                        this.timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                    }
                    this.setEff(cfg.f_loading);
                    break;
                case 4:
                    this.clearEff();
                    this.img_suo.visible = false;
                    this.img_tou.visible = false;
                    this.img_qp.visible = false;
                    this.img_qp1.visible = false;
                    this.box1.visible = true;
                    this.img_mc.visible = true;
                    this.icon.visible = false;
                    this.box2.visible = false;
                    this.txt_wzd.text = "";
                    this.img_pro.visible = false;
                    this.txt1.text = "";
                    this.txt2.text = "";
                    this.txt3.text = "";
                    this.txt.text = "空闲";
                    this.img_bgm.y = 204 + this._offY;
                    this.txt.y = 218 + this._offY;
                    break;
                case 5:
                    this.img_suo.visible = true;
                    this.img_tou.visible = false;
                    this.img_qp.visible = false;
                    this.img_qp1.visible = false;
                    this.box1.visible = true;
                    this.img_mc.visible = true;
                    this.icon.visible = false;
                    this.img_mc.filters = ColorUtil.CreateColorFilter(1);
                    this.box2.visible = false;
                    this.txt_wzd.text = "";
                    this.img_pro.visible = false;
                    this.txt1.text = "";
                    this.txt2.text = "";
                    this.txt3.text = "";
                    this.txt.text = "未解锁";
                    this.img_bgm.y = 204 + this._offY;
                    this.txt.y = 218 + this._offY;
                    break;
                case 6:
                    this.img_suo.visible = true;
                    this.img_tou.visible = false;
                    this.img_qp.visible = false;
                    this.img_qp1.visible = false;
                    this.box1.visible = true;
                    this.img_mc.filters = ColorUtil.CreateColorFilter(1);
                    this.icon.visible = false;
                    this.box2.visible = false;
                    this.txt_wzd.text = "";
                    this.img_pro.visible = false;
                    this.txt1.text = "";
                    this.txt2.text = "";
                    this.txt3.text = "";
                    this.txt.text = "LV." + value.count + "解锁";
                    this.img_bgm.y = 204 + this._offY;
                    this.txt.y = 218 + this._offY;
                    break;
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(time_str);
        }
        endTime() {
            let req = new OpenStation_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        setEff(ind) {
            let index;
            let cfg = PaoShangMissionListProxy.Ins.getCfgByMissionID(this._data.missionId);
            if (cfg.f_MissionType == 2) {
                index = parseInt(ind.split("|")[main.skinStyle - 1]);
            }
            else {
                index = parseInt(ind);
            }
            if (!this._eff) {
                this._eff = new SimpleEffect(this.box1, `o/spine/car2/car2`);
                this._eff.once(Laya.Event.COMPLETE, this, () => {
                    this._eff.anim.container.x = 192 * 0.5 + 2;
                    this._eff.anim.container.y = 165 * 0.5 + 100;
                    this._eff.play(index, true);
                });
            }
            else {
                this._eff.play(index, true);
            }
        }
        clearEff() {
            if (this._eff) {
                this._eff.dispose();
                this._eff = null;
            }
        }
    }

    exports.PaoShangItem = PaoShangItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangItem1 extends ui.views.paoshang.ui_paoshangItemUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClick);
            this.timeCtl = new TimeCtl(this.txt);
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemoved);
        }
        onAdd() {
        }
        onRemoved() {
            this.timeCtl.stop();
            Laya.Tween.clearAll(this.img_qp);
            Laya.Tween.clearAll(this.img_qp1);
            this.clearEff();
        }
        onClick() {
            if (this._data) {
                if (this._data.handlerState == 1) {
                    let req = new HandleStationNearBy_req;
                    req.flag = 1;
                    req.id = this._data.id;
                    SocketMgr.Ins.SendMessageBin(req);
                }
                else if (this._data.handlerState == 2) {
                    E.ViewMgr.Open(EViewType.PAOSHANGPH, null, this._data);
                }
            }
        }
        setData(value) {
            if (!value)
                return;
            Laya.Tween.clearAll(this.img_qp);
            Laya.Tween.clearAll(this.img_qp1);
            this.img_qp.y = 45;
            this.img_qp1.y = 0;
            this.timeCtl.stop();
            this.txt.color = "#ffeec2";
            this._data = value;
            let cfg = PaoShangMissionListProxy.Ins.getCfgByMissionID(value.missionId);
            const rate = Math.min(Math.round(PaoShangCfgProxy.Ins.GetDataById(1).f_loot / 1000), 10);
            let count = (10 - value.count * rate) / 10;
            switch (value.handlerState) {
                case 0:
                    this.img_qp.visible = this.img_qp1.visible = false;
                    break;
                case 1:
                    this.img_qp.visible = true;
                    this.setTween(this.img_qp);
                    this.icon1.skin = IconUtils.getIconByCfgId(parseInt(cfg.f_LootRewards.split("-")[0]));
                    this.img_qp1.visible = false;
                    break;
                case 2:
                    this.img_qp.visible = false;
                    this.img_qp1.visible = true;
                    this.setTween(this.img_qp1);
                    this.icon2.skin = IconUtils.getIconByCfgId(parseInt(cfg.f_DestoryRewards.split("-")[0]));
                    break;
            }
            this.img_bgm.y = 204;
            this.txt.y = 218;
            let t = 0;
            switch (value.state) {
                case 1:
                    this.img_suo.visible = false;
                    this.img_tou.visible = false;
                    this.box1.visible = true;
                    this.img_mc.visible = false;
                    this.icon.visible = false;
                    this.box2.visible = false;
                    this.icon.skin = PaoShangModel.Ins.getStationIcon(value.missionId);
                    this.txt.text = "完成";
                    this.txt_wzd.text = "完整度";
                    this.img_pro.visible = true;
                    this.pro.width = 110 * count;
                    this.txt1.text = count * 100 + "%";
                    this.txt2.text = "";
                    this.txt3.text = "";
                    this.setEff(cfg.f_finish);
                    break;
                case 2:
                    this.img_suo.visible = false;
                    this.img_tou.visible = false;
                    this.box1.visible = true;
                    this.img_mc.visible = false;
                    this.icon.visible = false;
                    this.box2.visible = false;
                    this.icon.skin = PaoShangModel.Ins.getStationIcon(value.missionId);
                    t = value.endUnix - TimeUtil.serverTime;
                    if (t > 0) {
                        this.timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                    }
                    this.txt_wzd.text = "";
                    this.img_pro.visible = false;
                    this.pro.width = 110 * count;
                    this.txt1.text = "";
                    this.txt2.text = "";
                    this.txt3.text = "运输中";
                    this.setEff(cfg.f_progress);
                    break;
                case 3:
                    this.img_suo.visible = false;
                    this.img_tou.visible = false;
                    this.box1.visible = true;
                    this.box2.visible = false;
                    this.img_mc.visible = false;
                    this.icon.visible = false;
                    this.icon3.skin = PaoShangModel.Ins.getStationIcon(value.missionId);
                    this.txt_wzd.text = "";
                    this.img_pro.visible = false;
                    this.txt1.text = "";
                    this.txt2.text = "";
                    this.txt3.text = "维修中";
                    this.txt.color = "#ff0000";
                    t = value.destoryEndUnix - TimeUtil.serverTime;
                    if (t > 0) {
                        this.timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                    }
                    this.setEff(cfg.f_loading);
                    break;
            }
        }
        setTween(img) {
            Laya.Tween.to(img, { y: img.y + 6 }, 500, Laya.Ease.linearNone, Laya.Handler.create(this, this.onComplete, [img]));
        }
        onComplete(img) {
            Laya.Tween.to(img, { y: img.y - 6 }, 700, Laya.Ease.linearNone, Laya.Handler.create(this, this.setTween, [img]));
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(time_str);
        }
        endTime() {
            let req = new StationNearByDetail_req();
            req.isRealPlayer = PaoShangModel.Ins.otherisRealPlayer;
            req.playerId = PaoShangModel.Ins.otherPlayerId;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setEff(ind) {
            let index;
            let cfg = PaoShangMissionListProxy.Ins.getCfgByMissionID(this._data.missionId);
            if (cfg.f_MissionType == 2) {
                index = parseInt(ind.split("|")[main.skinStyle - 1]);
            }
            else {
                index = parseInt(ind);
            }
            if (!this._eff) {
                this._eff = new SimpleEffect(this.box1, `o/spine/car2/car2`);
                this._eff.once(Laya.Event.COMPLETE, this, () => {
                    this._eff.anim.container.x = 192 * 0.5 + 2;
                    this._eff.anim.container.y = 165 * 0.5 + 100;
                    this._eff.play(index, true);
                });
            }
            else {
                this._eff.play(index, true);
            }
        }
        clearEff() {
            if (this._eff) {
                this._eff.dispose();
                this._eff = null;
            }
        }
    }

    exports.PaoShangItem1 = PaoShangItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.packUid = 14;
        }
        onAddLoadRes() {
            this.addAtlas('paoshang.atlas');
            this.addAtlas('huodong.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.paoshang.ui_paoshangUI;
                this.bindClose(this._ui.btn_close);
                ValCtl.Create(this._ui.txt_money4, this._ui.img_money4, ECellType.GOLD);
                this.timeCtl = new TimeCtl(this._ui.txt_time);
                ButtonCtl.Create(this._ui.btn_fh, new Laya.Handler(this, this.onBtnFHClick));
                ButtonCtl.Create(this._ui.btn_add, new Laya.Handler(this, this.onBtnAddClick));
                ButtonCtl.Create(this._ui.btn_wp, new Laya.Handler(this, this.onBtnWPClick));
                ButtonCtl.Create(this._ui.btn_rz, new Laya.Handler(this, this.onBtnRZClick));
                ButtonCtl.Create(this._ui.btn_ss, new Laya.Handler(this, this.onBtnSSClick));
                ButtonCtl.Create(this._ui.btn_bj, new Laya.Handler(this, this.onBtnBJClick));
                ButtonCtl.Create(this._ui.btn_ybj, new Laya.Handler(this, this.onBtnYBJClick));
                ButtonCtl.Create(this._ui.btn_xslb, new Laya.Handler(this, this.onBtnXslbClick));
                this._ui.list.array = this._ui.list1.array = [];
                this._ui.list.itemRender = PaoShangItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.itemRender);
                this._ui.list1.itemRender = PaoShangItem1;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.itemRender1);
                this._ui.img_money3.skin = IconUtils.getIconByCfgId(56);
            }
        }
        onBtnXslbClick() {
            ActivityModel.Ins.diamondEject(this.packUid);
        }
        sendInit() {
            let req = new OpenStation_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onInit() {
            E.ViewMgr.Close(EViewType.Main);
            this._ui.txt_money4.text = MainModel.Ins.mRoleData.getVal(ECellType.GOLD) + "";
            PaoShangModel.Ins.on(PaoShangModel.UPDATA_VIEW, this, this.updataMyView);
            PaoShangModel.Ins.on(PaoShangModel.UPDATA_OTHER_VIEW, this, this.updataOtherView);
            PaoShangModel.Ins.on(PaoShangModel.UPDATA_TXZ, this, this.onUpdateMoneyAll);
            PaoShangModel.Ins.on(PaoShangModel.UPDATA_RES, this, this.setDot);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onUpdateMoney);
            ActivityModel.Ins.on(ActivityEvent.PopWinUpdate, this, ActivityModel.Ins.onPop, [this.packUid, this._ui.btn_xslb]);
            ActivityModel.Ins.onPop(this.packUid, this._ui.btn_xslb);
            this.sendInit();
        }
        onExit() {
            E.ViewMgr.Open(EViewType.Main);
            PaoShangModel.Ins.off(PaoShangModel.UPDATA_VIEW, this, this.updataMyView);
            PaoShangModel.Ins.off(PaoShangModel.UPDATA_OTHER_VIEW, this, this.updataOtherView);
            PaoShangModel.Ins.off(PaoShangModel.UPDATA_TXZ, this, this.onUpdateMoneyAll);
            PaoShangModel.Ins.off(PaoShangModel.UPDATA_RES, this, this.setDot);
            MainModel.Ins.off(MainEvent.ValChange, this, this.onUpdateMoney);
            ActivityModel.Ins.off(ActivityEvent.PopWinUpdate, this, ActivityModel.Ins.onPop);
            this.timeCtl.stop();
        }
        onUpdateMoneyAll() {
            const count = MainModel.Ins.mRoleData.getVal(ECellType.TongXingZheng);
            this._ui.txt_money3.text = count + "/" + PaoShangModel.Ins.passports;
            this.setBtn();
        }
        setBtn() {
            let num = parseInt(PaoShangCfgProxy.Ins.GetDataById(1).f_PassportMax);
            if (PaoShangModel.Ins.passports >= num) {
                this._ui.btn_add.visible = false;
            }
            else {
                this._ui.btn_add.visible = true;
            }
            this._ui.btn_add.visible = false;
        }
        onUpdateMoney(id = ECellType.TongXingZheng) {
            if (id == ECellType.TongXingZheng) {
                const count = MainModel.Ins.mRoleData.getVal(id);
                this._ui.txt_money3.text = count + "/" + PaoShangModel.Ins.passports;
                this.setBtn();
                if (count < PaoShangModel.Ins.passports) {
                    this.refreshTime();
                }
                else {
                    this.timeCtl.setText("");
                    this.timeCtl.stop();
                }
                if (PaoShangModel.Ins.isDotTXZ()) {
                    DotManager.addDot(this._ui.btn_wp, 0, 15);
                }
                else {
                    DotManager.removeDot(this._ui.btn_wp);
                }
            }
        }
        refreshTime() {
            let t = PaoShangModel.Ins.endUnix - TimeUtil.serverTime;
            if (t <= 0) {
                t = PaoShangCfgProxy.Ins.GetDataById(1).f_PassportRestoreTime;
            }
            this.timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(time_str);
        }
        endTime() {
            this.timeCtl.setText("");
            let req = new RecoverPassport_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnAddClick() {
        }
        onBtnWPClick() {
            E.ViewMgr.Open(EViewType.PAOSHANGTASK);
        }
        onBtnRZClick() {
            E.ViewMgr.Open(EViewType.PAOSHANGRIZHI);
        }
        onBtnSSClick() {
            E.ViewMgr.Open(EViewType.PAOSHANGNEAR);
        }
        onBtnBJClick() {
            let req = new RemarkStationNearBy_req();
            req.isRealPlayer = PaoShangModel.Ins.otherisRealPlayer;
            req.playerId = PaoShangModel.Ins.otherPlayerId;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnYBJClick() {
            MainModel.Ins.queryMsg("是否确定删除该标记?", 0, 0, EQuickMsg.PaoShangDel, new Laya.Handler(this, this.onDelHandler));
        }
        onDelHandler() {
            let req = new RemRemarkStationNearBy_req();
            req.isRealPlayer = PaoShangModel.Ins.otherisRealPlayer;
            req.playerId = PaoShangModel.Ins.otherPlayerId;
            SocketMgr.Ins.SendMessageBin(req);
            this._ui.btn_bj.visible = true;
            this._ui.btn_ybj.visible = false;
        }
        onBuyHandler() {
            let req = new UpgradePassportSlot_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnFHClick() {
            this.sendInit();
            E.ViewMgr.Open(EViewType.PAOSHANGNEAR);
        }
        itemRender(item) {
            item.setData(item.dataSource);
        }
        itemRender1(item) {
            item.setData(item.dataSource);
        }
        updataMyView() {
            this._ui.txt2.text = "我的商队";
            this.onUpdateMoney();
            this._ui.box_my.visible = true;
            this._ui.box_other.visible = false;
            let list = PaoShangSlotOpenProxy.Ins.getListByType(0);
            let arr = [];
            for (let ele of list) {
                if (MainModel.Ins.mRoleData.lv < parseInt(ele.f_SlotOpen)) {
                    let data = new stItemStation;
                    data.state = 6;
                    data.count = parseInt(ele.f_SlotOpen);
                    arr.push(data);
                }
            }
            this._ui.list.array = PaoShangModel.Ins.stItemStationList.concat(arr);
            this._ui.list1.array = [];
            this.setDot();
        }
        setDot() {
            if (PaoShangModel.Ins.isDotLD()) {
                DotManager.addDot(this._ui.btn_ss);
            }
            else {
                DotManager.removeDot(this._ui.btn_ss);
            }
        }
        updataOtherView() {
            this._ui.txt2.text = PaoShangModel.Ins.otherName + "的商队";
            this._ui.box_my.visible = false;
            this._ui.box_other.visible = true;
            this._ui.list1.array = PaoShangModel.Ins.stItemStationOtherList;
            this._ui.list.array = [];
            if (PaoShangModel.Ins.otherIsBJ) {
                this._ui.btn_bj.visible = false;
                this._ui.btn_ybj.visible = true;
            }
            else {
                this._ui.btn_bj.visible = true;
                this._ui.btn_ybj.visible = false;
            }
        }
        setList() {
            this._ui.list.array = [];
        }
    }

    exports.PaoShangView = PaoShangView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PaoShangModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new PaoShangModule();
            }
            return this._ins;
        }
        onInitCallBack() { }
        initMsg() {
            this.Reg(new PaoShangView(EViewType.PAOSHANG));
            this.Reg(new PaoShangJSView(EViewType.PAOSHANGJS));
            this.Reg(new PaoShangTaskView(EViewType.PAOSHANGTASK));
            this.Reg(new PaoShangRiZhiView(EViewType.PAOSHANGRIZHI));
            this.Reg(new PaoShangPHTip(EViewType.PAOSHANGPH));
            this.Reg(new PaoShangNearView(EViewType.PAOSHANGNEAR));
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onUpdateMoney);
            E.MsgMgr.AddMsg(MSGID.StationInit, this.StationInit, this);
            E.MsgMgr.AddMsg(MSGID.StationChange, this.StationChange, this);
            E.MsgMgr.AddMsg(MSGID.UpgradePassportSlot, this.UpgradePassportSlot, this);
            E.MsgMgr.AddMsg(MSGID.StationBuy, this.StationBuy, this);
            E.MsgMgr.AddMsg(MSGID.MissionList, this.MissionList, this);
            E.MsgMgr.AddMsg(MSGID.HandleStationLogs, this.HandleStationLogs, this);
            E.MsgMgr.AddMsg(MSGID.StationOtherChange, this.StationOtherChange, this);
            E.MsgMgr.AddMsg(MSGID.OpenStationNearBy, this.OpenStationNearBy, this);
            E.MsgMgr.AddMsg(MSGID.RemarkStationList, this.RemarkStationList, this);
            E.MsgMgr.AddMsg(MSGID.StationDaliyInfo, this.StationDaliyInfo, this);
            E.MsgMgr.AddMsg(MSGID.StationPillagesNew, this.StationPillagesNew, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (PaoShangModel.Ins.isDotMain()) {
                MainModel.Ins.funcSetRed(EFuncDef.PaoShang, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.PaoShang, false);
            }
        }
        onUpdateMoney() {
            this.setDot();
        }
        StationInit(value) {
            PaoShangModel.Ins.passports = value.passports;
            PaoShangModel.Ins.buyIds = value.buyIds;
            PaoShangModel.Ins.freeStationNum = value.freeStationNum;
            PaoShangModel.Ins.stItemStationList = value.datalist;
        }
        StationChange(value) {
            PaoShangModel.Ins.stItemStationList = value.datalist;
            PaoShangModel.Ins.endUnix = value.endUnix;
            PaoShangModel.Ins.freeStationNum = value.freeStationNum;
            PaoShangModel.Ins.event(PaoShangModel.UPDATA_VIEW);
            this.setDot();
        }
        UpgradePassportSlot(value) {
            PaoShangModel.Ins.passports = value.passports;
            PaoShangModel.Ins.event(PaoShangModel.UPDATA_TXZ);
            this.setDot();
        }
        StationBuy(value) {
            PaoShangModel.Ins.buyIds = value.buyIds;
            PaoShangModel.Ins.freeStationNum = value.freeStationNum;
            E.ViewMgr.Close(EViewType.PAOSHANGJS);
            this.setDot();
        }
        MissionList(value) {
            PaoShangModel.Ins.setMissionList(value.missionList);
            PaoShangModel.Ins.totalStationNum = value.totalStationNum;
            PaoShangModel.Ins.freeStationNum = value.freeStationNum;
            PaoShangModel.Ins.freshTimes = value.freshTimes;
            PaoShangModel.Ins.nextRefreshTime = value.nextRefreshTime;
            PaoShangModel.Ins.taskCD = value.cd;
            PaoShangModel.Ins.event(PaoShangModel.UPDATA_TASK);
            this.setDot();
        }
        HandleStationLogs(value) {
            PaoShangModel.Ins.riZhiList = value.datalist;
            PaoShangModel.Ins.event(PaoShangModel.UPDATA_RIZHI);
        }
        StationOtherChange(value) {
            PaoShangModel.Ins.otherName = value.name;
            PaoShangModel.Ins.otherIsBJ = value.flag;
            PaoShangModel.Ins.otherPlayerId = value.playerId;
            PaoShangModel.Ins.otherisRealPlayer = value.isRealPlayer;
            PaoShangModel.Ins.stItemStationOtherList = value.datalist;
            PaoShangModel.Ins.event(PaoShangModel.UPDATA_OTHER_VIEW);
        }
        OpenStationNearBy(value) {
            PaoShangModel.Ins.passportsFromDestory = value.passportsFromDestory;
            PaoShangModel.Ins.nearDataList = value.datalist;
            PaoShangModel.Ins.nearCD = value.cd;
            PaoShangModel.Ins.event(PaoShangModel.UPDATA_NEARVIEW);
        }
        RemarkStationList(value) {
            PaoShangModel.Ins.friendDataList = value.datalist;
            PaoShangModel.Ins.event(PaoShangModel.UPDATA_FRIENDVIEW);
        }
        StationDaliyInfo(value) {
            PaoShangModel.Ins.passportsFromDestory = value.passportsFromDestory;
            PaoShangModel.Ins.event(PaoShangModel.UPDATA_RES);
        }
        StationPillagesNew(value) {
            PaoShangModel.Ins.pillagesNew = value.pillagesNew;
            PaoShangModel.Ins.nextRecoverUnix = value.nextRecoverUnix;
            PaoShangModel.Ins.event(PaoShangModel.UPDATA_RES);
            this.onMainViewInit();
        }
    }

    exports.PaoShangModule = PaoShangModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ServerTaskModel extends Laya.EventDispatcher {
        constructor() {
            super(...arguments);
            this.sevenTaskList = [];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ServerTaskModel();
            }
            return this._ins;
        }
        isServerTaskRedTip() {
            if (!MainModel.Ins.isOpenByFuncId(EFuncDef.ServerTask.toString())) {
                return false;
            }
            if (this.isTabRedTip1() || this.isTabRedTip2() || this.isRedJinFenTip()) {
                return true;
            }
            return false;
        }
        isTabRedTip1() {
            if (this.isTaskRedTip()) {
                return true;
            }
            return false;
        }
        isTaskRedTip() {
            for (let i = 1; i < 8; i++) {
                if (this.isTaskRedTipByDay(i)) {
                    return true;
                }
            }
            return false;
        }
        isTaskRedTipByDay(day) {
            for (let i = 0; i < this.sevenTaskList.length; i++) {
                let cfg = SevenDaysTaskProxy.Ins.getCfgById(this.sevenTaskList[i].id);
                if (cfg.f_days == day && this.sevenTaskList[i].status == 2) {
                    return true;
                }
            }
            return false;
        }
        isTabRedTip2() {
            let arr = SevenDaysPackProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].f_purchaseid == 0) {
                    let vo = ActivityModel.Ins.getVo(EActivityType.ServerTask);
                    if (vo) {
                        let voo = vo.vo.datalist.find(item => item.id == arr[i].f_id);
                        if (voo) {
                            if (voo.param1 < arr[i].f_buytimes) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }
        isRedJinFenTip() {
            let arr = SevenDaysStageRewardsProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                if (this.sevenTaskAwardList.indexOf(arr[i].f_id) == -1) {
                    if (this.getSorce() >= arr[i].f_stagepoint) {
                        return true;
                    }
                }
            }
            return false;
        }
        getSorce() {
            let num = 0;
            for (let i = 0; i < this.sevenTaskList.length; i++) {
                if (this.sevenTaskList[i].status == 1) {
                    let cfg = SevenDaysTaskProxy.Ins.getCfgById(this.sevenTaskList[i].id);
                    num += cfg.f_Points;
                }
            }
            return num;
        }
    }
    ServerTaskModel.UPDATA_VIEW = "UPDATA_VIEW";
    ServerTaskModel.UPDATA_JIFEN_VIEW = "UPDATA_JIFEN_VIEW";

    exports.ServerTaskModel = ServerTaskModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ServerTaskItem1 extends ui.views.serverTask.ui_serverTaskItem1UI {
        constructor() {
            super();
            this.rewardList.y = this.rewardList.y - 10;
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
        }
        onBtnClick() {
            if (this._data) {
                let req = new SevenEvent_req;
                req.type = 1;
                req.id = this._data.id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let cfg = SevenDaysTaskProxy.Ins.getCfgById(value.id);
            let taskContent = TaskTypeProxy.Ins.getTaskContent(cfg.f_taskid);
            let params = taskContent.match(/\{(\d+)\}/g);
            if (params) {
                taskContent = taskContent.replace(params[0], cfg.f_taskcontent.toString());
            }
            this.lab.text = taskContent + "(" + value.nums + "/" + cfg.f_taskcontent + ")";
            this.lab1.text = cfg.f_Points + "";
            ItemViewFactory.renderItemSlots(this.rewardList, cfg.f_rewards, 10, 0.85, "left");
            if (value.status == 1) {
                this.lab2.visible = true;
                this.btn.visible = false;
                DotManager.removeDot(this.btn);
            }
            else if (value.status == 2) {
                this.lab2.visible = false;
                this.btn.visible = true;
                this.btn.disabled = false;
                DotManager.addDot(this.btn);
            }
            else {
                this.lab2.visible = false;
                this.btn.visible = true;
                this.btn.disabled = true;
                DotManager.removeDot(this.btn);
            }
        }
    }

    exports.ServerTaskItem1 = ServerTaskItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ServerTaskItem2 extends ui.views.serverTask.ui_serverTaskItem2UI {
        constructor() {
            super();
            this.btnCtl = ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            this.rateBtnCtl = new RateBtn01Ctl(this.rate_btn, this, this.onBtnClick, ESkinRateBtn.Yellow);
        }
        onBtnClick() {
            if (this._data.f_purchaseid) {
                ActivityModel.Ins.recharge(this._data.f_purchaseid);
            }
            else {
                if (this._activityVo) {
                    ActivityModel.Ins.lingQu(this._activityVo.uid, this._data.f_id);
                }
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.lab.text = value.f_packname;
            this.btnCtl.visible = false;
            this.rateBtnCtl.visible = false;
            let _curBtnCtl = this.btnCtl;
            let rateVis = false;
            if (value.f_purchaseid) {
                let cfg = t_Purchase_PriceProxy.Ins.GetDataById(value.f_purchaseid);
                this.cnYuan.text = StringUtil.moneyCv(cfg.f_price) + "元";
                if (cfg.f_isVoucher == EShopPayType.Voucher) {
                    _curBtnCtl = this.rateBtnCtl.btnCtl;
                    rateVis = true;
                    this.rateBtnCtl.cfg = cfg;
                }
            }
            else {
                this.cnYuan.text = "免费";
            }
            this.btnCtl.visible = !rateVis;
            this.rateBtnCtl.visible = rateVis;
            let red = false;
            let disabled = false;
            ItemViewFactory.renderItemSlots(this.rewardList, value.f_packcontent, 10, 0.85, "left");
            this._activityVo = ActivityModel.Ins.getVo(EActivityType.ServerTask);
            if (this._activityVo) {
                let voo = this._activityVo.vo.datalist.find(item => item.id == value.f_id);
                if (voo) {
                    this.lab1.text = voo.param1 + "/" + value.f_buytimes;
                    if (voo.param1 >= value.f_buytimes) {
                        disabled = true;
                    }
                    else {
                        disabled = false;
                        if (value.f_purchaseid == 0) {
                            red = true;
                        }
                    }
                }
                else {
                    disabled = true;
                }
            }
            else {
                disabled = true;
            }
            _curBtnCtl.grayMouseDisable = disabled;
            if (red) {
                DotManager.addDot(_curBtnCtl.skin, 10, -10);
            }
            else {
                DotManager.removeDot(_curBtnCtl.skin);
            }
        }
    }

    exports.ServerTaskItem2 = ServerTaskItem2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ServerTaskItem3 extends ui.views.serverTask.ui_serverTaskItem3UI {
        constructor() {
            super();
            this.item.on(Laya.Event.CLICK, this, this.onItemClick);
        }
        onItemClick() {
            if (this._flag && this._data) {
                let req = new SevenEvent_req;
                req.type = 2;
                req.id = this._data.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        setData(value, index) {
            if (!value)
                return;
            this._data = value;
            this.tf.text = value.f_stagepoint + "";
            let vo = new ItemVo;
            vo.cfgId = parseInt(value.f_rewards.split("-")[0]);
            vo.count = parseInt(value.f_rewards.split("-")[1]);
            ItemViewFactory.refreshSlot(this.item, vo);
            let sorce = ServerTaskModel.Ins.getSorce();
            if (sorce >= value.f_stagepoint) {
                this.pro.width = 45;
            }
            else {
                if (index != 0) {
                    let num = SevenDaysStageRewardsProxy.Ins.List[index - 1].f_stagepoint;
                    num = sorce - num;
                    if (num > 0) {
                        this.pro.width = sorce / value.f_stagepoint * 45;
                    }
                    else {
                        this.pro.width = 0;
                    }
                }
                else {
                    this.pro.width = sorce / value.f_stagepoint * 45;
                }
            }
            this._flag = false;
            DotManager.removeDot(this.item);
            if (ServerTaskModel.Ins.sevenTaskAwardList.indexOf(value.f_id) != -1) {
                this.img.visible = true;
            }
            else {
                this.img.visible = false;
                if (sorce >= value.f_stagepoint) {
                    this._flag = true;
                    DotManager.addDot(this.item);
                }
            }
        }
    }

    exports.ServerTaskItem3 = ServerTaskItem3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ServerTaskView extends ViewBase {
        constructor() {
            super(...arguments);
            this.uiBgCloseClick = true;
            this.mMask = true;
            this.autoFree = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("serverTask.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.serverTask.ui_serverTaskViewUI;
                this.bindClose(this._ui.btn_close);
                this.setMouseBg(this._ui.bg);
                this._timeCtl = new TimeCtl(this._ui.lab_time);
                this._ui.list.itemRender = ui.views.serverTask.ui_serverTaskItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list.selectEnable = true;
                this._ui.list1.itemRender = ServerTaskItem1;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
                this._ui.list2.itemRender = ServerTaskItem2;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onRenderHandler2);
                this._ui.list3.itemRender = ServerTaskItem3;
                this._ui.list3.renderHandler = new Laya.Handler(this, this.onRenderHandler3);
                const tabsSkin = [this._ui.tab, this._ui.tab1];
                this.tabList = ["任务", "礼包"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
            }
        }
        onInit() {
            ServerTaskModel.Ins.on(ServerTaskModel.UPDATA_VIEW, this, this.onUpdataView);
            ServerTaskModel.Ins.on(ServerTaskModel.UPDATA_JIFEN_VIEW, this, this.updataJiFen);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.updataActView);
            this._ui.list.array = ["一", "二", "三", "四", "五", "六", "七"];
            this._ui.list.selectedIndex = 0;
            if (this.Data) {
                let obj = this.Data;
                this.tabsCtl.selectIndex = obj.tabIndex;
            }
            else {
                this.tabsCtl.selectIndex = 0;
            }
            this._indexDay = 0;
            if (ServerTaskModel.Ins.isTabRedTip1()) {
                DotManager.addDot(this._ui.tab);
            }
            else {
                DotManager.removeDot(this._ui.tab);
            }
            this.updataActView();
            this.updataJiFen();
            this.initAutoBtn();
            this.Data = null;
        }
        initAutoBtn() {
            let _activityVo = ActivityModel.Ins.getVo(EActivityType.ServerTask);
            if (_activityVo) {
                this._autoBtn = AutoRateBtn.Create(this._ui, _activityVo.uid);
            }
            if (initConfig.clienttype == EClientType.Discount) {
                this._ui.list2.height = 650;
            }
            else {
                this._ui.list2.height = 754;
            }
        }
        onExit() {
            ServerTaskModel.Ins.off(ServerTaskModel.UPDATA_VIEW, this, this.onUpdataView);
            ServerTaskModel.Ins.off(ServerTaskModel.UPDATA_JIFEN_VIEW, this, this.updataJiFen);
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.updataActView);
            this._timeCtl.stop();
            this.tabsCtl.dispose();
            if (this._autoBtn) {
                this._autoBtn.dispose();
            }
        }
        onUpdataView() {
            this._ui.list.refresh();
            if (ServerTaskModel.Ins.isTabRedTip1()) {
                DotManager.addDot(this._ui.tab);
            }
            else {
                DotManager.removeDot(this._ui.tab);
            }
            this.updataJiFen();
        }
        onRenderHandler(item, index) {
            if (this._ui.list.selectedIndex > ServerTaskModel.Ins.sevenTaskDay - 1) {
                this._ui.list.selectedIndex = this._indexDay;
            }
            item.lab.text = "第" + item.dataSource + "天";
            if (index + 1 <= ServerTaskModel.Ins.sevenTaskDay) {
                item.img_z.visible = item.sp.visible = false;
                if (this._ui.list.selectedIndex == index) {
                    item.img.skin = "remote/serverTask/anniu_2.png";
                    this._indexDay = this._ui.list.selectedIndex;
                    this.updataTaskView();
                }
                else {
                    item.img.skin = "remote/serverTask/anniu_1.png";
                }
            }
            else {
                item.img_z.visible = item.sp.visible = true;
            }
            if (ServerTaskModel.Ins.isTaskRedTipByDay(index + 1)) {
                DotManager.addDot(item, 0, -10);
            }
            else {
                DotManager.removeDot(item);
            }
        }
        onRenderHandler1(item) {
            item.setData(item.dataSource);
        }
        onRenderHandler2(item) {
            item.setData(item.dataSource);
        }
        onRenderHandler3(item, index) {
            item.setData(item.dataSource, index);
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.txt.text = this.tabList[index];
            if (sel) {
                skin.img2.visible = true;
                skin.img1.visible = false;
                skin.txt.color = "#A1572F";
            }
            else {
                skin.img2.visible = false;
                skin.img1.visible = true;
                skin.txt.color = "#e4bb87";
            }
        }
        onTabSelectHandler(v) {
            if (v == -1)
                return;
            if (v == 0) {
                this._ui.sp.visible = true;
                this._ui.sp1.visible = false;
            }
            else {
                this._ui.sp.visible = false;
                this._ui.sp1.visible = true;
            }
        }
        updataTaskView() {
            let arrr = [];
            for (let i = 0; i < ServerTaskModel.Ins.sevenTaskList.length; i++) {
                let cfg = SevenDaysTaskProxy.Ins.getCfgById(ServerTaskModel.Ins.sevenTaskList[i].id);
                if (cfg.f_days == this._indexDay + 1) {
                    arrr.push(ServerTaskModel.Ins.sevenTaskList[i]);
                }
            }
            let arr1 = [];
            let arr2 = [];
            let arr3 = [];
            for (let i = 0; i < arrr.length; i++) {
                switch (arrr[i].status) {
                    case 2:
                        arr1.push(arrr[i]);
                        break;
                    case 0:
                        arr2.push(arrr[i]);
                        break;
                    case 1:
                        arr3.push(arrr[i]);
                        break;
                }
            }
            arr1 = arr1.sort(this.onSort);
            arr2 = arr2.sort(this.onSort);
            arr3 = arr3.sort(this.onSort);
            this._ui.list1.array = arr1.concat(arr2.concat(arr3));
        }
        onSort(a, b) {
            let aa = SevenDaysTaskProxy.Ins.getCfgById(a.id);
            let bb = SevenDaysTaskProxy.Ins.getCfgById(b.id);
            return aa.f_sort - bb.f_sort;
        }
        updataActView() {
            this._activityVo = ActivityModel.Ins.getVo(EActivityType.ServerTask);
            if (!this._activityVo)
                return;
            let time = this._activityVo.vo.endtime - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
            this._ui.list2.array = SevenDaysPackProxy.Ins.List;
            if (this.Data) {
                let obj = this.Data;
                this._ui.list2.scrollTo(obj.listitemIndex);
            }
            if (ServerTaskModel.Ins.isTabRedTip2()) {
                DotManager.addDot(this._ui.tab1);
            }
            else {
                DotManager.removeDot(this._ui.tab1);
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        updataJiFen() {
            this._ui.list3.array = SevenDaysStageRewardsProxy.Ins.List;
            this._ui.lab.text = ServerTaskModel.Ins.getSorce() + "";
        }
    }

    exports.ServerTaskView = ServerTaskView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ServerTaskModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new ServerTaskModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            ServerTaskModel.Ins.sevenTaskList = [];
        }
        initMsg() {
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onMainViewInit);
            this.Reg(new ServerTaskView(EViewType.ServerTaskView));
            E.MsgMgr.AddMsg(MSGID.SevenTask, this.SevenTask, this);
            E.MsgMgr.AddMsg(MSGID.SevenScore, this.SevenScore, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (ServerTaskModel.Ins.isServerTaskRedTip()) {
                MainModel.Ins.funcSetRed(EFuncDef.ServerTask, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.ServerTask, false);
            }
        }
        SevenTask(value) {
            ServerTaskModel.Ins.sevenTaskDay = value.num;
            if (value.flag) {
                for (let i = 0; i < value.dataList.length; i++) {
                    let index = ServerTaskModel.Ins.sevenTaskList.findIndex(ele => ele.id == value.dataList[i].id);
                    ServerTaskModel.Ins.sevenTaskList[index] = value.dataList[i];
                }
            }
            else {
                ServerTaskModel.Ins.sevenTaskList = value.dataList;
            }
            ServerTaskModel.Ins.event(ServerTaskModel.UPDATA_VIEW);
            this.onMainViewInit();
        }
        SevenScore(value) {
            ServerTaskModel.Ins.sevenTaskAwardList = value.dataList;
            ServerTaskModel.Ins.event(ServerTaskModel.UPDATA_JIFEN_VIEW);
            this.onMainViewInit();
        }
    }

    exports.ServerTaskModule = ServerTaskModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EActivityUid) {
        EActivityUid[EActivityUid["ShenBinPackage"] = 23] = "ShenBinPackage";
    })(exports.EActivityUid || (exports.EActivityUid = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinLBItem extends ui.views.shenbin.ui_shenbingLBItemUI {
        constructor() {
            super();
            this.list.itemRender = ui.views.main.ui_slot_itemUI;
            this.list.renderHandler = new Laya.Handler(this, this.onItemHandler);
            this.btnCtl = ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            this.rateCtl = new RateBtn01Ctl(this.ratebtn, this, this.onBtnClick, ESkinRateBtn.Yellow);
        }
        onBtnClick() {
            if (this._data) {
                if (this._data.f_PurchaseID) {
                    ActivityModel.Ins.recharge(this._data.f_PurchaseID);
                }
                else {
                    let rep = new ArtifactPack_req;
                    rep.id = this._data.f_id;
                    SocketMgr.Ins.SendMessageBin(rep);
                }
            }
        }
        onItemHandler(item) {
            let vo = new ItemVo();
            vo.cfgId = parseInt(item.dataSource.split("-")[0]);
            vo.count = parseInt(item.dataSource.split("-")[1]);
            ItemViewFactory.refreshSlot(item, vo);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.lab_name.text = value.f_name;
            this.list.array = value.f_Item.split("|");
            let vo = ShenBinModel.Ins.dataPackList.find(ele => ele.id == value.f_id);
            this.lab_num.text = vo.num + "/" + value.f_BuyTimes;
            let curBtn = this.btnCtl;
            DotManager.removeDot(this.btnCtl.skin);
            DotManager.removeDot(this.rateCtl.btnCtl.skin);
            this.rateCtl.btnCtl.visible = false;
            if (value.f_PurchaseID) {
                let _purcCfg = t_Purchase_PriceProxy.Ins.GetDataById(value.f_PurchaseID);
                this.tf1.text = _purcCfg.f_price / 100 + "元";
                if (_purcCfg.f_isVoucher == EShopPayType.Voucher) {
                    this.rateCtl.cfg = _purcCfg;
                    curBtn = this.rateCtl.btnCtl;
                }
                RateBtnUtils.Refresh(curBtn, this.btnCtl, this.rateCtl.btnCtl);
            }
            else {
                this.tf1.text = E.getLang("Free");
                if (vo.num == 0) {
                    DotManager.addDot(curBtn.skin, 20, -10);
                }
            }
            if (vo.num >= value.f_BuyTimes) {
                curBtn.grayMouseDisable = true;
            }
            else {
                curBtn.grayMouseDisable = false;
            }
        }
    }

    exports.ShenBinLBItem = ShenBinLBItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinLBView extends ViewBase {
        constructor() {
            super(...arguments);
            this.uiBgCloseClick = true;
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('shenbin.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.shenbin.ui_shenbingLBViewUI;
                this.bindClose(this._ui.btn_close);
                ValCtl.Create(this._ui.txt_money2, this._ui.img_money2, ECellType.GOLD);
                this.setMouseBg(this._ui.bg);
                this._ui.list.itemRender = ShenBinLBItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
            }
        }
        onInit() {
            ShenBinModel.Ins.on(ShenBinModel.UPDATA_PACK, this, this.upDataView);
            this._ui.txt_money2.text = MainModel.Ins.mRoleData.getVal(ECellType.GOLD) + "";
            this.upDataView();
            this.initAutoBtn();
        }
        initAutoBtn() {
            this._autoBtn = AutoRateBtn.Create(this._ui, EActivityUid.ShenBinPackage);
            if (initConfig.clienttype == EClientType.Discount) {
                this._ui.list.height = 800;
            }
            else {
                this._ui.list.height = 932;
            }
        }
        onExit() {
            ShenBinModel.Ins.off(ShenBinModel.UPDATA_PACK, this, this.upDataView);
            if (this._autoBtn) {
                this._autoBtn.dispose();
            }
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        upDataView() {
            this._ui.list.array = ShenBinPackProxy.Ins.List;
        }
    }

    exports.ShenBinLBView = ShenBinLBView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinLogItem extends ui.views.shenbin.ui_shenbinLogItemUI {
        constructor() {
            super();
        }
        setData(value) {
            if (!value)
                return;
            let vo = new ItemVo;
            vo.cfgId = value.item.id;
            vo.count = value.item.count;
            ItemViewFactory.refreshSlot(this.item_12, vo);
            this.lab_name.text = vo.getName();
            this.lab_time.text = TimeUtil.timestamtoTime1(value.time);
        }
    }

    exports.ShenBinLogItem = ShenBinLogItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinLogView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('shenbin.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.shenbin.ui_shenbinLogViewUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = ShenBinLogItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
            }
        }
        onInit() {
            ShenBinModel.Ins.on(ShenBinModel.UPDATA_LOGVIEW, this, this.upDataView);
            let req = new ArtifactLogList_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            ShenBinModel.Ins.off(ShenBinModel.UPDATA_LOGVIEW, this, this.upDataView);
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        upDataView() {
            this._ui.list.array = ShenBinModel.Ins.dataLogList;
        }
    }

    exports.ShenBinLogView = ShenBinLogView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinLvView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('shenbin.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.shenbin.ui_shenbinLvViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.Create(this._ui.btn_cd, new Laya.Handler(this, this.onBtnCDClick));
                this._btnLvCtl = ButtonCtl.Create(this._ui.btn_lv, new Laya.Handler(this, this.onBtnLvClick));
            }
        }
        onInit() {
            ShenBinModel.Ins.on(ShenBinModel.UPDATA_SHENBIN, this, this.onupdataView);
            this._data = this.Data;
            this.updataView();
        }
        onExit() {
            ShenBinModel.Ins.off(ShenBinModel.UPDATA_SHENBIN, this, this.onupdataView);
        }
        onupdataView() {
            let index = ShenBinModel.Ins.dataList.findIndex(ele => ele.artifactId === this._data.artifactId);
            this._data = ShenBinModel.Ins.dataList[index];
            this.updataView();
        }
        onBtnLvClick() {
            if (this._data) {
                if (this._num >= this._needNum) {
                    this.sendCmd();
                    return;
                }
                else {
                    if ((this._num + this._wnNum) >= this._needNum) {
                        let num = this._needNum - this._num;
                        MainModel.Ins.queryMsg("进行升级", ECellType.ShenBinCP, num, EQuickMsg.ShenBinLv, new Laya.Handler(this, this.sendCmd));
                    }
                    else {
                        E.ViewMgr.ShowMidError("神兵碎片不足");
                    }
                }
            }
        }
        sendCmd() {
            let cfg = ShenBinListProxy.Ins.getCfgById(this._data.artifactId);
            let req = new ArtifactHandler_req;
            req.type = 1;
            req.itemId = cfg.f_itemId;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnCDClick() {
            if (this._data) {
                if (this._data.level) {
                    let cfg = ShenBinListProxy.Ins.getCfgById(this._data.artifactId);
                    let req = new ArtifactHandler_req;
                    req.type = 2;
                    req.itemId = cfg.f_itemId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
                else {
                    E.ViewMgr.ShowMidError("请先激活神兵");
                }
            }
        }
        updataView() {
            let cfg = ShenBinListProxy.Ins.getCfgById(this._data.artifactId);
            let icfg = ItemProxy.Ins.getCfg(cfg.f_itemId);
            let ecfg = ShenBinExpProxy.Ins.getCfgByQuaAndLv(cfg.f_ArtifactQua, this._data.level);
            let eNextCfg = ShenBinExpProxy.Ins.getCfgByQuaAndLv(cfg.f_ArtifactQua, this._data.level + 1);
            this._num = MainModel.Ins.mRoleData.getVal(icfg.f_itemid);
            this._wnNum = MainModel.Ins.mRoleData.getVal(ECellType.ShenBinCP);
            this._needNum = ecfg.f_pieces;
            this._ui.lab_name.text = cfg.f_ArtifactName;
            this._ui.icon.skin = IconUtils.getIconByCfgId(icfg.f_itemid);
            this._ui.quality.skin = IconUtils.getQuaIcon(icfg.f_qua);
            this._ui.lab_l.text = "lv." + this._data.level;
            if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                this._ui.lab_dec.text = StringUtil.format(cfg.f_Comment_v1, this.getAttr(this._data.level));
            }
            else {
                this._ui.lab_dec.text = StringUtil.format(cfg.f_Comment, this.getAttr(this._data.level));
            }
            if (eNextCfg) {
                this._ui.lab_next.visible = true;
                this._ui.lab_dec1.visible = true;
                if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                    this._ui.lab_dec1.text = StringUtil.format(cfg.f_Comment_v1, this.getAttr(this._data.level + 1));
                }
                else {
                    this._ui.lab_dec1.text = StringUtil.format(cfg.f_Comment, this.getAttr(this._data.level + 1));
                }
            }
            else {
                this._ui.lab_next.visible = false;
                this._ui.lab_dec1.visible = false;
            }
            let t = this._num / this._needNum;
            if (t > 1) {
                t = 1;
            }
            this._ui.pro.width = t * 373;
            this._ui.lab_time2.text = this._num + "/" + this._needNum;
            if (this._data.level == 0) {
                this._ui.btn_lv.disabled = false;
                this._ui.lab_lv.text = "激活";
                this._ui.btn_cd.visible = false;
                this._btnLvCtl.setpos(183, 510);
            }
            else {
                if (this._data.wearable == 1) {
                    this._ui.btn_cd.visible = false;
                    this._btnLvCtl.setpos(183, 510);
                }
                else {
                    this._ui.btn_cd.visible = true;
                    this._btnLvCtl.setpos(310, 510);
                }
                if (!eNextCfg) {
                    this._ui.lab_lv.text = "已满级";
                    this._ui.btn_lv.disabled = true;
                    this._ui.lab_time2.text = "已满级";
                    this._ui.pro.width = 373;
                }
                else {
                    this._ui.lab_lv.text = "升级";
                    this._ui.btn_lv.disabled = false;
                }
            }
        }
        getAttr(lv) {
            if (lv == 0) {
                lv = 0;
            }
            else {
                lv -= 1;
            }
            let st = "";
            let cfg = ShenBinListProxy.Ins.getCfgById(this._data.artifactId);
            let array = [];
            let arr;
            let arr1;
            if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                arr = cfg.f_initVal_v1.split("|");
                arr1 = cfg.f_parameter_v1.split("|");
            }
            else {
                arr = cfg.f_initVal.split("|");
                arr1 = cfg.f_parameter.split("|");
            }
            for (let i = 0; i < arr.length; i++) {
                let v = parseInt(arr[i]) + parseInt(arr1[i]) * lv;
                if (cfg.f_ispercent) {
                    st = (v / 100) + "%";
                }
                else {
                    st = v + "";
                }
                array.push(st);
            }
            return array;
        }
    }

    exports.ShenBinLvView = ShenBinLvView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinTZItem extends ui.views.shenbin.ui_shenbinTZItemUI {
        constructor() {
            super();
            this.list.itemRender = ui.views.shenbin.ui_shenbinTZItem1UI;
            this.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            this.list1.itemRender = ui.views.shenbin.ui_shenbinTZItem2UI;
            this.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
        }
        onBtnClick() {
            if (this._data) {
                let req = new ArtifactSuit_req;
                req.fid = this._data.fid;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onRenderHandler(item) {
            let data = ShenBinModel.Ins.dataList.find(ele => ele.artifactId == parseInt(item.dataSource));
            let cfg = ShenBinListProxy.Ins.getCfgById(data.artifactId);
            item.lab_name.text = cfg.f_ArtifactName;
            let ecfg = ShenBinExpProxy.Ins.getCfgByQuaAndLv(cfg.f_ArtifactQua, data.level);
            let eNextcfg = ShenBinExpProxy.Ins.getCfgByQuaAndLv(cfg.f_ArtifactQua, data.level + 1);
            let icfg = ItemProxy.Ins.getCfg(cfg.f_itemId);
            item.icon.skin = IconUtils.getIconByCfgId(icfg.f_itemid);
            item.quality.skin = IconUtils.getQuaIcon(icfg.f_qua);
            item.lab_lv.text = "lv." + data.level;
            if (eNextcfg) {
                let icfg = ItemProxy.Ins.getCfg(cfg.f_itemId);
                let num = MainModel.Ins.mRoleData.getVal(icfg.f_itemid);
                item.lab_num.visible = true;
                item.lab_num.text = "碎片" + num + "/" + ecfg.f_pieces;
                item.lab_mj.visible = false;
            }
            else {
                item.lab_num.visible = false;
                item.lab_mj.visible = true;
            }
        }
        onRenderHandler1(item, index) {
            let arr = item.dataSource.f_Attr.split(":");
            let lv = parseInt(item.dataSource.f_ComboLevel);
            let id = parseInt(arr[0]);
            let val = attrConvert(id, parseInt(arr[1]));
            let st = MainModel.Ins.getAttrNameIdByID(id) + "+" + val;
            if (index == 0) {
                item.lab.text = "全部激活  " + st;
            }
            else {
                item.lab.text = `激活达到${lv}级  ` + st;
            }
            if (this._data.currentLevel > lv) {
                item.lab.color = "#92918D";
            }
            else if (this._data.currentLevel == lv) {
                item.lab.color = "#4D9DCE";
            }
            else if (this._data.activeLevel >= lv) {
                item.lab.color = "#4F8E3F";
            }
            else {
                item.lab.color = "#92918D";
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let cfg = ShenBinComboProxy.Ins.GetDataById(value.fid);
            this.lab_name.text = cfg.f_ComboName + `(${ShenBinModel.Ins.getTZSt(cfg.f_Artifactid)})`;
            this.list.array = cfg.f_Artifactid.split("|");
            this.lab_lv.text = "Lv." + ShenBinModel.Ins.getTZLv(cfg.f_Artifactid);
            let attArr = ArtifactComboAttributeProxy.Ins.getCfgById(value.fid);
            this.list1.array = attArr;
            DotManager.removeDot(this.btn);
            if (value.state == 1) {
                this.btn.mouseEnabled = true;
                this.btn.skin = "remote/common/base/anniu_blue1.png";
                this.lab.text = "激活";
                DotManager.addDot(this.btn);
            }
            else {
                this.btn.mouseEnabled = false;
                this.btn.skin = "remote/common/base/anniu_grey.png";
                if (value.currentLevel >= parseInt(attArr[attArr.length - 1].f_ComboLevel)) {
                    this.lab.text = "已上限";
                }
                else {
                    this.lab.text = "激活";
                }
            }
        }
    }

    exports.ShenBinTZItem = ShenBinTZItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinTZView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("shenbin.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.shenbin.ui_shenbinTZViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)),
                    this._panelCtl = new ScrollPanelControl();
                this._panelCtl.init(this._ui.panel);
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("ShenBinTZTitle", "ShenBinTZDec");
        }
        onInit() {
            ShenBinModel.Ins.on(ShenBinModel.UPDATA_TZ, this, this.updataView);
            this.updataView();
        }
        onExit() {
            ShenBinModel.Ins.off(ShenBinModel.UPDATA_TZ, this, this.updataView);
            this._panelCtl.clear();
        }
        updataView() {
            this._panelCtl.clear();
            this._panelCtl.split(ShenBinModel.Ins.tzList, ShenBinTZItemNode, 435, 13);
            this._panelCtl.end(this._panelCtl.getScrollValue());
        }
    }
    class ShenBinTZItemNode extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "ShenBinTZItemNode";
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ShenBinTZItem);
            _skin.setData(this.list[index]);
            _skin.y = this.y;
            return _skin;
        }
    }

    exports.ShenBinTZView = ShenBinTZView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinAttrItem extends ui.views.shenbin.ui_shenbinAttrItemUI {
        constructor() {
            super();
        }
        setData(value) {
            this.img.skin = "remote/shenbin/qua_" + value.qua + ".png";
            if (value.lv) {
                this.lab.text = "";
                this.lab_lv.text = "lv." + value.lv;
                let cfg = ShenBinAttrProxy.Ins.getCfgByQua(value.qua);
                this.lab_name.text = MainModel.Ins.getAttrNameIdByID(cfg.f_AttributeID) + ":";
                let num = cfg.f_Upgrade * value.lv;
                let val = cfg.f_Origin + num;
                this.lab_attr.text = attrConvert(cfg.f_AttributeID, val);
            }
            else {
                this.lab.text = "未激活";
                this.lab_lv.text = "";
                this.lab_name.text = "";
                this.lab_attr.text = "";
            }
        }
    }

    exports.ShenBinAttrItem = ShenBinAttrItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
            this._isAuto = false;
        }
        onAddLoadRes() {
            this.addAtlas('shenbin.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.shenbin.ui_shenbinViewUI;
                this.bindClose(this._ui.btn_close);
                ValCtl.Create(this._ui.txt_money1, this._ui.img_money1, ECellType.ShenTie);
                ValCtl.Create(this._ui.txt_money2, this._ui.img_money2, ECellType.ShenBinCP);
                ValCtl.Create(this._ui.txt_money22, this._ui.img_money22, ECellType.GOLD);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)), ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick)), ButtonCtl.Create(this._ui.lab_click, new Laya.Handler(this, this.onLabClick)), ButtonCtl.Create(this._ui.btn_lb, new Laya.Handler(this, this.onBtnLBClick)), ButtonCtl.Create(this._ui.btn_tz, new Laya.Handler(this, this.onBtnTZClick)));
                this._checkCtl = new CheckBoxCtl({ bg: this._ui.ckbg, gou: this._ui.gou });
                this._checkCtl.selected = false;
                this._checkCtl.selectHander = new Laya.Handler(this, this.onCheckHandler);
                this._checkCtl1 = new CheckBoxCtl({ bg: this._ui.ck1, gou: this._ui.gou1 });
                this._checkCtl1.selected = false;
                this._checkCtl1.selectHander = new Laya.Handler(this, this.onCheckHandler1);
                for (let i = 1; i < 21; i++) {
                    this["_shenBinCtl" + i] = new ShenBinCtl(this._ui["item" + i]);
                }
                this._eff = new SimpleEffect(this._ui.sp, `o/spine/sweapon2/sweapon2`, 40, 250);
                this._ui.list_attr.itemRender = ShenBinAttrItem;
                this._ui.list_attr.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            ShenBinModel.Ins.on(ShenBinModel.OPEN_ITEM, this, this.onOpenItem);
            ShenBinModel.Ins.on(ShenBinModel.UPDATA_PACK, this, this.setLBDot);
            ShenBinModel.Ins.on(ShenBinModel.UPDATA_SHENBIN, this, this.onupdataAttr);
            ShenBinModel.Ins.on(ShenBinModel.UPDATA_TZ, this, this.onTZRedTip);
            this._ui.txt_money1.text = MainModel.Ins.mRoleData.getVal(ECellType.ShenTie) + "";
            this._ui.txt_money2.text = MainModel.Ins.mRoleData.getVal(ECellType.ShenBinCP) + "";
            this._ui.txt_money22.text = MainModel.Ins.mRoleData.getVal(ECellType.GOLD) + "";
            this._eff.play(0);
            this.iconInit();
            this.updataView();
            this.setLBDot();
            this.updataMoney();
            this.onTZRedTip();
        }
        onTZRedTip() {
            if (ShenBinModel.Ins.isTZRedTip()) {
                DotManager.addDot(this._ui.btn_tz, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.btn_tz);
            }
        }
        updataMoney() {
            let cfg = ShenBinCfgProxy.Ins.List[0];
            if (ShenBinFeastModel.Ins.isOpen) {
                this._ui.ck1.visible = true;
                this._ui.tf2.visible = true;
                this._ui.ckbg.x = 234;
                this._ui.tf1.x = 279;
                let id;
                let num;
                let _now;
                if (this._checkCtl1.selected) {
                    id = parseInt(cfg.f_PreCost_Money.split("-")[0]);
                    num = parseInt(cfg.f_PreCost_Money.split("-")[1]);
                    _now = num;
                    this._ui.zhekouImg.visible = false;
                }
                else {
                    id = parseInt(cfg.f_PreCost.split("-")[0]);
                    num = parseInt(cfg.f_PreCost.split("-")[1]);
                    this._ui.zhekouImg.visible = true;
                    _now = parseInt(cfg.f_PreCost_discount.split("-")[1]);
                    let a = (_now / num * 10).toFixed(0);
                    this._ui.zhekouTf.text = E.getLang("limitdiscount", a);
                }
                this._ui.img_m.skin = IconUtils.getIconByCfgId(id);
                this._ui.lab_money.text = _now + "";
            }
            else {
                this._ui.zhekouImg.visible = false;
                this._ui.ck1.visible = false;
                this._ui.tf2.visible = false;
                this._ui.ckbg.x = 296;
                this._ui.tf1.x = 341;
                this._ui.lab_money.text = cfg.f_PreCost.split("-")[1];
                this._ui.img_m.skin = IconUtils.getIconByCfgId(ECellType.ShenTie);
            }
        }
        setLBDot() {
            if (ShenBinModel.Ins.isFreeDot()) {
                DotManager.addDot(this._ui.btn_lb);
            }
            else {
                DotManager.removeDot(this._ui.btn_lb);
            }
        }
        onExit() {
            ShenBinModel.Ins.off(ShenBinModel.OPEN_ITEM, this, this.onOpenItem);
            ShenBinModel.Ins.off(ShenBinModel.UPDATA_PACK, this, this.setLBDot);
            ShenBinModel.Ins.off(ShenBinModel.UPDATA_SHENBIN, this, this.onupdataAttr);
            ShenBinModel.Ins.off(ShenBinModel.UPDATA_TZ, this, this.onTZRedTip);
            this.setAuto(false);
            this._isPlay = false;
            if (this._eff) {
                this._eff.stop();
            }
            this.iconInit();
            Laya.timer.clear(this, this.onIconTween);
            Laya.Tween.clearAll(this._ui.icon);
        }
        iconInit() {
            this._ui.icon.x = 322;
            this._ui.icon.y = 900;
            this._ui.icon.visible = false;
        }
        onOpenItem() {
            if (this._eff) {
                this._isPlay = true;
                let cfg = ItemProxy.Ins.getCfg(ShenBinModel.Ins.openItem.id);
                let index = 0;
                if (cfg) {
                    switch (cfg.f_qua) {
                        case 3:
                            index = 1;
                            break;
                        case 4:
                            index = 2;
                            break;
                        case 5:
                            index = 3;
                            break;
                        case 8:
                            index = 4;
                            break;
                        case 9:
                            index = 5;
                            break;
                    }
                }
                this._eff.play(index, false, this, this.onPlayComplete);
                Laya.timer.once(350, this, this.onIconTween);
            }
        }
        onPlayComplete() {
            if (this._eff) {
                this._eff.play(0);
            }
        }
        onIconTween() {
            let xx;
            let yy;
            let flag;
            if (ShenBinModel.Ins.openItem.id == ECellType.ShenTie) {
                xx = this._ui.gold1.x - 20;
                yy = this._ui.gold1.y - 50;
                flag = false;
            }
            else if (ShenBinModel.Ins.openItem.id == ECellType.ShenBinCP) {
                xx = this._ui.gold2.x - 20;
                yy = this._ui.gold2.y - 50;
                flag = false;
            }
            else {
                let index = 0;
                for (let i = 0; i < ShenBinModel.Ins.dataList.length; i++) {
                    let cfg = ShenBinListProxy.Ins.getCfgById(ShenBinModel.Ins.dataList[i].artifactId);
                    if (cfg.f_itemId == ShenBinModel.Ins.openItem.id) {
                        index = i + 1;
                        break;
                    }
                }
                xx = this._ui["item" + index].x + 11;
                yy = this._ui["item" + index].y + 16;
                flag = true;
            }
            this._ui.icon.skin = IconUtils.getIconByCfgId(ShenBinModel.Ins.openItem.id);
            this._ui.icon.visible = true;
            Laya.Tween.to(this._ui.icon, { x: xx, y: yy }, 150, null, Laya.Handler.create(this, this.onTweenComplete, [flag]));
        }
        onTweenComplete(flag) {
            this._isPlay = false;
            this.iconInit();
            if (flag) {
                ShenBinModel.Ins.event(ShenBinModel.PLAY_EFFECT);
            }
        }
        onCheckHandler() {
            if (this._isAuto) {
                this._checkCtl.selected = true;
                this.setAuto(false);
                E.ViewMgr.ShowMidError("已关闭连续锻造");
            }
        }
        onCheckHandler1() {
            if (this._isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("已关闭连续锻造");
            }
            this.updataMoney();
        }
        onBtnClick() {
            if (this._isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("已关闭连续锻造");
                return;
            }
            if (this._isPlay) {
                return;
            }
            if (this._checkCtl.selected) {
                this.setAuto(true);
                return;
            }
            let req = new OpenArtifactBox_req;
            if (ShenBinFeastModel.Ins.isOpen) {
                if (this._checkCtl1.selected) {
                    req.flag = 1;
                }
                else {
                    req.flag = 0;
                }
            }
            else {
                req.flag = 0;
            }
            SocketMgr.Ins.SendMessageBin(req);
        }
        onLabClick() {
            E.ViewMgr.Open(EViewType.ShenBinLog);
        }
        onBtnLBClick() {
            E.ViewMgr.Open(EViewType.ShenBinLB);
        }
        onBtnTZClick() {
            E.ViewMgr.Open(EViewType.ShenBinTZView);
        }
        setAuto(v) {
            this._isAuto = v;
            if (v) {
                this.sendCmd();
            }
            else {
                Laya.timer.clear(this, this.sendCmd);
            }
        }
        sendCmd() {
            if (!this._isAuto) {
                Laya.timer.clear(this, this.sendCmd);
                return;
            }
            let cfg = ShenBinCfgProxy.Ins.List[0];
            if (ShenBinFeastModel.Ins.isOpen) {
                if (this._checkCtl1.selected) {
                    if (!MainModel.Ins.isItemEnoughSt(cfg.f_PreCost_Money, true)) {
                        if (this._isAuto) {
                            this.setAuto(false);
                        }
                        return;
                    }
                    let req = new OpenArtifactBox_req;
                    req.flag = 1;
                    SocketMgr.Ins.SendMessageBin(req);
                    Laya.timer.once(900, this, this.sendCmd);
                }
                else {
                    if (!MainModel.Ins.isItemEnoughSt(cfg.f_PreCost_discount, true)) {
                        if (this._isAuto) {
                            this.setAuto(false);
                        }
                        return;
                    }
                    let req = new OpenArtifactBox_req;
                    req.flag = 0;
                    SocketMgr.Ins.SendMessageBin(req);
                    Laya.timer.once(900, this, this.sendCmd);
                }
            }
            else {
                if (!MainModel.Ins.isItemEnoughSt(cfg.f_PreCost, true)) {
                    if (this._isAuto) {
                        this.setAuto(false);
                    }
                    return;
                }
                let req = new OpenArtifactBox_req;
                req.flag = 0;
                SocketMgr.Ins.SendMessageBin(req);
                Laya.timer.once(900, this, this.sendCmd);
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("ShenBinTitle", "ShenBinDec");
        }
        updataView() {
            for (let i = 0; i < ShenBinModel.Ins.dataList.length; i++) {
                this["_shenBinCtl" + (i + 1)].setData(ShenBinModel.Ins.dataList[i]);
            }
            this.onupdataAttr();
        }
        onupdataAttr() {
            let arr = [{ qua: 1, lv: 0 }, { qua: 2, lv: 0 }, { qua: 3, lv: 0 }, { qua: 4, lv: 0 }];
            for (let i = 0; i < ShenBinModel.Ins.dataList.length; i++) {
                let cfg = ShenBinListProxy.Ins.getCfgById(ShenBinModel.Ins.dataList[i].artifactId);
                for (let j = 0; j < arr.length; j++) {
                    if (cfg.f_ArtifactQua == arr[j].qua) {
                        arr[j].lv += ShenBinModel.Ins.dataList[i].level;
                    }
                }
            }
            this._ui.list_attr.array = arr;
        }
    }

    exports.ShenBinView = ShenBinView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new ShenBinModule();
            }
            return this._ins;
        }
        onInitCallBack() { }
        initMsg() {
            this.Reg(new ShenBinView(EViewType.ShenBin));
            this.Reg(new ShenBinLvView(EViewType.ShenBinLv));
            this.Reg(new ShenBinLogView(EViewType.ShenBinLog));
            this.Reg(new ShenBinLBView(EViewType.ShenBinLB));
            this.Reg(new ShenBinTZView(EViewType.ShenBinTZView));
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            E.MsgMgr.AddMsg(MSGID.ArtifactList, this.ArtifactList, this);
            E.MsgMgr.AddMsg(MSGID.OpenArtifactBox, this.OpenArtifactBox, this);
            E.MsgMgr.AddMsg(MSGID.ArtifactUpdate, this.ArtifactUpdate, this);
            E.MsgMgr.AddMsg(MSGID.ArtifactLogList, this.ArtifactLogList, this);
            E.MsgMgr.AddMsg(MSGID.ArtifactPackList, this.ArtifactPackList, this);
            E.MsgMgr.AddMsg(MSGID.ArtifactPackUpdate, this.ArtifactPackUpdate, this);
            E.MsgMgr.AddMsg(MSGID.ArtifactSuitInit, this.ArtifactSuitInit, this);
            E.MsgMgr.AddMsg(MSGID.ArtifactSuitUpdate, this.ArtifactSuitUpdate, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (ShenBinModel.Ins.isDotMain()) {
                MainModel.Ins.funcSetRed(EFuncDef.Confraternity, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.Confraternity, false);
            }
        }
        ArtifactList(value) {
            ShenBinModel.Ins.dataList = value.datalist;
        }
        OpenArtifactBox(value) {
            ShenBinModel.Ins.openItem = value.item;
            ShenBinModel.Ins.event(ShenBinModel.OPEN_ITEM);
            this.onMainViewInit();
        }
        ArtifactUpdate(value) {
            for (let i = 0; i < value.datalist.length; i++) {
                let index = ShenBinModel.Ins.dataList.findIndex(ele => ele.artifactId == value.datalist[i].artifactId);
                if (index != -1) {
                    ShenBinModel.Ins.dataList[index] = value.datalist[i];
                }
            }
            ShenBinModel.Ins.event(ShenBinModel.UPDATA_SHENBIN);
            this.onMainViewInit();
        }
        ArtifactLogList(value) {
            ShenBinModel.Ins.dataLogList = value.datalist;
            ShenBinModel.Ins.event(ShenBinModel.UPDATA_LOGVIEW);
        }
        ArtifactPackList(value) {
            ShenBinModel.Ins.dataPackList = value.datalist;
            this.onMainViewInit();
        }
        ArtifactPackUpdate(value) {
            for (let i = 0; i < value.datalist.length; i++) {
                let index = ShenBinModel.Ins.dataPackList.findIndex(ele => ele.id == value.datalist[i].id);
                if (index != -1) {
                    ShenBinModel.Ins.dataPackList[index] = value.datalist[i];
                }
            }
            ShenBinModel.Ins.event(ShenBinModel.UPDATA_PACK);
            this.onMainViewInit();
        }
        ArtifactSuitInit(value) {
            ShenBinModel.Ins.tzList = value.dataList;
        }
        ArtifactSuitUpdate(value) {
            for (let i = 0; i < value.dataList.length; i++) {
                let index = ShenBinModel.Ins.tzList.findIndex(ele => ele.fid == value.dataList[i].fid);
                if (index != -1) {
                    ShenBinModel.Ins.tzList[index] = value.dataList[i];
                }
            }
            ShenBinModel.Ins.event(ShenBinModel.UPDATA_TZ);
            this.onMainViewInit();
        }
    }

    exports.ShenBinModule = ShenBinModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SheZhiModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SheZhiModel();
            }
            return this._ins;
        }
        setCopy(value) {
            let input = Laya.Browser.document.createElement("input");
            input.value = value;
            Laya.Browser.document.body.appendChild(input);
            input.select();
            input.setSelectionRange(0, input.value.length);
            Laya.Browser.document.execCommand('Copy');
            Laya.Browser.document.body.removeChild(input);
        }
        reload() {
            E.ViewMgr.ShowMidError("修复成功");
            Laya.Browser.window.location.reload();
        }
    }
    SheZhiModel.UPDATA_VIEW = "UPDATA_VIEW";
    SheZhiModel.UPDATA_VIEW_ITEM = "UPDATA_VIEW_ITEM";
    SheZhiModel.UPDATA_MAIN_VIEW = "UPDATA_MAIN_VIEW";

    exports.SheZhiModel = SheZhiModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SheZhiDingYueProxy extends BaseCfg {
        constructor() {
            super();
            this._arr = {};
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let type = this.List[i].f_type;
                if (!this._arr[type]) {
                    this._arr[type] = [];
                }
                this._arr[type].push(this.List[i]);
                this._map[this.List[i].f_viewType] = this.List[i];
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new SheZhiDingYueProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Setting_Subscribe";
        }
        getListByType(type) {
            return this._arr[type];
        }
        getCfgByViewType(viewType) {
            return this._map[viewType];
        }
    }

    exports.SheZhiDingYueProxy = SheZhiDingYueProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DingYueItem extends ui.views.shezhi.ui_dingyueItemUI {
        constructor() {
            super();
            this.checkCtl = new CheckBox2Ctl(this.check);
            this.checkCtl.selectHander = new Laya.Handler(this, this.onSelectHander);
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemoved);
        }
        onAdd() {
        }
        onRemoved() {
        }
        onSelectHander() {
            let type = 0;
            if (this.checkCtl.selected) {
                E.sdk.getSubscribe([this._data.f_modelID]);
                type = 1;
            }
            let req = new DingYueSelectReq_req;
            req.id = this._data.f_id;
            req.type = type;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.lab.text = value.f_attribute;
            let vo = SheZhiModel.Ins.dingyueList.find(item => item.id == value.f_id);
            if (vo) {
                if (vo.type) {
                    this.checkCtl.selected = true;
                }
                else {
                    this.checkCtl.selected = false;
                }
            }
        }
    }

    exports.DingYueItem = DingYueItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DingYueView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas('shezhi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.shezhi.ui_dingyueUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = DingYueItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
            }
        }
        onInit() {
            this.upDataView();
        }
        onExit() {
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        upDataView() {
            this._ui.list.array = SheZhiDingYueProxy.Ins.getListByType(initConfig.platform);
        }
    }

    exports.DingYueView = DingYueView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class QuFuItem extends ui.views.shezhi.ui_qufuItemUI {
        constructor() {
            super();
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemoved);
        }
        onAdd() {
        }
        onRemoved() {
        }
        setData() {
        }
    }

    exports.QuFuItem = QuFuItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class QuFuItem1 extends ui.views.shezhi.ui_qufuItem1UI {
        constructor() {
            super();
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemoved);
        }
        onAdd() {
        }
        onRemoved() {
        }
        setData() {
        }
    }

    exports.QuFuItem1 = QuFuItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class QuFuUtils {
        static updateLabe(item, data) {
            let isNamingCharge = !FuncProxy.Ins.isClose(EFuncDef.NamingCharge);
            if (isNamingCharge) {
                let lastName = "";
                if (!StringUtil.IsNullOrEmpty(data.naming)) {
                    lastName += "-" + data.naming;
                }
                item.lab_name.text = "";
                item.lab_sname.text = data.serverName + lastName;
                if (data.roleLevel) {
                    item.lab_lv.text = "lv:" + data.roleLevel;
                }
                else {
                    item.lab_lv.text = "";
                }
            }
            else {
                item.lab_sname.text = data.serverName;
                if (data.roleLevel) {
                    item.lab_name.text = data.roleName;
                    item.lab_lv.text = "lv:" + data.roleLevel;
                }
                else {
                    item.lab_name.text = "";
                    item.lab_lv.text = "";
                }
            }
            if (data.isNew) {
                item.img_new.visible = true;
            }
            else {
                item.img_new.visible = false;
            }
            switch (data.serverState) {
                case 1:
                    item.img.skin = "remote/loginnew1/bm.png";
                    break;
                case 2:
                    item.img.skin = "remote/loginnew1/ct.png";
                    break;
                case 3:
                    item.img.skin = "remote/loginnew1/wh.png";
                    break;
            }
        }
    }

    exports.QuFuUtils = QuFuUtils;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class QuFuView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas('shezhi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.shezhi.ui_qufuUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = QuFuItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list.selectEnable = true;
                this._ui.list.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this._ui.list1.itemRender = QuFuItem1;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender1);
                this._ui.list1.selectEnable = true;
                this._ui.list1.selectHandler = new Laya.Handler(this, this.onSelectHandler1);
            }
        }
        onInit() {
            SheZhiModel.Ins.on(SheZhiModel.UPDATA_VIEW, this, this.upDataView);
            SheZhiModel.Ins.on(SheZhiModel.UPDATA_VIEW_ITEM, this, this.upDataViewItem);
            let req = new ServerNumReq_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            this._ui.list.selectedIndex = -1;
            this._ui.list1.selectedIndex = -1;
            SheZhiModel.Ins.off(SheZhiModel.UPDATA_VIEW, this, this.upDataView);
            SheZhiModel.Ins.off(SheZhiModel.UPDATA_VIEW_ITEM, this, this.upDataViewItem);
        }
        onItemRender1(item, index) {
            let data = item.dataSource;
            QuFuUtils.updateLabe(item, data);
            if (data.serverID == MainModel.Ins.mRoleData.serverId) {
                item.img_sel.visible = true;
            }
            else {
                item.img_sel.visible = false;
            }
        }
        onSelectHandler1(index) {
            if (index == -1) {
                return;
            }
            if (this._ui.list1.array[index].serverID != MainModel.Ins.mRoleData.serverId) {
                MainModel.Ins.queryMsg("是否切换服务器?", 0, 0, 0, new Laya.Handler(this, this.onQHHandler, [this._ui.list1.array[index].serverID]));
            }
            this._ui.list1.selectedIndex = -1;
        }
        onQHHandler(serverID) {
            let req = new SelectServerIDReq_req;
            req.serverID = serverID;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onItemRender(item, index) {
            let data = item.dataSource;
            item.lab_name.text = data.name;
            if (data.isSelect) {
                item.img.visible = true;
            }
            else {
                item.img.visible = false;
            }
        }
        onSelectHandler(index) {
            if (index == -1) {
                return;
            }
            for (let i = 0; i < this._ui.list.array.length; i++) {
                if (index == i) {
                    this._ui.list.array[i].isSelect = true;
                }
                else {
                    this._ui.list.array[i].isSelect = false;
                }
            }
            this._ui.list.refresh();
            let req = new ServerListReq_req;
            req.serverZuID = this._ui.list.array[index].id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        upDataView() {
            let arr = [];
            arr.push({ name: "推荐", isSelect: false, id: 10000 });
            arr.push({ name: "我的角色", isSelect: false, id: 20000 });
            for (let i = SheZhiModel.Ins.serverZu; i > 0; i--) {
                let st = (i * 20 - 20 + 1) + "-" + i * 20 + "服";
                arr.push({ name: st, isSelect: false, id: i });
            }
            this._ui.list.array = arr;
            this._ui.list.selectedIndex = 0;
        }
        upDataViewItem() {
            this._ui.list1.array = SheZhiModel.Ins.serverItems;
        }
    }

    exports.QuFuView = QuFuView;

    return exports;

}(window));
(function (exports) {
	'use strict';

	let gameTT = window["tt"];
	let ttSygame = window['Sygame'];

	exports.gameTT = gameTT;
	exports.ttSygame = ttSygame;

	return exports;

}(window));
(function (exports) {
    'use strict';

    function maskImgURL() {
        return initConfig.debug ? "./mask_alpha.png" : "./empty.png";
    }
    class BaseButton {
        constructor() {
            this._isShow = false;
        }
        hide() {
            this._isShow = false;
            if (this.btnAuthorize) {
                if (typeof this.btnAuthorize.hide == "function") {
                    this.btnAuthorize.hide();
                }
            }
        }
        show() {
            this._isShow = true;
            this.btnAuthorize && this.btnAuthorize.show();
        }
        destroy() {
            this._isShow = false;
            this.btnAuthorize && this.btnAuthorize.destroy();
        }
    }
    class DevButton extends BaseButton {
        constructor(o, that, func) {
            super();
            this.that = that;
            this.func = func;
            let btn = new Laya.Sprite();
            btn.width = o.w;
            btn.height = o.h;
            btn.x = o.x;
            btn.y = o.y;
            btn.hitArea = new Laya.Rectangle(0, 0, o.w, o.h);
            btn.on(Laya.Event.CLICK, this, this.onClickHandler);
            DebugUtil.draw(btn, "#0000ff", null, null, null, null, true);
            Laya.stage.addChild(btn);
            this.btnAuthorize = btn;
        }
        onClickHandler() {
            if (this.func) {
                this.func.call(this.that);
            }
            LogSys.Log("占位的空功能");
        }
        show() {
            this.btnAuthorize.visible = true;
        }
        hide() {
            this.btnAuthorize.visible = false;
        }
    }
    class WxSdkButton extends BaseButton {
        constructor(o, that, func) {
            super();
            let btnAuthorize = wx.createUserInfoButton({
                type: "text",
                text: initConfig.debug ? "微信按钮" : "",
                style: {
                    left: o.x,
                    top: o.y,
                    width: o.w,
                    height: o.h,
                    lineHeight: 0,
                    backgroundColor: "",
                    color: "#ff0000",
                    textAlign: 'center',
                    fontSize: 16,
                    borderRadius: 4,
                },
            });
            btnAuthorize.onTap((res) => {
                if (res) {
                    func.call(that, res.userInfo);
                }
            });
            this.btnAuthorize = btnAuthorize;
        }
    }
    class DouYinButton extends BaseButton {
        constructor(o, that, func) {
            super();
            this.that = that;
            this.func = func;
            let curThat = this;
            let t = 1;
            let params = {
                type: "image",
                image: maskImgURL(),
                style: {
                    left: o.x * t,
                    top: o.y * t,
                    width: o.w * t,
                    height: o.h * t,
                    borderColor: "#ffffff00",
                    backgroundColor: "#ffffff00",
                    borderRadius: 0,
                    borderWidth: 0
                },
                success(button) {
                    function button_tap(res) {
                        curThat.clickRun();
                    }
                    if (typeof button.onTap == "function") {
                        button.onTap(button_tap);
                    }
                    curThat.btnAuthorize = button;
                    curThat.updateView();
                },
                fail(res) {
                    console.log("创建失败", res.errMsg);
                },
            };
            this.createBtn(params);
        }
        createBtn(params) {
            gameTT.createInteractiveButton(params);
        }
        clickRun() {
        }
        updateView() {
            if (this._isShow) {
                this.show();
            }
            else {
                this.hide();
            }
        }
    }
    class DouYinUserInfo extends DouYinButton {
        clickRun() {
            let curThat = this;
            gameTT.getUserInfo({
                withCredentials: true,
                success(res) {
                    if (res) {
                        curThat.func.call(curThat.that, res.userInfo);
                    }
                },
                fail(res) {
                    console.log(`getUserInfo 调用失败`);
                },
            });
        }
    }
    class SdkButtonMgr {
        static createUserInfoButton(o, that, func) {
            let platform = E.get_SDK_platform();
            switch (platform) {
                case PlatformConfig.WeiXin:
                    return new WxSdkButton(o, that, func);
                case PlatformConfig.Dev:
                    return new DevButton(o, that, func);
                case PlatformConfig.DOU_YIN:
                    return new DouYinUserInfo(o, that, func);
                default:
                    return new DevButton(o, that, func);
            }
        }
        static createClientButton(o, that, func) {
            let platform = E.get_SDK_platform();
            switch (platform) {
                case PlatformConfig.DOU_YIN:
                    return new TTDouYinClientButton(o, that, func);
                default:
                    return new DevButton(o);
            }
        }
    }
    class TTDouYinClientButton extends DouYinButton {
        createBtn(params) {
            this.btnAuthorize = gameTT.createContactButton(params);
        }
    }

    exports.SdkButtonMgr = SdkButtonMgr;
    exports.TTDouYinClientButton = TTDouYinClientButton;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function getPosSize$2(spr) {
        let wx = E.wx;
        let w, h;
        if (wx) {
            let info = wx.getSystemInfoSync();
            w = info.screenWidth;
            h = info.screenHeight;
        }
        else {
            w = Laya.stage.width;
            h = Laya.stage.height;
        }
        let percent = w / Laya.stage.width;
        let rw = spr.width * percent;
        let rh = spr.height * percent;
        let pos = new Laya.Point();
        if (spr.parent) {
            pos = spr.parent.localToGlobal(new Laya.Point(spr.x, spr.y));
        }
        let obj = {};
        obj.w = rw;
        obj.h = rh;
        obj.x = pos.x / Laya.stage.width * w;
        obj.y = pos.y / Laya.stage.height * h;
        return obj;
    }
    class SheZhiView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this._canShowBtn = false;
        }
        onAddLoadRes() {
            this.addAtlas('shezhi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.shezhi.ui_shezhiUI;
                this.bindClose(this._ui.close1);
                this._ui.lab_copy.on(Laya.Event.CLICK, this, this.onLabCopyClick);
                this._checkCtl1 = new CheckBox2Ctl(this._ui.check1);
                this._checkCtl1.selectHander = new Laya.Handler(this, this.onSelectHandler1);
                this._checkCtl2 = new CheckBox2Ctl(this._ui.check2);
                this._checkCtl2.selectHander = new Laya.Handler(this, this.onSelectHandler2);
                this._checkCtl3 = new CheckBox2Ctl(this._ui.check);
                this._checkCtl3.selectHander = new Laya.Handler(this, this.onSelectHandler3);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_jm, new Laya.Handler(this, this.onBtnJMClick)), ButtonCtl.Create(this._ui.btn_dh, new Laya.Handler(this, this.onBtnDHClick)), ButtonCtl.Create(this._ui.btn_ys, new Laya.Handler(this, this.onBtnYSClick)), ButtonCtl.Create(this._ui.btn_gg, new Laya.Handler(this, this.onBtnGGClick)), ButtonCtl.Create(this._ui.btn_xx, new Laya.Handler(this, this.onBtnXXClick)), ButtonCtl.Create(this._ui.btn_qh, new Laya.Handler(this, this.onBtnQHClick)));
                let settingBtn = ButtonCtl.Create(this._ui.btn_qw, new Laya.Handler(this, this.onBtnQWClick));
                settingBtn.visible = false;
                this._canShowBtn = true;
                switch (initConfig.platform) {
                    case PlatformConfig.DOU_YIN:
                        this._ui.desc_tf.text = E.getLang("shezhi02");
                        this._ui.appimg.skin = `remote/main/main/douyin.png`;
                        break;
                    case PlatformConfig.WeiXin:
                        this._ui.desc_tf.text = E.getLang("shezhi01");
                        this._ui.appimg.skin = `remote/main/main/wx.png`;
                        break;
                    default:
                        this._canShowBtn = false;
                        break;
                }
                this._ui.auth_btn.visible = false;
            }
        }
        initConfig() {
            RedUpdateUtils.refreshByConfig(this._checkCtl1, RedEnum.MUISC_BG, true);
            RedUpdateUtils.refreshByConfig(this._checkCtl2, RedEnum.MUISC_EFFECT, true);
        }
        onBtnQWClick() {
            E.ViewMgr.Open(EViewType.BoxAnimSet);
        }
        updateConfig() {
            let l1 = [];
            RedUpdateUtils.push(l1, RedEnum.MUISC_BG, this._checkCtl1);
            RedUpdateUtils.push(l1, RedEnum.MUISC_EFFECT, this._checkCtl2);
            RedUpdateModel.Ins.saveArr(l1);
        }
        onInit() {
            this.initConfig();
            SheZhiModel.Ins.on(SheZhiModel.UPDATA_MAIN_VIEW, this, this.updataView);
            let req = new DingYueReq_req();
            SocketMgr.Ins.SendMessageBin(req);
            MainModel.Ins.on(MainEvent.UPDATE_NEW_PLAYER, this, this.onRefreshBoxSetting);
            this.onRefreshBoxSetting();
            MainModel.Ins.on(MainEvent.AuthBtnChange, this, this.onAuthBtnChange);
            MainModel.Ins.on(MainEvent.UpdateAvatarNickName, this, this.updataView);
        }
        onTapHandler(_userinfo) {
            if (_userinfo) {
                let req = new WxAuthInfo_req();
                SocketMgr.Ins.SendMessageBin(req);
                let wxReq = new wxPlayerInfo_req();
                wxReq.nickName = _userinfo.nickName;
                wxReq.portrait = _userinfo.avatarUrl;
                SocketMgr.Ins.SendMessageBin(wxReq);
                MainModel.Ins.mRoleData.mPlayer.NickName = _userinfo.nickName;
                MainModel.Ins.mRoleData.mPlayer.HeadUrl = _userinfo.avatarUrl;
                MainModel.Ins.event(MainEvent.UpdateAvatarNickName);
            }
            else {
                console.log('btnAuthorize err');
            }
        }
        wxAuthHandler() {
            let o = getPosSize$2(this._ui.auth_btn);
            this.btnAuthorize = SdkButtonMgr.createUserInfoButton(o, this, this.onTapHandler);
        }
        switchWxAuthBtn(show) {
            if (this.btnAuthorize) {
                if (show) {
                    this.btnAuthorize.show();
                }
                else {
                    this.btnAuthorize.hide();
                }
            }
        }
        onShow() {
            super.onShow();
            this.wxAuthHandler();
            this.onAuthBtnChange();
        }
        onAuthBtnChange() {
            if (MainModel.Ins.authBtnShow) {
                this.authVisible = true;
                this.switchWxAuthBtn(true);
            }
            else {
                this.authVisible = false;
                this.switchWxAuthBtn(false);
            }
        }
        set authVisible(v) {
            if (this._canShowBtn) {
                this._ui.auth_btn.visible = v;
            }
            else {
                this._ui.auth_btn.visible = false;
            }
        }
        onRefreshBoxSetting() {
            if (MainModel.Ins.boxSettingRed) {
                this._ui.qw_red.visible = true;
            }
            else {
                this._ui.qw_red.visible = false;
            }
        }
        onExit() {
            SheZhiModel.Ins.off(SheZhiModel.UPDATA_MAIN_VIEW, this, this.updataView);
            MainModel.Ins.off(MainEvent.UPDATE_NEW_PLAYER, this, this.onRefreshBoxSetting);
            MainModel.Ins.off(MainEvent.AuthBtnChange, this, this.onAuthBtnChange);
            MainModel.Ins.off(MainEvent.UpdateAvatarNickName, this, this.updataView);
            if (this.btnAuthorize) {
                this.btnAuthorize.destroy();
            }
        }
        onBtnJMClick() {
            SheZhiModel.Ins.reload();
        }
        onBtnDHClick() {
            E.ViewMgr.Open(EViewType.ExchangeCode);
        }
        onBtnYSClick() {
            E.ViewMgr.Open(EViewType.YinSiView);
        }
        onBtnGGClick() {
            MainModel.Ins.openPopNotice(MainModel.Ins.localNoticeList);
        }
        onBtnXXClick() {
            E.ViewMgr.Open(EViewType.DingYueView);
        }
        onBtnQHClick() {
            E.ViewMgr.Open(EViewType.QuFuView);
        }
        onLabCopyClick() {
            E.sdk.setCopy(this._ui.lab_id.text);
        }
        onSelectHandler1() {
            if (this._checkCtl1.selected) {
                E.AudioMgr.SetMusicMute(false);
            }
            else {
                E.AudioMgr.SetMusicMute(true);
            }
            this.updateConfig();
        }
        onSelectHandler2() {
            if (this._checkCtl2.selected) {
                E.AudioMgr.SetSoundMute(false);
            }
            else {
                E.AudioMgr.SetSoundMute(true);
            }
            this.updateConfig();
        }
        onSelectHandler3() {
            let type = 0;
            if (this._checkCtl3.selected) ;
            let req = new DingYueSelectReq_req;
            req.id = 0;
            req.type = type;
            SocketMgr.Ins.SendMessageBin(req);
        }
        get showVal() {
            let s = MainModel.Ins.ver;
            let maxWord = 8;
            if (s.length > maxWord) {
                return s.substr(s.length - maxWord, maxWord);
            }
            return s;
        }
        updataView() {
            MainModel.Ins.setTTHead(this._ui.icon, MainModel.Ins.mRoleData.headUrl);
            this._ui.Lvtf.text = "Lv." + MainModel.Ins.mRoleData.lv;
            this._ui.lab_name.text = MainModel.Ins.mRoleData.getName();
            this._ui.lab_id.text = MainModel.Ins.mRoleData.AccountId + "";
            this._ui.lab_sid.text = MainModel.Ins.mRoleData.serverName;
            this._ui.lab_s.text = MainModel.Ins.ser_ver;
            let scene = E.sdk.scene;
            let ver = (MainModel.Ins.configIsSame ? "s" : "d") + scene + this.showVal;
            this._ui.lab_c.text = ver;
            this._ui.img_ch.skin = MainModel.Ins.getTitleImg();
            if (SheZhiModel.Ins.dyType) {
                this._checkCtl3.selected = true;
            }
            else {
                this._checkCtl3.selected = false;
            }
        }
    }

    exports.SheZhiView = SheZhiView;
    exports.getPosSize = getPosSize$2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    let TxtSkinKey = "TxtNode";
    class TxtNode extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = TxtSkinKey;
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ui.views.shezhi.ui_yingsi_txtUI);
            let vo = this.list[index];
            _skin.lab.text = vo;
            DebugUtil$1.draw(_skin, "#ff0000", _skin.width, _skin.lab.textField.height);
            _skin.y = this.y;
            return _skin;
        }
    }
    class YinSiView extends ViewBase {
        constructor() {
            super(...arguments);
            this.checkGuide = false;
            this.mMask = true;
            this.autoFree = true;
        }
        getTxtHeight(str) {
            let sign = TxtSkinKey;
            let _skin = Laya.Pool.getItemByClass(sign, ui.views.shezhi.ui_yingsi_txtUI);
            _skin.lab.text = str;
            Laya.Pool.recover(sign, _skin);
            return _skin.lab.textField.height;
        }
        onAddLoadRes() {
            this.addAtlas('shezhi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.shezhi.ui_yingsiUI;
                this.bindClose(this._ui.close1);
                this._panelCtl = new ScrollPanelControl();
                this._panelCtl.init(this._ui.panel);
                this._ui.lab.text = "";
                const tabsSkin = [this._ui.tab1, this._ui.tab2];
                this.tabList = ["用户协议", "隐私政策"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
            }
        }
        onInit() {
            this.tabsCtl.forceSelectIndex(0);
        }
        onExit() {
            this._panelCtl.clear();
        }
        onTabSelectHandler(v) {
            this._ui.panel.vScrollBar.stopScroll();
            this._ui.panel.scrollTo(0, 0);
            switch (v) {
                case 0:
                    this._ui.lab_title.text = "游戏使用许可及服务协议";
                    Laya.loader.load("o/yhxy/yhxy.txt", Laya.Handler.create(this, this.onComplete), null, Laya.Loader.TEXT);
                    break;
                case 1:
                    this._ui.lab_title.text = "隐私协议";
                    Laya.loader.load("o/yhxy/ysxy.txt", Laya.Handler.create(this, this.onComplete1), null, Laya.Loader.TEXT);
                    break;
            }
        }
        onComplete() {
            let l = LoadUtil.GetTxt("o/yhxy/yhxy.txt").split("\n");
            this.renderTxtList(l);
        }
        renderTxtList(l) {
            this._panelCtl.clear();
            for (let i = 0; i < l.length; i++) {
                let str = l[i];
                this._panelCtl.split([str], TxtNode, this.getTxtHeight(str));
            }
            this._panelCtl.end();
        }
        onComplete1() {
            let l = LoadUtil.GetTxt("o/yhxy/ysxy.txt").split("\n");
            this.renderTxtList(l);
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.txt.text = this.tabList[index];
            if (sel) {
                skin.img2.visible = false;
                skin.img1.visible = true;
            }
            else {
                skin.img2.visible = true;
                skin.img1.visible = false;
            }
        }
    }

    exports.YinSiView = YinSiView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SheZhiModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new SheZhiModule();
            }
            return this._ins;
        }
        onInitCallBack() { }
        initMsg() {
            this.Reg(new SheZhiView(EViewType.SheZhiView));
            this.Reg(new YinSiView(EViewType.YinSiView, ELayerType.subFrameLayer));
            this.Reg(new DingYueView(EViewType.DingYueView));
            this.Reg(new QuFuView(EViewType.QuFuView));
            E.MsgMgr.AddMsg(MSGID.ServerNumRevc, this.ServerNumRevc, this);
            E.MsgMgr.AddMsg(MSGID.ServerListRevc, this.ServerListRevc, this);
            E.MsgMgr.AddMsg(MSGID.SelectServerIDRevc, this.SelectServerIDRevc, this);
            E.MsgMgr.AddMsg(MSGID.DingYueRevc, this.DingYueRevc, this);
            E.MsgMgr.AddMsg(MSGID.DingYueSelectRevc, this.DingYueSelectRevc, this);
        }
        ServerNumRevc(value) {
            SheZhiModel.Ins.serverZu = value.serverZu;
            SheZhiModel.Ins.event(SheZhiModel.UPDATA_VIEW);
        }
        ServerListRevc(value) {
            SheZhiModel.Ins.serverItems = value.serverItems;
            SheZhiModel.Ins.event(SheZhiModel.UPDATA_VIEW_ITEM);
        }
        SelectServerIDRevc(value) {
            if (value.ret == 1) {
                SocketMgr.Ins.setServerType(SERVERTYPE.SELECTTYPE);
                SocketMgr.Ins.CloseSocket();
            }
        }
        DingYueRevc(value) {
            SheZhiModel.Ins.dyType = value.type;
            SheZhiModel.Ins.dingyueList = value.dyList;
            SheZhiModel.Ins.event(SheZhiModel.UPDATA_MAIN_VIEW);
        }
        DingYueSelectRevc(value) {
            let vo = SheZhiModel.Ins.dingyueList.find(item => item.id == value.id);
            if (vo) {
                vo.type = value.type;
            }
        }
    }

    exports.SheZhiModule = SheZhiModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SFStageRewardsProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SFStageRewardsProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Event_2024Spring_StageRewards";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_id == id);
        }
    }
    class SFSFireWorkProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SFSFireWorkProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Event_2024Spring_FireWork";
        }
        getCfgByTpye(type) {
            return this.List.find(item => item.f_FireWorkType == type);
        }
        getCfgByID(id) {
            return this.List.find(item => item.f_FireworkID == id);
        }
    }
    class SFConfigProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SFConfigProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Event_2024Spring_Config";
        }
    }
    class SFRankProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SFRankProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Event_2024Spring_Rank";
        }
    }
    class SFTaskProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SFTaskProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Event_2024Spring_Task";
        }
    }
    class SFPackProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SFPackProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Event_2024Spring_Pack";
        }
    }
    class SFShopProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SFShopProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Event_2024Spring_Shop";
        }
    }

    exports.SFConfigProxy = SFConfigProxy;
    exports.SFPackProxy = SFPackProxy;
    exports.SFRankProxy = SFRankProxy;
    exports.SFSFireWorkProxy = SFSFireWorkProxy;
    exports.SFShopProxy = SFShopProxy;
    exports.SFStageRewardsProxy = SFStageRewardsProxy;
    exports.SFTaskProxy = SFTaskProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SpringFestivalModel();
            }
            return this._ins;
        }
        getIsEnroll(bo = true) {
            if (bo) {
                if (TimeUtil.serverTime > this.endunix) {
                    E.ViewMgr.ShowMidError("活动已结束");
                    return false;
                }
            }
            if (SpringFestivalModel.Ins.isEnroll == 0) {
                E.ViewMgr.ShowMidError("请先报名");
                return false;
            }
            return true;
        }
        isRedTip() {
            if (this.isEnrollRedTip() || this.isWWRedTip() || this.isPackRedTip() ||
                this.isTaskRedTip() || this.isRankRedTip()) {
                return true;
            }
            return false;
        }
        isEnrollRedTip() {
            if (TimeUtil.serverTime > this.endunix)
                return false;
            if (this.allianceId && this.canJoin && this.isEnroll == 0) {
                return true;
            }
            return false;
        }
        isWWRedTip() {
            if (!this.rewardList)
                return false;
            if (this.isEnroll == 0)
                return false;
            if (TimeUtil.serverTime > this.endunix)
                return false;
            for (let i = 0; i < this.rewardList.length; i++) {
                if (this.rewardList[i].state == 2) {
                    return true;
                }
            }
            return false;
        }
        isPackRedTip() {
            if (!this.packList)
                return false;
            if (this.isEnroll == 0)
                return false;
            if (TimeUtil.serverTime > this.endunix)
                return false;
            for (let i = 0; i < this.packList.length; i++) {
                let cfg = SFPackProxy.Ins.GetDataById(this.packList[i].fid);
                if (cfg.f_PackType == 1) {
                    if (this.packList[i].count < cfg.f_PackBuyLimit) {
                        return true;
                    }
                }
            }
            return false;
        }
        isTaskRedTip() {
            if (!this.taskList)
                return false;
            if (this.isEnroll == 0)
                return false;
            if (TimeUtil.serverTime > this.endunix)
                return false;
            for (let i = 0; i < this.taskList.length; i++) {
                if (this.taskList[i].state == 1) {
                    return true;
                }
            }
            return false;
        }
        isRankRedTip() {
            if (this.isEnroll == 0)
                return false;
            if (this.state == 2) {
                return true;
            }
            return false;
        }
    }
    SpringFestivalModel.UPDATA_VIEW = "UPDATA_VIEW";
    SpringFestivalModel.UPDATA_VIEW_TASK = "UPDATA_VIEW_TASK";
    SpringFestivalModel.UPDATA_VIEW_PACK = "UPDATA_VIEW_PACK";
    SpringFestivalModel.UPDATA_VIEW_REWARD = "UPDATA_VIEW_REWARD";
    SpringFestivalModel.UPDATA_VIEW_RANK = "UPDATA_VIEW_RANK";
    SpringFestivalModel.UPDATA_VIEW_RANK_REWARD = "UPDATA_VIEW_RANK_REWARD";
    SpringFestivalModel.UPDATA_VIEW_SHOP = "UPDATA_VIEW_SHOP";
    SpringFestivalModel.UPDATA_VIEW_prestige = "UPDATA_VIEW_prestige";
    SpringFestivalModel.UPDATA_VIEW_YH = "UPDATA_VIEW_YH";

    exports.SpringFestivalModel = SpringFestivalModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalAwRankView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("springFestival.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.springFestival.ui_springFestivalRankAwViewUI;
                this.bindClose(this._ui.close1);
                this._timeCtl = new TimeCtl(this._ui.time1);
                this.btnList.push(ButtonCtl.Create(this._ui.lingquBtn, new Laya.Handler(this, this.onBtnClick)));
                this._ui.list.itemRender = ui.views.springFestival.ui_springFestivalRankAwItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onRenderHandler(item) {
            let cfg = item.dataSource;
            let arr = cfg.f_Position.split("|");
            let rank = parseInt(arr[0]);
            let rank1 = parseInt(arr[1]);
            if (rank == rank1) {
                item.rankTf.text = rank + "";
            }
            else {
                item.rankTf.text = rank + "-" + rank1;
            }
            ItemViewFactory.renderItemSlots(item.rewardList, cfg.f_Rewarditem, 10, 0.85, "right");
        }
        onBtnClick() {
            let req = new SpringFestivalAllianceRankReward_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onInit() {
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_RANK_REWARD, this, this.onUpdataView);
            this.updataTime();
            this._ui.list.array = SFRankProxy.Ins.List;
            this.onUpdataView();
        }
        onExit() {
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_RANK_REWARD, this, this.onUpdataView);
            this._timeCtl.dispose();
        }
        onUpdataView() {
            if (SpringFestivalModel.Ins.rank) {
                this._ui.lab.text = SpringFestivalModel.Ins.rank + "";
            }
            else {
                this._ui.lab.text = "未上榜";
            }
            DotManager.removeDot(this._ui.lingquBtn);
            if (SpringFestivalModel.Ins.state == 0) {
                this._ui.lingquBtn.disabled = true;
                this._ui.tf4.text = "领取";
            }
            else if (SpringFestivalModel.Ins.state == 1) {
                this._ui.lingquBtn.disabled = true;
                this._ui.tf4.text = "已领取";
            }
            else if (SpringFestivalModel.Ins.state == 2) {
                this._ui.lingquBtn.disabled = false;
                this._ui.tf4.text = "领取";
                DotManager.addDot(this._ui.lingquBtn);
            }
        }
        updataTime() {
            let time = SpringFestivalModel.Ins.rewardEndunix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("已结束");
        }
    }

    exports.SpringFestivalAwRankView = SpringFestivalAwRankView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalRankItem extends ui.views.springFestival.ui_springFestivalRankItemUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClick);
        }
        onClick() {
            if (!this._data)
                return;
            const name = this._data.name;
            const uid = this._data.uid;
            const rank = this._data.rank;
            AllianceFightModel.Ins.selectedAlliance = { name, uid, rank };
            const req = new AllianceMember_req();
            req.allianceId = this._data.uid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.mingcitf.text = value.rank + "";
            this.nameTf.text = value.name;
            this.lab.text = value.prestige + "";
        }
    }

    exports.SpringFestivalRankItem = SpringFestivalRankItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalRankView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("springFestival.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.springFestival.ui_springFestivalRankViewUI;
                this.btnList.push(ButtonCtl.Create(this._ui.rewardBtn, new Laya.Handler(this, this.onBtnClick)));
                this.bindClose(this._ui.close1);
                this._timeCtl = new TimeCtl(this._ui.timeTf);
                this._ui.list.itemRender = SpringFestivalRankItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onBtnClick() {
            E.ViewMgr.Open(EViewType.SpringFestivalAwRankView);
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_RANK, this, this.onUpdataView);
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_RANK_REWARD, this, this.updataRedTip);
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_PLAYER_LIST, this, this.showMemberView);
            this.updataTime();
            let req = new SpringFestivalAllianceRank_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_RANK, this, this.onUpdataView);
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_RANK_REWARD, this, this.updataRedTip);
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_PLAYER_LIST, this, this.showMemberView);
            this._timeCtl.dispose();
        }
        updataRedTip() {
            if (SpringFestivalModel.Ins.isRankRedTip()) {
                DotManager.addDot(this._ui.rewardBtn);
            }
            else {
                DotManager.removeDot(this._ui.rewardBtn);
            }
        }
        onUpdataView() {
            this._ui.list.array = SpringFestivalModel.Ins.rankList;
            this._ui.item.mingcitf.text = SpringFestivalModel.Ins.rank + "";
            this._ui.item.lab.text = SpringFestivalModel.Ins.prestige + "";
            this._ui.item.bg.skin = "remote/springFestival/dfjjc_xszj.png";
            const alliance = AllianceModel.Ins.alliance;
            if (!alliance)
                return;
            this._ui.item.nameTf.text = alliance.name + "";
            this.updataRedTip();
        }
        showMemberView() {
            const data = AllianceFightModel.Ins.selectedAlliance;
            E.ViewMgr.Open(EViewType.AllianceFightMemberView, null, data);
        }
        updataTime() {
            let time = SpringFestivalModel.Ins.endunix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText("活动剩余时间：" + time_str);
        }
        endTime() {
            this._timeCtl.setText("活动剩余时间：已结束");
        }
    }

    exports.SpringFestivalRankView = SpringFestivalRankView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalShopGMView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.springFestival.ui_springFestivalShopGMViewUI;
                this.bindClose(this._ui.close1);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_sub, new Laya.Handler(this, this.onBtnSubClick)), ButtonCtl.Create(this._ui.btn_add, new Laya.Handler(this, this.onBtnAddClick)), ButtonCtl.Create(this._ui.btn_add1, new Laya.Handler(this, this.onBtnAdd1Click)), ButtonCtl.Create(this._ui.btn_qx, new Laya.Handler(this, this.onBtnQXClick)), ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick)));
            }
        }
        onInit() {
            this._data = this.Data;
            if (this._data.f_limit) {
                let vo = SpringFestivalModel.Ins.shopList.find(ele => ele.fid == this._data.f_id);
                let num = 0;
                if (vo) {
                    num = vo.count;
                }
                this._max = this._data.f_limit - num;
            }
            else {
                this._max = 99;
            }
            this._num = 1;
            this.updataView();
        }
        onExit() {
        }
        onBtnSubClick() {
            this._num--;
            this.setBtn();
        }
        onBtnAddClick() {
            this._num++;
            this.setBtn();
        }
        onBtnAdd1Click() {
            this._num += 10;
            this.setBtn();
        }
        onBtnQXClick() {
            this.Close();
        }
        onBtnQDClick() {
            if (this._data) {
                let req = new SpringFestivalShop_req;
                req.fid = this._data.f_id;
                req.count = this._num;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        updataView() {
            let itemVo = new ItemVo();
            let arr = this._data.f_goods.split("-");
            itemVo.cfgId = parseInt(arr[0]);
            itemVo.count = parseInt(arr[1]);
            ItemViewFactory.refreshSlot(this._ui.item, itemVo);
            this._ui.lab_title.text = itemVo.getName();
            this.setBtn();
        }
        setBtn() {
            if (this._num <= 1) {
                this._ui.btn_sub.disabled = true;
            }
            else {
                this._ui.btn_sub.disabled = false;
            }
            if (this._num >= this._max) {
                this._ui.btn_add.disabled = true;
            }
            else {
                this._ui.btn_add.disabled = false;
            }
            if (this._max - this._num < 10) {
                this._ui.btn_add1.disabled = true;
            }
            else {
                this._ui.btn_add1.disabled = false;
            }
            this._ui.lab_num.text = this._num + "";
            let arr = this._data.f_price.split("-");
            let id = parseInt(arr[0]);
            let num = parseInt(arr[1]);
            let needC = num * this._num;
            let count = MainModel.Ins.mRoleData.getVal(id);
            this._ui.icon.skin = IconUtils.getIconByCfgId(id);
            this._ui.lab_m.text = needC + "";
            this._ui.lab_d.x = this._ui.lab_m.x + this._ui.lab_m.textField.width;
            let arr1 = this._data.f_goods.split("-");
            let idd = parseInt(arr1[0]);
            this._ui.lab_d.text = " 购买" + IconUtils.getNameByID(idd);
            if (count >= needC) {
                this._ui.lab_m.color = "#54e80d";
            }
            else {
                this._ui.lab_m.color = "#ff1e00";
            }
        }
    }

    exports.SpringFestivalShopGMView = SpringFestivalShopGMView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalShopItem extends ui.views.springFestival.ui_springFestivalShopItemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onClick));
        }
        onClick() {
            if (this._data) {
                if (this._data.f_limit) {
                    let vo = SpringFestivalModel.Ins.shopList.find(ele => ele.fid == this._data.f_id);
                    let num = 0;
                    if (vo) {
                        num = vo.count;
                    }
                    if (num >= this._data.f_limit) {
                        E.ViewMgr.ShowMidError("购买次数已达上限");
                        return;
                    }
                    E.ViewMgr.Open(EViewType.SpringFestivalShopGMView, null, this._data);
                }
                else {
                    E.ViewMgr.Open(EViewType.SpringFestivalShopGMView, null, this._data);
                }
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let voo = SpringFestivalModel.Ins.shopList.find(ele => ele.fid == this._data.f_id);
            let num = 0;
            if (voo) {
                num = voo.count;
            }
            if (value.f_limit) {
                this.lab.text = "限购" + num + "/" + value.f_limit;
            }
            else {
                this.lab.text = "";
            }
            let vo = new ItemVo();
            vo.cfgId = parseInt(value.f_goods.split("-")[0]);
            vo.count = parseInt(value.f_goods.split("-")[1]);
            ItemViewFactory.refreshSlot(this.item, vo);
            this.lab_name.text = vo.getName();
            this.icon.skin = IconUtils.getIconByCfgId(parseInt(value.f_price.split("-")[0]));
            this.lab2.text = value.f_price.split("-")[1];
            let count = MainModel.Ins.mRoleData.getVal(ECellType.WeiWang);
            if (count >= value.f_PersonalLimit) {
                this.mk.visible = this.lab1.visible = false;
                this.btn.visible = true;
            }
            else {
                this.mk.visible = this.lab1.visible = true;
                this.lab1.text = value.f_PersonalLimit + "威望可购买";
                this.btn.visible = false;
            }
        }
    }

    exports.SpringFestivalShopItem = SpringFestivalShopItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalShopView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("springFestival.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.springFestival.ui_springFestivalShopViewUI;
                this.bindClose(this._ui.btn_close);
                ValCtl.Create(this._ui.lab3, this._ui.icon3, ECellType.NianShoulinpian);
                ValCtl.Create(this._ui.lab2, this._ui.img2, ECellType.XinNianFuZi);
                this._timeCtl = new TimeCtl(this._ui.lab_time);
                this._ui.list.itemRender = SpringFestivalShopItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRender);
            }
        }
        onRender(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_SHOP, this, this.onUpdataView);
            this.updataTime();
            this._ui.lab1.text = "当前个人威望：" + MainModel.Ins.mRoleData.getVal(ECellType.WeiWang);
            this._ui.list.array = SFShopProxy.Ins.List;
        }
        onExit() {
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_SHOP, this, this.onUpdataView);
            this._timeCtl.dispose();
        }
        onUpdataView() {
            this._ui.list.array = SFShopProxy.Ins.List;
        }
        updataTime() {
            let time = SpringFestivalModel.Ins.rewardEndunix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("已结束");
        }
    }

    exports.SpringFestivalShopView = SpringFestivalShopView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalTaskItem extends ui.views.springFestival.ui_springFestivalTaskItemUI {
        constructor() {
            super();
            this.list.itemRender = ui.views.springFestival.ui_springFestivalIconItemUI;
            this.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn1, new Laya.Handler(this, this.onBtn1Click));
        }
        onBtnClick() {
            if (this._cfg) {
                E.ViewMgr.Close(EViewType.SpringFestivalTaskView);
                E.ViewMgr.Close(EViewType.SpringFestivalView);
                if (this._cfg.f_viewjump != 0) {
                    E.ViewMgr.OpenByFuncid(this._cfg.f_viewjump, false);
                }
            }
        }
        onBtn1Click() {
            if (this._data) {
                let req = new SpringFestivalTask_req;
                req.fid = this._data.fid;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onRenderHandler(item) {
            let itemVo = new ItemVo();
            let arr = item.dataSource.split("-");
            itemVo.cfgId = parseInt(arr[0]);
            itemVo.count = parseInt(arr[1]);
            ItemViewFactory.refreshSlot(item.slot, itemVo);
            item.maskbg.visible = this._bo;
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this._cfg = SFTaskProxy.Ins.GetDataById(value.fid);
            let st = StringUtil.format(this._cfg.f_taskinfo, this._cfg.f_taskcontent);
            this.lab1.text = t_Txt_Config.Ins.replace(st);
            let count = value.count / this._cfg.f_divisor;
            if (count >= this._cfg.f_taskcontent) {
                this.lab.text = this._cfg.f_taskcontent + "/" + this._cfg.f_taskcontent;
            }
            else {
                this.lab.text = count + "/" + this._cfg.f_taskcontent;
            }
            if (value.state == 2) {
                this._bo = true;
            }
            else {
                this._bo = false;
            }
            this.list.array = this._cfg.f_rewards.split("|");
            DotManager.removeDot(this.btn1);
            if (value.state == 2) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn1.mouseEnabled = false;
                this.btn1.skin = "remote/springFestival/wwcicon.png";
                this.lab2.text = "已领取";
            }
            else if (value.state == 1) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn1.mouseEnabled = true;
                this.btn1.skin = "remote/springFestival/lqicon.png";
                this.lab2.text = "领取";
                DotManager.addDot(this.btn1, 10, -10);
            }
            else if (value.state == 0) {
                this.btn.visible = true;
                this.btn1.visible = false;
            }
        }
    }

    exports.SpringFestivalTaskItem = SpringFestivalTaskItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalTaskItem1 extends ui.views.springFestival.ui_springFestivalTaskItem1UI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn1, new Laya.Handler(this, this.onBtnClick1));
            ButtonCtl.Create(this.btn2, new Laya.Handler(this, this.onBtnClick2));
            ButtonCtl.Create(this.btn3, new Laya.Handler(this, this.onBtnClick3));
        }
        onBtnClick() {
            if (this._cfg) {
                ActivityModel.Ins.recharge(this._cfg.f_payid);
            }
        }
        onBtnClick1() {
            if (this._cfg) {
                let req = new SpringFestivalPack_req;
                req.fid = this._cfg.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onBtnClick2() {
            if (!this._cfg)
                return;
            E.sendTrack("ad_watch", { type: "SpringFestival_mf" });
            E.sdk.lookVideo((type) => {
                switch (type) {
                    case 0:
                        break;
                    case 1:
                        E.sendTrack("ad_finish", { type: "SpringFestival_mf" });
                        let req = new SpringFestivalPack_req;
                        req.fid = this._cfg.f_id;
                        SocketMgr.Ins.SendMessageBin(req);
                        break;
                }
            });
        }
        onBtnClick3() {
            if (this._cfg) {
                let req = new SpringFestivalPack_req;
                req.fid = this._cfg.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._cfg = SFPackProxy.Ins.GetDataById(value.fid);
            this.lab1.text = this._cfg.f_PackName;
            ItemViewFactory.renderItemSlots(this.sp, this._cfg.f_Rewards, 10, 0.8, "left");
            this.lab2.text = value.count + "/" + this._cfg.f_PackBuyLimit;
            if (value.count >= this._cfg.f_PackBuyLimit) {
                this.btn.disabled = this.btn1.disabled = this.btn2.disabled = this.btn3.disabled = true;
            }
            else {
                this.btn.disabled = this.btn1.disabled = this.btn2.disabled = this.btn3.disabled = false;
            }
            DotManager.removeDot(this.btn1);
            if (this._cfg.f_PackType == 1) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn2.visible = false;
                this.btn3.visible = false;
                if (value.count < this._cfg.f_PackBuyLimit) {
                    DotManager.addDot(this.btn1, 10, -10);
                }
            }
            else if (this._cfg.f_PackType == 2) {
                this.btn.visible = false;
                this.btn1.visible = false;
                this.btn2.visible = true;
                this.btn3.visible = false;
            }
            else if (this._cfg.f_PackType == 3) {
                this.btn.visible = true;
                this.btn1.visible = false;
                this.btn2.visible = false;
                this.btn3.visible = false;
                let priceCfg = t_Purchase_PriceProxy.Ins.GetDataById(this._cfg.f_payid);
                this.lab.text = StringUtil.moneyCv(priceCfg.f_price) + "元";
            }
            else if (this._cfg.f_PackType == 4) {
                this.btn.visible = false;
                this.btn1.visible = false;
                this.btn2.visible = false;
                this.btn3.visible = true;
                let id = parseInt(this._cfg.f_Price.split("-")[0]);
                let num = parseInt(this._cfg.f_Price.split("-")[1]);
                this.icon.skin = IconUtils.getIconByCfgId(id);
                this.lab3.text = num + "";
            }
        }
    }

    exports.SpringFestivalTaskItem1 = SpringFestivalTaskItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalTaskView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("springFestival.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.springFestival.ui_springFestivalTaskViewUI;
                this.bindClose(this._ui.btn_close);
                this._timeCtl = new TimeCtl(this._ui.lab_time);
                const tabsSkin = [this._ui.tab1, this._ui.tab2];
                let st = E.getLang("springFestivalTab");
                this.tabList = st.split("-");
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._ui.list1.itemRender = SpringFestivalTaskItem;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onTaskRender);
                this._ui.list2.itemRender = SpringFestivalTaskItem1;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onTaskRender1);
            }
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab.text = this.tabList[index];
            if (sel) {
                skin.lab.color = "#F2F781";
                skin.img.skin = "remote/springFestival/button2.png";
            }
            else {
                skin.lab.color = "#AB351B";
                skin.img.skin = "remote/springFestival/button1.png";
            }
        }
        onTabSelectHandler(v) {
            this._ui.list1.visible = this._ui.list2.visible = false;
            this._ui["list" + (v + 1)].visible = true;
            this["updataView" + (v + 1)]();
        }
        onTaskRender(item) {
            item.setData(item.dataSource);
        }
        onTaskRender1(item) {
            item.setData(item.dataSource);
        }
        updataRedTip() {
            if (SpringFestivalModel.Ins.isTaskRedTip()) {
                DotManager.addDot(this._ui.tab1);
            }
            else {
                DotManager.removeDot(this._ui.tab1);
            }
            if (SpringFestivalModel.Ins.isPackRedTip()) {
                DotManager.addDot(this._ui.tab2);
            }
            else {
                DotManager.removeDot(this._ui.tab2);
            }
        }
        onInit() {
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_TASK, this, this.updataView1);
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_PACK, this, this.updataView2);
            this.updataTime();
            this.tabsCtl.selectIndex = this.Data;
        }
        onExit() {
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_TASK, this, this.updataView1);
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_PACK, this, this.updataView2);
            this.tabsCtl.dispose();
            this._timeCtl.dispose();
        }
        updataView1() {
            let arr = [];
            let arr1 = [];
            let arr2 = [];
            for (let i = 0; i < SpringFestivalModel.Ins.taskList.length; i++) {
                let vo = SpringFestivalModel.Ins.taskList[i];
                if (vo.state == 1) {
                    arr.push(vo);
                }
                else if (vo.state == 0) {
                    arr1.push(vo);
                }
                else if (vo.state == 2) {
                    arr2.push(vo);
                }
            }
            this._ui.list1.array = arr.concat(arr1.concat(arr2));
            this.updataRedTip();
        }
        updataView2() {
            this._ui.list2.array = SpringFestivalModel.Ins.packList;
            this.updataRedTip();
        }
        updataTime() {
            let time = SpringFestivalModel.Ins.endunix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText("活动剩余时间：" + time_str);
        }
        endTime() {
            this._timeCtl.setText("活动剩余时间：已结束");
        }
    }

    exports.SpringFestivalTaskView = SpringFestivalTaskView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalTipItem extends ui.views.springFestival.ui_springFestivalTipItemUI {
        constructor() {
            super();
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
            this.on(Laya.Event.CLICK, this, this.onSlotClickHandler);
        }
        onRemove() {
            this.off(Laya.Event.CLICK, this, this.onSlotClickHandler);
            if (this._eff) {
                this._eff.dispose();
                this._eff = null;
            }
        }
        onSlotClickHandler(e) {
            e.stopPropagation();
            MainModel.Ins.showSmallTips(this._vo.getName(), this._vo.getDesc(), this);
        }
        setData(value, index) {
            if (!value)
                return;
            this._vo = new ItemVo;
            this._vo.cfgId = value;
            this._vo.count = 1;
            this.icon.skin = IconUtils.getIconByCfgId(this._vo.cfgId);
            this.quality.skin = IconUtils.getQuaIcon(this._vo.cfg.f_qua);
            this._eff = new SimpleEffect(this.sp, `o/spine/efxinshou/efxinshou`, 8, 8, 1.0);
            let ind = SFConfigProxy.Ins.GetDataById(1).f_ItemEffect.split("|")[index];
            this._eff.play(parseInt(ind), true);
        }
    }

    exports.SpringFestivalTipItem = SpringFestivalTipItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalTipView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("springFestival.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.springFestival.ui_springFestivalTipViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onClick)));
                this._ui.list.itemRender = SpringFestivalTipItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRender);
            }
        }
        onRender(item, index) {
            item.setData(item.dataSource, index);
        }
        onClick() {
            let req = new SpringFestivalCanJoin_req;
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        onInit() {
            this._ui.list.array = SFConfigProxy.Ins.GetDataById(1).f_openViewItem.split("|");
        }
        onExit() {
        }
    }

    exports.SpringFestivalTipView = SpringFestivalTipView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalWWItem extends ui.views.springFestival.ui_springFestivalWWItemUI {
        constructor() {
            super();
            this.sp.on(Laya.Event.CLICK, this, this.onClick);
        }
        onClick() {
            if (SpringFestivalModel.Ins.getIsEnroll()) {
                E.ViewMgr.Open(EViewType.SpringFestivalWWView);
            }
        }
        setData(value, index) {
            this.zOrder = 100 - index;
            this.lab.text = "第" + value.f_stage + "阶段";
            this.lab1.text = value.f_Value + "";
            let num = 0;
            let val = 0;
            if (index == 0) {
                num = SpringFestivalModel.Ins.prestige;
                val = value.f_Value;
            }
            else {
                num = SpringFestivalModel.Ins.prestige - SFStageRewardsProxy.Ins.List[index - 1].f_Value;
                val = value.f_Value - SFStageRewardsProxy.Ins.List[index - 1].f_Value;
            }
            if (num <= 0)
                num = 0;
            let count = num / val;
            if (count >= 1)
                count = 1;
            this.pro.width = count * 89;
            if (SpringFestivalModel.Ins.prestige >= value.f_Value) {
                this.img.skin = "remote/springFestival/redpacket.png";
            }
            else {
                this.img.skin = "remote/springFestival/whitepacket.png";
            }
            let vo = SpringFestivalModel.Ins.rewardList.find(ele => ele.fid == value.f_id);
            if (vo.state == 2) {
                DotManager.addDot(this.sp);
            }
            else {
                DotManager.removeDot(this.sp);
            }
        }
    }

    exports.SpringFestivalWWItem = SpringFestivalWWItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
            this.mMaskClick = false;
            this._time = 0;
        }
        onAddLoadRes() {
            this.addAtlas("springFestival.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.springFestival.ui_springFestivalViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_ww, new Laya.Handler(this, this.onWWClick), false), ButtonCtl.Create(this._ui.btn_bm, new Laya.Handler(this, this.onBMClick)), ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)), ButtonCtl.Create(this._ui.btn_ph, new Laya.Handler(this, this.onBtnPHClick)), ButtonCtl.Create(this._ui.btn_rw, new Laya.Handler(this, this.onBtnRWClick)), ButtonCtl.Create(this._ui.btn_yh, new Laya.Handler(this, this.onBtnYHClick)), ButtonCtl.Create(this._ui.btn_sd, new Laya.Handler(this, this.onBtnSDClick)));
                this._ui.btn1.on(Laya.Event.CLICK, this, this.onClick, [1]);
                this._ui.btn2.on(Laya.Event.CLICK, this, this.onClick, [2]);
                this._ui.btn3.on(Laya.Event.CLICK, this, this.onClick, [3]);
                this._ui.list.itemRender = SpringFestivalWWItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRender);
                this._timeCtl = new TimeCtl(this._ui.lab_time);
                this._checkCtl = new CheckBoxCtl({ bg: this._ui.ckbg, gou: this._ui.gou });
                this._checkCtl.selected = false;
                this._bossAv = AvatarFactory.createBossMonster(`o/spine/efnianshou/efnianshou`);
                this._bossAv.play(0);
                this._ui.sp_av.addChild(this._bossAv);
            }
        }
        onClick(index) {
            let time = SFConfigProxy.Ins.GetDataById(1).f_AnimationCD;
            if (Laya.timer.currTimer - this._time < time) {
                return;
            }
            this._time = Laya.timer.currTimer;
            let cfg = SFSFireWorkProxy.Ins.getCfgByTpye(index);
            if (!MainModel.Ins.isItemEnough(cfg.f_FireworkID, 1, true)) {
                return;
            }
            let req = new SpringFestivalFire_req;
            req.itemId = cfg.f_FireworkID;
            if (this._checkCtl.selected) {
                req.count = MainModel.Ins.mRoleData.getVal(cfg.f_FireworkID);
            }
            else {
                req.count = 1;
            }
            SocketMgr.Ins.SendMessageBin(req);
        }
        onWWClick() {
            if (SpringFestivalModel.Ins.getIsEnroll()) {
                E.ViewMgr.Open(EViewType.SpringFestivalWWView);
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("springFestivalTitle", "springFestivalDec");
        }
        onBtnPHClick() {
            if (SpringFestivalModel.Ins.getIsEnroll(false)) {
                E.ViewMgr.Open(EViewType.SpringFestivalRankView);
            }
        }
        onBtnRWClick() {
            if (SpringFestivalModel.Ins.getIsEnroll()) {
                E.ViewMgr.Open(EViewType.SpringFestivalTaskView, null, 0);
            }
        }
        onBtnYHClick() {
            if (SpringFestivalModel.Ins.getIsEnroll()) {
                E.ViewMgr.Open(EViewType.SpringFestivalTaskView, null, 1);
            }
        }
        onBtnSDClick() {
            if (SpringFestivalModel.Ins.getIsEnroll(false)) {
                E.ViewMgr.Open(EViewType.SpringFestivalShopView);
            }
        }
        onBMClick() {
            let st = E.getLang("springFestival1");
            E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, st, new Laya.Handler(this, () => {
                let req = new SpringFestivalEnroll_req;
                SocketMgr.Ins.SendMessageBin(req);
            }));
        }
        onRender(item, index) {
            item.setData(item.dataSource, index);
        }
        updataRedTip() {
            if (SpringFestivalModel.Ins.isWWRedTip()) {
                DotManager.addDot(this._ui.btn_ww);
            }
            else {
                DotManager.removeDot(this._ui.btn_ww);
            }
            if (SpringFestivalModel.Ins.isEnrollRedTip()) {
                DotManager.addDot(this._ui.btn_bm);
            }
            else {
                DotManager.removeDot(this._ui.btn_bm);
            }
            if (SpringFestivalModel.Ins.isRankRedTip()) {
                DotManager.addDot(this._ui.btn_ph);
            }
            else {
                DotManager.removeDot(this._ui.btn_ph);
            }
            if (SpringFestivalModel.Ins.isTaskRedTip() || SpringFestivalModel.Ins.isPackRedTip()) {
                DotManager.addDot(this._ui.btn_rw);
            }
            else {
                DotManager.removeDot(this._ui.btn_rw);
            }
        }
        onInit() {
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW, this, this.onUpdataView);
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_prestige, this, this.onUpdataCount);
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_YH, this, this.onUpdataYH);
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_REWARD, this, this.onUpdataReward);
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_RANK_REWARD, this, this.updataRedTip);
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_TASK, this, this.updataRedTip);
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_PACK, this, this.updataRedTip);
            MainModel.Ins.on(MainEvent.ValChangeCell, this, this.updataYH);
            this.updataTime();
            this.updataView();
        }
        onExit() {
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW, this, this.onUpdataView);
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_prestige, this, this.onUpdataCount);
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_YH, this, this.onUpdataYH);
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_REWARD, this, this.onUpdataReward);
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_RANK_REWARD, this, this.updataRedTip);
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_TASK, this, this.updataRedTip);
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_PACK, this, this.updataRedTip);
            MainModel.Ins.off(MainEvent.ValChangeCell, this, this.updataYH);
            this._timeCtl.dispose();
            if (this._bossAv) {
                this._bossAv.dispose();
                this._bossAv = null;
            }
        }
        onUpdataView() {
            this.updataView();
        }
        onUpdataCount() {
            this.updataCount();
            this._ui.list.array = SFStageRewardsProxy.Ins.List;
        }
        onUpdataYH(id) {
            let cfg = SFSFireWorkProxy.Ins.getCfgByID(id);
            let eff;
            if (cfg.f_FireWorkType == 1) {
                eff = new SimpleEffect(this._ui.sp_1, `o/spine/efbianpao1/efbianpao1`, 0, 0, 1.0);
            }
            else if (cfg.f_FireWorkType == 2) {
                eff = new SimpleEffect(this._ui.sp_2, `o/spine/efbianpao3/efbianpao3`, 0, 0, 1.0);
            }
            else if (cfg.f_FireWorkType == 3) {
                eff = new SimpleEffect(this._ui.sp_3, `o/spine/efbianpao2/efbianpao2`, 0, 0, 1.0);
            }
            eff.anim.on(Laya.Event.COMPLETE, this, this.onComplete, [eff]);
            eff.playEndDisplse(0);
        }
        onComplete(eff) {
            eff.anim.avatar.skeleton.on(Laya.Event.LABEL, this, this.onAvatarLabel);
        }
        onAvatarLabel(e) {
            let animEvent = e.name;
            if (animEvent == "bianpao") {
                if (this._bossAv) {
                    this._bossAv.playOnce(1, this, this.onAvatarComplete);
                }
            }
        }
        onAvatarComplete() {
            this._bossAv.play(0);
        }
        onUpdataReward() {
            this._ui.list.array = SFStageRewardsProxy.Ins.List;
            this.updataRedTip();
        }
        updataCount() {
            this._ui.lab_ww.text = SpringFestivalModel.Ins.prestige + "";
        }
        updataYH() {
            for (let i = 1; i < 4; i++) {
                let cfg = SFSFireWorkProxy.Ins.getCfgByTpye(i);
                let prestigeVal = cfg.f_prestigeVal.split("|")[0];
                let count = prestigeVal.split("-")[1];
                this._ui["lab" + i].text = "+" + count + "威望";
                this._ui["lab" + i + "_" + i].text = "剩余" + MainModel.Ins.mRoleData.getVal(cfg.f_FireworkID);
            }
        }
        updataView() {
            this.updataCount();
            this.updataYH();
            this._ui.list.array = SFStageRewardsProxy.Ins.List;
            if (SpringFestivalModel.Ins.isEnroll) {
                this._ui.sp1.visible = false;
                this._ui.sp2.visible = true;
            }
            else {
                this._ui.sp1.visible = true;
                this._ui.sp2.visible = false;
            }
            this.updataRedTip();
        }
        updataTime() {
            let time = SpringFestivalModel.Ins.endunix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText("活动剩余时间：" + time_str);
        }
        endTime() {
            this._timeCtl.setText("活动剩余时间：已结束");
        }
    }

    exports.SpringFestivalView = SpringFestivalView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalWWItem1 extends ui.views.springFestival.ui_springFestivalWWItem1UI {
        constructor() {
            super();
            this.list.itemRender = ui.views.springFestival.ui_springFestivalIconItemUI;
            this.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onClick));
        }
        onClick() {
            if (!this._data)
                return;
            let req = new SpringFestivalReward_req;
            req.fid = this._data.fid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onRenderHandler(item) {
            let itemVo = new ItemVo();
            let arr = item.dataSource.split("-");
            itemVo.cfgId = parseInt(arr[0]);
            itemVo.count = parseInt(arr[1]);
            ItemViewFactory.refreshSlot(item.slot, itemVo);
            item.maskbg.visible = this._bo;
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let cfg = SFStageRewardsProxy.Ins.getCfgById(value.fid);
            this.lab.text = "第" + cfg.f_stage + "阶段";
            this.lab1.text = cfg.f_Value + "";
            this.list.array = cfg.f_stageRewards.split("|");
            this._bo = false;
            DotManager.removeDot(this.btn);
            if (value.state == 1) {
                this.btn.mouseEnabled = false;
                this.btn.skin = "remote/common/base/anniu_grey.png";
                this.lab2.text = "已领取";
                this._bo = true;
            }
            else if (value.state == 2) {
                this.btn.mouseEnabled = true;
                this.btn.skin = "remote/common/base/anniu_blue.png";
                this.lab2.text = "领取";
                DotManager.addDot(this.btn, 10, -10);
            }
            else if (value.state == 0) {
                this.btn.mouseEnabled = false;
                this.btn.skin = "remote/common/base/anniu_grey.png";
                this.lab2.text = "领取";
            }
        }
    }

    exports.SpringFestivalWWItem1 = SpringFestivalWWItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalWWView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("springFestival.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.springFestival.ui_springFestivalWWViewUI;
                this._ui.list.itemRender = SpringFestivalWWItem1;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRender);
            }
        }
        onRender(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            SpringFestivalModel.Ins.on(SpringFestivalModel.UPDATA_VIEW_REWARD, this, this.updataView);
            this.updataView();
        }
        onExit() {
            SpringFestivalModel.Ins.off(SpringFestivalModel.UPDATA_VIEW_REWARD, this, this.updataView);
        }
        updataView() {
            let arr = [];
            let arr1 = [];
            let arr2 = [];
            for (let i = 0; i < SpringFestivalModel.Ins.rewardList.length; i++) {
                let vo = SpringFestivalModel.Ins.rewardList[i];
                if (vo.state == 2) {
                    arr.push(vo);
                }
                else if (vo.state == 0) {
                    arr1.push(vo);
                }
                else if (vo.state == 1) {
                    arr2.push(vo);
                }
            }
            this._ui.list.array = arr.concat(arr1.concat(arr2));
        }
    }

    exports.SpringFestivalWWView = SpringFestivalWWView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpringFestivalModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new SpringFestivalModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            SpringFestivalModel.Ins.rewardList = [];
            SpringFestivalModel.Ins.taskList = [];
            SpringFestivalModel.Ins.packList = [];
            SpringFestivalModel.Ins.shopList = [];
        }
        initMsg() {
            this.Reg(new SpringFestivalView(EViewType.SpringFestivalView));
            this.Reg(new SpringFestivalWWView(EViewType.SpringFestivalWWView));
            this.Reg(new SpringFestivalRankView(EViewType.SpringFestivalRankView));
            this.Reg(new SpringFestivalAwRankView(EViewType.SpringFestivalAwRankView));
            this.Reg(new SpringFestivalTaskView(EViewType.SpringFestivalTaskView));
            this.Reg(new SpringFestivalShopView(EViewType.SpringFestivalShopView));
            this.Reg(new SpringFestivalShopGMView(EViewType.SpringFestivalShopGMView));
            this.Reg(new SpringFestivalTipView(EViewType.SpringFestivalTipView));
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onMainViewInit);
            E.MsgMgr.AddMsg(MSGID.SpringFestivalInit, this.SpringFestivalInit, this);
            E.MsgMgr.AddMsg(MSGID.SpringFestivalCanJoin, this.SpringFestivalCanJoin, this);
            E.MsgMgr.AddMsg(MSGID.SpringFestivalEnroll, this.SpringFestivalEnroll, this);
            E.MsgMgr.AddMsg(MSGID.SpringFestivalTaskUpdate, this.SpringFestivalTaskUpdate, this);
            E.MsgMgr.AddMsg(MSGID.SpringFestivalPack, this.SpringFestivalPack, this);
            E.MsgMgr.AddMsg(MSGID.SpringFestivalReward, this.SpringFestivalReward, this);
            E.MsgMgr.AddMsg(MSGID.SpringFestivalAllianceRank, this.SpringFestivalAllianceRank, this);
            E.MsgMgr.AddMsg(MSGID.SpringFestivalAllianceRankReward, this.SpringFestivalAllianceRankReward, this);
            E.MsgMgr.AddMsg(MSGID.SpringFestivalShop, this.SpringFestivalShop, this);
            E.MsgMgr.AddMsg(MSGID.SpringFestivalPrestige, this.SpringFestivalPrestige, this);
            E.MsgMgr.AddMsg(MSGID.SpringFestivalFire, this.SpringFestivalFire, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (SpringFestivalModel.Ins.isRedTip()) {
                MainModel.Ins.funcSetRed(EFuncDef.SpringFestival, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.SpringFestival, false);
            }
        }
        SpringFestivalInit(value) {
            SpringFestivalModel.Ins.allianceId = value.allianceId;
            SpringFestivalModel.Ins.canJoin = value.canJoin;
            SpringFestivalModel.Ins.prestige = value.prestige;
            SpringFestivalModel.Ins.isEnroll = value.isEnroll;
            SpringFestivalModel.Ins.rewardList = value.rewardList;
            SpringFestivalModel.Ins.taskList = value.taskList;
            SpringFestivalModel.Ins.packList = value.packList;
            SpringFestivalModel.Ins.shopList = value.shopList;
            SpringFestivalModel.Ins.rank = value.rank;
            SpringFestivalModel.Ins.state = value.state;
            SpringFestivalModel.Ins.endunix = value.endunix;
            SpringFestivalModel.Ins.rewardEndunix = value.rewardEndunix;
            this.onMainViewInit();
        }
        SpringFestivalCanJoin(value) {
            SpringFestivalModel.Ins.canJoin = value.canJoin;
            if (value.canJoin == 1 || value.canJoin == 2) {
                E.ViewMgr.Open(EViewType.SpringFestivalView);
            }
            this.onMainViewInit();
        }
        SpringFestivalEnroll(value) {
            SpringFestivalModel.Ins.isEnroll = value.isEnroll;
            SpringFestivalModel.Ins.event(SpringFestivalModel.UPDATA_VIEW);
            this.onMainViewInit();
        }
        SpringFestivalTaskUpdate(value) {
            for (let i = 0; i < value.taskList.length; i++) {
                let index = SpringFestivalModel.Ins.taskList.findIndex(ele => ele.fid == value.taskList[i].fid);
                if (index != -1) {
                    SpringFestivalModel.Ins.taskList[index] = value.taskList[i];
                }
            }
            SpringFestivalModel.Ins.event(SpringFestivalModel.UPDATA_VIEW_TASK);
            this.onMainViewInit();
        }
        SpringFestivalPack(value) {
            let index = SpringFestivalModel.Ins.packList.findIndex(ele => ele.fid == value.data.fid);
            if (index != -1) {
                SpringFestivalModel.Ins.packList[index] = value.data;
            }
            SpringFestivalModel.Ins.event(SpringFestivalModel.UPDATA_VIEW_PACK);
            this.onMainViewInit();
        }
        SpringFestivalReward(value) {
            for (let i = 0; i < value.rewardList.length; i++) {
                let index = SpringFestivalModel.Ins.rewardList.findIndex(ele => ele.fid == value.rewardList[i].fid);
                if (index != -1) {
                    SpringFestivalModel.Ins.rewardList[index] = value.rewardList[i];
                }
            }
            SpringFestivalModel.Ins.event(SpringFestivalModel.UPDATA_VIEW_REWARD);
            this.onMainViewInit();
        }
        SpringFestivalAllianceRank(value) {
            SpringFestivalModel.Ins.rankList = value.rankList;
            SpringFestivalModel.Ins.rank = value.rank;
            SpringFestivalModel.Ins.event(SpringFestivalModel.UPDATA_VIEW_RANK);
        }
        SpringFestivalAllianceRankReward(value) {
            SpringFestivalModel.Ins.state = value.state;
            SpringFestivalModel.Ins.event(SpringFestivalModel.UPDATA_VIEW_RANK_REWARD);
            this.onMainViewInit();
        }
        SpringFestivalShop(value) {
            for (let i = 0; i < value.shopList.length; i++) {
                let index = SpringFestivalModel.Ins.shopList.findIndex(ele => ele.fid == value.shopList[i].fid);
                if (index != -1) {
                    SpringFestivalModel.Ins.shopList[index] = value.shopList[i];
                }
            }
            SpringFestivalModel.Ins.event(SpringFestivalModel.UPDATA_VIEW_SHOP);
            this.onMainViewInit();
        }
        SpringFestivalPrestige(value) {
            SpringFestivalModel.Ins.prestige = value.prestige;
            SpringFestivalModel.Ins.event(SpringFestivalModel.UPDATA_VIEW_prestige);
        }
        SpringFestivalFire(value) {
            SpringFestivalModel.Ins.event(SpringFestivalModel.UPDATA_VIEW_YH, value.itemId);
        }
    }

    exports.SpringFestivalModule = SpringFestivalModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WanShengJieProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new WanShengJieProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Halloween_Purchase";
        }
    }

    exports.WanShengJieProxy = WanShengJieProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WanShengJieModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new WanShengJieModel();
            }
            return this._ins;
        }
        isRedTip() {
            if (MainModel.Ins.isOpenByFuncId(EFuncDef.WanShengJie.toString())) {
                if (this.isRewardRedTip()) {
                    return true;
                }
            }
            return false;
        }
        isRewardRedTip() {
            let arr = WanShengJieProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                if (this.rewardList.indexOf(arr[i].f_id) == -1) {
                    if (arr[i].f_isfree) {
                        return true;
                    }
                    if (this.totalCnt >= arr[i].f_AccPurchase) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    WanShengJieModel.UpdataView = "UpdataView";

    exports.WanShengJieModel = WanShengJieModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WanShengJieItem extends ui.views.wanshengjie.ui_wanshengjieItemUI {
        constructor() {
            super();
            this.list.itemRender = ui.views.main.ui_slot_itemUI;
            this.list.renderHandler = new Laya.Handler(this, this.onItemHandler);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn1, new Laya.Handler(this, this.onBtn1Click));
        }
        onBtnClick() {
            if (this._data) {
                let req = new TotalCntReward_req;
                req.id = this._data.f_id;
                req.type = this._data.f_eventtype;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onBtn1Click() {
            ActivityModel.Ins.openFunc(EActivityType.EveryDayBorn, EViewType.MeiRiLiBao, "nothing");
        }
        onItemHandler(item) {
            let vo = new ItemVo();
            vo.cfgId = parseInt(item.dataSource.split("-")[0]);
            vo.count = parseInt(item.dataSource.split("-")[1]);
            ItemViewFactory.refreshSlot(item, vo);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            if (value.f_isfree) {
                this.lab.text = "上线领取";
                this.lab1.text = "";
            }
            else {
                let num = value.f_AccPurchase / 100;
                this.lab.text = "累计充值:" + num + "元";
                if (WanShengJieModel.Ins.totalCnt >= value.f_AccPurchase) {
                    this.lab1.text = num + "/" + num;
                }
                else {
                    this.lab1.text = WanShengJieModel.Ins.totalCnt / 100 + "/" + num;
                }
            }
            this.list.array = value.f_rewards_client.split("|");
            DotManager.removeDot(this.btn);
            if (WanShengJieModel.Ins.rewardList.indexOf(value.f_id) != -1) {
                this.btn.visible = true;
                this.lab_btn.text = "已领取";
                this.btn.disabled = true;
                this.btn1.visible = false;
            }
            else {
                if (value.f_isfree) {
                    DotManager.addDot(this.btn);
                    this.btn.visible = true;
                    this.lab_btn.text = "领取";
                    this.btn.disabled = false;
                    this.btn1.visible = false;
                }
                else {
                    if (WanShengJieModel.Ins.totalCnt >= value.f_AccPurchase) {
                        DotManager.addDot(this.btn);
                        this.btn.visible = true;
                        this.lab_btn.text = "领取";
                        this.btn.disabled = false;
                        this.btn1.visible = false;
                    }
                    else {
                        this.btn.visible = false;
                        this.btn1.visible = true;
                    }
                }
            }
        }
    }

    exports.WanShengJieItem = WanShengJieItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WanShengJieView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("wanshengjie.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wanshengjie.ui_wanshengjieViewUI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick));
                this._ui.list.itemRender = WanShengJieItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("WanShengJieTitle", "WanShengJieDec");
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            WanShengJieModel.Ins.on(WanShengJieModel.UpdataView, this, this.updataView);
            this.updataView();
            let vo = ActivityModel.Ins.getVo(EActivityType.WanShengJie);
            if (vo) {
                this._ui.titleTf.text = E.getLang("houdongtime") + ":" + TimeUtil.getMonthDay(vo.startTime) + "-" + TimeUtil.getMonthDay(vo.endTime);
            }
        }
        onExit() {
            WanShengJieModel.Ins.off(WanShengJieModel.UpdataView, this, this.updataView);
        }
        updataView() {
            let arr = [];
            let arr1 = [];
            for (let i = 0; i < WanShengJieProxy.Ins.List.length; i++) {
                let cfg = WanShengJieProxy.Ins.List[i];
                if (WanShengJieModel.Ins.rewardList.indexOf(cfg.f_id) == -1) {
                    arr.push(cfg);
                }
                else {
                    arr1.push(cfg);
                }
            }
            this._ui.list.array = arr.concat(arr1);
        }
    }

    exports.WanShengJieView = WanShengJieView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WanShengJieView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("wanshengjie.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wanshengjie.ui_wanshengjieView1UI;
                this.bindClose(this._ui.btn_close);
                ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
            }
        }
        onBtnClick() {
            this._type = 1;
            this.Close();
        }
        onInit() {
            this._type = 0;
        }
        onExit() {
            if (this._type == 0) {
                MainModel.Ins.isOpenAnyPackage();
            }
            else {
                E.ViewMgr.Open(EViewType.WanShengJieView);
            }
        }
    }

    exports.WanShengJieView1 = WanShengJieView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WanShengJieModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new WanShengJieModule();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            this.Reg(new WanShengJieView(EViewType.WanShengJieView));
            this.Reg(new WanShengJieView1(EViewType.WanShengJieView1));
            E.MsgMgr.AddMsg(MSGID.TotalCntInit, this.TotalCntInit, this);
            E.MsgMgr.AddMsg(MSGID.TotalCntReward, this.TotalCntReward, this);
            E.MsgMgr.AddMsg(MSGID.TotalCntChange, this.TotalCntChange, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (WanShengJieModel.Ins.isRedTip()) {
                MainModel.Ins.funcSetRed(EFuncDef.WanShengJie, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.WanShengJie, false);
            }
        }
        TotalCntInit(value) {
            WanShengJieModel.Ins.totalCnt = value.totalCnt;
            WanShengJieModel.Ins.rewardList = value.rewardList;
            this.onMainViewInit();
        }
        TotalCntReward(value) {
            WanShengJieModel.Ins.rewardList = value.dataList;
            WanShengJieModel.Ins.event(WanShengJieModel.UpdataView);
            this.onMainViewInit();
        }
        TotalCntChange(value) {
            WanShengJieModel.Ins.totalCnt = value.totalCnt;
            WanShengJieModel.Ins.event(WanShengJieModel.UpdataView);
            this.onMainViewInit();
        }
    }

    exports.WanShengJieModule = WanShengJieModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SkinEnum {
    }
    SkinEnum.Character = 1;
    SkinEnum.Flag = 2;
    SkinEnum.Halo = 3;
    class WowHuanZhuangModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new WowHuanZhuangModel();
            }
            return this._ins;
        }
        getSkinIDByType(type) {
            for (let i = 0; i < WowHuanZhuangModel.Ins.skinList.length; i++) {
                if (WowHuanZhuangModel.Ins.skinList[i].type == type) {
                    return WowHuanZhuangModel.Ins.skinList[i].skinId;
                }
            }
            return 0;
        }
        getSkinIDsByType(type) {
            for (let i = 0; i < WowHuanZhuangModel.Ins.skinList.length; i++) {
                if (WowHuanZhuangModel.Ins.skinList[i].type == type) {
                    return WowHuanZhuangModel.Ins.skinList[i].skinIds;
                }
            }
            return [];
        }
    }
    WowHuanZhuangModel.UPDATA_SKINID = "UPDATA_SKINID";
    WowHuanZhuangModel.UPDATA_ALL_SKINID = "UPDATA_ALL_SKINID";
    WowHuanZhuangModel.UPDATA_ATTR = "UPDATA_ATTR";

    exports.SkinEnum = SkinEnum;
    exports.WowHuanZhuangModel = WowHuanZhuangModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WowHuanZhuangListProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let type = this.List[i].f_type;
                if (!this._map[type]) {
                    this._map[type] = [];
                }
                this._map[type].push(this.List[i]);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WowHuanZhuangListProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Image_List";
        }
        getListByType(type) {
            return this._map[type];
        }
    }
    class WowHuanZhuangAttributeProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let type = this.List[i].f_type;
                if (!this._map[type]) {
                    this._map[type] = [];
                }
                this._map[type].push(this.List[i]);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WowHuanZhuangAttributeProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Image_Attribute";
        }
        getListByType(type) {
            return this._map[type];
        }
    }

    exports.WowHuanZhuangAttributeProxy = WowHuanZhuangAttributeProxy;
    exports.WowHuanZhuangListProxy = WowHuanZhuangListProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WowHuanZhuangView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("wowhuanzhuang.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wowhuanzhuang.ui_wowhuangzhuangViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_tj, new Laya.Handler(this, this.onTJClick)), ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onClick)));
                const tabsSkin = [this._ui.tab1, this._ui.tab2, this._ui.tab3];
                let st = E.getLang("wowhztab");
                this.tabList = st.split(":");
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._ui.list.itemRender = ui.views.wowhuanzhuang.ui_wowhuangzhuangItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list.selectEnable = true;
                this._ui.list1.itemRender = ui.views.wowhuanzhuang.ui_wowhuangzhuangIconItemUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
                this._ui.list1.selectEnable = true;
            }
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab.text = this.tabList[index];
            if (sel) {
                skin.img.visible = true;
            }
            else {
                skin.img.visible = false;
            }
        }
        onTabSelectHandler(v) {
            let index = v + 1;
            this._ui.list1.array = WowHuanZhuangListProxy.Ins.getListByType(index);
            this._ui.list1.selectedIndex = 0;
        }
        onRenderHandler(item, index) {
            item.lab.text = index + 1 + "";
            if (index == this._ui.list.selectedIndex) {
                item.sp.visible = true;
                this.creatAvatar(this._ui.list.selectedItem);
                this.updataBtn(this._ui.list.selectedItem);
            }
            else {
                item.sp.visible = false;
            }
            let arr = WowHuanZhuangModel.Ins.getSkinIDsByType(this.tabsCtl.selectIndex + 1);
            if (arr.indexOf(parseInt(item.dataSource))) {
                item.suo.visible = false;
            }
            else {
                item.suo.visible = true;
            }
            let skinId = WowHuanZhuangModel.Ins.getSkinIDByType(this.tabsCtl.selectIndex + 1);
            if (parseInt(item.dataSource) == skinId) {
                item.gou.visible = true;
            }
            else {
                item.gou.visible = false;
            }
        }
        onRenderHandler1(item, index) {
            if (index == this._ui.list1.selectedIndex) {
                let data = this._ui.list1.selectedItem;
                item.bg.visible = true;
                this._ui.lab_name.text = data.f_ImageName;
                if (data.f_SkinID == "") {
                    this._ui.list.visible = false;
                    this.creatAvatar(data.f_ImageID);
                    this.updataBtn(data.f_ImageID);
                }
                else {
                    this._ui.list.visible = true;
                    let arr = [data.f_ImageID.toString()];
                    arr = arr.concat(data.f_SkinID.split("|"));
                    if (arr.length >= this._ui.list.repeatX) {
                        this._ui.list.width = 540;
                    }
                    else {
                        this._ui.list.width = (arr.length * 62) + (arr.length - 1) * this._ui.list.spaceX;
                    }
                    this._ui.list.array = arr;
                    this._ui.list.selectedIndex = 0;
                }
            }
            else {
                item.bg.visible = false;
            }
            let cfg = item.dataSource;
            item.icon.skin = "o/Image_Head/" + cfg.f_Headicon;
            let arr = WowHuanZhuangModel.Ins.getSkinIDsByType(this.tabsCtl.selectIndex + 1);
            if (arr.indexOf(cfg.f_ImageID) != -1) {
                item.suo.visible = item.zz.visible = false;
            }
            else {
                item.suo.visible = item.zz.visible = true;
            }
            let skinId = WowHuanZhuangModel.Ins.getSkinIDByType(this.tabsCtl.selectIndex + 1);
            let arr1 = [cfg.f_ImageID.toString()];
            arr1 = arr1.concat(cfg.f_SkinID.split("|"));
            if (arr1.indexOf(skinId.toString()) != -1) {
                item.gou.visible = true;
            }
            else {
                item.gou.visible = false;
            }
        }
        onTJClick() {
            E.ViewMgr.Open(EViewType.WowHuanZhuangView1);
        }
        onClick() {
            let req = new WarcraftSkin_req;
            req.type = this.tabsCtl.selectIndex + 1;
            req.fid = this._skinId;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onInit() {
            WowHuanZhuangModel.Ins.on(WowHuanZhuangModel.UPDATA_SKINID, this, this.onUpdataView);
            this.tabsCtl.selectIndex = 0;
        }
        onExit() {
            WowHuanZhuangModel.Ins.off(WowHuanZhuangModel.UPDATA_SKINID, this, this.onUpdataView);
            this.tabsCtl.dispose();
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            if (this._eff) {
                this._eff.dispose();
                this._eff = null;
            }
        }
        updataBtn(skinId) {
            let _skinId = WowHuanZhuangModel.Ins.getSkinIDByType(this.tabsCtl.selectIndex + 1);
            if (skinId == _skinId) {
                this._ui.lab.text = "已幻化";
                this._ui.btn.disabled = true;
            }
            else {
                this._ui.lab.text = "幻化";
                let arr = WowHuanZhuangModel.Ins.getSkinIDsByType(this.tabsCtl.selectIndex + 1);
                if (arr.indexOf(skinId) != -1) {
                    this._ui.btn.disabled = false;
                }
                else {
                    this._ui.btn.disabled = true;
                }
            }
        }
        onUpdataView() {
            this._ui.list1.refresh();
        }
        creatAvatar(skinId) {
            this._skinId = skinId;
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            if (this._eff) {
                this._eff.dispose();
                this._eff = null;
            }
            this._ui.img.skin = "";
            if (this.tabsCtl.selectIndex == 0) {
                this._avatar = AvatarFactory.createCharacter(skinId);
                this._ui.sp.addChild(this._avatar);
            }
            else if (this.tabsCtl.selectIndex == 1) {
                this._ui.img.skin = AvatarFactory.createFlag(skinId);
            }
            else if (this.tabsCtl.selectIndex == 2) {
                this._eff = AvatarFactory.createHalo(skinId, this._ui.sp);
            }
        }
    }

    exports.WowHuanZhuangView = WowHuanZhuangView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WowHuanZhuangItem extends ui.views.wowhuanzhuang.ui_wowhuangzhuangItem1UI {
        constructor() {
            super();
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            this.list.itemRender = ui.views.wowhuanzhuang.ui_wowhuangzhuangItem2UI;
            this.list.renderHandler = new Laya.Handler(this, this.onItemHandler);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onClick));
        }
        onClick() {
            if (this._data) {
                let req = new WarcraftSkinAttr_req;
                req.fid = this._data.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onAdd() {
        }
        onRemove() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        onItemHandler(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.lab.text = MainModel.Ins.getAttrNameIdByID(id) + ":" + attrConvert(id, val);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let cfg = WowHuanZhuangListProxy.Ins.GetDataById(value.f_CharacterID);
            this.creatAvatar(cfg.f_ImageID);
            this.lab3.text = value.f_GetMethod;
            this.list.array = value.f_CharacterAttr.split("|");
            let data = WowHuanZhuangModel.Ins.attrList.find(ele => ele.fid == value.f_id);
            if (data.state == 0) {
                this.btn.disabled = true;
                this.lab4.text = "激活";
            }
            else if (data.state == 1) {
                this.btn.disabled = false;
                this.lab4.text = "激活";
            }
            else if (data.state == 2) {
                this.btn.disabled = true;
                this.lab4.text = "已激活";
            }
        }
        creatAvatar(skinId) {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            this._avatar = AvatarFactory.createCharacter(skinId);
            this._avatar.scale(0.7, 0.7);
            this.sp.addChild(this._avatar);
        }
    }

    exports.WowHuanZhuangItem = WowHuanZhuangItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WowHuanZhuangView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("wowhuanzhuang.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wowhuanzhuang.ui_wowhuangzhuangView1UI;
                this.bindClose(this._ui.btn_close);
                const tabsSkin = [this._ui.tab1, this._ui.tab2, this._ui.tab3];
                let st = E.getLang("wowhztab1");
                this.tabList = st.split(":");
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._ui.list.itemRender = WowHuanZhuangItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab.text = this.tabList[index];
            if (sel) {
                skin.img.visible = true;
            }
            else {
                skin.img.visible = false;
            }
        }
        onTabSelectHandler(v) {
            let index = v + 1;
            this._ui.list.array = WowHuanZhuangAttributeProxy.Ins.getListByType(index);
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            WowHuanZhuangModel.Ins.on(WowHuanZhuangModel.UPDATA_ATTR, this, this.onUpdataView);
            this.tabsCtl.selectIndex = 0;
        }
        onExit() {
            WowHuanZhuangModel.Ins.off(WowHuanZhuangModel.UPDATA_ATTR, this, this.onUpdataView);
            this.tabsCtl.dispose();
        }
        onUpdataView() {
            this._ui.list.refresh();
        }
    }

    exports.WowHuanZhuangView1 = WowHuanZhuangView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WowHuanZhuangModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new WowHuanZhuangModule();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            this.Reg(new WowHuanZhuangView(EViewType.WowHuanZhuangView));
            this.Reg(new WowHuanZhuangView1(EViewType.WowHuanZhuangView1));
            E.MsgMgr.AddMsg(MSGID.WarcraftSkinInit, this.WarcraftSkinInit, this);
            E.MsgMgr.AddMsg(MSGID.WarcraftSkin, this.WarcraftSkin, this);
            E.MsgMgr.AddMsg(MSGID.WarcraftSkinListUpdate, this.WarcraftSkinListUpdate, this);
            E.MsgMgr.AddMsg(MSGID.WarcraftAttrListUpdate, this.WarcraftAttrListUpdate, this);
        }
        WarcraftSkinInit(value) {
            WowHuanZhuangModel.Ins.skinList = value.skinList;
            WowHuanZhuangModel.Ins.attrList = value.attrList;
        }
        WarcraftSkin(value) {
            for (let i = 0; i < WowHuanZhuangModel.Ins.skinList.length; i++) {
                if (WowHuanZhuangModel.Ins.skinList[i].type == value.type) {
                    WowHuanZhuangModel.Ins.skinList[i].skinId = value.skinId;
                    break;
                }
            }
            WowHuanZhuangModel.Ins.event(WowHuanZhuangModel.UPDATA_SKINID);
        }
        WarcraftSkinListUpdate(value) {
            for (let i = 0; i < WowHuanZhuangModel.Ins.skinList.length; i++) {
                if (WowHuanZhuangModel.Ins.skinList[i].type == value.type) {
                    WowHuanZhuangModel.Ins.skinList[i].skinIds = WowHuanZhuangModel.Ins.skinList[i].skinIds.concat(value.skinIds);
                    break;
                }
            }
            WowHuanZhuangModel.Ins.event(WowHuanZhuangModel.UPDATA_ALL_SKINID);
        }
        WarcraftAttrListUpdate(value) {
            for (let i = 0; i < value.attrList.length; i++) {
                let index = WowHuanZhuangModel.Ins.attrList.findIndex(ele => ele.fid == value.attrList[i].fid);
                if (index != -1) {
                    WowHuanZhuangModel.Ins.attrList[index] = value.attrList[i];
                }
            }
            WowHuanZhuangModel.Ins.event(WowHuanZhuangModel.UPDATA_ATTR);
        }
    }

    exports.WowHuanZhuangModule = WowHuanZhuangModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZAwardView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("xxzdz.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.xxzdz.ui_xxzdzAwardViewUI;
                this.bindClose(this._ui.close1);
                this.btnList.push(ButtonCtl.Create(this._ui.lingquBtn, new Laya.Handler(this, this.onBtnLQClick)));
                this._timeCtl = new TimeCtl(this._ui.time1);
                this._ui.list.itemRender = ui.views.xxzdz.ui_xxzdzItem7UI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRewardItemRender);
            }
        }
        onRewardItemRender(item) {
            let cfg = item.dataSource;
            let arr = cfg.f_Ranking.split("|");
            if (arr.length == 1) {
                let rank = parseInt(arr[0]);
                if (rank == 1 || rank == 2 || rank == 3) {
                    item.rankTf.visible = false;
                    item.icon1.visible = true;
                    item.icon1.skin = "remote/main/main/dfjjc_mc" + rank + ".png";
                }
                else {
                    item.rankTf.visible = true;
                    item.rankTf.text = rank + "";
                    item.icon1.visible = false;
                }
            }
            else {
                item.rankTf.visible = true;
                item.rankTf.text = arr[0] + "-" + arr[1];
                item.icon1.visible = false;
            }
            ItemViewFactory.renderItemSlots(item.rewardList, cfg.f_DailyReward, 10, 0.85, "right");
        }
        onInit() {
            XXZDZModel.Ins.on(XXZDZModel.UPDATA_RANKAWARD_VIEW, this, this.setBtn);
            if (XXZDZModel.Ins.rankingSettle) {
                this._ui.lab.text = XXZDZModel.Ins.rankingSettle + "";
            }
            else {
                this._ui.lab.text = "未上榜";
            }
            this._ui.list.array = StarAwardProxy.Ins.List;
            let time = XXZDZModel.Ins.rewardUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
            this.setBtn();
        }
        onExit() {
            XXZDZModel.Ins.off(XXZDZModel.UPDATA_RANKAWARD_VIEW, this, this.setBtn);
            this._timeCtl.stop();
        }
        setBtn() {
            if (XXZDZModel.Ins.rankRewardState) {
                this._ui.lingquBtn.disabled = false;
                DotManager.addDot(this._ui.lingquBtn);
            }
            else {
                this._ui.lingquBtn.disabled = true;
                DotManager.removeDot(this._ui.lingquBtn);
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        onBtnLQClick() {
            let req = new StarBattleRankReward_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
    }

    exports.XXZDZAwardView = XXZDZAwardView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZGMView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_shopBuyViewUI;
                this.bindClose(this._ui.closeBtn1);
                this.btnList.push(ButtonCtl.Create(this._ui.cancelBtn, new Laya.Handler(this, this.onBtnCanelClick)), ButtonCtl.Create(this._ui.okBtn, new Laya.Handler(this, this.onBtnOKClick)));
            }
        }
        onBtnCanelClick() {
            this.Close();
        }
        onBtnOKClick() {
            if (this._data) {
                if (MainModel.Ins.isItemEnoughSt(this._data.f_TipsPrice, true)) {
                    let req = new SilkBagHandler_req;
                    req.type = 1;
                    req.id = this._data.f_id;
                    SocketMgr.Ins.SendMessageBin(req);
                    this.Close();
                }
            }
        }
        onInit() {
            this._data = this.Data;
            this._ui.nameTF.text = this._data.f_TipsName;
            this._ui.descTf.text = this._data.f_TipsTips;
            let skin = `o/star/${this._data.f_Tipsicon}`;
            ItemViewFactory.refreshSlot1(this._ui.item, skin, this._data.f_TipsName, this._data.f_TipsTips);
            let id = parseInt(this._data.f_TipsPrice.split("-")[0]);
            let val = parseInt(this._data.f_TipsPrice.split("-")[1]);
            this._ui.goldIcon.skin = IconUtils.getIconByCfgId(id);
            this._ui.moneyTf.text = val + "";
        }
        onExit() {
        }
    }

    exports.XXZDZGMView = XXZDZGMView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class jnctl {
        constructor(skin) {
            this._ui = skin;
            ButtonCtl.Create(this._ui.btn_add, new Laya.Handler(this, this.onBtnAddClick), false);
            this._ui.img.on(Laya.Event.CLICK, this, this.onImgClick);
            this._timeCtl = new TimeCtl(this._ui.lab_time);
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemoved);
        }
        onAdd() {
        }
        onRemoved() {
            this._timeCtl.stop();
        }
        onBtnAddClick() {
            if (this._isAdd) {
                E.ViewMgr.Open(EViewType.XXZDZMJView);
            }
        }
        onImgClick(e) {
            e.stopPropagation();
            if (this._data) {
                if (this._isTip) {
                    let cfg = StarPocketTipsProxy.Ins.GetDataById(this._data.id);
                    MainModel.Ins.showSmallTips(cfg.f_TipsName, cfg.f_TipsTips, this._ui.img);
                }
                else {
                    MainModel.Ins.queryMsg("删除锦囊会把所有的锦囊次数清零", 0, 0, 0, new Laya.Handler(this, this.sendCmd));
                }
            }
        }
        sendCmd() {
            if (this._data) {
                let req = new SilkBagHandler_req;
                req.type = 0;
                req.id = this._data.id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        setData(value, isAdd, isTip) {
            if (!value)
                return;
            this._isTip = isTip;
            this._isAdd = isAdd;
            this._data = value.data;
            if (this._data) {
                let cfg = StarPocketTipsProxy.Ins.GetDataById(this._data.id);
                this._ui.img.visible = true;
                this._ui.img.skin = `o/star/${cfg.f_Tipsicon}`;
                if (cfg.f_ParaType == 1) {
                    this._ui.sp.visible = true;
                    this._ui.lab2.visible = false;
                    let time = this._data.val - TimeUtil.serverTime;
                    if (time > 0) {
                        this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                    }
                    else {
                        this.endTime();
                        this._timeCtl.stop();
                    }
                }
                else {
                    this._ui.sp.visible = false;
                    this._ui.lab2.visible = true;
                    this._ui.lab2.text = this._data.val + "";
                    this._timeCtl.stop();
                }
            }
            else {
                this._ui.img.visible = false;
                this._ui.sp.visible = false;
                this._ui.lab2.visible = false;
                this._timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._ui.img.visible = false;
            this._ui.sp.visible = false;
            this._ui.lab2.visible = false;
        }
    }

    exports.jnctl = jnctl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZItem extends ui.views.xxzdz.ui_xxzdzItem1UI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClick);
        }
        onClick() {
            if (this._data) {
                E.ViewMgr.Open(EViewType.XXZDZGMView, null, this._data);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.img.skin = `o/star/${value.f_Tipsicon}`;
            this.lab_name.text = value.f_TipsName;
            let id = parseInt(value.f_TipsPrice.split("-")[0]);
            let val = parseInt(value.f_TipsPrice.split("-")[1]);
            this.img2.skin = IconUtils.getIconByCfgId(id);
            this.lab.text = val + "";
        }
    }

    exports.XXZDZItem = XXZDZItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZMJView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("xxzdz.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.xxzdz.ui_xxzdzMJViewUI;
                this.bindClose(this._ui.btn_close);
                ValCtl.Create(this._ui.lab2, this._ui.img2, ECellType.JingNang);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)));
                this._jnctl1 = new jnctl(this._ui.item1);
                this._jnctl2 = new jnctl(this._ui.item2);
                this._jnctl3 = new jnctl(this._ui.item3);
                this._ui.list.itemRender = XXZDZItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("xxzdzJNTitle", "xxzdzJNDec");
        }
        onInit() {
            let val = MainModel.Ins.mRoleData.getVal(ECellType.JingNang);
            this._ui.lab2.text = StringUtil.val2m(val);
            XXZDZModel.Ins.on(XXZDZModel.UPDATA_VIEW, this, this.updataView);
            this.updataView();
        }
        onExit() {
            XXZDZModel.Ins.off(XXZDZModel.UPDATA_VIEW, this, this.updataView);
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        updataView() {
            for (let i = 0; i < 3; i++) {
                let obj = {};
                if (XXZDZModel.Ins.silkBags[i]) {
                    obj.data = XXZDZModel.Ins.silkBags[i];
                    let cfg = StarPocketTipsProxy.Ins.GetDataById(XXZDZModel.Ins.silkBags[i].id);
                    this._ui["lab_name" + (i + 1)].text = cfg.f_TipsName;
                }
                else {
                    obj.data = null;
                    this._ui["lab_name" + (i + 1)].text = "";
                }
                this["_jnctl" + (i + 1)].setData(obj, false, false);
            }
            this._ui.list.array = StarPocketTipsProxy.Ins.List;
        }
    }

    exports.XXZDZMJView = XXZDZMJView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZCtl2 {
        constructor(skin) {
            this._ui = skin;
            this._plusCtl = FontCtlFactory.createPlus();
            this._ui.on(Laya.Event.CLICK, this, this.onClickHanlder);
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
        }
        onRemove() {
            this.clearAvatar();
        }
        onClickHanlder() {
            if (this._data) {
                let vo = XXZDZModel.Ins.starRankList.find(ele => ele.ranking == this._data.rank);
                if (vo) {
                    if (vo.accountId != MainModel.Ins.mRoleData.mPlayer.AccountId) {
                        let req = new StarWatchPlayerInfo_req();
                        req.accountId = vo.accountId;
                        SocketMgr.Ins.SendMessageBin(req);
                    }
                }
            }
        }
        setData(value) {
            if (value) {
                this._ui.visible = true;
                this._data = value;
                this._ui.icon1.skin = "remote/main/main/dfjjc_mc" + this._data.rank + ".png";
                this._ui.titleImg.skin = ChengHaoModel.Ins.getTitleImg(this._data.titleid);
                this._ui.img2.skin = IconUtils.getIconByCfgId(ECellType.XingXing);
                let vo = XXZDZModel.Ins.starRankList.find(ele => ele.ranking == this._data.rank);
                if (vo) {
                    this._ui.lab.text = vo.starNum + "";
                    this._ui.nameTf.text = vo.serverName + " " + vo.nickName;
                    let v = StringUtil.val2Atlas(vo.plus);
                    this._plusCtl.setValue(this._ui.plugs, v);
                }
                else {
                    this._ui.lab.text = "";
                    this._ui.nameTf.text = "";
                    this._plusCtl.setValue(this._ui.plugs, "");
                }
                this.clearAvatar();
                this.avatar = AvatarFactory.createAvatarByStSkin(this._data.enemySkin);
                this.avatar.dir = EAvatarDir.Right;
                this._ui.avatarCon.addChild(this.avatar);
            }
            else {
                this._ui.visible = false;
                this.clearAvatar();
            }
        }
        clearAvatar() {
            if (this.avatar) {
                this.avatar.dispose();
                this.avatar = null;
            }
        }
    }

    exports.XXZDZCtl2 = XXZDZCtl2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZCtl3 {
        constructor(skin) {
            this._ui = skin;
            this._ui.bg1.on(Laya.Event.CLICK, this, this.onClick);
            this._plusCtl = FontCtlFactory.createPlus();
        }
        onClick() {
            if (this._data) {
                if (this._data.accountId != MainModel.Ins.mRoleData.mPlayer.AccountId) {
                    let req = new StarWatchPlayerInfo_req();
                    req.accountId = this._data.accountId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        setData(value, type = 1) {
            if (!value)
                return;
            this._data = value;
            if (this._data.ranking == 1 || this._data.ranking == 2 || this._data.ranking == 3) {
                this._ui.sp.visible = false;
                this._ui.paiming.skin = "remote/main/main/dfjjc_mc" + this._data.ranking + ".png";
            }
            else {
                this._ui.sp.visible = true;
                this._ui.paiming.skin = "";
                if (this._data.ranking <= 200) {
                    this._ui.mingcitf.text = this._data.ranking + "";
                }
                else {
                    this._ui.mingcitf.text = "200+";
                }
            }
            MainModel.Ins.setTTHead(this._ui.icon, MainModel.Ins.convertHead(this._data.headUrl));
            this._ui.nameTf.text = this._data.nickName;
            this._ui.lab_qf.text = "(" + this._data.serverName + ")";
            this._ui.img_title.skin = ChengHaoModel.Ins.getTitleImg(this._data.titleId);
            let v = StringUtil.val2Atlas(this._data.plus);
            this._plusCtl.setValue(this._ui.plusCon, v);
            this._ui.img2.skin = IconUtils.getIconByCfgId(ECellType.XingXing);
            this._ui.lab_num.text = this._data.starNum + "";
            if (type == 1) {
                this._ui.bg.skin = "remote/xxzdz/dfjjc_xs.png";
            }
            else {
                this._ui.bg.skin = "remote/xxzdz/dfjjc_xszj.png";
            }
        }
    }

    exports.XXZDZCtl3 = XXZDZCtl3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZItem3 extends ui.views.xxzdz.ui_xxzdzItem3UI {
        constructor() {
            super();
            this.ctl = new XXZDZCtl3(this);
        }
    }

    exports.XXZDZItem3 = XXZDZItem3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZRankView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("jjc.atlas");
            this.addAtlas("xxzdz.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.xxzdz.ui_xxzdzRankViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_rz, new Laya.Handler(this, this.onBtnRZClick)), ButtonCtl.Create(this._ui.btn_rank, new Laya.Handler(this, this.onBtnRankClick)));
                this._ui.list.itemRender = XXZDZItem3;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._item = new XXZDZCtl3(this._ui.item);
                this._item1 = new XXZDZCtl2(this._ui.item2);
                this._item2 = new XXZDZCtl2(this._ui.item1);
                this._item3 = new XXZDZCtl2(this._ui.item3);
                this._timeCtl = new TimeCtl(this._ui.timetf);
            }
        }
        onInit() {
            XXZDZModel.Ins.on(XXZDZModel.UPDATA_RANK_VIEW, this, this.upDataView);
            XXZDZModel.Ins.on(XXZDZModel.UPDATA_RANKAWARD_VIEW, this, this.setRankRedTip);
            let req = new StarBattleRank_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            XXZDZModel.Ins.off(XXZDZModel.UPDATA_RANK_VIEW, this, this.upDataView);
            XXZDZModel.Ins.off(XXZDZModel.UPDATA_RANKAWARD_VIEW, this, this.setRankRedTip);
            this._timeCtl.stop();
        }
        onBtnRZClick() {
            E.ViewMgr.Open(EViewType.XXZDZRZView);
        }
        onBtnRankClick() {
            E.ViewMgr.Open(EViewType.XXZDZAwardView);
        }
        onItemRender(item) {
            item.ctl.setData(item.dataSource);
        }
        upDataView() {
            let arr = [];
            for (let i = 0; i < XXZDZModel.Ins.starRankList.length; i++) {
                if (XXZDZModel.Ins.starRankList[i].ranking > 3) {
                    arr.push(XXZDZModel.Ins.starRankList[i]);
                }
            }
            this._ui.list.array = arr;
            this._item.setData(XXZDZModel.Ins.myStarRank[0], 2);
            for (let i = 0; i < 3; i++) {
                if (XXZDZModel.Ins.peakJjcAvatar[i]) {
                    this["_item" + (i + 1)].setData(XXZDZModel.Ins.peakJjcAvatar[i]);
                }
                else {
                    this["_item" + (i + 1)].setData(null);
                }
            }
            let time = XXZDZModel.Ins.rewardUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
            this.setRankRedTip();
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        setRankRedTip() {
            if (XXZDZModel.Ins.isRankAwardRedTip()) {
                DotManager.addDot(this._ui.btn_rank, 10);
            }
            else {
                DotManager.removeDot(this._ui.btn_rank);
            }
        }
    }

    exports.XXZDZRankView = XXZDZRankView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZItem5 extends ui.views.xxzdz.ui_xxzdzItem5UI {
        constructor() {
            super();
            this._plusCtl = FontCtlFactory.createPlus();
            ButtonCtl.Create(this.btn_qd, new Laya.Handler(this, this.onBtnQDClick));
        }
        onBtnQDClick() {
            if (this._data) {
                let st = StarConfigProxy.Ins.GetDataById(1).f_precost;
                if (MainModel.Ins.isItemEnoughSt(st, true)) {
                    let req = new StarBattleFight_req;
                    req.accountId = this._data.accountId;
                    SocketMgr.Ins.SendMessageBin(req);
                    E.ViewMgr.Close(EViewType.XXZDZRankView);
                    E.ViewMgr.Close(EViewType.XXZDZRZView);
                }
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            if (value.win) {
                this.img.skin = "remote/xxzdz/winbg.png";
                this.img1.skin = "remote/xxzdz/win.png";
                this.lab_star.text = "星星+" + value.changeVal;
                this.lab_star.color = "#28A121";
                this.btn_qd.visible = false;
            }
            else {
                this.img.skin = "remote/xxzdz/lose_1.png";
                this.img1.skin = "remote/xxzdz/lose.png";
                this.lab_star.text = "星星-" + value.changeVal;
                this.lab_star.color = "#f41501";
                this.btn_qd.visible = true;
                this.img4.skin = IconUtils.getIconByCfgId(ECellType.BaoZi);
                this.lab_num.text = StarConfigProxy.Ins.GetDataById(1).f_precost.split("-")[1];
            }
            this.icon.skin = value.headUrl;
            this.img2.skin = IconUtils.getIconByCfgId(ECellType.XingXing);
            this.lab.text = value.starNum + "";
            this.nameTf.text = value.playerName;
            let v = StringUtil.val2Atlas(value.plus);
            this._plusCtl.setValue(this.plusCon, v);
            this.lab_time.text = TimeUtil.getTimeShow(TimeUtil.serverTime - value.time) + "前";
        }
    }

    exports.XXZDZItem5 = XXZDZItem5;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZRZView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("xxzdz.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.xxzdz.ui_xxzdzRZViewUI;
                this.bindClose(this._ui.btn_close);
                this._ui.list.itemRender = XXZDZItem5;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
            }
        }
        onInit() {
            XXZDZModel.Ins.on(XXZDZModel.UPDATA_RIZHI_VIEW, this, this.onUpdataView);
            let req = new StarBattleLog_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            XXZDZModel.Ins.off(XXZDZModel.UPDATA_RIZHI_VIEW, this, this.onUpdataView);
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        onUpdataView() {
            this._ui.list.array = XXZDZModel.Ins.rizhiList;
        }
    }

    exports.XXZDZRZView = XXZDZRZView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZShopGMView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.xxzdz.ui_xxzdzGMViewUI;
                this.bindClose(this._ui.close1);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_sub, new Laya.Handler(this, this.onBtnSubClick)), ButtonCtl.Create(this._ui.btn_add, new Laya.Handler(this, this.onBtnAddClick)), ButtonCtl.Create(this._ui.btn_add1, new Laya.Handler(this, this.onBtnAdd1Click)), ButtonCtl.Create(this._ui.btn_qx, new Laya.Handler(this, this.onBtnQXClick)), ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick)));
            }
        }
        onInit() {
            this._data = this.Data;
            let vo = XXZDZModel.Ins.starGoods.find(ele => ele.goodsId == this._data.f_goodsid);
            let num = 0;
            if (vo) {
                num = vo.num;
            }
            this._max = this._data.f_BuyLimit - num;
            this._num = 1;
            this.updataView();
        }
        onExit() {
        }
        onBtnSubClick() {
            this._num--;
            this.setBtn();
        }
        onBtnAddClick() {
            this._num++;
            this.setBtn();
        }
        onBtnAdd1Click() {
            this._num += 10;
            this.setBtn();
        }
        onBtnQXClick() {
            this.Close();
        }
        onBtnQDClick() {
            if (this._data) {
                let req = new StarShopBuy_req;
                req.goodsId = this._data.f_goodsid;
                req.num = this._num;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        updataView() {
            let itemVo = new ItemVo();
            let arr = this._data.f_shopitem.split("-");
            itemVo.cfgId = parseInt(arr[0]);
            itemVo.count = parseInt(arr[1]);
            ItemViewFactory.refreshSlot(this._ui.item, itemVo);
            this._ui.lab_title.text = itemVo.getName();
            this.setBtn();
        }
        setBtn() {
            if (this._num <= 1) {
                this._ui.btn_sub.disabled = true;
            }
            else {
                this._ui.btn_sub.disabled = false;
            }
            if (this._num >= this._max) {
                this._ui.btn_add.disabled = true;
            }
            else {
                this._ui.btn_add.disabled = false;
            }
            if (this._max - this._num < 10) {
                this._ui.btn_add1.disabled = true;
            }
            else {
                this._ui.btn_add1.disabled = false;
            }
            this._ui.lab_num.text = this._num + "";
            let arr = this._data.f_itemprice.split("-");
            let id = parseInt(arr[0]);
            let num = parseInt(arr[1]);
            let needC = num * this._num;
            let count = MainModel.Ins.mRoleData.getVal(id);
            this._ui.icon.skin = IconUtils.getIconByCfgId(id);
            this._ui.lab_m.text = needC + "";
            this._ui.lab_d.x = this._ui.lab_m.x + this._ui.lab_m.textField.width;
            let arr1 = this._data.f_shopitem.split("-");
            let idd = parseInt(arr1[0]);
            this._ui.lab_d.text = " 购买" + IconUtils.getNameByID(idd);
            if (count >= needC) {
                this._ui.lab_m.color = "#54e80d";
            }
            else {
                this._ui.lab_m.color = "#ff1e00";
            }
        }
    }

    exports.XXZDZShopGMView = XXZDZShopGMView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZItem6 extends ui.views.xxzdz.ui_xxzdzItem6UI {
        constructor() {
            super();
            this.lab_num.visible = false;
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            if (this._data) {
                let vo = XXZDZModel.Ins.starGoods.find(ele => ele.goodsId == this._data.f_goodsid);
                let num = 0;
                if (vo) {
                    num = vo.num;
                }
                if (num >= this._data.f_BuyLimit) {
                    E.ViewMgr.ShowMidError("今日已售，明日再来");
                    return;
                }
                E.ViewMgr.Open(EViewType.XXZDZShopBuyView, null, this._data);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let voo = XXZDZModel.Ins.starGoods.find(ele => ele.goodsId == value.f_goodsid);
            let num = 0;
            if (voo) {
                num = voo.num;
            }
            this.lab_xg.text = "每周限购" + num + "/" + value.f_BuyLimit;
            let vo = new ItemVo();
            vo.cfgId = parseInt(value.f_shopitem.split("-")[0]);
            vo.count = parseInt(value.f_shopitem.split("-")[1]);
            ItemViewFactory.refreshSlot(this.item, vo, false);
            this.lab_name.text = vo.getName();
            this.icon.skin = IconUtils.getIconByCfgId(parseInt(value.f_itemprice.split("-")[0]));
            this.lab.text = value.f_itemprice.split("-")[1];
        }
    }

    exports.XXZDZItem6 = XXZDZItem6;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZShopView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("xxzdz.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.xxzdz.ui_xxzdzShopViewUI;
                this.bindClose(this._ui.btn_close);
                this._ui.list.itemRender = XXZDZItem6;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                ValCtl.Create(this._ui.lab2, this._ui.img2, ECellType.XZJJ);
                this._timeCtl = new TimeCtl(this._ui.time1);
            }
        }
        onInit() {
            XXZDZModel.Ins.on(XXZDZModel.UPDATA_SHOP_VIEW, this, this.onUpdataView);
            let req = new StarShopOpen_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            XXZDZModel.Ins.off(XXZDZModel.UPDATA_SHOP_VIEW, this, this.onUpdataView);
            this._timeCtl.stop();
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        onUpdataView() {
            let val = MainModel.Ins.mRoleData.getVal(ECellType.XZJJ);
            this._ui.lab2.text = StringUtil.val2m(val);
            this._ui.list.array = StarShopProxy.Ins.List;
            let time = XXZDZModel.Ins.goodsFreshUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
    }

    exports.XXZDZShopView = XXZDZShopView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZItem4 extends ui.views.xxzdz.ui_xxzdzItem4UI {
        constructor() {
            super();
            this._plusCtl = FontCtlFactory.createPlus();
            ButtonCtl.Create(this.btn_qd, new Laya.Handler(this, this.onBtnQDClick));
            for (let i = 1; i < 4; i++) {
                this["img" + i].on(Laya.Event.CLICK, this, this.onClick, [i]);
            }
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onClick(index, e) {
            e.stopPropagation();
            let cfg = StarPocketTipsProxy.Ins.GetDataById(this._data.silkBags[index - 1].id);
            if (cfg) {
                MainModel.Ins.showSmallTips(cfg.f_TipsName, cfg.f_TipsTips, this["img" + index]);
            }
        }
        onAdd() {
        }
        onRemove() {
            this.clearAvatar();
        }
        onBtnQDClick() {
            if (this._data) {
                let st = StarConfigProxy.Ins.GetDataById(1).f_precost;
                if (MainModel.Ins.isItemEnoughSt(st, true)) {
                    E.ViewMgr.Close(EViewType.XXZDZTZView);
                    let req = new StarBattleFight_req;
                    req.accountId = this._data.accountId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        clearAvatar() {
            if (this.avatar) {
                this.avatar.dispose();
                this.avatar = null;
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let data = this._data.skin[0];
            this.nameTf.text = data.name;
            let v = StringUtil.val2Atlas(data.plus);
            this._plusCtl.setValue(this.plugs, v);
            this.clearAvatar();
            this.avatar = AvatarFactory.createAvatarByStSkin(data.enemySkin);
            this.avatar.dir = EAvatarDir.Right;
            this.avatarCon.addChild(this.avatar);
            let arr = StarConfigProxy.Ins.GetDataById(1).f_precost.split("-");
            this.icon1.skin = IconUtils.getIconByCfgId(parseInt(arr[0]));
            this.lab_num.text = arr[1];
            this.icon.skin = IconUtils.getIconByCfgId(ECellType.XingXing);
            this.lab.text = this._data.starNum + "";
            for (let i = 0; i < 3; i++) {
                if (this._data.silkBags[i]) {
                    this["item" + (i + 1)].visible = true;
                    let cfg = StarPocketTipsProxy.Ins.GetDataById(this._data.silkBags[i].id);
                    this["img" + (i + 1)].skin = `o/star/${cfg.f_Tipsicon}`;
                }
                else {
                    this["item" + (i + 1)].visible = false;
                }
            }
            this.sp.width = 56 * this._data.silkBags.length;
            this.sp.x = (200 - this.sp.width) / 2;
        }
    }

    exports.XXZDZItem4 = XXZDZItem4;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZTZView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("xxzdz.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.xxzdz.ui_xxzdzTZViewUI;
                this.bindClose(this._ui.btn_close);
                ValCtl.Create(this._ui.lab2, this._ui.img, ECellType.BaoZi);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick)), ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)));
                this._ui.list.itemRender = XXZDZItem4;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("xxzdzTZTitle", "xxzdzTZDec");
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        onBtnQDClick() {
            let arr = StarConfigProxy.Ins.GetDataById(1).f_refreshcost.split("-");
            MainModel.Ins.queryMsg("刷新对手", parseInt(arr[0]), parseInt(arr[1]), EQuickMsg.XXZDZ, new Laya.Handler(this, this.onClickHandler));
        }
        onClickHandler() {
            let st = StarConfigProxy.Ins.GetDataById(1).f_refreshcost;
            if (MainModel.Ins.isItemEnoughSt(st, true)) {
                let req = new StarBattleEnemys_req;
                req.type = 1;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onInit() {
            XXZDZModel.Ins.on(XXZDZModel.UPDATA_TIAOZHAN_VIEW, this, this.onUpdataView);
            let req = new StarBattleEnemys_req;
            req.type = 0;
            SocketMgr.Ins.SendMessageBin(req);
            let val = MainModel.Ins.mRoleData.getVal(ECellType.BaoZi);
            this._ui.lab2.text = StringUtil.val2m(val);
            this._ui.img.skin = IconUtils.getIconByCfgId(ECellType.BaoZi);
            let arr = StarConfigProxy.Ins.GetDataById(1).f_refreshcost.split("-");
            this._ui.img2.skin = IconUtils.getIconByCfgId(parseInt(arr[0]));
            this._ui.nameTf.text = arr[1];
        }
        onExit() {
            XXZDZModel.Ins.on(XXZDZModel.UPDATA_TIAOZHAN_VIEW, this, this.onUpdataView);
        }
        onUpdataView() {
            this._ui.list.array = XXZDZModel.Ins.starBEList;
        }
    }

    exports.XXZDZTZView = XXZDZTZView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PlayEffectManager {
        static get Ins() {
            if (!this._ins) {
                this._ins = new PlayEffectManager();
            }
            return this._ins;
        }
        playStarWar(url, con, x, y, val, index, that, func) {
            let atlasurl = url.replace(".skel", ".atlas");
            Laya.loader.load(atlasurl, new Laya.Handler(this, () => {
                let _animCtl = new BetterEffectSpine();
                _animCtl.autoFree = true;
                _animCtl.setPos(con, x, y);
                _animCtl.load(url);
                _animCtl.xxzdz(val, index);
                if (that) {
                    _animCtl.once(BaseSpineCoreSkel.PLAY_END, that, func);
                }
            }), null, Laya.Loader.TEXT);
        }
    }

    exports.PlayEffectManager = PlayEffectManager;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("xxzdz.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.xxzdz.ui_xxzdzViewUI;
                this.bindClose(this._ui.btn_close);
                this._model = XXZDZModel.Ins;
                this.btnList.push(ButtonCtl.Create(this._ui.btn_qd, new Laya.Handler(this, this.onBtnQDClick)), ButtonCtl.Create(this._ui.btn_mj, new Laya.Handler(this, this.onBtnMJClick)), ButtonCtl.Create(this._ui.btn_shop, new Laya.Handler(this, this.onBtnShopClick)), ButtonCtl.Create(this._ui.btn_phb, new Laya.Handler(this, this.onBtnPHBClick)), ButtonCtl.Create(this._ui.btn_tz, new Laya.Handler(this, this.onBtnTZClick)), ButtonCtl.Create(this._ui.btn_shezhi, new Laya.Handler(this, this.onBtnSZClick)), ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)));
                this._ui.sp.on(Laya.Event.CLICK, this, this.onSpClick);
                this._tw = new Laya.Tween;
                this._jnctl1 = new jnctl(this._ui.item1);
                this._jnctl2 = new jnctl(this._ui.item2);
                this._jnctl3 = new jnctl(this._ui.item3);
                this._timeCtl = new TimeCtl(this._ui.lab_time);
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("xxzdzTitle", "xxzdzDec");
        }
        onInit() {
            this._model.on(XXZDZModel.UPDATA_VIEW, this, this.onUpdataView);
            this._model.on(XXZDZModel.UPDATA_RANKAWARD_VIEW, this, this.setRankRedTip);
            this._model.on(XXZDZModel.UPDATA_ZHUANPAN_VIEW, this, this.playTween);
            this._model.on(XXZDZModel.UPDATA_SHOP_VIEW, this, this.updataShop);
            MainModel.Ins.on(MainEvent.ValChangeCell, this, this.onValChange);
            this._isPlay = false;
            this.setAuto(false);
            this.updataView();
            if (this._model.wheelNum == 0) {
                this._ui.img_zp.rotation = 0;
            }
            else {
                this._ui.img_zp.rotation = 36 * (this._model.wheelNum - 1);
            }
            if (this._model.isFight) {
                this._model.isFight = false;
                this.setAuto(true);
            }
        }
        onExit() {
            this._model.off(XXZDZModel.UPDATA_VIEW, this, this.onUpdataView);
            this._model.off(XXZDZModel.UPDATA_ZHUANPAN_VIEW, this, this.playTween);
            this._model.off(XXZDZModel.UPDATA_RANKAWARD_VIEW, this, this.setRankRedTip);
            this._model.off(XXZDZModel.UPDATA_SHOP_VIEW, this, this.updataShop);
            MainModel.Ins.off(MainEvent.ValChangeCell, this, this.onValChange);
            this._isPlay = false;
            Laya.Tween.clearAll(this._ui.img_zp);
            this._tw.clear();
            this._timeCtl.stop();
            this._timeCtl.dispose();
            this.setAuto(false);
            E.ViewMgr.Close(EViewType.XXZDZMJView);
            E.ViewMgr.Close(EViewType.XXZDZRankView);
            E.ViewMgr.Close(EViewType.XXZDZRZView);
            E.ViewMgr.Close(EViewType.XXZDZShopView);
            E.ViewMgr.Close(EViewType.XXZDZTZView);
            E.ViewMgr.Close(EViewType.XXZDZGMView);
            E.ViewMgr.Close(EViewType.XXZDZAwardView);
            E.ViewMgr.Close(EViewType.XXZDZShopBuyView);
        }
        onValChange(id) {
            if (id == ECellType.JGYS) {
                if (!this._isPlay) {
                    let val = MainModel.Ins.mRoleData.getVal(ECellType.JGYS);
                    this._ui.lab6.text = val + "/" + StarConfigProxy.Ins.GetDataById(1).f_keymax;
                }
            }
        }
        onBtnMJClick() {
            E.ViewMgr.Open(EViewType.XXZDZMJView);
        }
        onBtnShopClick() {
            E.ViewMgr.Open(EViewType.XXZDZShopView);
        }
        onBtnPHBClick() {
            E.ViewMgr.Open(EViewType.XXZDZRankView);
        }
        onBtnTZClick() {
            E.ViewMgr.Open(EViewType.XXZDZTZView);
        }
        onSpClick() {
            let req = new StarBattleReward_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnQDClick() {
            if (this._isAtuo) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("已关闭自动转盘");
                return;
            }
            this.sendCmd();
        }
        onBtnSZClick() {
            if (this._isAtuo) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("已关闭自动转盘");
                return;
            }
            this.setAuto(true);
        }
        setAuto(v) {
            this._isAtuo = v;
            if (v) {
                Laya.timer.frameLoop(1, this, this.onAutoHandler);
                this._ui.lab_qd.text = "启动中";
                this.sendCmd();
            }
            else {
                Laya.timer.clear(this, this.onAutoHandler);
                this._ui.lab_qd.text = "启动";
            }
        }
        sendCmd() {
            if (!this._isPlay) {
                let val = MainModel.Ins.mRoleData.getVal(ECellType.JGYS);
                if (!val) {
                    this.setAuto(false);
                    let cfg = ItemProxy.Ins.getCfg(ECellType.JGYS);
                    E.ViewMgr.ShowMidError(main.itemName(cfg.f_name) + "不足");
                }
                else {
                    this._ui.lab6.text = val - 1 + "/" + StarConfigProxy.Ins.GetDataById(1).f_keymax;
                    let req = new TurnWheel_req;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        onAutoHandler() {
            this._ui.chilun.rotation += 1;
        }
        playTween() {
            LogSys.Log("playTween....");
            this._isPlay = true;
            this._ui.img_zp.rotation = 0;
            let rot;
            if (this._model.wheelNum == 0) {
                rot = 0;
            }
            else {
                rot = 36 * (this._model.wheelNum - 1);
            }
            this._tw.to(this._ui.img_zp, { rotation: 1080 + rot }, 1500, Laya.Ease.sineOut, Laya.Handler.create(this, this.onComplete));
        }
        onComplete() {
            let cfg = StarWheelProxy.Ins.GetDataById(this._model.wheelNum);
            if (!cfg) {
                return;
            }
            let val;
            let arr = cfg.f_Prerob.split("-");
            if (arr.length == 1) {
                val = parseInt(arr[0]);
            }
            else {
                val = parseInt(arr[1]);
            }
            let index = 0;
            switch (cfg.f_rewardstype) {
                case 1:
                    index = 4;
                    break;
                case 2:
                    index = 3;
                    break;
                case 3:
                    index = 1;
                    break;
                case 4:
                    index = 0;
                    break;
                case 5:
                    index = 2;
                    break;
            }
            PlayEffectManager.Ins.playStarWar("o/spine/baozisell/baozisell.skel", this._ui, 370, 480, val, index, this, this.onAniComplete);
        }
        onAniComplete() {
            this._isPlay = false;
            this.updataView();
            let cfg = StarWheelProxy.Ins.GetDataById(this._model.wheelNum);
            if (!cfg) {
                return;
            }
            if (cfg.f_rewardstype != 1) {
                if (this._isAtuo) {
                    this.sendCmd();
                }
            }
            else {
                if (this._isAtuo) {
                    this._model.isFight = true;
                }
                let req = new StarStrike_req;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onUpdataView() {
            this.updataView();
        }
        updataView() {
            for (let i = 0; i < 3; i++) {
                let obj = {};
                if (this._model.silkBags[i]) {
                    obj.data = this._model.silkBags[i];
                }
                else {
                    obj.data = null;
                }
                this["_jnctl" + (i + 1)].setData(obj, true, true);
            }
            if (this._model.rewardList.length) {
                this._ui.sp.visible = true;
                this._ui.img3.skin = IconUtils.getIconByCfgId(this._model.rewardList[0].id);
                this._ui.lab3.text = this._model.rewardList[0].count + "";
            }
            else {
                this._ui.sp.visible = false;
            }
            this._ui.img4.skin = IconUtils.getIconByCfgId(ECellType.XingXing);
            this._ui.lab4.text = this._model.starNum + "";
            if (this._model.ranking > 200) {
                this._ui.lab_phb.text = "200+";
            }
            else {
                this._ui.lab_phb.text = this._model.ranking + "";
            }
            this._ui.lab_xh.text = StarConfigProxy.Ins.GetDataById(1).f_precost.split("-")[1];
            let time = this._model.keyRecoveryUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
            if (this._model.isZhuanPanRedTip()) {
                DotManager.addDot(this._ui.btn_qd);
            }
            else {
                DotManager.removeDot(this._ui.btn_qd);
            }
            this.setRankRedTip();
            let val = MainModel.Ins.mRoleData.getVal(ECellType.JingNang);
            this._ui.img1.skin = IconUtils.getIconByCfgId(ECellType.JingNang);
            this._ui.lab1.text = StringUtil.val2m(val);
            val = MainModel.Ins.mRoleData.getVal(ECellType.BaoZi);
            this._ui.lab5.text = StringUtil.val2m(val);
            this._ui.img5.skin = IconUtils.getIconByCfgId(ECellType.BaoZi);
            this._ui.img6.skin = IconUtils.getIconByCfgId(ECellType.JGYS);
            val = MainModel.Ins.mRoleData.getVal(ECellType.JGYS);
            this._ui.lab6.text = val + "/" + StarConfigProxy.Ins.GetDataById(1).f_keymax;
        }
        setRankRedTip() {
            if (this._model.isRankAwardRedTip()) {
                DotManager.addDot(this._ui.btn_phb);
            }
            else {
                DotManager.removeDot(this._ui.btn_phb);
            }
            this._ui.img2.skin = IconUtils.getIconByCfgId(ECellType.XZJJ);
            let val = MainModel.Ins.mRoleData.getVal(ECellType.XZJJ);
            this._ui.lab2.text = StringUtil.val2m(val);
        }
        updataShop() {
            let val = MainModel.Ins.mRoleData.getVal(ECellType.JingNang);
            this._ui.lab1.text = StringUtil.val2m(val);
            val = MainModel.Ins.mRoleData.getVal(ECellType.XZJJ);
            this._ui.lab2.text = StringUtil.val2m(val);
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal) + "后恢复";
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
    }

    exports.XXZDZView = XXZDZView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new XXZDZModule();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            this._model = XXZDZModel.Ins;
            this.Reg(new XXZDZView(EViewType.XXZDZView));
            this.Reg(new XXZDZMJView(EViewType.XXZDZMJView));
            this.Reg(new XXZDZRankView(EViewType.XXZDZRankView));
            this.Reg(new XXZDZRZView(EViewType.XXZDZRZView));
            this.Reg(new XXZDZShopView(EViewType.XXZDZShopView));
            this.Reg(new XXZDZTZView(EViewType.XXZDZTZView));
            this.Reg(new XXZDZGMView(EViewType.XXZDZGMView));
            this.Reg(new XXZDZAwardView(EViewType.XXZDZAwardView));
            this.Reg(new XXZDZShopGMView(EViewType.XXZDZShopBuyView));
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onMainViewInit);
            E.MsgMgr.AddMsg(MSGID.StarBattleInit, this.StarBattleInit, this);
            E.MsgMgr.AddMsg(MSGID.StarBattleKeyRecovery, this.StarBattleKeyRecovery, this);
            E.MsgMgr.AddMsg(MSGID.StarBattleReward, this.StarBattleReward, this);
            E.MsgMgr.AddMsg(MSGID.TurnWheel, this.TurnWheel, this);
            E.MsgMgr.AddMsg(MSGID.StarBattleEnemys, this.StarBattleEnemys, this);
            E.MsgMgr.AddMsg(MSGID.StarBattleFight, this.StarBattleFight, this);
            E.MsgMgr.AddMsg(MSGID.StarNumChange, this.StarNumChange, this);
            E.MsgMgr.AddMsg(MSGID.SilkBagHandler, this.SilkBagHandler, this);
            E.MsgMgr.AddMsg(MSGID.StarBattleLog, this.StarBattleLog, this);
            E.MsgMgr.AddMsg(MSGID.StarBattleRankReward, this.StarBattleRankReward, this);
            E.MsgMgr.AddMsg(MSGID.StarBattleRank, this.StarBattleRank, this);
            E.MsgMgr.AddMsg(MSGID.StarShopBuy, this.StarShopBuy, this);
        }
        StarBattleInit(value) {
            this._model.wheelNum = value.wheelNum;
            this._model.keyRecoveryUnix = value.keyRecoveryUnix;
            this._model.ranking = value.ranking;
            this._model.starNum = value.starNum;
            this._model.rewardList = value.rewardList;
            this._model.silkBags = value.silkBags;
            this._model.rankingSettle = value.rankingSettle;
            this._model.rankRewardState = value.rankRewardState;
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setRedTip);
        }
        setRedTip() {
            MainModel.Ins.updateJJC_Red();
            this.event(XXZDZModel.RED_TIP);
        }
        StarBattleKeyRecovery(value) {
            this._model.keyRecoveryUnix = value.keyRecoveryUnix;
        }
        StarBattleReward(value) {
            this._model.rewardList = value.rewardList;
            this._model.event(XXZDZModel.UPDATA_VIEW);
            this.onMainViewInit();
        }
        TurnWheel(value) {
            this._model.wheelNum = value.wheelNum;
            this._model.event(XXZDZModel.UPDATA_ZHUANPAN_VIEW);
        }
        StarBattleEnemys(value) {
            this._model.starBEList = value.dataList;
            this._model.event(XXZDZModel.UPDATA_TIAOZHAN_VIEW);
        }
        StarBattleFight(value) {
            this._model.starPercent = value.starPercent;
            this._model.ranking = value.ranking;
            this._model.event(XXZDZModel.UPDATA_VIEW);
        }
        StarNumChange(value) {
            this._model.starNum = value.starNum;
        }
        SilkBagHandler(value) {
            this._model.silkBags = value.silkBags;
            this._model.event(XXZDZModel.UPDATA_VIEW);
        }
        StarBattleLog(value) {
            this._model.rizhiList = value.dataList;
            this._model.event(XXZDZModel.UPDATA_RIZHI_VIEW);
        }
        StarBattleRankReward(value) {
            this._model.rankRewardState = value.rewardState;
            this._model.event(XXZDZModel.UPDATA_RANKAWARD_VIEW);
            this.onMainViewInit();
        }
        StarBattleRank(value) {
            this._model.starRankList = value.dataList;
            this._model.myStarRank = value.self;
            this._model.peakJjcAvatar = value.top3;
            this._model.rewardUnix = value.rewardUnix;
            this._model.event(XXZDZModel.UPDATA_RANK_VIEW);
        }
        StarShopBuy(value) {
            this._model.starGoods = value.dataList;
            this._model.goodsFreshUnix = value.goodsFreshUnix;
            this._model.event(XXZDZModel.UPDATA_SHOP_VIEW);
            E.ViewMgr.Close(EViewType.XXZDZShopBuyView);
        }
    }

    exports.XXZDZModule = XXZDZModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YaoQingModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new YaoQingModel();
            }
            return this._ins;
        }
    }
    YaoQingModel.UPDATA_VIEW = "UPDATA_VIEW";
    YaoQingModel.UPDATA_RED = "UPDATA_RED";

    exports.YaoQingModel = YaoQingModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YaoQingValueProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new YaoQingValueProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Invitation_Value";
        }
    }
    class YaoQingInProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new YaoQingInProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Invitation";
        }
    }

    exports.YaoQingInProxy = YaoQingInProxy;
    exports.YaoQingValueProxy = YaoQingValueProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YaoQingItem extends ui.views.yaoqing.ui_yqItemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
        }
        onBtnClick() {
            E.sdk.goShareData('inviterId=' + MainModel.Ins.mRoleData.AccountId);
        }
        setData(value) {
            if (value.data) {
                MainModel.Ins.setTTHead(this.icon, MainModel.Ins.convertHead(value.data.portrait));
                this.lab.text = value.data.name;
                this.lab_lv.text = "Lv." + value.data.level;
                this.btn.visible = false;
                if (value.data.level >= 100) {
                    this.sp.visible = true;
                }
                else {
                    this.sp.visible = false;
                }
            }
            else {
                this.icon.skin = "";
                this.lab.text = "";
                this.lab_lv.text = "";
                this.btn.visible = true;
                this.sp.visible = false;
            }
        }
    }

    exports.YaoQingItem = YaoQingItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YaoQingItem1 extends ui.views.yaoqing.ui_yqItem1UI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn_yq, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn_lq, new Laya.Handler(this, this.onBtnLQClick));
        }
        onBtnClick() {
            E.sdk.goShareData('inviterId=' + MainModel.Ins.mRoleData.AccountId);
        }
        onBtnLQClick() {
            if (this._data) {
                let req = new InvitationGetReward_req;
                req.fid = this._data.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let vo = new ItemVo();
            vo.cfgId = parseInt(value.f_Rewardinvitation.split("-")[0]);
            vo.count = parseInt(value.f_Rewardinvitation.split("-")[1]);
            ItemViewFactory.refreshSlot(this.item.item, vo);
            DotManager.removeDot(this.btn_lq);
            let data = YaoQingModel.Ins.invitationList.find(ele => ele.fid == value.f_id);
            if (data) {
                this.btn_yq.visible = false;
                if (data.state == 1) {
                    this.item.sp.visible = false;
                    this.btn_lq.visible = true;
                    this.lab2.visible = false;
                    DotManager.addDot(this.btn_lq);
                }
                else {
                    this.item.sp.visible = true;
                    this.btn_lq.visible = false;
                    this.lab2.visible = true;
                }
            }
            else {
                this.item.sp.visible = false;
                this.btn_lq.visible = this.lab2.visible = false;
                this.btn_yq.visible = true;
            }
            this.lab.text = StringUtil.format("邀请{0}名好友且达到{1}级", value.f_InvitationC, value.f_InvitationCon);
            if (YaoQingModel.Ins.inviteNum >= value.f_InvitationC) {
                this.lab1.text = value.f_InvitationC + "/" + value.f_InvitationC;
                this.pro.width = 289;
            }
            else {
                this.lab1.text = YaoQingModel.Ins.inviteNum + "/" + value.f_InvitationC;
                this.pro.width = YaoQingModel.Ins.inviteNum / value.f_InvitationC * 289;
            }
        }
    }

    exports.YaoQingItem1 = YaoQingItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YaoQingView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.yaoqing.ui_yaoqingViewUI;
                this.bindClose(this._ui.btn_close);
                this._ui.list1.itemRender = YaoQingItem;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list.itemRender = YaoQingItem1;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
                this.btnList.push(ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick)), ButtonCtl.Create(this._ui.btn_yq, new Laya.Handler(this, this.onBtnYQClick)));
            }
        }
        onInit() {
            YaoQingModel.Ins.on(YaoQingModel.UPDATA_VIEW, this, this.onUpdataView);
            let req = new Invitation_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            YaoQingModel.Ins.off(YaoQingModel.UPDATA_VIEW, this, this.onUpdataView);
        }
        onBtnClick() {
            E.ViewMgr.Open(EViewType.YaoQingXQ);
        }
        onBtnYQClick() {
            E.sdk.goShareData('inviterId=' + MainModel.Ins.mRoleData.AccountId);
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onRenderHandler1(item) {
            item.setData(item.dataSource);
        }
        onUpdataView() {
            let arr1 = [];
            let arr2 = [];
            let array = [];
            let i;
            for (i = 0; i < YaoQingInProxy.Ins.List.length; i++) {
                let data = YaoQingModel.Ins.invitationList.find(ele => ele.fid == YaoQingInProxy.Ins.List[i].f_id);
                if (data && data.state == 2) {
                    arr2.push(YaoQingInProxy.Ins.List[i]);
                }
                else {
                    arr1.push(YaoQingInProxy.Ins.List[i]);
                }
            }
            arr1.sort((a, b) => {
                return a.f_id - b.f_id;
            });
            arr2.sort((a, b) => {
                return a.f_id - b.f_id;
            });
            for (i = 0; i < arr1.length; i++) {
                array.push(arr1[i]);
            }
            for (i = 0; i < arr2.length; i++) {
                array.push(arr2[i]);
            }
            this._ui.list.array = array;
            let arr = [];
            let len = YaoQingValueProxy.Ins.List.length;
            for (i = 0; i < len; i++) {
                if (YaoQingModel.Ins.topList[i]) {
                    arr.push({ data: YaoQingModel.Ins.topList[i] });
                }
                else {
                    arr.push({ data: null });
                }
            }
            this._ui.list1.array = arr;
            let flag = false;
            for (i = 0; i < YaoQingModel.Ins.activationList.length; i++) {
                if (YaoQingModel.Ins.activationList[i].state == 1) {
                    flag = true;
                    break;
                }
            }
            if (flag) {
                DotManager.addDot(this._ui.btn, 16, -12);
            }
            else {
                DotManager.removeDot(this._ui.btn);
            }
        }
    }

    exports.YaoQingView = YaoQingView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YaoQingItem2 extends ui.views.yaoqing.ui_yqItem3UI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
        }
        onBtnClick() {
            if (this._data) {
                let req = new InvitationGetActivation_req;
                req.fid = this._data.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.lab.text = StringUtil.format("{0}名好友达到{1}级", value.f_InvitationC, value.f_QuestLevel);
            let st = "";
            let arr = value.f_UpgradeInv.split("|");
            for (let i = 0; i < arr.length; i++) {
                let id = parseInt(arr[i].split(":")[0]);
                let val = attrConvert(id, parseInt(arr[i].split(":")[1]));
                st += MainModel.Ins.getAttrNameIdByID(id) + ":" + val;
                if ((i + 1) != arr.length) {
                    st += ",";
                }
            }
            this.lab_dec.text = st;
            DotManager.removeDot(this.btn);
            let data = YaoQingModel.Ins.activationList.find(ele => ele.fid == value.f_id);
            if (data) {
                if (data.state == 1) {
                    DotManager.addDot(this.btn);
                    this.sp.visible = true;
                    this.btn.visible = true;
                    this.btn.disabled = false;
                    this.lab1.visible = false;
                    this.lab_dec.color = "#F9F0BB";
                    this.lab_dec.stroke = 2;
                    this.lab_dec.strokeColor = "#561D09";
                }
                else {
                    this.sp.visible = false;
                    this.btn.visible = false;
                    this.btn.disabled = false;
                    this.lab1.visible = true;
                    this.lab_dec.color = "#54EDFF";
                    this.lab_dec.stroke = 2;
                    this.lab_dec.strokeColor = "#2B8AC7";
                }
            }
            else {
                this.sp.visible = false;
                this.btn.visible = true;
                this.btn.disabled = true;
                this.lab1.visible = false;
                this.lab_dec.color = "#F9F0BB";
                this.lab_dec.stroke = 2;
                this.lab_dec.strokeColor = "#561D09";
            }
        }
    }

    exports.YaoQingItem2 = YaoQingItem2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YaoQingView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.yaoqing.ui_yaoqingView1UI;
                this.bindClose(this._ui.btn_close);
                this._ui.list.itemRender = YaoQingItem2;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onInit() {
            YaoQingModel.Ins.on(YaoQingModel.UPDATA_VIEW, this, this.onUpdataView);
            this.onUpdataView();
        }
        onExit() {
            YaoQingModel.Ins.off(YaoQingModel.UPDATA_VIEW, this, this.onUpdataView);
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onUpdataView() {
            this._ui.list.array = YaoQingValueProxy.Ins.List;
        }
    }

    exports.YaoQingView1 = YaoQingView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YaoQingModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new YaoQingModule();
            }
            return this._ins;
        }
        onInitCallBack() { }
        initMsg() {
            this.Reg(new YaoQingView(EViewType.YaoQing));
            this.Reg(new YaoQingView1(EViewType.YaoQingXQ));
            E.MsgMgr.AddMsg(MSGID.InvitationRed, this.InvitationRed, this);
            E.MsgMgr.AddMsg(MSGID.Invitation, this.Invitation, this);
            E.MsgMgr.AddMsg(MSGID.InvitationUpdate, this.InvitationUpdate, this);
            E.MsgMgr.AddMsg(MSGID.InvitationActivationUpdate, this.InvitationActivationUpdate, this);
        }
        InvitationRed(value) {
            if (value.red) {
                YaoQingModel.Ins.YQRed = true;
            }
            else {
                YaoQingModel.Ins.YQRed = false;
            }
            YaoQingModel.Ins.event(YaoQingModel.UPDATA_RED);
        }
        Invitation(value) {
            YaoQingModel.Ins.inviteNum = value.inviteNum;
            YaoQingModel.Ins.topList = value.topList;
            YaoQingModel.Ins.invitationList = value.invitationList;
            YaoQingModel.Ins.activationList = value.activationList;
            YaoQingModel.Ins.event(YaoQingModel.UPDATA_VIEW);
        }
        InvitationUpdate(value) {
            for (let i = 0; i < value.invitationList.length; i++) {
                let index = YaoQingModel.Ins.invitationList.findIndex(ele => ele.fid == value.invitationList[i].fid);
                if (index != -1) {
                    YaoQingModel.Ins.invitationList[index] = value.invitationList[i];
                }
            }
            YaoQingModel.Ins.event(YaoQingModel.UPDATA_VIEW);
        }
        InvitationActivationUpdate(value) {
            for (let i = 0; i < value.activationList.length; i++) {
                let index = YaoQingModel.Ins.activationList.findIndex(ele => ele.fid == value.activationList[i].fid);
                if (index != -1) {
                    YaoQingModel.Ins.activationList[index] = value.activationList[i];
                }
            }
            YaoQingModel.Ins.event(YaoQingModel.UPDATA_VIEW);
        }
    }

    exports.YaoQingModule = YaoQingModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EventGamePassPackProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new EventGamePassPackProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Event_GamePass_Pack";
        }
        getCfgByType(type) {
            return this.List.find(item => item.f_type == type);
        }
    }
    class EventGamePassMonthProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new EventGamePassMonthProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Event_GamePass_Month";
        }
    }
    class EventGamePassWeekProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new EventGamePassWeekProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Event_GamePass_Week";
        }
    }
    class EventGamePassTaskProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new EventGamePassTaskProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Event_GamePass_Task";
        }
    }
    class EventGamePassConfigProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new EventGamePassConfigProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Event_GamePass_Config";
        }
    }

    exports.EventGamePassConfigProxy = EventGamePassConfigProxy;
    exports.EventGamePassMonthProxy = EventGamePassMonthProxy;
    exports.EventGamePassPackProxy = EventGamePassPackProxy;
    exports.EventGamePassTaskProxy = EventGamePassTaskProxy;
    exports.EventGamePassWeekProxy = EventGamePassWeekProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhanLingModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new ZhanLingModel();
            }
            return this._ins;
        }
        isDotMain() {
            if (MainModel.Ins.isOpenByFuncId(EFuncDef.ZhanLing.toString())) {
                if (this.isDotTab1() || this.isDotTab2() || this.isDotTab3() || this.isDotTab4()) {
                    return true;
                }
            }
            return false;
        }
        isDotTab1() {
            for (let i = 0; i < this.monthList.length; i++) {
                let cfg = EventGamePassMonthProxy.Ins.GetDataById(this.monthList[i].fid);
                if (this.monthList[i].state == 0) {
                    if (this.monthPoint >= cfg.f_Point) {
                        return true;
                    }
                }
                else if (this.monthList[i].state == 1) {
                    if (this.monthPaid) {
                        return true;
                    }
                }
            }
            return false;
        }
        isDotTab2() {
            for (let i = 0; i < this.weekList.length; i++) {
                let cfg = EventGamePassWeekProxy.Ins.GetDataById(this.weekList[i].fid);
                if (this.weekList[i].state == 0) {
                    if (this.weekPoint >= cfg.f_Point) {
                        return true;
                    }
                }
                else if (this.weekList[i].state == 1) {
                    if (this.weekPaid) {
                        return true;
                    }
                }
            }
            return false;
        }
        isDotTab3() {
            for (let i = 0; i < this.taskList.length; i++) {
                if (this.taskList[i].state == 1) {
                    return true;
                }
            }
            return false;
        }
        isDotTab4() {
            if (!this.lbRreeState) {
                return true;
            }
            let cfg = EventGamePassConfigProxy.Ins.GetDataById(1);
            if (this.lbNum >= cfg.f_ConditionTimes) {
                return true;
            }
            return false;
        }
        setMonthList(value) {
            this.monthList = value;
            this.monthList.sort(this.onSortMonth);
        }
        onSortMonth(a, b) {
            let cfgA = EventGamePassMonthProxy.Ins.GetDataById(a.fid);
            let cfgB = EventGamePassMonthProxy.Ins.GetDataById(b.fid);
            return cfgA.f_Sort - cfgB.f_Sort;
        }
        setWeekList(value) {
            this.weekList = value;
            this.weekList.sort(this.onSortWeek);
        }
        onSortWeek(a, b) {
            let cfgA = EventGamePassWeekProxy.Ins.GetDataById(a.fid);
            let cfgB = EventGamePassWeekProxy.Ins.GetDataById(b.fid);
            return cfgA.f_Sort - cfgB.f_Sort;
        }
        getTaskNum() {
            let num = 0;
            for (let i = 0; i < this.taskList.length; i++) {
                if (this.taskList[i].state == 2) {
                    num++;
                }
            }
            return num;
        }
    }
    ZhanLingModel.UPDATA_VIEW_MW = "UPDATA_VIEW_MW";
    ZhanLingModel.UPDATA_VIEW_MONTH = "UPDATA_VIEW_MONTH";
    ZhanLingModel.UPDATA_VIEW_WEEK = "UPDATA_VIEW_WEEK";
    ZhanLingModel.UPDATA_VIEW_TASK = "UPDATA_VIEW_TASK";
    ZhanLingModel.UPDATA_VIEW_LB = "UPDATA_VIEW_LB";

    exports.ZhanLingModel = ZhanLingModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhanLingCtl {
        constructor(skin) {
            this._ui = skin;
            this._ui.maskbg.mouseEnabled = this._ui.lock.mouseEnabled = false;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
        }
        onRemove() {
            this._eff && this._eff.dispose();
        }
        setItem(id) {
            let itemVo = new ItemVo();
            let arr = id.split("-");
            itemVo.cfgId = parseInt(arr[0]);
            itemVo.count = parseInt(arr[1]);
            ItemViewFactory.refreshSlot(this._ui.slot, itemVo);
        }
        setGou(isGou) {
            this._ui.maskbg.visible = isGou;
        }
        setLock(isLock) {
            this._ui.lock.visible = isLock;
        }
        setAv(bo) {
            if (bo) {
                if (!this._eff) {
                    this._eff = new SimpleEffect(this._ui.slot, "o/spine/efxinshou/efxinshou", this._ui.slot.width / 2, this._ui.slot.height / 2);
                }
                this._eff.play(1, true);
            }
            else {
                this._eff && this._eff.stop();
            }
        }
    }

    exports.ZhanLingCtl = ZhanLingCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhanLingItem extends ui.views.zhanling.ui_zhanLingItemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn1, new Laya.Handler(this, this.onBtn1Click));
            this._ctl1 = new ZhanLingCtl(this.item);
            this._ctl2 = new ZhanLingCtl(this.item1);
            this._ctl3 = new ZhanLingCtl(this.item2);
        }
        onBtnClick() {
            let req = new BattlePassReward_req;
            req.type = 1;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtn1Click() {
            let packCfg = EventGamePassPackProxy.Ins.getCfgByType(1);
            ActivityModel.Ins.recharge(packCfg.f_payid);
        }
        setData(value, index) {
            if (!value)
                return;
            this.zOrder = index + 100;
            this._data = value;
            this._cfg = EventGamePassMonthProxy.Ins.GetDataById(value.fid);
            this.lab1.text = this._cfg.f_Point + "";
            if (index >= ZhanLingModel.Ins.monthList.length - 1) {
                this.img.visible = false;
            }
            else {
                this.img.visible = true;
                let va = ZhanLingModel.Ins.monthList[index + 1];
                let nCfg = EventGamePassMonthProxy.Ins.GetDataById(va.fid);
                let num = ZhanLingModel.Ins.monthPoint - this._cfg.f_Point;
                let nNum = nCfg.f_Point - this._cfg.f_Point;
                let n = num / nNum;
                if (n > 1) {
                    n = 1;
                }
                this.pro.height = n * 94;
            }
            this.setItem();
            this.setBtn();
        }
        setItem() {
            this._ctl1.setItem(this._cfg.f_Month_Rewardsfree);
            this._ctl2.setItem(this._cfg.f_Month_Rewardspay.split("|")[0]);
            this._ctl3.setItem(this._cfg.f_Month_Rewardspay.split("|")[1]);
            this._ctl1.setLock(false);
            if (ZhanLingModel.Ins.monthPaid) {
                this._ctl2.setLock(false);
                this._ctl3.setLock(false);
            }
            else {
                this._ctl2.setLock(true);
                this._ctl3.setLock(true);
            }
            if (this._data.state == 2) {
                this._ctl1.setGou(true);
                this._ctl2.setGou(true);
                this._ctl3.setGou(true);
            }
            else if (this._data.state == 1) {
                this._ctl1.setGou(true);
                this._ctl2.setGou(false);
                this._ctl3.setGou(false);
            }
            else if (this._data.state == 0) {
                this._ctl1.setGou(false);
                this._ctl2.setGou(false);
                this._ctl3.setGou(false);
            }
            this._ctl1.setAv(false);
            this._ctl2.setAv(false);
            this._ctl3.setAv(false);
            if (this._data.state == 1 && ZhanLingModel.Ins.monthPaid) {
                this._ctl2.setAv(true);
                this._ctl3.setAv(true);
            }
            else if (this._data.state == 0) {
                if (ZhanLingModel.Ins.monthPoint >= this._cfg.f_Point) {
                    this._ctl1.setAv(true);
                    if (ZhanLingModel.Ins.monthPaid) {
                        this._ctl2.setAv(true);
                        this._ctl3.setAv(true);
                    }
                }
            }
        }
        setBtn() {
            DotManager.removeDot(this.btn);
            if (this._data.state == 2) {
                this.btn1.visible = false;
                this.btn.visible = true;
                this.btn.mouseEnabled = false;
                this.btn.skin = "remote/zhanling/lqan_h.png";
                this.lab.text = "已领取";
            }
            else if (this._data.state == 1) {
                if (ZhanLingModel.Ins.monthPaid) {
                    this.btn1.visible = false;
                    this.btn.visible = true;
                    this.btn.mouseEnabled = true;
                    this.btn.skin = "remote/zhanling/lqan.png";
                    this.lab.text = "领取";
                    DotManager.addDot(this.btn, 10, -10);
                }
                else {
                    this.btn1.visible = true;
                    this.btn.visible = false;
                }
            }
            else if (this._data.state == 0) {
                if (ZhanLingModel.Ins.monthPoint >= this._cfg.f_Point) {
                    this.btn1.visible = false;
                    this.btn.visible = true;
                    this.btn.mouseEnabled = true;
                    this.btn.skin = "remote/zhanling/lqan.png";
                    this.lab.text = "领取";
                    DotManager.addDot(this.btn, 10, -10);
                }
                else {
                    this.btn1.visible = false;
                    this.btn.visible = true;
                    this.btn.mouseEnabled = false;
                    this.btn.skin = "remote/zhanling/lqan_h.png";
                    this.lab.text = "领取";
                }
            }
        }
    }

    exports.ZhanLingItem = ZhanLingItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhanLingItem1 extends ui.views.zhanling.ui_zhanLingItemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn1, new Laya.Handler(this, this.onBtn1Click));
            this._ctl1 = new ZhanLingCtl(this.item);
            this._ctl2 = new ZhanLingCtl(this.item1);
            this._ctl3 = new ZhanLingCtl(this.item2);
        }
        onBtnClick() {
            let req = new BattlePassReward_req;
            req.type = 2;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtn1Click() {
            let packCfg = EventGamePassPackProxy.Ins.getCfgByType(2);
            ActivityModel.Ins.recharge(packCfg.f_payid);
        }
        setData(value, index) {
            if (!value)
                return;
            this.zOrder = index + 100;
            this._data = value;
            this._cfg = EventGamePassWeekProxy.Ins.GetDataById(value.fid);
            this.lab1.text = this._cfg.f_Point + "";
            if (index >= ZhanLingModel.Ins.weekList.length - 1) {
                this.img.visible = false;
            }
            else {
                this.img.visible = true;
                let va = ZhanLingModel.Ins.weekList[index + 1];
                let nCfg = EventGamePassWeekProxy.Ins.GetDataById(va.fid);
                let num = ZhanLingModel.Ins.weekPoint - this._cfg.f_Point;
                let nNum = nCfg.f_Point - this._cfg.f_Point;
                let n = num / nNum;
                if (n > 1) {
                    n = 1;
                }
                this.pro.height = n * 94;
            }
            this.setItem();
            this.setBtn();
        }
        setItem() {
            this._ctl1.setItem(this._cfg.f_Week_Rewards);
            this._ctl2.setItem(this._cfg.f_Week_Rewardspay.split("|")[0]);
            this._ctl3.setItem(this._cfg.f_Week_Rewardspay.split("|")[1]);
            this._ctl1.setLock(false);
            if (ZhanLingModel.Ins.weekPaid) {
                this._ctl2.setLock(false);
                this._ctl3.setLock(false);
            }
            else {
                this._ctl2.setLock(true);
                this._ctl3.setLock(true);
            }
            if (this._data.state == 2) {
                this._ctl1.setGou(true);
                this._ctl2.setGou(true);
                this._ctl3.setGou(true);
            }
            else if (this._data.state == 1) {
                this._ctl1.setGou(true);
                this._ctl2.setGou(false);
                this._ctl3.setGou(false);
            }
            else if (this._data.state == 0) {
                this._ctl1.setGou(false);
                this._ctl2.setGou(false);
                this._ctl3.setGou(false);
            }
            this._ctl1.setAv(false);
            this._ctl2.setAv(false);
            this._ctl3.setAv(false);
            if (this._data.state == 1 && ZhanLingModel.Ins.weekPaid) {
                this._ctl2.setAv(true);
                this._ctl3.setAv(true);
            }
            else if (this._data.state == 0) {
                if (ZhanLingModel.Ins.weekPoint >= this._cfg.f_Point) {
                    this._ctl1.setAv(true);
                    if (ZhanLingModel.Ins.weekPaid) {
                        this._ctl2.setAv(true);
                        this._ctl3.setAv(true);
                    }
                }
            }
        }
        setBtn() {
            DotManager.removeDot(this.btn);
            if (this._data.state == 2) {
                this.btn1.visible = false;
                this.btn.visible = true;
                this.btn.mouseEnabled = false;
                this.btn.skin = "remote/zhanling/lqan_h.png";
                this.lab.text = "已领取";
            }
            else if (this._data.state == 1) {
                if (ZhanLingModel.Ins.weekPaid) {
                    this.btn1.visible = false;
                    this.btn.visible = true;
                    this.btn.mouseEnabled = true;
                    this.btn.skin = "remote/zhanling/lqan.png";
                    this.lab.text = "领取";
                    DotManager.addDot(this.btn, 10, -10);
                }
                else {
                    this.btn1.visible = true;
                    this.btn.visible = false;
                }
            }
            else if (this._data.state == 0) {
                if (ZhanLingModel.Ins.weekPoint >= this._cfg.f_Point) {
                    this.btn1.visible = false;
                    this.btn.visible = true;
                    this.btn.mouseEnabled = true;
                    this.btn.skin = "remote/zhanling/lqan.png";
                    this.lab.text = "领取";
                    DotManager.addDot(this.btn, 10, -10);
                }
                else {
                    this.btn1.visible = false;
                    this.btn.visible = true;
                    this.btn.mouseEnabled = false;
                    this.btn.skin = "remote/zhanling/lqan_h.png";
                    this.lab.text = "领取";
                }
            }
        }
    }

    exports.ZhanLingItem1 = ZhanLingItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhanLingItem3 extends ui.views.zhanling.ui_zhanLingIconItem1UI {
        constructor() {
            super();
        }
        setData(id, isGou) {
            let itemVo = new ItemVo();
            let arr = id.split("-");
            itemVo.cfgId = parseInt(arr[0]);
            itemVo.count = parseInt(arr[1]);
            ItemViewFactory.refreshSlot(this.slot, itemVo);
            this.maskbg.visible = isGou;
        }
    }

    exports.ZhanLingItem3 = ZhanLingItem3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhanLingItem2 extends ui.views.zhanling.ui_zhanLingItem1UI {
        constructor() {
            super();
            this.list.itemRender = ZhanLingItem3;
            this.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            ButtonCtl.Create(this.btn1, new Laya.Handler(this, this.onBtn1Click));
        }
        onBtnClick() {
            if (this._cfg) {
                E.ViewMgr.Close(EViewType.ZhanLingView);
                if (this._cfg.f_viewjump != 0) {
                    E.ViewMgr.OpenByFuncid(this._cfg.f_viewjump, false);
                }
            }
        }
        onBtn1Click() {
            if (this._data) {
                let req = new BattlePassTask_req;
                req.fid = this._data.fid;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onRenderHandler(item) {
            item.setData(item.dataSource, this._bo);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this._cfg = EventGamePassTaskProxy.Ins.GetDataById(value.fid);
            let st = StringUtil.format(this._cfg.f_taskinfo, this._cfg.f_taskcontent);
            this.lab.text = t_Txt_Config.Ins.replace(st);
            if (value.count >= this._cfg.f_taskcontent) {
                this.lab1.text = this._cfg.f_taskcontent + "/" + this._cfg.f_taskcontent;
            }
            else {
                this.lab1.text = value.count + "/" + this._cfg.f_taskcontent;
            }
            if (value.state == 2) {
                this._bo = true;
            }
            else {
                this._bo = false;
            }
            this.list.array = this._cfg.f_rewards.split("|");
            DotManager.removeDot(this.btn1);
            if (value.state == 2) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn1.mouseEnabled = false;
                this.btn1.skin = "remote/zhanling/lqan_h.png";
                this.lab2.text = "已领取";
            }
            else if (value.state == 1) {
                this.btn.visible = false;
                this.btn1.visible = true;
                this.btn1.mouseEnabled = true;
                this.btn1.skin = "remote/zhanling/lqan.png";
                this.lab2.text = "领取";
                DotManager.addDot(this.btn1, 10, -10);
            }
            else if (value.state == 0) {
                this.btn.visible = true;
                this.btn1.visible = false;
            }
        }
    }

    exports.ZhanLingItem2 = ZhanLingItem2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhanLingItem4 extends ui.views.zhanling.ui_zhanLingItem2UI {
        constructor() {
            super();
            this.btnCtl = ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            this.rateCtl = new RateBtn01Ctl(this.rate_btn, this, this.onBtnClick, ESkinRateBtn.Yellow);
        }
        onBtnClick() {
            if (this._cfg) {
                ActivityModel.Ins.recharge(this._cfg.f_payid);
            }
        }
        setData(value, index) {
            if (!value)
                return;
            let cur = this.btnCtl;
            this.btnCtl.visible = false;
            this.rateCtl.visible = false;
            this._cfg = EventGamePassPackProxy.Ins.GetDataById(value.fid);
            ItemViewFactory.renderItemSlots(this.rewardList, this._cfg.f_Rewards, 10, 0.8, "center");
            let priceCfg = t_Purchase_PriceProxy.Ins.GetDataById(this._cfg.f_payid);
            if (priceCfg.f_isVoucher == EShopPayType.Voucher) {
                cur = this.rateCtl.btnCtl;
                if (value.paid) {
                    this.rateCtl.lbText = E.getLang("isbuyed");
                }
                else {
                    this.rateCtl.cfg = priceCfg;
                }
            }
            else if (priceCfg.f_isVoucher === EShopPayType.Normal) {
                if (value.paid) {
                    this.lab.text = E.getLang("isbuyed");
                }
                else {
                    this.lab.text = StringUtil.moneyCv(priceCfg.f_price) + "元解锁";
                }
            }
            cur.visible = true;
            if (index == 0) {
                this.img.skin = "remote/zhanling/czlb1.png";
            }
            else {
                this.img.skin = "remote/zhanling/czlb2.png";
            }
            cur.grayMouseDisable = value.paid == 1;
        }
    }

    exports.ZhanLingItem4 = ZhanLingItem4;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhanLingView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('zhanling.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.zhanling.ui_zhanLingViewUI;
                this.bindClose(this._ui.btn_close);
                this.btn_weekCtl = ButtonCtl.Create(this._ui.btn_week, new Laya.Handler(this, this.onBtnWeekClick));
                this.btn_monthCtl = ButtonCtl.Create(this._ui.btn_month, new Laya.Handler(this, this.onBtnMonthClick));
                this.btnList.push(this.btn_monthCtl, this.btn_weekCtl, ButtonCtl.Create(this._ui.btn_help, new Laya.Handler(this, this.onBtnTipClick)));
                this.weekRateCtl = new RateBtn01Ctl(this._ui.btn_week_rate, this, this.onBtnWeekClick, ESkinRateBtn.Yellow);
                this.monthRateCtl = new RateBtn01Ctl(this._ui.btn_month_rate, this, this.onBtnMonthClick, ESkinRateBtn.Yellow);
                const tabsSkin = [this._ui.tab1, this._ui.tab2, this._ui.tab3, this._ui.tab4];
                let st = E.getLang("ZhanLingTab");
                this.tabList = st.split("-");
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this._timeCtlMonth = new TimeCtl(this._ui.lab_monthTime);
                this._ui.list_month.itemRender = ZhanLingItem;
                this._ui.list_month.renderHandler = new Laya.Handler(this, this.onMonthRender);
                this._timeCtlWeek = new TimeCtl(this._ui.lab_weekTime);
                this._ui.list_week.itemRender = ZhanLingItem1;
                this._ui.list_week.renderHandler = new Laya.Handler(this, this.onWeekRender);
                this._timeCtlTask = new TimeCtl(this._ui.lan_taskTime);
                this._ui.list_task.itemRender = ZhanLingItem2;
                this._ui.list_task.renderHandler = new Laya.Handler(this, this.onTaskRender);
                this._ui.maskbg.mouseEnabled = false;
                this._timeCtlLB = new TimeCtl(this._ui.lab_lbTime);
                this._ui.sp_click.on(Laya.Event.CLICK, this, this.onItemClick);
                this._ui.sp_click1.on(Laya.Event.CLICK, this, this.onItem1Click);
                this._ui.list4.itemRender = ZhanLingItem4;
                this._ui.list4.renderHandler = new Laya.Handler(this, this.onLBRender);
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("ZhanLingTitle", "ZhanLingDesc");
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab.text = this.tabList[index];
            if (sel) {
                skin.img.skin = "remote/zhanling/xz.png";
                skin.lab.color = "#EEE4CA";
            }
            else {
                skin.img.skin = "remote/zhanling/wxzk.png";
                skin.lab.color = "#9A6051";
            }
        }
        onTabSelectHandler(v) {
            this._ui.sp1.visible = this._ui.sp2.visible = this._ui.sp3.visible
                = this._ui.sp4.visible = false;
            this._ui["sp" + (v + 1)].visible = true;
            this["updataView" + (v + 1)]();
        }
        onInit() {
            ZhanLingModel.Ins.on(ZhanLingModel.UPDATA_VIEW_MW, this, this.onUpdataViewMW);
            ZhanLingModel.Ins.on(ZhanLingModel.UPDATA_VIEW_MONTH, this, this.onUpdataView1);
            ZhanLingModel.Ins.on(ZhanLingModel.UPDATA_VIEW_WEEK, this, this.onUpdataView2);
            ZhanLingModel.Ins.on(ZhanLingModel.UPDATA_VIEW_TASK, this, this.onUpdataView3);
            ZhanLingModel.Ins.on(ZhanLingModel.UPDATA_VIEW_LB, this, this.onUpdataView4);
            this.tabsCtl.selectIndex = 0;
        }
        onExit() {
            ZhanLingModel.Ins.off(ZhanLingModel.UPDATA_VIEW_MW, this, this.onUpdataViewMW);
            ZhanLingModel.Ins.off(ZhanLingModel.UPDATA_VIEW_MONTH, this, this.onUpdataView1);
            ZhanLingModel.Ins.off(ZhanLingModel.UPDATA_VIEW_WEEK, this, this.onUpdataView2);
            ZhanLingModel.Ins.off(ZhanLingModel.UPDATA_VIEW_TASK, this, this.onUpdataView3);
            ZhanLingModel.Ins.off(ZhanLingModel.UPDATA_VIEW_LB, this, this.onUpdataView4);
            this.tabsCtl.dispose();
            this._timeCtlMonth.dispose();
            this._timeCtlWeek.dispose();
            this._timeCtlTask.dispose();
            this._timeCtlLB.dispose();
        }
        onUpdataViewMW() {
            this.updataView1();
            this.updataView2();
        }
        onUpdataView1() {
            this.updataView1();
        }
        onUpdataView2() {
            this.updataView2();
        }
        onUpdataView3() {
            this.updataView3();
        }
        onUpdataView4() {
            this.updataView4();
        }
        updataDot() {
            if (ZhanLingModel.Ins.isDotTab1()) {
                DotManager.addDot(this._ui.tab1, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.tab1);
            }
            if (ZhanLingModel.Ins.isDotTab2()) {
                DotManager.addDot(this._ui.tab2, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.tab2);
            }
            if (ZhanLingModel.Ins.isDotTab3()) {
                DotManager.addDot(this._ui.tab3, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.tab3);
            }
            if (ZhanLingModel.Ins.isDotTab4()) {
                DotManager.addDot(this._ui.tab4, 10, -10);
            }
            else {
                DotManager.removeDot(this._ui.tab4);
            }
        }
        updataView1() {
            let time = ZhanLingModel.Ins.monthEndTime - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtlMonth.start(time, new Laya.Handler(this, this.onUpdateMonthTime), new Laya.Handler(this, this.endMonthTime));
            }
            else {
                this.endMonthTime();
                this._timeCtlMonth.stop();
            }
            let packCfg = EventGamePassPackProxy.Ins.getCfgByType(1);
            let priceCfg = t_Purchase_PriceProxy.Ins.GetDataById(packCfg.f_payid);
            let btn;
            this.monthRateCtl.visible = false;
            this.btn_monthCtl.visible = false;
            if (priceCfg.f_isVoucher == EShopPayType.Voucher) {
                btn = this.monthRateCtl.btnCtl;
                this.monthRateCtl.cfg = priceCfg;
            }
            else {
                btn = this.btn_monthCtl;
                this._ui.lab_monthMoney.text = StringUtil.moneyCv(priceCfg.f_price) + "元解锁";
            }
            if (ZhanLingModel.Ins.monthPaid) {
                btn.visible = false;
            }
            else {
                btn.visible = true;
            }
            this._ui.lab_monthNum.text = ZhanLingModel.Ins.monthPoint + "";
            this._ui.list_month.array = ZhanLingModel.Ins.monthList;
            this.updataDot();
        }
        onUpdateMonthTime() {
            let time_str = TimeUtil.subTime(this._timeCtlMonth.tickVal) + "后重置";
            this._timeCtlMonth.setText(time_str);
        }
        endMonthTime() {
            this._timeCtlMonth.setText("");
        }
        onBtnMonthClick() {
            let packCfg = EventGamePassPackProxy.Ins.getCfgByType(1);
            ActivityModel.Ins.recharge(packCfg.f_payid);
        }
        onMonthRender(item, index) {
            item.setData(item.dataSource, index);
        }
        updataView2() {
            let time = ZhanLingModel.Ins.weekEndTime - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtlWeek.start(time, new Laya.Handler(this, this.onUpdateWeekTime), new Laya.Handler(this, this.endWeekTime));
            }
            else {
                this.endWeekTime();
                this._timeCtlWeek.stop();
            }
            let packCfg = EventGamePassPackProxy.Ins.getCfgByType(2);
            let priceCfg = t_Purchase_PriceProxy.Ins.GetDataById(packCfg.f_payid);
            this.weekRateCtl.visible = false;
            this.btn_weekCtl.visible = false;
            let btn;
            if (priceCfg.f_isVoucher == EShopPayType.Voucher) {
                btn = this.weekRateCtl.btnCtl;
                this.weekRateCtl.cfg = priceCfg;
            }
            else {
                btn = this.btn_weekCtl;
                this._ui.lab_weekMoney.text = StringUtil.moneyCv(priceCfg.f_price) + "元解锁";
            }
            if (ZhanLingModel.Ins.weekPaid) {
                btn.visible = false;
            }
            else {
                btn.visible = true;
            }
            this._ui.lab_weekNum.text = ZhanLingModel.Ins.weekPoint + "";
            this._ui.list_week.array = ZhanLingModel.Ins.weekList;
            this.updataDot();
        }
        onUpdateWeekTime() {
            let time_str = TimeUtil.subTime(this._timeCtlWeek.tickVal) + "后重置";
            this._timeCtlWeek.setText(time_str);
        }
        endWeekTime() {
            this._timeCtlWeek.setText("");
        }
        onBtnWeekClick() {
            let packCfg = EventGamePassPackProxy.Ins.getCfgByType(2);
            ActivityModel.Ins.recharge(packCfg.f_payid);
        }
        onWeekRender(item, index) {
            item.setData(item.dataSource, index);
        }
        updataView3() {
            let time = ZhanLingModel.Ins.taskEndTime - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtlTask.start(time, new Laya.Handler(this, this.onUpdateTaskTime), new Laya.Handler(this, this.endTaskTime));
            }
            else {
                this.endTaskTime();
                this._timeCtlTask.stop();
            }
            this._ui.lab_task.text = ZhanLingModel.Ins.getTaskNum() + "/" + ZhanLingModel.Ins.taskList.length;
            let arr = [];
            let arr1 = [];
            let arr2 = [];
            for (let i = 0; i < ZhanLingModel.Ins.taskList.length; i++) {
                let vo = ZhanLingModel.Ins.taskList[i];
                if (vo.state == 1) {
                    arr.push(vo);
                }
                else if (vo.state == 0) {
                    arr1.push(vo);
                }
                else if (vo.state == 2) {
                    arr2.push(vo);
                }
            }
            this._ui.list_task.array = arr.concat(arr1.concat(arr2));
            this.updataDot();
        }
        onUpdateTaskTime() {
            let time_str = TimeUtil.subTime(this._timeCtlTask.tickVal) + "后重置";
            this._timeCtlTask.setText(time_str);
        }
        endTaskTime() {
            this._timeCtlTask.setText("");
        }
        onTaskRender(item) {
            item.setData(item.dataSource);
        }
        updataView4() {
            let time = ZhanLingModel.Ins.lbEndTime - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtlLB.start(time, new Laya.Handler(this, this.onUpdateLBTime), new Laya.Handler(this, this.endLBTime));
            }
            else {
                this.endLBTime();
                this._timeCtlLB.stop();
            }
            let cfg = EventGamePassConfigProxy.Ins.GetDataById(1);
            let itemVo = new ItemVo();
            let arr = cfg.f_InitiRewards.split("-");
            itemVo.cfgId = parseInt(arr[0]);
            itemVo.count = parseInt(arr[1]);
            ItemViewFactory.refreshSlot(this._ui.item, itemVo);
            if (ZhanLingModel.Ins.lbRreeState) {
                this._ui.maskbg.visible = true;
                DotManager.removeDot(this._ui.item);
                this._ui.sp_click.visible = false;
            }
            else {
                this._ui.maskbg.visible = false;
                DotManager.addDot(this._ui.item, 10, -10);
                this._ui.sp_click.visible = true;
            }
            arr = cfg.f_PeakRewards.split("-");
            itemVo.cfgId = parseInt(arr[0]);
            itemVo.count = parseInt(arr[1]);
            ItemViewFactory.refreshSlot(this._ui.item1, itemVo);
            this._ui.lab_lbNum.text = ZhanLingModel.Ins.lbNum + "/" + cfg.f_ConditionTimes;
            if (ZhanLingModel.Ins.lbNum >= cfg.f_ConditionTimes) {
                this._ui.pro.width = 544;
                this._ui.lab_lb.text = "";
                DotManager.addDot(this._ui.item1, 10, -10);
                this._ui.sp_click1.visible = true;
            }
            else {
                this._ui.pro.width = ZhanLingModel.Ins.lbNum / cfg.f_ConditionTimes * 544;
                let num = cfg.f_ConditionTimes - ZhanLingModel.Ins.lbNum;
                this._ui.lab_lb.text = "还需购买" + num + "次登山礼包后可领取山巅奖励";
                DotManager.removeDot(this._ui.item1);
                this._ui.sp_click1.visible = false;
            }
            this._ui.list4.array = ZhanLingModel.Ins.lbList;
            this.updataDot();
        }
        onUpdateLBTime() {
            let time_str = TimeUtil.subTime(this._timeCtlLB.tickVal) + "后礼包重置,山巅礼包奖励进度不重置";
            this._timeCtlLB.setText(time_str);
        }
        endLBTime() {
            this._timeCtlLB.setText("");
        }
        onLBRender(item, index) {
            item.setData(item.dataSource, index);
        }
        onItemClick() {
            let req = new BattlePassPackFree_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onItem1Click() {
            let req = new BattlePassPackAccTimes_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
    }

    exports.ZhanLingView = ZhanLingView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhanLingModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new ZhanLingModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            ZhanLingModel.Ins.monthPoint = 0;
            ZhanLingModel.Ins.weekPoint = 0;
            ZhanLingModel.Ins.monthList = [];
            ZhanLingModel.Ins.weekList = [];
            ZhanLingModel.Ins.taskList = [];
            ZhanLingModel.Ins.lbList = [];
        }
        initMsg() {
            this.Reg(new ZhanLingView(EViewType.ZhanLingView));
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            E.MsgMgr.AddMsg(MSGID.BattlePass, this.BattlePass, this);
            E.MsgMgr.AddMsg(MSGID.BattlePassMonth, this.BattlePassMonth, this);
            E.MsgMgr.AddMsg(MSGID.BattlePassWeek, this.BattlePassWeek, this);
            E.MsgMgr.AddMsg(MSGID.BattlePassTask, this.BattlePassTask, this);
            E.MsgMgr.AddMsg(MSGID.BattlePassTaskUpdate, this.BattlePassTaskUpdate, this);
            E.MsgMgr.AddMsg(MSGID.BattlePassPack, this.BattlePassPack, this);
            E.MsgMgr.AddMsg(MSGID.BattlePassMonthUpdate, this.BattlePassMonthUpdate, this);
            E.MsgMgr.AddMsg(MSGID.BattlePassWeekUpdate, this.BattlePassWeekUpdate, this);
            E.MsgMgr.AddMsg(MSGID.BattlePassPackFree, this.BattlePassPackFree, this);
            E.MsgMgr.AddMsg(MSGID.BattlePassPackAccTimes, this.BattlePassPackAccTimes, this);
            E.MsgMgr.AddMsg(MSGID.BattlePassPackUpdate, this.BattlePassPackUpdate, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (ZhanLingModel.Ins.isDotMain()) {
                MainModel.Ins.funcSetRed(EFuncDef.ZhanLing, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.ZhanLing, false);
            }
        }
        BattlePass(value) {
            ZhanLingModel.Ins.monthPoint = value.monthPoint;
            ZhanLingModel.Ins.weekPoint = value.weekPoint;
            ZhanLingModel.Ins.event(ZhanLingModel.UPDATA_VIEW_MW);
            this.onMainViewInit();
        }
        BattlePassMonth(value) {
            ZhanLingModel.Ins.setMonthList(value.dataList);
            ZhanLingModel.Ins.monthPaid = value.paid;
            ZhanLingModel.Ins.monthRound = value.round;
            ZhanLingModel.Ins.monthEndTime = value.endUnix;
            ZhanLingModel.Ins.event(ZhanLingModel.UPDATA_VIEW_MONTH);
            this.onMainViewInit();
        }
        BattlePassMonthUpdate(value) {
            ZhanLingModel.Ins.setMonthList(value.dataList);
            ZhanLingModel.Ins.event(ZhanLingModel.UPDATA_VIEW_MONTH);
            this.onMainViewInit();
        }
        BattlePassWeek(value) {
            ZhanLingModel.Ins.setWeekList(value.dataList);
            ZhanLingModel.Ins.weekPaid = value.paid;
            ZhanLingModel.Ins.weekRound = value.round;
            ZhanLingModel.Ins.weekEndTime = value.endUnix;
            ZhanLingModel.Ins.event(ZhanLingModel.UPDATA_VIEW_WEEK);
            this.onMainViewInit();
        }
        BattlePassWeekUpdate(value) {
            ZhanLingModel.Ins.setWeekList(value.dataList);
            ZhanLingModel.Ins.event(ZhanLingModel.UPDATA_VIEW_WEEK);
            this.onMainViewInit();
        }
        BattlePassTask(value) {
            ZhanLingModel.Ins.taskList = value.dataList;
            ZhanLingModel.Ins.taskEndTime = value.endUnix;
            ZhanLingModel.Ins.event(ZhanLingModel.UPDATA_VIEW_TASK);
            this.onMainViewInit();
        }
        BattlePassTaskUpdate(value) {
            let index = ZhanLingModel.Ins.taskList.findIndex(ele => ele.fid == value.data.fid);
            if (index != -1) {
                ZhanLingModel.Ins.taskList[index] = value.data;
                ZhanLingModel.Ins.event(ZhanLingModel.UPDATA_VIEW_TASK);
                this.onMainViewInit();
            }
        }
        BattlePassPack(value) {
            ZhanLingModel.Ins.lbList = value.dataList;
            ZhanLingModel.Ins.lbEndTime = value.endUnix;
            ZhanLingModel.Ins.lbNum = value.buyNum;
            ZhanLingModel.Ins.lbRreeState = value.freeState;
            ZhanLingModel.Ins.event(ZhanLingModel.UPDATA_VIEW_LB);
            this.onMainViewInit();
        }
        BattlePassPackFree(value) {
            ZhanLingModel.Ins.lbRreeState = value.freeState;
            ZhanLingModel.Ins.event(ZhanLingModel.UPDATA_VIEW_LB);
            this.onMainViewInit();
        }
        BattlePassPackAccTimes(value) {
            ZhanLingModel.Ins.lbNum = value.buyNum;
            ZhanLingModel.Ins.event(ZhanLingModel.UPDATA_VIEW_LB);
            this.onMainViewInit();
        }
        BattlePassPackUpdate(value) {
            let index = ZhanLingModel.Ins.lbList.findIndex(ele => ele.fid == value.data.fid);
            if (index != -1) {
                ZhanLingModel.Ins.lbList[index] = value.data;
                ZhanLingModel.Ins.event(ZhanLingModel.UPDATA_VIEW_LB);
                this.onMainViewInit();
            }
        }
    }

    exports.ZhanLingModule = ZhanLingModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RemoteMsgVo {
        constructor() {
            this.remoteList = [];
        }
        clear() {
            this.msgId = null;
            this.remoteList = [];
        }
        invoke(data) {
            for (let i = 0; i < this.remoteList.length; i++) {
                let cell = this.remoteList[i];
                cell.Invoke(data);
            }
        }
        push(callback, that) {
            this.remoteList.push(Callback.Create(that, callback));
        }
    }
    class MsgManager {
        constructor() {
            this._msgList = [];
            this._hasInit = false;
            this._moduleList = [];
            this.LabordayList = [];
        }
        Init() {
            if (this._hasInit)
                return false;
            this._hasInit = true;
            this.LabordayList.push(ChildrenModel.Ins, LabordayModel.Ins, SummerModel.Ins, MidAutumnModel.Ins, LuckModel.Ins, YuanXiaoModel.Ins);
            let _moduleList = [
                LoginClient.Ins,
                MainModel.Ins,
                ZuoQiModel.Ins,
                JjcModel.Ins,
                PeakJjcModel.Ins,
                ShopModel.Ins,
                ActivityModel.Ins,
                HuanZhuangModel.Ins,
                HeroHouseModel.Ins,
                HuYouModule.ins,
                PaoShangModule.ins,
                GuaJiModule.ins,
                NewAdventureModel.Ins,
                SoulModel.Ins,
                SheZhiModule.ins,
                DaLuanDouModule.ins,
                BaoShiModule.ins,
                WingModel.Ins,
                ShenBinModule.ins,
                ChengHaoModule.ins,
                FuJiangModule.ins,
                YaoQingModule.ins,
                TreasureModel.ins,
                DuanWuModel.Ins,
                GemFeastModel.Ins,
                FuJiangFeastModel.Ins,
                XXZDZModule.ins,
                FightMonsterModel.Ins,
                WuShenDianModule.ins,
                JjzmlModel.Ins,
                MeiRiZhuanPanModule.ins,
                KaiFuChongBangModule.ins,
                JiShaoChengDuoModel.Ins,
                JieDongFengModule.ins,
                LingChongModule.ins,
                LingChongRH_Model.Ins,
                NewPlayerFeastModel.Ins,
                ZhengTuModel.Ins,
                NewPlayerGemFeastModel.Ins,
                NewPlayerRideFeastModel.Ins,
                NewPlayerFujiangFeastModel.Ins,
                LingChongFeastModel.Ins,
                LiBaoModule.ins,
                ServerTaskModule.ins,
                ShenBinFeastModel.Ins,
                LCZQRankModule.ins,
                WanShengJieModule.ins,
                JinShengModule.ins,
                AllianceModule.ins,
                ChatModule.ins,
                AllianceFightModule.ins,
                NewPlayerPetFeastModel.Ins,
                ZhanLingModule.ins,
                MoJinXiaoWeiModule.ins,
                MonopolyModule.ins,
                DrawEventModule.ins,
                NamingChargeModel.Ins,
                CombopackModel.Ins,
                SpringFestivalModule.ins,
                WowHuanZhuangModule.ins
            ];
            _moduleList = _moduleList.concat(this.LabordayList);
            this._moduleList = _moduleList;
            for (let i = 0; i < _moduleList.length; i++) {
                let _base = _moduleList[i];
                _base.initMsg();
            }
            E.EventMgr.on(EventID.WEBSOCKET_MESSAGE, this, this.socketMessageHandler);
            return true;
        }
        reset() {
            for (let i = 0; i < this._moduleList.length; i++) {
                let _base = this._moduleList[i];
                _base.onInitCallBack();
            }
        }
        Clear() {
            while (this._msgList.length) {
                let cell = this._msgList.shift();
                cell.clear();
            }
        }
        AddMsg(msgid, callback, caller) {
            this.addMsg(msgid, callback, caller);
        }
        socketMessageHandler(msg) {
            for (let i = 0; i < this._msgList.length; i++) {
                let cell = this._msgList[i];
                if (cell.msgId == msg.msgId) {
                    cell.invoke(msg.data);
                }
            }
        }
        addMsg(msgid, callback, that) {
            let _obj;
            for (let i = 0; i < this._msgList.length; i++) {
                let cell = this._msgList[i];
                if (cell.msgId == msgid) {
                    LogSys$1.Warn("repeat add msgid:" + msgid);
                    _obj = cell;
                    break;
                }
            }
            if (!_obj) {
                _obj = new RemoteMsgVo();
                _obj.msgId = msgid;
                this._msgList.push(_obj);
            }
            _obj.push(callback, that);
        }
    }

    exports.MsgManager = MsgManager;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ResourceManager {
        constructor() {
            this.resItemMap = new Map();
            this.hasInit = false;
        }
        Init() {
            if (this.hasInit)
                return false;
            this.hasInit = true;
            return true;
        }
        Clear() { }
        ReleaseURL(url) {
            let contains = false;
            this.resItemMap.forEach((v, key) => {
                if (key == url)
                    contains = true;
            });
            if (contains)
                LoadUtil.ClearRes(url);
            else
                LogSys$1.Error("加载资源组内不存在该资源");
        }
        ReleaseGroup(group) {
            let urls = new Array();
            group.Items.forEach(i => {
                urls.push(i.Url);
            });
            for (let i = 0; i < urls.length; i++) {
                LoadUtil.ClearRes(urls[i]);
                this.resItemMap.forEach((v, key) => {
                    if (key == urls[i])
                        this.resItemMap.delete(key);
                });
            }
        }
        ReleaseUnLoaded() {
            LoadUtil.ClearUnUnLoaded();
        }
        LoadPrefab(path, complete, progress) {
            LoadUtil.LoadRes(path, (item) => {
                let prefab = new Laya.Prefab();
                prefab.json = item;
                if (complete != null)
                    complete.Invoke(prefab);
            }, (v) => {
                if (progress != null)
                    progress.Invoke(v);
            });
        }
        LoadGroup(group, complete, progress) {
            let urls = new Array();
            group.Items.forEach(i => {
                urls.push({ url: i.Url, type: i.Type });
            });
            LoadUtil.LoadRes(urls, () => {
                if (complete)
                    complete.Invoke();
                for (let i = 0; i < group.Items.length; i++) {
                    let info = group.Items[i];
                    if (!this.resItemMap.has(info.Url))
                        this.resItemMap.set(info.Url, info);
                }
            }, (v) => {
                if (progress)
                    progress.Invoke(v);
            });
        }
        LoadRes(item, completeEvent, progressEvent) {
            LoadUtil.LoadRes([item.Url], (success) => {
                if (success) {
                    if (completeEvent)
                        completeEvent.Invoke();
                    this.resMapAdd(item);
                }
                else {
                    LogSys$1.Error("Load Res Error:" + item.Url);
                }
            }, (v) => {
                if (progressEvent)
                    progressEvent.Invoke(v);
            });
        }
        GetRes(url) {
            return LoadUtil.GetRes(url);
        }
        SceneOpen(e, complete, progress) {
            let path = "";
            if (this.scene2DMap != null) {
                path = this.scene2DMap.Value(e);
            }
            if (!StringUtil.IsNullOrEmpty(path))
                Laya.Scene.open(path, true, null, complete, progress);
        }
        SceneClose(e) {
            let path = "";
            if (this.scene2DMap != null) {
                path = this.scene2DMap.Value(e);
            }
            if (!StringUtil.IsNullOrEmpty(path))
                Laya.Scene.close(path);
        }
        ViewOpen(path, complete) {
            if (!StringUtil.IsNullOrEmpty(path)) {
                if (complete)
                    complete(LoadUtil.GetJson(path));
            }
            else {
                LogSys$1.Log("path is null of type:" + path);
            }
        }
        getScene3D(path) {
            let scene = LoadUtil.GetJson(path);
            return scene;
        }
        GetScene3D(path, complete) {
            if (StringUtil.IsNullOrEmpty(path) || complete == null) {
                console.warn("params not define");
                return;
            }
            let scene = this.getScene3D(path);
            if (scene != null) {
                complete.Invoke(scene);
            }
            else {
                LoadUtil.LoadScene3D(path, () => {
                    complete.Invoke(this.getScene3D(path));
                });
            }
        }
        GetScenePath(type) {
            return StringUtil.Empty;
        }
        GetSprite3Ds(paths, complete, progress) {
            let loadpath = [];
            for (let i = 0; i < paths.length; i++) {
                if (LoadUtil.GetJson(paths[i]) == null) {
                    ListUtil.SafeAdd(loadpath, paths[i]);
                }
            }
            LoadUtil.LoadSprite3D(loadpath, () => {
                if (complete != null)
                    complete();
            }, (value) => {
                if (progress != null)
                    progress(value);
            });
        }
        GetSprite3D(path, complete) {
            if (StringUtil.IsNullOrEmpty(path) || complete == null) {
                console.warn("params not define");
                return;
            }
            let obj = LoadUtil.GetJson(path);
            if (obj != null) {
                complete.Invoke(this.cloneSprite3D(obj));
            }
            else {
                LoadUtil.LoadSprite3D([path], () => {
                    obj = LoadUtil.GetJson(path);
                    if (obj != null) {
                        complete.Invoke(this.cloneSprite3D(obj));
                    }
                    else {
                        LogSys$1.Error("[ResMgr][GetUnityExport] Failed:" + path);
                        complete.Invoke(null);
                    }
                }, null);
            }
        }
        LoadU3D_LH(path, complete) {
            if (StringUtil.IsNullOrEmpty(path))
                return;
            if (!StringUtil.Contains(path, ".lh")) {
                path += ".lh";
            }
            this.GetSprite3D(path, complete);
        }
        LoadU3D_VFX(name, complete) {
            let path = "";
            this.LoadU3D_LH(path, complete);
        }
        resMapAdd(item) {
            if (!this.resItemMap.has(item.Url)) {
                this.resItemMap.set(item.Url, item);
            }
        }
        cloneSprite3D(obj) {
            return Laya.Sprite3D.instantiate(obj);
        }
    }

    exports.ResourceManager = ResourceManager;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LanguageManager {
        constructor() {
            this._hasInit = false;
            this.language = ELanguage.Chinese;
        }
        Init() {
            if (this._hasInit)
                return false;
            this._hasInit = true;
            return true;
        }
        Clear() {
        }
        SetLanguageStorage() {
            StorageUtil.SetNum(StorageUtil.Language, this.language, true);
        }
        GetLanguageStorage() {
            let newLan = StorageUtil.GetNum(StorageUtil.Language, true);
            this.IsSameLanguage(newLan);
        }
        get Language() {
            return this.language;
        }
        SetLanguage(lang) {
            this.language = lang;
            this.SetLanguageStorage();
            this.ClearLanguageCatch();
        }
        get IsChinese() { return this.Language == ELanguage.Chinese; }
        get Lang() {
            if (!this._lang) {
                this._lang = Laya.loader.getRes(StaticDataMgr.Ins.langKey);
                let str = t_Txt_Config.Ins.replace(JSON.stringify(this._lang));
                this._lang = JSON.parse(str);
            }
            return this._lang;
        }
        rebuild() {
            this._lang = null;
        }
        get LanguageData() {
            return this.Lang;
        }
        IsSameLanguage(newLang) {
            if (newLang == this.language) {
                return true;
            }
            this.SetLanguage(newLang);
            return false;
        }
        getLang(key, ...args) {
            let str = this.Lang[key];
            return StringUtil.format(str || key, args);
        }
        getLangArr(key, args) {
            let str = this.Lang[key];
            for (let i = 0; i < args.length; i++) {
                str = str.replace(new RegExp("\\{" + i + "\\}"), args[i]);
            }
            return str;
        }
        ClearLanguageCatch() {
        }
    }
    (function (LanguageDefine) {
        class View {
        }
        LanguageDefine.View = View;
        class Common {
        }
        Common.Sure = "Sure";
        Common.Cancel = "Cancel";
        Common.Tip = "Tip";
        LanguageDefine.Common = Common;
        class Tip {
        }
        Tip.MSG_SOCKETERROR = "MSG_SOCKETERROR";
        Tip.MSG_SOCKETCLOSED = "MSG_SOCKETCLOSED";
        Tip.RegistSuccess = "RegistSuccess";
        Tip.NoAccount = "NoAccount";
        Tip.PasswordError = "PasswordError";
        Tip.AccountStopUseing = "AccountStopUseing";
        Tip.LoginFailed = "LoginFailed";
        Tip.NotYetOpen = "NotYetOpen";
        LanguageDefine.Tip = Tip;
        class Title {
        }
        LanguageDefine.Title = Title;
        class TextDefine {
        }
        TextDefine.KickNotify = "KickNotify";
        TextDefine.EmptyName = "EmptyName";
        LanguageDefine.TextDefine = TextDefine;
        class Login {
        }
        LanguageDefine.Login = Login;
    })(exports.LanguageDefine || (exports.LanguageDefine = {}));

    exports.LanguageManager = LanguageManager;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GameCfgData {
        get refreshSec() {
            return TimeUtil.toSecond(this.getSysVal(1));
        }
        get maxEquipStyle() {
            return parseInt(this.getSysVal(2));
        }
        get maxWing() {
            return parseInt(this.getSysVal(3));
        }
        get maxRide() {
            return parseInt(this.getSysVal(4));
        }
        get mountWashMaxLv() {
            return parseInt(this.getSysVal(24));
        }
        get sysProxy() {
            return System_RefreshTimeProxy.Ins;
        }
        constructor() {
        }
        getSysVal(id) {
            let cfg = this.sysProxy.GetDataById(id);
            return System_RefreshTimeProxy.Ins.f_SystemConfig(cfg);
        }
    }

    exports.GameCfgData = GameCfgData;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaseSdk {
        constructor() {
            this.cbsgTunnelId = 0;
        }
        get deskSceneIDs() {
            let cfg = t_Platform.Ins.curCfg;
            if (cfg) {
                let arr = cfg.f_desk_scene.split("|");
                return arr;
            }
            return [];
        }
        getNewUrl(jsonData, url) {
            if (jsonData[url]) {
                return `e/${jsonData[url]}/${url}`;
            }
            return url;
        }
        get isFromSidebarCard() {
            if (Laya.Utils.getQueryString("sider") || initConfig.sider) {
                return true;
            }
            return false;
        }
        get clienttype() {
            let _clientType = Laya.Utils.getQueryString("clienttype");
            if (_clientType) {
                return parseInt(_clientType);
            }
            return initConfig.clienttype;
        }
        loadFont(jsonData, _fontLoadEnd) {
            this._fontLoadEnd = _fontLoadEnd;
            let asset = InitConfig.getAsset();
            let resList = [
                { url: asset + this.getNewUrl(jsonData, "remote/font/BOLD.ttf"), type: Laya.Loader.TTF },
                { url: asset + this.getNewUrl(jsonData, "remote/font/fz.ttf"), type: Laya.Loader.TTF },
            ];
            Laya.loader.load(resList, new Laya.Handler(this, this.onLoadComplete));
        }
        onLoadComplete() {
            LogSys$1.Log("字体加载完成!!!" + (E.sdk.convertFont(ZipJson.BOLD) || "undefined") + "," + (E.sdk.convertFont("fz") || "undefined"));
            this._fontLoadEnd.run();
        }
        convertFont(fontName) {
            return fontName;
        }
        lookVideo(callback) {
            if (this.canFreeLook) {
                E.ViewMgr.ShowMidError("免广告");
                callback.call(this, 1);
            }
            else {
                E.ViewMgr.ShowMidError("看了一段广告");
                Laya.timer.once(1000, this, () => {
                    callback.call(this, 1);
                });
            }
        }
        loginCallBack() {
        }
        get canFreeLook() {
            if (t_Platform.Ins.curCfg.f_skipAD) {
                if (MainModel.Ins.isYearCanUsed || MainModel.Ins.isMonthCanUsed) {
                    return true;
                }
            }
            return false;
        }
        valChange(type, v) {
        }
        recharge(oderId, cfg) {
            MainModel.Ins.gm(`recharge ${oderId}`);
        }
        init() { }
        login(that, callBack) {
            let cbsgTunnelOpenType = Laya.Utils.getQueryString("cbsgTunnelOpenType");
            if (cbsgTunnelOpenType != null) {
                SySdk.Ins.cbsgTunnelOpenType = parseInt(cbsgTunnelOpenType);
            }
            callBack.call(that);
        }
        setPlayerData(playerData) { }
        getOpenId() {
            let user = HrefUtils.getHref("user");
            if (user) {
                return user;
            }
            return initConfig.openid || "01234567890123456789";
        }
        pay(payData) { }
        ;
        getSubscribe(templates) { }
        ;
        goShareData(shareQueryParam) {
            LogSys$1.Log("goShareData:" + shareQueryParam);
        }
        ;
        getWechatNickname(successCallback, failCallback) { }
        ;
        getAppId() {
            let appid = HrefUtils.getHref("appid");
            if (appid) {
                return appid;
            }
            return "wx8070b90126a0b503";
        }
        onShow(query) {
            LoginClient.Ins.startPlayAudio();
        }
        getGameClubData(callback) {
            var _a, _b;
            let wx = window['wx'];
            const session = (_a = window['Sygame']) === null || _a === void 0 ? void 0 : _a['session_key'];
            if (wx && ((_b = window['Sygame']) === null || _b === void 0 ? void 0 : _b['session_key'])) {
                if (typeof wx.getGameClubData == "undefined") {
                    return;
                }
                wx.getGameClubData({
                    dataTypeList: [{ type: 1 }, { type: 4 }, { type: 6 }],
                    complete: (res) => {
                        if (res['encryptedData'] && res['iv'] && res['signature']) {
                            HttpUtil.httpPost(`https://docater1.cn/index.php?g=Wap&m=MiniGame&a=decode_encrypted`, { encryptedData: res['encryptedData'], iv: res['iv'], sessionKey: session }, new Laya.Handler(this, callback));
                        }
                        else {
                            callback();
                            console.log('getGameClubData err: ', res);
                        }
                    }
                });
            }
            return;
        }
        getAuth(callback) {
            let wx = window['wx'];
            if (!wx || typeof wx.openSetting == "undefined") {
                return;
            }
            wx.openSetting({
                success(res) {
                    callback(res);
                }
            });
        }
        setCopy(str) {
            switch (initConfig.platform) {
                case PlatformConfig.WeiXin:
                    window["wx_ext"].syGetClipboardData(str);
                    break;
                case PlatformConfig.DOU_YIN:
                    {
                        gameTT.setClipboardData({
                            data: str,
                            success(res) {
                                console.log('syCopy', res);
                            }
                        });
                    }
                    break;
                default:
                    SheZhiModel.Ins.setCopy(str);
                    break;
            }
        }
        isFromDesk(res) {
            if (res && res.scene && (this.deskSceneIDs.indexOf(res.scene + "") !== -1)) {
                return true;
            }
            return false;
        }
        get scene() {
            if (initConfig.debug_scene) {
                return initConfig.debug_scene;
            }
            let _scene = "";
            if (typeof wx != "undefined") {
                const data = wx.getLaunchOptionsSync();
                _scene = data.scene;
            }
            return _scene;
        }
    }

    exports.BaseSdk = BaseSdk;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class CellVo {
        get fontName() {
            let arr = this.url.split("/");
            let a = arr[arr.length - 1];
            return a.split(".")[0];
        }
        get fontUrl() {
            let asset = InitConfig.getAsset();
            let a = "";
            if (this.key) {
                a = `e/${this.key}/`;
            }
            let u = `${asset}${a}${this.url}`;
            return u;
        }
    }
    class FontLoad extends Laya.EventDispatcher {
        constructor() {
            super(...arguments);
            this.fontKey = {};
            this.l = [];
        }
        load(_jsonData, url) {
            let key = _jsonData[url];
            let vo = new CellVo();
            vo.key = key;
            vo.url = url;
            this.l.push(vo);
        }
        start() {
            if (this.l.length > 0) {
                let vo = this.l.shift();
                let that = this;
                this.wx_ext.loadFont(vo.fontUrl, vo.fontName, (outFontName) => {
                    let t = that;
                    t.fontKey[vo.fontName] = outFontName;
                    t.start();
                });
            }
            else {
                LogSys$1.Log("FontLoad start:[" + JSON.stringify(this.fontKey) + "]");
                this.event(Laya.Event.COMPLETE);
            }
        }
    }

    exports.FontLoad = FontLoad;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WeiXinSDK extends BaseSdk {
        constructor() {
            super(...arguments);
            this.font = new FontLoad();
        }
        get wx_ext() {
            return window["wx_ext"];
        }
        loadFont(data, _fontLoadEnd) {
            this._fontLoadEnd = _fontLoadEnd;
            this.font.wx_ext = this.wx_ext;
            this.font.load(data, "remote/font/BOLD.ttf");
            this.font.load(data, "remote/font/fz.ttf");
            this.font.once(Laya.Event.COMPLETE, this, this.onLoadComplete);
            this.font.start();
        }
        convertFont(fontName) {
            let font = this.font.fontKey[fontName];
            if (font) {
                font = font.replace(/\u0000/g, "");
            }
            return font;
        }
        lookVideo(callback) {
            if (this.canFreeLook) {
                callback.call(this, 1);
            }
            else {
                this.sdkWatchCVideo(callback);
            }
        }
        sdkWatchCVideo(callback) {
            SySdk.Ins.showRewordVideo(callback);
        }
        valChange(type, v) {
            switch (type) {
                case ESdkValChange.LevelUp:
                    LogSys$1.Log("等级变化到了" + v);
                    SySdk.Ins.setPlayerLevel(v);
                    SySdk.Ins.syReportRoleInfo('roleupgrade');
                    break;
                case ESdkValChange.Plus:
                    LogSys$1.Log("战斗力变化到了" + v);
                    SySdk.Ins.setPlayerPlus(v);
                    break;
                case ESdkValChange.EnterGame:
                    SySdk.Ins.syReportRoleInfo('entergame');
                    break;
                case ESdkValChange.CreateRole:
                    SySdk.Ins.syReportRoleInfo('createrole');
                    break;
            }
        }
        recharge(orderId, cfg) {
            let price = cfg.f_price / 100;
            SySdk.Ins.pay({ order_id: orderId, product_price: price });
        }
        setPlayerData(playerData) {
            SySdk.Ins.setPlayerData(playerData);
        }
        init() {
            SySdk.Ins.syInit();
        }
        login(that, callBack) {
            SySdk.Ins.syLogin(() => {
                let style1 = SySdk.Ins.cbsgTunnelOpenType;
                if (style1 != undefined) {
                    if (E.ta) {
                        E.ta.userSetOnce({ box_animation: style1 });
                    }
                }
                this.cbsgTunnelId = SySdk.Ins.cbsgTunnelId || 0;
                callBack.call(that);
            });
        }
        getOpenId() {
            if (initConfig.openid) {
                return initConfig.openid;
            }
            return SySdk.Ins.openid;
        }
        getAppId() {
            if (initConfig.appid) {
                return initConfig.appid;
            }
            return SySdk.Ins.getAppId();
        }
        getSubscribe(templates) {
            let data = {
                template: templates,
            };
            SySdk.Ins.syGetSubscribe(data);
        }
        goShareData(shareQueryParam) {
            SySdk.Ins.goShareData(shareQueryParam);
        }
        getWechatNickname(successCallback, failCallback) {
            SySdk.Ins.syGetWechatNickname(successCallback, failCallback);
        }
        onShow(query) {
            super.onShow(query);
            SySdk.Ins.onShow(query);
        }
    }

    exports.WeiXinSDK = WeiXinSDK;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YinDaoView1 extends ui.views.yindao.YinDaoView1UI {
        constructor() {
            super(...arguments);
            this.mMaskClick = false;
        }
        setLab(cfg) {
            this.lab_name.text = t_Txt_Config.Ins.replace(cfg.f_info);
            let sname = cfg.f_audio;
            if (sname) {
                E.AudioMgr.StopSound();
                E.AudioMgr.PlaySound1(sname);
            }
        }
    }

    exports.YinDaoView1 = YinDaoView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YinDaoManager {
        constructor() {
            this._hasInit = false;
            this._fmW = 239;
            this._fmH = 239;
            this.index = 0;
        }
        Init() {
            if (this._hasInit)
                return false;
            this._hasInit = true;
            Laya.stage.on(Laya.Event.CLICK, this, this.onStageClick);
            MainModel.Ins.on(MainEvent.WindowSpread, this, this.updataXY);
            return true;
        }
        Clear() {
            this.removeSp();
        }
        onStageClick() {
            if (!this._fm) {
                this._fm = new SimpleEffect(LayerMgr.Ins.screenEffectLayer, `o/spine/hand/hand`);
            }
            this.removeTS();
            if (!this._timeCD) {
                this._timeCD = 30 * 1000;
            }
            Laya.timer.once(this._timeCD, this, this.addBDTS);
        }
        addBDTS() {
            let bo = E.ViewMgr.HasFrameOpenExcept([EViewType.Main]);
            if (bo)
                return;
            if (MainModel.Ins.curChest.type == EOpenChest.Auto)
                return;
            if (this._fm && !this._fm.anim.isPlaying) {
                if (TaskModel.Ins.taskData) {
                    let pos = 0;
                    let value;
                    let xy;
                    switch (TaskModel.Ins.taskData.taskStatus) {
                        case 3:
                            value = "9-xiangzi";
                            xy = "0;0";
                            break;
                        case 2:
                            value = "9-juanzhou";
                            xy = "0;0";
                            break;
                        case 1:
                            let task = TaskProxy.Ins.getCfg(TaskModel.Ins.taskData.taskId);
                            let cfg = TaskTypeProxy.Ins.getCfg(task.f_TaskType);
                            value = cfg.f_ClickTips;
                            xy = cfg.f_XY;
                            pos = cfg.f_handposition;
                            break;
                    }
                    this._type = 1;
                    this.addTS(value, xy, pos);
                }
            }
        }
        addZDTS(value) {
            if (this._fm) {
                this._fm.stop();
                this._type = 2;
                this.addTS(value.f_ClickTips, value.f_XY, value.f_handposition);
            }
        }
        addTS(value, xy, index = 0) {
            let arrXY = xy.split(";");
            let sp = E.ViewMgr.getUIByKeySt(value);
            if (!sp) {
                LogSys$1.Warn("YinDaoManager -->not find addTS>>>>>>>>>>>>>>>>", value);
                return;
            }
            let xx = sp.parent.localToGlobal(new Laya.Point(sp.x, sp.y)).x;
            let yy = sp.parent.localToGlobal(new Laya.Point(sp.x, sp.y)).y;
            let offX = 0;
            let offY = 0;
            if (arrXY[0]) {
                offX = parseInt(arrXY[0]);
            }
            if (arrXY[1]) {
                offY = parseInt(arrXY[1]);
            }
            if (this._fm && this._fm.isLoaded) {
                let w = sp.width - this._fm.anim.container.width;
                let h = sp.height - this._fm.anim.container.height;
                this._fm.anim.container.x = xx + (w * 0.5) + offX;
                this._fm.anim.container.y = yy + (h * 0.5) + offY;
                this._fm.play(index, true);
            }
        }
        removeSp() {
            if (this._fm) {
                this._fm.stop();
            }
        }
        removeTS() {
            if (this._type == 1 || this._type == 2) {
                this.removeSp();
            }
        }
        removeYD() {
            if (this._type == 3) {
                this.removeSp();
                this.getYinDaoView().removeSelf();
            }
        }
        showYD(type) {
            if (initConfig.no_guide || YinDaoTaskProxy.Ins.typeList.indexOf(type) == -1)
                return;
            if (TaskModel.Ins.taskData) {
                if (TaskModel.Ins.taskData.taskStatus == 3) {
                    return;
                }
                if (!E.ViewMgr.IsOpen(type)) {
                    return;
                }
                let gCfg;
                let taskArr = TaskModel.Ins.guideArr;
                if (taskArr && taskArr.length > 0) {
                    gCfg = taskArr[this.index];
                }
                if (gCfg) {
                    if (gCfg.f_isview) {
                        E.ViewMgr.Open(EViewType.YinDaoView);
                    }
                    else {
                        let arr = gCfg.f_GuidePosition.split("-");
                        if (type == parseInt(arr[0])) {
                            let sp = E.ViewMgr.getUIByKeySt(gCfg.f_GuidePosition);
                            if (sp) {
                                this._type = 3;
                                this.addTS(gCfg.f_GuidePosition, gCfg.f_XY, gCfg.f_handposition);
                                if (gCfg.f_showsmallview) {
                                    let view = this.getYinDaoView();
                                    if (!view.parent) {
                                        LayerMgr.Ins.screenEffectLayer.addChild(view);
                                    }
                                    view.setLab(gCfg);
                                    view.anchorX = view.anchorY = 0.5;
                                    view.x = (LayerMgr.Ins.screenEffectLayer.width >> 1) + (750 - view.width) * 0.5;
                                    view.y = (LayerMgr.Ins.screenEffectLayer.height >> 1) + gCfg.f_sviewY;
                                }
                            }
                        }
                    }
                }
            }
        }
        getYinDaoView() {
            if (!this._ydView) {
                this._ydView = new YinDaoView1();
            }
            return this._ydView;
        }
        updataXY() {
            let gCfg;
            let taskArr = YinDaoTaskProxy.Ins.taskList[TaskModel.Ins.taskData.taskId];
            if (taskArr && taskArr.length > 0) {
                gCfg = taskArr[this.index];
            }
            if (gCfg) {
                if (gCfg.f_isview) ;
                else {
                    let arr = gCfg.f_GuidePosition.split("-");
                    if (9 == parseInt(arr[0])) {
                        let sp = E.ViewMgr.getUIByKeySt(gCfg.f_GuidePosition);
                        if (sp) {
                            this.addTS(gCfg.f_GuidePosition, gCfg.f_XY, gCfg.f_handposition);
                            let view = this.getYinDaoView();
                            if (view.parent) {
                                view.x = (LayerMgr.Ins.screenEffectLayer.width >> 1) + (750 - view.width) * 0.5;
                                view.y = (LayerMgr.Ins.screenEffectLayer.height >> 1) + gCfg.f_sviewY;
                            }
                        }
                    }
                }
            }
        }
    }

    exports.YinDaoManager = YinDaoManager;

    return exports;

}(window));
(function (exports) {
    'use strict';

    var mUI$2 = ui.views.common.ui_midlabelUI;
    class MidLabelView extends ViewBase {
        constructor() {
            super(...arguments);
            this.midLabelList = [];
            this.checkGuide = false;
            this._tarY = 0;
            this.autoFree = true;
            this.PageType = EPageType.None;
            this.offsetY = 100;
        }
        get timeScale() {
            let val = System_RefreshTimeProxy.Ins.getVal(28);
            if (StringUtil.IsNullOrEmpty(val)) {
                return 1;
            }
            return parseFloat(val);
        }
        onEnter() {
        }
        onExit() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new mUI$2();
            }
        }
        onInit() {
            this.initUI();
        }
        onAddLoadRes() {
            this.addRes(ResPath.View.MidLabel, Laya.Loader.JSON);
        }
        onAddEventListener() {
        }
        onChangeLanguage() {
        }
        getTween() {
            if (this.tempTween) {
                this.tempTween.clear();
            }
            else {
                this.tempTween = new Laya.Tween();
            }
        }
        ShowMidLabel(content, color) {
            this._ui.lbl_content.text = content;
            this._ui.lbl_content.color = color;
            this._ui.alpha = 0.65;
            this._ui.box_content.y = this.UI.height / 2;
            this._tarY = this._ui.box_content.y - this.offsetY;
            this._ui.box_content.alpha = 1;
            this.UI.scaleX = this.UI.scaleY = 0.7;
            this.getTween();
            this.tempTween.to(this.UI, { scaleX: 1, scaleY: 1, complete: new Laya.Handler(this, this.onScaleEnd) }, 350 * this.timeScale, Laya.Ease.backOut);
        }
        onScaleEnd() {
            Laya.timer.once(650 * this.timeScale, this, this.delayShow);
        }
        delayShow() {
            this.getTween();
            this.tempTween.to(this._ui.box_content, { y: this._tarY, alpha: 0, complete: Laya.Handler.create(this, this.closeHandler) }, 500 * this.timeScale, Laya.Ease.linearIn);
        }
        closeHandler() {
            E.ViewMgr.Close(this.ViewType);
            if (this.midLabelList.length > 0) {
                while (this.midLabelList.length >= 2) {
                    this.midLabelList.shift();
                }
                let node = this.midLabelList.shift();
                E.ViewMgr.midDoOpen(node.content, node.color);
            }
        }
        initUI() {
        }
    }

    exports.MidLabelView = MidLabelView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    var mUI$2 = ui.views.common.ui_msgboxUI;
    class MsgBoxView2 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onEnter() {
        }
        onLaterExit() {
            if (this._clearCall)
                this._clearCall.run();
            this._clearCall = null;
            if (this._exitCall)
                this._exitCall.run();
            this._exitCall = null;
        }
        onExit() {
            Laya.timer.callLater(this, this.onLaterExit);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new mUI$2();
                this.sureCtl = ButtonCtl.Create(this._ui.sure, new Laya.Handler(this, this.onBtnSure));
                this.cancelCtl = ButtonCtl.Create(this._ui.cancel, new Laya.Handler(this, this.onBtnCancel));
                this.onlysureCtl = ButtonCtl.Create(this._ui.onlysure, new Laya.Handler(this, this.onBtnSureOnly));
                ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.onBtnClose));
            }
        }
        onInit() {
        }
        show(type, content, sureCall, cancelCall, exitCall) {
            if (!this._ui) {
                return;
            }
            this._ui.lbl_content.text = content;
            this._sureCall = sureCall;
            this._cancelCall = cancelCall;
            this._exitCall = exitCall;
            this.type = type;
            if (type == EMsgBoxType.OnlyOk) {
                this.onlysureCtl.visible = true;
                this.sureCtl.visible = false;
                this.cancelCtl.visible = false;
            }
            else {
                this.onlysureCtl.visible = false;
                this.sureCtl.visible = true;
                this.cancelCtl.visible = true;
            }
        }
        onAddLoadRes() {
            this.addRes(ResPath.View.MsgBox, Laya.Loader.JSON);
            this.addAtlas("common/base.atlas");
        }
        onAddEventListener() {
        }
        onChangeLanguage() {
            this._ui.label_tip.changeText(E.LangMgr.getLang("Tip"));
        }
        onBtnSure() {
            this._clearCall = this._sureCall;
            E.ViewMgr.Close(this.ViewType);
        }
        onBtnCancel() {
            this._clearCall = this._cancelCall;
            E.ViewMgr.Close(this.ViewType);
        }
        onBtnSureOnly() {
            this._clearCall = this._sureCall;
            E.ViewMgr.Close(this.ViewType);
        }
        onBtnClose() {
            if (this.type == EMsgBoxType.OkOrCancel) {
                this._clearCall = this._cancelCall;
            }
            else {
                this._clearCall = this._sureCall;
            }
            E.ViewMgr.Close(this.ViewType);
        }
    }

    exports.MsgBoxView2 = MsgBoxView2;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class AvatarAnimData {
	}
	AvatarAnimData.startUseTime = 100;
	AvatarAnimData.moveDis = 170;

	exports.AvatarAnimData = AvatarAnimData;

	return exports;

}(window));
(function (exports) {
    'use strict';

    function normalize(x, y) {
        return Math.sqrt(x * x + y * y);
    }
    function Rad2Deg(radian) {
        return Laya.Utils.toAngle(radian);
    }
    function dot(x1, y1, x2, y2) {
        let len1 = normalize(x1, y1);
        let len2 = normalize(x2, y2);
        x1 /= len1;
        y1 /= len1;
        x2 /= len2;
        y2 /= len2;
        let d = x1 * x2 + y1 * y2;
        return d;
    }
    function vectorAngle(x1, y1, x2, y2) {
        if (x1 == x2 && y1 == y2) {
            return;
        }
        var cosAngle = (x1 * x2 + y1 * y2) / (normalize(x1, y1) * normalize(x2, y2));
        var aCosAngle = Math.acos(cosAngle);
        var angle = Rad2Deg(aCosAngle);
        let d1 = dot(x1, y1, x2, y2);
        let d2 = dot(x1, y1, 0, -1);
        if (d1 > 0 && d2 > 0 || d1 < 0 && d2 > 0) {
            angle = -angle;
        }
        return angle;
    }
    class ShootAvatar extends Laya.Image {
        constructor() {
            super();
            this.OFFSET_Y = 60;
            this.anchorX = 0.5;
            this.anchorY = 0.5;
        }
        get flyTime() {
            return AnimConfig.ShootTime / AnimConfig.AnimScale;
        }
        startMove(sx, sy, ex, ey) {
            this.x = sx;
            this.y = sy;
            let a = vectorAngle(ex - this.x, ey - this.y, 1, 0);
            this.rotation = a;
            if (this._tween) {
                this._tween.clear();
            }
            else {
                this._tween = new Laya.Tween();
            }
            this._tween.to(this, { x: ex, y: ey }, this.flyTime, null, new Laya.Handler(this, this.onCompleteHander));
        }
        moveAvatar(id, pet, cur1) {
            let shoot = HrefUtils.getVal("shootres");
            if (shoot) {
                id = shoot;
            }
            this.curURL = `o/bullet/${id}.png`;
            Laya.loader.load(this.curURL, new Laya.Handler(this, this.onComplete, [pet, cur1]));
        }
        onComplete(avatar, cur1) {
            this.skin = this.curURL;
            let ox = 0;
            let oy = 0;
            let posType = 0;
            let pos;
            if (avatar.vo instanceof stFightPet) {
                let petVo = avatar.vo;
                let petCfg = PetListProxy.Ins.getCfgById(petVo.petId);
                pos = petCfg.f_attackpos;
                posType = petVo.pos;
            }
            else if (avatar.vo instanceof stFightRole || avatar.vo && typeof avatar.vo.pos == "number") {
                let avatarVo = avatar.vo;
                posType = avatarVo.pos;
            }
            if (StringUtil.IsNullOrEmpty(pos)) {
                pos = "100|100";
            }
            if (pos) {
                let arr = pos.split("|");
                ox = parseInt(arr[0]);
                oy = parseInt(arr[1]);
            }
            let a = 1;
            if (posType == AvatarFactory.POS_RIGHT_PET) {
                a = -1;
            }
            this.startMove(avatar.x + ox * a, avatar.y - oy, cur1.x, cur1.y - this.OFFSET_Y);
        }
        onCompleteHander() {
            this.destroy();
        }
    }

    exports.ShootAvatar = ShootAvatar;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Skill_Effect extends BaseCfg {
        GetTabelName() {
            return "t_Skill_EffectT";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Skill_Effect();
            }
            return this._ins;
        }
        getBySkillID(skillId) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_SkillID == skillId) {
                    return cfg;
                }
            }
        }
    }
    class FightModelVer2 {
        constructor() {
            this.lastTime = 0;
            this.roleCount = 6;
            this.DEAD_SKILL_ID = 1000;
            this.roles = [];
            this.curIndex = 0;
            this._isStop = false;
            this.actList = [];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FightModelVer2();
            }
            return this._ins;
        }
        get moveTime() {
            return AvatarAnimData.startUseTime / AnimConfig.AnimScale;
        }
        get animScale() {
            return AnimConfig.AnimScale;
        }
        start(avatarList, actList, end, roundHandler) {
            this.lastTime = Laya.timer.currTimer;
            this.curIndex = 0;
            this._isStop = false;
            this.end = end;
            this.roundHandler = roundHandler;
            this.roles = avatarList;
            this.actList = actList;
            this.parseActions();
        }
        onPlayEnd(mParse, cur, useNext) {
            if (cur.die) ;
            else {
                cur.play(EAvatarAnim.Stand);
            }
            if (useNext && mParse) {
                this.parseActions();
            }
        }
        getAvatar(pos) {
            for (let i = 0; i < this.roles.length; i++) {
                let cellItem = this.roles[i];
                let vo = cellItem.vo;
                if (vo) {
                    if (vo.pos == pos) {
                        return cellItem;
                    }
                }
            }
        }
        attackEnd(mParse, cur, act, _anim) {
            let useNext = true;
            let next = act.back;
            if (next) {
                if (next.hasVal(ESkillActionAnim.NormalAtk) ||
                    next.hasVal(ESkillActionAnim.CsAtk) ||
                    next.index != act.index && next.skillID == EActionSkill.PassiveHurtBlood) {
                    useNext = false;
                }
            }
            cur.play(_anim + 1, this, this.onPlayEnd, [mParse, cur, useNext]) * 1000 + TimeUtil.serverTime * 1000;
            if (!useNext && mParse) {
                this.parseActions();
            }
        }
        passiveAnimStand(mParse, act, cur) {
            if (cur.die) ;
            else {
                cur.play(EAvatarAnim.Stand);
            }
            if (mParse) {
                if (act.back && act.back.skillID != EActionSkill.PassiveHurtBlood) {
                    this.parseActions();
                }
            }
        }
        moveEnd(cur, mParse) {
            if (cur.curAnim == EAvatarAnim.Stunned) {
                cur.play(cur.curAnim);
            }
            else {
                if (cur.die) ;
                else {
                    cur.play(EAvatarAnim.Stand);
                }
            }
            if (mParse) {
                this.parseActions();
            }
        }
        startMove(mParse, oldPos, _movePos) {
            let cur = this.getAvatar(oldPos);
            let ox;
            let oy;
            if (oldPos == _movePos) {
                let pos = AvatarFactory.posList[_movePos - 1];
                ox = pos.x;
                oy = pos.y;
            }
            else {
                let moveObj = this.getAvatar(_movePos);
                if (moveObj) {
                    let sub = Math.abs(moveObj.x - cur.x);
                    let pos = AvatarFactory.posList[_movePos - 1];
                    oy = pos.y;
                    let size = AvatarFactory.offset;
                    if (sub == size && cur.y == moveObj.y) {
                        ox = cur.x;
                        oy = cur.y;
                    }
                    else {
                        if (oldPos <= AvatarFactory.maxSideCount) {
                            ox = pos.x - size;
                        }
                        else {
                            ox = pos.x + size;
                        }
                    }
                }
            }
            if (cur) {
                cur.move(ox, oy, this.moveTime, new Laya.Handler(this, this.moveEnd, [cur, mParse]));
            }
        }
        moveLogic(mParse, oldPos, _movePos) {
            if (oldPos == _movePos) {
                this.startMove(mParse, oldPos, _movePos);
            }
            else {
                Laya.timer.once(400 / this.animScale, this, this.startMove, [mParse, oldPos, _movePos]);
            }
        }
        bloodNext(mParse) {
            if (mParse) {
                Laya.timer.once(BloodCtl.UseTime, this, this.parseActions);
            }
        }
        stop() {
            this._isStop = true;
        }
        get subTime() {
            let sub = Laya.timer.currTimer - this.lastTime;
            return sub;
        }
        init() {
            this.lastTime = 0;
        }
        subBlood(act) {
            if (act.back && act.back.skillID == EActionSkill.PassiveHurtBlood) {
                this.parseActions();
            }
        }
        mergeRun(mParse, act) {
            let next = act.getBackNext();
            if (next && next.skillID == EActionSkill.ClientDie) {
                if (mParse) {
                    this.parseActions();
                }
            }
            else {
                this.bloodNext(mParse);
            }
        }
        csPlay2ByKey(cur1, act, key) {
            if (act.serverSkillId) {
                let cfg = t_Skill_Effect.Ins.getBySkillID(act.serverSkillId);
                if (cfg) {
                    if (cfg[key]) {
                        cur1.csPlay2(cfg[key]);
                    }
                }
            }
        }
        normalAck(cur1, mParse, act) {
            let curAnim = Math.random() < 0.5 ? EAvatarAnim.Attack : EAvatarAnim.AssassinateReady;
            let time = Math.ceil(cur1.play(curAnim, this, this.attackEnd, [mParse, cur1, act, curAnim]) * 1000);
        }
        parseActions() {
            if (this._isStop) {
                this.curIndex = this.actList.length;
            }
            let act = this.actList[this.curIndex];
            if (act) {
                this.curIndex++;
                if (E.Debug) {
                    if (HrefUtils.getVal("nofightlog") || initConfig.nofightlog) {
                        if (FightTest.flyMSG) {
                            LogSys$1.Log(Laya.timer.currTimer + act.toString());
                        }
                    }
                }
                this.lastTime = Laya.timer.currTimer;
                for (let i = 0; i < act.targetList.length; i++) {
                    let vo = act.targetList[i];
                    let cur1 = this.getAvatar(vo.target);
                    let mParse = i == act.targetList.length - 1;
                    let isFirstTarget = i == 0;
                    switch (act.skillID) {
                        case EActionSkill.ClientMove:
                            if (cur1.die) {
                                if (E.Debug) {
                                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, "pos " + vo.target + "死之后被移动到 " + vo.val + "\n"
                                        + JSON.stringify(act.serverData));
                                }
                                if (mParse) {
                                    this.parseActions();
                                }
                            }
                            else {
                                this.moveLogic(mParse, vo.target, vo.val);
                            }
                            break;
                        case EActionSkill.NormalAttack:
                            this.normalAck(cur1, mParse, act);
                            if (act.serverSkillId) {
                                let cfg = t_Skill_Effect.Ins.getBySkillID(act.serverSkillId);
                                if (cfg && cfg.f_Atk) {
                                    cur1.csPlay(cfg.f_Atk);
                                }
                            }
                            break;
                        case EActionSkill.CriticalStrike:
                            cur1.play(EAvatarAnim.StrongAttack, this, this.attackEnd, [mParse, cur1, act, EAvatarAnim.StrongAttack]) * 1000 + TimeUtil.serverTime * 1000;
                            cur1.csPlay(EAvatarEffectAnim.Cs);
                            if (act.serverSkillId) {
                                let cfg = t_Skill_Effect.Ins.getBySkillID(act.serverSkillId);
                                if (cfg && cfg.f_CriticalHit) {
                                    cur1.csPlay(cfg.f_CriticalHit);
                                }
                            }
                            break;
                        case EActionSkill.SuckBlood:
                            cur1.csPlay(EAvatarEffectAnim.AddBlood);
                            cur1.playBlood(vo.val);
                            this.bloodNext(mParse);
                            break;
                        case EActionSkill.Recover:
                            cur1.csPlay(EAvatarEffectAnim.HuiFuBlood);
                            cur1.playBlood(vo.val, false, EAvatarEffectAnim.HuiFuBloodTxt);
                            this.mergeRun(mParse, act);
                            LogSys$1.Log(vo.target + "回复血" + vo.val);
                            break;
                        case EActionSkill.ReviveSetBlood:
                            cur1.csPlay(EAvatarEffectAnim.AddBlood);
                            if (cur1.blood) {
                                cur1.blood.curBlood = 0;
                            }
                            cur1.playBlood(vo.val, false, EAvatarEffectAnim.HuiFuBloodTxt);
                            this.bloodNext(mParse);
                            LogSys$1.Log(vo.target + "复活后设置血" + vo.val);
                            break;
                        case EActionSkill.PassiveDodge:
                            cur1.csPlay(EAvatarEffectAnim.Dodge);
                            if (mParse) {
                                cur1.play(EAvatarAnim.Dodge, this, this.parseActions);
                            }
                            else {
                                cur1.play(EAvatarAnim.Dodge);
                            }
                            break;
                        case EActionSkill.SkillType:
                            let time = 0;
                            switch (vo.val) {
                                case 1:
                                    time = 500;
                                    cur1.csPlay(EAvatarEffectAnim.Lianji);
                                    break;
                                case 2:
                                    time = 500;
                                    cur1.csPlay(EAvatarEffectAnim.StrikeBackTxt);
                                    break;
                                case 3:
                                    this.csPlay2ByKey(cur1, act, "f_Buff");
                                    break;
                                case 4:
                                    this.csPlay2ByKey(cur1, act, "f_Debuff");
                                    break;
                            }
                            if (mParse) {
                                Laya.timer.once(time / this.animScale, this, this.parseActions);
                            }
                            break;
                        case EActionSkill.ResetStand:
                            cur1.play(EAvatarAnim.Stand);
                            if (mParse) {
                                this.parseActions();
                            }
                            break;
                        case EActionSkill.PassiveAnim:
                            switch (vo.val) {
                                case ESkillActionAnim.NormalAtk:
                                    cur1.csPlay(EAvatarEffectAnim.NormalAtk);
                                    cur1.play(EAvatarAnim.Hit, this, this.passiveAnimStand, [mParse, act, cur1]);
                                    this.csPlay2ByKey(cur1, act, "f_SufferAtk");
                                    if (mParse) {
                                        this.subBlood(act);
                                    }
                                    break;
                                case ESkillActionAnim.CsAtk:
                                    cur1.csPlay(EAvatarEffectAnim.CsAtk);
                                    cur1.play(EAvatarAnim.Hit2, this, this.passiveAnimStand, [mParse, act, cur1]);
                                    this.csPlay2ByKey(cur1, act, "f_SufferCriticalHit");
                                    if (mParse) {
                                        this.subBlood(act);
                                    }
                                    break;
                                case ESkillActionAnim.Vertigo:
                                    cur1.playStunned();
                                    cur1.csPlay(EAvatarEffectAnim.JiYunTxt);
                                    let _needWait = false;
                                    let next = act.getBackNext();
                                    if (next && next.index == act.index) {
                                        if (next.skillID == EActionSkill.CriticalStrike || next.skillID == EActionSkill.NormalAttack) {
                                            _needWait = true;
                                        }
                                    }
                                    if (mParse) {
                                        if (_needWait) {
                                            Laya.timer.once(500 / this.animScale, this, this.parseActions);
                                        }
                                        else {
                                            this.parseActions();
                                        }
                                    }
                                    break;
                            }
                            break;
                        case EActionSkill.PassiveHurtBlood:
                            cur1.playBlood(-vo.val, act.serverSkillId == ESkillId.CriticalStrike);
                            this.mergeRun(mParse, act);
                            cur1.event(AvatarEvent.UPDATA_BLOOD, vo.val);
                            break;
                        case EActionSkill.ClientDie:
                            this.gotoDie(mParse, cur1);
                            break;
                        case EActionSkill.Round:
                            this.roundHandler.runWith(vo.val);
                            if (mParse) {
                                this.parseActions();
                            }
                            break;
                        case EActionSkill.Skill:
                            let skillcfg = t_Skill_Effect.Ins.getBySkillID(vo.val);
                            if (skillcfg) {
                                if (cur1 && cur1.blood) {
                                    cur1.blood.playSkillTxt(skillcfg.f_SkillType, skillcfg.f_SkillName);
                                }
                            }
                            if (mParse) {
                                this.parseActions();
                            }
                            break;
                        case EActionSkill.RemoteAttack:
                            let pet = this.getAvatar(act.index);
                            if (isFirstTarget) {
                                let time = pet.play(EAvatarAnim.ShootStart, this, this.onShootStartComplete, [act, pet]);
                                act.delayTime0 = time * 1000;
                            }
                            let skillcfg1 = t_Skill_Effect.Ins.getBySkillID(act.serverSkillId);
                            if (pet) {
                                let timer = new Laya.Timer();
                                timer.once(act.delayTime0, this, this.onDelayHandler, [skillcfg1.f_ExEffect, cur1, pet, mParse]);
                            }
                            break;
                        case EActionSkill.BuffStart:
                            LogSys$1.Log("buffer开始" + JSON.stringify(act.serverData));
                            cur1.buffer.play(vo.val);
                            this.parseActions();
                            break;
                        case EActionSkill.BuffEnd:
                            LogSys$1.Log("buffer结束" + JSON.stringify(act.serverData));
                            cur1.buffer.stop(vo.val);
                            this.parseActions();
                            break;
                        case EActionSkill.ShoveAside:
                            LogSys$1.Log("触发格挡" + JSON.stringify(act.serverData));
                            cur1.csPlay2(EAvatarEffectAnim.ShoveAside);
                            let animTime1 = cur1.play(EAvatarAnim.ShoveAside, this, this.onStand, [cur1], true);
                            Laya.timer.once(animTime1 * 1000, this, this.parseActions);
                            break;
                        case EActionSkill.RemoteServerAtk:
                        case EActionSkill.RemoteServerCsAtk:
                            let remoteAvatar = this.getAvatar(vo.val);
                            if (remoteAvatar) {
                                let curAnim;
                                if (act.skillID == EActionSkill.RemoteServerAtk) {
                                    curAnim = EAvatarAnim.Attack;
                                }
                                else {
                                    curAnim = EAvatarAnim.StrongAttack;
                                }
                                cur1.play(curAnim, this, this.attackEnd, [false, cur1, act, curAnim]);
                                let timer = new Laya.Timer();
                                let userTime = cur1.coreSpine.getDurationByAnimIndex(curAnim) + cur1.coreSpine.getDurationByAnimIndex(curAnim + 1);
                                timer.once(userTime * 1000, this, this.onDelayHandler, [cur1.vo.skin.f_BulletPic, remoteAvatar, cur1, mParse]);
                            }
                            break;
                    }
                }
            }
            else {
                this.end.run();
            }
        }
        onDelayHandler(shootId, cur1, pet, mParse) {
            let shoot = new ShootAvatar();
            let view = E.ViewMgr.Get(EViewType.FightMain);
            shoot.moveAvatar(shootId, pet, cur1);
            view.container.addChild(shoot);
            if (mParse) {
                Laya.timer.once(AnimConfig.ShootTime / AnimConfig.AnimScale, this, this.parseActions);
            }
        }
        onStand(cur) {
            cur.play(EAvatarAnim.Stand);
        }
        onShootStartComplete(act, cur) {
            let time = cur.play(EAvatarAnim.ShootRun, this, this.onStand, [cur]);
            AnimConfig.ShootTime = time * 1000;
        }
        gotoDie(mParse, cur) {
            cur.die = true;
            if (mParse) {
                this.parseActions();
            }
            cur.play(EAvatarAnim.Die, this, this.onDie, [cur]);
        }
        onDie(cur) {
            cur.alphaToZero();
        }
    }

    exports.FightModelVer2 = FightModelVer2;
    exports.t_Skill_Effect = t_Skill_Effect;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class UiCell {
    }
    class t_Battle_config extends BaseCfg {
        GetTabelName() {
            return "t_Battle_config";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Battle_config();
            }
            return this._ins;
        }
    }
    class t_TeamFight_Score extends BaseCfg {
        GetTabelName() {
            return "t_TeamFight_Score";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_TeamFight_Score();
            }
            return this._ins;
        }
        getVal(val) {
            let l = this.List;
            if (val == 0) {
                return 0;
            }
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                let next = l[i + 1];
                if (next) {
                    if (val >= cfg.f_Damage && val < next.f_Damage) {
                        return i;
                    }
                }
            }
            return l.length - 1;
        }
    }
    class FightMainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMaskClick = false;
            this.autoFree = true;
            this._cacheList = [];
            this.maxSideCount = 0;
            this.multFight = false;
            this.roundHandler = new Laya.Handler(this, this.onRonundCallBack);
            this.delayTime = 0;
            this.avatarList = [];
            this.mushPosArr = [];
            this.bloodWidth = 0;
            this._maxSpeed = 2;
            this._tempList = [];
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.maoxian.ui_fightUI();
                this.maxSideCount = AvatarFactory.maxSideCount;
                this.delayTime = t_Battle_config.Ins.GetDataById(1).f_timedelay;
                this.bloodWidth = this._ui.blood1.width;
                this.unlockLv = parseInt(System_RefreshTimeProxy.Ins.getVal(46));
                if (initConfig.unlockLv) {
                    this.unlockLv = initConfig.unlockLv;
                }
                this.model = MainModel.Ins;
                this._ownerCtl = FontCtlFactory.createPlus();
                this._enemyCtl = FontCtlFactory.createPlus();
                this._cnCtl = new FontClipCtl(`remote/maoxian/c`);
                this._ui.bg.on(Laya.Event.CLICK, this, this.onbgClick);
                this.onRonundCallBack();
                let sprmask = new Laya.Sprite();
                sprmask.graphics.drawRect(0, 0, this.UI.width, this.UI.height, null, "#000000");
                sprmask.alpha = 0.1;
                sprmask.on(Laya.Event.CLICK, this, this.onbgClick);
                this.UI.addChild(sprmask);
                this.fight = FightModelVer2.Ins;
                this.quickCtl = ButtonCtl.CreateBtn(this._ui.quickBtn, this, this.onQuickHandler);
                this.skipCtl = ButtonCtl.CreateBtn(this._ui.skipBtn, this, this.onStopFight);
                let cfg = FuncProxy.Ins.getCfgByFuncId(EFuncDef.Expedition);
                if (HrefUtils.getVal("skip") == 1) {
                    this.skipCtl.visible = true;
                }
                else {
                    this.skipCtl.visible = false;
                }
                if (E.Debug) {
                    let showTest = new Laya.Sprite();
                    this._ui.addChild(showTest);
                    for (let i = 0; i < 6; i++) {
                        let spr = this._ui['a' + i];
                        showTest.graphics.drawCircle(spr.x, spr.y, 3, null, "#00ff00");
                        spr = this._ui['d' + i];
                        showTest.graphics.drawCircle(spr.x, spr.y, 3, null, "#00ff00");
                    }
                }
            }
        }
        onTest() {
            MainModel.Ins.fightAdventure(NewAdventureModel.Ins.adventureData.adventureId);
        }
        onStopFight() {
            this.fight.stop();
        }
        onQuickHandler() {
            if (!MainModel.Ins.isMonthCanUsed && (this.model.mPlayinfo && this.model.mRoleData.lv < this.unlockLv)) {
                E.ViewMgr.ShowMidError(E.getLang("openlimit", this.unlockLv));
                return;
            }
            this.model.fightAnimScale++;
            if (this.model.fightAnimScale > this._maxSpeed) {
                this.model.fightAnimScale = 1;
            }
            AnimConfig.AnimScale = this.model.fightAnimScale;
            this.updateQuick();
        }
        updateQuick() {
            let val = this.model.fightAnimScale;
            RedUpdateModel.Ins.save(RedEnum.FIGHT_ANIM_SCALE, this.model.fightAnimScale);
            AnimConfig.AnimScale = this.model.fightAnimScale;
            let roles = this.fight.roles;
            for (let i = 0; i < roles.length; i++) {
                let avatar = roles[i];
                avatar.coreSpine.playbackRate(val);
            }
            this._ui.sppedImg.skin = `remote/maoxian/az_anniu_x${val}.png`;
        }
        onbgClick() {
            if (this._ui.skinTf.visible) {
                this.onStopFight();
            }
            let sub = this.fight.subTime;
            if (this.fight.lastTime != 0 && sub >= 2000) {
                E.ViewMgr.Close(EViewType.FightMain);
                if (E.Debug) {
                    console.error(Date.now() + " client to close Fight...");
                }
            }
            LogSys$1.Log("lastTime:" + this.fight.lastTime + " your exit... " + sub);
        }
        addUiCell(uiType, data) {
            let cell = new UiCell();
            cell.uiType = uiType;
            cell.data = data;
            this._cacheList.push(cell);
        }
        onExit() {
            this.clearScene();
            this.releaseRes();
            spineRes.GC();
            let _fightEnd = new FightEnd_req();
            _fightEnd.fight_type = this._curData.type;
            SocketMgr.Ins.SendMessageBin(_fightEnd);
            MainModel.Ins.mainView.avatarFight && MainModel.Ins.mainView.avatarFight.onInit();
        }
        releaseRes() {
            E.ViewMgr.Open(EViewType.Main, Callback.Create(this, this.checkUI));
        }
        checkUI() {
            if (this._cacheList.length > 0) {
                let cell = this._cacheList.shift();
                E.ViewMgr.Open(cell.uiType, Callback.Create(this, this.checkUI), cell.data);
            }
        }
        clearScene() {
            AvatarFactory.clearEffect();
            AnimConfig.AnimScale = 1.0;
            while (this.avatarList.length > 0) {
                let cell = this.avatarList.pop();
                cell.dispose();
                cell = null;
            }
            if (this.bigBossAvatar) {
                this.bigBossAvatar.dispose();
                this.bigBossAvatar = null;
            }
        }
        onAddLoadRes() {
            this.addAtlas("maoxian.atlas");
            this.addImg(`remote/maoxian/scene.png`);
        }
        onAddEventListener() {
        }
        onEnter() {
        }
        updateHeadView() {
            this._ownerCtl.setValue(this._ui.ownerFight, StringUtil.val2Atlas(this.model.mRoleData.getVal(ECellType.BATTLE)));
            let plus = this.getEnemyPlus(this._curData.fightVo);
            this._enemyCtl.setValue(this._ui.enemyFight, StringUtil.val2Atlas(plus), "right");
        }
        getEnemyPlus(vo) {
            let plus = 0;
            for (let i = 0; i < vo.roleList.length; i++) {
                let cell = vo.roleList[i];
                if (cell.pos > 6) {
                    plus += cell.plus;
                }
            }
            return plus;
        }
        rebuildPosList(type) {
            AvatarFactory.posList = [];
            let posList = AvatarFactory.posList;
            for (let i = 0; i < this.maxSideCount; i++) {
                let cell = this._ui["a" + (i + 1)];
                posList.push(new Laya.Point(cell.x, cell.y));
            }
            for (let i = 0; i < this.maxSideCount; i++) {
                let cell = this._ui["d" + (i + 1)];
                posList.push(new Laya.Point(cell.x, cell.y));
            }
            if (this.mushPosArr.indexOf(type.toString()) >= 0) {
                posList[5] = new Laya.Point(this._ui.a0.x, this._ui.a0.y);
                posList[11] = new Laya.Point(this._ui.d0.x, this._ui.d0.y);
                this.multFight = false;
            }
            else {
                this.multFight = true;
            }
            AvatarFactory.posList[AvatarFactory.POS_LEFT_PET - 1] = new Laya.Point(this._ui.pet0.x, this._ui.pet0.y);
            AvatarFactory.posList[AvatarFactory.POS_RIGHT_PET - 1] = new Laya.Point(this._ui.pet1.x, this._ui.pet1.y);
        }
        onSortByPosition(a, b) {
            if (a.y < b.y) {
                return -1;
            }
            else if (a.y > b.y) {
                return 1;
            }
            return 0;
        }
        createPet(_petVo) {
            if (Laya.Utils.getQueryString("petid")) {
                _petVo.petId = parseInt(Laya.Utils.getQueryString("petid"));
            }
            let _pet = AvatarFactory.createPet(_petVo.petId, false);
            _pet.play(EAvatarAnim.Stand);
            _pet.vo = _petVo;
            let dir = EAvatarDir.Right;
            if (_petVo.pos == AvatarFactory.POS_RIGHT_PET) {
                dir = EAvatarDir.Left;
            }
            _pet.dir = dir;
            let offsetW = AvatarFactory.MOVE_POS;
            if (_petVo.pos == AvatarFactory.POS_RIGHT_PET) {
                offsetW *= -1;
            }
            let curPos = AvatarFactory.posList[_petVo.pos - 1];
            let endPos = new Laya.Point(curPos.x, curPos.y);
            _pet.setPos(endPos.x + offsetW, endPos.y);
            this.container.addChild(_pet);
            this._tempList.push(_pet);
            this.avatarList.push(_pet);
            return _pet;
        }
        createNormalAvatar(dir = EAvatarDir.Left, rideid, wingid, imageID) {
            return AvatarFactory.createFightMonsterAvatar(dir, rideid, wingid, true, imageID);
        }
        createAvatar(roleVo) {
            if (roleVo.pos == AvatarFactory.POS_RIGHT_PET || roleVo.pos == AvatarFactory.POS_LEFT_PET) {
                if (E.Debug) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, "roleList pet->" + roleVo.pos);
                }
                return;
            }
            let skin = roleVo.skin;
            let isBigBoss = false;
            let dir;
            if (roleVo.pos > this.maxSideCount) {
                dir = EAvatarDir.Left;
            }
            else {
                dir = EAvatarDir.Right;
            }
            let _avatar;
            if (this._curData.fightVo.ownerpos == roleVo.pos && roleVo.pos <= this.maxSideCount) {
                _avatar = this.createNormalAvatar(dir, ZuoQiModel.Ins.rideVo.mainid, MainModel.Ins.wingId, MainModel.Ins.imageID);
                _avatar.mSkin = AvatarFactory.createMainSkin();
            }
            else {
                if (roleVo.pos <= this.maxSideCount) ;
                else {
                    if ([EFightType.BigBoss, EFightType.BossFight].indexOf(this._curData.type) !== -1) {
                        isBigBoss = true;
                        _avatar = this.bigBossAvatar;
                    }
                }
                if (!isBigBoss) {
                    _avatar = this.createNormalAvatar(dir, skin.f_MountID, skin.f_WingID, MainModel.Ins.randomImageID);
                    _avatar.mSkin = roleVo.skin;
                }
            }
            if (roleVo.pos <= this.maxSideCount) {
                if (_avatar.blood) {
                    _avatar.blood.reverse();
                }
            }
            _avatar.blood.setHeadTxt(roleVo);
            _avatar.vo = roleVo;
            _avatar.reset();
            _avatar.isBoss = isBigBoss;
            let offsetW = AvatarFactory.MOVE_POS;
            if (roleVo.pos > AvatarFactory.maxSideCount) {
                offsetW *= -1;
            }
            let curPos = AvatarFactory.posList[roleVo.pos - 1];
            let endPos = new Laya.Point(curPos.x, curPos.y);
            _avatar.setPos(endPos.x + offsetW, endPos.y);
            _avatar.play(EAvatarAnim.Stand);
            if (_avatar.blood) {
                _avatar.blood.setInit(roleVo.init_blood, roleVo.blood);
            }
            _avatar.refreshSkin();
            this._tempList.push(_avatar);
            if (_avatar.isBoss) {
                _avatar.setPos(endPos.x, endPos.y);
                _avatar.on(AvatarEvent.UPDATA_BLOOD, this, this.updateBossBloodEvt);
                _avatar.play(EAvatarAnim.InAnim, this, this.onMoveEnd, [_avatar]);
                if (_avatar.blood) {
                    _avatar.blood.bgVisible = false;
                }
                Laya.timer.callLater(this, () => {
                    _avatar.event(Laya.Event.COMPLETE);
                });
            }
            _avatar.die = false;
            this.avatarList.push(_avatar);
            DebugUtil.drawTF(_avatar, roleVo.pos + "", "#ffff00");
            return _avatar;
        }
        actionRun() {
            this.rebuildPosList(this._curData.type);
            this.updateQuick();
            if (this.multFight) {
                this.quickCtl.visible = true;
                if (MainModel.Ins.mRoleData.lv >= this.unlockLv) {
                    this.quickCtl.gray = false;
                }
                else {
                    this.quickCtl.gray = true;
                }
            }
            if (E.ViewMgr.IsOpen(EViewType.NewAdventureMain)) {
                this.addUiCell(EViewType.NewAdventureMain);
                E.ViewMgr.Close(EViewType.NewAdventureMain);
            }
            if (E.ViewMgr.IsOpen(EViewType.JjcMain)) {
                this.addUiCell(EViewType.JjcMain);
                E.ViewMgr.Close(EViewType.JjcMain);
            }
            if (E.ViewMgr.IsOpen(EViewType.XXZDZView)) {
                this.addUiCell(EViewType.XXZDZView);
                E.ViewMgr.Close(EViewType.XXZDZView);
            }
            if (E.ViewMgr.IsOpen(EViewType.WuShenDianView)) {
                this.addUiCell(EViewType.WuShenDianView);
                E.ViewMgr.Close(EViewType.WuShenDianView);
            }
            if (E.ViewMgr.IsOpen(EViewType.JjcFight)) {
                let jjc_model;
                if (this._curData.type == EFightType.Jjc) {
                    let _jjcExtData = this._curData.extData;
                    jjc_model = getJjcModel(_jjcExtData.type);
                }
                this.addUiCell(EViewType.JjcFight, jjc_model);
                E.ViewMgr.Close(EViewType.JjcFight);
            }
            if (E.ViewMgr.IsOpen(EViewType.YeWaiBoss)) {
                this.addUiCell(EViewType.YeWaiBoss);
                E.ViewMgr.Close(EViewType.YeWaiBoss);
            }
            E.ViewMgr.Close(EViewType.Main);
            if (this._curData.type == EFightType.Jjc) {
                this.updateHeadView();
                let _jjcExtData = this._curData.extData;
                MainModel.Ins.setTTHead(this._ui.righticon, MainModel.Ins.convertHead(_jjcExtData.enemyInfo.headUrl));
                MainModel.Ins.setTTHead(this._ui.ownerIcon, MainModel.Ins.mRoleData.headUrl);
                this._ui.leftplayer.visible = this._ui.rightPlayer.visible = true;
            }
            else {
                this._ui.leftplayer.visible = this._ui.rightPlayer.visible = false;
            }
            this.onRonundCallBack();
            let fightVo = this._curData.fightVo;
            this._tempList = [];
            let _fightRoleList = [];
            for (let i = 0; i < fightVo.petList.length; i++) {
                let _petVo = fightVo.petList[i];
                _fightRoleList.push(_petVo);
            }
            for (let i = 0; i < fightVo.roleList.length; i++) {
                let roleVo = fightVo.roleList[i];
                _fightRoleList.push(roleVo);
            }
            this._fightRoleList = _fightRoleList;
            if (initConfig.sync || Laya.Utils.getQueryString("sync")) {
                this.syncLoad();
            }
            else {
                this.startLoad();
            }
        }
        syncLoad() {
            while (this._fightRoleList.length) {
                let cell = this._fightRoleList.shift();
                this.createFightAvatar(cell);
            }
            this.next();
        }
        startLoad() {
            if (this._fightRoleList.length) {
                let cell = this._fightRoleList.shift();
                LogSys$1.Log("================> start load...!" + JSON.stringify(cell));
                this.createFightAvatar(cell);
            }
            else {
                Laya.timer.clear(this, this.startLoad);
                this.next();
            }
        }
        createFightAvatar(cell) {
            let _avatar;
            if (cell instanceof stFightPet || cell.petId) {
                _avatar = this.createPet(cell);
            }
            else {
                _avatar = this.createAvatar(cell);
            }
            _avatar.once(Laya.Event.COMPLETE, this, this.startLoad);
            return _avatar;
        }
        startMove(_avatar) {
            let roleVo = _avatar.vo;
            if (_avatar.isBoss) ;
            else {
                let curPos = AvatarFactory.posList[roleVo.pos - 1];
                if (curPos) {
                    let endPos = new Laya.Point(curPos.x, curPos.y);
                    _avatar.moveX(endPos.x, this.delayTime, new Laya.Handler(this, this.onMoveEnd, [_avatar]), EAvatarAnim.Move);
                }
            }
        }
        next() {
            this._tempList = this._tempList.sort(this.onSortByPosition);
            for (let i = 0; i < this._tempList.length; i++) {
                let _avatar = this._tempList[i];
                if (_avatar.vo.petId) ;
                else {
                    this.container.addChild(_avatar);
                }
                this.startMove(_avatar);
            }
            Laya.timer.once(this.delayTime, this, this.startFight);
        }
        onInit() {
            MainModel.Ins.mainView.avatarFight && MainModel.Ins.mainView.avatarFight.onExit();
            this.fight.init();
            this.mushPosArr = System_RefreshTimeProxy.Ins.getVal(33).split("|");
            this.refreshFightView(this.Data);
        }
        refreshFightView(_data) {
            this._curData = _data;
            this.curBloodVal = 0;
            this._ui.bloodbg.visible = false;
            if (EFightType.BossFight === this._curData.type) {
                this.updateBossBloodEvt(0);
                this.bigBossAvatar = AllianceModel.Ins.getBossMonster(this, this.actionRun);
            }
            else if (EFightType.BigBoss === this._curData.type) {
                this.updateBossBloodEvt(0);
                this.bigBossAvatar = FightMonsterModel.Ins.getBossMonster(this, this.actionRun);
            }
            else {
                this.actionRun();
            }
        }
        updateBossBloodEvt(blood) {
            this._ui.bloodbg.visible = true;
            this.curBloodVal += blood;
            let index = t_TeamFight_Score.Ins.getVal(this.curBloodVal);
            let cfg = t_TeamFight_Score.Ins.List[index];
            this._ui.bloodStatus.skin = `remote/maoxian/az_${cfg.f_Score}.png`;
            let next = t_TeamFight_Score.Ins.List[index + 1];
            let v = 1;
            let nextVal;
            if (next) {
                nextVal = next.f_Damage;
            }
            else {
                nextVal = cfg.f_Damage;
            }
            v = this.curBloodVal / nextVal;
            if (v > 1) {
                v = 1;
            }
            this._ui.blood1.width = v * this.bloodWidth;
            this._ui.bloodTf.text = this.curBloodVal + "/" + nextVal;
        }
        onMoveEnd(avatar) {
            avatar.play(EAvatarAnim.Stand);
        }
        get container() {
            return this._ui.avatarcon;
        }
        startFight() {
            let l = AvatarFactory.createBystFightAction(this._curData.fightVo.itemList);
            this.fight.start(this.avatarList, l, new Laya.Handler(this, () => {
                this._ui.skinTf.visible = false;
                MainModel.Ins.fightJieSuan(this._curData);
            }), this.roundHandler);
        }
        onRonundCallBack(val = 1) {
            let str = StringUtil.toChinesNum(val);
            this._cnCtl.setCn(this._ui.huiheFc, str);
            this._ui.huiheFc.x = this._ui.diimg.x + this._ui.diimg.width;
            this._ui.hui1.x = this._ui.huiheFc.x + this._cnCtl.mWidth;
            let _useCount = 0;
            if (this.multFight) {
                _useCount = 3;
            }
            else {
                _useCount = 5;
            }
            this._ui.skinTf.visible = val >= _useCount;
            if (initConfig.skip || HrefUtils.getVal("skip")) {
                this._ui.skinTf.visible = true;
            }
        }
    }

    exports.FightMainView = FightMainView;
    exports.t_Battle_config = t_Battle_config;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FightOpenView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this._plusCtl = new PlusCtl();
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = MainModel.Ins;
                this.UI = this._ui = new ui.views.maoxian.ui_maoxianUI();
                this.btnList.push(ButtonCtl.Create(this._ui.fightbtn, new Laya.Handler(this, this.onFightHandler)), ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.Close)), ButtonCtl.Create(this._ui.chapterBtn, new Laya.Handler(this, this.onLingqu)));
                this._ui.monsterTf.visible = false;
            }
        }
        onLingqu() {
            let req = new Reward_req();
            req.type = EFightType.Adventure;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onFightHandler() {
            this.model.adventureEnter();
        }
        onExit() {
            if (this.monsterView) {
                this.monsterView.stop();
            }
            this.monsterView.dispose();
            this.monsterView = null;
        }
        onAddLoadRes() {
            this.addAtlas("maoxian.atlas");
        }
        onAddEventListener() {
        }
        onEnter() {
        }
        onInit() {
            this.UpdateView();
        }
        UpdateView() {
            this.cfg = this.model.adventureVo.curCfg;
            this._ui.guankaTf.text = AdventureLevelProxy.Ins.getChapterName(this.cfg);
            this._plusCtl.setPlus(this._ui.plugs, this.model.adventureVo.revcData.plus);
            let _imgcfg = Enemy_ImageProxy.Ins.getCfg(this.cfg.f_EnamyImage);
            let skin = Enemy_ImageProxy.Ins.toTSkin(_imgcfg);
            if (this.monsterView) {
                this.monsterView.dispose();
            }
            this.monsterView = AvatarFactory.createFightMonsterAvatar(EAvatarDir.Left, _imgcfg.f_MountID, _imgcfg.f_WingID, false, _imgcfg.f_ImageID);
            this._ui.heroContainer.addChild(this.monsterView);
            this.monsterView.start();
            this.monsterView.play(EAvatarAnim.NormalStand);
            this.monsterView.mSkin = skin;
            if (this.model.adventureVo.isChapterRewardFinished) {
                this._ui.chapterBtn.visible = false;
                this._ui.iconContainer.visible = false;
            }
            else {
                this._ui.chapterBtn.visible = true;
                this._ui.iconContainer.visible = true;
                let nextCfg = this.model.adventureVo.nextCfg;
                if (nextCfg) {
                    ItemViewFactory.renderItemSlots(this._ui.iconContainer, nextCfg.f_ChapterReward);
                    let chapter = nextCfg.f_ChapterID + '-' + nextCfg.f_unitid;
                    this._ui.chapterContentTf.text = `通过章节${chapter}后获得`;
                }
                else {
                    ItemViewFactory.renderItemSlots(this._ui.iconContainer, "");
                    this._ui.chapterContentTf.text = "";
                }
            }
            ItemViewFactory.renderItemSlots(this._ui.tgContainer, this.cfg.f_LevelReward1);
        }
    }

    exports.FightOpenView = FightOpenView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Huangzhuang_shuxing_view extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huanzhuang.ui_huangzhuang_shuxing_viewUI();
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = ui.views.main.ui_main_attrUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onAttrHandler);
            }
        }
        onAttrHandler(skin) {
            let arr = skin.dataSource.split(":");
            let id = parseInt(arr[0]);
            let val = attrConvert(id, parseInt(arr[1]));
            skin.tf1.text = MainModel.Ins.getAttrNameIdByID(id);
            skin.valTf.text = val;
            skin.upimg.visible = false;
        }
        onInit() {
            this._ui.list1.array = this.Data;
            this._ui.list1.scrollTo(0);
        }
    }

    exports.Huangzhuang_shuxing_view = Huangzhuang_shuxing_view;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Huangzhuang_tujianView extends ViewBase {
        constructor() {
            super(...arguments);
            this.tabsCtl = new TabControl();
            this.autoFree = true;
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
            HuanZhuangModel.Ins.off(HuanZhuangEvent.SuitUpdate, this, this.onTabUpdate);
            E.ViewMgr.Open(EViewType.HuanzhuangMain);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huanzhuang.ui_huangzhuang_tujianUI();
                this.bindClose(this._ui.close1);
                this.tabsCtl = TabControl.Create(this, this.onSelectHandler, this.itemTabHandler);
                this._tabSkinCtl = TabSkinCtl.Create(ui.views.huanzhuang.ui_huangzhuang_tab_itemUI, "ui_huangzhuang_tab_itemUI", this._ui.tabCon);
                this._ui.list1.itemRender = HuanzhuangTujianItemRender;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.listHandler);
            }
        }
        listHandler(item) {
            item.refreshView();
        }
        isCanActive(l) {
            return HuanZhuangModel.Ins.isCellCanActive(l);
        }
        itemTabHandler(tabSkin, index, sel, data) {
            if (tabSkin instanceof ui.views.huanzhuang.ui_huangzhuang_tab_itemUI) {
                let skin = tabSkin;
                let l = t_Custom_CostumesProxy.Ins.mapList[data];
                if (this.isCanActive(l)) {
                    DotManager.addDot(skin);
                }
                else {
                    DotManager.removeDot(skin);
                }
                let arr = E.LangMgr.getLang("Qua1").split("|");
                skin.tf1.text = arr[data].toString();
                if (sel) {
                    skin.bg1.visible = true;
                    skin.bg2.visible = false;
                }
                else {
                    skin.bg1.visible = false;
                    skin.bg2.visible = true;
                }
            }
        }
        onSelectHandler(v) {
            this._ui.list1.array = t_Custom_CostumesProxy.Ins.mapList[t_Custom_CostumesProxy.Ins.qua[v]];
        }
        onTabUpdate() {
            this._tabSkinCtl.refresh();
        }
        onInit() {
            E.ViewMgr.Close(EViewType.HuanzhuangMain);
            MainModel.Ins.mainMask = true;
            HuanZhuangModel.Ins.on(HuanZhuangEvent.SuitUpdate, this, this.onTabUpdate);
            let qualist = t_Custom_CostumesProxy.Ins.qua;
            this._tabSkinCtl.getItemList(this.tabsCtl, qualist, 0);
            DebugUtil.draw(this._ui.tabCon);
        }
    }

    exports.Huangzhuang_tujianView = Huangzhuang_tujianView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TwoAvatar {
        constructor() {
            this._horseVis = true;
        }
        dispose() {
            if (this.avatar) {
                this.avatar.dispose();
                this.avatar = null;
            }
            if (this.horse) {
                this.horse.dispose();
                this.horse = null;
            }
        }
        refreshSkin() {
            if (this.avatar) {
                this.avatar.wingId = this.wingId;
                this.avatar.rideId = this.rideId;
                this.avatar.refreshSkin();
            }
            if (this.horse && this.rideId > 0) {
                this.horse.wingId = this.wingId;
                this.horse.rideId = this.rideId;
                this.horse.refreshSkin();
            }
        }
        resetEmpty() {
            this.horseVis = false;
        }
        updateSkin(equipType, equipStyle) {
            let _avatar = this.avatar;
            if (!this.avatar.bHorseSkel && equipType == EEquipType.ZuoQi) {
                if (equipStyle != 0) {
                    this.horseVis = true;
                    _avatar = this.horse;
                }
            }
            else {
                this.horseVis = false;
            }
            if (_avatar) {
                _avatar.updateSkin(equipType, equipStyle);
            }
        }
        init() {
            let equipList = MainModel.Ins.getEquipList();
            if (this.rideId > 0) {
                this.avatar = AvatarFactory.createBaseMainAvatar(equipList, this.rideId, this.wingId);
            }
            else {
                this.avatar = AvatarFactory.createBaseMainAvatar(equipList, this.rideId, this.wingId);
                this.horse = AvatarFactory.createBaseMainAvatar(equipList, 1, this.wingId);
            }
            if (this.horse) {
                this.avatarCon.addChild(this.horse);
            }
            this.avatarCon.addChild(this.avatar);
            this.horseVis = false;
        }
        set horseVis(val) {
            if (this._horseVis == val) {
                return;
            }
            this._horseVis = val;
            if (this.horse) {
                this.horse.visible = false;
            }
            if (this.avatar) {
                this.avatar.visible = false;
            }
            if (val) {
                this.avatar.stop();
                if (this.horse) {
                    this.horse.play(EAvatarAnim.NormalStand);
                    this.horse.visible = true;
                }
            }
            else {
                if (this.horse) {
                    this.horse.stop();
                }
                this.avatar.visible = true;
                this.avatar.play(EAvatarAnim.NormalStand);
            }
        }
    }

    exports.TwoAvatar = TwoAvatar;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class NiceAvatarView extends TwoAvatar {
        dispose() {
            if (this.avatar) {
                this.avatar.dispose();
                this.avatar = null;
            }
        }
        refreshSkin() {
            if (this.avatar) {
                this.avatar.wingId = this.wingId;
                this.avatar.rideId = this.rideId;
                this.avatar.refreshSkin();
            }
        }
        updateSkin(equipType, equipStyle) {
            if (equipType == EEquipType.ZuoQi) {
                this.rideId = equipStyle;
            }
            else if (equipStyle == EEquipType.Wing) {
                this.wingId = equipStyle;
            }
            this.dispose();
            this.init();
            this.avatar.updateSkin(equipType, equipStyle);
        }
        resetEmpty() {
        }
        init() {
            let equipList = MainModel.Ins.getEquipList();
            this.avatar = AvatarFactory.createBaseMainAvatar(equipList, this.rideId, this.wingId);
            this.avatarCon.addChild(this.avatar);
        }
    }

    exports.NiceAvatarView = NiceAvatarView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HuanZhuangSmallIconCtl {
        constructor() {
        }
        updateIcon(type, equipStyle, locked) {
            if (type == EEquipType.ZuoQi) {
                this.skin.icon.skin = IconUtils.getHorseIcon(equipStyle);
            }
            else {
                this.skin.icon.skin = ItemViewFactory.getEquipIcon(type, equipStyle);
            }
            this.skin.icon.gray = locked || false;
        }
        init() {
            this.skin.redimg.visible = false;
        }
        playAnim() {
            if (!this.eff) {
                this.eff = new SimpleEffect(this.skin, "o/spine/change/change", this.skin.width / 2, this.skin.height / 2);
            }
            this.eff.play(0, false);
        }
        setTitle() {
            let cfg = EquipmentIDProxy.Ins.GetDataById(this.equipType);
            if (cfg) {
                this.skin.tf1.text = cfg.f_name;
            }
        }
        updateData(vo) {
            this.skin.bg1.skin = "";
            this.skin.icon.skin = "";
            this.setTitle();
            this.skin.lockimg.visible = false;
            if (this.equipType == EEquipType.ZuoQi) {
                if (!TaskModel.Ins.isFuncOpen(EFuncDef.Ride)) {
                    this.skin.lockimg.visible = true;
                }
                let vo = ZuoQiModel.Ins.rideVo;
                let zuoqiSkin = this.skin;
                if (!vo || vo && vo.isEmpty) ;
                else {
                    zuoqiSkin.icon.skin = IconUtils.getHorseIcon(vo.mainid);
                }
            }
            else if (this.equipType == EEquipType.Wing) {
                let wingData = WingModel.Ins.getOwnerWingData();
                let wingSkin = this.skin;
                if (wingData && wingData.wingId) {
                    let val = HuanZhuangModel.Ins.getEquipStyle(EEquipType.Wing);
                    if (!val) {
                        val = wingData.wingId;
                    }
                    wingSkin.icon.skin = ItemViewFactory.getWingIcon(val);
                }
                else {
                    wingSkin.icon.skin = "";
                }
                if (!TaskModel.Ins.isFuncOpen(EFuncDef.Wing)) {
                    this.skin.lockimg.visible = true;
                }
            }
            else {
                this.skin.icon.skin = ItemViewFactory.getHuanZhuangSkin(vo);
            }
            this.skin.icon.gray = false;
        }
    }

    exports.HuanZhuangSmallIconCtl = HuanZhuangSmallIconCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Huanzhuang_bot_itemRender extends ui.views.huanzhuang.ui_huanzhuang_bot_itemUI {
        constructor() {
            super();
            this.sel.visible = false;
            this.ck.visible = false;
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            if (this.vo) {
                RedUpdateModel.Ins.delEquipRed(this.vo.equipType, this.vo.equipStyle);
            }
        }
        refreshView(index) {
            let haveRed = false;
            this.vo = this.dataSource;
            let vo = this.vo;
            if (vo.locked) {
                this.lockimg.visible = true;
                this.icon.gray = true;
            }
            else {
                this.lockimg.visible = false;
                this.icon.gray = false;
                haveRed = RedUpdateModel.Ins.getEquipRed(this.vo.equipType, this.vo.equipStyle);
            }
            this.icon.skin = vo.getIcon();
            this.sel.visible = this.vo.selected;
        }
    }

    exports.Huanzhuang_bot_itemRender = Huanzhuang_bot_itemRender;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Huanzhuang_mainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this._equipList = [];
            this._equipDataList = [];
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("huanzhuang.atlas");
        }
        onExit() {
            HuanZhuangModel.Ins.off(HuanZhuangEvent.UpdateStyle, this, this.onEquipChange);
            HuanZhuangModel.Ins.off(HuanZhuangEvent.UnLockListUpdate, this, this.onEquipChange);
            RedUpdateModel.Ins.off(RedUpdateModel.UPDATA, this, this.onEquipChange);
            HuanZhuangModel.Ins.off(HuanZhuangEvent.SuitUpdate, this, this.onSuitChange);
            this.avatar.dispose();
            this.avatar = null;
        }
        addEquipItem(_equipType, index) {
            let skin = this._ui["item" + index];
            let _ctl = new HuanZhuangSmallIconCtl();
            _ctl.equipType = _equipType;
            _ctl.skin = skin;
            _ctl.init();
            this._equipList.push(_ctl);
            skin.on(Laya.Event.CLICK, this, this.onTopClick, [_equipType, skin]);
        }
        onTopClick(type, node) {
            let skin = node;
            if (skin.lockimg.visible) {
                return;
            }
            this._ui.sel.x = node.x + node.width / 2;
            this._ui.sel.y = node.y + node.height / 2;
            this.refreshBotList(type);
        }
        selByIndex(_dataList, index) {
            for (let i = 0; i < _dataList.length; i++) {
                let cell = _dataList[i];
                if (i == index) {
                    cell.selected = true;
                }
                else {
                    cell.selected = false;
                }
            }
        }
        refreshBotList(type) {
            let _dataList = HuanZhuangModel.Ins.getVoList(type);
            let styleValue = HuanZhuangModel.Ins.getEquipStyle(type);
            let selIndex = 0;
            if (styleValue == 0) {
                selIndex = 0;
            }
            else {
                for (let i = 1; i < _dataList.length; i++) {
                    let cell = _dataList[i];
                    if (cell.equipStyle == styleValue) {
                        selIndex = i;
                    }
                }
            }
            this.selByIndex(_dataList, selIndex);
            this._ui.list1.array = _dataList;
            this._ui.list1.selectedIndex = selIndex;
            this._ui.list1.refresh();
            this._ui.list1.scrollTo(0);
            let _equipIdCfg = EquipmentIDProxy.Ins.GetDataById(type);
            this._ui.tf5.text = _equipIdCfg.f_name;
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = MainModel.Ins;
                this.UI = this._ui = new ui.views.huanzhuang.ui_huanzhuang_mainUI();
                this.bindClose(this._ui.close1);
                this.btnList.push(ButtonCtl.CreateBtn(this._ui.tujianbtn, this, this.onTuJianHandler), ButtonCtl.CreateBtn(this._ui.shuxinbtn, this, this.onAttrHandler));
                this._equipList = [];
                this._equipDataList = [];
                this.addEquipItem(EEquipType.Casque, 0);
                this.addEquipItem(EEquipType.Barde, 1);
                this.addEquipItem(EEquipType.Shield, 2);
                this.addEquipItem(EEquipType.ZuoQi, 3);
                this.addEquipItem(EEquipType.Wing, 4);
                this.addEquipItem(EEquipType.Weapon, 5);
                this._ui.list1.itemRender = Huanzhuang_bot_itemRender;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onHuanZhuangItemHandler);
                this._ui.list1.selectEnable = true;
                this._ui.list1.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this._huanHuaCtl = ButtonCtl.CreateBtn(this._ui.huanhuabtn, this, this.onHuanHuaHandler);
                this.btnList.push(this._huanHuaCtl);
            }
        }
        onSelectHandler(index) {
            let selectVo;
            this.updateEquipIcon();
            for (let i = 0; i < this._ui.list1.array.length; i++) {
                let vo = this._ui.list1.array[i];
                if (i == index) {
                    vo.selected = true;
                    selectVo = vo;
                }
                else {
                    vo.selected = false;
                }
            }
            this.avatar.refreshSkin();
            if (selectVo) {
                let val = selectVo.equipStyle;
                if (!val) {
                    val = selectVo.defaultStyle();
                }
                this.avatar.updateSkin(selectVo.equipType, val);
            }
            else {
                this.avatar.resetEmpty();
            }
            this.updateBotList();
        }
        updateBotList() {
            this._ui.list1.refresh();
            this.updateBtn();
        }
        get curSelectVo() {
            for (let i = 0; i < this._ui.list1.array.length; i++) {
                let vo = this._ui.list1.array[i];
                if (vo.selected) {
                    return vo;
                }
            }
        }
        set huanhuaMouseEnabel(v) {
            this._huanHuaCtl.mouseEnable = v;
            this._huanHuaCtl.gray = !v;
        }
        updateBtn() {
            let selVo = this._ui.list1.selectedItem;
            let _equipStyle = HuanZhuangModel.Ins.getEquipStyle(selVo.equipType);
            if (selVo.locked) {
                this.huanhuaMouseEnabel = false;
                this._ui.tf6.text = "未获得";
            }
            else {
                if (_equipStyle == selVo.equipStyle) {
                    this.huanhuaMouseEnabel = false;
                    this._ui.tf6.text = "已幻化";
                }
                else {
                    this.huanhuaMouseEnabel = true;
                    this._ui.tf6.text = "幻化";
                }
            }
        }
        onSuitChange() {
            if (HuanZhuangModel.Ins.hasSuitCanActive()) {
                DotManager.addDot(this._ui.tujianbtn);
            }
            else {
                DotManager.removeDot(this._ui.tujianbtn);
            }
        }
        playAnim(equipType) {
            for (let i = 0; i < this._equipList.length; i++) {
                let itemView = this._equipList[i];
                if (itemView.equipType == equipType) {
                    itemView.playAnim();
                    break;
                }
            }
        }
        onSucceed(_vo) {
            E.ViewMgr.ShowMidLabel(E.LangMgr.getLang("HuanHuaSucceed"));
            this.playAnim(_vo.equipType);
        }
        onHuanHuaHandler() {
            let _vo = this.curSelectVo;
            if (_vo) {
                HuanZhuangModel.Ins.once(HuanZhuangEvent.UpdateStyle, this, this.onSucceed, [_vo]);
                let req = new reloadEquip_req();
                req.type = _vo.equipType;
                let val = _vo.equipStyle;
                req.id = val;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onHuanZhuangItemHandler(item, index) {
            item.refreshView(index);
        }
        updateEquipIcon() {
            for (let i = 0; i < this._equipList.length; i++) {
                let itemView = this._equipList[i];
                let vo = this.getItemType(itemView.equipType);
                itemView.updateData(vo);
            }
        }
        getSmallIconByEquipType(equipType) {
            return this._equipList.find(item => item.equipType == equipType);
        }
        getItemType(type) {
            return this._equipDataList.find(item => item.equipVo.type == type && item.equipVo.wearable == EWearableType.Wearable);
        }
        onTuJianHandler() {
            E.ViewMgr.Open(EViewType.HuanzhuangTuJian);
        }
        onAttrHandler() {
            E.ViewMgr.Open(EViewType.AttrShow, null, HuanZhuangModel.Ins.suitAttrShow);
        }
        onInit() {
            HuanZhuangModel.Ins.on(HuanZhuangEvent.UnLockListUpdate, this, this.onEquipChange);
            HuanZhuangModel.Ins.on(HuanZhuangEvent.SuitUpdate, this, this.onSuitChange);
            this.onSuitChange();
            HuanZhuangModel.Ins.on(HuanZhuangEvent.UpdateStyle, this, this.onEquipChange);
            RedUpdateModel.Ins.on(RedUpdateModel.UPDATA, this, this.onEquipChange);
            this.updateView();
            this.onTopClick(EEquipType.Casque, this._ui.item0);
        }
        onEquipChange() {
            this.updateView();
            this.updateBotList();
        }
        updateView() {
            this.updateAvatar();
            this.updateEquipIcon();
        }
        updateAvatar() {
            let rideId = ZuoQiModel.Ins.rideVo.mainid;
            this.createByRideId(rideId);
        }
        createByRideId(rideId) {
            let windId = MainModel.Ins.wingId;
            let equipList = this.model.getEquipList();
            this._equipDataList = equipList;
            if (this.avatar) {
                this.avatar.dispose();
            }
            this.avatar = new NiceAvatarView();
            this.avatar.avatarCon = this._ui.avatarCon;
            this.avatar.wingId = windId;
            this.avatar.rideId = rideId;
            this.avatar.init();
        }
    }

    exports.Huanzhuang_mainView = Huanzhuang_mainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChengZhanItemCtl {
        constructor(_skin) {
            this.skin = _skin;
        }
        clear() {
            this.skin.gouImg.visible = false;
            this.skin.maskbg.visible = false;
            this.skin.lock.visible = false;
        }
        updateData(itemVo, left, _status, isPay) {
            this.clear();
            ItemViewFactory.refreshSlot(this.skin.slot, itemVo);
            switch (_status) {
                case EActivityLingQu.Nothing:
                    if (left) ;
                    else {
                        if (isPay) ;
                        else {
                            this.skin.lock.visible = true;
                        }
                    }
                    this.skin.maskbg.visible = true;
                    break;
                case EActivityLingQu.YiLingQu:
                    if (left) {
                        this.skin.maskbg.visible = true;
                        this.skin.gouImg.visible = true;
                    }
                    else {
                        this.skin.lock.visible = true;
                    }
                    break;
                case EActivityLingQu.KeLingQu:
                    if (left) ;
                    else {
                        this.skin.lock.visible = true;
                    }
                    break;
                case EActivityLingQu.ChongZhiWeiLingQu:
                    if (left) {
                        this.skin.maskbg.visible = true;
                        this.skin.gouImg.visible = true;
                    }
                    break;
                case EActivityLingQu.ChongZhiYiLingQu:
                    this.skin.maskbg.visible = true;
                    this.skin.gouImg.visible = true;
                    break;
                case EActivityLingQu.ChongZhiAllNotLing:
                    break;
            }
        }
    }

    exports.ChengZhanItemCtl = ChengZhanItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BornLibaoItemCtl {
        constructor(skin) {
            this.skin = skin;
            this.model = ActivityModel.Ins;
            this.lqCtl = ButtonCtl.CreateBtn(this.skin.lingquBtn, this, this.onLingQuHandler);
            this._itemCtl0 = new ChengZhanItemCtl(this.skin.item0);
            this._itemCtl1 = new ChengZhanItemCtl(this.skin.item1);
        }
        onLingQuHandler() {
            let _status = this._status;
            switch (_status) {
                case EActivityLingQu.YiLingQu:
                    this.pay();
                    break;
                default:
                    this.model.lingQu(this._activityVo.uid, this.cfg.f_id);
                    break;
            }
        }
        pay() {
            if (this._activityVo) {
                ActivityModel.Ins.recharge(this._activityVo.priceID);
            }
        }
        set showStat(v) {
            if (this.skin.jindutiaotop)
                this.skin.jindutiaotop.visible = v;
            this.skin.openstat.visible = v;
            if (this.skin.jindutiaotop)
                this.skin.jindutiaotop.visible = v;
            if (this.skin.jindutiaobot)
                this.skin.jindutiaobot.visible = v;
        }
        clearUI() {
            this.showStat = false;
            this.skin.maskbg.visible = false;
        }
        refreshView(_activityVo, activityType, dataSource, isPay) {
            this.clearUI();
            this._activityVo = _activityVo;
            let _cfg = dataSource;
            let _status = EActivityLingQu.Nothing;
            if (_activityVo) {
                _status = _activityVo.getParam1(_cfg.f_id);
            }
            this._status = _status;
            this.cfg = _cfg;
            if (this.model.isChengZhangOrJueSeUnLock(activityType, _cfg.f_id)) ;
            switch (_status) {
                case EActivityLingQu.Nothing:
                    this.skin.maskbg.visible = true;
                    this.disableBtn = true;
                    this.skin.tf1.text = "不可领取";
                    break;
                case EActivityLingQu.KeLingQu:
                    this.disableBtn = false;
                    this.skin.tf1.text = "领取";
                    this.showStat = true;
                    break;
                case EActivityLingQu.YiLingQu:
                    this.disableBtn = false;
                    this.skin.tf1.text = "继续领取";
                    this.showStat = true;
                    break;
                case EActivityLingQu.ChongZhiYiLingQu:
                    this.disableBtn = true;
                    this.skin.tf1.text = "已领取";
                    this.showStat = true;
                    break;
                case EActivityLingQu.ChongZhiWeiLingQu:
                    this.disableBtn = false;
                    this.skin.tf1.text = "领取";
                    this.showStat = true;
                    break;
                case EActivityLingQu.ChongZhiAllNotLing:
                    this.disableBtn = false;
                    this.skin.tf1.text = "领取";
                    this.showStat = true;
                    break;
            }
            if (this.skin.lvtf)
                this.skin.lvtf.text = IconUtils.str2Lv(_cfg.f_Level);
            this._itemCtl0.updateData(ItemViewFactory.convertItemList(_cfg.f_NumberFree)[0], true, _status, isPay);
            this._itemCtl1.updateData(ItemViewFactory.convertItemList(_cfg.f_NumberNotFree)[0], false, _status, isPay);
            if (this.skin.tasktf)
                this.skin.tasktf.text = _cfg.f_taskText;
        }
        set disableBtn(v) {
            this.lqCtl.gray = v;
            this.lqCtl.mouseEnable = !v;
        }
    }
    class BaoxiangChengZhangLibaoItemView extends ui.views.huodong.ui_baoxiang_chengzhang_itemUI {
        constructor() {
            super();
            this.ctl = new BornLibaoItemCtl(this);
        }
    }
    class RoleLibaoItemView extends ui.views.huodong.ui_juesechengzhang_item2UI {
        constructor() {
            super();
            this.ctl = new BornLibaoItemCtl(this);
        }
    }
    class ZuoqiLibaoItemView extends ui.views.huodong.ui_mount_chengzhang_itemUI {
        constructor() {
            super();
            this.ctl = new BornLibaoItemCtl(this);
        }
    }
    class LingchongLibaoItemView extends ui.views.huodong.ui_pet_chengzhang_itemUI {
        constructor() {
            super();
            this.ctl = new BornLibaoItemCtl(this);
        }
    }
    class BaoshiLibaoItemView extends ui.views.huodong.ui_gem_chengzhang_itemUI {
        constructor() {
            super();
            this.ctl = new BornLibaoItemCtl(this);
        }
    }

    exports.BaoshiLibaoItemView = BaoshiLibaoItemView;
    exports.BaoxiangChengZhangLibaoItemView = BaoxiangChengZhangLibaoItemView;
    exports.LingchongLibaoItemView = LingchongLibaoItemView;
    exports.RoleLibaoItemView = RoleLibaoItemView;
    exports.ZuoqiLibaoItemView = ZuoqiLibaoItemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoxiangChengZhangLibaoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.activityType = EActivityType.BoxBorn;
            this.mMask = true;
            this.cls = BaoxiangChengZhangLibaoItemView;
        }
        get cfgList() {
            return t_Pack_BoxGrowProxy.Ins.List;
        }
        onAddLoadRes() {
            this.addAtlas("huodong.atlas");
        }
        onExit() {
            this.unlockCtl.dispose();
            this.rateCtl.dispose();
            this.yijianCtl.dispose();
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.onUpdateDataEvt);
            MainModel.Ins.off(MainEvent.GrowPackUnlock, this, this.onUpdateDataEvt);
            if (this.Data == "notopen") ;
            else {
                E.ViewMgr.Open(EViewType.CCJJView);
            }
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_baoxiang_chengzhangUI();
                this.initView();
            }
        }
        initTopView() {
            this._ui.slot1.tf1.visible = false;
            let _itemCfg = ItemProxy.Ins.getCfg(parseInt(this.topCfg.f_itemid.split("-")[0]));
            let cfg = Mount_ListProxy.Ins.getCfg(parseInt(_itemCfg.f_p1));
            this._ui.slot1.quality.skin = IconUtils.getQuaIcon(cfg.f_Quality);
            this._ui.slot1.icon.skin = IconUtils.getHorseIcon(cfg.f_MountID);
            this._ui.slot1.on(Laya.Event.CLICK, this, this.onItemTips, [_itemCfg.f_p2]);
        }
        onItemTips(_data) {
            let _tipsVo = new LabourZuoqiTipsVo(_data);
            E.ViewMgr.Open(EViewType.RideBuyTips, null, _tipsVo);
        }
        initView() {
            this.initCfgList();
            this.bindClose(this._ui.close1);
            this.unlockCtl = ButtonCtl.CreateBtn(this._ui.unlockbtn, this, this.onPayHandler);
            this.rateCtl = new RateBtn01Ctl(this._ui.ratebtn, this, this.onPayHandler, ESkinRateBtn.Yellow);
            this.yijianCtl = ButtonCtl.CreateBtn(this._ui.yijianlingquBtn, this, this.onYiJianLingQu);
            this._ui.list1.itemRender = this.cls;
            this._ui.list1.renderHandler = new Laya.Handler(this, this.itemRenderHandler);
            this.initTopView();
        }
        itemRenderHandler(item) {
            item.ctl.refreshView(this._activityVo, this.activityType, item.dataSource, this.isPay);
        }
        onPayHandler() {
            if (this._activityVo) {
                ActivityModel.Ins.recharge(this._activityVo.priceID);
            }
        }
        onYiJianLingQu() {
            if (this._activityVo) {
                ActivityModel.Ins.lingQu(this._activityVo.uid, 0);
            }
        }
        onInit() {
            E.ViewMgr.Close(EViewType.CCJJView);
            MainModel.Ins.mainMask = true;
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onUpdateDataEvt);
            MainModel.Ins.on(MainEvent.GrowPackUnlock, this, this.onUpdateDataEvt);
            this.refreshView(true);
        }
        onUpdateDataEvt() {
            this.refreshView(false);
        }
        get isPay() {
            return this._activityVo.isPay;
        }
        refreshView(_mScroll) {
            this._activityVo = ActivityModel.Ins.getVo(this.activityType);
            let purchCfg = t_Purchase_PriceProxy.Ins.GetDataById(this._activityVo.priceID);
            this._ui.tf2.text = `${StringUtil.moneyCv(purchCfg.f_price)}元解锁`;
            this._ui.list1.array = this.curCfgList;
            if (_mScroll) {
                this._ui.list1.scrollTo(0);
            }
            let _isLiqngqu = this.canLingqu;
            this.yijianCtl.grayMouseDisable = !_isLiqngqu;
            if (_isLiqngqu) {
                DotManager.addDot(this.yijianCtl.skin);
            }
            else {
                DotManager.removeDot(this.yijianCtl.skin);
            }
            let btnCtl = this.unlockCtl;
            if (purchCfg.f_isVoucher == EShopPayType.Voucher) {
                btnCtl = this.rateCtl.btnCtl;
                this.rateCtl.cfg = purchCfg;
            }
            RateBtnUtils.Refresh(btnCtl, this.unlockCtl, this.rateCtl.btnCtl);
            if (this._activityVo && this.curCfgList.length > 0) {
                if (this.isPay) {
                    btnCtl.visible = false;
                }
                else {
                    btnCtl.visible = true;
                    btnCtl.grayMouseDisable = false;
                }
            }
        }
        get canLingqu() {
            let _isLiqngqu = ActivityModel.Ins.bornHasLingqu(this.curCfgList, this._activityVo);
            return _isLiqngqu;
        }
        initCfgList() {
            let old = this.cfgList;
            let l = [];
            for (let i = 0; i < old.length; i++) {
                let cfg = old[i];
                if (!cfg.f_rewardstype) {
                    l.push(cfg);
                }
                else {
                    this.topCfg = cfg;
                }
            }
            this.curCfgList = l;
        }
    }

    exports.BaoxiangChengZhangLibaoView = BaoxiangChengZhangLibaoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoshiChengZhangJiJin extends BaoxiangChengZhangLibaoView {
        constructor() {
            super(...arguments);
            this.activityType = EActivityType.BaoshiChengZhang;
            this.cls = BaoshiLibaoItemView;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_gem_chengzhangUI();
                this.skin = this._ui;
                this.initView();
            }
        }
        get cfgList() {
            return t_Fund_NewProxy.Ins.getCfgByType(3);
        }
        get canLingqu() {
            let _isLiqngqu = ActivityModel.Ins.bornHasLingqu(this.curCfgList, this._activityVo);
            return _isLiqngqu;
        }
        initTopView() {
            let ritem = ItemViewFactory.convertItem(this.topCfg.f_itemid);
            ItemViewFactory.refreshSlot(this._ui.slot1, ritem);
        }
    }

    exports.BaoshiChengZhangJiJin = BaoshiChengZhangJiJin;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChongZhiView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.common.ui_chongzhi_viewUI();
                ButtonCtl.CreateBtn(this._ui.okbtn, this, this.onOkHandler);
                this.bindClose(this._ui.close1);
            }
        }
        onOkHandler() {
            console.log("ChongZhiView =>" + this.cfg.f_id);
            ActivityModel.Ins.reqBill(this.cfg.f_id);
            ActivityModel.Ins.once(ActivityEvent.RechargeBillUpdate, this, this.onRechargeBillUpdate);
            this.Close();
        }
        onInit() {
            let cfg = t_Purchase_PriceProxy.Ins.GetDataById(this.Data);
            this.cfg = cfg;
            this._ui.tf1.text = "fid = " + cfg.f_id + "\n" + "充值:" + this.moneyCNY + "元";
        }
        get moneyCNY() {
            let cfg = t_Purchase_PriceProxy.Ins.GetDataById(this.Data);
            return ShopProxy.Ins.convertMoney(cfg);
        }
        onRechargeBillUpdate(val) {
            E.sdk.recharge(val, this.cfg);
        }
    }

    exports.ChongZhiView = ChongZhiView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FenXiangDaoQunView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_group_shareUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_mf, new Laya.Handler(this, this.onBtnClick)));
                this._ui.list.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemHandler);
                this.onShareReward();
            }
        }
        onInit() {
            let arr = System_RefreshTimeProxy.Ins.GetDataById(62).f_SystemConfig.split("|");
            this._ui.list.array = arr;
            MainModel.Ins.on(MainEvent.WxOnShow, this, this.onWxOnShow);
            MainModel.Ins.on(MainEvent.ShareReward, this, this.onShareReward);
            this.onShareReward();
        }
        onWxOnShow(res) {
            if (res && res['scene'] && ([1008, 1044].indexOf(res['scene']) !== -1)) {
                const req = new ShareReward_req();
                req.funcId = EFuncDef.GroupShare;
                req.type = 0;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onExit() {
            MainModel.Ins.off(MainEvent.WxOnShow, this, this.onWxOnShow);
            MainModel.Ins.off(MainEvent.ShareReward, this, this.onShareReward);
        }
        onItemHandler(item) {
            let vo = new ItemVo();
            vo.cfgId = parseInt(item.dataSource.split("-")[0]);
            vo.count = parseInt(item.dataSource.split("-")[1]);
            ItemViewFactory.refreshSlot(item, vo);
        }
        onBtnClick() {
            const data = MainModel.Ins.shareReward;
            const d = data.dataList.find(o => o.funcId === EFuncDef.GroupShare);
            if (!d)
                return;
            switch (d.state) {
                case 0:
                    E.sdk.goShareData('');
                    break;
                case 2:
                    const req = new ShareReward_req();
                    req.funcId = EFuncDef.GroupShare;
                    req.type = 1;
                    SocketMgr.Ins.SendMessageBin(req);
                    break;
            }
        }
        onShareReward() {
            const data = MainModel.Ins.shareReward;
            let d = data.dataList.find(o => o.funcId === EFuncDef.GroupShare);
            let state = (d === null || d === void 0 ? void 0 : d.state) || 0;
            let txt = '';
            switch (state) {
                case 0:
                    txt = '分享';
                    this._ui.btn_mf.disabled = false;
                    break;
                case 1:
                    txt = '已领取';
                    this._ui.btn_mf.disabled = true;
                    break;
                case 2:
                    txt = '领取';
                    this._ui.btn_mf.disabled = false;
                    break;
            }
            this._ui.fx_tf.text = txt;
        }
    }

    exports.FenXiangDaoQunView = FenXiangDaoQunView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhuhouBujiRenderItem extends ui.views.huodong.ui_huodonglibao_itemUI {
        constructor() {
            super();
            this.buyCtl = ButtonCtl.CreateBtn(this.buyBtn, this, this.onBuyHandler);
            this.rateCtl = new RateBtn01Ctl(this.ratebtn, this, this.onBuyHandler, ESkinRateBtn.Yellow);
        }
        onBuyHandler() {
            ActivityModel.Ins.recharge(this.cfg.f_PurchaseID);
        }
        refreshView(_vo) {
            this._vo = _vo;
            let cfg = this.dataSource;
            this.cfg = cfg;
            this.nametf1.text = cfg.f_name;
            ItemViewFactory.renderItemSlots(this.rewardCon, cfg.f_Item, 10, 1, "left");
            if (_vo) {
                this.cntTf.text = "限购: " + _vo.getSubTime(cfg) + "/" + cfg.f_BuyTimes;
            }
            else {
                this.cntTf.text = "";
            }
            let ppCfg = t_Purchase_PriceProxy.Ins.GetDataById(this.cfg.f_PurchaseID);
            this.moneyTf.text = StringUtil.moneyCv(ppCfg.f_price) + "元";
            let btn = this.buyCtl;
            if (ppCfg.f_isVoucher == EShopPayType.Voucher) {
                btn = this.rateCtl.btnCtl;
                this.rateCtl.cfg = ppCfg;
            }
            RateBtnUtils.Refresh(btn, this.buyCtl, this.rateCtl.btnCtl);
        }
    }
    class HuoDongLiBaoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.mMainSnapshot = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_huodonglibao_viewUI;
                this.btnList.push(ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.onCloseHandler1)));
                this._ui.list1.selectEnable = true;
                this._ui.list1.selectHandler = new Laya.Handler(this, this.onListSelectHandler);
                this._ui.list1.itemRender = ZhuhouBujiRenderItem;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onListRenderHandler);
            }
        }
        onCloseHandler1() {
            E.ViewMgr.Close(this.ViewType);
        }
        onListSelectHandler(v) {
        }
        onListRenderHandler(item) {
            item.refreshView(this._vo);
        }
        refresh() {
            this._vo = ActivityModel.Ins.getVo(EActivityType.Pack_Supply);
            this._ui.list1.array = t_Pack_SupplyProxy.Ins.List;
        }
        onEnterHandler() {
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.refresh);
            if (this._autoBtn) {
                this._autoBtn.dispose();
            }
        }
        onInit() {
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.refresh);
            this.refresh();
            this._ui.list1.scrollTo(0);
            let _vo = ActivityModel.Ins.getVo(EActivityType.Pack_Supply);
            if (_vo) {
                this._autoBtn = AutoRateBtn.Create(this._ui, _vo.uid);
            }
            if (initConfig.clienttype == EClientType.Discount) {
                this._ui.list1.height = 558;
            }
            else {
                this._ui.list1.height = 696;
            }
        }
    }

    exports.HuoDongLiBaoView = HuoDongLiBaoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_CharacterBorn extends BaseCfg {
        GetTabelName() {
            return "t_CharacterBorn";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_CharacterBorn();
            }
            return this._ins;
        }
    }
    class CcjijingItem extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "CcjijingItem";
        }
        onClick(cfg, e) {
            ActivityModel.Ins.openFunc(cfg.f_activityType, cfg.f_uitype);
        }
        layoutMonthUI() {
            this._yueKa.dattf.x = this._yueKa.img1.x + this._yueKa.img1.width;
            this._yueKa.img2.x = this._yueKa.dattf.x + this._yueKa.dattf.textField.width;
            let w = this._yueKa.img2.width + this._yueKa.img1.width + this._yueKa.dattf.textField.width;
            this._yueKa.subcon.x = (307 - w) / 2;
        }
        layoutTeQuanUI() {
            this._tequan.dattf1.x = this._tequan.img11.x + this._tequan.img11.width;
            this._tequan.img22.x = this._tequan.dattf1.x + this._tequan.dattf1.textField.width;
            let w = this._tequan.img22.width + this._tequan.img11.width + this._tequan.dattf1.textField.width;
            this._tequan.subcon1.x = (307 - w) / 2;
        }
        upDataTeQuanKa() {
            if (this.skin.destroyed) {
                return;
            }
            this._tequan.img_tq.visible = false;
            this._tequan.subcon1.visible = false;
            let _curData = MainModel.Ins.teQuanKaCard;
            if (_curData) {
                if (_curData.val == ECardLingqu.Nothing) {
                    this._tequan.img_tq.visible = true;
                }
                else if (_curData.val == ECardLingqu.CanGet ||
                    _curData.val == ECardLingqu.AlreadyGet) {
                    this._tequan.subcon1.visible = true;
                    this._tequan.dattf1.text = _curData.subday + "";
                    this.layoutTeQuanUI();
                }
                if (_curData.val == ECardLingqu.CanGet) {
                    this.addRed();
                }
                else {
                    DotManager.removeDot(this.skin);
                }
            }
        }
        onMonthrefreshView() {
            if (this.skin.destroyed) {
                return;
            }
            this._yueKa.yueka2.visible = false;
            this._yueKa.subcon.visible = false;
            let _curData = MainModel.Ins.monthCard;
            if (_curData) {
                if (_curData.val == ECardLingqu.Nothing) {
                    this._yueKa.yueka2.visible = true;
                }
                else if (_curData.val == ECardLingqu.CanGet ||
                    _curData.val == ECardLingqu.AlreadyGet) {
                    this._yueKa.subcon.visible = true;
                    this._yueKa.dattf.text = _curData.subday + "";
                    this.layoutMonthUI();
                }
                if (_curData.val == ECardLingqu.CanGet) {
                    this.addRed();
                }
                else {
                    DotManager.removeDot(this.skin);
                }
            }
        }
        addRed() {
            DotManager.addDot(this.skin, -30);
        }
        free() {
            super.free();
            MainModel.Ins.off(MainEvent.MonthUpdate, this, this.onMonthrefreshView);
            MainModel.Ins.off(MainEvent.AllLifeUpdate, this, this.onAllLifeRefresh);
            MainModel.Ins.off(MainEvent.Updata_TeQuanKa, this, this.upDataTeQuanKa);
        }
        onAllLifeRefresh() {
            if (this.skin.destroyed) {
                return;
            }
            let _curData = MainModel.Ins.allLife;
            if (_curData) {
                this._zhongshen.zhongshengka.visible = false;
                this._zhongshen.zhongshenglingqu.visible = false;
                if (_curData.val == ECardLingqu.Nothing) {
                    this._zhongshen.zhongshengka.visible = true;
                }
                else {
                    this._zhongshen.zhongshenglingqu.visible = true;
                }
                if (_curData.val == ECardLingqu.CanGet) {
                    this.addRed();
                }
                else {
                    DotManager.removeDot(this.skin);
                }
            }
        }
        createNode(index) {
            let skin;
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ui.views.huodong.ui_ccjj_item_viewUI);
            skin = _skin;
            this.skin = _skin;
            let cfg = this.list[index];
            _skin.yueka.visible = false;
            _skin.zhongshen.visible = false;
            _skin.tequan.visible = false;
            this._yueKa = _skin.yueka;
            this._zhongshen = _skin.zhongshen;
            if (cfg.f_uitype == EViewType.YueKa) {
                _skin.yueka.visible = true;
                MainModel.Ins.on(MainEvent.MonthUpdate, this, this.onMonthrefreshView);
                this.onMonthrefreshView();
            }
            else if (cfg.f_uitype == EViewType.ZhongShenKa) {
                _skin.zhongshen.visible = true;
                MainModel.Ins.on(MainEvent.AllLifeUpdate, this, this.onAllLifeRefresh);
                this.onAllLifeRefresh();
            }
            else if (cfg.f_uitype == EViewType.TeQuanKaView) {
                _skin.tequan.visible = true;
                this._tequan = _skin.tequan;
                MainModel.Ins.on(MainEvent.Updata_TeQuanKa, this, this.upDataTeQuanKa);
                this.upDataTeQuanKa();
            }
            else {
                let packId = cfg.f_activityType;
                const item = ActivityModel.Ins.getVo(packId);
                if (ActivityModel.Ins.hasBoxBorn(packId, item)) {
                    this.addRed();
                }
                else {
                    DotManager.removeDot(_skin);
                }
                skin = _skin;
            }
            skin.x = index * skin.width;
            skin.y = this.y;
            DebugUtil.draw(skin);
            skin.on(Laya.Event.CLICK, this, this.onClick, [cfg]);
            skin.icon.skin = cfg.f_icon;
            return skin;
        }
    }
    class JiJingListView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("huodong.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_ccjj_listUI();
                this.bindClose(this._ui.close1);
                this.scrollView = new ScrollPanelControl();
                this.scrollView.init(this._ui.panel1);
                this._ui.tf2.text = FuncProxy.Ins.getCfgByFid(EFuncDef.JiJing).f_name;
            }
        }
        onInit() {
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.updataView);
            this.updataView();
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.updataView);
        }
        updataView() {
            let l = t_CharacterBorn.Ins.List;
            let cfglist = [];
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_open) {
                    let funcOpen = true;
                    if (cfg.f_funcid) {
                        if (!TaskModel.Ins.isFuncOpen(cfg.f_funcid, false)) {
                            funcOpen = false;
                        }
                    }
                    if (funcOpen) {
                        cfglist.push(cfg);
                    }
                }
            }
            this.scrollView.clear();
            this.scrollView.split(cfglist, CcjijingItem, 340, 0, 2);
            this.scrollView.end();
        }
    }

    exports.JiJingListView = JiJingListView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JueseChengZhangLiBao extends BaoxiangChengZhangLibaoView {
        constructor() {
            super(...arguments);
            this.activityType = EActivityType.RoleBorn;
            this.cls = RoleLibaoItemView;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_juese_chengzhangUI();
                this.skin = this._ui;
                this.initView();
            }
        }
        get cfgList() {
            return t_Pack_ChaGrowProxy.Ins.List;
        }
        get canLingqu() {
            let _isLiqngqu = ActivityModel.Ins.bornHasLingqu(this.curCfgList, this._activityVo);
            return _isLiqngqu;
        }
        initTopView() {
            ItemViewFactory.renderItemSlots(this.skin.rewardCon, this.topCfg.f_itemid, 10, 1, "left");
        }
    }

    exports.JueseChengZhangLiBao = JueseChengZhangLiBao;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LiBaoGongNengJiHeView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("huodong.atlas");
        }
        onExit() {
            MainModel.Ins.off(MainEvent.MonthUpdate, this, this.onMonthrefreshView);
            MainModel.Ins.off(MainEvent.AllLifeUpdate, this, this.onAllLifeRefresh);
            MainModel.Ins.off(MainEvent.Updata_TeQuanKa, this, this.upDataTeQuanKa);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_libao_gongnenglistUI();
                this.btnList.push(ButtonCtl.CreateBtn(this._ui.yuekaItem, this, this.onYueKa), ButtonCtl.CreateBtn(this._ui.zhongshenkaItem, this, this.onZhongShen), ButtonCtl.CreateBtn(this._ui.tequanitem, this, this.onTeQuanClick));
                this.bindClose(this._ui.close1);
                this._ui.subcon1.visible = false;
            }
        }
        meiRiLiBao() {
            ActivityModel.Ins.openFunc(EActivityType.EveryDayBorn, EViewType.MeiRiLiBao);
        }
        onYueKa() {
            ActivityModel.Ins.openFunc(EActivityType.t_Pack_MonthAndYear_Card, EViewType.YueKa);
        }
        onZhongShen() {
            ActivityModel.Ins.openFunc(EActivityType.t_Pack_MonthAndYear_Card, EViewType.ZhongShenKa);
        }
        onTeQuanClick() {
            ActivityModel.Ins.openFunc(EActivityType.TeQuanKa, EViewType.TeQuanKaView);
        }
        onInit() {
            MainModel.Ins.on(MainEvent.MonthUpdate, this, this.onMonthrefreshView);
            MainModel.Ins.on(MainEvent.AllLifeUpdate, this, this.onAllLifeRefresh);
            MainModel.Ins.on(MainEvent.Updata_TeQuanKa, this, this.upDataTeQuanKa);
            this.onMonthrefreshView();
            this.onAllLifeRefresh();
            this.upDataTeQuanKa();
        }
        onAllLifeRefresh() {
            let _curData = MainModel.Ins.allLife;
            if (_curData) {
                this._ui.zhongshengka.visible = false;
                this._ui.zhongshenglingqu.visible = false;
                if (_curData.val == ECardLingqu.Nothing) {
                    this._ui.zhongshengka.visible = true;
                }
                else {
                    this._ui.zhongshenglingqu.visible = true;
                }
                if (_curData.val == ECardLingqu.CanGet) {
                    DotManager.addDot(this._ui.zhongshenkaItem);
                }
                else {
                    DotManager.removeDot(this._ui.zhongshenkaItem);
                }
            }
        }
        onMonthrefreshView() {
            this._ui.yueka2.visible = false;
            this._ui.subcon.visible = false;
            let _curData = MainModel.Ins.monthCard;
            if (_curData) {
                if (_curData.val == ECardLingqu.Nothing) {
                    this._ui.yueka2.visible = true;
                }
                else if (_curData.val == ECardLingqu.CanGet ||
                    _curData.val == ECardLingqu.AlreadyGet) {
                    this._ui.subcon.visible = true;
                    this._ui.dattf.text = _curData.subday + "";
                    this.layoutMonthUI();
                }
                if (_curData.val == ECardLingqu.CanGet) {
                    DotManager.addDot(this._ui.yuekaItem);
                }
                else {
                    DotManager.removeDot(this._ui.yuekaItem);
                }
            }
        }
        layoutMonthUI() {
            this._ui.dattf.x = this._ui.img1.x + this._ui.img1.width;
            this._ui.img2.x = this._ui.dattf.x + this._ui.dattf.textField.width;
            let w = this._ui.img2.width + this._ui.img1.width + this._ui.dattf.textField.width;
            this._ui.subcon.x = (307 - w) / 2;
        }
        upDataTeQuanKa() {
            this._ui.img_tq.visible = false;
            this._ui.subcon1.visible = false;
            let _curData = MainModel.Ins.teQuanKaCard;
            if (_curData) {
                if (_curData.val == ECardLingqu.Nothing) {
                    this._ui.img_tq.visible = true;
                }
                else if (_curData.val == ECardLingqu.CanGet ||
                    _curData.val == ECardLingqu.AlreadyGet) {
                    this._ui.subcon1.visible = true;
                    this._ui.dattf1.text = _curData.subday + "";
                    this.layoutTeQuanUI();
                }
                if (_curData.val == ECardLingqu.CanGet) {
                    DotManager.addDot(this._ui.tequanitem);
                }
                else {
                    DotManager.removeDot(this._ui.tequanitem);
                }
            }
        }
        layoutTeQuanUI() {
            this._ui.dattf1.x = this._ui.img11.x + this._ui.img11.width;
            this._ui.img22.x = this._ui.dattf1.x + this._ui.dattf1.textField.width;
            let w = this._ui.img22.width + this._ui.img11.width + this._ui.dattf1.textField.width;
            this._ui.subcon1.x = (307 - w) / 2;
        }
    }

    exports.LiBaoGongNengJiHeView = LiBaoGongNengJiHeView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingchongChengZhangJiJin extends BaoxiangChengZhangLibaoView {
        constructor() {
            super(...arguments);
            this.activityType = EActivityType.LingchongChengZhang;
            this.cls = LingchongLibaoItemView;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_pet_chengzhangUI();
                this.skin = this._ui;
                this.initView();
            }
        }
        get cfgList() {
            return t_Fund_NewProxy.Ins.getCfgByType(2);
        }
        get canLingqu() {
            let _isLiqngqu = ActivityModel.Ins.bornHasLingqu(this.curCfgList, this._activityVo);
            return _isLiqngqu;
        }
        initTopView() {
            let ritem = ItemViewFactory.convertItem(this.topCfg.f_itemid);
            ItemViewFactory.refreshSlot(this._ui.slot1, ritem);
        }
    }

    exports.LingchongChengZhangJiJin = LingchongChengZhangJiJin;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MeiRiFenXiangView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_daily_shareUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_mf, new Laya.Handler(this, this.onBtnClick)));
                this._ui.list.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemHandler);
                this.onShareReward();
            }
        }
        onInit() {
            let arr = System_RefreshTimeProxy.Ins.GetDataById(59).f_SystemConfig.split("|");
            this._ui.list.array = arr;
            MainModel.Ins.on(MainEvent.WxOnShow, this, this.onWxOnShow);
            MainModel.Ins.on(MainEvent.ShareReward, this, this.onShareReward);
            this.onShareReward();
        }
        onWxOnShow() {
            const req = new ShareReward_req();
            req.funcId = EFuncDef.FenXiang;
            req.type = 0;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            MainModel.Ins.off(MainEvent.WxOnShow, this, this.onWxOnShow);
            MainModel.Ins.off(MainEvent.ShareReward, this, this.onShareReward);
        }
        onItemHandler(item) {
            let vo = new ItemVo();
            vo.cfgId = parseInt(item.dataSource.split("-")[0]);
            vo.count = parseInt(item.dataSource.split("-")[1]);
            ItemViewFactory.refreshSlot(item, vo);
        }
        onBtnClick() {
            const data = MainModel.Ins.shareReward;
            const d = data.dataList.find(o => o.funcId === EFuncDef.FenXiang);
            if (!d)
                return;
            switch (d.state) {
                case 0:
                    E.sdk.goShareData('');
                    break;
                case 2:
                    const req = new ShareReward_req();
                    req.funcId = EFuncDef.FenXiang;
                    req.type = 1;
                    SocketMgr.Ins.SendMessageBin(req);
                    break;
            }
        }
        onShareReward() {
            const data = MainModel.Ins.shareReward;
            const d = data.dataList.find(o => o.funcId === EFuncDef.FenXiang);
            let state = d.state || 0;
            let txt = '';
            switch (state) {
                case 0:
                    txt = '分享';
                    this._ui.btn_mf.disabled = false;
                    break;
                case 1:
                    txt = '已领取';
                    this._ui.btn_mf.disabled = true;
                    break;
                case 2:
                    txt = '领取';
                    this._ui.btn_mf.disabled = false;
                    break;
            }
            this._ui.fx_tf.text = txt;
        }
    }

    exports.MeiRiFenXiangView = MeiRiFenXiangView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZheKouItem1 extends ui.views.huodong.ui_zhekouItem1UI {
        constructor() {
            super();
            ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
        }
        onBtnClick() {
            if (this._data) {
                if (this._data.param1) {
                    E.ViewMgr.ShowMidError("今日已售馨");
                }
                else {
                    let cfg = t_Pack_Daily_Shop.Ins.getCfgById(this._data.id);
                    ActivityModel.Ins.recharge(cfg.f_purchaseid);
                }
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let vo = new ItemVo();
            let cfg = t_Pack_Daily_Shop.Ins.getCfgById(value.id);
            vo.cfgId = parseInt(cfg.f_rewards.split("-")[0]);
            vo.count = parseInt(cfg.f_rewards.split("-")[1]);
            ItemViewFactory.refreshSlot(this.item, vo);
            this.lab.text = vo.getName();
            if (value.param1) {
                this.img.visible = true;
            }
            else {
                this.img.visible = false;
            }
            let wCfg = t_Pack_Daily_Shop_WeekCard.Ins.getCfgByGroupId(cfg.f_group);
            if (wCfg) {
                let num = MainModel.Ins.getZKWCNum(wCfg.f_id);
                if (num) {
                    this.btn.mouseEnabled = false;
                    this.img1.skin = "remote/huodong/duigou1.png";
                    if (value.param1) {
                        this.lab1.text = "已领取";
                    }
                    else {
                        this.lab1.text = "免费";
                    }
                }
                else {
                    let purCfg = t_Purchase_PriceProxy.Ins.GetDataById(cfg.f_purchaseid);
                    this.lab1.text = StringUtil.moneyCv(purCfg.f_price) + "元";
                    this.btn.mouseEnabled = true;
                    this.img1.skin = "remote/huodong/shuoqing.png";
                }
            }
            else {
                let purCfg = t_Purchase_PriceProxy.Ins.GetDataById(cfg.f_purchaseid);
                this.lab1.text = StringUtil.moneyCv(purCfg.f_price) + "元";
                this.btn.mouseEnabled = true;
                this.img1.skin = "remote/huodong/shuoqing.png";
            }
        }
    }

    exports.ZheKouItem1 = ZheKouItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZheKouItem extends ui.views.huodong.ui_zhekouItemUI {
        constructor() {
            super();
            this.list.itemRender = ZheKouItem1;
            this.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            this.btnCtl = ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            this.rateCtl = new RateBtn01Ctl(this.rate_btn, this, this.onBtnClick, ESkinRateBtn.Red);
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onBtnClick() {
            if (!this._cfg)
                return;
            ActivityModel.Ins.recharge(this._cfg.f_purchaseid);
        }
        setData(value) {
            if (!value)
                return;
            let arr = [];
            let vo;
            let flag = false;
            for (let i = 0; i < value.length; i++) {
                let cfg = t_Pack_Daily_Shop.Ins.getCfgById(value[i].id);
                if (cfg.f_type == 1) {
                    vo = value[i];
                }
                else {
                    arr.push(value[i]);
                }
                if (!flag) {
                    if (value[i].param1) {
                        flag = true;
                    }
                }
            }
            this.list.array = arr;
            this._cfg = t_Pack_Daily_Shop.Ins.getCfgById(vo.id);
            this.lab.text = this._cfg.f_pricetrue + "元";
            let purCfg = t_Purchase_PriceProxy.Ins.GetDataById(this._cfg.f_purchaseid);
            let curBtnCtl = this.btnCtl;
            if (purCfg.f_isVoucher == EShopPayType.Voucher) {
                curBtnCtl = this.rateCtl.btnCtl;
                this.rateCtl.cfg = purCfg;
            }
            RateBtnUtils.Refresh(curBtnCtl, this.btnCtl, this.rateCtl.btnCtl);
            this.lab1.text = StringUtil.moneyCv(purCfg.f_price) + "元打包购买";
            if (flag) {
                curBtnCtl.grayMouseDisable = true;
            }
            else {
                curBtnCtl.grayMouseDisable = false;
            }
        }
    }

    exports.ZheKouItem = ZheKouItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZheKouItem2 extends ui.views.huodong.ui_zhekouItem2UI {
        constructor() {
            super();
            this.list.itemRender = ZheKouItem1;
            this.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            this.rateBtnCtl = new RateBtn01Ctl(this.rateBtn, this, this.onunlockbtn, ESkinRateBtn.Yellow);
            this.sp1BtnCtl = ButtonCtl.Create(this.btn, new Laya.Handler(this, this.onBtnClick));
            this.sp1RateCtl = new RateBtn01Ctl(this.sp1_rate, this, this.onBtnClick, ESkinRateBtn.Red);
            this.unlockBtnCtl = ButtonCtl.Create(this.unlockbtn, new Laya.Handler(this, this.onunlockbtn));
            ButtonCtl.Create(this.lingquBtn, new Laya.Handler(this, this.onlingquBtn));
            ButtonCtl.Create(this.sp_xf, new Laya.Handler(this, this.onunlockbtn));
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onBtnClick() {
            if (!this._cfg)
                return;
            ActivityModel.Ins.recharge(this._cfg.f_purchaseid);
        }
        onunlockbtn() {
            if (!this._wCfg)
                return;
            ActivityModel.Ins.recharge(this._wCfg.f_purchaseid);
        }
        onlingquBtn() {
            let vo = ActivityModel.Ins.getVo(EActivityType.ZKShopWeek);
            if (this._wCfg && vo) {
                ActivityModel.Ins.lingQu(vo.uid, this._wCfg.f_id);
            }
        }
        setData(value) {
            if (!value)
                return;
            let arr = [];
            let vo;
            let flag = false;
            for (let i = 0; i < value.length; i++) {
                let cfg = t_Pack_Daily_Shop.Ins.getCfgById(value[i].id);
                if (cfg.f_type == 1) {
                    vo = value[i];
                }
                else {
                    arr.push(value[i]);
                }
                if (!flag) {
                    if (value[i].param1) {
                        flag = true;
                    }
                }
            }
            this.list.array = arr;
            this._cfg = t_Pack_Daily_Shop.Ins.getCfgById(vo.id);
            this.lab.text = this._cfg.f_pricetrue + "元";
            let purCfg = t_Purchase_PriceProxy.Ins.GetDataById(this._cfg.f_purchaseid);
            this.lab1.text = StringUtil.moneyCv(purCfg.f_price) + "元打包购买";
            DotManager.removeDot(this.lingquBtn);
            this._wCfg = t_Pack_Daily_Shop_WeekCard.Ins.getCfgByGroupId(this._cfg.f_group);
            let num = MainModel.Ins.getZKWCNum(this._wCfg.f_id);
            let wPurch = t_Purchase_PriceProxy.Ins.GetDataById(this._wCfg.f_purchaseid);
            let tempBtnSp1 = this.sp1BtnCtl;
            if (purCfg.f_isVoucher == EShopPayType.Voucher) {
                tempBtnSp1 = this.rateBtnCtl.btnCtl;
                this.sp1RateCtl.cfg = purCfg;
            }
            RateBtnUtils.Refresh(tempBtnSp1, this.sp1BtnCtl, this.sp1RateCtl.btnCtl);
            let btnCtl = this.unlockBtnCtl;
            if (wPurch.f_isVoucher == EShopPayType.Voucher) {
                btnCtl = this.rateBtnCtl.btnCtl;
                this.rateBtnCtl.cfg = wPurch;
            }
            RateBtnUtils.Refresh(btnCtl, this.unlockBtnCtl, this.rateBtnCtl.btnCtl);
            if (num) {
                btnCtl.skin.visible = false;
                this.lingquBtn.visible = true;
                if (vo.param1) {
                    this.lingquBtn.disabled = true;
                }
                else {
                    DotManager.addDot(this.lingquBtn);
                    this.lingquBtn.disabled = false;
                }
                this.sp1.visible = false;
                this.sp2.visible = true;
                this.lab_day.text = num + "";
            }
            else {
                btnCtl.skin.visible = true;
                let pp = t_Purchase_PriceProxy.Ins.GetDataById(this._wCfg.f_purchaseid);
                this.tf2.text = StringUtil.moneyCv(pp.f_price) + "元购买";
                this.lingquBtn.visible = false;
                this.sp1.visible = true;
                this.sp2.visible = false;
                if (flag) {
                    tempBtnSp1.grayMouseDisable = true;
                    btnCtl.grayMouseDisable = true;
                }
                else {
                    tempBtnSp1.grayMouseDisable = false;
                    btnCtl.grayMouseDisable = false;
                }
            }
        }
    }

    exports.ZheKouItem2 = ZheKouItem2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MeiRiItem extends ui.views.huodong.ui_meirilibao_itemUI {
        constructor() {
            super();
            this.freeCtl = ButtonCtl.CreateBtn(this.freeBtn, this, this.onfreeBtnHandler);
            this.rateCtl = new RateBtn01Ctl(this.rate_btn, this, this.onfreeBtnHandler, ESkinRateBtn.Blue);
        }
        onfreeBtnHandler() {
            if (this.cfg.f_PurchaseID == 0) {
                if (this._vo) {
                    ActivityModel.Ins.lingQu(this._vo.uid, this.cfg.f_id);
                }
            }
            else {
                ActivityModel.Ins.recharge(this.cfg.f_PurchaseID);
            }
        }
        refreshView(_vo) {
            this._vo = _vo;
            this.cfg = this.dataSource;
            this.countTf.text = "";
            this.tf1.text = this.cfg.f_name;
            ItemViewFactory.renderItemSlots(this.rewardCon, this.cfg.f_Item, 10, 0.95, "left");
            let btn = this.freeCtl;
            this.rateCtl.visible = false;
            this.freeCtl.visible = false;
            let _freeIsShow = true;
            if (this.cfg.f_PurchaseID == 0) {
                this.tf3.text = E.getLang("Free");
            }
            else {
                let ppCfg = t_Purchase_PriceProxy.Ins.GetDataById(this.cfg.f_PurchaseID);
                if (ppCfg.f_isVoucher == EShopPayType.Voucher) {
                    btn = this.rateCtl.btnCtl;
                    this.rateCtl.cfg = ppCfg;
                    _freeIsShow = false;
                }
                this.tf3.text = StringUtil.moneyCv(ppCfg.f_price) + "元";
            }
            this.freeCtl.visible = _freeIsShow;
            this.rateCtl.btnCtl.visible = !this.freeCtl.visible;
            let _serverTime = 0;
            if (_vo) {
                _serverTime = _vo.getParam1(this.cfg.f_id);
            }
            if (_serverTime >= this.cfg.f_BuyTimes) {
                btn.mouseEnable = false;
                btn.gray = true;
            }
            else {
                btn.mouseEnable = true;
                btn.gray = false;
            }
            this.redImg.visible = false;
            if (ActivityModel.Ins.hasDailyFreeRed(this.cfg, _vo)) {
                DotManager.addDot(btn.skin);
            }
            else {
                DotManager.removeDot(btn.skin);
            }
            DebugUtil.drawTF(this, this.cfg.f_id + "");
        }
    }
    class MeiRiLiBaoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("huodong.atlas");
        }
        onExit() {
            this._timeCtl.stop();
            this._timeCtl1.stop();
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.updateView);
            MainModel.Ins.off(MainEvent.DailyShopWeekCard_Card, this, this.updateView);
            if (this._autoBtn) {
                this._autoBtn.dispose();
            }
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_meirilibao_viewUI();
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = MeiRiItem;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._timeCtl = new TimeCtlV2(this._ui.timeTf, "{0}后刷新");
                this._timeCtl1 = new TimeCtlV2(this._ui.timeTf1, "{0}后刷新");
                const tabsSkin = [this._ui.tab_zk, this._ui.tab_mr];
                this.tabList = ["折扣商店", "每日礼包"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
            }
        }
        onItemRender(item) {
            item.refreshView(this._vo);
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.txt.text = this.tabList[index];
            if (sel) {
                skin.img1.visible = true;
                skin.img2.visible = false;
                skin.txt.color = "#A1572F";
            }
            else {
                skin.img1.visible = false;
                skin.img2.visible = true;
                skin.txt.color = "#e4bb87";
            }
        }
        onTabSelectHandler(v) {
            if (v == -1)
                return;
            if (v == 0) {
                this._ui.sp_zk.visible = true;
                this._ui.sp_mr.visible = false;
            }
            else {
                this._ui.sp_zk.visible = false;
                this._ui.sp_mr.visible = true;
            }
        }
        onInit() {
            E.ViewMgr.Close(EViewType.Libao);
            MainModel.Ins.mainMask = true;
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.updateView);
            MainModel.Ins.on(MainEvent.DailyShopWeekCard_Card, this, this.updateView);
            this.updateView();
            if (this.Data) {
                let obj = this.Data;
                this._ui.list1.scrollTo(obj.listitemIndex);
                this.tabsCtl.selectIndex = obj.tabIndex;
            }
            else {
                this._ui.list1.scrollTo(0);
                let num = LiBaoModel.Ins.getPlayerTotal();
                let num1 = System_RefreshTimeProxy.Ins.getNumberVal(57);
                if (num >= num1) {
                    this.tabsCtl.selectIndex = 1;
                }
                else {
                    this.tabsCtl.selectIndex = 0;
                }
            }
            let _vo = ActivityModel.Ins.getVo(EActivityType.EveryDayBorn);
            if (_vo) {
                this._autoBtn = AutoRateBtn.Create(this._ui, _vo.uid);
            }
            if (initConfig.clienttype == EClientType.Discount) {
                this._ui.list1.height = 758;
            }
            else {
                this._ui.list1.height = 877;
            }
        }
        onSort(a, b) {
            if (a.f_sort < b.f_sort) {
                return -1;
            }
            else if (a.f_sort > b.f_sort) {
                return 1;
            }
            return 1;
        }
        updateView() {
            this._vo = ActivityModel.Ins.getVo(EActivityType.EveryDayBorn);
            let l = t_Pack_DailyProxy.Ins.List;
            l = l.sort(this.onSort);
            this._ui.list1.array = t_Pack_DailyProxy.Ins.List;
            this.updateTime();
            let flag = false;
            for (let i = 0; i < t_Pack_DailyProxy.Ins.List.length; i++) {
                flag = ActivityModel.Ins.hasDailyFreeRed(t_Pack_DailyProxy.Ins.List[i], this._vo);
                if (flag) {
                    break;
                }
            }
            if (flag) {
                DotManager.addDot(this._ui.tab_mr);
            }
            else {
                DotManager.removeDot(this._ui.tab_mr);
            }
            if (MainModel.Ins.isZKWCRedTip()) {
                DotManager.addDot(this._ui.tab_zk);
            }
            else {
                DotManager.removeDot(this._ui.tab_zk);
            }
            this.updataZKView();
        }
        updataZKView() {
            this._zkVo = ActivityModel.Ins.getVo(EActivityType.ZKShop);
            this.updateTime1();
            let map = {};
            let arr = this._zkVo.dataList;
            for (let i = 0; i < arr.length; i++) {
                let cfg = t_Pack_Daily_Shop.Ins.getCfgById(arr[i].id);
                if (!map[cfg.f_group]) {
                    map[cfg.f_group] = [];
                }
                map[cfg.f_group].push(arr[i]);
            }
            while (this._ui.panel.numChildren) {
                this._ui.panel.removeChildAt(0);
            }
            let offy = 0;
            for (let ele in map) {
                let v;
                let cfg = t_Pack_Daily_Shop.Ins.getCfgById(map[ele][0].id);
                if (cfg.f_weekcard) {
                    v = new ZheKouItem2;
                }
                else {
                    v = new ZheKouItem;
                }
                v.setData(map[ele]);
                v.y = offy;
                this._ui.panel.addChild(v);
                if (cfg.f_weekcard) {
                    offy += 536;
                }
                else {
                    offy += 387;
                }
            }
        }
        updateTime() {
            this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
            let sec = this._vo.endTime - TimeUtil.serverTime;
            if (sec < 0) {
                this._ui.timeTf.text = "";
            }
            else {
                this._timeCtl.start(sec);
            }
        }
        onTimeComplete() {
            this._ui.timeTf.text = "";
            this.updateTime();
        }
        updateTime1() {
            this._timeCtl1.once(Laya.Event.COMPLETE, this, this.onTimeComplete1);
            let sec = this._zkVo.endTime - TimeUtil.serverTime;
            if (sec < 0) {
                this._ui.timeTf1.text = "";
            }
            else {
                this._timeCtl1.start(sec);
            }
        }
        onTimeComplete1() {
            this._ui.timeTf1.text = "";
            this.updateTime1();
        }
    }

    exports.MeiRiLiBaoView = MeiRiLiBaoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class QianDaoItemCtl {
        constructor(skin) {
            this.skin = skin;
            this._model = ActivityModel.Ins;
            skin.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler(e) {
            e.stopPropagation();
            if (this.itemVo) {
                MainModel.Ins.showSmallTips(this.itemVo.getName(), this.itemVo.getDesc(), this.skin);
            }
            else if (this._mountCfg) {
                MainModel.Ins.showSmallTips(this._mountCfg.f_MountName, this._mountCfg.f_MountName, this.skin);
            }
        }
        setData(cfg, _activityVo) {
            this._activityVo = _activityVo;
            this.cfg = cfg;
            if (this.skin.destroyed) {
                return;
            }
            if (this.skin.nametf) {
                this.skin.nametf.text = E.LangMgr.getLang("QianDao1", StringUtil.toChinesNum(this.cfg.f_Days));
            }
            let _maskBg1 = this.skin.mask1;
            let _gouImg = this.skin.gou;
            if (this.skin instanceof ui.views.huodong.ui_qiandao_itemUI || this.skin instanceof ui.views.huodong.ui_qiandao_horseUI) {
                if (cfg.f_RewardsType == EQianDaoRewardsType.Item) {
                    this.updateItem(this.skin);
                }
                else {
                    this.updateHorse(this.skin);
                }
            }
            else if (this.skin instanceof ui.views.huodong.ui_qiandao_item2UI) {
                this.updateView2(this.skin);
            }
            _maskBg1.visible = false;
            _gouImg.visible = false;
            let _status = EActivityLingQu.Nothing;
            if (_activityVo) {
                _status = _activityVo.getParam1(cfg.f_id);
            }
            switch (_status) {
                case EActivityLingQu.Nothing:
                    _maskBg1.visible = false;
                    _gouImg.visible = false;
                    this.skin.bg.skin = "remote/huodong/lanwei_lan.png";
                    this.nameColor = "#FFEEC2";
                    break;
                case EActivityLingQu.KeLingQu:
                    _gouImg.visible = false;
                    _maskBg1.visible = false;
                    this.skin.bg.skin = "remote/huodong/lanwei_huang.png";
                    this.nameColor = "#8e3b34";
                    break;
                case EActivityLingQu.YiLingQu:
                    this.skin.bg.skin = "remote/huodong/lanwei_lan.png";
                    _gouImg.visible = true;
                    _maskBg1.visible = true;
                    this.nameColor = "#FFEEC2";
                    break;
            }
        }
        updateView2(skin) {
            let itemScale = 0.65;
            skin.width = 100 * itemScale * this.cfg.f_Item.split("|").length + 30;
            ItemViewFactory.renderItemSlots(skin.iconCon, this.cfg.f_Item, 2, itemScale);
            skin.iconCon.x = skin.width / 2;
        }
        set nameColor(color) {
            if (this.skin.nametf) {
                this.skin.nametf.color = color;
            }
        }
        updateItem(_skin) {
            let itemVo = ItemViewFactory.convertItemList(this.cfg.f_Item)[0];
            this.itemVo = itemVo;
            _skin.icon.skin = IconUtils.getIconByCfgId(itemVo.cfgId);
            _skin.cntTf.text = itemVo.count.toString();
        }
        updateHorse(_skin) {
            let _mountCfg = Mount_ListProxy.Ins.getCfg(parseInt(this.cfg.f_Item));
            this._mountCfg = _mountCfg;
            _skin.icon.skin = IconUtils.getHorseIcon(_mountCfg.f_MountID);
        }
    }

    exports.QianDaoItemCtl = QianDaoItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class QianDaoBaseView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this._itemList = [];
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("huodong.atlas");
        }
        onExit() {
            this._model.off(ActivityEvent.UpdateData, this, this.refreshView);
            MainModel.Ins.off(MainEvent.SignStatus, this, this.refreshView);
        }
        onFirstInit() {
            if (!this.UI) {
                this._model = ActivityModel.Ins;
                this.initUI();
                this._itemList = [];
                for (let i = 0; i < 7; i++) {
                    let _itemSkin = this._ui["item" + i];
                    let _ctl = new QianDaoItemCtl(_itemSkin);
                    this._itemList.push(_ctl);
                }
                this.bindClose(this._ui.close1);
                this.qiandaoBtnCtl = ButtonCtl.Create(this._ui.qiandaoBtn, new Laya.Handler(this, this.onQianDaoHandler));
                this._ui.clickImg.alpha = 0.05;
                this._ui.clickImg.on(Laya.Event.CLICK, this, this.onCloseHandler);
                DebugUtil.draw(this._ui.clickImg);
                this.setMouseBg(this._ui.bg1);
            }
        }
        onQianDaoHandler() {
            if (!this._activityVo) {
                return;
            }
            this._model.lingQu(this._activityVo.uid, 0);
        }
        onInit() {
            this._model.on(ActivityEvent.UpdateData, this, this.refreshView);
            MainModel.Ins.on(MainEvent.SignStatus, this, this.refreshView);
            this.refreshView();
        }
        refreshView() {
            this._ui.yijingqiandao.visible = false;
            this.qiandaoBtnCtl.visible = false;
            this._activityVo = this._model.getVo(this.activityType);
            let l = this.cfgList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let _itemView = this._itemList[i];
                _itemView.setData(cell, this._activityVo);
            }
            if (MainModel.Ins.sign.signType == 0) {
                this._ui.yijingqiandao.visible = true;
            }
            else {
                this.qiandaoBtnCtl.visible = true;
            }
        }
    }

    exports.QianDaoBaseView = QianDaoBaseView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class QianDaoView extends QianDaoBaseView {
        constructor() {
            super(...arguments);
            this.activityType = EActivityType.SignIn;
        }
        get cfgList() {
            return t_Pack_AttendanceProxy.Ins.List;
        }
        initUI() {
            this.UI = this._ui = new ui.views.huodong.ui_qiriqiandaoviewUI();
        }
    }
    class QianDaoNewView extends QianDaoBaseView {
        constructor() {
            super(...arguments);
            this.activityType = EActivityType.SignInNew;
        }
        get cfgList() {
            return t_Pack_Attendanc_new.Ins.List;
        }
        initUI() {
            this.UI = this._ui = new ui.views.huodong.ui_qiriqiandaoview_newUI();
        }
    }

    exports.QianDaoNewView = QianDaoNewView;
    exports.QianDaoView = QianDaoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZheKouShangDianCtl {
        constructor(_skin) {
            this.activityType = EActivityType.SanGuo;
            this.skin = _skin;
            this.skin.on(Laya.Event.CLICK, this, this.onClick);
            this._activityVo = ActivityModel.Ins.getVo(this.activityType);
        }
        onClick() {
            MainModel.Ins.buy(this._data.payItemVo.cfgId, this._data.payItemVo.count, this._data.itemVo.cfgId, this._data.itemVo.count, new Laya.Handler(this, this.onCallBack));
        }
        onCallBack() {
            const fid = this._data.fid;
            ActivityModel.Ins.lingQu(this._activityVo.uid, fid);
        }
        set showRed(v) {
        }
        setData(data) {
            const item = PackShopMarketProxy.Ins.getItemById(data.id);
            this._data = item;
            this.skin.tf1.text = item.itemVo.getName();
            this.skin.slot.tf1.text = item.itemVo.count.toString();
            this.skin.slot.icon.skin = item.itemVo.getIcon();
            this.skin.needicon.skin = item.payItemVo.getIcon();
            this.skin.saleOutBg.visible = false;
            this.skin.zhekouImg.visible = false;
            if (item.payItemVo.count > 0) {
                this.skin.needmoney.text = item.payItemVo.count + "";
                this.skin.needmoney.color = EGameColor.NORMAL_YELLOW;
            }
            else {
                this.skin.needmoney.text = E.getLang("Free");
                this.skin.needmoney.color = EGameColor.GREED;
            }
            if (data.param1 === 1) {
                this.skin.saleOutBg.visible = true;
                this.skin.zhekouImg.visible = false;
                this.showRed = false;
                this.skin.priceItem.visible = false;
            }
            else {
                if (item.iconId) {
                    this.skin.zhekouImg.skin = `remote/huodong/zhekou_${item.iconId}.png`;
                    this.skin.zhekouImg.visible = true;
                }
                else {
                    this.skin.zhekouImg.visible = false;
                }
                if (!item.payItemVo.count) {
                    this.skin.zhekouImg.visible = false;
                    this.showRed = true;
                }
                this.skin.priceItem.visible = true;
            }
        }
    }

    exports.ZheKouShangDianCtl = ZheKouShangDianCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZheKouShangDianItem1View extends ui.views.huodong.ui_zhekoushangdian_item1UI {
        constructor() {
            super();
            this.ctls = [];
            this.ctls = new Array(3).fill(0).map((o, i) => new ZheKouShangDianCtl(this[`item${i}`]));
        }
        setData(datas) {
            for (let i = 0; i < 3; i++) {
                const skinKey = `item${i}`;
                if (datas[i]) {
                    const ctl = this.ctls[i];
                    ctl.setData(datas[i]);
                }
                else {
                    this[skinKey].visible = false;
                }
            }
        }
    }

    exports.ZheKouShangDianItem1View = ZheKouShangDianItem1View;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SanGuoShiJiView extends ViewBase {
        constructor() {
            super(...arguments);
            this.activityType = EActivityType.SanGuo;
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_sanguoshiji_viewUI;
                ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.onCloseHandler1));
                ButtonCtl.Create(this._ui.btn1, new Laya.Handler(this, this.onEnterHandler));
                this._ui.list1.itemRender = ZheKouShangDianItem1View;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onListRenderHandler);
                this._timeCtl = new TimeCtlV2(this._ui.timetf, "{0}");
                const refreshItemVo = PackShopMarkConfigProxy.Ins.getRefreshItemVo();
                this._ui.tf2.text = refreshItemVo.count.toString();
                this._ui.needicon.skin = refreshItemVo.getIcon();
                this.refreshItemVo = refreshItemVo;
            }
        }
        onCloseHandler1() {
            E.ViewMgr.Close(this.ViewType);
        }
        onListRenderHandler(item, index) {
            item.setData(item.dataSource);
        }
        refresh() {
            this._activityVo = ActivityModel.Ins.getVo(this.activityType);
            if (!this._activityVo)
                return;
            const arr = this._activityVo.vo.datalist;
            const num = 3;
            const len = Math.ceil(arr.length / num);
            const arrGroup = new Array(len).fill(0).map((o, i) => arr.slice(i * num, (i + 1) * num));
            this._ui.list1.array = arrGroup;
        }
        refreshResources() {
            const arrGroup = this._ui.list1.array;
            if (arrGroup && arrGroup.length && arrGroup[0] && arrGroup[0].length) {
                const item = PackShopMarketProxy.Ins.getItemById(arrGroup[0][0].id);
                this._ui.moneyicon.skin = item.payItemVo.getIcon();
                const count = MainModel.Ins.mRoleData.getVal(item.payItemVo.cfgId);
                this._ui.moneyTf.text = StringUtil.val2m(count).toString();
                if (this.refreshItemVo) {
                    if (this.refreshItemVo.count > count) {
                        this._ui.btn1.disabled = true;
                        this._ui.btn1.gray = true;
                    }
                    else {
                        this._ui.btn1.disabled = false;
                        this._ui.btn1.gray = false;
                    }
                }
            }
        }
        onTimeComplete() {
            this._activityVo = ActivityModel.Ins.getVo(this.activityType);
            if (this._activityVo && this._activityVo.endTime - TimeUtil.serverTime > 0) {
                this.timeRefresh();
            }
            else {
                this._ui.timetf.text = "";
            }
        }
        timeRefresh() {
            if (!this._activityVo)
                return;
            this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
            this._timeCtl.start(this._activityVo.endTime - TimeUtil.serverTime);
        }
        onEnterHandler() {
            ActivityModel.Ins.lingQu(this._activityVo.uid, 0);
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onExit() {
            this._timeCtl.stop();
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.onUpdateDataEvt);
            MainModel.Ins.off(MainEvent.ValChange, this, this.refreshResources);
        }
        onUpdateDataEvt() {
            this.refresh();
        }
        onInit() {
            this.refresh();
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onUpdateDataEvt);
            MainModel.Ins.on(MainEvent.ValChange, this, this.refreshResources);
            this.timeRefresh();
            this.refreshResources();
        }
    }

    exports.SanGuoShiJiView = SanGuoShiJiView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TeQuanKaView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_tequanka_viewUI;
                const cfg = PackTeQuanKaCardProxy.Ins.getCfgByType(1);
                this.purchaseId = cfg.f_PurchaseID;
                const priceItem = t_Purchase_PriceProxy.Ins.getPriceItemById(this.purchaseId);
                const price = parseFloat((priceItem.price / 100).toFixed(2));
                this._ui.tf1.text = `${price}元解锁`;
                this.lingquCtl = new ButtonCtl(this._ui.lingqu, new Laya.Handler(this, this.onLingquHandler));
                this.goonPay = ButtonCtl.Create(this._ui.img3, new Laya.Handler(this, this.onGoPushMoney));
                this.btnList.push(ButtonCtl.Create(this._ui.btn1, new Laya.Handler(this, this.onEnterHandler)), this.lingquCtl, this.goonPay);
                this._ui.zhangguIcon.skin = IconUtils.getIconByCfgId(ECellType.BOX);
            }
        }
        onGoPushMoney() {
            this.onEnterHandler();
        }
        onLingquHandler() {
            let req = new AdFreeCardGet_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        clearUI() {
            this.lingquCtl.visible = false;
            this._ui.subcon.visible = false;
            this._ui.yilingqu.visible = false;
            this._ui.weichongzhi.visible = false;
        }
        refreshView() {
            this._curData = MainModel.Ins.teQuanKaCard;
            this.clearUI();
            if (this._curData) {
                if (this._curData.val == 0) {
                    this._ui.weichongzhi.visible = true;
                }
                else if (this._curData.val == 1) {
                    this.lingquCtl.visible = true;
                    this._ui.subcon.visible = true;
                }
                else if (this._curData.val == 2) {
                    this._ui.yilingqu.visible = true;
                    this._ui.subcon.visible = true;
                }
                this._ui.dattf.text = this._curData.subday + "";
            }
            this.layoutUI();
        }
        layoutUI() {
            this._ui.dattf.x = this._ui.img1.x + this._ui.img1.width;
            this._ui.img2.x = this._ui.dattf.x + this._ui.dattf.textField.width;
            this._ui.img3.x = this._ui.img2.x + this._ui.img2.width;
            this.goonPay.setpos(this._ui.img3.x, this._ui.img3.y);
        }
        onEnterHandler() {
            ActivityModel.Ins.recharge(this.purchaseId);
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onExit() {
            MainModel.Ins.off(MainEvent.Updata_TeQuanKa, this, this.refreshView);
        }
        onInit() {
            MainModel.Ins.on(MainEvent.Updata_TeQuanKa, this, this.refreshView);
            this.refreshView();
        }
    }

    exports.TeQuanKaView = TeQuanKaView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TianJiaZhuoMianView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_add_deskUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_img, new Laya.Handler(this, this.onBtnClick)), ButtonCtl.Create(this._ui.btn_left, new Laya.Handler(this, this.onBtnLeftClick)), ButtonCtl.Create(this._ui.btn_right, new Laya.Handler(this, this.onBtnRightClick)));
                this._ui.txt1.text = E.getLang("tjzm1");
                this._ui.txt2.text = E.getLang("tjzm2");
                this._ui.bg21.visible = true;
                this._ui.bg22.visible = this._ui.bg23.visible = false;
                this._ui.dot1.skin = `remote/huodong/tjzm_y2.png`;
                this.setItem();
                this.onShareReward();
                if (initConfig.platform == PlatformConfig.DOU_YIN) {
                    this._ui.desk_img1.skin = "static/dy_tjzm_1.png";
                    this._ui.desk_img2.skin = "static/dy_tjzm_2.png";
                    this._ui.desk_img3.skin = "static/dy_tjzm_3.png";
                }
            }
        }
        setItem() {
            const rewards = System_RefreshTimeProxy.Ins.GetDataById(60).f_SystemConfig;
            let _resultItemVo = ItemViewFactory.convertItem(rewards);
            ItemViewFactory.refreshSlot(this._ui.item, _resultItemVo);
        }
        onInit() {
            MainModel.Ins.on(MainEvent.WxOnShow, this, this.onWxOnShow);
            MainModel.Ins.on(MainEvent.ShareReward, this, this.onShareReward);
            this.onShareReward();
            this.checkScene();
        }
        checkScene() {
            let sceneVal = E.sdk.scene;
            if (sceneVal) {
                this.onWxOnShow({ scene: sceneVal });
            }
        }
        onWxOnShow(res) {
            if (E.sdk.isFromDesk(res)) {
                const req = new ShareReward_req();
                req.funcId = EFuncDef.TianJiaZhuoMian;
                req.type = 0;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onExit() {
            MainModel.Ins.off(MainEvent.WxOnShow, this, this.onWxOnShow);
            MainModel.Ins.off(MainEvent.ShareReward, this, this.onShareReward);
        }
        onBtnClick() {
            const data = MainModel.Ins.shareReward;
            const d = data.dataList.find(o => o.funcId === EFuncDef.TianJiaZhuoMian);
            if (!d || (d.state !== 2))
                return;
            const req = new ShareReward_req();
            req.funcId = EFuncDef.TianJiaZhuoMian;
            req.type = 1;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnLeftClick() {
            const arr = [this._ui.bg21, this._ui.bg22, this._ui.bg23];
            const dots = [this._ui.dot1, this._ui.dot2, this._ui.dot3];
            const index = arr.findIndex(o => o.visible);
            if (index === 0)
                return;
            arr[index].visible = false;
            dots[index].skin = `remote/huodong/tjzm_y1.png`;
            arr[index - 1].visible = true;
            dots[index - 1].skin = `remote/huodong/tjzm_y2.png`;
            if ((index - 1) === 0) {
                this._ui.txt2.visible = true;
            }
            else {
                this._ui.txt2.visible = false;
            }
        }
        onBtnRightClick() {
            const arr = [this._ui.bg21, this._ui.bg22, this._ui.bg23];
            const dots = [this._ui.dot1, this._ui.dot2, this._ui.dot3];
            const index = arr.findIndex(o => o.visible);
            if (index === (arr.length - 1))
                return;
            arr[index].visible = false;
            dots[index].skin = `remote/huodong/tjzm_y1.png`;
            arr[index + 1].visible = true;
            dots[index + 1].skin = `remote/huodong/tjzm_y2.png`;
            if ((index + 1) === 0) {
                this._ui.txt2.visible = true;
            }
            else {
                this._ui.txt2.visible = false;
            }
        }
        onShareReward() {
            const data = MainModel.Ins.shareReward;
            let d = data.dataList.find(o => o.funcId === EFuncDef.TianJiaZhuoMian);
            let state = (d === null || d === void 0 ? void 0 : d.state) || 0;
            let txt = '';
            switch (state) {
                case 0:
                    txt = '领取';
                    this._ui.btn_img.disabled = true;
                    break;
                case 1:
                    txt = '已领取';
                    this._ui.btn_img.disabled = true;
                    break;
                case 2:
                    txt = '领取';
                    this._ui.btn_img.disabled = false;
                    break;
            }
            this._ui.btn_tf.text = txt;
        }
    }

    exports.TianJiaZhuoMianView = TianJiaZhuoMianView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XianShiFuLiCtl {
        constructor(skin) {
            this.skin = skin;
        }
        setData(index) {
            let popArr = ActivityModel.Ins.getPopShowArr();
            let v = ActivityModel.Ins.getByUid(popArr[index].uid);
            const cfg = PackEjectProxy.Ins.getCfgByFid(parseInt(v.eject_f_id));
            this.skin.icon2.skin = `o/pack_eject/${cfg.f_packicon}`;
            this.skin.img_b2.skin = `o/pack_eject/${cfg.f_covericon}`;
            this.skin.lab2.text = cfg.f_packname;
        }
    }

    exports.XianShiFuLiCtl = XianShiFuLiCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XianShiFuLiView extends ViewBase {
        constructor(viewType, layerType) {
            super(viewType, layerType);
            this.mMask = true;
            this.autoFree = true;
            this.mMainSnapshot = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_xianshifuli_viewUI;
                this.btn1Ctl = ButtonCtl.Create(this._ui.btn1, new Laya.Handler(this, this.onEnterHandler));
                this.btnList.push(ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.onCloseHandler1)), this.btn1Ctl);
                this.rateCtl = new RateBtn01Ctl(this._ui.ratebtn, this, this.onEnterHandler, ESkinRateBtn.Yellow);
                this._ui.timeTf.text = "";
                this._timeCtl = new TimeCtl(this._ui.timeTf);
                this._ui.list.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemHandler);
                for (let i = 1; i < 4; i++) {
                    this._ui["item" + i].on(Laya.Event.CLICK, this, this.onIconClick, [i]);
                    this._ui["item" + i].visible = false;
                }
                for (let i = 0; i < 5; i++) {
                    this["_ctl" + i] = new XianShiFuLiCtl(this._ui["item" + i]);
                }
            }
        }
        onIconClick(value) {
            let popArr = ActivityModel.Ins.getPopShowArr();
            if (value == 3) {
                this._index++;
                this._isPlay = true;
                this._ui.img_l.visible = false;
                if (this._ui.item1.visible) {
                    this.setTween(1, 1, false);
                }
                if (popArr[this._index + 1]) {
                    this.setTween(4, 1, false);
                }
                this.setTween(2, 1, false);
                this.setTween(3, 1, true);
            }
            else if (value == 1) {
                this._index--;
                this._isPlay = true;
                this._ui.img_l.visible = false;
                if (this._ui.item3.visible) {
                    this.setTween(3, 2, false);
                }
                if (popArr[this._index - 1]) {
                    this.setTween(0, 2, false);
                }
                this.setTween(1, 2, false);
                this.setTween(2, 2, true);
            }
        }
        setTween(index, type, flag) {
            let item = new ui.views.huodong.ui_xianshifuli_itemUI;
            item.x = this._ui["item" + index].x;
            item.y = this._ui["item" + index].y;
            item.scaleX = this._ui["item" + index].scaleX;
            item.scaleY = this._ui["item" + index].scaleY;
            item.icon2.skin = this._ui["item" + index].icon2.skin;
            item.img_b2.skin = this._ui["item" + index].img_b2.skin;
            item.lab2.text = this._ui["item" + index].lab2.text;
            this._ui.panel.addChild(item);
            this._ui["item" + index].visible = false;
            let ii = 0;
            if (type == 1) {
                ii = index - 1;
            }
            else {
                ii = index + 1;
            }
            let xx = this._ui["item" + ii].x;
            let yy = this._ui["item" + ii].y;
            let sx = this._ui["item" + ii].scaleX;
            let sy = this._ui["item" + ii].scaleY;
            Laya.Tween.to(item, { x: xx, y: yy, scaleX: sx, scaleY: sy }, 500, null, Laya.Handler.create(this, this.onTweenEnd, [item, flag]));
        }
        onTweenEnd(item, flag) {
            if (item) {
                item.removeSelf();
                item = null;
            }
            if (flag) {
                this.updateView();
            }
        }
        onItemHandler(item) {
            let vo = new ItemVo();
            vo.cfgId = item.dataSource.id;
            vo.count = item.dataSource.count;
            ItemViewFactory.refreshSlot(item, vo);
        }
        updateView() {
            this._isPlay = false;
            this._ui.img_l.visible = true;
            let popArr = ActivityModel.Ins.getPopShowArr();
            if (popArr.length == 0) {
                return;
            }
            if (popArr[this._index - 2]) {
                this._ctl0.setData(this._index - 2);
            }
            if (popArr[this._index - 1]) {
                this._ui.item1.visible = true;
                this._ctl1.setData(this._index - 1);
            }
            else {
                this._ui.item1.visible = false;
            }
            if (popArr[this._index + 2]) {
                this._ctl4.setData(this._index + 2);
            }
            if (popArr[this._index + 1]) {
                this._ui.item3.visible = true;
                this._ctl3.setData(this._index + 1);
            }
            else {
                this._ui.item3.visible = false;
            }
            this._ui.item2.visible = true;
            this._ctl2.setData(this._index);
            let vo = popArr[this._index];
            let activityVo = ActivityModel.Ins.getByUid(vo.uid);
            const config = PackEjectProxy.Ins.getRewardConf(parseInt(activityVo.eject_f_id));
            const purchaseId = config.purchaseId;
            this._ui.list.array = config.cellValues;
            this.purchaseId = purchaseId;
            const priceItem = t_Purchase_PriceProxy.Ins.getPriceItemById(purchaseId);
            const price = parseFloat((priceItem.price / 100).toFixed(2));
            this._ui.tf1.text = `${price}元购买`;
            this._curBtnCtl = this.btn1Ctl;
            let _purcCfg = t_Purchase_PriceProxy.Ins.GetDataById(purchaseId);
            if (_purcCfg.f_isVoucher == EShopPayType.Voucher) {
                this._curBtnCtl = this.rateCtl.btnCtl;
                this.rateCtl.cfg = _purcCfg;
            }
            RateBtnUtils.Refresh(this._curBtnCtl, this.btn1Ctl, this.rateCtl.btnCtl);
            this._curBtnCtl.grayMouseDisable = false;
            let timeEnd = ActivityModel.Ins.getPopWinHideTime(activityVo.uid);
            if (timeEnd) {
                this._timeCtl.start(timeEnd - TimeUtil.serverTime, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("已结束");
            if (this._curBtnCtl) {
                this._curBtnCtl.grayMouseDisable = true;
            }
        }
        onEnterHandler() {
            if (this._isPlay) {
                return;
            }
            ActivityModel.Ins.recharge(this.purchaseId);
        }
        onCloseHandler1() {
            E.ViewMgr.Close(this.ViewType);
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.PopWinUpdate, this, this.onCheckClose);
            MainModel.Ins.off(MainEvent.Reward_revcUpdate, this, this.onUpdateView);
            this._timeCtl.stop();
        }
        onCheckClose() {
            let arr = ActivityModel.Ins.getPopShowArr();
            if (arr.length <= 0) {
                this.Close();
            }
            this.updateView();
        }
        onInit() {
            ActivityModel.Ins.on(ActivityEvent.PopWinUpdate, this, this.onCheckClose);
            MainModel.Ins.on(MainEvent.Reward_revcUpdate, this, this.onUpdateView);
            if (this.Data) {
                let arr = ActivityModel.Ins.getPopShowArr();
                this._index = arr.findIndex(o => o.uid === this.Data);
            }
            else {
                this._index = ActivityModel.Ins.getPopShowIndex();
            }
            this.updateView();
        }
        onUpdateView() {
            this._index = ActivityModel.Ins.getPopShowIndex();
            this.updateView();
        }
    }

    exports.XianShiFuLiView = XianShiFuLiView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class KaiXiangDajiItem extends ui.views.huodong.ui_kaixiangdaji_itemUI {
        constructor() {
            super();
            this.jingduInitW = this.jingdu.width;
            this.lingquCtl = ButtonCtl.CreateBtn(this.lingqubtn, this, this.onLingquClickHandler);
        }
        onLingquClickHandler() {
            if (this._activityVo) {
                ActivityModel.Ins.lingQu(this._activityVo.uid, this._cfg.f_id);
            }
        }
        set disableBtn(v) {
            this.lingquCtl.gray = v;
            this.lingquCtl.mouseEnable = !v;
        }
        setLvProgress(v, max) {
            this.jindutf.text = v + "/" + max;
            v--;
            max--;
            let p = v / max;
            if (p <= 0) {
                this.jingdu.visible = false;
            }
            else {
                this.jingdu.visible = true;
                if (p > 1) {
                    p = 1;
                }
                this.jingdu.width = this.jingduInitW * p;
            }
        }
        refreshView(_activityVo) {
            this._activityVo = _activityVo;
            let _cfg = this.dataSource;
            this._cfg = _cfg;
            if (_cfg.f_BoxUse) {
                this.nameTf.text = E.LangMgr.getLang("KaiXiang2", _cfg.f_BoxUse);
                this.setProgress(MainModel.Ins.boxUsedCount, _cfg.f_BoxUse);
            }
            else {
                this.nameTf.text = E.LangMgr.getLang("KaiXiang1", _cfg.f_BoxLevel);
                this.setLvProgress(MainModel.Ins.mRoleData.boxlv, _cfg.f_BoxLevel);
            }
            let _itemVo = ItemViewFactory.convertItemList(_cfg.f_Item)[0];
            this.itemVo = _itemVo;
            ItemViewFactory.refreshSlot(this.slot, _itemVo);
            let _status = EActivityLingQu.Nothing;
            let uid = -1;
            if (_activityVo) {
                _status = _activityVo.getParam1(_cfg.f_id);
                uid = _activityVo.uid;
            }
            this.tf1.text = E.getLang("LingQu");
            switch (_status) {
                case EActivityLingQu.Nothing:
                    this.disableBtn = true;
                    break;
                case EActivityLingQu.KeLingQu:
                    this.disableBtn = false;
                    break;
                case EActivityLingQu.YiLingQu:
                    this.tf1.text = E.getLang("LingQu2");
                    this.disableBtn = true;
                    break;
            }
        }
        setProgress(v, max) {
            this.jindutf.text = v + "/" + max;
            let p = v / max;
            if (p <= 0) {
                this.jingdu.visible = false;
            }
            else {
                this.jingdu.visible = true;
                if (p > 1) {
                    p = 1;
                }
                this.jingdu.width = this.jingduInitW * p;
            }
        }
    }

    exports.KaiXiangDajiItem = KaiXiangDajiItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaseXingFuKuanghuanCtl {
        onFirstInit() {
            this.model = ActivityModel.Ins;
            this._timeCtl = new TimeCtlV2(this.skin.timetf, "{0}");
        }
        onInit() {
            this._activityVo = this.model.getVo(this.activityType);
            this.model.on(ActivityEvent.UpdateData, this, this.onUpdateView);
            this.skin.visible = true;
            this.timeRefresh();
        }
        onExit() {
            this._timeCtl.stop();
            if (this.model) {
                this.model.off(ActivityEvent.UpdateData, this, this.onUpdateView);
            }
            this.skin.visible = false;
        }
        onUpdateView() {
        }
        timeRefresh() {
            if (this._activityVo) {
                this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
                let time = {};
                time.start = this._activityVo.startTime;
                time.end = this._activityVo.endTime;
                this.skin.tf1.visible = true;
                this._timeCtl.start(time.end - TimeUtil.serverTime);
            }
        }
        onTimeComplete() {
            this.skin.timetf.text = "";
            this.skin.tf1.visible = false;
        }
    }
    class KaiXiangDajiCtl extends BaseXingFuKuanghuanCtl {
        constructor() {
            super();
            this.activityType = EActivityType.KaiXaingDaji;
        }
        onFirstInit() {
            super.onFirstInit();
            this.skin.list1.itemRender = KaiXiangDajiItem;
            this.skin.list1.renderHandler = new Laya.Handler(this, this.onRenderHander);
        }
        onRenderHander(item) {
            item.refreshView(this._activityVo);
        }
        onInit() {
            super.onInit();
            MainModel.Ins.on(MainEvent.BoxUsed, this, this.onRefreshList);
            this.onUpdateView();
        }
        canLingquIndex() {
            let l = t_Pack_BoxEventProxy.Ins.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (this._activityVo.getParam1(cfg.f_id) == EActivityLingQu.KeLingQu) {
                    return i;
                }
            }
            return -1;
        }
        onRefreshList() {
            this.skin.list1.refresh();
        }
        onUpdateView() {
            this.skin.list1.array = t_Pack_BoxEventProxy.Ins.List;
            let index = this.canLingquIndex();
            if (index >= 0) {
                this.skin.list1.scrollTo(index);
            }
            else {
                this.skin.list1.scrollTo(0);
            }
        }
        onExit() {
            super.onExit();
            MainModel.Ins.off(MainEvent.BoxUsed, this, this.onRefreshList);
        }
    }

    exports.BaseXingFuKuanghuanCtl = BaseXingFuKuanghuanCtl;
    exports.KaiXiangDajiCtl = KaiXiangDajiCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TeHuiLiBaoItemView extends ui.views.huodong.ui_tehui_libao_item_viewUI {
        constructor() {
            super();
            ButtonCtl.CreateBtn(this.buyBtn, this, this.onBuyHandler);
        }
        onBuyHandler() {
            if (this.subCount <= 0) {
                E.ViewMgr.ShowMidError(E.getLang("limitBuyMax"));
            }
            else {
                ActivityModel.Ins.recharge(this.cfg.f_PurchaseID);
            }
        }
        refreshView(_vo) {
            this._vo = _vo;
            this.cfg = this.dataSource;
            ItemViewFactory.renderItemSlots(this.rewardCon, this.cfg.f_Item, 10, 1, "left");
            this.nametf1.text = this.cfg.f_name;
            let ppCfg = t_Purchase_PriceProxy.Ins.GetDataById(this.cfg.f_PurchaseID);
            this.moneyTf.text = StringUtil.moneyCv(ppCfg.f_price) + "元";
            this.cntTf.text = E.LangMgr.getLang("Xiangou") + ": " + this.subCount + "/" + this.cfg.f_BuyTimes;
        }
        get subCount() {
            if (!this._vo) {
                return 0;
            }
            return this._vo.getSubTime(this.cfg);
        }
    }

    exports.TeHuiLiBaoItemView = TeHuiLiBaoItemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TeHuiLiBaoCtl extends BaseXingFuKuanghuanCtl {
        constructor() {
            super();
            this.activityType = EActivityType.TeHuiLiBao;
        }
        onFirstInit() {
            super.onFirstInit();
            this.skin.list1.itemRender = TeHuiLiBaoItemView;
            this.skin.list1.renderHandler = new Laya.Handler(this, this.itemRender);
        }
        itemRender(item) {
            item.refreshView(this._activityVo);
        }
        onInit() {
            super.onInit();
            this.onUpdateView();
        }
        onUpdateView() {
            this.skin.list1.array = t_Pack_NewSeverProxy.Ins.List;
        }
        onExit() {
            super.onExit();
        }
    }

    exports.TeHuiLiBaoCtl = TeHuiLiBaoCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MoneyCtl {
        constructor(tf, itemId) {
            this.tf = tf;
            this._itemId = itemId;
        }
        init() {
            MainModel.Ins.on(MainEvent.ValChange, this, this.onUpdateView);
            this.onUpdateView();
        }
        onUpdateView() {
            let val = MainModel.Ins.mRoleData.getVal(this._itemId);
            this.tf.text = StringUtil.val2m(val);
        }
        exit() {
            MainModel.Ins.off(MainEvent.ValChange, this, this.onUpdateView);
        }
    }

    exports.MoneyCtl = MoneyCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZheKouItemRenderCtl {
        constructor(skin) {
            this.skin = skin;
            this.skin.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            ActivityModel.Ins.buySomething(this._activityVo, this.cfg.f_id, this._needItem);
        }
        set showRed(v) {
        }
        setData(data, _activityVo) {
            if (data) {
                let cfg = data;
                this.cfg = cfg;
                this._activityVo = _activityVo;
                this.skin.visible = true;
                this.showRed = false;
                let _itemVo = ItemViewFactory.convertItemList(cfg.f_Goods)[0];
                this.skin.tf1.text = _itemVo.getName();
                ItemViewFactory.refreshSlot(this.skin.slot, _itemVo, false);
                if (cfg.f_Discount == 0) {
                    this.skin.zhekouImg.skin = "";
                }
                else {
                    this.skin.zhekouImg.skin = `remote/huodong/zhekou_${cfg.f_Discount}.png`;
                }
                this.skin.saleOutBg.visible = false;
                let _needItem = ItemViewFactory.convertItemList(cfg.f_price)[0];
                this._needItem = _needItem;
                if (_needItem.count == 0) {
                    this.skin.needmoney.text = E.getLang("Free");
                    this.skin.needmoney.color = EGameColor.GREED;
                    this.skin.needicon.visible = false;
                }
                else {
                    this.skin.needmoney.text = _needItem.count.toString();
                    this.skin.needicon.visible = true;
                    this.skin.needicon.skin = IconUtils.getIconByCfgId(_needItem.cfgId);
                    if (_needItem.count > MainModel.Ins.mRoleData.getVal(_needItem.cfgId)) {
                        this.skin.needmoney.color = EGameColor.RED;
                    }
                    else {
                        this.skin.needmoney.color = EGameColor.NORMAL_YELLOW;
                    }
                }
                let _serverBuyTime = 0;
                if (_activityVo) {
                    _serverBuyTime = _activityVo.getParam1(cfg.f_id);
                }
                if (_serverBuyTime >= cfg.f_BuyTimes) {
                    this.skin.saleOutBg.visible = true;
                }
                else {
                    this.skin.saleOutBg.visible = false;
                }
            }
            else {
                this.skin.visible = false;
            }
        }
    }
    class ZhouKaiBigItem extends ui.views.huodong.ui_zhekoushangdian_item1UI {
        constructor() {
            super();
            this.itemList = [];
            for (let i = 0; i < 3; i++) {
                this.itemList.push(new ZheKouItemRenderCtl(this["item" + i]));
            }
        }
        refreshView(_vo) {
            let arr = this.dataSource;
            for (let i = 0; i < this.itemList.length; i++) {
                let _data = arr[i];
                let cell = this.itemList[i];
                cell.setData(_data, _vo);
            }
        }
    }
    class ZheKouShopCtl extends BaseXingFuKuanghuanCtl {
        constructor() {
            super();
            this.activityType = EActivityType.Pack_Shop_Mart;
        }
        onFirstInit() {
            super.onFirstInit();
            this.skin.list1.itemRender = ZhouKaiBigItem;
            this.skin.list1.renderHandler = new Laya.Handler(this, this.onItemHandler);
            ButtonCtl.CreateBtn(this.skin.btn1, this, this.onRefreshHandler);
            this._moneyCtl = new MoneyCtl(this.skin.moneyTf, ECellType.GOLD);
            this.skin.moneyicon.skin = IconUtils.getIconByCfgId(ECellType.GOLD);
        }
        onRefreshHandler() {
            if (this._activityVo) {
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.LangMgr.getLang("AreYouPayRefresh", this._itemVo.cntName), new Laya.Handler(this, this.okHandler));
            }
        }
        okHandler() {
            ActivityModel.Ins.lingQu(this._activityVo.uid, 0);
        }
        onInit() {
            super.onInit();
            this._moneyCtl.init();
            this.onUpdateView();
            this.skin.list1.scrollTo(0);
        }
        onItemHandler(item) {
            item.refreshView(this._activityVo);
        }
        onExit() {
            super.onExit();
            this._moneyCtl.exit();
        }
        getNewList(arr) {
            if (!this._activityVo.vo) {
                return [];
            }
            let l = [];
            let nl = this._activityVo.vo.datalist || [];
            for (let i = 0; i < arr.length; i++) {
                let cell = arr[i];
                let item = nl.find(item => item.id == cell.f_id);
                if (item) {
                    l.push(cell);
                }
            }
            return l;
        }
        onUpdateView() {
            if (!this._activityVo) {
                return;
            }
            let arr = this.getNewList(t_Pack_Shop_MartProxy.Ins.List);
            let groupList = [];
            let _maxCnt = 3;
            let la = [];
            for (let i = 0; i < arr.length; i++) {
                let cell = arr[i];
                if (i % _maxCnt == 0) {
                    la = [];
                    groupList.push(la);
                }
                groupList[groupList.length - 1].push(cell);
            }
            this.skin.list1.array = groupList;
            this.skin.list1.refresh();
            let cfg = t_Pack_Shop_Mart_ConfigProxy.Ins.GetDataById(1);
            let _itemVo = ItemViewFactory.convertItemList(cfg.f_RefreshPrice)[0];
            this._itemVo = _itemVo;
            this.skin.needicon.skin = _itemVo.getIcon();
            this.skin.tf2.text = _itemVo.count.toString();
        }
    }

    exports.ZheKouShopCtl = ZheKouShopCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EXingFuKuangHuan) {
        EXingFuKuangHuan[EXingFuKuangHuan["KaiXiangDaJi"] = 0] = "KaiXiangDaJi";
        EXingFuKuangHuan[EXingFuKuangHuan["TeHuiLiBao"] = 1] = "TeHuiLiBao";
        EXingFuKuangHuan[EXingFuKuangHuan["ZhekouJiShiShangDian"] = 2] = "ZhekouJiShiShangDian";
    })(exports.EXingFuKuangHuan || (exports.EXingFuKuangHuan = {}));
    class XingFuKuangMainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.tabsCtl = new TabControl();
            this.mMask = true;
            this._viewCtllist = [];
            this._mTabList = [
                exports.EXingFuKuangHuan.KaiXiangDaJi,
                exports.EXingFuKuangHuan.TeHuiLiBao,
                exports.EXingFuKuangHuan.ZhekouJiShiShangDian
            ];
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("huodong.atlas");
        }
        onExit() {
            for (let i = 0; i < this._viewCtllist.length; i++) {
                this._viewCtllist[i].onExit();
            }
        }
        onFirstInit() {
            if (!this._ui) {
                this.UI = this._ui = new ui.views.huodong.ui_xingfukuang_mainUI();
                this.bindClose(this._ui.close1);
                this.tabsCtl = TabControl.Create(this, this.onSelectHandler, this.itemTabHandler);
                this._tabSkinCtl = TabSkinCtl.Create(ui.views.huodong.ui_xingfu_tabItemUI, "ui_xingfu_tabItemUI", this._ui.tablist);
                this.kaixiangCtl = new KaiXiangDajiCtl();
                this.kaixiangCtl.type = exports.EXingFuKuangHuan.KaiXiangDaJi;
                this.kaixiangCtl.skin = this._ui.kaixiangdaji;
                this._viewCtllist = [];
                this._viewCtllist.push(this.kaixiangCtl);
                this.tehuiCtl = new TeHuiLiBaoCtl();
                this.tehuiCtl.type = exports.EXingFuKuangHuan.TeHuiLiBao;
                this.tehuiCtl.skin = this._ui.meiritehui;
                this._viewCtllist.push(this.tehuiCtl);
                this.zhekouCtl = new ZheKouShopCtl();
                this.zhekouCtl.type = exports.EXingFuKuangHuan.ZhekouJiShiShangDian;
                this.zhekouCtl.skin = this._ui.zhekoushangdian;
                this._viewCtllist.push(this.zhekouCtl);
                for (let i = 0; i < this._viewCtllist.length; i++) {
                    this._viewCtllist[i].onFirstInit();
                }
            }
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            let arr = E.LangMgr.getLang("XingFuTabs").split("|");
            let str = arr[index];
            skin.tf.text = str;
            skin.redimg.visible = false;
            if (sel) {
                skin.bg1.skin = "remote/huodong/anniu_2.png";
            }
            else {
                skin.bg1.skin = "remote/huodong/anniu_1.png";
            }
        }
        onSelectHandler(v) {
            let _type = this._mTabList[v];
            for (let i = 0; i < this._viewCtllist.length; i++) {
                let ctl = this._viewCtllist[i];
                if (ctl.type == _type) {
                    ctl.onInit();
                }
                else {
                    ctl.onExit();
                }
            }
        }
        getOpenlist() {
            this._mTabList = [];
            if (ActivityModel.Ins.isOpenByPackid(EActivityType.KaiXaingDaji)) {
                this._mTabList.push(exports.EXingFuKuangHuan.KaiXiangDaJi);
            }
            if (ActivityModel.Ins.isOpenByPackid(EActivityType.TeHuiLiBao)) {
                this._mTabList.push(exports.EXingFuKuangHuan.TeHuiLiBao);
            }
            if (ActivityModel.Ins.isOpenByPackid(EActivityType.Pack_Shop_Mart)) {
                this._mTabList.push(exports.EXingFuKuangHuan.ZhekouJiShiShangDian);
            }
            return this._mTabList;
        }
        onInit() {
            this._tabSkinCtl.getItemList(this.tabsCtl, this.getOpenlist(), 0);
        }
    }

    exports.XingFuKuangMainView = XingFuKuangMainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SkinItem extends ui.views.libao.ui_skinItemUI {
        constructor() {
            super();
            this.eff = [];
        }
        newEffect(index) {
            let con = new Laya.Sprite();
            let item = this['item' + (index + 1)];
            let eff = new SimpleEffect(con, "o/spine/eflibao/eflibao", item.width / 2, item.height / 2, 1, true);
            eff.play(0, true);
            item.addChild(con);
            return con;
        }
        effect(v, index) {
            if (v) {
                if (!this.eff[index]) {
                    let con = this.newEffect(index);
                    this.eff[index] = con;
                }
            }
            if (this.eff[index]) {
                this.eff[index].visible = v;
            }
        }
    }
    class SkinPackage {
        constructor() {
        }
        init(list1) {
            this.list1 = list1;
            this.list1.itemRender = SkinItem;
            this.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
        }
        onBtnClick() {
            let vo = ActivityModel.Ins.getVo(EActivityType.SkinLiBao);
            if (!vo)
                return;
            ActivityModel.Ins.lingQu(vo.uid, 0);
        }
        onRenderHandler(item, index) {
            let cfg = item.dataSource;
            const arr = cfg.f_items_client.split('|');
            let status = EActivityLingQu.YiLingQu;
            let _activityVo = ActivityModel.Ins.getVo(EActivityType.SkinLiBao);
            if (!_activityVo) ;
            else {
                const dataList = ActivityModel.Ins.getByUid(_activityVo.uid).dataList;
                let cell = dataList.find(o => o.id == cfg.f_id);
                if (cell) {
                    status = cell.param1;
                }
            }
            const rewarded = status === EActivityLingQu.YiLingQu;
            for (let i = 1; i <= arr.length; i++) {
                let a1 = arr[i - 1].split("-");
                let itemId = parseInt(a1[0]);
                let count = parseInt(a1[1]);
                let itemSkin = item[`item${i}`];
                if (rewarded) {
                    itemSkin.maskbg.visible = true;
                    itemSkin.gouImg.visible = true;
                }
                else {
                    itemSkin.maskbg.visible = false;
                    itemSkin.gouImg.visible = false;
                }
                let vo = new ItemVo();
                vo.cfgId = itemId;
                vo.count = count;
                ItemViewFactory.refreshSlot(itemSkin.slot, vo, status != EActivityLingQu.KeLingQu);
                if (vo.cfg.f_sub_type == ESub_type.ClientEffect) {
                    item.effect(true, i - 1);
                }
                else {
                    item.effect(false, i - 1);
                }
            }
            let id = index + 1;
            let desc = E.getLang(id == 1 ? "djtlq" : "djtlq2", StringUtil.NumToWord(id));
            let hasRed = false;
            if (status == EActivityLingQu.KeLingQu) {
                desc = E.getLang("clickcanlingqu");
                hasRed = true;
                item.on(Laya.Event.CLICK, this, this.onBtnClick);
            }
            else {
                if (status == EActivityLingQu.YiLingQu) {
                    desc = E.getLang("LingQu2");
                }
                item.off(Laya.Event.CLICK, this, this.onBtnClick);
            }
            item.lab.text = desc;
            if (hasRed) {
                DotManager.addDot(item);
            }
            else {
                DotManager.removeDot(item);
            }
        }
        dispose() {
        }
        refresh() {
            this.list1.array = t_Pack_FirstPay_Skin.Ins.List;
        }
    }

    exports.SkinItem = SkinItem;
    exports.SkinPackage = SkinPackage;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ItemShow extends ui.views.main.ui_slot_item_newplayerUI {
        constructor() {
            super(...arguments);
            this.effectCon = new Laya.Sprite();
        }
        set effect(v) {
            if (v) {
                if (!this.eff) {
                    let slot = this.effectCon;
                    this.effectCon.x = this.width / 2;
                    this.effectCon.y = this.height / 2;
                    let eff = new SimpleEffect(slot, "o/spine/eflibao/eflibao", 0, 0, 1, true);
                    eff.play(0, true);
                    this.eff = eff;
                    this.addChild(this.effectCon);
                }
            }
            this.effectCon.visible = v;
        }
    }
    class Xingrenlibao_view extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMainSnapshot = true;
            this.autoFree = true;
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.updateViewEvt);
            this.hotBtn.dispose();
            this.btnCtl.dispose();
            this._skinPackage.dispose();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_xingrenlibao_viewUI();
                this.bindClose(this._ui.close1);
                this.hotBtn = new RateBtn01Ctl(this._ui.btnhot, this, this.onRechargeEvt, ESkinRateBtn.Red);
                this.btnCtl = ButtonCtl.CreateBtn(this._ui.btn1, this, this.onRechargeEvt);
                this._ui.list1.itemRender = ItemShow;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemHandler);
                this._skinPackage = new SkinPackage();
                this._skinPackage.init(this._ui.list);
            }
        }
        onItemHandler(item, index) {
            let vo = item.dataSource;
            RewardItemGetViewCtl.refresh(item, vo, false);
            let st = "";
            item.effect = false;
            if (vo.type == ERewardShowVoType.Euqip) {
                let data = new EquipItemVo;
                data.equipVo = vo.data;
                st = data.getName();
                item.effect = true;
            }
            else if (vo.type == ERewardShowVoType.Item) {
                st = main.itemName(ItemProxy.Ins.getCfg(vo.data.id).f_name) + "x" + vo.data.count;
            }
            item.lab_name.visible = true;
            item.lab_name.text = st;
            if (this._isBuyed) {
                item.maskbg.visible = true;
            }
            else {
                item.maskbg.visible = false;
            }
        }
        get isBuyed() {
            if (this._activityVo && !this._activityVo.getNewPlayerCfgId()) {
                return true;
            }
            return false;
        }
        onRechargeEvt() {
            if (this._isBuyed) {
                E.ViewMgr.ShowMidError(E.getLang("isbuyed"));
                return;
            }
            ActivityModel.Ins.recharge(this.ppCfg.f_id);
        }
        onInit() {
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.updateViewEvt);
            this.updateViewEvt();
        }
        updateViewEvt() {
            this._activityVo = ActivityModel.Ins.getVo(EActivityType.t_Pack_NewPlayer);
            let _cfgId = 0;
            if (this._activityVo) {
                _cfgId = this._activityVo.getNewPlayerCfgId();
            }
            if (_cfgId == 0) {
                _cfgId = t_Pack_FirstPay_Equip.Ins.max_f_id;
            }
            this._isBuyed = this.isBuyed;
            let cfg = t_Pack_FirstPay_Equip.Ins.GetDataById(_cfgId);
            let ppCfg = t_Purchase_PriceProxy.Ins.GetDataById(cfg.f_PurchaseID);
            this.ppCfg = ppCfg;
            this._ui.img.skin = "o/pack_newplayer/" + cfg.f_AssetID;
            this._ui.lab_money.text = cfg.f_fakeprice + "元";
            let arr = RewardFactory.createBy_newPlayerCfg(cfg);
            this._ui.list1.array = arr;
            this._ui.btn1.visible = false;
            this._ui.old_money_con.visible = false;
            this._ui.btnhot.visible = false;
            let _curBtn;
            if (ppCfg.f_isVoucher == EShopPayType.Voucher) {
                this.hotBtn.cfg = ppCfg;
                this.hotBtn.visible = true;
                _curBtn = this.hotBtn.btnCtl;
            }
            else if (ppCfg.f_isVoucher == EShopPayType.Normal) {
                this._ui.old_money_con.visible = true;
                this._ui.tf1.text = StringUtil.moneyCv(ppCfg.f_price) + E.getLang("CNYhit");
                _curBtn = this.btnCtl;
                this.btnCtl.visible = true;
            }
            if (this._isBuyed) {
                _curBtn.grayMouseDisable = true;
            }
            else {
                _curBtn.grayMouseDisable = false;
            }
            this._skinPackage.refresh();
        }
    }

    exports.Xingrenlibao_view = Xingrenlibao_view;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function getPosSize$2(spr) {
        let wx = E.wx;
        let info = wx.getSystemInfoSync();
        let w = info.screenWidth;
        let h = info.screenHeight;
        let percent = w / Laya.stage.width;
        let rw = spr.width * percent;
        let rh = spr.height * percent;
        let pos = spr.parent.localToGlobal(new Laya.Point(spr.x, spr.y));
        let obj = {};
        obj.w = rw;
        obj.h = rh;
        obj.x = pos.x / Laya.stage.width * w;
        obj.y = pos.y / Laya.stage.height * h;
        return obj;
    }
    class WeiXinNormal2 extends MainBotIconCtl {
        setSkin(skin) {
            this._skin = skin;
            this._skin.redimg.visible = false;
            this._skin.bg.skin = `remote/main/main/pyq.png`;
            this._skin.tf.text = E.getLang("pyq01");
            this._skin.on(Laya.Event.CLICK, this, this.onPyq);
            this.onRedUpdate();
        }
        onPyq() {
            E.ViewMgr.Open(EViewType.GameGroup);
            MainModel.Ins.event(MainEvent.MailRed);
        }
        onVisible(v) {
            if (v) {
                MainModel.Ins.on(MainEvent.FuncSmallIconUpdate, this, this.onRedUpdate);
                this.onRedUpdate();
            }
            else {
                MainModel.Ins.off(MainEvent.FuncSmallIconUpdate, this, this.onRedUpdate);
            }
        }
        onRedUpdate() {
            this._skin.redimg.visible = MainModel.Ins.getHasRed(EFuncDef.GameCirle);
        }
    }
    class WeiXinNormalStyle2 extends MainBotIconCtl {
        setSkin(skin) {
            this._skin = skin;
            this.btnCtl = new WeiXinPyqCtl2();
            this.btnCtl.setSkin(this._skin);
        }
        onVisible(v) {
            this.btnCtl.onVisible(v);
        }
    }
    class WeiXinPyqCtl2 extends MainBotIconCtl {
        setSkin(skin) {
            this._skin = skin;
            this.wx = E.wx;
            if (E.Debug) {
                this._skin.graphics.drawRect(0, 0, this._skin.width, this._skin.height, null, 0xff0000);
            }
            if (!this.wx) {
                this._skin.on(Laya.Event.CLICK, this, this.onPyq);
            }
        }
        onVisible(v) {
            if (v) {
                this.onDisplay();
            }
            else {
                this.onUnDisplay();
            }
        }
        createWxBtn() {
            if (this.wx) {
                let o = getPosSize$2(this._skin);
                let openLink = System_RefreshTimeProxy.Ins.getVal(39);
                let btn = this.wx['createGameClubButton']({
                    hasRedDot: false,
                    image: "empty.png",
                    style: {
                        left: o.x,
                        top: o.y,
                        width: o.w,
                        height: o.h,
                    },
                    openlink: openLink
                });
                this.wxbtn = btn;
            }
        }
        onDisplay() {
            let wx = this.wx;
            if (wx) {
                if (!this.wxbtn) {
                    this.createWxBtn();
                }
                this.wxbtn.show();
            }
        }
        onUnDisplay() {
            if (this.wxbtn) {
                this.wxbtn.hide();
            }
        }
        onPyq(e) {
            if (!this.wx) {
                E.ViewMgr.ShowMidError("请切换到微信环境下");
            }
        }
    }

    exports.WeiXinNormal2 = WeiXinNormal2;
    exports.WeiXinNormalStyle2 = WeiXinNormalStyle2;
    exports.WeiXinPyqCtl2 = WeiXinPyqCtl2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    const YouXiQuanMenu = [
        { txt: 'yxq' },
        { txt: 'wjq' },
        { txt: 'gzh' },
        { txt: 'sph' },
    ];
    class YouXiQuanLiBaoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('gameclub.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_game_clubUI;
                this.bindClose(this._ui.btn_close);
                this._ui.list_menu.itemRender = ui.views.huodong.ui_game_club_menu_itemUI;
                this._ui.list_menu.renderHandler = new Laya.Handler(this, this.onItemHandler);
                this._ui.list_menu.array = YouXiQuanMenu;
                this._ui.list_join.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list_join.renderHandler = new Laya.Handler(this, this.onRewardItemHandler);
                this._ui.list_join.array = System_CommunityProxy.Ins.getCfgById(1).f_taskrewards.split('|');
                this._ui.list_like.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list_like.renderHandler = new Laya.Handler(this, this.onRewardItemHandler);
                this._ui.list_like.array = System_CommunityProxy.Ins.getCfgById(2).f_taskrewards.split('|');
                this._ui.list_publish.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list_publish.renderHandler = new Laya.Handler(this, this.onRewardItemHandler);
                this._ui.list_publish.array = System_CommunityProxy.Ins.getCfgById(3).f_taskrewards.split('|');
                this.btnList.push(ButtonCtl.Create(this._ui.btn_join, new Laya.Handler(this, this.onBtnClick, [1])), ButtonCtl.Create(this._ui.btn_like, new Laya.Handler(this, this.onBtnClick, [2])), ButtonCtl.Create(this._ui.btn_publish, new Laya.Handler(this, this.onBtnClick, [3])), ButtonCtl.Create(this._ui.auth_btn, new Laya.Handler(this, this.onAuthClick)));
                const btns = [this._ui.btn_join, this._ui.btn_like, this._ui.btn_publish];
                btns.forEach(o => {
                    o.disabled = true;
                });
                this.showPage(1);
                this._ui.auth_btn.visible = false;
            }
        }
        onAuthClick() {
            E.sdk.getAuth((res) => {
                var _a;
                if (!((_a = res === null || res === void 0 ? void 0 : res.authSetting) === null || _a === void 0 ? void 0 : _a['scope.gameClubData'])) ;
            });
        }
        onBtnClick(fid) {
            let req = new ClubReward_req();
            req.id = fid;
            req.type = 1;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onRewardItemHandler(item, fid) {
            let vo = new ItemVo();
            vo.cfgId = parseInt(item.dataSource.split("-")[0]);
            vo.count = parseInt(item.dataSource.split("-")[1]);
            ItemViewFactory.refreshSlot(item, vo);
            item.scaleX = item.scaleY = 0.8;
        }
        onItemHandler(item, index) {
            const data = YouXiQuanMenu[index];
            item.fx_tf.text = E.getLang(data.txt);
            item.on(Laya.Event.CLICK, this, this.onClick, [index]);
        }
        showPage(index) {
            for (let i = 1; i <= YouXiQuanMenu.length; i++) {
                this._ui[`group${i}`].visible = i === index ? true : false;
                const item = this._ui.list_menu.getCell(i - 1);
                if (i === index) {
                    item.fx_tf.color = '#9f540c';
                    item.btn_mf.skin = `remote/gameclub/yq_1.png`;
                }
                else {
                    item.fx_tf.color = '#ffffff';
                    item.btn_mf.skin = `remote/gameclub/yq_2.png`;
                }
            }
        }
        onClick(index) {
            this.showPage(index + 1);
        }
        setGameClubBtn() {
            var _a;
            if (ActivityModel.Ins.gameClubAuth) {
                this._ui.auth_btn.visible = false;
            }
            else {
                E.ViewMgr.ShowMidError("游戏圈数据未授权成功");
                this._ui.auth_btn.visible = true;
            }
            const arr = [
                { btn: this._ui.btn_join, fid: 1, key: 'join', txt: this._ui.join_tf, count: ActivityModel.Ins.gameClubData.join },
                { btn: this._ui.btn_like, fid: 2, key: 'like', txt: this._ui.like_tf, title: this._ui.title_like, count: ActivityModel.Ins.gameClubData.like },
                { btn: this._ui.btn_publish, fid: 3, key: 'publish', txt: this._ui.publish_tf, title: this._ui.title_publish, count: ActivityModel.Ins.gameClubData.publish },
            ];
            const revcDatas = (_a = MainModel.Ins.clubReward) === null || _a === void 0 ? void 0 : _a.dataList;
            arr.forEach(item => {
                const revcData = revcDatas.find(o => o.id === item.fid);
                const cfg = System_CommunityProxy.Ins.getCfgById(item.fid);
                if (!(revcDatas === null || revcDatas === void 0 ? void 0 : revcDatas.length) || revcData.state === 3) {
                    item.btn.disabled = true;
                }
                else if (revcData.state === 1) {
                    item.btn.disabled = true;
                    item.txt.text = '已领取';
                }
                else {
                    if (item.count >= cfg.f_taskvalue) {
                        item.btn.disabled = false;
                    }
                    else {
                        item.btn.disabled = true;
                    }
                    item.txt.text = '领取';
                }
                if (item.title) {
                    item.title.text = E.LangMgr.getLang(item.key, cfg.f_taskvalue, item.count, cfg.f_taskvalue);
                }
            });
        }
        onWxOnShow() {
            var _a, _b;
            if ((_b = (_a = MainModel.Ins.clubReward) === null || _a === void 0 ? void 0 : _a.dataList) === null || _b === void 0 ? void 0 : _b.find(o => o.state !== 1)) {
                MainModel.Ins.getGameClubData();
            }
        }
        onInit() {
            MainModel.Ins.on(MainEvent.ClubReward, this, this.setGameClubBtn);
            MainModel.Ins.on(MainEvent.GameClubUpdate, this, this.setGameClubBtn);
            MainModel.Ins.on(MainEvent.WxOnShow, this, this.onWxOnShow);
            MainModel.Ins.getGameClubData();
        }
        onShow() {
            super.onShow();
            if (this.pyq1) {
                this.pyq1.onVisible(true);
            }
            else {
                Laya.timer.once(100, this, () => {
                    this.createPyq();
                });
            }
        }
        onExit() {
            MainModel.Ins.off(MainEvent.ClubReward, this, this.setGameClubBtn);
            MainModel.Ins.off(MainEvent.GameClubUpdate, this, this.setGameClubBtn);
            MainModel.Ins.off(MainEvent.WxOnShow, this, this.onWxOnShow);
            if (this.pyq1) {
                this.pyq1.onVisible(false);
            }
        }
        createPyq() {
            if (System_RefreshTimeProxy.Ins.getNumberVal(40)) {
                let pyq1 = new WeiXinNormalStyle2();
                pyq1.setSkin(this._ui.btn);
                pyq1.onVisible(true);
                this.pyq1 = pyq1;
            }
            else {
                this._ui.btn.visible = false;
            }
        }
    }

    exports.YouXiQuanLiBaoView = YouXiQuanLiBaoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhongShenKaView extends ViewBase {
        constructor() {
            super(...arguments);
            this.activityType = EActivityType.t_Pack_MonthAndYear_Card;
            this.autoFree = true;
            this.mMask = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_zhongshenka_viewUI;
                const rewardConf = PackMonthCardProxy.Ins.getRewardConf(2);
                const purchaseId = rewardConf.purchaseId;
                this.purchaseId = purchaseId;
                const priceItem = t_Purchase_PriceProxy.Ins.getPriceItemById(purchaseId);
                const price = parseFloat((priceItem.price / 100).toFixed(2));
                this._purchaseCfg = t_Purchase_PriceProxy.Ins.GetDataById(purchaseId);
                this._ui.tf1.text = `${price}元解锁`;
                this._ctlFont = new FontClipCtl(IconUtils.numAtlasPrefix);
                this._ctlFont.mScale = 0.6;
                this._ctlFont.setValue(this._ui.numCon, rewardConf.itemVo.count + "");
                this.btnCtl = ButtonCtl.Create(this._ui.btn1, new Laya.Handler(this, this.onEnterHandler));
                this.lingquCtl = ButtonCtl.Create(this._ui.lingqu, new Laya.Handler(this, this.onLingqu));
                this.rateCtl = new RateBtn01Ctl(this._ui.ratebtn, this, this.onEnterHandler, ESkinRateBtn.Yellow);
                this.btnList.push(this.lingquCtl, this.btnCtl);
                this._ui.zhangguIcon.skin = IconUtils.getIconByCfgId(ECellType.BOX);
                if (t_Platform.Ins.isHideAdImg) {
                    this._ui.mcsy_img.visible = false;
                }
            }
        }
        onLingqu() {
            let req = new AllLifeCardGet_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        clearUI() {
            this._ui.chongzhicon.visible = false;
            this.lingquCtl.visible = false;
            this._ui.yilingqu.visible = false;
        }
        refreshView() {
            this.clearUI();
            let allLife = MainModel.Ins.allLife;
            this._curData = allLife;
            if (this._curData) {
                if (this._curData.val == ECardLingqu.Nothing) {
                    this._ui.chongzhicon.visible = true;
                    let btn = this.btnCtl;
                    if (this._purchaseCfg.f_isVoucher == EShopPayType.Voucher) {
                        btn = this.rateCtl.btnCtl;
                        this.rateCtl.cfg = this._purchaseCfg;
                    }
                    RateBtnUtils.Refresh(btn, this.btnCtl, this.rateCtl.btnCtl);
                }
                else if (this._curData.val == ECardLingqu.CanGet) {
                    this.lingquCtl.visible = true;
                }
                else if (this._curData.val == ECardLingqu.AlreadyGet) {
                    this._ui.yilingqu.visible = true;
                }
            }
        }
        onEnterHandler() {
            ActivityModel.Ins.recharge(this.purchaseId);
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onExit() {
            MainModel.Ins.off(MainEvent.AllLifeUpdate, this, this.refreshView);
            this.rateCtl.dispose();
        }
        onInit() {
            MainModel.Ins.on(MainEvent.AllLifeUpdate, this, this.refreshView);
            this.refreshView();
        }
    }

    exports.ZhongShenKaView = ZhongShenKaView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoqiChengZhangJiJin extends BaoxiangChengZhangLibaoView {
        constructor() {
            super(...arguments);
            this.activityType = EActivityType.ZuoqiChengZhang;
            this.cls = ZuoqiLibaoItemView;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_mount_chengzhangUI();
                this.skin = this._ui;
                this.initView();
            }
        }
        get cfgList() {
            return t_Fund_NewProxy.Ins.getCfgByType(1);
        }
        get canLingqu() {
            let _isLiqngqu = ActivityModel.Ins.bornHasLingqu(this.curCfgList, this._activityVo);
            return _isLiqngqu;
        }
        initTopView() {
            let ritem = ItemViewFactory.convertItem(this.topCfg.f_itemid);
            ItemViewFactory.refreshSlot(this._ui.slot1, ritem);
        }
    }

    exports.ZuoqiChengZhangJiJin = ZuoqiChengZhangJiJin;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcAttrViewCtl1 {
        constructor(skin) {
            this.skin = skin;
            this.skin.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            this._plusCtl = FontCtlFactory.createPlus();
            this._plusCtl1 = FontCtlFactory.createPlus();
            this.skin.list.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list.renderHandler = new Laya.Handler(this, this.onAttrHandler);
            this.skin.list1.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list1.renderHandler = new Laya.Handler(this, this.onAttrHandler1);
        }
        onAdd() {
        }
        onRemove() {
            if (this._myAvatar) {
                this._myAvatar.dispose();
                this._myAvatar = null;
            }
            if (this._otAvatar) {
                this._otAvatar.dispose();
                this._otAvatar = null;
            }
        }
        onAttrHandler(item) {
            let val = PlayerVoFactory.getValString(MainModel.Ins.mPlayinfo.moneyInfo, parseInt(item.dataSource));
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(parseInt(item.dataSource));
            item.valTf.text = val;
            let num = PlayerVoFactory.getVal(MainModel.Ins.mPlayinfo.moneyInfo, parseInt(item.dataSource));
            let num1 = PlayerVoFactory.getVal(this._data.moneyInfo, parseInt(item.dataSource));
            if (num > num1) {
                item.upimg.skin = `remote/common/base/green.png`;
            }
            else if (num < num1) {
                item.upimg.skin = `remote/common/base/red.png`;
            }
            else {
                item.upimg.skin = "";
            }
        }
        onAttrHandler1(item) {
            let val = PlayerVoFactory.getValString(this._data.moneyInfo, parseInt(item.dataSource));
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(parseInt(item.dataSource));
            item.valTf.text = val;
            item.upimg.visible = false;
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            if (!this._myAvatar) {
                this._myAvatar = AvatarFactory.getStandNormalMainAvatar(EAvatarDir.Right);
                this.skin.heroCon.addChild(this._myAvatar);
            }
            if (!this._otAvatar) {
                let ride = 0;
                if (value.ride.length) {
                    ride = value.ride[0].baseInfo.id;
                }
                let wingId = 0;
                if (value.wing) {
                    wingId = value.wing.wingId;
                }
                this._otAvatar = AvatarFactory.createAvatarByStSkin(value.PlayerSkin);
                this.skin.heroCon1.addChild(this._otAvatar);
            }
            let n = MainModel.Ins.mRoleData.getBattleValue();
            let v = StringUtil.val2Atlas(n);
            this._plusCtl.setValue(this.skin.plusCon, v);
            let num = PlayerVoFactory.getVal(value.moneyInfo, ECellType.BATTLE);
            let vv = StringUtil.val2Atlas(num);
            this._plusCtl1.setValue(this.skin.plusCon1, vv);
            this.skin.list.array = GameconfigProxy.Ins.getJjcList();
            this.skin.list1.array = GameconfigProxy.Ins.getJjcList();
        }
    }

    exports.JjcAttrViewCtl1 = JjcAttrViewCtl1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcAttrViewCtl2 {
        constructor(skin) {
            this.skin = skin;
            this.skin.list.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list.renderHandler = new Laya.Handler(this, this.onAttrHandler);
            this.skin.list1.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list1.renderHandler = new Laya.Handler(this, this.onAttrHandler1);
        }
        onAttrHandler(item) {
            let id = parseInt(item.dataSource);
            let val = PlayerVoFactory.getEquipVal(this._list, id);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            let val1 = PlayerVoFactory.getEquipVal(this._list1, id);
            if (val > val1) {
                item.upimg.skin = `remote/common/base/green.png`;
            }
            else if (val < val1) {
                item.upimg.skin = `remote/common/base/red.png`;
            }
            else {
                item.upimg.skin = "";
            }
        }
        onAttrHandler1(item) {
            let id = parseInt(item.dataSource);
            let val = PlayerVoFactory.getEquipVal(this._list1, id);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.upimg.visible = false;
        }
        setData(value) {
            let arr = value.equipItem;
            let array = [];
            for (let i = 0; i < arr.length; i++) {
                array = array.concat(arr[i].attrList);
            }
            this._list1 = PlayerVoFactory.mergeAttrSt(array);
            this.skin.list1.array = GameconfigProxy.Ins.getJjcList();
            arr = MainModel.Ins.mPlayinfo.equipItem;
            array = [];
            for (let i = 0; i < arr.length; i++) {
                array = array.concat(arr[i].attrList);
            }
            this._list = PlayerVoFactory.mergeAttrSt(array);
            this.skin.list.array = GameconfigProxy.Ins.getJjcList();
        }
    }

    exports.JjcAttrViewCtl2 = JjcAttrViewCtl2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcAttrViewCtl3 {
        constructor(skin) {
            this.skin = skin;
            this.skin.list.itemRender = ui.views.jjcAttr.ui_jjc_attrItem3UI;
            this.skin.list.renderHandler = new Laya.Handler(this, this.onAttrHandler);
            this.skin.list1.itemRender = ui.views.jjcAttr.ui_jjc_attrItem3UI;
            this.skin.list1.renderHandler = new Laya.Handler(this, this.onAttrHandler);
        }
        onAttrHandler(item) {
            item.txt_level.text = "lv." + item.dataSource.lv;
            let iCfg = ItemProxy.Ins.getCfg(item.dataSource.id);
            let hcfg = HuYouIconProxy.Ins.getCfgByIdAndAttr(item.dataSource.id, item.dataSource.attr.id);
            let val = attrConvert(item.dataSource.attr.id, item.dataSource.attr.value);
            item.txt_name.text = hcfg.f_SoulName + ` (${val})`;
            item.txt_name.color = QualityUtils.getQuaColor(iCfg.f_qua);
        }
        setData(value) {
            let array = [];
            let arr = HuYouModel.Ins.getBagList(HuYouModel.BagEnmu.sort_FY);
            for (let ele of arr) {
                let obj = {};
                obj.id = ele.id;
                obj.lv = ele.level;
                obj.attr = HuYouModel.Ins.getAttr(ele.uid);
                array.push(obj);
            }
            array.sort(this.onSort);
            this.skin.list.array = array;
            array = [];
            arr = value.bagInfo;
            for (let ele of arr) {
                let obj = {};
                obj.id = ele.id;
                obj.lv = ele.level;
                obj.attr = this.getAttr(ele.uid, value.bagInfoAttr);
                array.push(obj);
            }
            array.sort(this.onSort);
            this.skin.list1.array = array;
        }
        getAttr(uid, arr) {
            for (let ele in arr) {
                if (arr[ele]) {
                    if (uid.equals(arr[ele].uid)) {
                        return arr[ele].attrList[0];
                    }
                }
            }
        }
        onSort(a, b) {
            let aa = HuYouQualityProxy.Ins.getCfgByItemID(a.id);
            let bb = HuYouQualityProxy.Ins.getCfgByItemID(b.id);
            if (aa.f_QualityID > bb.f_QualityID) {
                return -1;
            }
            else if (aa.f_QualityID < bb.f_QualityID) {
                return 1;
            }
            else {
                return 0;
            }
        }
    }

    exports.JjcAttrViewCtl3 = JjcAttrViewCtl3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcAttrViewCtl4 {
        constructor(skin) {
            this.skin = skin;
            this.skin.list.itemRender = ui.views.jjcAttr.ui_jjc_attrItem4UI;
            this.skin.list.renderHandler = new Laya.Handler(this, this.onAttrHandler);
            this.skin.list1.itemRender = ui.views.jjcAttr.ui_jjc_attrItem4UI;
            this.skin.list1.renderHandler = new Laya.Handler(this, this.onAttrHandler);
        }
        onAttrHandler(item) {
            let arr = item.dataSource.split(":");
            let id = parseInt(arr[0]);
            let val = attrConvert(id, parseInt(arr[1]));
            item.txt.text = MainModel.Ins.getAttrNameIdByID(id) + ":" + val;
            if (arr[3]) {
                item.txt1.text = " (+" + attrConvert(id, parseInt(arr[3])) + ")";
                item.txt1.x = item.txt.x + item.txt.textField.width;
            }
            else {
                item.txt1.text = "";
            }
            item.lab_lv.text = "lv." + arr[2];
        }
        setData(value) {
            if (BaoShiModel.Ins.mationId) {
                let cfg = FaZhengListProxy.Ins.getCfgById(BaoShiModel.Ins.mationId);
                let iCfg = ItemProxy.Ins.getCfg(cfg.f_itemid);
                this.skin.lab_name.text = main.itemName(iCfg.f_name);
                this.skin.quality.skin = IconUtils.getQuaIcon(iCfg.f_qua);
                this.skin.icon.skin = IconUtils.getIconByCfgId(cfg.f_itemid);
                let arr = BaoShiModel.Ins.getAttrListByType1(BaoShiModel.Ins.getEquipList(), 1, BaoShiModel.Ins.mationId);
                arr = arr.concat(BaoShiModel.Ins.getAttrListByType1(BaoShiModel.Ins.getEquipList(), 2, BaoShiModel.Ins.mationId));
                arr = arr.concat(BaoShiModel.Ins.getAttrListByType1(BaoShiModel.Ins.getEquipList(), 3, BaoShiModel.Ins.mationId));
                arr = arr.concat(BaoShiModel.Ins.getAttrListByType1(BaoShiModel.Ins.getEquipList(), 4, BaoShiModel.Ins.mationId));
                arr.sort(this.onSort);
                this.skin.list.array = arr;
            }
            else {
                this.skin.lab_name.text = "";
                this.skin.quality.skin = "remote/common/base/jiangli1.png";
                this.skin.icon.skin = "";
                this.skin.list.array = [];
            }
            if (value.Gem.formationId) {
                let cfg = FaZhengListProxy.Ins.getCfgById(value.Gem.formationId);
                let iCfg = ItemProxy.Ins.getCfg(cfg.f_itemid);
                this.skin.lab_name1.text = main.itemName(iCfg.f_name);
                this.skin.quality1.skin = IconUtils.getQuaIcon(iCfg.f_qua);
                this.skin.icon1.skin = IconUtils.getIconByCfgId(cfg.f_itemid);
                let arr = BaoShiModel.Ins.getAttrListByType1(value.Gem.Gem, 1, value.Gem.formationId);
                arr = arr.concat(BaoShiModel.Ins.getAttrListByType1(value.Gem.Gem, 2, value.Gem.formationId));
                arr = arr.concat(BaoShiModel.Ins.getAttrListByType1(value.Gem.Gem, 3, value.Gem.formationId));
                arr = arr.concat(BaoShiModel.Ins.getAttrListByType1(value.Gem.Gem, 4, value.Gem.formationId));
                arr.sort(this.onSort);
                this.skin.list1.array = arr;
            }
            else {
                this.skin.lab_name1.text = "";
                this.skin.quality1.skin = "remote/common/base/jiangli1.png";
                this.skin.icon1.skin = "";
                this.skin.list1.array = [];
            }
        }
        onSort(a, b) {
            let aa = parseInt(a.split(":")[0]);
            let bb = parseInt(b.split(":")[0]);
            if (aa > bb) {
                return 1;
            }
            else if (aa < bb) {
                return -1;
            }
            else {
                return 0;
            }
        }
    }

    exports.JjcAttrViewCtl4 = JjcAttrViewCtl4;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcAttrViewCtl5 {
        constructor(skin) {
            this.defaultColor = "#F9F0BB";
            this.skin = skin;
            this.skin.list1.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list1.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
            this.skin.list3.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list3.renderHandler = new Laya.Handler(this, this.onSelfMountAttr);
            this.skin.list4.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list4.renderHandler = new Laya.Handler(this, this.onAttrItemHandler1);
            this.skin.list6.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list6.renderHandler = new Laya.Handler(this, this.onOtherMountAttr);
            this.skin.list2.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list2.renderHandler = new Laya.Handler(this, this.onAttrItemHandler2);
            this.skin.list5.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list5.renderHandler = new Laya.Handler(this, this.onAttrItemHandler2);
        }
        onOtherMountAttr(item) {
            this.refreshAttr(item);
            item.upimg.visible = false;
            let id = parseInt(item.dataSource.id);
            let value = this.value;
            if (value.ride && value.ride.length > 0 && value.ride[0].attr && value.ride[0].attr.length > 0) {
                let equipVo = value.ride[0].attr[0];
                let qua = ZuoQiModel.Ins.getAttrQua(equipVo, id);
                this.updataCellView(item, qua);
            }
        }
        onSelfMountAttr(item) {
            this.refreshAttr(item);
            item.upimg.visible = false;
            let id = parseInt(item.dataSource.id);
            let qua = ZuoQiModel.Ins.rideVo.getAttrQua(id);
            this.updataCellView(item, qua);
        }
        updataCellView(item, qua) {
            let mColor = EquipmentQualityProxy.Ins.getByQuaDefault(this.defaultColor, qua);
            item.tf1.color = item.valTf.color = mColor;
        }
        refreshAttr(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            let val1 = PlayerVoFactory.getEquipVal(this._list, id);
            if (val > val1) {
                item.upimg.skin = `remote/common/base/green.png`;
            }
            else if (val < val1) {
                item.upimg.skin = `remote/common/base/red.png`;
            }
            else {
                item.upimg.skin = "";
            }
            item.tf1.color = item.valTf.color = this.defaultColor;
        }
        onAttrItemHandler(item) {
            this.refreshAttr(item);
        }
        onAttrItemHandler1(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.upimg.visible = false;
        }
        onAttrItemHandler2(item) {
            let attrVo = item.dataSource;
            let id = attrVo.id;
            let val = attrVo.value;
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.upimg.visible = false;
            item.tf1.color = item.valTf.color = ZuoQiAttrCtl.getColor(attrVo.f_UnlockVal);
        }
        setData(value) {
            this.value = value;
            this.skin.slot2.sel.visible = this.skin.slot2.ck.visible = this.skin.slot2.typename.visible = false;
            if (value.ride.length && value.ride[0].baseInfo) {
                this.skin.slot2.visible = true;
                this.skin.slot2.icon.skin = IconUtils.getHorseIcon(value.ride[0].baseInfo.id);
                this.skin.slot2.tf1.text = IconUtils.str2Lv(value.ride[0].baseInfo.lv);
                let cfg = Mount_ListProxy.Ins.getCfg(value.ride[0].baseInfo.id);
                this.skin.slot2.qua.skin = IconUtils.getQuaIcon(cfg.f_Quality);
                f_setStar(this.skin.slot2, value.ride[0].baseInfo.star);
                let ecfg = EquipmentQualityProxy.Ins.GetDataById(cfg.f_Quality);
                let color = QualityUtils.getQuaColor(cfg.f_Quality);
                this.skin.nameTf1.text = cfg.f_MountName;
                this.skin.quaTf1.text = ecfg.f_EquipmentLevel;
                this.skin.nameTf1.color = color;
                this.skin.quaTf1.color = color;
                let attr = value.ride[0].attr[0].attrList || [];
                this._list = this.getBase(attr);
                this.skin.list4.array = this._list;
                this.skin.list6.array = this.getOther(attr);
                let _rideVo = value.ride[0];
                this.skin.list5.array = Mount_ListProxy.Ins.getRideSpeclAttr(_rideVo.baseInfo.id, _rideVo.baseInfo.star);
            }
            else {
                this.skin.slot2.visible = false;
                this.skin.nameTf1.text = "";
                this.skin.quaTf1.text = "";
                this.skin.list4.array = [];
                this.skin.list5.array = [];
                this.skin.list6.array = [];
            }
            this.skin.slot1.sel.visible = this.skin.slot1.ck.visible = this.skin.slot1.typename.visible = false;
            if (ZuoQiModel.Ins.rideVo && ZuoQiModel.Ins.rideVo.equipVo) {
                this.skin.slot1.visible = true;
                this.skin.slot1.icon.skin = IconUtils.getHorseIcon(ZuoQiModel.Ins.rideVo.rideId);
                this.skin.slot1.tf1.text = IconUtils.str2Lv(ZuoQiModel.Ins.rideVo.lv);
                this.skin.slot1.qua.skin = IconUtils.getQuaIcon(ZuoQiModel.Ins.rideVo.quality);
                let zuoqiVo = ZuoQiModel.Ins.rideVo;
                f_setStar(this.skin.slot1, zuoqiVo.starLv);
                let cfg = Mount_ListProxy.Ins.getCfg(ZuoQiModel.Ins.rideVo.rideId);
                let ecfg = EquipmentQualityProxy.Ins.GetDataById(cfg.f_Quality);
                let color = QualityUtils.getQuaColor(cfg.f_Quality);
                this.skin.nameTf.text = cfg.f_MountName;
                this.skin.quaTf.text = ecfg.f_EquipmentLevel;
                this.skin.nameTf.color = color;
                this.skin.quaTf.color = color;
                let attr = ZuoQiModel.Ins.rideVo.equipVo.attrList || [];
                this.skin.list1.array = this.getBase(attr);
                this.skin.list3.array = this.getOther(attr);
                this.skin.list2.array = Mount_ListProxy.Ins.getRideSpeclAttr(zuoqiVo.rideId, zuoqiVo.starLv);
            }
            else {
                this.skin.slot1.visible = false;
                this.skin.nameTf.text = "";
                this.skin.quaTf.text = "";
                this.skin.list1.array = [];
                this.skin.list2.array = [];
                this.skin.list3.array = [];
            }
        }
        getBase(l) {
            let rs = [];
            let baseAttrList = Mount_ValueProxy.Ins.getAttrList();
            for (let i = 0; i < l.length; i++) {
                if (baseAttrList.indexOf(l[i].id) != -1) {
                    rs.push(l[i]);
                }
            }
            return rs;
        }
        getOther(l) {
            let rs = [];
            let baseAttrList = Mount_ValueProxy.Ins.getAttrList();
            for (let i = 0; i < l.length; i++) {
                if (baseAttrList.indexOf(l[i].id) == -1) {
                    rs.push(l[i]);
                }
            }
            return rs;
        }
    }

    exports.JjcAttrViewCtl5 = JjcAttrViewCtl5;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcAttrViewCtl6 {
        constructor(skin) {
            this.skin = skin;
            this.skin.list.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
            this.skin.list1.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list1.renderHandler = new Laya.Handler(this, this.onAttrItemHandler1);
        }
        onAttrItemHandler(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            let val1 = PlayerVoFactory.getEquipVal(this._list, id);
            if (val > val1) {
                item.upimg.skin = `remote/common/base/green.png`;
            }
            else if (val < val1) {
                item.upimg.skin = `remote/common/base/red.png`;
            }
            else {
                item.upimg.skin = "";
            }
        }
        onAttrItemHandler1(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.upimg.visible = false;
        }
        setData(value) {
            if (value.wing && value.wing.wingId) {
                this.skin.lab_name1.text = WingIdProxy.Ins.getWingName(value.wing.wingId);
                this.skin.wingLevelText1.text = `${value.wing.stage}阶${value.wing.level}级`;
                this.skin.wingbox1.visible = true;
                this.skin.wingbox1.bg1.visible = this.skin.wingbox1.bg2.visible = this.skin.wingbox1.icon.visible = false;
                this.skin.wingbox1.wingLeftIcon.skin = ItemViewFactory.getWingIcon(value.wing.wingId);
                this.skin.wingbox1.wingRightIcon.skin = ItemViewFactory.getWingIcon(value.wing.wingId);
                this._list = WingIdProxy.Ins.getWingAttrList(value.wing.wingId, value.wing.level, value.wing.stage, value.wing.treasureStage);
                this.skin.list1.array = this._list;
            }
            else {
                this.skin.lab_name1.text = "";
                this.skin.wingLevelText1.text = "";
                this.skin.wingbox1.visible = false;
                this.skin.list1.array = [];
            }
            if (WingModel.Ins.wingId) {
                this.skin.lab_name.text = WingModel.Ins.wingName;
                this.skin.wingLevelText.text = `${WingModel.Ins.stage}阶${WingModel.Ins.level}级`;
                this.skin.wingbox.visible = true;
                this.skin.wingbox.bg1.visible = this.skin.wingbox.bg2.visible = this.skin.wingbox.icon.visible = false;
                this.skin.wingbox.wingLeftIcon.skin = ItemViewFactory.getWingIcon(WingModel.Ins.wingId);
                this.skin.wingbox.wingRightIcon.skin = ItemViewFactory.getWingIcon(WingModel.Ins.wingId);
                const attrList = WingIdProxy.Ins.getWingAttrList(WingModel.Ins.wingId, WingModel.Ins.level, WingModel.Ins.stage, WingModel.Ins.treasureStage);
                this.skin.list.array = attrList;
            }
            else {
                this.skin.lab_name.text = "";
                this.skin.wingLevelText.text = "";
                this.skin.wingbox.visible = false;
                this.skin.list.array = [];
            }
        }
    }

    exports.JjcAttrViewCtl6 = JjcAttrViewCtl6;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcAttrViewCtl7 {
        constructor(skin) {
            this._attrID = [10002, 10003, 10004, 10005];
            this.skin = skin;
            this.skin.list1.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list1.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
            this.skin.list2.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list2.renderHandler = new Laya.Handler(this, this.onAttrItemHandler1);
            this.skin.list3.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list3.renderHandler = new Laya.Handler(this, this.onAttrItemHandler1);
            this.skin.list4.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list4.renderHandler = new Laya.Handler(this, this.onAttrItemHandler1);
        }
        onAttrItemHandler(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            let val1 = PlayerVoFactory.getEquipVal(this._list, id);
            if (val > val1) {
                item.upimg.skin = `remote/common/base/green.png`;
            }
            else if (val < val1) {
                item.upimg.skin = `remote/common/base/red.png`;
            }
            else {
                item.upimg.skin = "";
            }
        }
        onAttrItemHandler1(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.upimg.visible = false;
        }
        setData(value) {
            this.setOtherInfo(value.Spirit);
            this.setMyInfo();
        }
        setOtherInfo(data) {
            for (let i = 0; i < 4; i++) {
                let posCfg = t_Spirit_Position.Ins.getByPos(i + 1);
                let vo = data.spiritInfo.find(ele => ele.pos == i + 1);
                if (vo) {
                    this.skin["item_" + i].tf1.visible = false;
                    this.skin["item_" + i].icon.visible = true;
                    f_headViewUpdate(this.skin["item_" + i].icon, t_Spirit_Attribute_Fixed.Ins.getCfgBySpiritID(vo.spiritId).f_SpiritIconID);
                    this.skin["item_" + i].lvTf.visible = true;
                    if (vo.level > 0) {
                        this.skin["item_" + i].lvTf.text = "+" + vo.level.toString();
                    }
                    else {
                        this.skin["item_" + i].lvTf.text = "";
                    }
                    let cfg = t_Spirit_Attribute_Fixed.Ins.GetDataById(vo.spiritId);
                    this.skin["item_" + i].bgicon.skin = SoulModel.Ins.getIcon(cfg.f_SpiritQuality);
                }
                else {
                    this.skin["item_" + i].tf1.visible = true;
                    this.skin["item_" + i].tf1.text = posCfg.f_PositionName;
                    this.skin["item_" + i].icon.visible = false;
                    this.skin["item_" + i].lvTf.visible = false;
                    this.skin["item_" + i].bgicon.skin = SoulModel.Ins.getIcon(0);
                }
                this.skin["item_" + i].bgicon.rotation = SoulModel.Ins.getRot(i + 1);
            }
            let arr = [];
            let arr1 = [];
            for (let i = 0; i < data.attrList.length; i++) {
                if (this._attrID.indexOf(data.attrList[i].id) != -1) {
                    arr.push(data.attrList[i]);
                }
                else {
                    arr1.push(data.attrList[i]);
                }
            }
            this._list = arr;
            this.skin.list3.array = arr;
            this.skin.list4.array = arr1;
        }
        setMyInfo() {
            this.topItemlist = [];
            for (let i = 0; i < 4; i++) {
                this.topItemlist.push(new SoulTopItemCtl(this.skin['item' + i], i + 1, false));
            }
            for (let i = 0; i < this.topItemlist.length; i++) {
                this.topItemlist[i].refreshView(false);
            }
            this.skin.list1.array = SoulModel.Ins.getAllBaseAttr();
            this.skin.list2.array = SoulModel.Ins.getAllRandomAttr();
        }
    }

    exports.JjcAttrViewCtl7 = JjcAttrViewCtl7;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcAttrViewCtl8 {
        constructor(skin) {
            this.skin = skin;
            this._starMyCtl = new FuJiangStarCtl(this.skin.item.star);
            this.skin.list_attr.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list_attr.renderHandler = new Laya.Handler(this, this.onRenderHandller1);
            this.skin.list_xm.itemRender = LingChongXMItem;
            this.skin.list_xm.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            this._starOtherCtl = new FuJiangStarCtl(this.skin.item1.star);
            this.skin.list_attr1.itemRender = ui.views.jjcAttr.ui_jjc_attrItem1UI;
            this.skin.list_attr1.renderHandler = new Laya.Handler(this, this.onRenderHandller2);
            this.skin.list_xm1.itemRender = LingChongXMItem;
            this.skin.list_xm1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
        }
        onRenderHandler(item, index) {
            item.setData(item.dataSource, index);
        }
        onRenderHandller1(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            let val1 = PlayerVoFactory.getEquipVal(this._list, id);
            if (val > val1) {
                item.upimg.skin = `remote/common/base/green.png`;
            }
            else if (val < val1) {
                item.upimg.skin = `remote/common/base/red.png`;
            }
            else {
                item.upimg.skin = "";
            }
        }
        onRenderHandller2(item) {
            let id = parseInt(item.dataSource.id);
            let val = parseInt(item.dataSource.value);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
            item.upimg.visible = false;
        }
        setData(value) {
            let myData = LingChongModel.Ins.getSZPetData();
            if (myData) {
                this.setMyData(myData);
            }
            else {
                this.skin.item.visible = false;
                this.skin.lab_name.text = "";
                this.skin.list_attr.array = [];
                this.skin.list_xm.array = [];
                this.skin.item_jn.visible = false;
                this.skin.panel.visible = false;
            }
            if (value.petInfo.length) {
                this.setOtherData(value.petInfo[0]);
            }
            else {
                this.skin.item1.visible = false;
                this.skin.lab_name1.text = "";
                this.skin.list_attr1.array = [];
                this.skin.list_xm1.array = [];
                this.skin.item_jn1.visible = false;
                this.skin.panel1.visible = false;
            }
        }
        setMyData(value) {
            this.skin.item.visible = true;
            this.skin.item_jn.visible = true;
            this.skin.panel.visible = true;
            this.skin.item.jiao.visible = false;
            let cfg = PetListProxy.Ins.getCfgById(value.petId);
            this.skin.item.quality.skin = IconUtils.getQuaIcon(cfg.f_petquality);
            this.skin.item.icon.skin = PetListProxy.Ins.getPetIconById(cfg.f_petid);
            this.skin.item.lab_lv.text = "Lv." + value.petLevel;
            this.skin.item.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            this.skin.item.tab.img2.visible = false;
            if (value.petStar) {
                this.skin.item.sp.visible = true;
                this.skin.item.star.visible = true;
                this._starMyCtl.setStar(value.petStar);
            }
            else {
                this.skin.item.sp.visible = false;
                this.skin.item.star.visible = false;
            }
            this.skin.lab_name.text = cfg.f_petname;
            this.skin.list_attr.array = LingChongModel.Ins.getAttrArr(value.petId, value.petLevel, value.petStar);
            let array = [];
            for (let i = 0; i < value.petTalents.length; i++) {
                array.push({ data: value.petTalents[i] });
            }
            this.skin.list_xm.array = array;
            let sCfg = PetSkillClientProxy.Ins.getCfgById(cfg.f_petskillid);
            this.skin.item_jn.lab.text = sCfg.f_skillname;
            let lv = LingChongModel.Ins.getSkillLv(value.petStar);
            this.skin.item_jn.lab_lv.text = "Lv." + lv;
            this.skin.lab_jn.text = LingChongModel.Ins.getSkillDec(cfg.f_petskillid, lv);
        }
        setOtherData(value) {
            this.skin.item1.visible = true;
            this.skin.item_jn1.visible = true;
            this.skin.panel1.visible = true;
            this.skin.item1.jiao.visible = false;
            let cfg = PetListProxy.Ins.getCfgById(value.petId);
            this.skin.item1.quality.skin = IconUtils.getQuaIcon(cfg.f_petquality);
            this.skin.item1.icon.skin = PetListProxy.Ins.getPetIconById(cfg.f_petid);
            this.skin.item1.lab_lv.text = "Lv." + value.petLevel;
            this.skin.item1.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            this.skin.item1.tab.img2.visible = false;
            if (value.petStar) {
                this.skin.item1.sp.visible = true;
                this.skin.item1.star.visible = true;
                this._starOtherCtl.setStar(value.petStar);
            }
            else {
                this.skin.item1.sp.visible = false;
                this.skin.item1.star.visible = false;
            }
            this.skin.lab_name1.text = cfg.f_petname;
            let list = LingChongModel.Ins.getAttrArr(value.petId, value.petLevel, value.petStar);
            this._list = [];
            for (let i = 0; i < list.length; i++) {
                let e = new stEquipAttr;
                e.id = parseInt(list[i].split(":")[0]);
                e.value = parseInt(list[i].split(":")[1]);
                this._list.push(e);
            }
            this.skin.list_attr1.array = this._list;
            let array = [];
            for (let i = 0; i < value.petTalents.length; i++) {
                array.push({ data: value.petTalents[i] });
            }
            this.skin.list_xm1.array = array;
            let sCfg = PetSkillClientProxy.Ins.getCfgById(cfg.f_petskillid);
            this.skin.item_jn1.lab.text = sCfg.f_skillname;
            let lv = LingChongModel.Ins.getSkillLv(value.petStar);
            this.skin.item_jn1.lab_lv.text = "Lv." + lv;
            this.skin.lab_jn1.text = LingChongModel.Ins.getSkillDec(cfg.f_petskillid, lv);
        }
    }

    exports.JjcAttrViewCtl8 = JjcAttrViewCtl8;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcAttrDBView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('jjcAttr.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jjcAttr.ui_jjc_attrViewUI;
                this.bindClose(this._ui.btn_close);
                this._jjcAttrViewCtl1 = new JjcAttrViewCtl1(this._ui.attrView1);
                this._jjcAttrViewCtl2 = new JjcAttrViewCtl2(this._ui.attrView2);
                this._jjcAttrViewCtl3 = new JjcAttrViewCtl3(this._ui.attrView3);
                this._jjcAttrViewCtl4 = new JjcAttrViewCtl4(this._ui.attrView4);
                this._jjcAttrViewCtl5 = new JjcAttrViewCtl5(this._ui.attrView5);
                this._jjcAttrViewCtl6 = new JjcAttrViewCtl6(this._ui.attrView6);
                this._jjcAttrViewCtl7 = new JjcAttrViewCtl7(this._ui.attrView7);
                this._jjcAttrViewCtl8 = new JjcAttrViewCtl8(this._ui.attrView8);
                const tabsSkin = [this._ui.tab1, this._ui.tab2, this._ui.tab3, this._ui.tab4,
                    this._ui.tab5, this._ui.tab6, this._ui.tab7, this._ui.tab8];
                this.tabList = ["基础", "装备", "福源", "宝石", "坐骑", "翅膀", "战魂", "灵宠"];
                this.iconList = ["hz", "jjc_zb", "fy", "bs", "zq", "cb", "zh", "lc"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
            }
        }
        onInit() {
            this._jjcAttrViewCtl1.setData(this.Data);
            this._jjcAttrViewCtl2.setData(this.Data);
            this._jjcAttrViewCtl3.setData(this.Data);
            this._jjcAttrViewCtl4.setData(this.Data);
            this._jjcAttrViewCtl5.setData(this.Data);
            this._jjcAttrViewCtl6.setData(this.Data);
            this._jjcAttrViewCtl7.setData(this.Data);
            this._jjcAttrViewCtl8.setData(this.Data);
            this.tabsCtl.selectIndex = 0;
        }
        onExit() {
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.tf1.text = this.tabList[index];
            skin.icon.skin = "remote/jjcAttr/" + this.iconList[index] + ".png";
            if (sel) {
                skin.img.visible = true;
            }
            else {
                skin.img.visible = false;
            }
        }
        onTabSelectHandler(v) {
            this._ui.attrView1.visible = this._ui.attrView2.visible = this._ui.attrView3.visible =
                this._ui.attrView4.visible = this._ui.attrView5.visible = this._ui.attrView6.visible =
                    this._ui.attrView7.visible = this._ui.attrView8.visible = false;
            this._ui["attrView" + (v + 1)].visible = true;
        }
    }

    exports.JjcAttrDBView = JjcAttrDBView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcBSTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jjc.ui_jjc_bsTipUI;
                this.bindClose(this._ui.close1);
                this._baoshiAttrCtl = new BaoShiAttrCtl(this._ui.attr);
            }
        }
        onInit() {
            let data = this.Data;
            let cfg = FaZhengListProxy.Ins.getCfgById(data.formationId);
            let iCfg = ItemProxy.Ins.getCfg(cfg.f_itemid);
            this._ui.lab_name.text = main.itemName(iCfg.f_name);
            this._ui.quality.skin = IconUtils.getQuaIcon(iCfg.f_qua);
            this._ui.icon.skin = IconUtils.getIconByCfgId(cfg.f_itemid);
            this._ui.lab_fzsm.text = "法阵加成：" + BaoShiModel.Ins.getFZST(data.formationId);
            this._baoshiAttrCtl.setData(data.Gem, data.formationId);
        }
        onExit() {
        }
    }

    exports.JjcBSTip = JjcBSTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcFightItemView extends ui.views.jjc.ui_jjc_fight_itemUI {
        constructor() {
            super();
            this._headCtl = new JjcHeadCtl(this.head, this.plusCon, this.nametf, this.rankImg, this.mingcitf, this.img_title);
            this.fightCtl = new ButtonCtl(this.tiaozhanbtn, new Laya.Handler(this, this.onFightHandler));
        }
        onFightHandler() {
            if (this.model.fightTotalCnt <= 0) {
                let cfg = Arena_BuyTicket.Ins.getCfgByTime(this.model.hasAlreadyBuyCnt + 1);
                MainModel.Ins.queryMsg(E.LangMgr.getLang("JjcBuy"), ECellType.GOLD, parseInt(cfg.f_Price.split("-")[1]), EQuickMsg.JJC, new Laya.Handler(this, this.buyEndHandler));
                return;
            }
            this.fight();
        }
        buyEndHandler(selected) {
            this.model.buyFightTime(this._data.id);
        }
        fight() {
            this.model.fight(this._data.id);
        }
        setData(data, _model) {
            this.model = _model;
            this.shuye.visible = false;
            this.yb1.visible = false;
            this._data = data;
            this._headCtl.updateView(data);
            ItemViewFactory.setJJC_score(this, data, _model.getType());
            let v0 = this.reward[0];
            if (v0) {
                this.yb1.visible = true;
                let itemId = v0.id;
                this.yb1.skin = IconUtils.getIconByCfgId(itemId);
                this.tf5.text = StringUtil.val2m(v0.count);
            }
            else {
                this.tf5.text = "";
            }
            let v1 = this.reward[1];
            if (v1) {
                this.shuye.visible = true;
                this.shuye.skin = IconUtils.getIcon(v1.id);
                this.shuyetf.text = StringUtil.val2m(v1.count);
            }
            else {
                this.shuyetf.text = "";
            }
            this.refreshReward();
        }
        get reward() {
            return this.model.preRewardList;
        }
        refreshReward() {
            let _rewardList = this.reward;
            let tflist = [this.tf5, this.shuyetf];
            for (let i = 0; i < tflist.length; i++) {
                let tf = tflist[i];
                let vo = _rewardList[i];
                if (vo) {
                    tf.text = vo.count.toString();
                }
                else {
                    tf.text = "";
                }
            }
        }
    }

    exports.JjcFightItemView = JjcFightItemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcFightView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.refreshBtnTime = 0;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jjc.ui_jjc_fightUI();
                this._ui.refreshTimeCnt.visible = false;
                this.btnList.push(ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.Close)), ButtonCtl.Create(this._ui.refreshBtn, new Laya.Handler(this, this.onRefreshHandler)));
                this.buyCtl = ButtonCtl.Create(this._ui.buyBtn, new Laya.Handler(this, this.onBuyHandler));
                this._ui.list1.itemRender = JjcFightItemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onJjcFightItemHandler);
                this._ui.list1.vScrollBarSkin = " ";
                this._ui.list1.array = [];
                this._headCrl = new JjcHeadCtl(this._ui.head, this._ui.plus, this._ui.nametf, this._ui.rankImg, this._ui.mingcitf, this._ui.img_title);
                this.timeCtl = new TimeCtlV2(this._ui.tf6, "{0}", 0, false);
            }
        }
        setTimeTf() {
            this._ui.tf6.text = "刷新";
        }
        onJjcFightItemHandler(item, index) {
            item.setData(item.dataSource, this.model);
        }
        onBuyHandler() {
            let price = this.model.realPrice;
            MainModel.Ins.queryMsg(E.LangMgr.getLang("JjcBuy"), ECellType.GOLD, parseInt(price.split("-")[1]), EQuickMsg.JJC, new Laya.Handler(this, this.onBuyEndHandler));
        }
        onBuyEndHandler(selected) {
            this.model.buyFightTime(0);
        }
        onRefreshHandler() {
            const priceItem = this.model.getRefreshPrice(this.model.surplusRefreshCount);
            if (!MainModel.Ins.isItemEnoughSt(`${priceItem.itemId}-${priceItem.count}`, true)) {
                return;
            }
            if (!this.timeCtl.isPlayingEnd) {
                E.ViewMgr.ShowMidError(E.LangMgr.getLang("CdNotEnough"));
                return;
            }
            this.refreshBtnTime = TimeUtil.serverTime + this.model.curCfg.f_RefreshCD;
            this.timeCtl.on(Laya.Event.COMPLETE, this, this.onTimeCtlEnd);
            this.timeCtl.start(this.model.curCfg.f_RefreshCD);
            this.model.refreshPlayerList();
        }
        onTimeCtlEnd() {
            this.setTimeTf();
        }
        onExit() {
            this.model.off(JjcEvent.MoneyVal, this, this.updateView);
            this.model.off(JjcEvent.SurplusRefreshCount, this, this.updateView);
            this.model.off(JjcEvent.BuyFightCntUpdate, this, this.updateFightTime);
            this.model.off(JjcEvent.FightPlayerList, this, this.onFightRefresh);
            this.model.off(JjcEvent.TodayRankValUpdate, this, this.updateView);
            if (!this.timeCtl.isPlayingEnd) {
                this.model.tickEndTime = TimeUtil.serverTime + this.timeCtl.subTime;
            }
        }
        onAddLoadRes() {
        }
        updateView() {
            this.updateFightTime();
            const priceItem = this.model.getRefreshPrice(this.model.surplusRefreshCount);
            this._ui.refreshtf.text = priceItem.count.toString();
            this._ui.ybtf.text = this.model.dayMoneyVal + "/" + this.model.f_MoneyMaximum;
            let owner = this.model.ownerPlayer;
            this._headCrl.updateView(owner);
            ItemViewFactory.setJJC_score(this._ui, owner, this.model.getType());
        }
        updateFightTime() {
            if (this.model.getType() == EJjcType.JJC) {
                const count = MainModel.Ins.mRoleData.getVal(ECellType.JjcTicket);
                const conf = BoxExtraItemProxy.Ins.getConfByFid(1);
                this._ui.tf2.text = E.LangMgr.getLang("FightSubCnt2") + ":" + count + "/" + conf.f_Maxhold;
                this.buyCtl.visible = true;
            }
            else {
                this._ui.tf2.text = E.LangMgr.getLang("FightSubCnt") + ":" + this.model.fightTotalCnt + "/" + this.model.refreshTotalCnt;
                if (this.model.fightTotalCnt >= this.model.refreshTotalCnt) {
                    this.buyCtl.visible = false;
                }
                else {
                    this.buyCtl.visible = true;
                }
            }
        }
        onInit() {
            this.model = this.Data;
            let itemId = this.model.curCfg.f_itemid;
            this._ui.tf10.text = E.getLang("jjc_desc01", main.itemName(ItemProxy.Ins.getCfg(itemId).f_name));
            this._ui.ybicon.skin = IconUtils.getIconByCfgId(itemId);
            let index = this.model.getType();
            this._ui.title1.text = E.getLang("jjc_desc02").split("|")[index];
            this.jjcLog = new JjcLogBtnCtl(this._ui.fightbtn, this.model);
            this.model.on(JjcEvent.MoneyVal, this, this.updateView);
            this.model.on(JjcEvent.BuyFightCntUpdate, this, this.updateFightTime);
            this.model.on(JjcEvent.SurplusRefreshCount, this, this.updateView);
            this.model.on(JjcEvent.FightPlayerList, this, this.onFightRefresh);
            this.model.on(JjcEvent.TodayRankValUpdate, this, this.updateView);
            if (this.model.tickEndTime > TimeUtil.serverTime) {
                this.timeCtl.on(Laya.Event.COMPLETE, this, this.onTimeCtlEnd);
                this.timeCtl.start(this.model.tickEndTime - TimeUtil.serverTime);
            }
            else {
                this.timeCtl.stop();
                this.setTimeTf();
            }
            this.model.reqRefreshList();
            this.updateView();
        }
        onFightRefresh() {
            this._ui.list1.array = this.model.fightPlayers;
            this._ui.list1.scrollTo(0);
        }
    }

    exports.JjcFightView = JjcFightView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcHYTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jjc.ui_jjc_hyTipUI;
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = ui.views.main.ui_main_attrUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onAttrHandler);
            }
        }
        onAttrHandler(skin) {
            let arr = skin.dataSource.split(":");
            let id = parseInt(arr[0]);
            let val = attrConvert(id, parseInt(arr[1]));
            skin.tf1.text = MainModel.Ins.getAttrNameIdByID(id);
            skin.valTf.text = val;
            skin.upimg.visible = false;
        }
        onInit() {
            let list = this.Data.attrList;
            let str = "";
            let arr = HuYouAttrNameProxy.Ins.List;
            for (let ele of arr) {
                let vo = list.find(item => item.id == parseInt(ele.f_AttributeID));
                if (vo) {
                    str += vo.id + ":" + vo.value + "|";
                }
                else {
                    str += ele.f_AttributeID + ":" + 0 + "|";
                }
            }
            if (str.length > 0) {
                str = str.substr(0, str.length - 1);
            }
            let array = PlayerVoFactory.mergeAttr(str);
            this._ui.list1.array = array;
        }
        onExit() {
        }
    }

    exports.JjcHYTip = JjcHYTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class jjcLCTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jjc.ui_jjclcTipUI;
                this.bindClose(this._ui.btn_close);
                this._starCtl = new FuJiangStarCtl(this._ui.star);
                this._ui.list_xm.itemRender = LingChongXMItem;
                this._ui.list_xm.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list_attr.itemRender = ui.views.lingchong.ui_lingchongAttrItemUI;
                this._ui.list_attr.renderHandler = new Laya.Handler(this, this.onRenderHandller1);
            }
        }
        onRenderHandller1(item) {
            let id = parseInt(item.dataSource.split(":")[0]);
            let val = parseInt(item.dataSource.split(":")[1]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            item.valTf.text = attrConvert(id, val);
        }
        onRenderHandler(item, index) {
            item.setData(item.dataSource, index);
        }
        onInit() {
            this._data = this.Data[0];
            this.updataView();
        }
        onExit() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        updataView() {
            if (!this._data)
                return;
            let cfg = PetListProxy.Ins.getCfgById(this._data.petId);
            this._ui.lab_name.text = cfg.f_petname;
            this._ui.lab_name.color = "#" + EquipmentQualityProxy.Ins.getByQua(cfg.f_petquality).f_Color;
            this._ui.lab_lv.text = "Lv." + this._data.petLevel;
            this._starCtl.setStar(this._data.petStar);
            this._ui.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
            this._ui.tab.img2.visible = false;
            let sCfg = PetSkillClientProxy.Ins.getCfgById(cfg.f_petskillid);
            this._ui.item_jn.lab.text = sCfg.f_skillname;
            let lv = LingChongModel.Ins.getSkillLv(this._data.petStar);
            this._ui.item_jn.lab_lv.text = "Lv." + lv;
            this._ui.lab_jn.text = LingChongModel.Ins.getSkillDec(cfg.f_petskillid, lv);
            this._ui.list_attr.array = LingChongModel.Ins.getAttrArr(cfg.f_petid, this._data.petLevel, this._data.petStar);
            let array = [];
            for (let i = 0; i < this._data.petTalents.length; i++) {
                array.push({ data: this._data.petTalents[i] });
            }
            this._ui.list_xm.array = array;
            this._ui.list_xm.x = (this._ui.box.width - array.length * 91) * 0.5;
            this._avatar = AvatarFactory.createPet(cfg.f_petid);
            this._avatar.play(EAvatarAnim.HandBookStand);
            this._avatar.dir = EAvatarDir.Left;
            this._ui.avatr.addChild(this._avatar);
        }
    }

    exports.jjcLCTip = jjcLCTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcLogItemNew extends ui.views.jjc.ui_jjc_log_new_item_viewUI {
        constructor() {
            super();
            this._plugCtl = FontCtlFactory.createPlus();
            let _maskTemp = new Laya.Sprite();
            GeometryUtil.drawRoundRect(_maskTemp.graphics, 0, 0, this.head.icon.width, this.head.icon.height, 10, "#ff0000");
            this.head.icon.mask = _maskTemp;
        }
        refresh(model) {
            this._vo = this.dataSource;
            let _vo = this._vo;
            this.nametf.text = this._vo.playerName;
            let rankStr = E.getLang("JjcRank");
            this.jifen.visible = false;
            if (model.getType() == EJjcType.JJC && MainModel.Ins.serverVer == EServerVersion.Version_1) {
                this.jifen.visible = true;
                rankStr = "";
            }
            let isWin = _vo.win == 1;
            if (_vo.atk) {
                if (_vo.changeVal <= 0) ;
            }
            else {
                if (_vo.changeVal > 0) ;
            }
            this.time1.text = TimeUtil.timesMonthDay(_vo.time);
            this.setWin(isWin);
            this._plugCtl.setValue(this.plusCon, StringUtil.val2Atlas(_vo.plus));
            let _color = "#22A01C";
            if (isWin) {
                rankStr += "+" + _vo.changeVal;
            }
            else {
                rankStr += "-" + Math.abs(_vo.changeVal);
                _color = "#E73A38";
            }
            this.paiming.text = rankStr;
            this.paiming.color = _color;
            this.head.titleIcon.visible = false;
            this.head.lvtf.visible = false;
            MainModel.Ins.setTTHead(this.head.icon, MainModel.Ins.convertHead(_vo.headUrl));
        }
        setWin(v) {
            this.succeed2.visible = this.succeed1.visible = false;
            this.lose1.visible = this.lose2.visible = false;
            if (v) {
                this.succeed2.visible = this.succeed1.visible = true;
            }
            else {
                this.lose1.visible = this.lose2.visible = true;
            }
        }
    }

    exports.JjcLogItemNew = JjcLogItemNew;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcLogView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onExit() {
            this.model.off(JjcEvent.LogEvent, this, this.onRefreshHandler);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jjc.ui_jjc_fight_logUI();
                this._ui.list1.itemRender = JjcLogItemNew;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onLogItemHandler);
                this.bindClose(this._ui.close1);
                this._ui.list1.array = [];
            }
        }
        onLogItemHandler(item, index) {
            item.refresh(this.model);
        }
        onInit() {
            this.model = this.Data;
            this.model.once(JjcEvent.LogEvent, this, this.onRefreshHandler);
            this.model.reqlog();
        }
        onRefreshHandler() {
            this._ui.list1.array = this.model.loglist;
            this._ui.list1.scrollTo(0);
        }
    }

    exports.JjcLogView = JjcLogView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcRewardShowItemView extends ui.views.jjc.ui_jjc_reward_show_itemUI {
        setData(data) {
            let dayCfg = data;
            let rankStr = "";
            let f_StatMax = 0;
            let f_Reward = "";
            if (dayCfg.f_DailyRewardID) {
                rankStr = dayCfg.f_Ranking;
                f_StatMax = dayCfg.f_StatMax;
                f_Reward = dayCfg.f_DailyReward;
            }
            else {
                let weekCfg = data;
                rankStr = weekCfg.f_Ranking;
                f_StatMax = weekCfg.f_StatMax;
                f_Reward = weekCfg.f_WeeklyReward;
            }
            let _rankArr = rankStr.split("|");
            let _rankStartVal = parseInt(_rankArr[0]);
            let _rankEndVal = parseInt(_rankArr[1]);
            this.icon1.visible = false;
            let showRankStr = "";
            if (f_StatMax) {
                showRankStr = _rankStartVal + "+";
            }
            else {
                if (_rankStartVal <= 3) {
                    this.icon1.visible = true;
                    this.icon1.skin = JjcFactory.getRankImg(_rankStartVal);
                }
                else {
                    if (_rankEndVal) {
                        showRankStr = _rankStartVal + "-" + _rankEndVal;
                    }
                    else {
                        showRankStr = _rankStartVal + "";
                    }
                }
            }
            this.rankTf.text = showRankStr;
            -ItemViewFactory.renderItemSlots(this.rewardList, f_Reward, 10, 0.85, "right");
        }
    }

    exports.JjcRewardShowItemView = JjcRewardShowItemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcRewardShowView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jjc.ui_jjc_reward_showUI();
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = JjcRewardShowItemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRewardItemRender);
                this.lingquCtl = ButtonCtl.Create(this._ui.lingquBtn, new Laya.Handler(this, this.onLingQuHandler));
                this.btnList.push(this.lingquCtl);
                this._timeCtl = new TimeCtlV2(this._ui.time1, "{0}");
            }
        }
        onLingQuHandler() {
            this.model.reqGain(this.type);
        }
        onRewardItemRender(item, index) {
            item.setData(item.dataSource);
        }
        onExit() {
            this.model.off(JjcEvent.WeekTime, this, this.onTimeRefreshView);
            this._timeCtl.stop();
            this.model.off(JjcEvent.JjcWeekInfoUpdate, this, this.updateRankView);
            this.model.off(JjcEvent.LingQuUpdate, this, this.updateRankView);
            this.model.off(JjcEvent.DailyDayTime, this, this.onTimeRefreshView);
        }
        onAddLoadRes() {
        }
        updateRankView() {
            if (this.type == EJjcRewadShow.Day) {
                this._ui.tf1.text = E.LangMgr.getLang("JjcStr2");
                this._ui.curRank.text = E.LangMgr.getLang("JjcStr3") + this.model.todayRank.toString();
            }
            else {
                this._ui.tf1.text = E.LangMgr.getLang("JjcStr1");
                if (this.model.curWeekRank == 0) {
                    this._ui.curRank.text = E.LangMgr.getLang("NoRank");
                }
                else {
                    this._ui.curRank.text = E.LangMgr.getLang("JjcStr4") + this.model.curWeekRank.toString();
                }
            }
            this.refreshBtn();
        }
        onTimeRefreshView() {
            this._ui.title1.text = E.LangMgr.getLang(this.type == EJjcRewadShow.Day ? "DayRewardTitle" : "WeekRewardTitle");
            this._ui.time1.x = this._ui.tf1.x + this._ui.tf1.displayWidth;
            this.timeRefresh();
        }
        onInit() {
            let type = this.Data.type;
            this.model = this.Data.m;
            this.model.on(JjcEvent.WeekTime, this, this.onTimeRefreshView);
            this.type = type;
            this._ui.list1.array = this.model.getRewardCfgList(type);
            this._ui.list1.scrollTo(0);
            this.onTimeRefreshView();
            this.model.on(JjcEvent.JjcWeekInfoUpdate, this, this.updateRankView);
            this.model.on(JjcEvent.LingQuUpdate, this, this.updateRankView);
            this.model.on(JjcEvent.DailyDayTime, this, this.onTimeRefreshView);
            if (this.type == EJjcRewadShow.Week) {
                this.model.reqWeekInfo();
            }
            this.updateRankView();
        }
        onTimeComplete() {
            this.timeRefresh();
        }
        timeRefresh() {
            this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
            let _endTime = this.type == EJjcRewadShow.Week ? this.model.getWeekRewardEndTime() : this.model.getDayRewardEndTime();
            let empty = false;
            if (_endTime == 0) {
                empty = true;
            }
            else {
                let sub = _endTime - TimeUtil.serverTime;
                if (sub > 0) {
                    this._timeCtl.start(sub);
                }
                else {
                    empty = true;
                }
            }
            if (empty) {
                this._ui.time1.text = "";
            }
        }
        refreshBtn() {
            let _gray = false;
            if (this.type == EJjcRewadShow.Day) {
                if (this.model.dayStatus == EJjcRewadShowStatus.CanLingqu) ;
                else {
                    _gray = true;
                }
            }
            else {
                if (this.model.weekRewardStatus == EGetStatus.CanNotGet || this.model.weekRewardStatus == EGetStatus.IsAlreadyGet) {
                    _gray = true;
                }
            }
            this.lingquCtl.gray = _gray;
            this.lingquCtl.mouseEnable = !_gray;
            if (!_gray) {
                DotManager.addDot(this.lingquCtl.skin);
            }
            else {
                DotManager.removeDot(this.lingquCtl.skin);
            }
        }
    }

    exports.JjcRewardShowView = JjcRewardShowView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcSBTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jjc.ui_jjcsbTipUI;
                this.bindClose(this._ui.close1);
            }
        }
        onInit() {
            let data = this.Data[0];
            let cfg = ShenBinListProxy.Ins.getCfgById(data.artifactId);
            let icfg = ItemProxy.Ins.getCfg(cfg.f_itemId);
            this._ui.lab_name.text = cfg.f_ArtifactName;
            this._ui.icon.skin = IconUtils.getIconByCfgId(icfg.f_itemid);
            this._ui.quality.skin = IconUtils.getQuaIcon(icfg.f_qua);
            this._ui.lab_l.text = "lv." + data.level;
            if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                this._ui.lab_dec.text = StringUtil.format(cfg.f_Comment_v1, this.getAttr(data.level, data.artifactId));
            }
            else {
                this._ui.lab_dec.text = StringUtil.format(cfg.f_Comment, this.getAttr(data.level, data.artifactId));
            }
        }
        getAttr(lv, id) {
            if (lv == 0) {
                lv = 0;
            }
            else {
                lv -= 1;
            }
            let st = "";
            let cfg = ShenBinListProxy.Ins.getCfgById(id);
            let array = [];
            let arr;
            let arr1;
            if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                arr = cfg.f_initVal_v1.split("|");
                arr1 = cfg.f_parameter_v1.split("|");
            }
            else {
                arr = cfg.f_initVal.split("|");
                arr1 = cfg.f_parameter.split("|");
            }
            for (let i = 0; i < arr.length; i++) {
                let v = parseInt(arr[i]) + parseInt(arr1[i]) * lv;
                if (cfg.f_ispercent) {
                    st = (v / 100) + "%";
                }
                else {
                    st = v + "";
                }
                array.push(st);
            }
            return array;
        }
        onExit() {
        }
    }

    exports.JjcSBTip = JjcSBTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcWGTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jjc.ui_jjc_wgTipUI;
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = ui.views.hero_house.ui_hero_house_attr1UI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderAttrHandler);
                this._ui.list2.itemRender = ui.views.hero_house.ui_hero_house_attr1UI;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onRenderAttrHandler);
            }
        }
        onRenderAttrHandler(skin) {
            skin.tf1.text = MainModel.Ins.getAttrNameIdByID(skin.dataSource.id);
            skin.valTf.text = attrConvert(skin.dataSource.id, skin.dataSource.value);
        }
        onInit() {
            this._ui.list1.array = this.Data.gymAttrList;
            this._ui.list2.array = this.Data.roomAttrList;
        }
        onExit() {
        }
    }

    exports.JjcWGTip = JjcWGTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcZHTip extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this._attrID = [10002, 10003, 10004, 10005];
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jjc.ui_jjc_zhTipUI;
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = ui.views.soul.ui_soul_attr_itemUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderAttrHandler);
                this._ui.list2.itemRender = ui.views.soul.ui_soul_attr_itemUI;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onRenderAttrHandler);
            }
        }
        onRenderAttrHandler(skin) {
            skin.attrtf.text = MainModel.Ins.getAttrNameIdByID(skin.dataSource.id);
            skin.valtf.text = attrConvert(skin.dataSource.id, skin.dataSource.value);
        }
        onInit() {
            let data = this.Data;
            for (let i = 0; i < 4; i++) {
                let posCfg = t_Spirit_Position.Ins.getByPos(i + 1);
                let vo = data.spiritInfo.find(ele => ele.pos == i + 1);
                if (vo) {
                    this._ui["item" + i].tf1.visible = false;
                    this._ui["item" + i].icon.visible = true;
                    f_headViewUpdate(this._ui["item" + i].icon, t_Spirit_Attribute_Fixed.Ins.getCfgBySpiritID(vo.spiritId).f_SpiritIconID);
                    this._ui["item" + i].lvTf.visible = true;
                    if (vo.level > 0) {
                        this._ui["item" + i].lvTf.text = "+" + vo.level.toString();
                    }
                    else {
                        this._ui["item" + i].lvTf.text = "";
                    }
                    let cfg = t_Spirit_Attribute_Fixed.Ins.GetDataById(vo.spiritId);
                    this._ui["item" + i].bgicon.skin = SoulModel.Ins.getIcon(cfg.f_SpiritQuality);
                }
                else {
                    this._ui["item" + i].tf1.visible = true;
                    this._ui["item" + i].tf1.text = posCfg.f_PositionName;
                    this._ui["item" + i].icon.visible = false;
                    this._ui["item" + i].lvTf.visible = false;
                    this._ui["item" + i].bgicon.skin = SoulModel.Ins.getIcon(0);
                }
                this._ui["item" + i].bgicon.rotation = SoulModel.Ins.getRot(i + 1);
            }
            let arr = [];
            let arr1 = [];
            for (let i = 0; i < data.attrList.length; i++) {
                if (this._attrID.indexOf(data.attrList[i].id) != -1) {
                    arr.push(data.attrList[i]);
                }
                else {
                    arr1.push(data.attrList[i]);
                }
            }
            this._ui.list1.array = arr;
            this._ui.list2.array = arr1;
        }
        onExit() {
        }
    }

    exports.JjcZHTip = JjcZHTip;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DetailShowVo {
        set playerSkin(v) {
            let vo = new stSkin();
            vo.f_BodyID = v.f_BodyID;
            vo.f_HeadID = v.f_HeadID;
            vo.f_MountID = 0;
            vo.f_ShieldID = v.f_ShieldID;
            vo.f_WeaponID = v.f_WeaponID;
            vo.f_WingID = v.f_WingID;
            this._playerSkin = vo;
        }
        get playerSkin() {
            return this._playerSkin;
        }
    }
    class Attr_detailedView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_attr_detailedUI();
                this.btnList.push(new ButtonCtl(this._ui.close1, new Laya.Handler(this, this.onCloseHandler1)), new ButtonCtl(this._ui.shuxingDetail, new Laya.Handler(this, this.helpHandler)));
                this._ui.list1.itemRender = ui.views.main.ui_main_attrUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onAttrHandler);
            }
        }
        onAttrHandler(skin) {
            let id = skin.dataSource;
            let val = PlayerVoFactory.getValString(this.moneyInfo, id);
            let a = "";
            if (debug) {
                a = "-" + id;
                skin.tf1.fontSize = 14;
            }
            skin.tf1.text = MainModel.Ins.getAttrNameIdByID(id) + a;
            skin.valTf.text = val;
            skin.upimg.visible = false;
        }
        helpHandler() {
            E.ViewMgr.openHelpView("AttrTitle", "AttrDesc");
        }
        onCloseHandler1() {
            E.ViewMgr.Close(this.ViewType);
        }
        onExit() {
            let view = E.ViewMgr.Get(EViewType.ShowPlayer);
            if (view.IsShow()) {
                view.addAvatar();
            }
            if (this.tf) {
                this.tf.destroy(true);
                this.tf = null;
            }
            if (this.avatar) {
                this.avatar.dispose();
                this.avatar = null;
            }
        }
        onAddLoadRes() {
        }
        onAddEventListener() {
        }
        onEnter() {
        }
        getVal(type) {
            return (debug ? type.toString() + "-" : "") + PlayerVoFactory.getVal(this.moneyInfo, type);
        }
        onInit() {
            let detail = this.Data;
            this.moneyInfo = detail.moneyInfo;
            this._ui.speedtf.text = this.getVal(EAttrType.Speed).toString();
            this._ui.lifeTf.text = this.getVal(EAttrType.Life).toString();
            this._ui.attTf.text = this.getVal(EAttrType.Attack).toString();
            this._ui.definedTf.text = this.getVal(EAttrType.Defense).toString();
            this._ui.list1.array = GameconfigProxy.Ins.gainList;
            if (debug) {
                this._ui.speedtf.fontSize = this._ui.lifeTf.fontSize = this._ui.attTf.fontSize = this._ui.definedTf.fontSize = 20;
            }
            if (detail.accoutID == MainModel.Ins.mRoleData.AccountId) {
                this.avatar = AvatarFactory.getStandUiMainAvatar();
                this._ui.heroContainer.addChild(this.avatar);
            }
            else {
                let view = E.ViewMgr.Get(EViewType.ShowPlayer);
                if (view.IsShow()) {
                    this._ui.heroContainer.addChild(view.avatar);
                }
            }
        }
    }

    exports.Attr_detailedView = Attr_detailedView;
    exports.DetailShowVo = DetailShowVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EquipItemView {
        constructor(skin, equipType = null, hasRedCheck = false, mEffect = 0) {
            this.changeSkin = false;
            this.hasRedCheck = false;
            this.mEffect = 0;
            this.equipType = EEquipType.None;
            DebugUtil.draw(skin, "#ff00ff");
            this.mEffect = mEffect;
            this.hasRedCheck = hasRedCheck;
            this.skin = skin;
            this.equipType = equipType;
            this.skin.redimg.visible = false;
            if (skin instanceof Laya.EventDispatcher) {
                this.mouseEnableSkin = skin;
            }
            if (this.mEffect) {
                this.typeNameDcLabel = MainModel.Ins.getDcNode(skin.typename, MainModel.Ins.mainView.labelLayer);
                this.typeNameDcLabel.visible = true;
                skin.once(Laya.Event.DISPLAY, this, this.onDisplay);
                MainModel.Ins.on(MainEvent.EquipSlot, this, this.equipSlotLaterUpdate);
            }
        }
        get curVo() {
            return this.vo;
        }
        equipSlotLaterUpdate(targetType) {
            if (this.mEffect && this.equipType == targetType) {
                this.playAnim();
            }
        }
        onDisplay() {
        }
        set mouseEnableSkin(mSkin) {
            mSkin.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            if (this.vo) {
                E.ViewMgr.Open(EViewType.EquipTips, null, this.vo);
            }
        }
        get changeSkinIcon() {
            return ItemViewFactory.getHuanZhuangSkin(this.vo);
        }
        playAnim() {
            if (!this.eff) {
                this.eff = new SimpleEffect(this.skin, "o/spine/change/change", this.skin.width / 2, this.skin.height / 2);
            }
            this.eff.play(0, false);
        }
        setData(vo) {
            this.clear();
            this.vo = vo;
            if (vo) {
                if (this.changeSkin) {
                    this.skin.icon.skin = this.changeSkinIcon;
                }
                else {
                    this.skin.icon.skin = vo.getIcon();
                }
                this.typenameVis = false;
                this.skin.quality.skin = vo.getQualityIcon();
                if (this.skin.tf1) {
                    this.skin.tf1.visible = true;
                    this.skin.tf1.text = IconUtils.str2Lv(vo.equipVo.level);
                    this.lvVis = true;
                }
            }
        }
        set typenameVis(v) {
            this.skin.typename.visible = v;
            if (this.typeNameDcLabel) {
                this.typeNameDcLabel.visible = v;
            }
        }
        set lvVis(v) {
            this.skin.tf1.visible = v;
            if (this.lvDcLabel) {
                this.lvDcLabel.visible = v;
            }
        }
        clear() {
            this.skin.icon.skin = "";
            this.skin.quality.skin = "";
            if (this.skin.tf1) {
                this.skin.tf1.visible = false;
                this.lvVis = false;
            }
            this.typenameVis = true;
            let cfg = EquipmentIDProxy.Ins.GetDataById(this.equipType);
            if (cfg) {
                this.skin.typename.text = cfg.f_name;
            }
            else {
                this.skin.typename.text = "";
            }
        }
    }

    exports.EquipItemView = EquipItemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WingItemView {
        constructor(skin) {
            this.skin = skin;
            this.skin.redimg.visible = false;
            this.skin.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            if (this.wingData.wingId) {
                E.ViewMgr.Open(EViewType.WingInfo, null, this.wingData);
            }
        }
        setData(wingData) {
            if (!wingData)
                return;
            this.wingData = wingData;
            this.clear();
            if (wingData.wingId) {
                this.skin.typename.text = "";
                this.skin.tf1.text = "Lv." + wingData.level;
                const wingId = wingData.wingId;
                if (!wingData.wingName) {
                    wingData.wingName = WingIdProxy.Ins.getWingName(wingId);
                }
                this.skin.icon.skin = ItemViewFactory.getWingIcon(wingId);
                this.skin.quality.skin = IconUtils.getQuaIcon(4);
            }
            else {
                this.skin.typename.text = "翅膀";
                this.skin.tf1.text = "";
                this.skin.icon.skin = "";
                this.skin.quality.skin = "remote/common/base/duigoukuang.png";
            }
        }
        clear() {
        }
    }

    exports.WingItemView = WingItemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShowPlayerView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this._playerVoCtl = new PlayerVoCtl();
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas('lingchong.atlas');
        }
        onExit() {
            this.avatar.dispose();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jjc.ui_jjc_player_infoUI();
                this._ui.centerBg.on(Laya.Event.CLICK, this, this.onClickHandler);
                this.bindClose(this._ui.close1);
                this._plusCtl = FontCtlFactory.createPlus();
                this._equipList = [];
                this._equipList.push(new EquipItemView(this._ui.item0, EEquipType.Shoulder), new EquipItemView(this._ui.item1, EEquipType.Casque), new EquipItemView(this._ui.item2, EEquipType.Necklace), new EquipItemView(this._ui.item3, EEquipType.Wrister), new EquipItemView(this._ui.item4, EEquipType.Barde), new EquipItemView(this._ui.item5, EEquipType.Gloves), new EquipItemView(this._ui.item6, EEquipType.Waistband), new EquipItemView(this._ui.item7, EEquipType.Trousers), new EquipItemView(this._ui.item8, EEquipType.Weapon), new EquipItemView(this._ui.item9, EEquipType.Ornament), new EquipItemView(this._ui.item10, EEquipType.Shoe), new EquipItemView(this._ui.item11, EEquipType.Shield));
                this.wingItem = new WingItemView(this._ui.item_wing);
                let l = [];
                for (let i = 0; i < 10; i++) {
                    l.push(this._ui['attr' + i]);
                }
                this.attrViewList = l;
                this.btnList.push(ButtonCtl.Create(this._ui.tipsclick, new Laya.Handler(this, this.onDetailHandler), false), ButtonCtl.Create(this._ui.img_bs2, new Laya.Handler(this, this.onBtnBSHandler), false), ButtonCtl.Create(this._ui.img_hy2, new Laya.Handler(this, this.onBtnHYHandler), false), ButtonCtl.Create(this._ui.img_wg2, new Laya.Handler(this, this.onBtnWGHandler), false), ButtonCtl.Create(this._ui.img_zh2, new Laya.Handler(this, this.onBtnZHHandler), false), ButtonCtl.Create(this._ui.item_sb, new Laya.Handler(this, this.onBtnSBHandler), false), ButtonCtl.Create(this._ui.btn_attr, new Laya.Handler(this, this.onBtnAttrHandler)), ButtonCtl.Create(this._ui.item_lq, new Laya.Handler(this, this.onBtnLQHandler), false));
                this._zuoqiSlot = new ZuoQiSlotCtl(this._ui.zuoqi, true);
                this._zuoqiSlot.clickHandler = new Laya.Handler(this, this.onZuoqiClick);
                this._starCtl = new FuJiangStarCtl(this._ui.item_lq.star);
            }
        }
        onZuoqiClick(vo) {
            if (vo && !vo.isEmpty) {
                E.ViewMgr.Open(EViewType.ZuoqiTips, null, { zqData: vo });
            }
        }
        onDetailHandler() {
            E.ViewMgr.Open(EViewType.Attr_detailed, null, this._detailData);
        }
        onBtnBSHandler() {
            if (this.playerData && this.playerData.Gem.formationId) {
                E.ViewMgr.Open(EViewType.JJCBSTIP, null, this.playerData.Gem);
            }
        }
        onBtnHYHandler() {
            if (this.playerData && this.playerData.Blessing) {
                E.ViewMgr.Open(EViewType.JJCHYTIP, null, this.playerData.Blessing);
            }
        }
        onBtnWGHandler() {
            if (this.playerData && this.playerData.Gym) {
                E.ViewMgr.Open(EViewType.JJCWGTIP, null, this.playerData.Gym);
            }
        }
        onBtnZHHandler() {
            if (this.playerData && this.playerData.Spirit) {
                E.ViewMgr.Open(EViewType.JJCZHTIP, null, this.playerData.Spirit);
            }
        }
        onBtnSBHandler() {
            if (this.playerData && this.playerData.Artifact.length) {
                E.ViewMgr.Open(EViewType.JJCSBTIP, null, this.playerData.Artifact);
            }
        }
        onBtnLQHandler() {
            if (this.playerData && this.playerData.petInfo.length) {
                E.ViewMgr.Open(EViewType.jjcLCTip, null, this.playerData.petInfo);
            }
        }
        onBtnAttrHandler() {
            if (this.playerData) {
                E.ViewMgr.Open(EViewType.JJCDBTIP, null, this.playerData);
            }
        }
        updateEquip() {
            let _equipItems = this.playerData.equipItem;
            let _resList = DateFactory.createEquipList(_equipItems);
            for (let i = 0; i < this._equipList.length; i++) {
                let itemView = this._equipList[i];
                if (itemView instanceof EquipItemView) {
                    itemView.setData(PlayerVoFactory.getEquipVoByType(_resList, itemView.equipType));
                }
            }
        }
        onClickHandler() {
        }
        updateMainAttr() {
            return PlayerVoFactory.fillAttrView(this.attrViewList, new Laya.Handler(this, this.getValByType));
        }
        getValByType(type) {
            return PlayerVoFactory.getValString(this.playerData.moneyInfo, type);
        }
        onInit() {
            this.playerData = this.Data;
            console.log("this.playerData>>>", this.Data);
            this._playerVoCtl.moneyInfo = this.playerData.moneyInfo;
            this._playerVoCtl.equipItem = this.playerData.equipItem;
            let _player = this.playerData;
            this._ui.nameTF.text = _player.NickName;
            MainModel.Ins.setTTHead(this._ui.headImg, MainModel.Ins.convertHead(_player.HeadUrl));
            let vv = StringUtil.val2Atlas(this._playerVoCtl.plus);
            this._plusCtl.setValue(this._ui.plusCon, vv);
            this._ui.paihangtf.text = _player.rank.toString();
            this._ui.lvtf.text = IconUtils.str2Lv(_player.Level);
            this._ui.img_title.skin = ChengHaoModel.Ins.getTitleImg(_player.titleId);
            this.updateEquip();
            this.updateMainAttr();
            let detail = new DetailShowVo();
            detail.moneyInfo = this.playerData.moneyInfo;
            detail.wing = this.playerData.wing;
            detail.equipList = DateFactory.createEquipList(this.playerData.equipItem);
            detail.playerSkin = this.playerData.PlayerSkin;
            this._detailData = detail;
            detail.accoutID = 0;
            this.avatar = AvatarFactory.createAvatarByStSkin(detail.playerSkin);
            this.addAvatar();
            if (this.playerData.ride.length > 0) {
                let _rideVo = this.playerData.ride[0];
                let _zuoqiVo = ZuoqiFactory.createZuoQiVo(_rideVo.baseInfo);
                if (_rideVo.attr.length > 0) {
                    _zuoqiVo.equipVo = _rideVo.attr[0];
                }
                this._zuoqiSlot.mData = _zuoqiVo;
            }
            else {
                this._zuoqiSlot.mData = null;
            }
            this._zuoqiSlot.refresh();
            let wing = this.playerData.wing;
            this.wingItem.setData({ wingId: wing.wingId, stage: wing.stage || 0, level: wing.level || 0, treasureStage: wing.treasureStage || 0, isOwner: false, wingFightCapacity: wing.power });
            if (this.playerData.Gem.formationId) {
                this._ui.img_bs1.visible = false;
                this._ui.img_bs2.visible = true;
            }
            else {
                this._ui.img_bs1.visible = true;
                this._ui.img_bs2.visible = false;
            }
            if (this.playerData.Gym.gymAttrList.length == 0 && this.playerData.Gym.roomAttrList.length == 0) {
                this._ui.img_wg1.visible = true;
                this._ui.img_wg2.visible = false;
            }
            else {
                this._ui.img_wg1.visible = false;
                this._ui.img_wg2.visible = true;
            }
            if (this.playerData.Blessing.attrList.length == 0) {
                this._ui.img_hy1.visible = true;
                this._ui.img_hy2.visible = false;
            }
            else {
                this._ui.img_hy1.visible = false;
                this._ui.img_hy2.visible = true;
            }
            if (this.playerData.Spirit.attrList.length == 0) {
                this._ui.img_zh1.visible = true;
                this._ui.img_zh2.visible = false;
            }
            else {
                this._ui.img_zh1.visible = false;
                this._ui.img_zh2.visible = true;
            }
            if (this.playerData.Artifact.length) {
                this._ui.item_sb.visible = true;
                this._ui.img_sb1.visible = false;
                this._ui.item_sb.bg.visible = false;
                this._ui.item_sb.redimg.visible = false;
                this._ui.item_sb.typename.visible = false;
                let sbcfg = ShenBinListProxy.Ins.getCfgById(this.playerData.Artifact[0].artifactId);
                let isbcfg = ItemProxy.Ins.getCfg(sbcfg.f_itemId);
                this._ui.item_sb.quality.skin = IconUtils.getQuaIcon(isbcfg.f_qua);
                this._ui.item_sb.icon.skin = IconUtils.getIconByCfgId(isbcfg.f_itemid);
                this._ui.item_sb.tf1.text = "lv." + this.playerData.Artifact[0].level;
            }
            else {
                this._ui.item_sb.visible = false;
                this._ui.img_sb1.visible = true;
            }
            if (this.playerData.petInfo.length) {
                this._ui.img_lq1.visible = false;
                this._ui.item_lq.visible = true;
                this._ui.item_lq.jiao.visible = false;
                let cfg = PetListProxy.Ins.getCfgById(this.playerData.petInfo[0].petId);
                this._ui.item_lq.quality.skin = IconUtils.getQuaIcon(cfg.f_petquality);
                this._ui.item_lq.icon.skin = PetListProxy.Ins.getPetIconById(cfg.f_petid);
                this._ui.item_lq.lab_lv.text = "Lv." + this.playerData.petInfo[0].petLevel;
                this._ui.item_lq.tab.img.skin = `remote/lingchong/tj${cfg.f_pettype}.png`;
                this._ui.item_lq.tab.img2.visible = false;
                if (this.playerData.petInfo[0].petStar) {
                    this._ui.item_lq.sp.visible = true;
                    this._ui.item_lq.star.visible = true;
                    this._starCtl.setStar(this.playerData.petInfo[0].petStar);
                }
                else {
                    this._ui.item_lq.sp.visible = false;
                    this._ui.item_lq.star.visible = false;
                }
            }
            else {
                this._ui.img_lq1.visible = true;
                this._ui.item_lq.visible = false;
            }
            if (this.playerData.rank === 0) {
                this._ui.tf2.visible = this._ui.paihangtf.visible = false;
            }
            else {
                this._ui.tf2.visible = this._ui.paihangtf.visible = true;
                if (ChatModel.Ins.isChat) {
                    this._ui.tf2.visible = this._ui.paihangtf.visible = false;
                }
                else {
                    this._ui.tf2.visible = this._ui.paihangtf.visible = true;
                }
            }
            ChatModel.Ins.isChat = false;
        }
        addAvatar() {
            this._ui.heroCon.addChild(this.avatar);
        }
    }

    exports.ShowPlayerView = ShowPlayerView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SkinLiBaoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.index = 0;
            this.packUid = 52;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("libao.atlas");
            this.addAtlas("huodong.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.libao.ui_skinViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick)), ButtonCtl.Create(this._ui.btn_lf, new Laya.Handler(this, this.onBtnLfClick)), ButtonCtl.Create(this._ui.btn_rt, new Laya.Handler(this, this.onBtnRtClick)));
                this._ui.list.itemRender = ui.views.libao.ui_skinItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this.showSkin();
            }
        }
        onBtnClick() {
            const pack = ActivityModel.Ins.getByUid(this.packUid);
            if (!pack)
                return;
            const notBuy = pack.dataList.every(o => o.param1 === EActivityLingQu.Nothing);
            if (notBuy) {
                const activity = t_Pack_ControllerProxy.Ins.getByUID(this.packUid);
                ActivityModel.Ins.recharge(activity.f_PriceID);
            }
            else {
                ActivityModel.Ins.lingQu(this.packUid, 0);
            }
        }
        showSkin() {
            const index = this.index;
            const arr = [
                { skin: this._ui.skin1, dot: this._ui.dot1 },
                { skin: this._ui.skin2, dot: this._ui.dot2 },
                { skin: this._ui.skin3, dot: this._ui.dot3 },
            ];
            if (index < 0 || index >= arr.length)
                return;
            for (let i = 0; i < arr.length; i++) {
                if (index === i) {
                    arr[i].skin.visible = true;
                    arr[i].dot.skin = `remote/libao/d_2.png`;
                }
                else {
                    arr[i].skin.visible = false;
                    arr[i].dot.skin = `remote/libao/d_1.png`;
                }
            }
        }
        onBtnLfClick() {
            if (this.index > 0) {
                this.index--;
            }
            else {
                this.index = 2;
            }
            this.showSkin();
        }
        onBtnRtClick() {
            if (this.index < 2) {
                this.index++;
            }
            else {
                this.index = 0;
            }
            this.showSkin();
        }
        onInit() {
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.updataView);
            this.updataView();
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.updataView);
        }
        onRenderHandler(item) {
            var _a;
            const arr = item.dataSource.f_items_client.split('|');
            const dataList = ActivityModel.Ins.getByUid(this.packUid).dataList;
            const rewarded = ((_a = dataList.find(o => o.id === item.dataSource.f_id)) === null || _a === void 0 ? void 0 : _a.param1) === EActivityLingQu.YiLingQu;
            for (let i = 1; i <= arr.length; i++) {
                const [itemId, count] = arr[i - 1].split('-').map(Number);
                if (rewarded) {
                    item[`item${i}`].maskbg.visible = true;
                    item[`item${i}`].gouImg.visible = true;
                }
                else {
                    item[`item${i}`].maskbg.visible = false;
                    item[`item${i}`].gouImg.visible = false;
                }
                let vo = new ItemVo();
                vo.cfgId = itemId;
                vo.count = count;
                ItemViewFactory.refreshSlot(item[`item${i}`].slot, vo);
            }
            let id = item.dataSource.f_id;
            item.lab.text = E.getLang(id == 1 ? "djtlq" : "djtlq2", StringUtil.NumToWord(id));
        }
        updataView() {
            const pack = ActivityModel.Ins.getByUid(this.packUid);
            if (!pack)
                return;
            this._ui.list.array = SkinLiBaoProxy.Ins.List;
            const notBuy = pack.dataList.every(o => o.param1 === EActivityLingQu.Nothing);
            const arr = pack.dataList.filter(o => [EActivityLingQu.KeLingQu, EActivityLingQu.YiLingQu].indexOf(o.param1) !== -1);
            if (arr.length) {
                const index = Math.max(...arr.map(o => o.id));
                if (index > 1) {
                    this.index = index - 1;
                    this.showSkin();
                }
            }
            if (pack.dataList.find(o => o.param1 === EActivityLingQu.KeLingQu)) {
                MainModel.Ins.funcSetRed(EFuncDef.SkinLiBao, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.SkinLiBao, false);
            }
            if (notBuy) {
                const activity = t_Pack_ControllerProxy.Ins.getByUID(this.packUid);
                let purCfg = t_Purchase_PriceProxy.Ins.GetDataById(activity.f_PriceID);
                this._ui.lab1.text = E.getLang("scly", StringUtil.moneyCv(purCfg.f_price));
                this._ui.btn.skin = `remote/libao/anniu_red.png`;
                this._ui.btn.disabled = false;
            }
            else {
                if (pack.dataList.find(o => o.param1 === EActivityLingQu.KeLingQu)) {
                    this._ui.lab1.text = '领取';
                    this._ui.btn.disabled = false;
                }
                else {
                    this._ui.lab1.text = '已领取';
                    this._ui.btn.disabled = true;
                }
                this._ui.btn.skin = `remote/common/base/anniu_blue1.png`;
            }
        }
    }

    exports.SkinLiBaoView = SkinLiBaoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LoginQuFuView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.checkGuide = false;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.login.ui_loginQuFuViewUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = ui.views.login.ui_loginQuFuItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list.selectEnable = true;
                this._ui.list.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this._ui.list1.itemRender = ui.views.login.ui_loginQuFuItem1UI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender1);
                this._ui.list1.selectEnable = true;
                this._ui.list1.selectHandler = new Laya.Handler(this, this.onSelectHandler1);
            }
        }
        onInit() {
            this._ui.list.array = this._ui.list1.array = [];
            this.upDataView();
        }
        onExit() {
            this._ui.list.selectedIndex = -1;
            this._ui.list1.selectedIndex = -1;
        }
        onItemRender1(item, index) {
            let data = item.dataSource;
            QuFuUtils.updateLabe(item, data);
            if (data.serverID == MainModel.Ins.serverID) {
                item.img_sel.visible = true;
            }
            else {
                item.img_sel.visible = false;
            }
        }
        onSelectHandler1(index) {
            if (index == -1) {
                return;
            }
            this._serverState = this._ui.list1.array[index].serverState;
            this._serverID = this._ui.list1.array[index].serverID;
            this._serverIsNew = this._ui.list1.array[index].isNew;
            this._serverName = this._ui.list1.array[index].serverName;
            HttpUtil.httpGet(`${InitConfig.getSyURL()}/server/appoint?appid=${E.sdk.getAppId()}&openid=${this.getOpenId()}
        &ver=${this.getVer()}&server_id=${this._ui.list1.array[index].serverID}`, new Laya.Handler(this, this.onSelServerHandler));
            this._ui.list1.selectedIndex = -1;
        }
        onSelServerHandler(data) {
            let obj = JSON.parse(data);
            if (obj.code == 0) {
                MainModel.Ins.serverState = this._serverState;
                MainModel.Ins.serverID = this._serverID;
                MainModel.Ins.serverIsNew = this._serverIsNew;
                MainModel.Ins.serverName = this._serverName;
                let view = E.ViewMgr.Get(EViewType.LoginNew);
                if (view) {
                    view.updataServer();
                }
                this.Close();
            }
        }
        onItemRender(item, index) {
            let data = item.dataSource;
            item.lab_name.text = data.name;
            if (data.isSelect) {
                item.img.visible = true;
            }
            else {
                item.img.visible = false;
            }
        }
        onSelectHandler(index) {
            if (index == -1) {
                return;
            }
            for (let i = 0; i < this._ui.list.array.length; i++) {
                if (index == i) {
                    this._ui.list.array[i].isSelect = true;
                }
                else {
                    this._ui.list.array[i].isSelect = false;
                }
            }
            this._ui.list.refresh();
            HttpUtil.httpGet(`${InitConfig.getSyURL()}/server/list?appid=${E.sdk.getAppId()}&openid=${this.getOpenId()}
        &ver=${this.getVer()}&serverZuID=${this._ui.list.array[index].id}`, new Laya.Handler(this, this.onSelServerZuHandler));
        }
        onSelServerZuHandler(data) {
            let obj = JSON.parse(data);
            if (obj.code == 0) {
                this._ui.list1.array = obj.result;
            }
        }
        getOpenId() {
            let openId;
            let user = HrefUtils.getHref("user");
            if (user) {
                openId = user;
            }
            else {
                openId = E.sdk.getOpenId();
            }
            return openId;
        }
        getVer() {
            return MainModel.Ins.ver;
        }
        upDataView() {
            let arr = [];
            arr.push({ name: "推荐", isSelect: false, id: 10000 });
            arr.push({ name: "我的角色", isSelect: false, id: 20000 });
            for (let i = MainModel.Ins.serverZu; i > 0; i--) {
                let st = (i * 20 - 20 + 1) + "-" + i * 20 + "服";
                arr.push({ name: st, isSelect: false, id: i });
            }
            this._ui.list.array = arr;
            this._ui.list.selectedIndex = 0;
        }
    }

    exports.LoginQuFuView = LoginQuFuView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LoginViewNew extends ViewBase {
        constructor() {
            super(...arguments);
            this.PageType = EPageType.None;
            this.autoFree = true;
            this.checkGuide = false;
            this.pwd = "0";
        }
        onEnter() {
        }
        delTitleEffect() {
            if (this.eff) {
                this.eff.dispose();
                this.eff = null;
            }
        }
        onExit() {
            this.delTitleEffect();
            E.ViewMgr.Close(EViewType.NoticePop);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.login.ui_login_newUI();
                this._enterCtl = new ButtonCtl(this._ui.enterGame, new Laya.Handler(this, this.onEnterGame));
                let ckCtl = new CheckBoxCtl(this._ui);
                ckCtl.selectHander = new Laya.Handler(this, this.onCkSelect);
                ckCtl.selected = true;
                this._ui.content.on(Laya.Event.CLICK, this, this.onContentClick);
                this._ui.content.mouseEnabled = true;
                this.ckCtl = ckCtl;
                let ver = MainModel.Ins.ver;
                this._ui.versionTf.text = ver;
                this._ui.versionTf.color = ver == "v1_0_15" ? "#ff0000" : "#00ff00";
                this._ui.versionTf.strokeColor = "#000000";
                this._ui.versionTf.stroke = 2;
                if (!Laya.Browser.onPC && initConfig.asset.indexOf("https://") == -1) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, "请使用CDN资源");
                }
                this.btnList.push(ButtonCtl.CreateBtn(this._ui.shilinbtn, this, this.onAgeHandler));
                this._ui.lab_sel.on(Laya.Event.CLICK, this, this.onLabSelClick);
                this.initUi();
                this._ui.bg3.skin = "";
                this._ui.img_t.visible = this._ui.lab_id.visible = this._ui.img_t1.visible = false;
                this._ui.lab_id.autoSize = true;
                if (Laya.Utils.getQueryString("pet")) {
                    let that = this;
                    window["del"] = function () {
                        that.delTitleEffect();
                    };
                }
            }
        }
        initByVeritf(_verify) {
            let effect;
            let bg3URL = "";
            if (window["initConfig"]['littlegame']) {
                this._ui.descTf.text = window["initConfig"]["littledesc"];
                effect = "o/spine/title2/title";
            }
            else {
                this._ui.descTf.text = "";
                if (initConfig.clienttype == EClientType.Discount) {
                    let title = "title3";
                    if (_verify) {
                        title = "title3_verify";
                    }
                    else {
                        bg3URL = "static/0_1z_1.png";
                    }
                    effect = `o/spine/${title}/title`;
                }
                else {
                    effect = "o/spine/title/title";
                }
            }
            this._ui.bg3.skin = bg3URL;
            this.eff = new SimpleEffect(this._ui.eff, effect);
            this.eff.autoPlay = true;
            this.eff.play(0, false);
        }
        updateCheckBox() {
            if (MainModel.Ins.verify) {
                this.ckCtl.selected = false;
            }
            else {
                this.ckCtl.selected = true;
            }
        }
        onAgeHandler() {
        }
        onLabSelClick() {
            E.ViewMgr.Open(EViewType.LoginQuFu);
        }
        onCkSelect() {
        }
        onContentClick() {
            E.ViewMgr.Open(EViewType.YinSiView);
        }
        initUi() {
        }
        onEnterGame() {
            if (Laya.Utils.getQueryString("localgame")) {
                MainModel.Ins.openMainView();
                this.Close();
                return;
            }
            if (this.ckCtl.selected) {
                MainModel.Ins.showLoading();
                this.Close();
            }
            else {
                this.onContentClick();
            }
        }
        onAddLoadRes() {
            this.addAtlas("loginnew1.atlas");
            this.addAtlas("common/base.atlas");
            this.addAtlas("main/main.atlas");
        }
        onAddEventListener() {
            this.addEventCus(EventID.WebClientRegistRsp, this.onWebClientRegistRsp, this);
            this.addEventCus(EventID.WebClientLoginRsp, this.onWebClientLoginRsp, this);
        }
        onWebClientLoginRsp(data) {
            if (data.errorID == 0) {
                E.ViewMgr.Close(this.ViewType);
                if (E.ta) {
                    E.ta.login(MainModel.Ins.mRoleData.AccountId.toString());
                }
            }
            else {
                if (data.errorID == 2) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, E.LangMgr.getLang("AccountStopUseing"));
                }
                else if (data.errorID == 3) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, E.LangMgr.getLang("NoAccount"));
                }
                else if (data.errorID == 4) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, E.LangMgr.getLang("PasswordError"));
                }
                else {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, E.LangMgr.getLang("LoginFailed"));
                }
            }
        }
        onWebClientRegistEnd() {
        }
        onUnlockEnter() {
        }
        onWebClientRegistRsp(data) {
            E.ViewMgr.closeWait();
            this.onUnlockEnter();
            switch (data.errorID) {
                case 0:
                    break;
                case 1:
                    E.ViewMgr.ShowMidError("注册失败");
                    E.ViewMgr.Close(this.ViewType);
                    break;
            }
            this.onWebClientRegistEnd();
        }
        playTitleAnim() {
        }
        onInit() {
            E.taLoginTrack("showLoginView");
            this.playTitleAnim();
            HttpUtil.httpGet(`${InitConfig.getSyURL()}/notice`, new Laya.Handler(this, this.onNotice));
            let openId;
            let user = HrefUtils.getHref("user");
            if (user) {
                openId = user;
            }
            else {
                openId = E.sdk.getOpenId();
            }
            LoginClient.Ins.openId = openId + "";
            HttpUtil.httpGet(`${InitConfig.getSyURL()}/server/onopen?appid=${E.sdk.getAppId()}&openid=${openId}&ver=${MainModel.Ins.ver}`, new Laya.Handler(this, this.onServerHandler));
            this.getVeriry();
        }
        onNotice(data) {
            let obj = JSON.parse(data);
            if (obj.result.length == 1) {
                let cell = obj.result[0];
                MainModel.Ins.openServerNotice(cell.Title, cell.Content);
            }
        }
        getVeriry() {
            HttpUtil.httpGet(MainModel.Ins.url, new Laya.Handler(this, this.loginComplete));
        }
        loginComplete(data) {
            let obj = JSON.parse(data);
            if (obj.code == 0 && obj.result) {
                this.ckCtl.selected = !(obj.result.audit == 1);
            }
            else {
                this.ckCtl.selected = true;
            }
            this.initByVeritf(Laya.Utils.getQueryString("ts") == "1" || (obj.result && obj.result.audit == 1));
        }
        onServerHandler(data) {
            let obj = JSON.parse(data);
            if (obj.code == 0) {
                MainModel.Ins.serverZu = parseInt(obj.result.serverZu);
                MainModel.Ins.serverState = parseInt(obj.result.serverDetail.serverState);
                MainModel.Ins.serverIsNew = parseInt(obj.result.serverDetail.isNew);
                MainModel.Ins.serverID = parseInt(obj.result.serverDetail.serverID);
                MainModel.Ins.serverName = obj.result.serverDetail.serverName;
                this.updataServer();
            }
            else {
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, obj.msg || "");
            }
        }
        updataServer() {
            this._ui.img_t.visible = this._ui.lab_id.visible = true;
            this._ui.lab_id.text = MainModel.Ins.serverName;
            switch (MainModel.Ins.serverState) {
                case 1:
                    this._ui.img_t.skin = "remote/loginnew1/bm.png";
                    break;
                case 2:
                    this._ui.img_t.skin = "remote/loginnew1/ct.png";
                    break;
                case 3:
                    this._ui.img_t.skin = "remote/loginnew1/wh.png";
                    break;
            }
            if (MainModel.Ins.serverIsNew) {
                this._ui.img_t1.visible = true;
            }
            else {
                this._ui.img_t1.visible = false;
            }
        }
    }

    exports.LoginViewNew = LoginViewNew;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PleaseWaitView extends ViewBase {
        constructor() {
            super(...arguments);
            this.PageType = EPageType.None;
            this.checkGuide = false;
            this.mWidth = 750;
            this.mHeight = 1630;
            this.index = 1;
            this.mTime = 500;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_game_maskUI();
                this._ui.bg.skin = "";
                this._ui.bg.width = this.mWidth;
                this._ui.bg.height = this.mHeight;
                this._ui.bg.on(Laya.Event.CLICK, this, this.onClickHandler);
            }
        }
        onClickHandler() {
        }
        onExit() {
            this.clearTime();
        }
        clearTime() {
            Laya.timer.clear(this, this.updateAnim);
            Laya.timer.clear(this, this.Close);
        }
        onAddLoadRes() {
            this.addAtlas("loginnew1.atlas");
        }
        onAddEventListener() {
        }
        onEnter() {
        }
        onInit() {
            if (this.Data) {
                Laya.timer.once(5000, this, this.Close);
            }
            this.updateAnim();
        }
        updateAnim() {
            for (let i = 0; i < this.index; i++) {
            }
            this._ui.tf.text = "";
            this.index++;
            if (this.index > 3) {
                this.index = 0;
            }
            this._ui.juhua.rotation += 10;
            Laya.timer.once(this.mTime, this, this.updateAnim);
        }
    }

    exports.PleaseWaitView = PleaseWaitView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpineEffectCtl {
        constructor(con) {
            this.con = con;
        }
        play(url, animIndex = 0) {
            if (!this.effect) {
                this.effect = new SimpleEffect(this.con, url);
                this.effect.autoPlay = true;
            }
            this.effect.play(animIndex, true);
        }
        stop() {
            if (this.effect) {
                this.effect.stop();
            }
        }
        dispose() {
            this.effect.dispose();
        }
    }

    exports.SpineEffectCtl = SpineEffectCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroZhangHeView extends Laya.Sprite {
        constructor() {
            super(...arguments);
            this.autoHide = true;
        }
        play(btn) {
            LayerMgr.Ins.subFrameLayer.addChild(this);
            let pos = btn.parent.localToGlobal(new Laya.Point(btn.x + btn.width, btn.y + btn.height));
            this.x = pos.x;
            this.y = pos.y;
            this.playCongratulatEffect();
            this.hitArea = new Laya.Rectangle(-this.x, -this.y, Laya.stage.width, Laya.stage.height);
            if (this.autoHide) {
                Laya.timer.once(1000, this, this.removeSelf);
            }
            else {
                this.on(Laya.Event.CLICK, this, this.onClickHandler);
            }
            if (debug) {
                this.graphics.clear();
                this.graphics.drawRect(-this.x, -this.y, Laya.stage.width, Laya.stage.height, null, "#ff0000", 1);
            }
        }
        onClickHandler() {
            let sub = Laya.timer.currTimer - this._time;
            if (sub <= 1000) {
                return;
            }
            this.off(Laya.Event.CLICK, this, this.onClickHandler);
            this._effect.play(2, false, this, this.onPlayEnd2, null, true);
        }
        onPlayEnd2() {
            this.removeSelf();
        }
        playCongratulatEffect() {
            if (!this._effect) {
                this._effect = new SimpleEffect(this, "o/spine/herozh/herozh");
            }
            this._effect.play(0, false, this, this.onPlayEnd0, null, true);
        }
        onPlayEnd0() {
            this._time = Laya.timer.currTimer;
            this._effect.play(1, true, this, null, null, true);
        }
    }

    exports.HeroZhangHeView = HeroZhangHeView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MainBottomPopIconVo {
        get isClose() {
            if (HrefUtils.getVal("disable_f_close")) {
                return false;
            }
            let cfg = FuncProxy.Ins.getCfgByFuncId(this.funcid);
            return cfg.f_close == 1;
        }
    }
    class SmallIconCtl {
        constructor() {
            this.clsKey = "ui_main_bottom_itemUI";
        }
        onClickHandler() {
            let vo = this.vo;
            let funcid = vo.funcid;
            if (!TaskModel.Ins.isFuncOpen(funcid, true)) {
                return;
            }
            let cfg = FuncProxy.Ins.getCfgByFid(funcid);
            if (cfg && cfg.f_viewType) {
                E.ViewMgr.Open(cfg.f_viewType);
            }
            let mainView = E.ViewMgr.Get(EViewType.Main);
            mainView.botIconView.hide();
        }
        set data(v) {
            this.vo = v;
            this.skin = Laya.Pool.getItemByClass(this.clsKey, ui.views.main.ui_main_bottom_itemUI);
            this.skin.dataSource = v.funcid;
            DebugUtil.drawTF(this.skin, v.funcid.toString());
            if (!this.btnCtl) {
                this.btnCtl = ButtonCtl.CreateBtn(this.skin, this, this.onClickHandler);
            }
            if (TaskModel.Ins.isFuncOpen(v.funcid)) {
                this.skin.icon1.gray = false;
                this.skin.tf.gray = false;
            }
            else {
                this.skin.icon1.gray = true;
                this.skin.tf.gray = true;
            }
            this.clear();
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onUndisplay);
            switch (v.funcid) {
                case EFuncDef.DF_jjc:
                    this.jjcModel = PeakJjcModel.Ins;
                    this.jjcModel.on(JjcEvent.RedUpdate, this, this.onRed);
                    break;
                case EFuncDef.Jjc:
                    this.jjcModel = JjcModel.Ins;
                    this.jjcModel.on(JjcEvent.RedUpdate, this, this.onRed);
                    break;
                case EFuncDef.YeWaiBoss:
                    this.mainModel = MainModel.Ins;
                    this.mainModel.on(MainEvent.AdventureBossUpdate, this, this.onRed);
                    break;
                case EFuncDef.XXZDZ:
                    this._xxzdzModel = XXZDZModel.Ins;
                    this._xxzdzModel.on(XXZDZModel.RED_TIP, this, this.onRed);
                    break;
                case EFuncDef.WuShenDian:
                    this._wsdModel = WuShenDianModel.Ins;
                    this._wsdModel.on(WuShenDianModel.RED_TIP, this, this.onRed);
                    break;
                case EFuncDef.DaLuanDou:
                    this._daluanDou = DaLuanDouModel.Ins;
                    this._daluanDou.on(DaLuanDouModel.DA_LUAN_DOU_RED, this, this.onRed);
                    break;
            }
            this.onRed();
        }
        clear() {
            if (this.jjcModel) {
                this.jjcModel.off(JjcEvent.RedUpdate, this, this.onRed);
                this.jjcModel = null;
            }
            if (this.mainModel) {
                this.mainModel.off(MainEvent.AdventureBossUpdate, this, this.onRed);
                this.mainModel = null;
            }
            if (this._xxzdzModel) {
                this._xxzdzModel.off(XXZDZModel.RED_TIP, this, this.onRed);
                this._xxzdzModel = null;
            }
            if (this._wsdModel) {
                this._wsdModel.off(XXZDZModel.RED_TIP, this, this.onRed);
                this._wsdModel = null;
            }
            if (this._daluanDou) {
                this._daluanDou.off(DaLuanDouModel.DA_LUAN_DOU_RED, this, this.onRed);
                this._daluanDou = null;
            }
            this.skin.dot_red.visible = false;
        }
        onUndisplay() {
            this.skin.off(Laya.Event.UNDISPLAY, this, this.onUndisplay);
            Laya.Pool.recover(this.clsKey, this.skin);
            this.vo = null;
        }
        onRed() {
            if (this.jjcModel) {
                this.skin.dot_red.visible = this.jjcModel.mRed;
                return;
            }
            if (this.mainModel) {
                this.skin.dot_red.visible = this.mainModel.mYewaiBossRed;
                return;
            }
            if (this._xxzdzModel) {
                this.skin.dot_red.visible = this._xxzdzModel.isRedTip();
                return;
            }
            if (this._wsdModel) {
                this.skin.dot_red.visible = this._wsdModel.isRedTip();
                return;
            }
            if (this._daluanDou) {
                this.skin.dot_red.visible = this._daluanDou.isDotMain();
                return;
            }
            this.skin.dot_red.visible = MainModel.Ins.getHasRed(this.vo.funcid);
        }
    }
    class MainBottomPopView extends ui.views.main.ui_main_bottom_popUI {
        constructor() {
            super();
            this.ctrList = [];
            this.bg1Offset = this.bg1.height - this.bg2.height;
            if (this['close1']) {
                this['close1'].on(Laya.Event.MOUSE_DOWN, this, this.onClickHandler);
            }
        }
        onClickHandler() {
            this.hide();
        }
        hide() {
            this.removeSelf();
            this.bg.visible = false;
            E.yinDaoMgr.removeYD();
        }
        showList(l) {
            let key = "SmallIconCtl";
            while (this.con1.numChildren > 0) {
                let cell = this.ctrList.shift();
                cell.skin.removeSelf();
                Laya.Pool.recover(key, cell);
            }
            let allHeight = 0;
            let _curIndex = 0;
            let cellW = 0;
            for (let i = 0; i < l.length; i++) {
                let vo = l[i];
                if (!vo.isClose) {
                    let item = Laya.Pool.getItemByClass(key, SmallIconCtl);
                    this.ctrList.push(item);
                    item.data = vo;
                    this.con1.addChild(item.skin);
                    item.skin.tf.text = vo.txt;
                    cellW = item.skin.width;
                    item.skin.icon1.skin = vo.icon;
                    item.btnCtl.setpos(0, _curIndex * item.skin.height);
                    _curIndex++;
                    this.con1.addChild(item.skin);
                    allHeight += item.skin.height;
                }
                this.con1.x = (this.width - cellW) / 2;
            }
            this.bg2.height = allHeight;
            this.bg1.height = this.bg1Offset + allHeight;
            this.height = this.bg2.y + this.bg2.height;
            this.hitArea = new Laya.Rectangle(0, 0, this.width, this.height);
            Laya.timer.callLater(this, this.onShow);
        }
        onShow() {
            E.yinDaoMgr.removeTS();
            E.yinDaoMgr.removeYD();
            E.yinDaoMgr.showYD(EViewType.Main);
            DebugUtil.draw(this, "#00ff00", this.width, this.showHeight);
        }
        set maskbg(img) {
            this.bg = img;
            img.on(Laya.Event.CLICK, this, this.hide);
        }
        get showHeight() {
            return this.height;
        }
    }

    exports.MainBottomPopIconVo = MainBottomPopIconVo;
    exports.MainBottomPopView = MainBottomPopView;
    exports.SmallIconCtl = SmallIconCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MainExpControl {
        constructor(_expbg, _expv, tf, Lvtf, lab_js, lab_js1, btn_js) {
            this.expbg = _expbg;
            this.expv = _expv;
            this.tf = tf;
            this.Lvtf = Lvtf;
            this.lab_js = lab_js;
            this.lab_js1 = lab_js1;
            this.btn_js = btn_js;
            ButtonCtl.Create(this.btn_js, new Laya.Handler(this, this.onBtnJsClick));
        }
        onBtnJsClick() {
            E.ViewMgr.Open(EViewType.JinShengView);
        }
        SetValue() {
            let cfg = ExpValueProxy.Ins.getBylv(MainModel.Ins.lv);
            if (cfg) {
                let v = MainModel.Ins.exp;
                let val = v / cfg.f_ExpValue;
                if (val > 1)
                    val = 1;
                this.Lvtf.text = "Lv. " + MainModel.Ins.lv;
                this.tf.text = v + "/" + cfg.f_ExpValue;
                this.SetProgress(val);
            }
        }
        SetProgress(v) {
            this.expv.width = v * this.expbg.width;
        }
        SetJS() {
            let cfg = UpstageRankProxy.Ins.getCfgByID(JinShengModel.Ins.promotionLevel);
            if (cfg) {
                this.lab_js.text = cfg.f_name;
                this.lab_js1.text = cfg.f_namestage;
                if (JinShengModel.Ins.isRedTip()) {
                    DotManager.addDot(this.btn_js, 10, -10);
                }
                else {
                    DotManager.removeDot(this.btn_js);
                }
            }
            else {
                DotManager.removeDot(this.btn_js);
            }
        }
    }

    exports.MainExpControl = MainExpControl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GuaJiCtl {
        constructor(skin) {
            this.mainCtl = new AvatarMainCtl();
            this.useTime = 26800;
            this._ui = skin;
            this.mainCtl.con = skin.role;
            this._tw1 = new Laya.Tween();
            this._tw2 = new Laya.Tween();
        }
        get myAvatar() {
            return this.mainCtl.mAvatar;
        }
        onInit() {
            this.onExit();
            this.tween1();
            LingChongModel.Ins.on(LingChongModel.Updata_LingChong, this, this.onUpdatePetView);
            this.initMainAvatar();
            this.onUpdatePetView();
            this._avatar = AvatarFactory.createFightMonsterAvatar(EAvatarDir.Left, 0, 0, false, MainModel.Ins.randomImageID);
            this._avatar.reset();
            this._ui.role1.addChild(this._avatar);
            Laya.timer.once(2000, this, this.avatarMove);
        }
        onUpdatePetView() {
            this.disposePet();
            this.createPet();
        }
        initMainAvatar() {
            this.mainCtl.create(new Laya.Handler(this, this.initCallBack));
        }
        initCallBack() {
            this.myAvatar.reset();
            this.myAvatar.dir = EAvatarDir.Right;
            this.myAvatar.play(EAvatarAnim.Move);
        }
        createPet() {
            let myData = LingChongModel.Ins.getSZPetData();
            if (myData) {
                let petId = myData.petId;
                let _pet = AvatarFactory.createPet(petId, false);
                _pet.play(EAvatarAnim.Stand);
                let dir = EAvatarDir.Right;
                _pet.dir = dir;
                this._ui.pet.addChild(_pet);
                this._pet = _pet;
            }
        }
        avatarMove() {
            let ran = RandomUtil.RandomRoundInt(1, 60);
            let cfg = Enemy_ImageProxy.Ins.getCfg(ran);
            if (this._avatar) {
                this._avatar.mSkin = Enemy_ImageProxy.Ins.toTSkin(cfg);
                this._avatar.visible = true;
                this._avatar.moveX(-200, 2000, Laya.Handler.create(this, this.moveAvEnd), EAvatarAnim.NormalStand);
                this._avatar.play(EAvatarAnim.NormalStand);
            }
        }
        moveAvEnd() {
            let offX = this._ui.role1.x - this._ui.role.x;
            if (this.myAvatar) {
                this._avatar.play(EAvatarAnim.Stand);
                this.myAvatar.moveX(offX - 310, 500, Laya.Handler.create(this, this.moveEnd), EAvatarAnim.Move);
            }
            this._tw1.pause();
            this._tw2.pause();
        }
        moveEnd() {
            if (!this.myAvatar)
                return;
            this.myAvatar.playOnce(EAvatarAnim.Attack, this, this.onAttackEnd);
        }
        tween1() {
            this._ui.img_m.x = 0;
            this._ui.img_m1.x = this._ui.img_m1.width - 1;
            this._tw1.to(this._ui.img_m, { x: -this._ui.img_m.width }, this.useTime, null, Laya.Handler.create(this, this.onTween1, [this._ui.img_m.width - 1, 0]));
            this._tw2.to(this._ui.img_m1, { x: 0 }, this.useTime, null, Laya.Handler.create(this, this.onTween2, [0, -this._ui.img_m.width]));
        }
        onTween1(wid, xx) {
            this._ui.img_m.x = wid;
            this._tw1.to(this._ui.img_m, { x: xx }, this.useTime, null, Laya.Handler.create(this, this.onTween1, [0, -this._ui.img_m.width]));
        }
        onTween2(wid, xx) {
            this._ui.img_m1.x = wid;
            this._tw2.to(this._ui.img_m1, { x: xx }, this.useTime, null, Laya.Handler.create(this, this.onTween2, [this._ui.img_m.width - 1, 0]));
        }
        onAttackEnd() {
            if (!this.myAvatar)
                return;
            this.myAvatar.playOnce(EAvatarAnim.Attack2, this, this.onAttackEnd1);
            this.onDie();
        }
        onDie() {
            if (this._avatar) {
                this._avatar.playOnce(EAvatarAnim.Die, this, this.onAttackEnd2);
            }
        }
        onAttackEnd1() {
            if (!this.myAvatar)
                return;
            this.myAvatar.play(EAvatarAnim.Stand);
        }
        onAttackEnd2() {
            if (this._avatar) {
                this._tw1.resume();
                this._tw2.resume();
                this._avatar.stop();
                this._avatar.visible = false;
                this._avatar.setPos(0, 0);
                if (this.myAvatar) {
                    this.myAvatar.moveX(0, 100);
                }
                this.myAvatar.play(EAvatarAnim.Move);
                let tt = GuaJiCfgProxy.Ins.GetDataById(1).f_EnemyCD * 1000;
                Laya.timer.once(tt, this, this.avatarMove);
            }
        }
        disposeMyAvatar() {
            this.mainCtl.free();
        }
        onExit() {
            LingChongModel.Ins.off(LingChongModel.Updata_LingChong, this, this.onUpdatePetView);
            Laya.timer.clear(this, this.avatarMove);
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
            this.disposePet();
            this.disposeMyAvatar();
            Laya.Tween.clearAll(this._ui.img_m);
            Laya.Tween.clearAll(this._ui.img_m1);
            this._tw1.clear();
            this._tw2.clear();
        }
        disposePet() {
            if (this._pet) {
                this._pet.dispose();
                this._pet = null;
            }
        }
    }

    exports.GuaJiCtl = GuaJiCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HuoDongShow extends ui.views.main.ui_huodong_itemUI {
        constructor() {
            super();
            this.maxRow = 4;
            this.mainIconList = [];
            this.clickSpr = new Laya.Sprite();
            this.bg = new Laya.Sprite();
            this.clickSpr.on(Laya.Event.CLICK, this, this.onClick);
            this.bg.on(Laya.Event.CLICK, this, this.onBg1Click);
        }
        clearLeftRight() {
            while (this.mainIconList.length) {
                let cell = this.mainIconList.shift();
                cell.dispose();
                Laya.Pool.recover(HuoDongShow.FuncSmallSmallIcon, cell);
            }
        }
        sortHandler(a, b) {
            if (a.f_pos < b.f_pos) {
                return -1;
            }
            else if (a.f_pos > b.f_pos) {
                return 1;
            }
            return 0;
        }
        getCfgList(id) {
            let _cfgList = [];
            let l = MainIconProxy.Ins.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_Uiexpand == id) {
                    _cfgList.push(cfg);
                }
            }
            _cfgList = _cfgList.sort(this.sortHandler);
            return _cfgList;
        }
        onBg1Click() {
        }
        onClick() {
            this.removeSelf();
        }
        getList(id) {
            let l = this.getCfgList(id);
            let res = [];
            let ids = "";
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_pos) {
                    cfg = MainModel.Ins.cfgByPos(cfg.f_pos);
                    if (cfg) {
                        res.push(cfg);
                    }
                }
                else {
                    ids += cfg.f_id + ",";
                }
            }
            if (debug && !StringUtil.IsNullOrEmpty(ids)) {
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, "t_MainIcon_dat f_pos is 0:--->f_id " + ids);
            }
            return res;
        }
        onLaterHandler() {
            if (this.parent.destroyed) {
                return;
            }
            let uiPos = this.parent.localToGlobal(new Laya.Point(this.x, this.y));
            this.clickSpr.x = -uiPos.x;
            this.clickSpr.y = -uiPos.y;
            this.hitArea = new Laya.Rectangle(-uiPos.x, -uiPos.y, Laya.stage.width, Laya.stage.height);
            this.clickSpr.width = Laya.stage.width;
            this.clickSpr.height = Laya.stage.height;
            if (debug) {
                this.clickSpr.graphics.clear();
                this.clickSpr.graphics.drawRect(0, 0, this.clickSpr.width - 1, this.clickSpr.height - 1, null, "#0000ff", 2);
            }
        }
        show(funcId, id) {
            let main = MainModel.Ins.mainView;
            if (main) {
                let cell = main.getByFuncId(funcId);
                let pos = cell.parent.localToGlobal(new Laya.Point(cell.x, cell.y));
                main.UI.addChild(this);
                const offsetVal = 100;
                let res = this.getList(id);
                this.width = Math.min(this.maxRow, res.length) * offsetVal;
                this.addChildAt(this.clickSpr, 0);
                this.con1.addChild(this.bg);
                this.clearLeftRight();
                let offsetX = 0;
                let offsetY = -offsetVal;
                let index = 0;
                for (let i = 0; i < res.length; i++) {
                    let cfg = res[i];
                    let item = Laya.Pool.getItemByClass(HuoDongShow.FuncSmallSmallIcon, FuncSmallIcon);
                    this.mainIconList.push(item);
                    item.initSkin(ui.views.main.ui_main_bottom_small_iconUI);
                    this.con1.addChild(item.skin);
                    if (index % this.maxRow == 0) {
                        offsetX = 10;
                        offsetY += offsetVal;
                    }
                    else {
                        offsetX += offsetVal;
                    }
                    index++;
                    item.refresh(item.skin, parseInt(cfg.f_funid), EButtonStyle.Pos, offsetX, offsetY);
                }
                this.height = Math.ceil(this.mainIconList.length / this.maxRow) * offsetVal;
                this.bg1.x = -39;
                this.bg1.y = -45;
                this.bg1.width = this.width + 70;
                this.bg1.height = this.height + 100;
                this.bg.hitArea = new Laya.Rectangle(0, 0, this.width, this.height);
                if (cell instanceof ui.views.main.ui_main_icon_09UI) {
                    let offset_w = 30;
                    let ox = pos.x - main.UI.x + main.UI.width / 2;
                    if (ox + this.width + offset_w > main.UI.width) {
                        ox = main.UI.width - this.width - offset_w;
                    }
                    let offset_start_x = 40;
                    if (ox - offset_start_x < 0) {
                        ox = offset_start_x;
                    }
                    this.x = ox;
                    this.y = pos.y - main.UI.y + main.UI.height / 2 + cell.height + 50;
                }
                else {
                    this.x = main.UI.width - this.width - 30;
                    this.y = pos.y - main.UI.y + main.UI.height / 2 - this.height + 100;
                }
                if (debug) {
                    if (!this._testSpr) {
                        this._testSpr = new Laya.Sprite();
                        this.addChild(this._testSpr);
                    }
                    this._testSpr.graphics.clear();
                    this._testSpr.graphics.drawRect(0, 0, this.width, this.height, null, "#ff0000", 1);
                }
                Laya.timer.callLater(this, this.onLaterHandler);
            }
        }
    }
    HuoDongShow.FuncSmallSmallIcon = "FuncSmallSmallIcon";

    exports.HuoDongShow = HuoDongShow;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RotCtl {
        constructor(img) {
            this.useTime = 200;
            img.on(Laya.Event.CLICK, this, this.onClickHandler);
            this.img = img;
        }
        isVisible() {
            return this.img.visible;
        }
        get isOpen() {
            return;
        }
        set vis(v) {
            this.img.visible = v;
        }
        onClickHandler() {
            if (!this.tween) {
                this.tween = new Laya.Tween();
            }
            let mainView = E.ViewMgr.Get(EViewType.Main);
            mainView.setLayerEvt(true);
            if (this.img.rotation == 0) {
                mainView.setList(true);
            }
            else if (this.img.rotation == -90) {
                mainView.setList(false);
            }
        }
    }
    class LieBiaoBtn {
        init() {
            DebugUtil$1.draw(this.skin);
            this.rot = new RotCtl(this.skin.botbtn);
        }
        play(v) {
            if (v) {
                Laya.Tween.to(this.skin.botbtn, { rotation: -90 }, 200);
            }
            else if (!v) {
                Laya.Tween.to(this.skin.botbtn, { rotation: 0 }, 200);
            }
        }
        updateRed() {
            let model = MainModel.Ins;
            this.rot.vis = !MainModel.Ins.verify;
            if (this.rot.isVisible()) {
                if (model.bMailRed ||
                    model.boxSettingRed ||
                    model.getHasRed(EFuncDef.GameCirle) ||
                    model.isVipKFRedTip()) {
                    this.skin.liebiao_red.visible = true;
                }
                else {
                    this.skin.liebiao_red.visible = false;
                }
            }
            else {
                this.skin.liebiao_red.visible = false;
            }
        }
    }

    exports.LieBiaoBtn = LieBiaoBtn;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DrawCallButtonCtl extends ButtonCtl {
        constructor(skin, onClick = null, lb = null, red = null) {
            super(skin, onClick);
            DebugUtil$1.draw(skin);
            this.lb = lb;
            this.red = red;
        }
        set visible(v) {
            super.visible = v;
            if (this.lb) {
                this.lb.visible = v;
            }
            if (this.red) {
                this.red.visible = v;
            }
        }
        get isOpen() {
            return true;
        }
    }

    exports.DrawCallButtonCtl = DrawCallButtonCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SettingBtn extends DrawCallButtonCtl {
        constructor(skin, url = "", text = "", click = null) {
            super(skin, click);
            skin.bg.skin = url;
            skin.tf.text = text;
            this.redImg = skin.redimg;
            skin.on(Laya.Event.DISPLAY, this, this.onDisplay);
            skin.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        onDisplay() {
        }
        onUnDisplay() {
        }
        set redFlag(v) {
            this.redImg.visible = v;
        }
        get isOpen() {
            if (this.funcid) {
                return MainModel.Ins.isOpenAllByFuncid(this.funcid + "");
            }
            return true;
        }
    }
    class LeftSmallFuncIcon extends SettingBtn {
        constructor(skin, funcID) {
            super(skin);
            this.funcID = funcID;
            this.cfg = FuncProxy.Ins.getCfgByFuncId(this.funcID);
            skin.bg.skin = `remote/main/main/${this.cfg.f_sub_icon}`;
            skin.tf.text = this.cfg.f_name;
            skin.redimg.visible = false;
            this.clickHandler = new Laya.Handler(this, this.onClick);
        }
        onClick() {
            E.ViewMgr.OpenByFuncid(this.funcID);
        }
        get isOpen() {
            return TaskModel.Ins.isFuncOpen(this.funcID);
        }
    }

    exports.LeftSmallFuncIcon = LeftSmallFuncIcon;
    exports.SettingBtn = SettingBtn;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LeftMidIcon extends ui.views.main.ui_little_iconUI {
        get dot() {
            return this.redimg;
        }
        get icon() {
            return this.bg;
        }
    }
    class EmailBtn extends SettingBtn {
        constructor(skin) {
            super(skin, "remote/main/main/yj.png", E.getLang("email"), null);
            this.model = MainModel.Ins;
            this.clickHandler = new Laya.Handler(this, this.onClick);
        }
        onClick() {
            E.ViewMgr.Open(EViewType.Mail);
        }
        onDisplay() {
            this.model.on(MainEvent.MailRed, this, this.updateRed);
            this.updateRed();
        }
        onUnDisplay() {
            this.model.off(MainEvent.MailRed, this, this.updateRed);
        }
        updateRed() {
            this.redImg.visible = this.model.bMailRed;
        }
    }
    class YaoQingBtn extends SettingBtn {
        constructor(skin) {
            super(skin, "remote/main/main/yq.png", E.getLang("yaoqinglb"), null);
            this.funcid = EFuncDef.YaoQing;
            this.clickHandler = new Laya.Handler(this, this.onYQHandler);
        }
        onYQHandler() {
            MainModel.Ins.openFunc(this.funcid);
        }
        onDisplay() {
            YaoQingModel.Ins.on(YaoQingModel.UPDATA_RED, this, this.onRedUpdate);
            this.onRedUpdate();
        }
        onUnDisplay() {
            YaoQingModel.Ins.off(YaoQingModel.UPDATA_RED, this, this.onRedUpdate);
        }
        onRedUpdate() {
            this.redFlag = YaoQingModel.Ins.YQRed;
        }
    }
    class DouyinClientButton extends FuncSmallIcon {
        updateLogicVis(v) {
            if (this.douyinBtn) {
                this.douyinBtn.hide();
            }
            if (v) {
                if (this.douyinBtn) {
                    this.douyinBtn.show();
                }
                else {
                    Laya.timer.frameLoop(1, this, this.checkSkin);
                }
            }
        }
        checkSkin() {
            if (this.skin.parent) {
                Laya.timer.clear(this, this.checkSkin);
                let o = getPosSize$1(this.skin);
                if (!this.douyinBtn) {
                    this.douyinBtn = SdkButtonMgr.createClientButton(o);
                }
                this.douyinBtn.show();
            }
        }
    }
    class LeftLieBiao {
        constructor() {
            this.midIcons = [];
            this.midbtnCon = new Laya.Sprite();
            this.cellGap = 90;
            this.btnList = [];
        }
        get visible() {
            return this.con.visible;
        }
        set visible(v) {
            this.con.visible = v;
        }
        onResSort(a, b) {
            if (a.f_mid_left_pos > b.f_mid_left_pos) {
                return -1;
            }
            else if (a.f_mid_left_pos < b.f_mid_left_pos) {
                return 1;
            }
            return 0;
        }
        refresh() {
            let _count = 0;
            for (let i = 0; i < this.midIcons.length; i++) {
                let icon = this.midIcons[i];
                icon.refreshView();
                if (icon.isOpen) {
                    icon.btnCtl.setpos(_count * this.cellGap, 0);
                    _count++;
                }
            }
        }
        setLeftMid(v) {
            this.midbtnCon.visible = v;
            this.updateSdkButton();
        }
        updateSdkButton() {
            let v = this.midbtnCon.visible;
            if (E.ViewMgr.HasFrameOpenExcept([EViewType.Main])) {
                v = false;
            }
            for (let i = 0; i < this.midIcons.length; i++) {
                let icon = this.midIcons[i];
                icon.updateLogicVis(v);
            }
        }
        initMidBtn() {
            let l = MainIconProxy.Ins.List;
            let res = [];
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_mid_left_pos) {
                    res.push(cfg);
                }
            }
            res = res.sort(this.onResSort);
            for (let i = 0; i < res.length; i++) {
                let cfg = res[i];
                if (this.model.isOpenAllByFuncid(cfg.f_funid)) {
                    let _skin = new LeftMidIcon();
                    let _cls;
                    switch (parseInt(cfg.f_funid)) {
                        case EFuncDef.DouYinClient:
                            _cls = DouyinClientButton;
                            break;
                        default:
                            _cls = FuncSmallIcon;
                            break;
                    }
                    let icon = new _cls();
                    icon.refresh(_skin, parseInt(cfg.f_funid), EButtonStyle.Pos);
                    this.midbtnCon.addChild(_skin);
                    this.midIcons.push(icon);
                }
            }
        }
        init(con, leftCon) {
            this.model = MainModel.Ins;
            leftCon.addChildAt(this.midbtnCon, 0);
            this.initMidBtn();
            this.con = con;
            let _skinCls = ui.views.main.ui_little_iconUI;
            this._skinCls = _skinCls;
            this.yaoqingBtn = new YaoQingBtn(new _skinCls());
            this.settingBtn = new SettingBtn(new _skinCls(), "remote/main/main/sz.png", E.getLang("setting"), new Laya.Handler(this, this.onBtnSZClick));
            this.mailBtn = new EmailBtn(new _skinCls());
            this.btnList.push(this.yaoqingBtn, this.settingBtn, this.mailBtn);
            this.createBottomBtns();
            let cellGap = this.cellGap;
            let firstCount = 4;
            let indexpos = 0;
            for (let i = 0; i < firstCount; i++) {
                let btn = this.btnList[i];
                if (btn && btn.isOpen) {
                    let x = (indexpos + 1) * cellGap;
                    let y = -1 * cellGap;
                    btn.setpos(x, y);
                    this.con.addChild(btn.skin);
                    if (indexpos == 0) {
                        this.midbtnCon.x = x + this.con.x;
                        this.midbtnCon.y = y + this.con.y;
                    }
                    indexpos++;
                }
            }
            let index = 0;
            for (let i = firstCount; i < this.btnList.length; i++) {
                let btn = this.btnList[i];
                if (btn && btn.isOpen) {
                    btn.setpos(index * cellGap, -2 * cellGap);
                    this.con.addChild(btn.skin);
                    index++;
                }
            }
        }
        createBotLittleBtn(url, name, funcid) {
            let btnCtl = new SettingBtn(new this._skinCls(), url, name, new Laya.Handler(this, this.onOpenFunc, [funcid]));
            btnCtl.funcid = funcid;
            btnCtl.redFlag = false;
            this.btnList.push(btnCtl);
            return btnCtl;
        }
        onOpenFunc(funcid) {
            this.model.openFunc(funcid);
        }
        createBottomBtns() {
            this.createBotLittleBtn(`remote/main/main/ch_rk.png`, E.getLang("ch01"), EFuncDef.chenghao);
            this.btn_daily_share = this.createBotLittleBtn(`remote/main/main/fx.png`, E.getLang("fx"), EFuncDef.FenXiang);
            this.btn_tjzm = this.createBotLittleBtn(`remote/main/main/tjzm.png`, E.getLang("tjzm"), EFuncDef.TianJiaZhuoMian);
            this.btn_group_share = this.createBotLittleBtn(`remote/main/main/fxdq.png`, E.getLang("fxdq"), EFuncDef.GroupShare);
        }
        onBtnSZClick() {
            E.ViewMgr.Open(EViewType.SheZhiView);
        }
        set openStatus(v) {
            this.setLeftMid(!v);
            for (let i = 0; i < this.btnList.length; i++) {
                let btn = this.btnList[i];
                btn.visible = v;
            }
            if (v) {
                this.updateRed();
            }
        }
        updateRed() {
            this.refresh();
            this.mailBtn.updateRed();
            if (MainModel.Ins.boxSettingRed) {
                this.settingBtn.redFlag = true;
            }
            else {
                this.settingBtn.redFlag = false;
            }
            const data = MainModel.Ins.shareReward;
            if (data) {
                const arr = [
                    { ui: this.btn_daily_share, funcId: EFuncDef.FenXiang },
                    { ui: this.btn_tjzm, funcId: EFuncDef.TianJiaZhuoMian },
                    { ui: this.btn_group_share, funcId: EFuncDef.GroupShare },
                ];
                for (const item of arr) {
                    const btn = item.ui;
                    const funcId = item.funcId;
                    const d = data.dataList.find(o => o.funcId === funcId);
                    if (d && (d.state !== 3)) {
                        btn.visible = true;
                        if (d.state === 2) {
                            btn.redFlag = true;
                        }
                        else {
                            btn.redFlag = false;
                        }
                    }
                    else {
                        btn.visible = false;
                    }
                }
            }
        }
    }

    exports.LeftLieBiao = LeftLieBiao;
    exports.YaoQingBtn = YaoQingBtn;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MainViewAdaptation {
        init() {
            this.initY = this.skin.bottomAdaptation.y;
            this.bgOffsetY = this.skin.bg.y - this.skin.bottomAdaptation.y;
        }
        layout() {
            let pos = this.skin.adb.parent.localToGlobal(new Laya.Point(this.skin.adb.x, this.skin.adb.y));
            if (!this._pos) {
                this._pos = pos;
            }
            if (Laya.stage.height > ScreenAdapter.DefaultHeight) {
                let offsetY = 49;
                this.skin.bottomAdaptation.y = this.initY + this._pos.y - ScreenAdapter.DefaultHeight - Math.abs(offsetY);
            }
            this.skin.bg.y = this.skin.bottomAdaptation.y + this.bgOffsetY;
        }
        getTabBarHeight() {
            let systemInfo = wx.getSystemInfoSync();
            let pxToRpxScale = ScreenAdapter.RefWidth / systemInfo.windowWidth;
            let ktxStatusHeight = systemInfo.statusBarHeight * pxToRpxScale;
            let navigationHeight = 44 * pxToRpxScale;
            let ktxWindowWidth = systemInfo.windowWidth * pxToRpxScale;
            let ktxWindowHeight = systemInfo.windowHeight * pxToRpxScale;
            let ktxScreentHeight = systemInfo.screenHeight * pxToRpxScale;
            let tabBarHeight = ktxScreentHeight - ktxStatusHeight - navigationHeight - ktxWindowHeight;
            return tabBarHeight;
        }
    }

    exports.MainViewAdaptation = MainViewAdaptation;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MainViewConf {
    }
    MainViewConf.MID_MAX_BTN = 13;
    MainViewConf.MID_FIRST_COUNT = 7;
    MainViewConf.iconCls = ui.views.main.ui_main_center_iconUI;

    exports.MainViewConf = MainViewConf;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YanWuIcon extends FuncSmallIcon {
        constructor() {
            super();
            this.refresh(new MainViewConf.iconCls(), EFuncDef.HeroHouse, EButtonStyle.Mid);
            this._heroModel = HeroHouseModel.Ins;
            this._heroModel.on(GymEvent.FightAnimPlayEnd, this, this.onFightAnimPlayEnd);
            this._heroModel.on(GymEvent.InvitePopUpdate, this, this.onFightAnimPlayEnd);
            this._heroModel.on(GymEvent.RemovePop, this, this.onFightAnimPlayEnd);
            this.onFightAnimPlayEnd();
        }
        onFightAnimPlayEnd() {
            Laya.timer.once(100, this, this.upDataView);
        }
        upDataView() {
            let str = this._heroModel.animInviteVo ? "演武中" : "";
            this.statusLabel = str;
        }
        update() {
            this.onFightAnimPlayEnd();
        }
    }
    class CiFuIcon extends FuncSmallIcon {
        constructor() {
            super();
            this.refresh(new MainViewConf.iconCls(), EFuncDef.CiFu, EButtonStyle.Mid);
            HuYouModel.Ins.on(HuYouModel.UPDATA_AUTO, this, this.onUpdateEvt);
            HuYouModel.Ins.on(HuYouModel.UPDATA_VIEW, this, this.onUpdateEvt);
        }
        onUpdateEvt() {
            let v = HuYouModel.Ins.isAuto;
            this.statusLabel = v ? "祈福中" : "";
        }
        update() {
            this.onUpdateEvt();
        }
    }

    exports.CiFuIcon = CiFuIcon;
    exports.YanWuIcon = YanWuIcon;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MainIconListBase {
        constructor() {
            this.cellGap = 0;
            this.minRow = 1;
        }
        f_posSortHandler(a, b) {
            if (a.f_pos < b.f_pos) {
                return -1;
            }
            else if (a.f_pos > b.f_pos) {
                return 1;
            }
            return 0;
        }
        f_sortSortHandler(a, b) {
            if (a.f_sort < b.f_sort) {
                return -1;
            }
            else if (a.f_sort > b.f_sort) {
                return 1;
            }
            return 0;
        }
    }

    exports.MainIconListBase = MainIconListBase;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MidBtnList extends MainIconListBase {
        constructor() {
            super(...arguments);
            this.isTurnOn = false;
            this.cellGap = 10;
            this.tw = new Laya.Tween();
            this._iconCfgList = [];
        }
        init() {
            this.curIconList = [];
            let l1 = MainIconProxy.Ins.List;
            for (let i = 0; i < l1.length; i++) {
                let cfg = l1[i];
                if (cfg.f_mid_pos) {
                    this._iconCfgList.push(cfg);
                }
            }
            let nowCount = MainViewConf.MID_MAX_BTN - this._iconCfgList.length;
            for (let i = 0; i < nowCount; i++) {
                this._iconCfgList.push("Empty");
            }
            this._iconCfgList.sort(this.f_sortSortHandler);
            this.moreBtnCtl = ButtonCtl.CreateBtn(this.moreBtn, this, this.onMoreClick);
            this.moreplus = this.moreBtn.getChildByName("moreplus");
            this.morntf = this.moreBtn.getChildByName("morntf");
            this.morered = this.moreBtn.getChildByName("morered");
            this.mornBg.on(Laya.Event.CLICK, this, this.onMaskClick);
            MainModel.Ins.on(MainEvent.FuncSmallIconUpdate, this, this.onRedUpdate);
            this.moreBtnCtl.visible = false;
        }
        onMornBgDisplay() {
        }
        updateRed() {
            let _dot = false;
            for (let i = MainViewConf.MID_FIRST_COUNT - 1; i < this.curIconList.length; i++) {
                let cell = this.curIconList[i];
                if (cell && MainModel.Ins.getHasRed(cell.funcId)) {
                    _dot = true;
                    break;
                }
            }
            this.morered.visible = _dot;
        }
        onRedUpdate() {
            this.updateRed();
        }
        onMaskClick(e) {
            this.onMoreClick();
        }
        onMoreClick() {
            this.isTurnOn = !this.isTurnOn;
            this.tw.clear();
            let useTime = 200;
            let moreplus = this.moreBtn.getChildByName("moreplus");
            this.moreplus = moreplus;
            if (this.isTurnOn) {
                this.tw.to(moreplus, { rotation: 45 }, useTime);
            }
            else {
                this.tw.to(moreplus, { rotation: 0 }, useTime);
            }
            this.refresh();
        }
        getEmptyItem() {
            for (let i = 0; i < this.curIconList.length; i++) {
                let icon = this.curIconList[i];
                if (!icon.used && icon.funcId == 0) {
                    icon.used = true;
                    return icon;
                }
            }
            let icon = new FuncSmallIcon();
            icon.initSkin(MainViewConf.iconCls);
            icon.used = true;
            this.curIconList.push(icon);
            return icon;
        }
        getItem(funcid) {
            for (let i = 0; i < this.curIconList.length; i++) {
                let icon = this.curIconList[i];
                if (!icon.used && icon.funcId == funcid) {
                    icon.used = true;
                    return icon;
                }
            }
            let icon;
            switch (funcid) {
                case EFuncDef.CiFu:
                    icon = new CiFuIcon();
                    break;
                case EFuncDef.HeroHouse:
                    icon = new YanWuIcon();
                    break;
                default:
                    icon = new FuncSmallIcon();
                    break;
            }
            icon.used = true;
            icon.initSkin(MainViewConf.iconCls);
            icon.update();
            this.curIconList.push(icon);
            return icon;
        }
        getByName(name) {
            if (this.curIconList) {
                for (let i = 0; i < this.curIconList.length; i++) {
                    let icon = this.curIconList[i];
                    if (icon.used && icon.skin.name == name) {
                        return icon.skin;
                    }
                }
            }
        }
        refresh() {
            if (this.isTurnOn) {
                this.morntf.text = "关闭";
                this.moreplus.rotation = 45;
                this.mornBg.visible = true;
                this.leftCon.visible = false;
            }
            else {
                this.morntf.text = "更多";
                this.moreplus.rotation = 0;
                this.mornBg.visible = false;
                this.leftCon.visible = true;
            }
            for (let i = 0; i < this.curIconList.length; i++) {
                let icon = this.curIconList[i];
                icon.used = false;
                icon.dispose();
            }
            let sx = this.cellGap;
            let sy = 0;
            let row = 0;
            let cellHeight;
            this.minRow = MainViewConf.MID_FIRST_COUNT;
            for (let i = 0; i < this._iconCfgList.length; i++) {
                let cfg = this._iconCfgList[i];
                if (row >= this.minRow) {
                    if (this.minRow == MainViewConf.MID_FIRST_COUNT) {
                        this.con.addChild(this.moreBtn);
                        this.moreBtnCtl.setpos(sx, sy);
                    }
                    this.minRow = MainViewConf.MID_FIRST_COUNT + 1;
                    row = 0;
                    sx = this.cellGap;
                    sy -= cellHeight;
                    if (!this.isTurnOn) {
                        break;
                    }
                }
                let item;
                if (typeof cfg == "string" && cfg == "Empty") {
                    item = this.getEmptyItem();
                    item.midEmptyStatus();
                    item.setPos(sx, sy);
                }
                else {
                    item = this.getItem(parseInt(cfg.f_funid));
                    item.skin.name = cfg.f_mid_name;
                    item.refresh(item.skin, parseInt(cfg.f_funid), EButtonStyle.Mid, sx, sy);
                }
                cellHeight = item.skin.height + this.cellGap;
                this.con.addChild(item.skin);
                item.skin.zOrder = this._iconCfgList.length - i;
                sx += item.skin.width + this.cellGap;
                row++;
            }
            this.updateRed();
        }
    }

    exports.MidBtnList = MidBtnList;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TaskCell {
        constructor() {
        }
        set skin(v) {
            this._skin = v;
            DebugUtil$1.draw(this._skin, "#0000ff");
        }
        get skin() {
            return this._skin;
        }
    }

    exports.TaskCell = TaskCell;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TopBtnList extends MainIconListBase {
        constructor() {
            super(...arguments);
            this.cellGap = 30;
            this.minRow = 6;
            this._iconCfgList = [];
        }
        init() {
            this.curIconList = [];
            let l1 = MainIconProxy.Ins.List;
            for (let i = 0; i < l1.length; i++) {
                let cfg = l1[i];
                if (cfg.f_pos && !cfg.f_Uiexpand) {
                    this._iconCfgList.push(cfg);
                }
            }
            this._iconCfgList.sort(this.f_posSortHandler);
            MainModel.Ins.on(MainEvent.FuncSmallIconUpdate, this, this.onRedUpdate);
        }
        onRedUpdate() {
            this.refresh();
        }
        get maxCount() {
            return parseInt(System_RefreshTimeProxy.Ins.getNumberVal(70));
        }
        bindBtn(btn) {
            this.arrowBtn = btn;
            btn.on(Laya.Event.CLICK, this, this.onRightClick);
            DebugUtil.draw(btn);
        }
        onRightClick() {
            this.btnDir = -1 * this.btnDir;
            this.refresh();
        }
        set btnDir(v) {
            this.arrowBtn.scaleX = v;
        }
        get btnDir() {
            return this.arrowBtn.scaleX;
        }
        refresh() {
            Laya.timer.callLater(this, this.onUpdate);
        }
        onUpdate() {
            while (this.curIconList.length) {
                let cell = this.curIconList.pop();
                Laya.Pool.recover(TopBtnList.FuncSmallIconKey09, cell);
                cell.dispose();
            }
            let sx = this.cellGap;
            let sy = 0;
            let row = 0;
            let cellHeight;
            let openCount = 0;
            let maxW = 0;
            for (let i = 0; i < this._iconCfgList.length; i++) {
                let cfg = this._iconCfgList[i];
                if (openCount >= this.maxCount && this.btnDir == -1) ;
                else if (this.isOpen(cfg)) {
                    openCount++;
                    if (row >= this.minRow) {
                        row = 0;
                        sx = this.cellGap;
                        sy += cellHeight;
                    }
                    let item = Laya.Pool.getItemByClass(TopBtnList.FuncSmallIconKey09, FuncSmallIcon);
                    this.curIconList.push(item);
                    item.initSkin(ui.views.main.ui_main_icon_09UI);
                    cellHeight = item.skin.height + this.cellGap;
                    item.refresh(item.skin, parseInt(cfg.f_funid), EButtonStyle.Pos, sx, sy);
                    this.con.addChild(item.skin);
                    sx += item.skin.width + this.cellGap;
                    row++;
                    if (sx >= maxW) {
                        maxW = sx;
                    }
                }
            }
            DebugUtil.draw(this.con, "#ff0000", maxW, cellHeight);
            this.con.x = this.arrowBtn.x - maxW - this.arrowBtn.width;
            let fid = this.updateArrowBtnRed();
            if (fid) {
                DotManager.addDot(this.arrowBtn);
            }
            else {
                DotManager.removeDot(this.arrowBtn);
            }
            DebugUtil.drawTF(this.arrowBtn, fid, "#00ff00");
        }
        isOpen(cfg) {
            return cfg && MainModel.Ins.isOpenAllByFuncid(cfg.f_funid) && MainModel.Ins.isSubOpen(cfg);
        }
        updateArrowBtnRed() {
            let l = [];
            for (let i = 0; i < this._iconCfgList.length; i++) {
                let cfg = this._iconCfgList[i];
                if (this.isOpen(cfg)) {
                    l.push(cfg);
                }
            }
            let _newList = [];
            while (l.length > this.maxCount) {
                _newList.push(l.pop());
            }
            for (let i = 0; i < _newList.length; i++) {
                let cfg = _newList[i];
                if (main.hasRedMainCfg(cfg.f_id)) {
                    return cfg.f_funid;
                }
            }
            return 0;
        }
        getByFuncId(funcId) {
            let l = this.curIconList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.funcId == funcId) {
                    return cell.skin;
                }
            }
        }
    }
    TopBtnList.FuncSmallIconKey09 = "FuncSmallIcon09";

    exports.TopBtnList = TopBtnList;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FPScheck {
        constructor(val) {
            this._count = 0;
            this._timer = 0;
            if (!val) {
                return;
            }
            Laya.timer.loop(1, this, this.onLoopEvt);
        }
        onLoopEvt() {
            this._count++;
            var timer = Laya.Browser.now();
            if (timer - this._timer < 1000)
                return;
            let FPS = Math.round((this._count * 1000) / (timer - this._timer));
            if (FPS > 120) {
                SocketMgr.Ins.CloseSocket();
                E.ViewMgr.ShowMidError("加速齿轮" + this._count);
            }
            this._count = 0;
            this._timer = timer;
        }
    }

    exports.FPScheck = FPScheck;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.delayOpenTime = 0;
            this._mainViewAdaptation = new MainViewAdaptation();
            this._liebiaoBtn = new LieBiaoBtn();
            this._topbtns = new TopBtnList();
            this._leftLieBiao = new LeftLieBiao();
            this._midbtns = new MidBtnList();
            this.botListIcon = [];
            this.zhangheEffect = new HeroZhangHeView();
            this.PageType = EPageType.None;
            this._equipList = [];
            this._allBtns = [];
            this.attrViewList = [];
            this.funcIcons = [];
            this.iconLayer = new Laya.Sprite();
            this._botCtlList = [];
            this.leftPos = 100;
            this.mUnlock = false;
            this._isStat = false;
        }
        get chestAnim() {
            return this.model.animSettingList[this.model.animIndex].curAnim;
        }
        get labelLayer() {
            return this._ui.lbLayer1;
        }
        onEnter() {
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.onActivityUpdateData);
            ActivityModel.Ins.off(ActivityEvent.OpenCloseStatusUpdate, this, this.onActivityUpdateData);
            ActivityModel.Ins.off(ActivityEvent.PopWinUpdate, this, this.onPopWinUpdate);
            TreasureModel.ins.off(TreasureModel.EventUpdate, this, this.onTreasureUpdate);
            this.model.off(MainEvent.EventMainUpdateView, this, this.onBtnUpatde);
            TaskModel.Ins.off(TaskModel.TaskChanged, this, this.onTaskRrefresh);
            MainModel.Ins.off(MainEvent.UpdateAvatarNickName, this, this.onUpdateAvatarNickName);
            MainModel.Ins.off(MainEvent.MailRed, this, this.onMailRedEvt);
            RedUpdateModel.Ins.off(RedUpdateModel.UPDATA, this, this.updateTopEquip);
            ChengHaoModel.Ins.off(ChengHaoModel.UPDATA_CHENGHAO, this, this.onSetTitle);
            if (this.chestAnim) {
                this.chestAnim.Stop();
            }
            this.model.off(MainEvent.SWITCH_ANIM, this, this.onSwitchAnim);
            this.model.off(MainEvent.UPDATE_NEW_PLAYER, this, this.onMailRedEvt);
            this.model.off(MainEvent.Exp, this, this.UpdateExp);
            this.model.off(MainEvent.Level, this, this.UpdateExp);
            JinShengModel.Ins.off(JinShengModel.Updata_View, this, this.updataJS);
            ChatModel.Ins.off(ChatModel.UPDATA_MAIN_VIEW, this, this.onChatUpdate);
            this.gj && this.gj.onExit();
        }
        onBtnUpatde() {
            this.updatePosBtnView();
        }
        get huodong() {
            if (!this._huodongView) {
                this._huodongView = new HuoDongShow();
            }
            return this._huodongView;
        }
        get skin() {
            return this._ui;
        }
        reset() {
            if (this._ui) {
                this._ui.ts_img.visible = false;
            }
        }
        get isPlaying() {
            if (this.chestAnim) {
                return this.chestAnim.isPlaying;
            }
            return false;
        }
        UpdateMainAttr() {
            PlayerVoFactory.fillAttrView(this.attrViewList, new Laya.Handler(this, this.getValByType));
        }
        getValByType(type) {
            return PlayerVoFactory.getValString(MainModel.Ins.mPlayinfo.moneyInfo, type);
        }
        SetCenter() {
            super.SetCenter();
            if (this.bg) {
                this.bg.graphics.clear();
                if (this._ui.x > 0) {
                    let offsetX = (this._ui.x - this._ui.width / 2);
                    this.bg.graphics.drawRect(0, 0, offsetX, Laya.stage.height, Laya.stage.bgColor);
                    this.bg.x = -offsetX;
                }
            }
            let offset = 500;
            this._ui.hitArea = new Laya.Rectangle(0, -offset, this._ui.width, Laya.stage.height + 2 * offset);
        }
        set enableMaskBg(v) {
            if (v) {
                if (!this.bg) {
                    let bg = new Laya.Sprite();
                    this.bg = bg;
                }
                this._ui.addChild(this.bg);
            }
            else {
                if (this.bg) {
                    this.bg.removeSelf();
                }
            }
        }
        initAttr() {
            let l = [];
            for (let i = 0; i < 10; i++) {
                l.push(this._ui['attr' + i]);
            }
            this.attrViewList = l;
            {
                return;
            }
        }
        initLeftRightButton() {
        }
        getByFuncId(funcId) {
            let skin = this._topbtns.getByFuncId(funcId);
            if (skin) {
                return skin;
            }
        }
        initNormalBtn() {
            let botStyle = EButtonStyle.Bottom;
            this.initLeftRightButton();
            this.botListIcon.push(this.model.createFuncIcon('btn1', EFuncDef.Jjc, botStyle), this.model.createFuncIcon('btn4', EFuncDef.Alliance, botStyle), this.model.createFuncIcon('btn2', EFuncDef.SwitchStyle, botStyle), this.model.createFuncIcon('mainBtn', EFuncDef.Adventure, botStyle));
            this.funcIcons = this.funcIcons.concat(this.botListIcon);
            let _maxPos = 0;
            let l = MainIconProxy.Ins.List;
            for (let i = 0; i < l.length; i++) {
                let icon = l[i];
                if (icon.f_pos > 0 && icon.f_pos > _maxPos) {
                    _maxPos = icon.f_pos;
                }
            }
            this._maxPos = _maxPos;
        }
        onSelBot(selicon) {
            let l = this.botListIcon;
            for (let i = 0; i < l.length; i++) {
                let icon = l[i];
                if (icon == selicon) {
                    icon.selected = true;
                }
                else {
                    icon.selected = false;
                }
            }
        }
        setLayerEvt(v) {
            this.mUnlock = v;
        }
        playZhangHe() {
            let btnSkin = this.getBotPosByFuncId(EFuncDef.Adventure);
            this.zhangheEffect.play(btnSkin);
        }
        onAdd() {
            MainModel.Ins.on(MainEvent.ButtonCtlClick, this, this.onClickEvt);
        }
        onLayerChange(type, v) {
            if (type != EViewType.SmallTips) {
                E.ViewMgr.Close(EViewType.SmallTips);
            }
            if (this.mUnlock) {
                if (v) {
                    if (this._leftLieBiao.visible) {
                        this.setList(false);
                        this.model.boxOldShow = true;
                    }
                }
                else {
                    if (this.model.boxOldShow) {
                        this.setList(true);
                        this.model.boxOldShow = false;
                    }
                }
            }
            this._leftLieBiao.updateSdkButton();
            if (!v) {
                Laya.timer.callLater(this, this.onCallLater);
            }
        }
        onCallLater() {
            E.yinDaoMgr.showYD(9);
        }
        onClickEvt(skin) {
            let taskArr = TaskModel.Ins.guideArr;
            if (taskArr && taskArr.length > 0 && taskArr[E.yinDaoMgr.index]) {
                let sp = E.ViewMgr.getUIByKeySt(taskArr[E.yinDaoMgr.index].f_GuidePosition);
                if (!sp) {
                    console.log("onClickEvtNOSP>>>>>>>>>>>>>>>>", taskArr, taskArr[E.yinDaoMgr.index]);
                    return;
                }
                if (skin == sp) {
                    E.yinDaoMgr.index++;
                    E.yinDaoMgr.removeYD();
                    let gCfg = taskArr[E.yinDaoMgr.index];
                    if (gCfg) {
                        let arr = gCfg.f_GuidePosition.split("-");
                        E.yinDaoMgr.showYD(parseInt(arr[0]));
                    }
                }
            }
        }
        guajiInit() {
            let aui = new ui.views.main.ui_guaji_showUI();
            this._ui.guajiCon.addChild(aui);
            this.gj = new GuaJiCtl(aui);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = MainModel.Ins;
                this.UI = this._ui = new ui.views.main.ui_mainUI();
                this._mainViewAdaptation.skin = this._ui;
                this._mainViewAdaptation.init();
                DebugUtil$1.draw(this._ui.titleImg);
                this._ui.setdot.visible = false;
                let _taskCell = new TaskCell();
                _taskCell.skin = this._ui.reelitem;
                TaskModel.Ins.taskCell = _taskCell;
                this._topbtns.con = this._ui.topbtn_con;
                this._topbtns.init();
                this._topbtns.bindBtn(this._ui.rightBtn);
                this._midbtns.con = this._ui.midcon;
                this._midbtns.moreBtn = this._ui.moreBtn;
                this._midbtns.mornBg = this._ui.mornBg;
                this._midbtns.leftCon = this._ui.leftCon;
                this._midbtns.init();
                this._leftLieBiao.init(this._ui.rollCon, this._ui.leftCon);
                this._liebiaoBtn.skin = this._ui.liebaoBtn;
                if (!MainModel.Ins.verify) ;
                this.offsetY = this._ui.xiangziIcon.y - this._ui.bot2.y;
                this._ui.addChild(this.iconLayer);
                this._ui.addChild(this._ui.img_ts);
                this._ui.headImg.once(Laya.Event.RESIZE, this, this.onImgComplete);
                this.initAttr();
                this.initNormalBtn();
                this.onAdd();
                this._liebiaoBtn.init();
                this._ui.top1img.visible = false;
                this._plusCtl = FontCtlFactory.createMainPlus();
                ButtonCtl.Create(this._ui.huobi, new Laya.Handler(this, this.ybHandler));
                this._ui.headImg.on(Laya.Event.CLICK, this, this.onHeadImgClick);
                this._ui.titleImg.on(Laya.Event.CLICK, this, this.onTitleImgClick);
                this.yuanbaoAddCtl = new ButtonCtl(this._ui.yuanbao, new Laya.Handler(this, this.yuanBaoAdd));
                this._ui.tipsclick.on(Laya.Event.CLICK, this, this.onBottombtn1Handler);
                this.xianziBgCtl = new ButtonCtl(this._ui.xianziBg, new Laya.Handler(this, this.onXianziBg));
                this.model.reelEffect = new SpineEffectCtl(this._ui.reelitem.eff);
                this.model.reelCtl.init(this._ui.reelitem.juanzhou);
                this.mRoleData = this.model.mRoleData;
                this.expCtl = new MainExpControl(this._ui.expbg, this._ui.expv, this._ui.expTf, this._ui.Lvtf, this._ui.lab_js, this._ui.lab_js1, this._ui.btn_js);
                let btn;
                if (main.skinStyle == EMainSkin.Kotow) {
                    this._ui.boxTouchBtn.visible = true;
                    let animList = this.model.animSettingList;
                    for (let i = 0; i < animList.length; i++) {
                        let animCon = new Laya.Sprite();
                        animCon.visible = false;
                        animList[i].curAnim = new ChestAnimSpine(animCon, i);
                        this._ui.xiangziIcon.addChild(animCon);
                    }
                    this._ui.bg.skin = "static/bg2.jpg";
                    btn = ButtonCtl.Create(this._ui.xiangzi, new Laya.Handler(this, this.onStartGetChest), false);
                }
                else if (main.skinStyle == EMainSkin.Drum) {
                    this._ui.boxTouchBtn.visible = false;
                    this._ui.bg.skin = "static/bg3.jpg";
                    let fightSkin = new ui.views.main.ui_avatar_showUI();
                    this._ui.guajiCon.addChild(fightSkin);
                    if (Laya.Utils.getQueryString("debug_cache")) ;
                    else {
                        this.avatarFight = new AvatarFight();
                        this.avatarFight._ui = fightSkin;
                        if (this._ui.anim2) {
                            this.avatarFight.animCtl = new ChestAnimSpine(this._ui.anim2, ESpineAnimIndex.SmallDrum);
                        }
                    }
                    btn = ButtonCtl.Create(this._ui.drum, new Laya.Handler(this, this.onStartFight), false);
                }
                if (initConfig.platform == PlatformConfig.War3) {
                    this._ui.bg.skin = "static/bg1.jpg";
                }
                btn.useSound = false;
                DebugUtil$1.draw(this._ui.equipicon);
                if (E.Debug) {
                    this._ui.xiangzi.graphics.clear();
                    this._ui.xiangzi.graphics.drawRect(0, 0, this._ui.xiangzi.width, this._ui.xiangzi.height, null, "#ff0000", 1);
                }
                this.quickCtl = new ButtonCtl(this._ui.setbtn, new Laya.Handler(this, this.onQuickHandler));
                this._ui.ts_img.on(Laya.Event.CLICK, this, this.onTsHandler);
                if (MainModel.Ins.verify) {
                    this.quickCtl.visible = false;
                }
                ButtonCtl.Create(this._ui.maskBg, new Laya.Handler(this, this.onBtnMBGClick), false);
                this.initEquip();
                this.enableMaskBg = false;
                this._ui.img_ts.visible = false;
                this._ui.on(Laya.Event.DISPLAY, this, this.onDisplay);
                if (debug) {
                    let spr1 = new Laya.Sprite();
                    spr1.graphics.drawRect(0, 0, this._ui.width, this._ui.height, null, "#0000ff", 1);
                    spr1.mouseThrough = true;
                    spr1.mouseEnabled = false;
                    this._ui.addChild(spr1);
                    let _timeLabel = new Laya.HTMLDivElement();
                    _timeLabel.style.align = "left";
                    _timeLabel.style.fontSize = 18;
                    _timeLabel.style.color = "#ffffff";
                    _timeLabel.mouseEnabled = false;
                    this._timeLabel = _timeLabel;
                    Laya.Utils.getQueryString("hidelabel") && (this._timeLabel.visible = false);
                    let wx = window['wx'];
                    if (wx) {
                        let o = wx.getSystemInfoSync();
                        _timeLabel.y = o.statusBarHeight;
                    }
                    Laya.stage.addChild(_timeLabel);
                }
                this.model.on(MainEvent.MainViewLayerChange, this, this.onLayerChange);
                this.initDc();
                let val = parseInt(System_RefreshTimeProxy.Ins.getVal(34));
                new FPScheck(val);
                MainModel.Ins.event(MainEvent.MainViewInit);
                this.onShareReward();
                this._ui.ts_img.visible = false;
                this._ui.chatbg.on(Laya.Event.CLICK, this, this.onShowChat);
                DebugUtil$1.draw(this._ui.chatbg);
            }
        }
        onStartFight() {
            if (MainModel.Ins.curChest.type == EOpenChest.Auto) {
                this.model.StopChestProxy();
                return;
            }
            this.avatarFight.fight();
        }
        onShowChat() {
            E.ViewMgr.Open(EViewType.ChatView);
        }
        onSwitchAnim() {
            let animList = this.model.animSettingList;
            let vo = animList[this.model.animIndex];
            if (this.model.animIndex == 0) ;
            for (let i = 0; i < animList.length; i++) {
                let setting = animList[i];
                if (setting.curAnim) {
                    if (setting.index == this.model.animIndex) {
                        setting.curAnim.container.visible = true;
                    }
                    else {
                        setting.curAnim.container.visible = false;
                    }
                }
            }
        }
        openServerHour() {
            return ((TimeUtil.serverTime - TimeUtil.openTime.toNumber() / 1000) / 3600);
        }
        f_testLoop() {
            if (TimeUtil.openTime) {
                let l = t_Platform.Ins.List;
                let cell = l.find(o => o.f_platform == initConfig.platform);
                let platform_name = "";
                if (cell) {
                    platform_name = cell.f_name;
                }
                this._timeLabel.innerHTML =
                    ("newRole:" + MainModel.Ins.serverVer) +
                        "当前服务器时间:" +
                        TimeUtil.timestamtoTime(TimeUtil.serverTimeMS, '-', ' ', ':', "0", true) + "<br>" +
                        "platform:" + initConfig.platform + "(<span style='font:18px' color='#ffff00'>" + platform_name + "</span>)<br>" +
                        "sdk_platform:" + E.get_SDK_platform() + "<br> + " +
                        "开服时间:" + TimeUtil.timestamtoTime(TimeUtil.openTime.toNumber()) + "<br>" + (main.skinStyle == EMainSkin.Drum ? "磕头" : "敲鼓") +
                        "已经开服:" + ((TimeUtil.serverTime - TimeUtil.openTime.toNumber() / 1000) / ActivityTimeUtils.OneDay).toFixed(2) + "天" + this.openServerHour() + "小时<br>" +
                        InitConfig.wxLoginResult.result.tcp + "<br>" +
                        "socket:" + InitConfig.getServerIp() + "<br>" +
                        InitConfig.getSyURL() + "<br>" +
                        InitConfig.getAsset() + "<br>" +
                        Version.cli_version + "<br>" +
                        "volume:" + Laya.SoundManager.musicVolume.toFixed(1) + "\t" + (Laya.SoundManager.musicVolume > 0 ? "▂▃▅" : "") + "<br>" +
                        "openId:" + LoginClient.Ins.openId + ",name:" + MainModel.Ins.mRoleData.NickName + "<br>" +
                        "<br><span style='font:24px' color='#ff0000'>gpu:" + Laya.Stat.gpuMemory + "cpu:" + Laya.Stat.cpuMemory + "drawcall:" + Math.floor(Laya.Stat.renderBatches / Laya.Stat['_count']) + "</span><br>server version:" + this.model.serverVer;
            }
            this._timeLabel.width = Laya.stage.width;
            if (!this._isStat) {
                if (initConfig.stat || HrefUtils.getVal("stat")) {
                    this._isStat = true;
                    Laya.Stat.show(0, 500);
                }
            }
        }
        initDc() {
            let labels = [
                this._ui.Lvtf,
                this._ui.nameTF,
                this._ui.tongqianTf,
                this._ui.yuanbaoTf,
            ];
            if (E.Debug) {
                this._ui.nameTF.mouseEnabled = true;
                this._ui.nameTF.on(Laya.Event.CLICK, this, () => {
                });
            }
        }
        onDisplay() {
            if (this._timeLabel) {
                Laya.timer.loop(1000, this, this.f_testLoop);
            }
            if (!this.model.mRoleData.mPlayer) {
                return;
            }
            Laya.timer.once(1, this, this.onLaterHandler);
            this.onBoxExtraChange();
        }
        onLaterHandler() {
            this._mainViewAdaptation.layout();
            MainModel.Ins.drawCall();
            this.setList(false);
            this.onStart();
        }
        onAutoHandler() {
            this._ui.chilun.rotation += 1;
        }
        set gear(v) {
            if (v) {
                Laya.timer.frameLoop(1, this, this.onAutoHandler);
            }
            else {
                Laya.timer.clear(this, this.onAutoHandler);
            }
        }
        onaddHero() {
        }
        playLevelUp() {
            SpineEffectManager.Ins.playOnce("o/spine/up/up", this._ui, this._ui.width / 2, this._ui.height / 2);
        }
        onQuickHandler() {
            if (!this.model.boxBoxCommitState) {
                let cfg = FuncProxy.Ins.getCfgByFid(EFuncDef.ChestAuto);
                E.ViewMgr.ShowMidError(FuncProxy.Ins.f_info(cfg));
                return;
            }
            if (this.model.curChest.type == EOpenChest.Auto) {
                this.model.StopChestProxy();
                return;
            }
            if (this.model.boxAuto.open) {
                E.ViewMgr.Open(EViewType.HighAutoChest);
            }
            else {
                E.ViewMgr.Open(EViewType.QuickSetting);
            }
        }
        onTsHandler(e) {
            e.stopPropagation();
            MainModel.Ins.showSmallTips('', E.getLang("plms"), this._ui.ts_img);
        }
        getBotPosByFuncId(funcid) {
            for (let i = 0; i < this.botListIcon.length; i++) {
                let icon = this.botListIcon[i];
                if (icon.funcId == funcid) {
                    let skin = icon.skin;
                    return skin;
                }
            }
        }
        openMushFunc(funcid) {
            if (!this.botIconView) {
                this.botIconView = new MainBottomPopView();
            }
            this.botIconView.maskbg = this._ui.top1img;
            this._ui.top1img.visible = true;
            let l = this.createByFunc(funcid);
            this.botIconView.showList(l);
            let offsetX = 21;
            let ox = 0;
            let btnSkin = this.getBotPosByFuncId(funcid);
            if (btnSkin) {
                ox = btnSkin.x;
            }
            let btnSize = 97;
            let resultX = ox - offsetX - (this.botIconView.bg1.width - btnSize) / 2;
            resultX = resultX < 0 ? 0 : resultX;
            if (resultX + this.botIconView.width > this._ui.width) {
                resultX = this._ui.width - this.botIconView.width;
            }
            this.botIconView.x = resultX;
            let adbPos = this._ui.adb.parent.localToGlobal(new Laya.Point(this._ui.adb.x, this._ui.adb.y));
            this.botIconView.y = adbPos.y - this.botIconView.showHeight - (Laya.stage.height - ScreenAdapter.DefaultHeight) / 2 - 129;
            this._ui.addChild(this.botIconView);
        }
        createBottomVo(funcId) {
            let vo = new MainBottomPopIconVo();
            vo.funcid = funcId;
            let icon = FuncProxy.Ins.getCfgByFuncId(funcId).f_sub_icon;
            vo.icon = `remote/main/main/${icon}`;
            vo.txt = FuncProxy.Ins.getFuncNameByFuncId(funcId);
            return vo;
        }
        createByFunc(funcId) {
            let mainCfg = MainIconProxy.Ins.getCfgByFuncid(funcId);
            let l = [];
            l.push(this.createBottomVo(funcId));
            if (mainCfg.f_funarr) {
                let arr = mainCfg.f_funarr.split("|");
                for (let i = 0; i < arr.length; i++) {
                    let func = arr[i];
                    l.push(this.createBottomVo(parseInt(func)));
                }
            }
            return l;
        }
        setList(v) {
            if (!this._oldMaskBgY) {
                this._oldMaskBgY = this._ui.maskBg.y;
            }
            this._ui.maskBg.visible = this._leftLieBiao.visible = v;
            for (let i = 0; i < this._botCtlList.length; i++) {
                this._botCtlList[i].onVisible(v);
            }
            this._liebiaoBtn.play(v);
            this.resetDcLabel(v);
        }
        resetDcLabel(v) {
            this.model.reelCtl.refresh();
            if (v) {
                this.botListVis = true;
            }
            else {
                this.botListVis = false;
            }
        }
        set botListVis(v) {
            this._leftLieBiao.openStatus = v;
            let vipOpen = parseInt(System_RefreshTimeProxy.Ins.getVal(26));
        }
        get isMaskBgVisible() {
            return this._ui && this._ui.maskBg.visible;
        }
        onBtnSZClick() {
            E.ViewMgr.Open(EViewType.SheZhiView);
        }
        onBtnCJKFClick() {
            E.ViewMgr.Open(EViewType.CjkfView);
        }
        onBtnMBGClick() {
            this.setList(false);
        }
        onStartGetChest() {
            let count = System_RefreshTimeProxy.Ins.getNumberVal(50);
            if (this.model.boxUsedCount == count - 1) {
                if (RedUpdateModel.Ins.getValByID(RedEnum.ZHANGHE_ANI) == 0) {
                    this.playZhangHe();
                    RedUpdateModel.Ins.save(RedEnum.ZHANGHE_ANI, 1);
                    return;
                }
            }
            if (!this.model.isAnimIdel) {
                return;
            }
            if (this.model.clickTimeMs + this.model.animUseMs > Laya.timer.currTimer) {
                LogSys$1.Log("动画未播放完成!", this.model.clickTimeMs, this.model.animUseMs, Laya.timer.currTimer);
                return;
            }
            this.model.clickTimeMs = Laya.timer.currTimer;
            LogSys$1.Log("鼠标点击宝箱");
            this.model.ClickChest();
        }
        initEquip() {
            this._equipList.push(new EquipItemView(this._ui.item0, EEquipType.Shoulder, false, 1), new EquipItemView(this._ui.item1, EEquipType.Casque, true, 1), new EquipItemView(this._ui.item2, EEquipType.Necklace, false, 1), new EquipItemView(this._ui.item3, EEquipType.Wrister, false, 1), new EquipItemView(this._ui.item4, EEquipType.Barde, true, 1), new EquipItemView(this._ui.item5, EEquipType.Gloves, false, 1), new EquipItemView(this._ui.item6, EEquipType.Waistband, false, 1), new EquipItemView(this._ui.item7, EEquipType.Trousers, false, 1), new EquipItemView(this._ui.item8, EEquipType.Weapon, true, 1), new EquipItemView(this._ui.item9, EEquipType.Ornament, false, 1), new EquipItemView(this._ui.item10, EEquipType.Shoe, false, 1), new EquipItemView(this._ui.item11, EEquipType.Shield, true, 1));
        }
        UpdateMoney() {
            this._ui.tongqianTf.text = StringUtil.val2m(this.mRoleData.getVal(ECellType.COPPER_MONEY)) + "";
        }
        UpdateGold() {
            this._ui.yuanbaoTf.text = StringUtil.val2m(this.mRoleData.gold) + "";
        }
        UpdateExp() {
            this.expCtl.SetValue();
            this.expCtl.SetJS();
        }
        updataJS() {
            this.expCtl.SetJS();
        }
        UpdatePlayerName() {
            this._ui.nameTF.text = this.mRoleData.getName();
        }
        UpdateBoxCnt() {
            this._ui.boxFc.text = this.mRoleData.getVal(ECellType.BOX).toString();
        }
        UpdateBoxLv() {
            this._ui.xianziLvTf.text = `Lv${this.model.mRoleData.getChestData().boxlv}`;
        }
        UpdateBattle() {
            let n = this.mRoleData.getBattleValue();
            let v = StringUtil.val2Atlas(n);
            this._plusCtl.setValue(this._ui.plugcon, v, "middle");
        }
        onSetTitle() {
            this._ui.titleImg.skin = MainModel.Ins.getTitleImg();
        }
        onShareReward() {
            this._leftLieBiao.updateRed();
        }
        onBoxExtraChange() {
            if (this._ui.ts_img.visible)
                return;
            const data = MainModel.Ins.boxExtra;
            if (data && data.dataList) {
                const item = data.dataList.find(o => o.id === 1);
                if (item) {
                    const conf = BoxExtraItemProxy.Ins.getConfByFid(1);
                    const limit = conf.f_TiredValue;
                    if (item.num >= limit) {
                        this._ui.ts_img.visible = true;
                        return;
                    }
                }
            }
            this._ui.ts_img.visible = false;
        }
        UpdateView(isInit = false) {
            this.onSetTitle();
            this.UpdateMoney();
            this.UpdateGold();
            this.UpdateExp();
            this.updataJS();
            this.UpdatePlayerName();
            this.UpdateBattle();
            this.UpdateEquip(isInit);
            this.UpdateMainAttr();
            this.UpdateBoxCnt();
            this.UpdateBoxLv();
            this.UpdateBtns();
            this.UpdateAnim(isInit);
            this.UpdateSmallIcon();
            TaskModel.Ins.InitUpdateTask(this._ui, this._allBtns);
        }
        UpdateSmallIcon() {
            let cell = this.model.getNotWear();
            if (cell) {
                this.UpdateEquipSmallIcon(cell.equipVo);
            }
            else {
                this.UpdateEquipSmallIcon(null);
            }
        }
        PlayAnim(_endHandler, _equipVo) {
            if (this.chestAnim) {
                let qua = 1;
                if (_equipVo) {
                    qua = _equipVo.quality;
                }
                this.chestAnim.Play(new Laya.Handler(this, () => {
                    this.UpdateAnim();
                }), qua);
                let duration = this.chestAnim.duration * 1000;
                this.model.animUseMs = duration;
                if (duration > 0) {
                    let animtime = HrefUtils.getHref('animtime');
                    let a = parseInt(animtime);
                    if (animtime) {
                        a = parseInt(animtime);
                    }
                    else {
                        a = 500;
                    }
                    duration -= a;
                }
                else {
                    duration = 500;
                }
                Laya.timer.once(duration - 500, this, () => {
                    this.UpdateEquipSmallIcon(_equipVo);
                });
                Laya.timer.once(duration, this, () => {
                    _endHandler.run();
                });
            }
            else {
                _endHandler.run();
            }
        }
        SetAnimStatus(_status, isInit) {
            if (this.chestAnim) {
                this.chestAnim.mStatus = _status;
                if (this.chestAnim.isPlaying) ;
                else {
                    this.UpdateAnim(isInit);
                }
            }
        }
        UpdateAnim(isInit = false) {
            this.chestAnim && this.chestAnim.updateAnim(isInit);
        }
        UpdateEquipSmallIcon(equip) {
        }
        ybHandler() {
            this.model.openMoney();
        }
        onHeadImgClick() {
            E.ViewMgr.Open(EViewType.SheZhiView);
        }
        onTitleImgClick() {
            this.model.openFunc(EFuncDef.chenghao);
        }
        yuanBaoAdd() {
            this.model.openGold();
        }
        setbtnHandler() {
        }
        onXianziBg() {
            E.ViewMgr.Open(EViewType.ChestLevelUp);
        }
        onBottombtn1Handler() {
            let _vo = new DetailShowVo();
            _vo.accoutID = MainModel.Ins.mRoleData.AccountId;
            _vo.moneyInfo = this.model.mRoleData.moneyInfo;
            _vo.wing = new stWing();
            _vo.wing.wingId = this.model.wingId;
            _vo.equipList = this.model.getEquipList();
            E.ViewMgr.Open(EViewType.Attr_detailed, null, _vo);
        }
        onUpdateAvatarNickName() {
            MainModel.Ins.setTTHead(this._ui.headImg, MainModel.Ins.mRoleData.headUrl);
            this.UpdatePlayerName();
        }
        onImgComplete() {
            LogSys$1.Log("onImgComplete...");
            MainModel.Ins.snapshot();
        }
        onInit() {
            this.gj && this.gj.onInit();
            this.avatarFight && this.avatarFight.onInit();
        }
        checkVaildCfg() {
            let l = [];
            l.push(ShopProxy.Ins);
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                cfg.checkVaild();
            }
        }
        onStart() {
            this.checkVaildCfg();
            this.onUpdateAvatarNickName();
            MainModel.Ins.on(MainEvent.MailRed, this, this.onMailRedEvt);
            this.model.on(MainEvent.EventMainUpdateView, this, this.onBtnUpatde);
            MainModel.Ins.on(MainEvent.AddHero, this, this.onaddHero);
            MainModel.Ins.on(MainEvent.UpdateAvatarNickName, this, this.onUpdateAvatarNickName);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onActivityUpdateData);
            ActivityModel.Ins.on(ActivityEvent.PopWinUpdate, this, this.onPopWinUpdate);
            ActivityModel.Ins.on(ActivityEvent.OpenCloseStatusUpdate, this, this.onActivityUpdateData);
            TaskModel.Ins.on(TaskModel.TaskChanged, this, this.onTaskRrefresh);
            RedUpdateModel.Ins.on(RedUpdateModel.UPDATA, this, this.updateTopEquip);
            ChengHaoModel.Ins.on(ChengHaoModel.UPDATA_CHENGHAO, this, this.onSetTitle);
            this.model.on(MainEvent.SWITCH_ANIM, this, this.onSwitchAnim);
            this.model.on(MainEvent.UPDATE_NEW_PLAYER, this, this.onMailRedEvt);
            TreasureModel.ins.on(TreasureModel.EventUpdate, this, this.onTreasureUpdate);
            this.model.on(MainEvent.Exp, this, this.UpdateExp);
            this.model.on(MainEvent.Level, this, this.UpdateExp);
            JinShengModel.Ins.on(JinShengModel.Updata_View, this, this.updataJS);
            this.model.on(MainEvent.ShareReward, this, this.onShareReward);
            this.model.on(MainEvent.BoxExtraChange, this, this.onBoxExtraChange);
            this.model.on(MainEvent.YXQRed, this, this.onMailRedEvt);
            ChatModel.Ins.on(ChatModel.UPDATA_MAIN_VIEW, this, this.onChatUpdate);
            this.onChatUpdate();
            this.onSwitchAnim();
            this.UpdateView(true);
            this.redUpdate();
            MainModel.Ins.goonQuick();
            let pos = this._ui.paoma.parent.localToGlobal(new Laya.Point(this._ui.paoma.x, this._ui.paoma.y));
            MainModel.Ins.paomaGobalPos = pos;
            MainModel.Ins.playPaoMaLight();
            MainModel.Ins.noticeSel.autoOpen();
            this.model.checkShowReward();
            E.ViewMgr.closeLoading();
        }
        onChatUpdate() {
            let l = ChatModel.Ins.chatWorldList;
            let msg;
            if (l && l.length > 0) {
                msg = l[l.length - 1];
            }
            if (msg) {
                this._ui.chatTf.text = StringUtil.convertName(`${msg.name}:${msg.chat}`, 15);
            }
            else {
                this._ui.chatTf.text = "";
            }
        }
        onTreasureUpdate() {
            this.updatePosBtnView();
        }
        onMailRedEvt() {
            this._liebiaoBtn.updateRed();
            this._leftLieBiao.updateRed();
        }
        playFullEffect() {
            if (this._ui) {
                let pos = this._ui.xiangziIcon.parent.localToGlobal(new Laya.Point(this._ui.xiangziIcon.x, this._ui.xiangziIcon.y));
                SpineEffectManager.Ins.playOnce(IconUtils.fulleffect, Laya.stage, pos.x, pos.y);
            }
        }
        redUpdate() {
            MainModel.Ins.updateMuchReds();
        }
        onTaskRrefresh() {
            this.updatePosBtnView();
        }
        onActivityUpdateData() {
            this.updatePosBtnView();
        }
        onPopWinUpdate() {
            this.updatePosBtnView();
        }
        clearLeftRight() {
        }
        updatePosBtnView() {
            let l = this.funcIcons;
            for (let i = 0; i < l.length; i++) {
                let icon = l[i];
                icon.refreshView();
            }
            this._topbtns.refresh();
            this._midbtns.refresh();
            this.redUpdate();
            this._ui.chatbg.visible = true;
        }
        updateLayarPos(start, end, ox) {
            let maxCount = 3;
            let sy = 0;
            let offset = MainView.posOffset;
            let k = 0;
            let x = 0;
            for (let i = start; i <= end; i++) {
                let cfg = this.model.cfgByPos(i);
                if (cfg && !cfg.f_Uiexpand) {
                    let item = Laya.Pool.getItemByClass(MainView.FuncSmallIconKey, FuncSmallIcon);
                    item.refresh(item.skin, parseInt(cfg.f_funid), EButtonStyle.Pos, x, sy);
                    sy += offset;
                    k++;
                    if (k % maxCount == 0) {
                        sy = 0;
                        x += ox;
                    }
                }
            }
        }
        onChangeLanguage() {
        }
        onAddLoadRes() {
            this.addAtlas("main/main.atlas");
        }
        onAddEventListener() {
        }
        updateTopEquip() {
            for (let i = 0; i < this._equipList.length; i++) {
                let itemView = this._equipList[i];
                let skin;
                if (itemView instanceof EquipItemView) {
                    itemView.setData(this.model.getEquipWearVo(itemView.equipType));
                    skin = itemView.skin;
                }
                else {
                    itemView.setData(WingModel.Ins.getOwnerWingData());
                }
            }
        }
        UpdateEquip(isInit = false) {
            this.updateTopEquip();
            let _equipVo = this.model.equipNotWeared;
            this.SetAnimStatus(_equipVo == null ? EChestAnimStatus.Close : EChestAnimStatus.Open, isInit);
        }
        updateWingItem() {
        }
        UpdateBtns() {
            for (let i = 0; i < this._allBtns.length; i++) {
                let btn = this._allBtns[i];
                btn.update();
            }
            this.onActivityUpdateData();
        }
        playTS() {
            if (this._isPlayTs) {
                return;
            }
            let data = MainModel.Ins.tsList[0];
            if (!MainModel.Ins.tsTween) {
                MainModel.Ins.tsTween = new Laya.Tween();
            }
            this._isPlayTs = true;
            this._ui.img_ts.visible = true;
            this._ui.img_ts.x = 790;
            this._ui.lab_ts1.text = data.st1;
            this._ui.lab_ts1.color = data.co1;
            this._ui.lab_ts2.text = data.st2;
            this._ui.lab_ts2.x = this._ui.lab_ts1.textField.textWidth + 4;
            this._ui.box_ts.x = (394 - this._ui.box_ts.width) * 0.5;
            MainModel.Ins.tsTween.to(this._ui.img_ts, { x: 356 }, 250, null, new Laya.Handler(this, this.endTS));
        }
        endTS() {
            if (!this._tsTimer) {
                this._tsTimer = new Laya.Timer;
            }
            this._tsTimer.once(2000, this, this.endTS1);
        }
        endTS1() {
            MainModel.Ins.tsTween.to(this._ui.img_ts, { x: 790 }, 250, null, new Laya.Handler(this, this.endTS2));
        }
        endTS2() {
            MainModel.Ins.tsList.shift();
            this._ui.img_ts.visible = false;
            this._isPlayTs = false;
            if (MainModel.Ins.tsList.length > 0) {
                this.playTS();
            }
        }
        setTitleRed(bo) {
            if (this._ui) {
                if (bo) {
                    DotManager.addDot(this._ui.titleImg);
                }
                else {
                    DotManager.removeDot(this._ui.titleImg);
                }
            }
        }
        set lvdot(v) {
            v ? DotManager.addDot(this._ui.xianziBg) : DotManager.removeDot(this._ui.xianziBg);
        }
    }
    MainView.posOffset = 97;
    MainView.FuncSmallIconKey = "FuncSmallIcon";

    exports.MainView = MainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChestLevelUpView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.isFullMax = false;
            this.oldLv = 0;
            this.mMainSnapshot = true;
        }
        get chestData() {
            return this.model.mRoleData.getChestData();
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = MainModel.Ins;
                this.UI = this._ui = new ui.views.main.ui_main_chest_lvupUI();
                this.lvUpCtl = new ButtonCtl(this._ui.shenjiBtn, new Laya.Handler(this, this.onLevelUp));
                this.btnList.push(new ButtonCtl(this._ui.close1, new Laya.Handler(this, this.Close)), new ButtonCtl(this._ui.wenhao, new Laya.Handler(this, this.wenhaoHandler)));
                this.buyCtl = new ButtonCtl(this._ui.goumaibtn, new Laya.Handler(this, this.onBuyHandler));
                this.timeCtl = new TimeCtl();
                this.timeCtl1 = new TimeCtl(this._ui.lab_time);
                this.progressCtl = new ChestProgressCtl(this._ui.progcontainer);
                this._ui.lvList.itemRender = ui.views.main.ui_chestlv_itemUI;
                this._ui.lvList.renderHandler = new Laya.Handler(this, this.onListItem);
                this.fastCtl = new ButtonCtl(this._ui.fastBtn, new Laya.Handler(this, this.onFastHandler));
                this.subBtnCtl = new ButtonCtl(this._ui.subBtn, new Laya.Handler(this, this.onWatchAdvertisement));
                this._ui.quickIcon.skin = IconUtils.getIconByCfgId(ECellType.ChestQuick);
                this._ui.subtime.centerX = 0;
                this._ui.list.itemRender = ui.views.main.ui_main_chest_lvupItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this.btnList.push(this.buyCtl, this.fastCtl, this.subBtnCtl);
                if (this._ui["lvzg"]) {
                    this._ui['lvzg'].text = t_Txt_Config.Ins.replace(E.getLang("LvZhanggu"));
                }
                this._ui.islvuping.text = t_Txt_Config.Ins.replace(E.getLang("isLvingUp"));
                this._ui.title1.text = t_Txt_Config.Ins.replace(E.getLang("BaoXiangTitle"));
                this._ui.desc1.text = t_Txt_Config.Ins.replace(E.getLang("zhangguDesc"));
                if (t_Platform.Ins.isADclose) {
                    this.fastCtl.setX(140);
                    this._ui.freeCon.visible = false;
                }
            }
        }
        onWatchAdvertisement() {
            E.ViewMgr.Open(EViewType.SubCDView, null, GuaJiModel.CDEnmu.BaoXiangLv);
        }
        onFastHandler() {
            MainModel.Ins.fastUseItem(ECellType.ChestQuick, EUseItemScene.Chest, this.chestData.time);
        }
        onRenderHandler(item) {
            let data = item.dataSource;
            let vo = new ItemVo();
            vo.cfgId = parseInt(data.f_BoxRate.split("-")[0]);
            vo.count = parseInt(data.f_BoxRate.split("-")[1]);
            ItemViewFactory.refreshSlot(item.item, vo);
            if (this.chestData.boxlv >= data.f_BoxLevel) {
                item.lab.text = "已解锁";
                item.lab.color = "#279034";
            }
            else {
                item.lab.text = data.f_BoxLevel + "级解锁";
                item.lab.color = "#CB342B";
            }
        }
        perToString(v) {
            return v = v / 100;
        }
        onListItem(item, index) {
            let data = this.curList[index];
            let cur = parseInt(data.split("-")[1]);
            let qua = parseInt(data.split("-")[0]);
            item.curTf.text = this.perToString(cur).toString() + "%";
            item.pre.skin = item.back.skin = `remote/main/chest/dengji${qua}.png`;
            let qCfg = EquipmentQualityProxy.Ins.getByQua(qua);
            item.lab.text = qCfg.f_EquipmentLevel;
            item.lab.color = "#" + qCfg.f_Color;
            if (this.nextList) {
                let nextData = this.nextList[index];
                item.back.visible = true;
                let next = parseInt(nextData.split("-")[1]);
                item.nexttf.text = this.perToString(next).toString() + "%";
            }
            else {
                item.nexttf.text = "";
                item.back.visible = false;
            }
        }
        onBuyHandler() {
            if (this.isFullMax) ;
            else {
                this.model.levelUpChest();
            }
        }
        wenhaoHandler() {
            E.ViewMgr.openHelpView("BaoXiangTitle", "BaoXiangDesc");
        }
        onLevelUp() {
            this.model.levelUpChest();
        }
        onAddLoadRes() {
            this.addAtlas("main/chest.atlas");
        }
        onAddEventListener() {
        }
        onEnter() {
        }
        playEffect() {
            this.eff.play(0);
        }
        onExit() {
            this.saveLv();
            this.model.off(MainEvent.ValChange, this, this.onValChangeEvt);
            GuaJiModel.Ins.off(GuaJiModel.UPDATA_CD_TIME, this, this.RefreshView);
            this.timeCtl.stop();
            this.timeCtl1.stop();
            if (this.eff) {
                this.eff.dispose();
                this.eff = null;
            }
        }
        clearUI() {
            DotManager.removeDot(this._ui.goumaibtn);
            DotManager.removeDot(this.lvUpCtl.skin);
            this._ui.goumaibtn.skin = `remote/common/base/anniu_blue.png`;
            this.buyCtl.mouseEnable = true;
            this._ui.levelFullTf.visible = false;
            this._ui.levelView.visible = false;
            this._ui.boxLvUp.visible = false;
            this.timeCtl.stop();
            this.timeCtl1.stop();
            this.lvUpCtl.visible = false;
            this._ui.goumaibtn.visible = false;
            this._ui.fastBtn.visible = false;
            this._ui.isFulltf.visible = false;
            this._ui.tongqianicon.visible = false;
        }
        RefreshView() {
            this.clearUI();
            let _mRed = MainModel.Ins.mChestMoneyLevelRed();
            let cfg = this.model.getChestLvCfg(this.chestData.boxlv);
            this.curList = cfg.curInfo.f_Quality_Client.split("|");
            this._ui.curTf.text = E.LangMgr.getLang("CurLv") + ":" + this.chestData.boxlv;
            if (this.oldLv != this.chestData.boxlv) {
                this.playEffect();
                this.oldLv = this.chestData.boxlv;
            }
            if (cfg.nextInfo) {
                this.nextList = cfg.curInfo.f_Quality_Client_next.split("|");
                this._ui.nextTf.text = E.LangMgr.getLang("NextLv") + ":" + cfg.nextInfo.f_BoxLevel;
                this._ui.arrow.visible = true;
            }
            else {
                this.nextList = null;
                this._ui.nextTf.text = "";
                this._ui.arrow.visible = false;
            }
            this._ui.lvList.array = this.curList;
            this._ui.list.array = BoxExtraItemProxy.Ins.List;
            let res = this.model.getChestCfgByPos(this.chestData.pos, this.chestData.boxlv, this.chestData.time);
            this.progressCtl.offsetSize = 2;
            this.progressCtl.setVal(res.cur, res.max);
            if (res.cfg) {
                this._ui.timetf.text = E.LangMgr.getLang("Time") + ":" + TimeUtil.subTime(res.cdTime);
            }
            else {
                this._ui.timetf.text = "";
            }
            switch (res.status) {
                case EChestLevelUp.UseMoney:
                    this._ui.boxLvUp.visible = true;
                    this._ui.goumaibtn.visible = true;
                    this.lvUpCtl.visible = true;
                    this.lvUpCtl.enable = false;
                    this._ui.tongqianicon.visible = true;
                    break;
                case EChestLevelUp.Full:
                    this._ui.boxLvUp.visible = true;
                    this._ui.goumaibtn.visible = true;
                    this.lvUpCtl.visible = true;
                    this.lvUpCtl.enable = true;
                    if (MainModel.Ins.hasLvUpBtnRed) {
                        DotManager.addDot(this.lvUpCtl.skin);
                    }
                    this._ui.isFulltf.visible = true;
                    break;
                case EChestLevelUp.Time:
                    this._ui.levelView.visible = true;
                    this._ui.fastBtn.visible = true;
                    break;
                case EChestLevelUp.End:
                    this._ui.levelFullTf.visible = true;
                    break;
            }
            if (res.cur == res.max) {
                this.isFullMax = true;
            }
            else {
                this.isFullMax = false;
            }
            this._ui.moneytf.text = res.cfg.f_Cost.toString();
            let haveMoney = this.model.getMoeny();
            if (haveMoney < res.cfg.f_Cost) {
                this._ui.moneytf.color = EGameColor.NotEnough;
                this._ui.goumaibtn.skin = `remote/common/base/anniu_grey.png`;
                this.buyCtl.mouseEnable = false;
            }
            else {
                this._ui.moneytf.color = EGameColor.White;
                if (_mRed) {
                    DotManager.addDot(this._ui.goumaibtn);
                }
            }
            this._ui.cost2.text = StringUtil.val2m(haveMoney).toString();
            let quick = this.model.chestQuickCnt;
            this._ui.cost1.text = StringUtil.val2m(quick).toString();
            if (this.isFullMax) {
                this._ui.isFulltf.visible = true;
                this._ui.tongqianicon.visible = false;
            }
            else {
                this._ui.isFulltf.visible = false;
                this._ui.tongqianicon.visible = true;
            }
            if (this.chestData.time > 0) {
                let sub = this.chestData.time - TimeUtil.serverTime;
                this.timeCtl.start(sub, new Laya.Handler(this, this.updateTimeLabel), new Laya.Handler(this, this.endTimeHandler));
            }
            else {
                this.endTimeHandler();
            }
            if (MainModel.Ins.verify) {
                this._ui.subBtn.visible = false;
                this._ui.lab_d.visible = false;
                this._ui.lab_time.visible = false;
            }
            else {
                this._ui.subBtn.visible = true;
                this.setCDBtn();
            }
        }
        setCDBtn() {
            let time = GuaJiModel.Ins.getstAdCdByType(GuaJiModel.CDEnmu.BaoXiangLv).endUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._ui.lab_d.visible = false;
                this._ui.lab_time.visible = true;
                this._ui.subBtn.disabled = true;
                this.timeCtl1.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.timeCtl1.stop();
                this.endTime();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl1.tickVal);
            this.timeCtl1.setText(time_str + "后刷新");
        }
        endTime() {
            this._ui.lab_d.visible = true;
            this._ui.lab_time.visible = false;
            this._ui.subBtn.disabled = false;
        }
        onInit() {
            if (!this.eff) {
                this.eff = new SimpleEffect(this._ui.eff, "o/spine/boxup/boxup");
            }
            let o = RedUpdateModel.Ins.getByID(RedEnum.CHEST_LV);
            if (o) {
                if (o.type != this.chestData.boxlv) {
                    this.playEffect();
                }
            }
            this.saveLv();
            this.model.on(MainEvent.ValChange, this, this.onValChangeEvt);
            GuaJiModel.Ins.on(GuaJiModel.UPDATA_CD_TIME, this, this.RefreshView);
            this.oldLv = this.chestData.boxlv;
            this.RefreshView();
        }
        onValChangeEvt() {
            this.RefreshView();
        }
        saveLv() {
            RedUpdateModel.Ins.save(RedEnum.CHEST_LV, this.chestData.boxlv);
        }
        updateTimeLabel(ticket) {
            let time = TimeUtil.timeFormatStr(ticket, true);
            this._ui.subtime.text = E.LangMgr.getLang("SubTime") + ":" + time;
        }
        endTimeHandler() {
            this._ui.subtime.text = "";
        }
    }

    exports.ChestLevelUpView = ChestLevelUpView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Equip_switchView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.mMaskClick = false;
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = MainModel.Ins;
                this.UI = this._ui = new ui.views.main.ui_equip_switchUI();
                this._ui.maskbg.visible = false;
                this._plusCtl = new PlusCtl();
                this._toPlusCtl = new PlusCtl();
                this.close1Btn = new ButtonCtl(this._ui.close1, new Laya.Handler(this, this.onCloseUI));
                this.equipBtnCtl = new ButtonCtl(this._ui.equipBtn, new Laya.Handler(this, this.onEquipHandler));
                this.btnList.push(this.close1Btn, this.equipBtnCtl);
                this.sellBtnCtl = new ButtonCtl(this._ui.sellBtn, new Laya.Handler(this, this.onSellHandler));
                this.topequip = new EquipItemView(this._ui.topequip);
                this.equip = new EquipItemView(this._ui.equip);
                this._ui.attrlist.itemRender = ui.views.main.ui_main_show_attrUI;
                this._ui.attrlist.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
                this._ui.toplist.itemRender = ui.views.main.ui_main_show_attrUI;
                this._ui.toplist.renderHandler = new Laya.Handler(this, this.onOldAttrItemHandler);
                this._ui.autosell.visible = false;
                this.autoSellBtnCtl = new ButtonCtl(this._ui.autoSellBtn, new Laya.Handler(this, this.onAutoSellHandler));
                this._ui.autosell.visible = MainModel.Ins.autoSell;
            }
        }
        onSellOk() {
            this.model.sell(this.newEquipVo.equipVo.uid);
            this.Close();
        }
        isReplaceHigher() {
            if (this.newEquipVo.plus > this.oldEquipVo.plus) {
                return true;
            }
            return false;
        }
        onSellHandler() {
            if (this.isReplaceHigher()) {
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.getLang("okSell"), new Laya.Handler(this, this.onSellOk));
                return;
            }
            this.onSellOk();
        }
        onEquipHandler() {
            if (this._ui.autosell.visible) {
                const res = this.isReplaceHigher();
                if (!res) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.getLang("okSell"), new Laya.Handler(this, this.onEquipOK));
                    return;
                }
            }
            this.onEquipOK();
        }
        onEquipOK() {
            this.model.once(MainEvent.EquipChange, this, this.onStartEquipEvt);
            this.model.equip(this.newEquipVo.equipVo);
        }
        onAutoSellHandler() {
            this._ui.autosell.visible = !this._ui.autosell.visible;
            MainModel.Ins.autoSell = this._ui.autosell.visible;
        }
        onStartEquipEvt() {
        }
        onCloseUI() {
            E.ViewMgr.Close(this.ViewType);
        }
        onExit() {
            this.model.off(MainEvent.EquipChange, this, this.onEquipEvt);
            this.model.off(MainEvent.SellFinished, this, this.onSellFinished);
            Laya.timer.clear(this, this.onCheckClose);
            let type = this.oldEquipVo.equipVo.type;
            if (this.model.oldSkin[type] != this.oldEquipVo) {
                this.model.event(MainEvent.EquipSlot, type);
                this.model.oldSkin[type] = null;
            }
            this.model.event(MainEvent.EquipViewClose);
        }
        onAddLoadRes() {
            this.addAtlas("main/equip.atlas");
        }
        onAddEventListener() {
            this.model.on(MainEvent.EquipChange, this, this.onEquipEvt);
            this.model.on(MainEvent.SellFinished, this, this.onSellFinished);
        }
        getWearable(l, wearable) {
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.wearable == wearable) {
                    return cell;
                }
            }
        }
        onEquipEvt(data) {
            if (data.length == 2) {
                this._ui.newGet.visible = this._ui.box1.visible = false;
                let wearItem = this.getWearable(data, EWearableType.Wearable);
                let unWearItem = this.getWearable(data, EWearableType.Not);
                if (!wearItem || !unWearItem) {
                    return;
                }
                this.oldEquipVo = DateFactory.createEquipItemVo(wearItem);
                this.newEquipVo = DateFactory.createEquipItemVo(unWearItem);
                this.updateView();
            }
        }
        onSellFinished() {
            if (this._ui.autosell.visible) {
                this.onSellOk();
            }
        }
        onEnter() {
        }
        onCheckClose() {
            let cell = this.model.getNotWear();
            if (!cell) {
                this.Close();
            }
        }
        onInit() {
            if (this.Data) {
                Laya.timer.frameLoop(1, this, this.onCheckClose);
                this.oldEquipVo = this.Data[0];
                this.model.oldSkin[this.oldEquipVo.equipVo.type] = this.oldEquipVo;
                this.newEquipVo = this.Data[1];
                this._ui.newGet.visible = this._ui.box1.visible = true;
                this.updateView();
            }
        }
        static convertAttr(l) {
            l = l.sort(ItemViewFactory.attrSortHandler);
            let _result = [];
            for (let i = 0; i < l.length; i++) {
                let o = l[i];
                let cfg = GameconfigProxy.Ins.GetDataById(o.id);
                _result.push(o);
                if (cfg.f_desc != "") {
                    _result.push(cfg.f_desc);
                }
            }
            return _result;
        }
        updateView() {
            this.topequip.setData(this.oldEquipVo);
            this._ui.topNameTf.text = this.oldEquipVo.getName();
            this._ui.topNameTf.color = this.oldEquipVo.getQuaColor();
            this._toPlusCtl.setPlus(this._ui.toplug, this.oldEquipVo.equipVo.plus);
            this.topList = Equip_switchView.convertAttr(this.oldEquipVo.equipVo.attrList);
            this._ui.toplist.array = this.topList;
            this.equip.setData(this.newEquipVo);
            this._ui.nameTF.text = this.newEquipVo.getName();
            this._ui.nameTF.color = this.newEquipVo.getQuaColor();
            this._plusCtl.setPlus(this._ui.plugs, this.newEquipVo.equipVo.plus);
            this.curList = Equip_switchView.convertAttr(this.newEquipVo.equipVo.attrList);
            this._ui.attrlist.array = this.curList;
            let oldPlus = this.oldEquipVo.equipVo.plus;
            let newPlus = this.newEquipVo.equipVo.plus;
            if (oldPlus > newPlus) {
                this._ui.upimg.skin = "remote/common/base/red.png";
            }
            else if (oldPlus < newPlus) {
                this._ui.upimg.skin = "remote/common/base/green.png";
            }
            this._ui.upimg.x = this._ui.plugs.x + this._plusCtl.mWidth * this._plusCtl.mScale;
            this._ui.toparrow.skin = "";
        }
        static setDesc(skin, desc) {
            skin.attrdesc.text = desc;
            skin.upimg.skin = "";
            skin.tf1.text = "";
            skin.valTf.text = "";
        }
        onOldAttrItemHandler(skin, index) {
            if (!(skin.dataSource instanceof stEquipAttr)) {
                Equip_switchView.setDesc(skin, skin.dataSource);
                return;
            }
            skin.attrdesc.text = '';
            EquipAttrSkinProxy.setDataThan(skin, skin.dataSource);
        }
        onAttrItemHandler(skin, index) {
            if (!(skin.dataSource instanceof stEquipAttr)) {
                Equip_switchView.setDesc(skin, skin.dataSource);
                return;
            }
            skin.attrdesc.text = '';
            let cellOld = this._ui.toplist.array[index];
            EquipAttrSkinProxy.setDataThan(skin, skin.dataSource, cellOld);
        }
        SetCenter() {
            this.UI.anchorX = this.UI.anchorY = 0.5;
            this.UI.x = this.ViewParent.width >> 1;
            this.UI.y = (this.ViewParent.height >> 1) + 160;
        }
    }

    exports.Equip_switchView = Equip_switchView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EquipTipsView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = MainModel.Ins;
                this.UI = this._ui = new ui.views.main.ui_equip_tipsUI();
                this._plusCtl = new PlusCtl();
                this._equipItem = new EquipItemView(this._ui.equip);
                this.btnList.push(new ButtonCtl(this._ui.closeBtn1, new Laya.Handler(this, this.onCloseHandler1)));
                this.fuboCtl = new ButtonCtl(this._ui.fumobtn, new Laya.Handler(this, this.onFuMoClickHandler));
                this.btnList.push(this.fuboCtl);
                this._ui.attrlist.itemRender = ui.views.main.ui_main_show_attrUI;
                this._ui.attrlist.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
                this._ui.fumolist.visible = false;
                this._ui.bg5.visible = false;
            }
        }
        onFuMoClickHandler() {
            E.ViewMgr.ShowMidLabel(E.LangMgr.getLang("FuncNotOpen"));
        }
        onAttrItemHandler(skin) {
            if (!(skin.dataSource instanceof stEquipAttr)) {
                Equip_switchView.setDesc(skin, skin.dataSource);
                return;
            }
            skin.attrdesc.text = '';
            EquipAttrSkinProxy.setDataThan(skin, skin.dataSource);
        }
        onCloseHandler1() {
            E.ViewMgr.Close(this.ViewType);
        }
        onExit() {
        }
        onAddLoadRes() {
        }
        onAddEventListener() {
        }
        onEnter() {
        }
        onInit() {
            if (E.ViewMgr.isOpenReg(EViewType.SmallTips)) {
                E.ViewMgr.Close(EViewType.SmallTips);
            }
            this._curData = this.Data;
            this.refresh();
        }
        refresh() {
            this._ui.nameTF.text = this._curData.getName();
            this._ui.nameTF.color = this._curData.getQuaColor();
            this._equipItem.setData(this._curData);
            this._plusCtl.setPlus(this._ui.plugs, this._curData.equipVo.plus);
            this._ui.attrlist.array = Equip_switchView.convertAttr(this._curData.equipVo.attrList);
        }
    }

    exports.EquipTipsView = EquipTipsView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EquipUpdateView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.mMaskClick = false;
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = MainModel.Ins;
                this.UI = this._ui = new ui.views.main.ui_equip_updateUI();
                this.close1Btn = new ButtonCtl(this._ui.close1, new Laya.Handler(this, this.onCloseUI));
                this.equipBtnCtl = new ButtonCtl(this._ui.equipBtn, new Laya.Handler(this, this.onEquipHandler));
                this._plusCtl = new PlusCtl();
                this.btnList.push(this.equipBtnCtl, this.close1Btn);
                this._equipItem = new EquipItemView(this._ui.equip);
                this._ui.attrlist.itemRender = ui.views.main.ui_main_show_attrUI;
                this._ui.attrlist.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
            }
        }
        onEquipHandler() {
            this.model.equip(this._curData.equipVo);
            E.ViewMgr.Close(this.ViewType);
            this.model.event(MainEvent.EquipSlot, this._curData.equipVo.type);
        }
        onAttrItemHandler(skin) {
            if (!(skin.dataSource instanceof stEquipAttr)) {
                Equip_switchView.setDesc(skin, skin.dataSource);
                return;
            }
            skin.attrdesc.text = '';
            EquipAttrSkinProxy.setDataThan(skin, skin.dataSource, null, true);
        }
        SetCenter() {
            this.UI.anchorX = this.UI.anchorY = 0.5;
            this.UI.x = this.ViewParent.width >> 1;
            this.UI.y = (this.ViewParent.height >> 1) + 240;
        }
        onCloseUI() {
            E.ViewMgr.Close(this.ViewType);
        }
        onExit() {
            this.model.event(MainEvent.EquipViewClose);
        }
        onAddLoadRes() {
            this.addAtlas("main/equip.atlas");
        }
        onAddEventListener() {
        }
        onEnter() {
        }
        onInit() {
            if (this.Data) {
                this._curData = this.Data;
                this._equipItem.setData(this._curData);
                this._ui.nameTF.text = this._curData.getName();
                this._ui.nameTF.color = this._curData.getQuaColor();
                this._plusCtl.setPlus(this._ui.plugs, this._curData.equipVo.plus);
                this._ui.attrlist.array = Equip_switchView.convertAttr(this._curData.equipVo.attrList);
            }
        }
    }

    exports.EquipUpdateView = EquipUpdateView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HelpView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_help_viewUI();
                this._ui.tf1.text = "";
                this._ui.desc.text = "";
                this._btnCtl = new ButtonCtl(this._ui.close1, new Laya.Handler(this, this.Close));
                this.subHeight = this._ui.bg.height - this._ui.bg2.height;
                this.btnList.push(this._btnCtl);
            }
        }
        onAddLoadRes() {
        }
        onAddEventListener() {
        }
        onEnter() {
        }
        onInit() {
            this._ui.downIcon.visible = false;
            let _data = this.Data;
            this._ui.tf1.text = _data.title;
            this._ui.desc.text = _data.desc;
            let curH = this._ui.desc.textField.displayHeight;
            let minH = 360;
            let maxH = 800;
            if (curH < minH) {
                curH = minH;
            }
            else if (curH > maxH) {
                curH = maxH;
            }
            this._ui.bg2.height = curH + 100;
            this._ui.bg.height = this._ui.bg2.height + this.subHeight;
            this._ui.width = this._ui.bg.width;
            this._ui.height = this._ui.bg.height;
        }
        onExit() {
        }
    }

    exports.HelpView = HelpView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LabelItemRender extends Laya.Label {
        constructor() {
            super();
        }
        get txtHeight() {
            return this.textField.displayHeight;
        }
    }
    class TxtNodeShow extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = HelpPanelView.LabelKey;
        }
        createNode(index) {
            let tempCell = this.list[index];
            tempCell.y = this.y;
            return tempCell;
        }
    }
    class HelpPanelView extends HelpView {
        static CreateLabel() {
            let clsKey = this.LabelKey;
            let tempCell = Laya.Pool.getItemByClass(clsKey, LabelItemRender);
            tempCell.clsKey = clsKey;
            tempCell.fontSize = 28;
            tempCell.font = E.sdk.convertFont(ZipJson.BOLD);
            tempCell.width = 450;
            tempCell.color = "#9f540c";
            tempCell.align = "left";
            tempCell.wordWrap = true;
            return tempCell;
        }
        static FreeLabel(cell) {
            Laya.Pool.recover(this.LabelKey, cell);
        }
        onInit() {
            let _data = this.Data;
            this.scrollCtl = new TriangleScrollPanelControl();
            this.scrollCtl.init(this._ui.showPanel);
            this.scrollCtl.setTriangleIcon(this._ui.downIcon);
            let _labelCell = HelpPanelView.CreateLabel();
            _labelCell.text = _data.desc;
            this._ui.tf1.text = _data.title;
            this._ui.desc.removeSelf();
            this.scrollCtl.clear();
            this.scrollCtl.setData(_labelCell, TxtNodeShow, _labelCell.txtHeight);
            this.scrollCtl.end();
        }
    }
    HelpPanelView.LabelKey = "TxtNodeShow";

    exports.HelpPanelView = HelpPanelView;
    exports.LabelItemRender = LabelItemRender;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SubscribeID {
    }
    SubscribeID.SIDER_POS = 10000;
    class SubscribeMouseVo {
    }
    class SubscribeModel {
        constructor() {
            this.list = [];
            this.ids = [];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new SubscribeModel();
            }
            return this._ins;
        }
        isNeed(id) {
            return this.ids.indexOf(id) == -1;
        }
        push(id) {
            if (this.ids.indexOf(id) == -1) {
                this.ids.push(id);
            }
            LogSys.Log("save " + id);
        }
        getByID(id) {
            let cell = this.list.find(vo => vo.id == id);
            return cell;
        }
        mouseupSaveID(id) {
            let t = Laya.Browser.clientWidth / Laya.stage.width;
            let x1 = Math.round(Laya.stage.mouseX * t);
            let y1 = Math.round(Laya.stage.mouseY * t);
            let vo = new SubscribeMouseVo();
            vo.id = id;
            vo.x = x1;
            vo.y = y1;
            let index = this.list.findIndex(vo => vo.id == id);
            if (index != -1) {
                this.list.splice(index, 1);
            }
            this.list.push(vo);
        }
    }

    exports.SubscribeID = SubscribeID;
    exports.SubscribeModel = SubscribeModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DouyinSiderView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onExit() {
            this.enterCbBtnCtl.dispose();
            this.lingqubtnCtl.dispose();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_cebianlangUI();
                this.bindClose(this._ui.btn_close);
                this.enterCbBtnCtl = ButtonCtl.CreateBtn(this._ui.enterCbBtn, this, this.onEnterHandler);
                this.lingqubtnCtl = ButtonCtl.CreateBtn(this._ui.lingqubtn, this, this.onLingQuHandler);
                this.enterCbBtnCtl.visible = false;
                this.lingqubtnCtl.visible = false;
                let str = System_RefreshTimeProxy.Ins.getVal(82);
                ItemViewFactory.renderItemSlots(this._ui.rewardCon, str, 50, 1, "center", SoltItemView3, "SoltItemView3");
            }
        }
        onEnterHandler() {
            SubscribeModel.Ins.mouseupSaveID(SubscribeID.SIDER_POS);
        }
        onLingQuHandler() {
            let req = new SideBarReward_req();
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        onInit() {
            if (MainModel.Ins.canBarStatusLingQu && E.sdk.isFromSidebarCard) {
                this.lingqubtnCtl.visible = true;
            }
            else {
                this.enterCbBtnCtl.visible = true;
            }
        }
    }

    exports.DouyinSiderView = DouyinSiderView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class QueryMsgView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
        }
        onExit() {
            this.onRefreshSel();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.common.ui_query_msgUI();
                this.bindClose(this._ui.close1);
                ButtonCtl.Create(this._ui.cancelBtn, new Laya.Handler(this, this.onCancelHandler));
                ButtonCtl.Create(this._ui.okBtn, new Laya.Handler(this, this.onOkHandler));
                this._checkBoxCtl = new CheckBoxCtl({ bg: this._ui.ckbg, gou: this._ui.gou });
            }
        }
        onOkHandler() {
            if (this._data.callBack) {
                this._data.callBack.runWith(this._checkBoxCtl.selected);
                this._data.callBack = null;
            }
            this.Close();
        }
        onRefreshSel() {
            let cell = MainModel.Ins.quickMsgList.find(item => item.type == this._data.type);
            if (cell) {
                cell.selected = this._checkBoxCtl.selected;
            }
            else {
                let _vcell = new QuickMsgVo();
                _vcell.type = this._data.type;
                _vcell.selected = this._checkBoxCtl.selected;
                MainModel.Ins.quickMsgList.push(_vcell);
            }
        }
        onCancelHandler() {
            this.Close();
        }
        onInit() {
            let _data = this.Data;
            this._data = _data;
            this._checkBoxCtl.selected = _data.selected;
            this._ui.tf4.text = _data.chanelLab;
            this._ui.tf5.text = _data.okLab;
            if (_data.type == EQuickMsg.NULL) {
                this._ui.ckbg.visible = this._ui.tf.visible = false;
            }
            else {
                this._ui.ckbg.visible = this._ui.tf.visible = true;
            }
            this._ui.yuanbao22.visible = false;
            this._ui.tf22.visible = false;
            if (_data.moneyArr && _data.moneyArr.length) {
                this._ui.txtcon.visible = true;
                this._ui.txt.visible = false;
                this._ui.tf3.text = _data.desc || "";
                const arr = [
                    { img: this._ui.yuanbao, tf: this._ui.tf2 },
                    { img: this._ui.yuanbao22, tf: this._ui.tf22 },
                ];
                for (let i = 0; i <= 1; i++) {
                    const img = arr[i].img;
                    const tf = arr[i].tf;
                    const item = _data.moneyArr[i];
                    if (item) {
                        img.visible = true;
                        tf.visible = true;
                    }
                    else {
                        img.visible = false;
                        tf.visible = false;
                        continue;
                    }
                    img.skin = IconUtils.getIconByCfgId(item.moneyCfgId);
                    tf.text = (item.money || 0).toString();
                    tf.x = i === 0 ? (this._ui.tf1.x + this._ui.tf1.displayWidth) : (arr[i - 1].img.x + arr[i - 1].img.width * img.scaleX);
                    if (MainModel.Ins.mRoleData.getVal(item.moneyCfgId) < item.money) {
                        tf.color = EGameColor.NotEnough;
                    }
                    else {
                        tf.color = EGameColor.Normal1;
                    }
                    img.x = tf.x + tf.displayWidth;
                }
                const lastImg = arr[_data.moneyArr.length - 1].img;
                this._ui.tf3.x = lastImg.x + lastImg.width * lastImg.scaleX;
                let w = this._ui.tf3.x + this._ui.tf3.displayWidth;
                this._ui.txtcon.x = (this._ui.width - w) / 2;
            }
            else if (_data.moneyCfgId) {
                this._ui.txtcon.visible = true;
                this._ui.txt.visible = false;
                this._ui.yuanbao.skin = IconUtils.getIconByCfgId(_data.moneyCfgId);
                this._ui.tf3.text = _data.desc || "";
                this._ui.tf2.text = (_data.money || 0).toString();
                this._ui.tf2.x = this._ui.tf1.x + this._ui.tf1.displayWidth;
                if (MainModel.Ins.mRoleData.getVal(_data.moneyCfgId) < _data.money) {
                    this._ui.tf2.color = EGameColor.NotEnough;
                }
                else {
                    this._ui.tf2.color = EGameColor.Normal1;
                }
                this._ui.yuanbao.x = this._ui.tf2.x + this._ui.tf2.displayWidth;
                this._ui.tf3.x = this._ui.yuanbao.x + this._ui.yuanbao.width * this._ui.yuanbao.scaleX;
                let w = this._ui.tf3.x + this._ui.tf3.displayWidth;
                this._ui.txtcon.x = (this._ui.width - w) / 2;
            }
            else {
                this._ui.txtcon.visible = false;
                this._ui.txt.visible = true;
                this._ui.txt.text = _data.desc;
            }
        }
    }

    exports.QueryMsgView = QueryMsgView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SmallTipsView extends ViewBase {
        constructor() {
            super(...arguments);
            this.PageType = EPageType.None;
            this.maskAlpha = 0.0;
            this.oldY = 0;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_txt_tipsUI();
                this._ui.on(Laya.Event.CLICK, this, this.onImgClick);
                this.oldY = this._ui.desc.y;
            }
        }
        onImgClick() {
        }
        onExit() {
            Laya.stage.off(Laya.Event.CLICK, this, this.onStageClick);
        }
        onAddLoadRes() {
        }
        onAddEventListener() {
        }
        onEnter() {
        }
        setData(_data) {
            this._data = _data;
            this._ui.desc.text = _data.content;
            this._ui.tf.text = _data.title;
            let offset = 20;
            let t = _data.target;
            if (this._data.title == "") {
                this._ui.desc.y = 11;
            }
            else {
                this._ui.desc.y = this.oldY;
            }
            this._ui.img.height = this._ui.desc.textField.height + this._ui.desc.y + offset;
            this._ui.height = this._ui.img.height;
            let pos = t.parent.localToGlobal(new Laya.Point(t.x, t.y));
            this._tempPos = pos;
            this.SetCenter();
        }
        onInit() {
            this.UpdateView();
            this.setData(this.Data);
            Laya.stage.on(Laya.Event.CLICK, this, this.onStageClick);
        }
        onStageClick(e) {
            if (this.IsShow()) {
                this.Close();
            }
        }
        SetCenter() {
            if (!this._tempPos) {
                return;
            }
            let offsetY = 20;
            if (this._tempPos.x + this._ui.width > Laya.stage.width) {
                this._tempPos.x = Laya.stage.width - this._ui.width;
            }
            if (this._data.algin == "rightbottom") {
                this._ui.container.x = -this._ui.width + this._tempPos.x + this._data.target.width;
                this._ui.container.y = this._tempPos.y + this._ui.height + offsetY;
            }
            else if (this._data.algin == "rightbottom1") {
                this._ui.container.x = -this._ui.width + this._tempPos.x + this._data.target.width;
                this._ui.container.y = this._tempPos.y + this._ui.height - 70;
            }
            else {
                this._ui.container.x = this._tempPos.x;
                let yy = this._tempPos.y - this._ui.height - offsetY;
                if (yy < 0) {
                    this._ui.container.y = 0;
                }
                else {
                    this._ui.container.y = yy;
                }
            }
            this._ui.hitArea = new Laya.Rectangle(this._ui.container.x, this._ui.container.y, this._ui.width, this._ui.height);
        }
    }

    exports.SmallTipsView = SmallTipsView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WingExchangeView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wing.ui_wing_exchangeUI();
                ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.onCloseHandler1));
                ButtonCtl.Create(this._ui.wingExchangeBtn, new Laya.Handler(this, this.onExchangeHandler));
                ButtonCtl.Create(this._ui.wingExchangeBtn01, new Laya.Handler(this, this.onExchangeHandler));
                this._ui.wingList.selectEnable = true;
                this._ui.wingList.itemRender = ui.views.wing.ui_main_chibang2UI;
                this._ui.wingList.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
                this._ui.wingList.selectHandler = new Laya.Handler(this, this.onSelectHandler);
            }
        }
        set01Value() {
            let [originVal, discountVal] = System_RefreshTimeProxy.Ins.getVal(84).split("|");
            if (!originVal || !discountVal) {
                return;
            }
            const [originItemId, originCount] = originVal.split('-').map(Number);
            const [discountItemId, discountCount] = discountVal.split('-').map(Number);
            this._ui.img0.skin = ItemViewFactory.getResourceIcon(originItemId);
            this._ui.tf1.text = discountCount.toString();
            this._ui.real_tf.text = originCount.toString();
        }
        onCloseHandler1() {
            E.ViewMgr.Close(this.ViewType);
        }
        onAttrItemHandler(skin) {
            WingUpdateAttrSkinProxy.setWingListItem(skin, skin.dataSource);
        }
        onSelectHandler(index) {
            if (index < 0)
                return;
            const arr = this._ui.wingList.array;
            if (!arr || !arr.length) {
                return;
            }
            if (arr[index].selected) {
                return;
            }
            this.selectIndex = index;
            this.refreshBtn();
            this._ui.wingList.array = arr.map((o, i) => (Object.assign(Object.assign({}, o), { selected: i === index ? true : false })));
            this.refreshWingInfo(arr[index].wingId);
            this._ui.wingList.selectedIndex = -1;
        }
        refreshWingInfo(wingId) {
            const model = WingModel.Ins;
            const wingName = WingIdProxy.Ins.getWingName(wingId);
            const stage = model.stage;
            const level = model.level;
            const wingAttrs = WingModel.wingAttrs;
            const attrList = WingIdProxy.Ins.getWingUpgradeAttrList(wingId, level, stage);
            const wingAttrList = attrList.filter(o => wingAttrs.indexOf(o.id) !== -1);
            const maxValue = Math.max(...wingAttrList.map(o => o.value));
            const minValue = Math.min(...wingAttrList.map(o => o.value));
            const addAttr = maxValue === minValue ? undefined : wingAttrList.find(o => o.value === maxValue);
            const stageAttrList = WingEffectValueProxy.Ins.getWingStageConfigAttrList(wingId);
            const maxConfigValue = Math.max(...stageAttrList.map(o => o.value));
            const stageAttr = addAttr ? { id: addAttr.id, value: maxConfigValue, title: '每阶加成' } : undefined;
            this._ui.curWingName.text = wingName;
            WingUpdateAttrSkinProxy.setWingListItem(this._ui.curWingView, { wingId });
            WingUpdateAttrSkinProxy.setDataThan2(this._ui.wingAddAttr, addAttr);
            WingUpdateAttrSkinProxy.setDataThan2(this._ui.stageAddAttr, stageAttr);
        }
        refresh() {
            const configWingList = WingIdProxy.Ins.getConfigWingList();
            const model = WingModel.Ins;
            const wingId = model.wingId;
            const selectedWingId = this.selectIndex === undefined ? wingId : configWingList[this.selectIndex].wingId;
            this.refreshWingInfo(selectedWingId);
            const playerWingIds = model.playerWingIds;
            if (this.selectIndex === undefined) {
                this.selectIndex = configWingList.findIndex(o => o.wingId === wingId);
            }
            this._ui.wingList.array = configWingList.map((o, i) => {
                return {
                    wingId: o.wingId,
                    weared: o.wingId === wingId,
                    selected: this.selectIndex === undefined ? o.wingId === wingId : i === this.selectIndex,
                    locked: playerWingIds.indexOf(o.wingId) === -1 ? true : false,
                    priceItemVo: o.priceItemVo
                };
            });
            this.refreshBtn();
        }
        refreshBtn() {
            const index = this.selectIndex;
            const arr = this._ui.wingList.array;
            if ((index || index === 0) && arr[index].locked) {
                this._ui.wingBtnText.text = '购买';
                if (initConfig.clienttype == EClientType.Discount) {
                    this._ui.wingExchangeBtn01.visible = true;
                    this._ui.wingExchangeBtn.visible = false;
                    this.set01Value();
                }
                else {
                    this._ui.wingExchangeBtn01.visible = false;
                    this._ui.wingExchangeBtn.visible = true;
                }
            }
            else {
                this._ui.wingBtnText.text = '更换';
                this._ui.wingExchangeBtn01.visible = false;
                this._ui.wingExchangeBtn.visible = true;
            }
        }
        onExchangeHandler() {
            const arr = this._ui.wingList.array;
            const index = arr.findIndex(o => o.selected);
            if (index !== -1) {
                if (arr[index].locked) {
                    let tips = '';
                    if (initConfig.clienttype == EClientType.Discount) {
                        let [, discountVal] = System_RefreshTimeProxy.Ins.getVal(84).split("|");
                        if (!discountVal) {
                            return;
                        }
                        const [discountItemId, discountCount] = discountVal.split('-').map(Number);
                        let iCfg = ItemProxy.Ins.getCfg(discountItemId);
                        tips = `是否花费${discountCount}个${iCfg.f_name}一键购买全部翅膀？`;
                    }
                    else {
                        const priceItemVo = arr[index].priceItemVo;
                        tips = `确定使用${priceItemVo.count}个${priceItemVo.getName()}购买?`;
                    }
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, tips, new Laya.Handler(this, () => {
                        const wingId = initConfig.clienttype == EClientType.Discount ? 0 : arr[index].wingId;
                        this.onConfirm(wingId);
                    }));
                }
                else {
                    const wingId = arr[index].wingId;
                    let req = new WingExchange_req();
                    req.wingId = wingId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        onConfirm(wingId) {
            let req = new BuyWing_req();
            req.wingId = wingId;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onAddLoadRes() {
        }
        onExit() {
        }
        onInit() {
            WingModel.Ins.type = 'EXCHANGE';
            this._ui.wingBtnText.text = '更换';
            this.refresh();
        }
    }

    exports.WingExchangeView = WingExchangeView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WingInfoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this._plusCtl = new PlusCtl();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wing.ui_wing_infoUI();
                this._ui.wingbox.bg2.visible = false;
                this._ui.wingbox.icon.visible = false;
                ButtonCtl.Create(this._ui.closeBtn1, new Laya.Handler(this, this.onCloseHandler1));
                ButtonCtl.Create(this._ui.wingBtn, new Laya.Handler(this, this.onEnterHandler));
                this._ui.attrlist.itemRender = ui.views.wing.ui_wing_attr2UI;
                this._ui.attrlist.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
                this._ui.attrList2.itemRender = ui.views.wing.ui_wing_attr2UI;
                this._ui.attrList2.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
                this._ui.addAttrList.itemRender = ui.views.wing.ui_wing_attrUI;
                this._ui.addAttrList.renderHandler = new Laya.Handler(this, this.onSpecialAttrItemHandler);
            }
        }
        onCloseHandler1() {
            E.ViewMgr.Close(this.ViewType);
        }
        onAttrItemHandler(skin) {
            WingUpdateAttrSkinProxy.setWingInfoAttrItem(skin, skin.dataSource);
        }
        onSpecialAttrItemHandler(skin) {
            WingUpdateAttrSkinProxy.setDataThan2(skin, skin.dataSource);
        }
        refresh(isOwner) {
            const model = isOwner ? WingModel.Ins : this.wingData;
            const wingId = model.wingId;
            const level = model.level;
            const stage = model.stage;
            const wingName = model.wingName;
            const treasureStage = model.treasureStage;
            const attrList = WingIdProxy.Ins.getWingAttrList(wingId, level, stage, treasureStage);
            const plus = model.wingFightCapacity;
            this._ui.nameTF.text = wingName;
            this._ui.wingLevelText.text = `${stage}阶${level}级`;
            this._plusCtl.setPlus(this._ui.plugs, plus);
            this._ui.wingbox.wingLeftIcon.skin = ItemViewFactory.getWingIcon(wingId);
            this._ui.wingbox.wingRightIcon.skin = ItemViewFactory.getWingIcon(wingId);
            const wingAttrs = WingModel.wingAttrs;
            const baseAttrs = attrList.filter(o => wingAttrs.indexOf(o.id) === -1);
            const initAttrList = WingInitProxy.Ins.getWingInitAttrList(wingId);
            const initWingAttr = initAttrList.find(o => (wingAttrs.indexOf(o.id) !== -1) && o.value);
            if (baseAttrs.length % 2) {
                baseAttrs.push('empty');
            }
            const baseAttrs2 = [];
            const addAttrs = attrList.filter(o => wingAttrs.indexOf(o.id) !== -1);
            const specialAttrs = [];
            addAttrs.forEach(item => {
                const o = Object.assign({}, item);
                if (initWingAttr && (o.id === initWingAttr.id)) {
                    const value = o.value - initWingAttr.value;
                    baseAttrs2.push(Object.assign(Object.assign({}, o), { value }));
                    specialAttrs.push(Object.assign(Object.assign({}, o), { value, addValue: initWingAttr.value }));
                }
                else {
                    baseAttrs2.push(o);
                }
            });
            this._ui.attrlist.array = WingModel.Ins.wingLevelAttrs.map(o => ({ id: o.id, value: o.now }));
            let arr2 = WingModel.Ins.wingStageAttrs.map(o => ({ id: o.id, value: o.now }));
            if (initWingAttr) {
                const addWingUpgradeInfo = WingModel.Ins.wingStageAttrs.find(o => o.id === initWingAttr.id);
                let addAttr = {
                    id: initWingAttr.id,
                    value: addWingUpgradeInfo ? addWingUpgradeInfo.now - initWingAttr.value : 0,
                    addValue: initWingAttr.value,
                };
                arr2.forEach((o, i) => {
                    if (o.id === initWingAttr.id) {
                        arr2[i].value -= initWingAttr.value;
                    }
                });
                this._ui.wingAttrAddTitle.visible = true;
                this._ui.addAttrList.array = [addAttr];
            }
            else {
                this._ui.wingAttrAddTitle.visible = false;
                this._ui.addAttrList.array = [];
            }
            this._ui.attrList2.array = arr2;
        }
        onEnterHandler() {
            const model = this.wingData || WingModel.Ins;
            const level = model.level;
            const stage = model.stage;
            const levelData = WingExpProxy.Ins.getNextLevelData(level, stage);
            const restLevel = levelData.restLevel;
            if (restLevel) {
                E.ViewMgr.Open(EViewType.WingMainLevel, null);
            }
            else {
                E.ViewMgr.Open(EViewType.WingMainStage, null);
            }
            this.Close();
        }
        onAddLoadRes() {
            this.addAtlas('main/wing.atlas');
        }
        onExit() {
            WingModel.Ins.off(WingModel.EventRedRefresh, this, this.onRedUpdate);
            this.wingData = undefined;
        }
        onInit() {
            if (this.Data) {
                WingModel.Ins.on(WingModel.EventRedRefresh, this, this.onRedUpdate);
                this.wingData = this.Data;
                if (this.Data.isOwner) {
                    this._ui.wingBtn.visible = true;
                }
                else {
                    this._ui.wingBtn.visible = false;
                }
                this.refresh(this.Data.isOwner);
                this.onRedUpdate();
            }
        }
        onRedUpdate() {
            if (WingModel.Ins.mLevelUp) {
                DotManager.addDot(this._ui.wingBtn);
            }
            else {
                DotManager.removeDot(this._ui.wingBtn);
            }
        }
    }

    exports.WingInfoView = WingInfoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WingLevelView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this._plusCtl = new PlusCtl();
            this.resourceIds = [];
            this.packUid = 13;
            this.mMainSnapshot = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wing.ui_wing_mainUI();
                ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.onCloseHandler1));
                ButtonCtl.Create(this._ui.levelUpBtn, new Laya.Handler(this, this.onLevelUpHandler));
                ButtonCtl.Create(this._ui.upgradeBtn, new Laya.Handler(this, this.onUpgradeBtnHandler));
                ButtonCtl.Create(this._ui.exchangeBtn, new Laya.Handler(this, this.onExchangeBtnHandler));
                ButtonCtl.Create(this._ui.treasureBtn, new Laya.Handler(this, this.onTreasureBtnHandler));
                ButtonCtl.Create(this._ui.btn_xslb, new Laya.Handler(this, this.onBtnXslbClick));
                this._ui.attrList.itemRender = ui.views.wing.ui_wing_update_attrUI;
                this._ui.attrList.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
                this._ui.addAttrList.itemRender = ui.views.wing.ui_wing_update_attrUI;
                this._ui.addAttrList.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
                if (initConfig.clienttype == EClientType.Discount) {
                    this._ui.levelUpBtnLabel.text = '一键升级';
                }
                else {
                    this._ui.levelUpBtnLabel.text = '升级';
                }
            }
        }
        onBtnXslbClick() {
            ActivityModel.Ins.diamondEject(this.packUid);
        }
        onCloseHandler1() {
            E.ViewMgr.Close(this.ViewType);
        }
        onAttrItemHandler(skin) {
            WingUpdateAttrSkinProxy.setDataThan(skin, skin.dataSource);
        }
        refresh() {
            const model = WingModel.Ins;
            const wingId = model.wingId;
            const wingName = model.wingName;
            const levelData = WingExpProxy.Ins.getNextLevelData(model.level, model.stage);
            let stage = 0;
            let level = 0;
            let attrList = [];
            if (levelData.restLevel) {
                this._ui.levelUpBtn.gray = false;
                stage = model.stage;
                level = model.level;
            }
            else {
                this._ui.levelUpBtn.gray = true;
                stage = levelData.nextStage;
                level = 0;
            }
            if (model.mLevelUp) {
                DotManager.addDot(this._ui.levelUpBtn);
            }
            else {
                DotManager.removeDot(this._ui.levelUpBtn);
            }
            attrList = WingIdProxy.Ins.getWingUpgradeAttrList(wingId, level, stage);
            const plus = model.wingFightCapacity;
            if (levelData.nextStage === model.stage) {
                this._ui.upgradeBtnText.text = '已满阶';
                WingLevelView.isFullStage = true;
            }
            else {
                this._ui.upgradeBtnText.text = '进阶加成';
                WingLevelView.isFullStage = false;
            }
            this._ui.curWingName.text = wingName;
            this._ui.wingLevelText.text = `${model.stage}阶${model.level}级`;
            this._ui.levelText.text = `再升${levelData.restLevel}级可进阶`;
            this._plusCtl.setPlus(this._ui.plugs, plus);
            this._ui.curWingView.wingLeftIcon.skin = ItemViewFactory.getWingIcon(wingId);
            this._ui.curWingView.wingRightIcon.skin = ItemViewFactory.getWingIcon(wingId);
            const itemListData = WingConfigProxy.Ins.getUpgradeItemList(stage);
            const itemList = itemListData.levelList;
            this.resourceIds = itemList.map(o => o.cfgId).sort((a, b) => a - b);
            itemList.forEach((o, i) => {
                const total = o.count;
                const icon = i === 0 ? this._ui.coinIcon : this._ui.silverFeather;
                const totalLabel = i === 0 ? this._ui.coinTotalText : this._ui.featherTotalText;
                icon.skin = o.getIcon();
                totalLabel.text = `/${total}`;
            });
            this._ui.attrList.array = WingModel.Ins.wingLevelAttrs;
            const stageValues = [...new Set(WingModel.Ins.wingStageAttrs.map(o => o.now))];
            const attr = WingModel.Ins.wingStageAttrs.sort((a, b) => b.now - a.now)[0];
            this._ui.addAttrList.array = stageValues.length > 1 ? [Object.assign(Object.assign({}, attr), { next: attr.now })] : [];
        }
        onLevelUpHandler() {
            var _a;
            if (this._ui.levelUpBtn.gray) {
                return;
            }
            WingModel.Ins.type = 'LEVEL';
            let req = new WingLevelUp_req();
            if (initConfig.clienttype == EClientType.Discount) {
                const model = WingModel.Ins;
                const levelData = WingExpProxy.Ins.getNextLevelData(model.level, model.stage);
                const itemList = ((_a = WingConfigProxy.Ins.getUpgradeItemList(model.stage)) === null || _a === void 0 ? void 0 : _a.levelList) || [];
                if (!itemList.length) {
                    return;
                }
                const arr = [];
                for (const item of itemList) {
                    const count = MainModel.Ins.mRoleData.getVal(item.cfgId);
                    arr.push(Math.floor(count / item.count));
                }
                req.cnt = Math.min(...arr, levelData.restLevel);
            }
            SocketMgr.Ins.SendMessageBin(req);
            ActivityModel.Ins.runEnough(EPopWinID.WhitePlume);
        }
        onUpgradeBtnHandler() {
            if (WingLevelView.isFullStage) {
                console.log('已满阶');
            }
            else {
                let view = E.ViewMgr.Get(EViewType.WingMainStage);
                if (view.IsShow()) {
                    E.ViewMgr.Close(EViewType.WingMainLevel);
                }
                else {
                    E.ViewMgr.Open(EViewType.WingMainStage, null);
                }
            }
        }
        onExchangeBtnHandler() {
            let req = new GetWingList_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onTreasureBtnHandler() {
            E.ViewMgr.Open(EViewType.WingTreasure, null);
        }
        refreshResources() {
            if (!this.resourceIds.length)
                return;
            this.resourceIds.forEach((id, i) => {
                const val = MainModel.Ins.mRoleData.getVal(id);
                const total = Number((i === 0 ? this._ui.coinTotalText : this._ui.featherTotalText).text.replace('/', ''));
                const valLabel = i === 0 ? this._ui.coinValText : this._ui.featherValText;
                valLabel.text = StringUtil.val2m(val).toString();
                if (val < total) {
                    valLabel.color = '#FF0000';
                }
                else {
                    valLabel.color = '#00FF00';
                }
            });
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onRedUpdate() {
            this.refresh();
        }
        onExit() {
            MainModel.Ins.off(MainEvent.ValChange, this, this.refreshResources);
            WingModel.Ins.off(WingModel.EventRedRefresh, this, this.onRedUpdate);
            ActivityModel.Ins.off(ActivityEvent.PopWinUpdate, this, ActivityModel.Ins.onPop);
        }
        onInit() {
            WingModel.Ins.on(WingModel.EventRedRefresh, this, this.onRedUpdate);
            MainModel.Ins.on(MainEvent.ValChange, this, this.refreshResources);
            ActivityModel.Ins.on(ActivityEvent.PopWinUpdate, this, ActivityModel.Ins.onPop, [this.packUid, this._ui.btn_xslb]);
            ActivityModel.Ins.onPop(this.packUid, this._ui.btn_xslb);
            this.refresh();
            this.refreshResources();
        }
    }

    exports.WingLevelView = WingLevelView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WingStageView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this._plusCtl = new PlusCtl();
            this.resourceIds = [];
            this.mMainSnapshot = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wing.ui_wing_mainUI();
                ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.onCloseHandler1));
                ButtonCtl.Create(this._ui.stageUpBtn, new Laya.Handler(this, this.onStageUpBtnHandler));
                ButtonCtl.Create(this._ui.upgradeBtn, new Laya.Handler(this, this.onUpgradeBtnHandler));
                ButtonCtl.Create(this._ui.exchangeBtn, new Laya.Handler(this, this.onExchangeBtnHandler));
                ButtonCtl.Create(this._ui.treasureBtn, new Laya.Handler(this, this.onTreasureBtnHandler));
                this._ui.title1.text = '阶段加成';
                this._ui.title2.text = '当前加成';
                this._ui.title3.text = '下阶加成';
                this._ui.levelUpBtn.visible = false;
                this._ui.stageUpBtn.visible = true;
                this._ui.attrList.itemRender = ui.views.wing.ui_wing_update_attrUI;
                this._ui.attrList.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
                this._ui.addAttrList.itemRender = ui.views.wing.ui_wing_update_attrUI;
                this._ui.addAttrList.renderHandler = new Laya.Handler(this, this.onAttrItemHandler);
                this._ui.btn_xslb.visible = false;
            }
        }
        onCloseHandler1() {
            E.ViewMgr.Close(this.ViewType);
        }
        onAttrItemHandler(skin) {
            WingUpdateAttrSkinProxy.setDataThan(skin, skin.dataSource);
        }
        refresh() {
            const model = WingModel.Ins;
            const wingId = model.wingId;
            const wingName = model.wingName;
            const levelData = WingExpProxy.Ins.getNextLevelData(model.level, model.stage);
            const stage = model.stage;
            const level = model.level;
            const attrList = WingIdProxy.Ins.getWingUpgradeAttrList(wingId, level, stage);
            const plus = model.wingFightCapacity;
            const nextStageAttrList = WingIdProxy.Ins.getWingUpgradeAttrList(wingId, levelData.nextStageLevel, levelData.nextStage);
            if (levelData.restLevel) {
                this._ui.stageUpBtn.gray = true;
            }
            else {
                if (levelData.isNextFinish) {
                    this._ui.stageUpBtn.gray = true;
                    this._ui.stageUpBtnLabel.text = '已满阶';
                    this._ui.leftIconBox.visible = false;
                    this._ui.rightIconBox.visible = false;
                }
                else {
                    this._ui.stageUpBtn.gray = false;
                }
            }
            if (levelData.isNextFinish) {
                this._ui.upgradeBtnText.text = '已满级';
                WingStageView.isFull = true;
            }
            else {
                this._ui.upgradeBtnText.text = '等级加成';
                WingStageView.isFull = false;
            }
            const wingAttrs = WingModel.wingAttrs;
            const attrIds = [...new Set([...attrList, ...nextStageAttrList].filter(o => wingAttrs.indexOf(o.id) !== -1).map(o => o.id))];
            const list = attrIds.map(id => {
                const now = attrList.find(o => o.id === id);
                const next = nextStageAttrList.find(o => o.id === id);
                return {
                    id, now: now ? now.value : 0, next: next ? next.value : 0
                };
            });
            const minNowValue = Math.min(...list.map(o => o.now));
            const maxNowValue = Math.max(...list.map(o => o.now));
            const minNextValue = Math.min(...list.map(o => o.next));
            const baseList = list.map(o => {
                if ((o.now !== minNowValue) && (maxNowValue !== minNextValue)) ;
                return o;
            });
            this._ui.curWingName.text = wingName;
            this._ui.wingLevelText.text = `${stage}阶${level}级`;
            this._ui.levelText.text = `再升${levelData.restLevel}级可进阶`;
            this._plusCtl.setPlus(this._ui.plugs, plus);
            this._ui.curWingView.wingLeftIcon.skin = ItemViewFactory.getWingIcon(wingId);
            this._ui.curWingView.wingRightIcon.skin = ItemViewFactory.getWingIcon(wingId);
            const itemListData = WingConfigProxy.Ins.getUpgradeItemList(stage);
            const itemList = itemListData.stageList;
            this.resourceIds = itemList.map(o => o.cfgId).sort((a, b) => a - b);
            itemList.forEach((o, i) => {
                const total = o.count;
                const icon = i === 0 ? this._ui.coinIcon : this._ui.silverFeather;
                const totalLabel = i === 0 ? this._ui.coinTotalText : this._ui.featherTotalText;
                icon.skin = o.getIcon();
                totalLabel.text = `/${total}`;
            });
            this._ui.attrList.array = WingModel.Ins.wingStageAttrs;
            const stageValues = [...new Set(WingModel.Ins.wingStageAttrs.map(o => o.now))];
            this._ui.addAttrList.array = stageValues.length > 1 ? [WingModel.Ins.wingStageAttrs.sort((a, b) => b.now - a.now)[0]] : [];
        }
        onStageUpBtnHandler() {
            if (this._ui.stageUpBtn.gray) {
                return;
            }
            WingModel.Ins.type = 'STAGE';
            let req = new WingLevelUp_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onUpgradeBtnHandler() {
            if (WingStageView.isFull) {
                console.log('已满级');
            }
            else {
                let view = E.ViewMgr.Get(EViewType.WingMainLevel);
                if (view.IsShow()) {
                    E.ViewMgr.Close(EViewType.WingMainStage);
                }
                else {
                    E.ViewMgr.Open(EViewType.WingMainLevel, null);
                }
            }
        }
        onExchangeBtnHandler() {
            let req = new GetWingList_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onTreasureBtnHandler() {
            E.ViewMgr.Open(EViewType.WingTreasure, null);
        }
        refreshResources() {
            if (!this.resourceIds.length)
                return;
            this.resourceIds.forEach((id, i) => {
                const val = MainModel.Ins.mRoleData.getVal(id);
                const total = Number((i === 0 ? this._ui.coinTotalText : this._ui.featherTotalText).text.replace('/', ''));
                const valLabel = i === 0 ? this._ui.coinValText : this._ui.featherValText;
                valLabel.text = StringUtil.val2m(val).toString();
                if (val < total) {
                    valLabel.color = '#FF0000';
                }
                else {
                    valLabel.color = '#00FF00';
                }
            });
        }
        onAddLoadRes() {
        }
        onExit() {
            MainModel.Ins.off(MainEvent.ValChange, this, this.refreshResources);
        }
        onInit() {
            MainModel.Ins.on(MainEvent.ValChange, this, this.refreshResources);
            this.refresh();
            this.refreshResources();
        }
    }

    exports.WingStageView = WingStageView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WingTreasureView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this._plusCtl = new PlusCtl();
            this.resourceIds = [];
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wing.ui_wing_treasureUI();
                ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.onCloseHandler1));
                ButtonCtl.Create(this._ui.wingExchangeBtn, new Laya.Handler(this, this.onWingExchangeBtnHandler));
            }
        }
        onCloseHandler1() {
            E.ViewMgr.Close(this.ViewType);
        }
        refreshResources() {
            if (!this.resourceIds.length)
                return;
            this.resourceIds.forEach((id, i) => {
                const val = MainModel.Ins.mRoleData.getVal(id);
                const total = Number((i === 0 ? this._ui.coinTotalText : this._ui.starTotalText).text.replace('/', ''));
                const valLabel = i === 0 ? this._ui.coinValText : this._ui.starValText;
                valLabel.text = StringUtil.val2m(val).toString();
                if (val < total) {
                    valLabel.color = '#FF0000';
                }
                else {
                    valLabel.color = '#00FF00';
                }
            });
        }
        refresh() {
            const wingId = WingModel.Ins.wingId;
            const wingName = WingModel.Ins.wingName;
            const stage = WingModel.Ins.treasureStage;
            const level = WingModel.Ins.level;
            const plus = WingModel.Ins.wingTreasureFightCapacity;
            const list = WingTreasureUpgradeProxy.Ins.getTreasureAttrList(stage);
            const rank = Math.floor(stage / 7);
            this._ui.wingName.text = wingName;
            this._ui.wingLevel.text = `境界${StringUtil.toChinesNum(rank + 1)}`;
            this._plusCtl.setPlus(this._ui.plugs, plus);
            let arrowIndex = stage % 7;
            const isFull = WingTreasureConfigProxy.Ins.checkWingTreasureFullLevel(stage);
            if (isFull) {
                this._ui.wingExchangeBtn.gray = true;
                this._ui.wingExchangeBtn.disabled = true;
                this._ui.sucRateLabel.text = '';
                this._ui.leftIconBox.visible = false;
                this._ui.rightIconBox.visible = false;
                this._ui.wingBtnText.text = '已满级';
                arrowIndex = -1;
            }
            else {
                const rateStr = WingTreasureConfigProxy.Ins.getTreasureUpgradeRateStr(rank);
                this._ui.sucRateLabel.text = `激活成功率：${rateStr}`;
                const itemList = WingTreasureConfigProxy.Ins.getTreasurResources(rank);
                this.resourceIds = itemList.map(o => o.cfgId).sort((a, b) => a - b);
                itemList.forEach((o, i) => {
                    const total = o.count;
                    const icon = i === 0 ? this._ui.coinIcon : this._ui.start;
                    const totalLabel = i === 0 ? this._ui.coinTotalText : this._ui.starTotalText;
                    icon.skin = o.getIcon();
                    totalLabel.text = `/${total}`;
                });
            }
            list.forEach((o, i) => {
                const element = this._ui[`element${i + 1}`];
                const attrName = MainModel.Ins.getAttrNameIdByID(o.id);
                const value = parseFloat(attrConvert(o.id, o.value));
                element.element.skin = `remote/main/wing/wing_treasure_${o.id}.png`;
                element.titleLabel.text = `${attrName}${value}%`;
                element.levelLabel.text = `lv.${o.level}`;
                if (i === arrowIndex) {
                    element.arrowIcon.visible = true;
                }
                else {
                    element.arrowIcon.visible = false;
                }
            });
        }
        onWingExchangeBtnHandler() {
            WingModel.Ins.type = 'TREASURE';
            const req = new wingTreasureUpgrade_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onAddLoadRes() {
        }
        onExit() {
            MainModel.Ins.off(MainEvent.ValChange, this, this.refreshResources);
            if (this._wingAvatar) {
                this._wingAvatar.dispose();
            }
        }
        onInit() {
            MainModel.Ins.on(MainEvent.ValChange, this, this.refreshResources);
            this.refresh();
            this.refreshResources();
            this._wingAvatar = AvatarFactory.createWingAvatar(WingModel.Ins.wingId);
            this._ui.wingCon.addChild(this._wingAvatar);
        }
    }

    exports.WingTreasureView = WingTreasureView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YeWaiItemViewNew extends ui.views.maoxian.ui_maoxian2_item11UI {
        constructor() {
            super();
            this.model = MainModel.Ins;
            this._saoDan = ButtonCtl.Create(this.saodanbtn, new Laya.Handler(this, this.onSaoDanHandler));
            this._tiaozhan = ButtonCtl.Create(this.challenge, new Laya.Handler(this, this.onTiaozhan));
        }
        onSaoDanHandler() {
            if (this.model.isCanSweep) {
                E.ViewMgr.Open(EViewType.YeWaiSweep);
            }
            else {
                E.ViewMgr.ShowMidLabel(E.LangMgr.getLang("SweepTimeNotEnough"));
            }
        }
        onTiaozhan() {
            let req = new Adventure_Boss_req();
            req.type = 1;
            req.f_id = this._cfg.f_id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        set tipsLabel(str) {
            this.yitongguantf.text = str;
        }
        setData(_cfg) {
            this._cfg = _cfg;
            this._saoDan.visible = false;
            this._tiaozhan.visible = false;
            let _curId = this.model.adventureBossData.f_id;
            let nextCfg = AdventureBossProxy.Ins.getNext(_curId);
            this.nametf.text = _cfg.f_BossName;
            this.yitongguan.visible = false;
            this.tipsLabel = "";
            this.unlockTf.text = "";
            let showSaoDan = false;
            let lv = this.model.mRoleData.lv;
            if (lv < _cfg.f_OpenLimit) {
                this.unlockTf.text = `解锁等级:${_cfg.f_OpenLimit}`;
            }
            else {
                if (nextCfg && nextCfg.f_id == _cfg.f_id) {
                    this._tiaozhan.visible = true;
                }
                else {
                    if (_curId == _cfg.f_id) {
                        this._saoDan.visible = true;
                        showSaoDan = true;
                    }
                    else if (_curId > _cfg.f_id) {
                        this.tipsLabel = `已击败`;
                    }
                    else {
                        this.tipsLabel = `未开启`;
                    }
                }
            }
            let itemStr = "";
            if (showSaoDan) {
                let cfg = AdventureBossProxy.Ins.GetDataById(this.model.adventureBossData.f_id);
                itemStr = cfg.f_RaidsReward;
            }
            else {
                itemStr = _cfg.f_FirstRewards;
            }
            ItemViewFactory.renderItemSlots(this.rewardCon, itemStr, null, 1.0, "left", SoltItemView2, "SoltItemView2");
            if (this.yitongguantf.text.length > 0 || this.unlockTf.text.length > 0) {
                this.yitongguan.visible = true;
            }
            else {
                this.yitongguan.visible = false;
            }
            if (this._saoDan.visible) {
                if (MainModel.Ins.hasFreeYeWaiRed) {
                    DotManager.addDot(this._saoDan.skin);
                }
                else {
                    DotManager.removeDot(this._saoDan.skin);
                }
            }
        }
    }

    exports.YeWaiItemViewNew = YeWaiItemViewNew;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YeWaiBossView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.mMainSnapshot = true;
        }
        onExit() {
            this.model.off(MainEvent.AdventureBossUpdate, this, this.onRefreshHandler);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = MainModel.Ins;
                this.UI = this._ui = new ui.views.maoxian.ui_yewaiBossViewUI();
                this._ui.list1.itemRender = YeWaiItemViewNew;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list1.vScrollBarSkin = " ";
                this.btnList.push(ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.Close)));
            }
        }
        onRenderHandler(item, index) {
            item.setData(item.dataSource);
        }
        onInit() {
            this.model.on(MainEvent.AdventureBossUpdate, this, this.onRefreshHandler);
            this.onRefreshHandler();
            this._ui.list1.scrollTo(this.fightIndex);
        }
        get fightIndex() {
            let l = AdventureBossProxy.Ins.List;
            let lv = this.model.mRoleData.lv;
            let _curId = this.model.adventureBossData.f_id;
            let nextCfg = AdventureBossProxy.Ins.getNext(_curId);
            for (let i = 0; i < l.length; i++) {
                let _cfg = l[i];
                if (lv < _cfg.f_OpenLimit) ;
                else {
                    if (nextCfg && nextCfg.f_id == _cfg.f_id) {
                        return i;
                    }
                    else {
                        if (_curId == _cfg.f_id) {
                            return i;
                        }
                        else if (_curId > _cfg.f_id) ;
                    }
                }
            }
            return 0;
        }
        onRefreshHandler() {
            let l = AdventureBossProxy.Ins.List;
            this._ui.list1.array = l;
        }
        onAddLoadRes() {
            this.addAtlas("maoxian.atlas");
            this.addAtlas("maoxian2.atlas");
        }
    }

    exports.YeWaiBossView = YeWaiBossView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SmallItemIcon {
        constructor(skin) {
            this.skin = skin;
            this.skin.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler(e) {
            e.stopPropagation();
            let _vo = this.itemVo;
            MainModel.Ins.showSmallTips(_vo.getName(), _vo.getDesc(), this.skin);
        }
        setData(data) {
            this.skin.yilingqu.visible = false;
            let _l = ItemViewFactory.convertItemList(data);
            let _itemVo = _l[0];
            this.itemVo = _itemVo;
            this.skin.tf1.text = "×" + _itemVo.count;
            this.skin.icon.skin = _itemVo.getIcon();
        }
    }

    exports.SmallItemIcon = SmallItemIcon;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YeWaiSaoDanView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onExit() {
            this.model.off(MainEvent.AdventureBossUpdate, this, this.onRefreshHandler);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.maoxian.ui_saodan_viewUI();
                this.model = MainModel.Ins;
                this.slot = new SmallItemIcon(this._ui.slot);
                this.freeCtl = ButtonCtl.Create(this._ui.free, new Laya.Handler(this, this.onFreeHandler));
                this.sanDanCtl = ButtonCtl.Create(this._ui.saodan, new Laya.Handler(this, this.onSaoDanHandler));
                this.btnList.push(this.freeCtl, this.sanDanCtl);
            }
        }
        onSweep() {
            this.model.sweep(this.cfg.f_id);
            this.Close();
        }
        onSaoDanHandler() {
            this.onSweep();
        }
        onFreeHandler() {
            this.onSweep();
        }
        onRefreshHandler() {
            this.freeCtl.visible = false;
            this.sanDanCtl.visible = false;
            let cfg = AdventureBossProxy.Ins.GetDataById(this.model.adventureBossData.f_id);
            this.cfg = cfg;
            let arr = cfg.f_RaidsPrice.split("|");
            let itemStr = arr[this.model.adventureBossData.cnt];
            if (itemStr) {
                let _itemVo = ItemViewFactory.convertItemList(itemStr)[0];
                this.slot.setData(cfg.f_RaidsReward);
                if (_itemVo.count == 0) {
                    this.freeCtl.visible = true;
                }
                else {
                    this.sanDanCtl.visible = true;
                    this._ui.cnttf.text = _itemVo.count.toString();
                    if (this.model.mRoleData.gold >= _itemVo.count) {
                        this._ui.cnttf.color = `#F6ECB7`;
                    }
                    else {
                        this._ui.cnttf.color = `#FF0000`;
                    }
                }
            }
            this._ui.tf2.text = `今日剩余${(arr.length - this.model.adventureBossData.cnt)}次`;
        }
        onInit() {
            this.model.on(MainEvent.AdventureBossUpdate, this, this.onRefreshHandler);
            this.onRefreshHandler();
        }
    }

    exports.YeWaiSaoDanView = YeWaiSaoDanView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MoneyInfoViewCtl {
        constructor(skin, itemId) {
            skin.on(Laya.Event.DISPLAY, this, this.onDisplay);
            skin.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
            this.money = new MoneyCtl(skin.moneyCountLabel, itemId);
            skin.icon.skin = IconUtils.getIconByCfgId(itemId);
            this.onDisplay();
        }
        onDisplay() {
            this.money.init();
        }
        onUnDisplay() {
            this.money.exit();
        }
    }

    exports.MoneyInfoViewCtl = MoneyInfoViewCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShopView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.tabsCtl = new TabControl();
            this.tabs = [];
        }
        addTabs(con) {
            this.tabs = [];
            for (let i = 0; i < con.numChildren; i++) {
                this.tabs.push(con.getChildAt(i));
            }
            con.visible = true;
        }
        onInitUI() {
            this._ui.voucher_money.visible = false;
            new MoneyInfoViewCtl(this._ui.moneyInfo, ECellType.GOLD);
            this.addTabs(this._ui.tabcon0);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.mall.ui_mallUI;
                this.tabList = ShopProxy.Ins.getTabItemList();
                this._ui.tabcon0.visible = this._ui.tabcon1.visible = false;
                this.onInitUI();
                this.tabsCtl.init(this.tabs, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
                this.tabsCtl.checkHandler = new Laya.Handler(this, this.onCheckIndex);
                this.tabsCtl.selectIndex = 0;
                ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.onCloseHandler1));
                this._ui.itemList.selectEnable = true;
                this._ui.itemList.vScrollBarSkin = " ";
                this._ui.itemList.selectHandler = new Laya.Handler(this, this.onListSelectHandler);
                this._ui.itemList.itemRender = ui.views.mall.ui_mall_itemUI;
                this._ui.itemList.renderHandler = new Laya.Handler(this, this.onShopItemHandler);
                const tabId = this.tabList[this.tabsCtl.selectIndex].tabId;
                this._ui.itemList.array = ShopProxy.Ins.getShopItemList(tabId);
            }
        }
        onCheckIndex(index) {
            if (this.canPay(index)) {
                return true;
            }
            return false;
        }
        onCloseHandler1() {
            E.ViewMgr.Close(this.ViewType);
        }
        onVoucherSelect(cfg, v) {
            ActivityModel.Ins.recharge(cfg.f_PurchaseID);
            this._ui.itemList.selectedIndex = -1;
        }
        canPay(index) {
            if (!ShopModel.Ins.canPay) {
                if (index == EShopTabIndex.GoldHouse || index == EShopTabIndex.Voucher) {
                    E.ViewMgr.ShowMidError("暂不提供支付");
                    return false;
                }
            }
            return true;
        }
        onListSelectHandler(v) {
            const shopItem = this._ui.itemList.array[v];
            if (!shopItem)
                return;
            const index = this.tabsCtl.selectIndex;
            const tabId = this.tabList[index].tabId;
            if (tabId == ShopProxy.Ins.voucherPage) {
                this.onVoucherSelect(shopItem, v);
                return;
            }
            let cfg = ShopProxy.Ins.GetDataById(shopItem.fid);
            if (!cfg) {
                return;
            }
            if (cfg.f_isfree) {
                if (ShopModel.Ins.mGoldFree) {
                    this.onGameCoinConfirm(shopItem);
                }
            }
            else if (shopItem.purchaseId) {
                ActivityModel.Ins.recharge(shopItem.purchaseId);
            }
            else {
                let target = shopItem.itemList[0];
                MainModel.Ins.buy(shopItem.payResourceId, shopItem.payResourceAmount, target.cfgId, target.count, new Laya.Handler(this, this.onGameCoinConfirm, [shopItem]), EBuyType.Item, true);
            }
            this._ui.itemList.selectedIndex = -1;
        }
        onGameCoinConfirm(shopItem) {
            const req = new BuyItem_req();
            req.type = shopItem.shopType;
            req.fid = shopItem.fid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onTabSelectHandler() {
            this.refresh();
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            const tabItem = this.tabList[index];
            skin.tf.text = tabItem.name;
            skin.redimg.visible = false;
            if (tabItem.tabId == ShopModel.Ins.PageTypeGold) {
                if (ShopModel.Ins.mGoldFree) {
                    skin.redimg.visible = true;
                }
            }
            if (sel) {
                skin.bg1.skin = "remote/huodong/anniu_2.png";
            }
            else {
                skin.bg1.skin = "remote/huodong/anniu_1.png";
            }
        }
        onShopItemHandler(skin) {
            ShopProxy.Ins.setShopItem(skin, skin.dataSource);
        }
        refresh() {
            const index = this.tabsCtl.selectIndex;
            const tabId = this.tabList[index].tabId;
            const shopItems = ShopProxy.Ins.getShopItemList(tabId);
            this._ui.itemList.array = shopItems;
            this.tabsCtl.refreshTabsView();
        }
        refreshResources() {
        }
        onEnterHandler() {
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onExit() {
        }
        onInit() {
            this.tabsCtl.selectIndex = ShopModel.Ins.curIndex;
            this.refresh();
        }
        updateViewIndex() {
            this.onInit();
        }
    }

    exports.ShopView = ShopView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShopVoucherView extends ShopView {
        onInitUI() {
            new MoneyInfoViewCtl(this._ui.moneyInfo, ECellType.GOLD);
            new MoneyInfoViewCtl(this._ui.voucher_money, ECellType.Voucher);
            this.addTabs(this._ui.tabcon1);
        }
    }

    exports.ShopVoucherView = ShopVoucherView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YinDaoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMaskClick = false;
            this.mMainSnapshot = true;
            this.checkGuide = false;
        }
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.yindao.YinDaoViewUI;
                this._ui.on(Laya.Event.CLICK, this, this.onClick);
            }
        }
        onClick() {
            E.yinDaoMgr.index++;
            let taskArr = YinDaoTaskProxy.Ins.taskList[TaskModel.Ins.taskData.taskId];
            if (taskArr && taskArr.length > 0 && taskArr[E.yinDaoMgr.index]) {
                if (taskArr[E.yinDaoMgr.index].f_isview) {
                    this._ui.lab_name.text = this.f_replace(taskArr[E.yinDaoMgr.index].f_info);
                    let sname = taskArr[E.yinDaoMgr.index].f_audio;
                    if (sname) {
                        E.AudioMgr.StopSound();
                        E.AudioMgr.PlaySound1(sname);
                    }
                }
                else {
                    this.Close();
                }
            }
            else {
                this.Close();
            }
        }
        f_replace(str) {
            return t_Txt_Config.Ins.replace(str);
        }
        onInit() {
            this.updataView();
        }
        onExit() {
        }
        updataView() {
            let taskArr = YinDaoTaskProxy.Ins.taskList[TaskModel.Ins.taskData.taskId];
            if (taskArr && taskArr.length > 0 && taskArr[E.yinDaoMgr.index]) {
                this._ui.lab_name.text = this.f_replace(taskArr[E.yinDaoMgr.index].f_info);
                let sname = taskArr[E.yinDaoMgr.index].f_audio;
                if (sname) {
                    E.AudioMgr.StopSound();
                    E.AudioMgr.PlaySound1(sname);
                }
            }
        }
    }

    exports.YinDaoView = YinDaoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoqiJuanCtl {
        constructor(img, tf) {
            this._itemId = 0;
            this.bHorseItem = false;
            this.img = img;
            this.tf = tf;
        }
        action(itemId) {
            let req = new GetRide_req();
            req.type = this.type;
            req.itemId = itemId;
            SocketMgr.Ins.SendMessageBin(req);
        }
        get itemId() {
            return this._itemId;
        }
        refresh(goldNeed, horseItemNeed, type) {
            this.type = type;
            if (!this.img.visible) {
                return;
            }
            let id = ECellType.HorseItemId;
            let have = MainModel.Ins.mRoleData.getVal(id);
            if (have >= horseItemNeed) {
                this.img.skin = IconUtils.getIconByCfgId(id);
                this.tf.text = horseItemNeed.toString();
                this.bHorseItem = true;
                this._itemId = id;
            }
            else {
                let goldCfgId = ECellType.GOLD;
                this.bHorseItem = false;
                this.img.skin = IconUtils.getIconByCfgId(goldCfgId);
                this.tf.text = goldNeed + "";
                this._itemId = goldCfgId;
                let have = MainModel.Ins.mRoleData.gold;
                if (have < goldNeed) {
                    this.tf.color = "#ff0000";
                }
                else {
                    this.tf.color = "#F9F0BB";
                }
            }
        }
        set visible(v) {
            this.img.visible = this.tf.visible = v;
        }
    }
    class ZuoQiChouQuView extends ViewBase {
        constructor() {
            super(...arguments);
            this.uiBgCloseClick = true;
            this.autoFree = true;
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("zuoqi.atlas");
        }
        onExit() {
            this._timeCtl.stop();
            this._timeCtl.off(Laya.Event.COMPLETE, this, this.onTimeComplete);
            MainModel.Ins.off(MainEvent.ValChange, this, this.updateMoney);
            this.model.off(ZuoQiEvent.TimeChange, this, this.updateMoney);
            ActivityModel.Ins.off(ActivityEvent.OpenCloseStatusUpdate, this, this.onACtivityEvt);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = ZuoQiModel.Ins;
                this.UI = this._ui = new ui.views.zuoqi.ui_zuoqi_chouquUI();
                this.setMouseBg(this._ui.bg1);
                this.freeCtl = ButtonCtl.Create(this._ui.xunzaoBtn, new Laya.Handler(this, this.onOnceChou));
                this.btnList.push(ButtonCtl.Create(this._ui.threeBtn, new Laya.Handler(this, this.onThreeChou)), ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.Close)), ButtonCtl.Create(this._ui.addbtn, new Laya.Handler(this, this.onAddGold), false), ButtonCtl.Create(this._ui.tips, new Laya.Handler(this, this.onTipsHandler)), ButtonCtl.Create(this._ui.btn_tj, new Laya.Handler(this, this.onBtnTJHandler)));
                this.huodongCtl = ButtonCtl.CreateBtn(this._ui.huodongbtn, this, this.gotoHuoDong);
                this.btnList.push(this.huodongCtl, this.freeCtl);
                this._timeCtl = new TimeCtlV2(this._ui.timetf, "{0}" + E.LangMgr.getLang("TimeSub"));
                this.leftCtl = new ZuoqiJuanCtl(this._ui.ybicon, this._ui.ybtf1);
                this.leftCtl.type = EZuoQi.Once;
                this.rightCtl = new ZuoqiJuanCtl(this._ui.rightYuanBaoIcon, this._ui.threeTf);
                this.rightCtl.type = EZuoQi.Three;
            }
        }
        gotoHuoDong() {
            DuanWuModel.Ins.open();
            this.Close();
        }
        onTimeComplete() {
            this._ui.timetf.text = "";
        }
        onTipsHandler() {
            E.ViewMgr.openHelpView("ZuoQiTitle", "ZuoQiDesc");
        }
        onBtnTJHandler() {
            E.ViewMgr.Open(EViewType.zuoqitujian);
        }
        onAddGold() {
            MainModel.Ins.openGold();
        }
        onOnceChou() {
            let itemId = 0;
            if (!this.model.hasFreeTime) {
                itemId = this.leftCtl.itemId;
            }
            this.leftCtl.action(itemId);
        }
        onThreeChou() {
            this.rightCtl.action(this.rightCtl.itemId);
        }
        onInit() {
            MainModel.Ins.on(MainEvent.ValChange, this, this.updateMoney);
            this.model.on(ZuoQiEvent.TimeChange, this, this.updateMoney);
            ActivityModel.Ins.on(ActivityEvent.OpenCloseStatusUpdate, this, this.onACtivityEvt);
            this.updateMoney();
        }
        onACtivityEvt() {
            this.updateMoney();
        }
        onUpdateJuan() {
            this._ui.juanzhoutf.text = StringUtil.val2m(MainModel.Ins.mRoleData.getVal(ECellType.HorseItemId));
        }
        updateMoney() {
            let _result = this.model.getSubTime();
            this._result = _result;
            this.onUpdateJuan();
            if (this.model.hasFreeTime) {
                this.onTimeComplete();
                this._ui.ybtf1.text = "";
                this._ui.ybicon.visible = false;
                this._ui.xunzhaotf.text = E.LangMgr.getLang("Free");
                this.leftCtl.visible = false;
                DotManager.addDot(this.freeCtl.skin);
            }
            else {
                this.leftCtl.visible = true;
                this._ui.ybicon.visible = true;
                this._ui.xunzhaotf.text = E.LangMgr.getLang("FindOnce");
                this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
                this._timeCtl.start(_result.time - TimeUtil.serverTime);
                this.leftCtl.refresh(_result.freeItemVo.count, 1, EZuoQi.Once);
                DotManager.removeDot(this.freeCtl.skin);
            }
            this._ui.goldtf.text = StringUtil.val2m(MainModel.Ins.mRoleData.gold);
            if (this._result.isShowDiscount) {
                this._ui.zhekouImg.visible = true;
            }
            else {
                this._ui.zhekouImg.visible = false;
            }
            this.rightCtl.refresh(_result.threeNeedCount, 3, EZuoQi.Three);
            if (_result.isShowDiscount) {
                this._ui.oldGoldTf.text = E.getLang("oldprice") + `${_result.threeOldCount}`;
                this._ui.zhekouTf.text = E.getLang("limitdiscount", _result.discount);
            }
            if (DuanWuModel.Ins.isOpen) {
                this.huodongCtl.visible = true;
            }
            else {
                this.huodongCtl.visible = false;
            }
        }
    }

    exports.ZuoQiChouQuView = ZuoQiChouQuView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoQiFangPaiItemCtl {
        constructor(skin) {
            this.useTime = 500;
            this.skin = skin;
            this.iconTween = new Laya.Tween();
            this.bgTween = new Laya.Tween();
            this.skin.bg.alpha = 0.0;
            this.clearUI();
        }
        clearUI() {
            this.skin.icon11.visible = false;
        }
        set visible(v) {
            this.skin.visible = v;
        }
        set data(v) {
            if (v) {
                this._data = v;
                this.clearUI();
                this.iconTween.clear();
                this.bgTween.clear();
                this.playHorseCard();
            }
        }
        playHorseCard() {
            if (!this.horsecard) {
                this.horsecard = new SimpleEffect(this.skin, "o/spine/horsecard/horsecard", this.skin.width >> 1, this.skin.height >> 1);
            }
            this.horsecard.play(0, false, this, this.onPlayHorseCardComplete, null, true);
        }
        onPlayHorseCardComplete() {
            if (this.skin.destroyed) {
                LogSys.Warn("ZuoQiFangPaiItemCtl skin is destroyed");
                return;
            }
            this.refresh();
            this.skin.icon11.visible = true;
            this.skin.icon.alpha = 0;
            this.iconTween.to(this.skin.icon, { alpha: 1.0 }, this.useTime, null, new Laya.Handler(this, this.onComplete));
        }
        getQua(qua) {
            return ZuoQiModel.Ins.convertImage(qua);
        }
        refresh() {
            this.skin.zhuanhuatf.visible = false;
            let cfg = Mount_ListProxy.Ins.getCfg(this._data.rideid);
            this.skin.nametf.text = cfg.f_MountName;
            if (this._data.type == 1) {
                this.skin.tf1.visible = true;
                this.skin.zhuanhuatf.visible = true;
                this.skin.cntTf.text = this._data.count.toString();
                this.skin.tf1.text = E.LangMgr.getLang("IsHave");
                this.skin.icon1.skin = IconUtils.getIconByCfgId(this._data.itemid);
            }
            else {
                this.skin.tf1.text = E.LangMgr.getLang("NewGet");
            }
            let icon = this.getQua(cfg.f_Quality);
            this.skin.icon.skin = icon;
            this.skin.horseIcon.skin = IconUtils.getHorseIcon(cfg.f_MountID);
        }
        onComplete() {
        }
    }

    exports.ZuoQiFangPaiItemCtl = ZuoQiFangPaiItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoQiFangPaiView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.ctlList = [];
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("zuoqi.atlas");
        }
        onExit() {
            this._ui.tf1.visible = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = ZuoQiModel.Ins;
                this.UI = this._ui = new ui.views.zuoqi.ui_zuoqi_fangpaiUI();
                this.btnList.push(ButtonCtl.Create(this._ui.diban, new Laya.Handler(this, this.mClose)));
                this.ctlList = [];
                for (let i = 0; i < 3; i++) {
                    this.ctlList.push(new ZuoQiFangPaiItemCtl(this._ui["item" + i]));
                }
            }
        }
        mClose() {
            if (this.model.rideCacheList.length > 0) {
                this.refresh(this.model.rideCacheList.shift());
            }
            else {
                if (this._ui.tf1.visible) {
                    E.ViewMgr.Close(this.ViewType);
                }
            }
        }
        onInit() {
            this._ui.tf1.visible = false;
            this.updateRideView();
        }
        refresh(itemlist) {
            if (!this.oldW) {
                this.oldW = this.ctlList[0].skin.x + this.ctlList[0].skin.width;
                this.offsetX = this.ctlList[0].skin.x;
            }
            let count = 0;
            for (let i = 0; i < this.ctlList.length; i++) {
                let ctl = this.ctlList[i];
                ctl.visible = true;
                let _data = itemlist[i];
                if (_data) {
                    ctl.visible = true;
                    count++;
                }
                else {
                    ctl.visible = false;
                }
                ctl.data = _data;
            }
            let ox = (this._ui.width - count * this.oldW + this.offsetX) / 2;
            for (let i = 0; i < this.ctlList.length; i++) {
                let ctl = this.ctlList[i];
                if (ctl.skin.visible) {
                    ctl.skin.x = ox + i * this.oldW;
                }
            }
            this.playCongratulatEffect();
        }
        playCongratulatEffect() {
            if (!this.congratulatEffect) {
                this.congratulatEffect = new SimpleEffect(this._ui.effcon, "o/spine/cardgongxi/cardgongxi");
            }
            this.congratulatEffect.play(0, false, this, this.onPlayEnd, null, true);
        }
        onPlayEnd() {
            this._ui.tf1.visible = true;
        }
        updateRideView() {
            if (this.model.rideCacheList.length > 0) {
                let cell = this.model.rideCacheList.shift();
                this.refresh(cell);
            }
        }
    }

    exports.ZuoQiFangPaiView = ZuoQiFangPaiView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoqiBaseItem extends ui.views.zuoqi.ui_zuoqi_storge_itemUI {
        constructor() {
            super();
            this.model = ZuoQiModel.Ins;
            this.ctl = new ZuoQiSlotCtl(this, true);
            this.ctl.clickHandler = new Laya.Handler(this, this.onClickHandler);
        }
        onClickHandler() {
        }
        setData(data) {
            this.data = data;
            this.ctl.mData = ZuoqiFactory.createZuoQiVo(data);
            this.ctl.refresh();
        }
    }

    exports.ZuoqiBaseItem = ZuoqiBaseItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoQiMissionRenderView extends ZuoqiBaseItem {
        onClickHandler() {
            let view = E.ViewMgr.Get(EViewType.ZuoqiMission);
            view.upadteSelect(this.data.id);
        }
        setData(data) {
            super.setData(data);
            let view = E.ViewMgr.Get(EViewType.ZuoqiMission);
            if (view.selectIdsList.indexOf(data.id) != -1) {
                this.sel.visible = true;
            }
            else {
                this.sel.visible = false;
            }
        }
    }
    class ZuoQiMissionTopRenderView extends ZuoqiBaseItem {
        setData(data) {
            if (typeof data == "string" && data == IconUtils.Empty) {
                this.ctl.empty();
            }
            else {
                super.setData(data);
            }
        }
    }
    class ZuoQiMissionView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.selectIdsList = [];
            this._dispatchMaxCnt = 3;
        }
        onAddLoadRes() {
            this.addAtlas("zuoqi.atlas");
        }
        upadteSelect(id) {
            let index = this.selectIdsList.indexOf(id);
            if (index != -1) {
                this.selectIdsList.splice(index, 1);
            }
            else {
                if (this.selectIdsList.length >= this._dispatchMaxCnt) {
                    this.selectIdsList.shift();
                }
                this.selectIdsList.push(id);
            }
            this._ui.list2.refresh();
            let l = [];
            for (let i = 0; i < this.selectIdsList.length; i++) {
                l.push(this.model.getRideVo(this.selectIdsList[i]));
            }
            for (let i = this.selectIdsList.length; i < this._dispatchMaxCnt; i++) {
                l.push(IconUtils.Empty);
            }
            this._ui.list1.array = l;
            this.updateDispatchBtn();
        }
        onExit() {
            this.selectIdsList = [];
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.zuoqi.ui_zuoqi_yunshu_selUI();
                this.model = ZuoQiModel.Ins;
                this._ui.list2.vScrollBarSkin = " ";
                this._ui.list2.itemRender = ZuoQiMissionRenderView;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list2.array = [];
                this.btnList.push(ButtonCtl.Create(this._ui.paiqianbtn, new Laya.Handler(this, this.onPaiQian)));
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = ZuoQiMissionTopRenderView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onMissionView);
                this._ui.list1.array = [];
            }
        }
        onMissionView(item) {
            item.setData(item.dataSource);
        }
        onPaiQian() {
            if (this.selectIdsList.length >= this._dispatchMaxCnt) {
                this.model.mission(this.cfg.f_id, this.selectIdsList);
            }
            this.Close();
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            let cfg = this.Data;
            this.cfg = cfg;
            this._ui.nameTf.text = cfg.f_PlaceName;
            this._dispatchMaxCnt = cfg.f_MountNum;
            this._ui.tf1.text = E.LangMgr.getLang("DispathReward", TimeUtil.timeFormatStr(cfg.f_MissionTime, true));
            ItemViewFactory.renderItemSlots(this._ui.itemContriner, cfg.f_PlaceReward);
            let l = this.model.freeRideList(cfg.f_PlaceQuality);
            this._ui.list2.array = ZuoqiFactory.sortList(l);
            this._ui.list2.scrollTo(0);
            let _dataList = [];
            for (let i = 0; i < this._dispatchMaxCnt; i++) {
                _dataList.push(IconUtils.Empty);
            }
            this._ui.list1.width = this._dispatchMaxCnt * (125 + this._ui.list1.spaceX);
            this._ui.list1.array = _dataList;
            this.updateDispatchBtn();
        }
        updateDispatchBtn() {
            this._ui.paiqianbtn.visible = this.selectIdsList.length >= this._dispatchMaxCnt;
        }
    }

    exports.ZuoQiMissionView = ZuoQiMissionView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoqiStorgeItem extends ZuoqiBaseItem {
        constructor() {
            super();
        }
        onClickHandler() {
            let view = E.ViewMgr.Get(EViewType.ZuoqiStorge);
            if (view.selectRideId && view.selectRideId == this.data.id) {
                view.selectRideId = undefined;
            }
            else {
                view.selectRideId = this.data.id;
            }
            view.refreshView();
        }
        setData(data) {
            super.setData(data);
            let _bo = false;
            if (this.model.rideVo.rideId == data.id) {
                _bo = true;
            }
            this.ctl.mCkSelected = _bo;
            this.updateSelect();
        }
        updateSelect() {
            let view = E.ViewMgr.Get(EViewType.ZuoqiStorge);
            let _bo = false;
            if (view.selectRideId == this.data.id) {
                _bo = true;
            }
            this.ctl.mSelected = _bo;
        }
    }

    exports.ZuoqiStorgeItem = ZuoqiStorgeItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoqiStorgeView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("zuoqi.atlas");
        }
        onExit() {
            this.selectRideId = undefined;
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = ZuoQiModel.Ins;
                this.UI = this._ui = new ui.views.zuoqi.ui_zuoqi_storgeUI();
                this.btnList.push(ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.Close)));
                this._ridingBtnCtl = ButtonCtl.Create(this._ui.qichenBtn, new Laya.Handler(this, this.onRideHandler));
                this._ui.list1.itemRender = ZuoqiStorgeItem;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list1.array = [];
            }
        }
        onItemRender(item, index) {
            item.setData(item.dataSource);
        }
        refreshView() {
            this._ui.list1.refresh();
            this.updateRiding();
        }
        updateRiding() {
            if (this.selectRideId == undefined) ;
            else {
                if (this.model.rideVo.rideId == this.selectRideId) ;
            }
        }
        onRideHandler() {
            if (this.selectRideId != undefined) {
                if (this.model.rideVo.rideId == this.selectRideId) ;
                else {
                    this.model.rideUpdate(this.selectRideId);
                }
            }
            this.Close();
        }
        onInit() {
            let l = ZuoqiFactory.sortList(this.model.storgeList);
            this._ui.list1.array = l;
            this._ui.list1.scrollTo(0);
            this.refreshView();
        }
    }

    exports.ZuoqiStorgeView = ZuoqiStorgeView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AttrItemTipsUI extends ui.views.main.ui_main_zuoqi_attr2UI {
        refresh(vo) {
            if (!this.ctl) {
                this.ctl = new AttrCtl();
                this.ctl.skin = this;
            }
            this.ctl.refresh(vo);
        }
    }
    class ZuoQiTipsView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("zuoqi.atlas");
        }
        onExit() {
            this.model.off(ZuoQiEvent.RedUpdate, this, this.onRedUpdate);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = ZuoQiModel.Ins;
                this.UI = this._ui = new ui.views.zuoqi.ui_zuoqi_tipsUI();
                this.btnList.push(ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.Close)));
                this._enterCtl = ButtonCtl.Create(this._ui.enterBtn, new Laya.Handler(this, this.onEnterGame));
                this.btnList.push(this._enterCtl);
                this._ui.tf3.visible = false;
                this.slotView = new ZuoQiSlotView(this._ui.slot1);
                this._attrCtl = new ZuoQiAttrCtl(this._ui.listleft, this._ui.listright, null, this._ui.list2, this._ui.nameTf, this._ui.quaTf, this._ui.plusCon, 0, 0, AttrItemTipsUI);
            }
        }
        onEnterGame() {
            E.ViewMgr.Open(EViewType.ZuoqiMain, null, this.zqData);
            this.Close();
        }
        onInit() {
            this.model.on(ZuoQiEvent.RedUpdate, this, this.onRedUpdate);
            let _data = this.Data;
            this.zqData = _data.zqData;
            this._enterCtl.visible = _data.showEnter;
            this.slotView.setData(this.zqData);
            this._attrCtl.refresh(this.zqData);
            if (this.zqData.equipVo.attrList1.length <= 0) {
                this._ui.tf3.visible = false;
            }
            else {
                this._ui.tf3.visible = true;
            }
            this.onRedUpdate();
        }
        onRedUpdate() {
            if (this.model.hasRed) {
                DotManager.addDot(this._enterCtl.skin);
            }
            else {
                DotManager.removeDot(this._enterCtl.skin);
            }
        }
    }

    exports.ZuoQiTipsView = ZuoQiTipsView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoQiYunShuItemView extends ui.views.zuoqi.ui_zuoqi_yunshu_itemUI {
        constructor() {
            super();
            this.model = ZuoQiModel.Ins;
            ButtonCtl.Create(this.useYuanBao, new Laya.Handler(this, this.onUseGoldHandler));
            ButtonCtl.Create(this.paiqianbtn, new Laya.Handler(this, this.onPaiQianHandler));
            ButtonCtl.Create(this.yunshuzhongbtn, new Laya.Handler(this, this.onDelHandler));
            this._timeCtl = new TimeCtlV2(this.timetf, "{0}", 1);
            this.on(Laya.Event.UNDISPLAY, this, this.unDisplay);
            this.progressWidth = this.progress.width;
        }
        unDisplay() {
            this._timeCtl.stop();
        }
        onDelHandler() {
            E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.LangMgr.getLang("CannelYunShu"), new Laya.Handler(this, this.onDel));
        }
        onDel() {
            this.model.delMission(this.cfg.f_id);
        }
        onPaiQianHandler() {
            E.ViewMgr.Open(EViewType.ZuoqiMission, null, this.cfg);
        }
        onUseGoldHandler() {
            E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.LangMgr.getLang("UseItem", this._needVo.cntName), new Laya.Handler(this, this.onUnlockHandler));
        }
        onUnlockHandler() {
            this.model.unlock(this.cfg.f_id);
        }
        clear() {
            this.reset();
            this._timeCtl.stop();
            this._timeCtl.off(Laya.Event.CHANGE, this, this.onProgessChange);
            this.progress.width = 1;
            this.useYuanBao.visible = false;
            this.yunshuzhongbtn.visible = false;
            this.paiqianbtn.visible = false;
        }
        reset() {
            this.timetf.text = "";
            this.progress.visible = true;
            this.progress.width = 1;
        }
        onTimeComplete() {
            this.reset();
        }
        onProgessChange() {
            let cell = this.model.getRideMissionVo(this.cfg.f_id);
            let _subTime = cell.time - TimeUtil.serverTime;
            if (_subTime >= this.cfg.f_MissionTime) {
                _subTime = this.cfg.f_MissionTime;
            }
            if (_subTime > 0) {
                this.progress.visible = true;
                let w = this.progressWidth * ((this.cfg.f_MissionTime - _subTime) / this.cfg.f_MissionTime);
                this.progress.width = w;
            }
        }
        getTimeDesc(sec) {
            let _vo = TimeUtil.getHMS(sec);
            if (_vo.hour >= 1) {
                return _vo.hour + E.LangMgr.getLang("Hour");
            }
            if (_vo.hour < 1 && _vo.minute > 1) {
                return _vo.minute + E.LangMgr.getLang("Minute");
            }
            return _vo.sec + E.LangMgr.getLang("Second");
        }
        setData(cfg) {
            this.cfg = cfg;
            this.clear();
            let time = this.getTimeDesc(cfg.f_MissionTime);
            this.tf1.text = E.LangMgr.getLang("DispathReward", time);
            this.icon.skin = `o/horse_mission/${cfg.f_id}.png`;
            let iconlist = ["changjinkuang_bai", "changjinkuang_lv", "changjinkuang_lan", "changjinkuang_zi", "changjinkuang_jin"];
            this.qua.skin = `remote/zuoqi/${iconlist[cfg.f_PlaceQuality - 1]}.png`;
            this.nameTf.text = cfg.f_PlaceName;
            ItemViewFactory.renderItemSlots(this.itemContainer, cfg.f_PlaceReward, 7, 1, "right", SoltItemView2, "soltItem2");
            let isOpen = this.model.isMissionOpen(cfg.f_id);
            if (isOpen) {
                if (this.model.isMissionRunning(cfg.f_id)) {
                    let cell = this.model.getRideMissionVo(cfg.f_id);
                    this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
                    this._timeCtl.on(Laya.Event.CHANGE, this, this.onProgessChange);
                    let _subTime = cell.time - TimeUtil.serverTime;
                    this._timeCtl.start(_subTime);
                    if (_subTime < 0) {
                        if (E.Debug) {
                            E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, "warnning 坐骑运输结束时间" + cell.time + " id:" + cell.mssionId + "剩余运输时间:" + _subTime);
                        }
                    }
                    this.yunshuzhongbtn.visible = true;
                }
                else {
                    this.paiqianbtn.visible = true;
                }
            }
            else {
                this.useYuanBao.visible = true;
                let needVo = ItemViewFactory.convertItemList(cfg.f_MissionPrice)[0];
                this._needVo = needVo;
                this.yuanbaoTf.text = needVo.count + "";
            }
        }
    }

    exports.ZuoQiYunShuItemView = ZuoQiYunShuItemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoQiYunShunView extends ViewBase {
        constructor() {
            super(...arguments);
            this.progressWidth = 0;
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("zuoqi.atlas");
        }
        onExit() {
            this.model.off(ZuoQiEvent.StorgeUpdate, this, this.updateView);
            this.model.off(ZuoQiEvent.DispathMission, this, this.onDispathMission);
            this.model.off(ZuoQiEvent.RedUpdate, this, this.onRedUpdate);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = ZuoQiModel.Ins;
                this.UI = this._ui = new ui.views.zuoqi.ui_zuoqi_yunshuUI();
                this.progressWidth = this._ui.progress.width;
                this._ui.list1.itemRender = ZuoQiYunShuItemView;
                this._ui.list1.vScrollBarSkin = " ";
                this._ui.list1.array = [];
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onZuoQiItemHandler);
                this.yijianshouqubtnCtl = ButtonCtl.Create(this._ui.yijianshouqubtn, new Laya.Handler(this, this.onLingQuHandler));
                this.btnList.push(ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.Close)), ButtonCtl.Create(this._ui.kuorongbtn, new Laya.Handler(this, this.onKuoRongHandler)));
            }
        }
        onRedUpdate() {
            if (this.model.isFoodFull) {
                DotManager.addDot(this.yijianshouqubtnCtl.skin);
            }
            else {
                DotManager.removeDot(this.yijianshouqubtnCtl.skin);
            }
        }
        onKuoRongHandler() {
            E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.LangMgr.getLang("UseItem", this.model.mStorageUpgradePrice.cntName), new Laya.Handler(this, this.onRideStorgeUp));
        }
        onRideStorgeUp() {
            SocketMgr.Ins.SendMessageBin(new RideStorgeUp_req());
        }
        onLingQuHandler() {
            SocketMgr.Ins.SendMessageBin(new RideMissionLingQu_req());
        }
        onZuoQiItemHandler(item, index) {
            item.setData(item.dataSource);
        }
        onInit() {
            this._ui.list1.array = Mount_MissionProxy.Ins.List;
            this._ui.list1.scrollTo(0);
            this._ui.list1.refresh();
            this.model.on(ZuoQiEvent.StorgeUpdate, this, this.updateView);
            this.model.on(ZuoQiEvent.DispathMission, this, this.onDispathMission);
            this.model.on(ZuoQiEvent.RedUpdate, this, this.onRedUpdate);
            this.onRedUpdate();
            this.updateView();
        }
        onDispathMission() {
            this._ui.list1.refresh();
            ItemViewFactory.renderItemSlots(this._ui.itemContainer, this.model.serverTransitReward);
        }
        updateView() {
            this._ui.storgeTf.text = this.model.food + "/" + this.model.foodTotal;
            this._ui.progress.width = this.progressWidth * (this.model.food / this.model.foodTotal);
            this.onDispathMission();
        }
    }

    exports.ZuoQiYunShunView = ZuoQiYunShunView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ViewManager {
        constructor() {
            this._module = {};
            this._hasInit = false;
            this.openStatus = {};
        }
        OpenViews() { return this._openViews; }
        Init() {
            if (this._hasInit)
                return false;
            this._hasInit = true;
            this._views = new Map();
            this._openViews = [];
            this.initRegViews();
            return true;
        }
        initRegViews() {
            this.Reg(new LoadingView(EViewType.Loading, ELayerType.smallLoadingLayer));
            this.Reg(new MsgBoxView2(EViewType.MsgBox, ELayerType.noteLayer));
            this.Reg(new MidLabelView(EViewType.MidLabel, ELayerType.alertLayer));
            this.Reg(new QueryMsgView(EViewType.QueryMsg, ELayerType.alertLayer));
            this.Reg(new ShowPlayerView(EViewType.ShowPlayer, ELayerType.frameLayer));
            this.Reg(new LoginViewNew(EViewType.LoginNew, ELayerType.subFrameLayer));
            this.Reg(new LoginQuFuView(EViewType.LoginQuFu, ELayerType.subFrameLayer));
            this.Reg(new PleaseWaitView(EViewType.Wait, ELayerType.alertLayer));
            this.Reg(new MainView(EViewType.Main, ELayerType.flyLayer));
            this.Reg(new YinDaoView(EViewType.YinDaoView, ELayerType.frameLayer));
            this.Reg(new EquipTipsView(EViewType.EquipTips, ELayerType.frameLayer));
            this.Reg(new EquipUpdateView(EViewType.EquipUpdate, ELayerType.frameLayer));
            this.Reg(new Equip_switchView(EViewType.Equip_switch, ELayerType.frameLayer));
            this.Reg(new Attr_detailedView(EViewType.Attr_detailed, ELayerType.frameLayer));
            this.Reg(new HelpPanelView(EViewType.HelpView, ELayerType.frameLayer));
            this.Reg(new DouyinSiderView(EViewType.SiderView));
            this.Reg(new ChestLevelUpView(EViewType.ChestLevelUp, ELayerType.frameLayer));
            this.Reg(new QuickSettingView(EViewType.QuickSetting, ELayerType.frameLayer));
            this.Reg(new FightOpenView(EViewType.FightOpen, ELayerType.frameLayer));
            this.Reg(new FightMainView(EViewType.FightMain, ELayerType.subFrameLayer));
            this.Reg(new FightJieSuanView(EViewType.FightJieSuan, ELayerType.subFrameLayer));
            this.Reg(new SmallTipsView(EViewType.SmallTips, ELayerType.subFrameLayer));
            this.Reg(new RewardGetView(EViewType.GetReward, ELayerType.subFrameLayer));
            this.Reg(new ZuoQiFangPaiView(EViewType.ZuoqiFangpai, ELayerType.subFrameLayer));
            this.Reg(new YeWaiBossView(EViewType.YeWaiBoss, ELayerType.frameLayer));
            this.Reg(new YeWaiSaoDanView(EViewType.YeWaiSweep, ELayerType.frameLayer));
            this.Reg(new WingInfoView(EViewType.WingInfo, ELayerType.frameLayer));
            this.Reg(new WingLevelView(EViewType.WingMainLevel, ELayerType.frameLayer));
            this.Reg(new WingStageView(EViewType.WingMainStage, ELayerType.frameLayer));
            this.Reg(new WingExchangeView(EViewType.WingExchange, ELayerType.frameLayer));
            this.Reg(new WingTreasureView(EViewType.WingTreasure, ELayerType.frameLayer));
            this.Reg(new ZuoQiChouQuView(EViewType.ZuoqiChouQu, ELayerType.frameLayer));
            this.Reg(new ZuoQiTipsView(EViewType.ZuoqiTips, ELayerType.frameLayer));
            this.Reg(new ZuoQiMainView(EViewType.ZuoqiMain, ELayerType.frameLayer));
            this.Reg(new ZuoqiStorgeView(EViewType.ZuoqiStorge, ELayerType.frameLayer));
            this.Reg(new ZuoQiYunShunView(EViewType.ZuoqiYunShu, ELayerType.frameLayer));
            this.Reg(new ZuoQiMissionView(EViewType.ZuoqiMission, ELayerType.frameLayer));
            this.Reg(new JjcMainView(EViewType.JjcMain, ELayerType.frameLayer));
            this.Reg(new JjcFightView(EViewType.JjcFight, ELayerType.frameLayer));
            this.Reg(new JjcRewardShowView(EViewType.JjcRewardShow, ELayerType.frameLayer));
            this.Reg(new JjcLogView(EViewType.jjcLog, ELayerType.frameLayer));
            this.Reg(new JjcBSTip(EViewType.JJCBSTIP, ELayerType.frameLayer));
            this.Reg(new JjcSBTip(EViewType.JJCSBTIP, ELayerType.frameLayer));
            this.Reg(new JjcHYTip(EViewType.JJCHYTIP, ELayerType.frameLayer));
            this.Reg(new JjcWGTip(EViewType.JJCWGTIP, ELayerType.frameLayer));
            this.Reg(new JjcZHTip(EViewType.JJCZHTIP, ELayerType.frameLayer));
            this.Reg(new JjcAttrDBView(EViewType.JJCDBTIP, ELayerType.frameLayer));
            this.Reg(new jjcLCTip(EViewType.jjcLCTip, ELayerType.frameLayer));
            this.Reg(new XingFuKuangMainView(EViewType.XingFuKuangHuanMain, ELayerType.frameLayer));
            this.Reg(new QianDaoView(EViewType.QianDao, ELayerType.frameLayer));
            this.Reg(new QianDaoNewView(EViewType.SignInNew, ELayerType.frameLayer));
            this.Reg(new LiBaoGongNengJiHeView(EViewType.Libao, ELayerType.frameLayer));
            this.Reg(new JiJingListView(EViewType.CCJJView, ELayerType.frameLayer));
            this.Reg(new BaoxiangChengZhangLibaoView(EViewType.BoxChengZhang, ELayerType.frameLayer));
            this.Reg(new JueseChengZhangLiBao(EViewType.JueSeChengZhang, ELayerType.frameLayer));
            this.Reg(new ChongZhiView(EViewType.ChongZhiTest, ELayerType.frameLayer));
            this.Reg(new MeiRiLiBaoView(EViewType.MeiRiLiBao, ELayerType.frameLayer));
            this.Reg(new ZuoqiChengZhangJiJin(EViewType.ZuoqiChengZhangView, ELayerType.frameLayer));
            this.Reg(new LingchongChengZhangJiJin(EViewType.LingchongChengZhangView, ELayerType.frameLayer));
            this.Reg(new BaoshiChengZhangJiJin(EViewType.BaoshiChengZhangView, ELayerType.frameLayer));
            this.Reg(new MeiRiFenXiangView(EViewType.MeiRiFenXiangView, ELayerType.frameLayer));
            this.Reg(new TianJiaZhuoMianView(EViewType.TianJiaZhuoMianView, ELayerType.frameLayer));
            this.Reg(new FenXiangDaoQunView(EViewType.FenXiangDaoQunView, ELayerType.frameLayer));
            this.Reg(new YouXiQuanLiBaoView(EViewType.YouXiQuanLiBaoView, ELayerType.frameLayer));
            this.Reg(new SkinLiBaoView(EViewType.SkinLiBaoView, ELayerType.frameLayer));
            this.Reg(new SanGuoShiJiView(EViewType.SanGuo, ELayerType.frameLayer));
            this.Reg(new HuoDongLiBaoView(EViewType.HuoDongLiBao, ELayerType.frameLayer));
            switch (E.sdk.clienttype) {
                case EClientType.Main:
                    this.Reg(new ShopView(EViewType.Shop, ELayerType.frameLayer));
                    break;
                case EClientType.Discount:
                    this.Reg(new ShopVoucherView(EViewType.Shop, ELayerType.frameLayer));
                    break;
            }
            this.Reg(new Huanzhuang_mainView(EViewType.HuanzhuangMain, ELayerType.frameLayer));
            this.Reg(new Huangzhuang_tujianView(EViewType.HuanzhuangTuJian, ELayerType.frameLayer));
            this.Reg(new Huangzhuang_shuxing_view(EViewType.AttrShow, ELayerType.frameLayer));
            this.Reg(new YueKaView(EViewType.YueKa, ELayerType.frameLayer));
            this.Reg(new ZhongShenKaView(EViewType.ZhongShenKa, ELayerType.frameLayer));
            this.Reg(new Xingrenlibao_view(EViewType.NewPlayPackage, ELayerType.frameLayer));
            this.Reg(new TeQuanKaView(EViewType.TeQuanKaView, ELayerType.frameLayer));
            this.Reg(new XianShiFuLiView(EViewType.DiamondEject, ELayerType.frameLayer));
            this.Reg(new ChestQuickUseView(EViewType.ChestQuickUse, ELayerType.frameLayer));
        }
        OpenByFuncid(funcid, flag = true, param) {
            if (!TaskModel.Ins.isFuncOpen(funcid, true)) {
                return;
            }
            let mainCfg = MainIconProxy.Ins.getCfgByFuncid(funcid);
            if (funcid == EFuncDef.Wing) {
                let wing = WingModel.Ins.getOwnerWingData();
                if (wing.wingId) {
                    E.ViewMgr.Open(EViewType.WingInfo, null, wing);
                }
                return;
            }
            else if (funcid == EFuncDef.Ride) {
                ZuoQiModel.Ins.onZuoqiClick();
                return;
            }
            else if (funcid == EFuncDef.PopWin) {
                ActivityModel.Ins.openPopWin();
                return;
            }
            else if (flag && mainCfg && !StringUtil.IsNullOrEmpty(mainCfg.f_funarr)) {
                MainModel.Ins.mainView.openMushFunc(funcid);
                return;
            }
            else if (funcid == EFuncDef.CJKF) {
                let val = RedUpdateModel.Ins.getValByID(RedEnum.VIP_KEFU);
                if (val == 0) {
                    RedUpdateModel.Ins.save(RedEnum.VIP_KEFU);
                }
                MainModel.Ins.funcSetRed(EFuncDef.CJKF, false);
            }
            else if (flag && mainCfg && mainCfg.f_ui_id) {
                MainModel.Ins.mainView.huodong.show(parseInt(mainCfg.f_funid), mainCfg.f_ui_id);
                return;
            }
            else if (funcid == EFuncDef.Alliance) {
                if (AllianceModel.Ins.alliance) {
                    E.ViewMgr.Open(EViewType.AllianceMainView);
                }
                else {
                    E.ViewMgr.Open(EViewType.AllianceListView);
                }
                return;
            }
            else if (funcid == EFuncDef.SpringFestival) {
                let req = new SpringFestivalCanJoin_req;
                SocketMgr.Ins.SendMessageBin(req);
                return;
            }
            let cfg = FuncProxy.Ins.getCfgByFid(funcid);
            if (!cfg) {
                return;
            }
            if (!cfg.f_viewType) {
                LogSys$1.Warn("funcid:" + funcid + " f_viewType is 0");
            }
            else {
                if (funcid == EFuncDef.Shop) {
                    ShopModel.Ins.curIndex = EShopTabIndex.EveryHotSell;
                }
                this.Open(cfg.f_viewType, null, param);
            }
        }
        FEval(text) {
            if (typeof eval == "function") {
                eval(text);
            }
        }
        initModule(module, key, handler, initHandler) {
            if (!this._module[key]) {
                this._module[key] = module;
                if (initHandler) {
                    initHandler.run();
                }
            }
            handler.run();
        }
        OpenModule(module, key, handler, initHandler) {
            let json;
            let moduleJson = StaticDataMgr.Ins.moduleJson;
            if (moduleJson) {
                json = LoadUtil.GetJson(moduleJson);
            }
            {
                this.initModule(module, key, handler, initHandler);
            }
        }
        Reg(iv) {
            if (iv == null) {
                LogSys$1.Log("view is null");
                return;
            }
            if (this._views[iv.ViewType]) {
                LogSys$1.Log("has registed viewtype:" + iv.ViewType);
                return;
            }
            this._views[iv.ViewType] = iv;
        }
        UnReg(type) {
            if (!this._views[type])
                return;
            this._views[type] = null;
            delete this._views[type];
        }
        Get(type) {
            return this._views[type];
        }
        CurOpenNum() {
            return this._openViews.length;
        }
        Open(type, callback = null, data) {
            let iv = this.Get(type);
            if (iv == null) {
                LogSys$1.Warn("未注册，不可打开:type=" + type);
                return;
            }
            this.openStatus[type] = type;
            if (iv.IsShow())
                return;
            if (type == EViewType.Equip_switch) {
                MainModel.Ins.event(MainEvent.Open_Equip_switch_View);
            }
            LogSys$1.Log("Open " + type.toString());
            E.ResMgr.LoadGroup(iv.ResGroup, Callback.Create(this, () => {
                if (type != EViewType.Wait) {
                    this.closeWait();
                }
                this._openViews.push(type);
                iv.Enter(callback, data);
            }), Callback.Create(this, (v) => {
                if (type != EViewType.Wait) {
                    this.openWait();
                }
                this.UpdateLoading(v);
            }));
            let setVo = SheZhiDingYueProxy.Ins.getCfgByViewType(type);
            if (setVo) {
                E.sdk.getSubscribe([setVo.f_modelID]);
            }
        }
        Close(type) {
            delete this.openStatus[type];
            let iv = this.Get(type);
            if (iv == null)
                return;
            if (!this.IsOpen(type))
                return;
            ListUtil.Remove(this._openViews, type);
            iv.Exit();
        }
        isOpenReg(type) {
            return this.openStatus[type] != undefined;
        }
        IsOpen(type) {
            let contians = ListUtil.Contains(this._openViews, type);
            return contians;
        }
        HasReg(type) {
            if (this._views[type])
                return true;
            return false;
        }
        Clear() {
            this.CloseAll();
            this._views = null;
        }
        CloseAll() {
            for (let i = this._openViews.length - 1; i >= 0; i--) {
                if (this._openViews[i] == EViewType.Debug)
                    continue;
                this.Close(this._openViews[i]);
            }
        }
        Destroy(newView = null) {
            let oldView = this.Get(newView.ViewType);
            if (oldView) {
                this.UnReg(newView.ViewType);
                oldView.Exit();
                oldView = null;
            }
            this.Reg(newView);
        }
        HasFrameOpen() {
            let hasOpen = false;
            this._openViews.forEach(type => {
                let view = this.Get(type);
                if (view && (view.LayerType == ELayerType.frameLayer || view.LayerType == ELayerType.subFrameLayer))
                    hasOpen = true;
            });
            return hasOpen;
        }
        HasFrameOpenExcept(viewTypes) {
            let hasOpen = false;
            this._openViews.forEach(type => {
                let view = this.Get(type);
                if (view && (view.LayerType == ELayerType.frameLayer || view.LayerType == ELayerType.subFrameLayer) && !ListUtil.Contains(viewTypes, view.ViewType))
                    hasOpen = true;
            });
            return hasOpen;
        }
        IsInputing() {
            let isInputing = false;
            return isInputing;
        }
        ShowMsgBox(type, content, sureCall = null, cancelCall = null, exitCall = null) {
            if (this.isOpenReg(EViewType.MsgBox)) {
                this.Get(EViewType.MsgBox).show(type, content, sureCall, cancelCall, exitCall);
            }
            else {
                this.Open(EViewType.MsgBox, Callback.Create(this, () => {
                    let view = this.Get(EViewType.MsgBox);
                    view.show(type, content, sureCall, cancelCall, exitCall);
                }), []);
            }
        }
        ShowMidLabel(content, color = "#E4CEA5") {
            let view = E.ViewMgr.Get(EViewType.MidLabel);
            if (view && view.IsShow()) {
                let _midView = view;
                let node = {};
                node.content = content;
                node.color = color;
                _midView.midLabelList.push(node);
                return;
            }
            this.midDoOpen(content, color);
        }
        midDoOpen(content, color = "#00ff00") {
            this.Open(EViewType.MidLabel, Callback.Create(this, () => {
                let view = this.Get(EViewType.MidLabel);
                view.ShowMidLabel(content, color);
            }), []);
        }
        ShowMidOk(content) {
            this.ShowMidLabel(content);
        }
        ShowMidError(content) {
            this.ShowMidLabel(content, "#ff0000");
        }
        ShowDebugError(content) {
            if (E.Debug) {
                console.error(content);
                this.ShowMidLabel(content, "#ff0000");
            }
        }
        ShowLoading(v = 0) {
            this.Open(EViewType.Loading, Callback.Create(this, () => {
                this.UpdateLoading(v);
            }), null);
        }
        closeLoading() {
            if (this.isOpenReg(EViewType.Loading)) {
                let loading = E.ViewMgr.Get(EViewType.Loading);
                let vo = new LoadingVo();
                vo.start = loading.curVal;
                vo.end = 1;
                vo.duration = 1000;
                vo.callBack = new Laya.Handler(this, this.loadEnd);
                this.loading(vo);
            }
        }
        loading(vo) {
            if (E.ViewMgr.isOpenReg(EViewType.Loading)) {
                E.ViewMgr.Get(EViewType.Loading).playAnim(vo);
            }
            else {
                E.ViewMgr.Open(EViewType.Loading, null, vo);
            }
        }
        loadEnd() {
            this.Close(EViewType.Loading);
        }
        UpdateLoading(v) {
            let loading = this.Get(EViewType.Loading);
            if (loading != null && loading.UI != null && loading.UI.visible) {
                loading.UpdateProgress(v);
            }
        }
        SetLayout() {
            this._openViews.forEach(i => {
                this.Get(i).SetLayout();
            });
        }
        Loading(res, endHander) {
            this.Open(EViewType.Loading, Callback.Create(this, () => {
                this.UpdateLoading(0);
                let loading = E.ViewMgr.Get(EViewType.Loading);
                E.ResMgr.LoadGroup(res, Callback.Create(this, () => {
                    E.ViewMgr.Close(EViewType.Loading);
                    endHander.run();
                }), Callback.Create(this, (v) => {
                    if (loading != null)
                        loading.UpdateProgress(v);
                }));
            }), null);
        }
        ShowNotYetOpen() {
            this.ShowMidLabel(E.LangMgr.getLang("NotYetOpen"));
        }
        openHelpView(title, desc) {
            let _data = {};
            _data.title = E.LangMgr.getLang(title);
            _data.desc = E.LangMgr.getLang(desc);
            this.Open(EViewType.HelpView, null, _data);
        }
        openWait(autoClose = false) {
            this.Open(EViewType.Wait, null, autoClose);
        }
        closeWait() {
            this.Close(EViewType.Wait);
        }
        openReward(_items) {
            let view = this.Get(EViewType.GetReward);
            if (E.ViewMgr.isOpenReg(EViewType.GetReward)) {
                view.cacheList.push(_items);
            }
            else {
                this.Open(EViewType.GetReward, null, _items);
            }
        }
        Update(type) {
            let view = this.Get(type);
            if (view.IsShow()) {
                view.UpdateView();
            }
        }
        convert(list1, type, arr, __index) {
            let skinNode;
            if (list1 instanceof Laya.Panel) {
                let panel = list1;
                if (panel.dataSource instanceof ScrollPanelControl) {
                    let sc = panel.dataSource;
                    let index = parseInt(arr[__index + 1]);
                    let skin = sc.getRowCol(index, 0);
                    if (skin) {
                        skinNode = skin[arr[__index + 2]];
                    }
                }
            }
            else if (list1 instanceof Laya.List) {
                let item = list1.getCell(parseInt(arr[__index + 1]));
                if (item) {
                    skinNode = item[arr[__index + 2]];
                }
            }
            else if (type == EViewType.Main && arr[__index] == "menu") {
                let menu = E.ViewMgr.Get(EViewType.Main).botIconView;
                if (menu) {
                    let funcid = parseInt(arr[__index + 1]);
                    for (let i = 0; i < menu.con1.numChildren; i++) {
                        let item = menu.con1.getChildAt(i);
                        if (item.dataSource == funcid) {
                            skinNode = item;
                            break;
                        }
                    }
                }
            }
            else if (arr.length == 4 && list1 instanceof Laya.View) {
                let __index = 1;
                skinNode = this.convert(list1[arr[__index]], type, arr, __index);
                return skinNode;
            }
            else {
                let key1 = arr[__index];
                let key2 = arr[__index + 1];
                if (type == EViewType.Main) {
                    if (key1.indexOf("func") == 0) {
                        let funcid = parseInt(key1.substr(4, key1.length - 4));
                        if (!isNaN(funcid)) {
                            let main = E.ViewMgr.Get(EViewType.Main);
                            if (main) {
                                let u = main.getByFuncId(funcid);
                                if (u) {
                                    skinNode = u[key2];
                                    return skinNode;
                                }
                            }
                        }
                    }
                }
                let ui = this.Get(type).UI;
                if (ui && ui[key1] && ui[key1][key2]) {
                    skinNode = ui[key1][key2];
                }
            }
            return skinNode;
        }
        getUIByKey(typesstr, key) {
            let type = parseInt(typesstr);
            let skinNode;
            let arr = key.split("-");
            if (arr.length <= 1) {
                let ui = this.Get(type).UI;
                if (ui) {
                    skinNode = ui[key];
                }
                if (!skinNode && type == EViewType.Main) {
                    skinNode = MainModel.Ins.mainView._midbtns.getByName(key);
                }
            }
            else {
                let ui = this.Get(type).UI;
                if (ui) {
                    let __index = 0;
                    skinNode = this.convert(ui[arr[__index]], type, arr, __index);
                }
            }
            return skinNode;
        }
        getUIByKeySt(str) {
            let arr = str.split("-");
            let a = arr[0];
            let index = str.indexOf("-");
            return this.getUIByKey(a, str.substr(index + 1, str.length - index - 1));
        }
    }

    exports.ViewManager = ViewManager;

    return exports;

}(window));
(function (exports) {
    'use strict';

    let sdk = window['Y1YSDK'];
    class cb1SDK extends BaseSdk {
        constructor() {
            super(...arguments);
            this.channel_id = "b25126dec4807e6d31af54a364e18361";
            this.appsecret = "PAOBBN5APNJE93PM6DB13PPBJFE1A9PQ";
        }
        init() {
        }
        login(that, callBack) {
            let param = {
                channel_id: this.channel_id
            };
            HttpUtil.httpPost(`${InitConfig.getSyURL()}/h5sign/init`, param, new Laya.Handler(this, this.onInitHandler, [that, callBack]));
        }
        onInitHandler(that, callBack, value) {
            console.log("this.initvalue>>>>", value);
            let data = JSON.parse(value);
            if (data.code == 0) {
                let param = {
                    channel_id: this.channel_id,
                    sign: data.result.sign
                };
                sdk.config(param);
                let param1 = {
                    channel_id: this.channel_id,
                    userToken: sdk.userToken
                };
                HttpUtil.httpPost(`${InitConfig.getSyURL()}/h5sign/userInfo`, param1, new Laya.Handler(this, this.onLoginHandler, [that, callBack]));
                console.log("this.cbsdk>>>>", sdk);
                console.log("this.cbsdk.userToken>>>>", sdk.userToken);
            }
        }
        onLoginHandler(that, callBack, value) {
            console.log("this.Loginvalue>>>>", value);
            let data = JSON.parse(value);
            if (data.code == 0) {
                let param = {
                    sign: data.result.sign
                };
                let data1 = sdk.getUserInfo(param);
                if (data1.status == 1001) {
                    this.openid = data1.userinfo.openid;
                    console.log("this.openid>>>>", this.openid);
                    callBack.call(that);
                }
            }
        }
        recharge(orderId, cfg) {
            console.log("this.cfg>>>>>>>>>>>>>", cfg);
            let price = cfg.f_price / 100;
            let param = {
                channel_id: this.channel_id,
                userToken: sdk.userToken,
                orderid: orderId,
                price: price.toString(),
                item_id: "1",
                other: ""
            };
            HttpUtil.httpPost(`${InitConfig.getSyURL()}/h5sign/charge`, param, new Laya.Handler(this, this.onRechargeHandler, [orderId, price]));
        }
        onRechargeHandler(orderId, cny, value) {
            console.log("this.Rechargevalue>>>>", value);
            let data1 = JSON.parse(value);
            if (data1.code == 0) {
                let param = {
                    orderid: orderId,
                    price: cny.toString(),
                    item_id: '1',
                    other: '',
                    role_id: MainModel.Ins.mRoleData.AccountId.toString(),
                    role_name: MainModel.Ins.mRoleData.NickName,
                    role_level: MainModel.Ins.mRoleData.lv,
                    server_id: MainModel.Ins.mRoleData.serverId.toString(),
                    sign: data1.result.sign
                };
                let data = sdk.PayInfo(param);
                parent.postMessage(data.data, sdk.PUBLIC_URL);
            }
        }
        valChange(type, v) {
            let report_type = "";
            switch (type) {
                case ESdkValChange.LevelUp:
                    report_type = "roleupgrade";
                    break;
                case ESdkValChange.EnterGame:
                    report_type = "entergame";
                    break;
                case ESdkValChange.CreateRole:
                    report_type = "createrole";
                    break;
            }
            let param = {
                role_id: MainModel.Ins.mRoleData.AccountId.toString(),
                role_name: MainModel.Ins.mRoleData.NickName,
                role_level: MainModel.Ins.mRoleData.lv,
                server_id: MainModel.Ins.mRoleData.serverId.toString(),
                server_name: MainModel.Ins.mRoleData.serverName,
                role_vip: MainModel.Ins.mRoleData.lv,
                role_power: MainModel.Ins.mRoleData.plus.toString(),
                report_type: report_type,
            };
            let data = sdk.syReportRoleInfo(param);
            let sendMessage = data.data ? data.data : param;
            parent.postMessage(sendMessage, sdk.PUBLIC_URL);
        }
        lookVideo(callback) {
            E.ViewMgr.ShowMidError("暂未开启");
        }
        getOpenId() {
            return this.openid;
        }
        getAppId() {
            return "sgyxh5";
        }
    }

    exports.cb1SDK = cb1SDK;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Douyin extends BaseCfg {
        GetTabelName() {
            return "t_Douyin";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Douyin();
            }
            return this._ins;
        }
        getValStr(id) {
            let cfg = this.GetDataById(id);
            return cfg.f_val;
        }
    }

    exports.t_Douyin = t_Douyin;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DouyinGame {
        sendTA(eventName, value) {
            E.sendTrack(eventName, value);
        }
    }
    window["game"] = new DouyinGame();
    class DouYinSDK extends WeiXinSDK {
        get isFromSidebarCard() {
            return ttSygame.sidebarIconInfo && ttSygame.sidebarIconInfo.allowGetReward == 1;
        }
        init() {
            LogSys.Log("DouYinSDK init...");
            super.init();
            gameTT.onTouchEnd(this.onTouchEnd);
        }
        getSiderInfo() {
        }
        loginCallBack() {
            this.getSiderInfo();
        }
        convertPos(obj) {
            let pos;
            if (obj.changedTouches && obj.changedTouches.length > 0) {
                let o = obj.changedTouches[0];
                pos = new Laya.Point(Math.round(o.clientX), Math.round(o.clientY));
            }
            return pos;
        }
        onSiderTouchEnd(obj) {
            let pos = this.convertPos(obj);
            let curId = SubscribeID.SIDER_POS;
            if (pos) {
                let _signMouseUp = SubscribeModel.Ins.getByID(curId);
                if (_signMouseUp && _signMouseUp.x == pos.x && _signMouseUp.y == pos.y) {
                    ttSygame.sySidebarGuide();
                }
            }
        }
        onTouchEnd(obj) {
            let sdk = E.sdk;
            sdk.onSiderTouchEnd(obj);
        }
        getSubscribe(templates) {
            ttSygame.syGetSubscribe(templates).then((res) => {
                LogSys.Log("getSubscribe==========>" + JSON.stringify(res));
            });
        }
        sdkWatchCVideo(callback) {
            let _adunitid = initConfig.adunitid;
            if (!_adunitid) {
                console.log('缺少激励视频id');
                if (callback)
                    callback(2);
                return false;
            }
            const adUnitId = _adunitid;
            const videoAd = gameTT.createRewardedVideoAd({ adUnitId });
            videoAd.onError(err => {
                console.log('showRewordVideo err: ', err);
                if (callback)
                    callback(2);
            });
            try {
                if (videoAd.closeHandler) {
                    videoAd.offClose(videoAd.closeHandler);
                }
            }
            catch (e) {
                console.log('videoAd.offClose error');
            }
            videoAd.closeHandler = function (res) {
                if (!videoAd)
                    return;
                if (res && res.isEnded || res === undefined) {
                    LogSys.Log("sdkWatchCVideo finished...");
                    if (callback)
                        callback(1);
                    ttSygame.syUploadCasualAdInfo({
                        "position": 1,
                        "task": ""
                    });
                }
                else {
                    LogSys.Log("sdkWatchCVideo not play end,and exit...");
                    if (callback)
                        callback(0);
                }
                videoAd.offClose();
            };
            videoAd.onClose(videoAd.closeHandler);
            videoAd.show().catch(() => {
                videoAd.load().then(() => videoAd.show());
            });
        }
        goShareData(shareQueryParam) {
            let templateId = t_Douyin.Ins.getValStr(1);
            LogSys.Log("share templateId is " + templateId);
            gameTT.shareAppMessage({
                templateId: templateId,
                query: `${shareQueryParam}`,
                success() {
                    console.log("分享成功");
                },
                fail(e) {
                    console.log("分享失败", e);
                },
            });
        }
    }

    exports.DouYinSDK = DouYinSDK;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaUSDK extends BaseSdk {
        init() {
        }
        login(that, callBack) {
            this.uid = Laya.Utils.getQueryString("uid");
            this.appid = Laya.Utils.getQueryString("appid");
            console.log("this.uid>>>>", this.uid);
            console.log("this.appid>>>>", this.appid);
            callBack.call(that);
        }
        recharge(orderId, cfg) {
            console.log("this.cfg>>>>>>>>>>>", cfg);
            let price = cfg.f_price;
            let paydata = {
                uid: this.uid,
                appid: this.appid,
                money: price.toString(),
                goodsName: cfg.f_read,
                payFlag: '1',
                ext: '1',
                time: TimeUtil.serverTime.toString(),
                roleid: MainModel.Ins.mRoleData.AccountId.toString(),
                rolename: MainModel.Ins.mRoleData.NickName,
                rolelevel: MainModel.Ins.mRoleData.lv.toString(),
                serverid: MainModel.Ins.mRoleData.serverId.toString(),
                servername: MainModel.Ins.mRoleData.serverName,
                cpOrderId: orderId,
                goodsId: cfg.f_id.toString(),
                desc: '1',
                count: '1',
                quantifier: '个'
            };
            game8u_pay(paydata);
        }
        valChange(type, v) {
            let report_type = "";
            switch (type) {
                case ESdkValChange.LevelUp:
                    report_type = "4";
                    break;
                case ESdkValChange.EnterGame:
                    report_type = "3";
                    break;
                case ESdkValChange.CreateRole:
                    report_type = "2";
                    break;
            }
            let roledata = {
                datatype: report_type,
                roleid: MainModel.Ins.mRoleData.AccountId.toString(),
                rolename: MainModel.Ins.mRoleData.NickName,
                rolelevel: MainModel.Ins.mRoleData.lv.toString(),
                serverid: MainModel.Ins.mRoleData.serverId.toString(),
                servername: MainModel.Ins.mRoleData.serverName,
                fightvalue: MainModel.Ins.mRoleData.getBattleValue(),
                moneynum: MainModel.Ins.mRoleData.gold.toString(),
                vip: MainModel.Ins.mRoleData.lv.toString(),
                rolecreatetime: '',
                rolelevelmtime: '',
                partyid: '',
                partyname: '',
                partyroleid: '',
                partyrolename: '',
                gender: '',
                professionid: '',
                profession: '',
                friendlist: '',
                attach: ''
            };
            game8u_reportrole(roledata);
        }
        lookVideo(callback) {
            console.log("BaUSDKlookVideo>>>>>>>>>>>>>>>>>>>>>>");
            E.ViewMgr.ShowMidError("暂未开启");
        }
        getOpenId() {
            return this.uid;
        }
        getAppId() {
            return this.appid;
        }
    }

    exports.BaUSDK = BaUSDK;

    return exports;

}(window));
(function (exports) {
    'use strict';

    var Browser = Laya.Browser;
    function layacoreOverride() {
        Laya.Context.prototype['__defineSetter__']("globalCompositeOperation", function (value) {
            var n = Laya.BlendMode['TOINT'][value];
            var SaveBase = Laya.SaveBase;
            n == null || (this._nBlendType === n) || (SaveBase.save(this, SaveBase.TYPE_GLOBALCOMPOSITEOPERATION, this, true),
                this._nBlendType = n);
        });
        let EventDispatcher = Laya.EventDispatcher;
        EventDispatcher.prototype.event = function (type, data) {
            if (!this._events || !this._events[type])
                return false;
            var listeners = this._events[type];
            if (listeners.run) {
                if (listeners.once)
                    delete this._events[type];
                data != null ? listeners.runWith(data) : listeners.run();
            }
            else {
                for (var i = 0, n = listeners.length; i < n; i++) {
                    var listener = listeners[i];
                    if (listener) {
                        (data != null) ? listener.runWith(data) : listener.run();
                    }
                    if (!listener || listener.once) {
                        listeners.splice(i, 1);
                        i--;
                        n--;
                    }
                }
                if (listeners.length === 0 && this._events && this._events[type] && !this._events[type].run)
                    delete this._events[type];
            }
            return true;
        };
    }
    class ScreenAdapter {
    }
    ScreenAdapter.DefaultHeight = 1334;
    ScreenAdapter.UIRefWidth = 750;
    class E {
        static get Debug() {
            return debug;
        }
        static get wx() {
            return window["wx"];
        }
        static get user() {
            let wx = this.wx;
            if (wx) {
                return "jiangqun33";
            }
            return HrefUtils.getHref("user");
        }
        static get ta() {
            if (Laya.Utils.getQueryString("no_ta")) {
                return null;
            }
            if (window["ta"]) {
                return window["ta"];
            }
            return null;
        }
        static taLoginTrack(eventName) {
            {
                if (E.ta) {
                    E.ta.track(eventName);
                    LogSys$1.Log("sendTrack>>>>>>>>>>>>>>>>>" + eventName);
                }
            }
        }
        static sendTrack(eventName, value = null) {
            if (E.ta) {
                if (value) {
                    E.ta.track(eventName, value);
                }
                else {
                    E.ta.track(eventName);
                }
            }
        }
        static testUI() {
            let label = new Laya.Label();
            label.wordWrap = true;
            label.width = Laya.stage.width;
            label.text = Laya.stage.width + " " + Laya.stage.height;
            label.fontSize = 32;
            label.color = "#ff0000";
            this.logstr += "Wx init!\n";
            Laya.timer.frameLoop(1, this, () => {
                label.text = this.logstr;
                Laya.stage.addChild(label);
                label.y = Laya.stage.height - label.textField.height;
            });
        }
        static getLang(key, ...args) {
            return E.LangMgr.getLang(key, args);
        }
        static get_SDK_platform() {
            let _platform = initConfig.platform;
            if (Laya.Utils.getQueryString("sdk_platform")) {
                _platform = parseInt(Laya.Utils.getQueryString("sdk_platform"));
            }
            return _platform;
        }
        static Init() {
            if (Laya.Utils.getQueryString("platform")) {
                initConfig.platform = parseInt(Laya.Utils.getQueryString("platform"));
            }
            if (Laya.Utils.getQueryString("clienttype")) {
                initConfig.clienttype = parseInt(Laya.Utils.getQueryString("clienttype"));
            }
            window["debug"] = (Laya.Utils.getQueryString("debug") == "1") || initConfig.debug;
            window["LogSys"] = LogSys$1;
            window["DebugUtil"] = DebugUtil$1;
            let loglevel = initConfig.loglevel || HrefUtils.getVal("loglevel");
            if (loglevel) {
                LogSys$1.Level = loglevel;
            }
            LogSys$1.Log(Version.cli_version + "," + Laya.version);
            layacoreOverride();
            E.taLoginTrack("GameInit");
            if (E.ta) {
                E.ta.userSetOnce({ version_num: Version.curValue, client_platform: initConfig.platform });
            }
            DrawCallConfig.init();
            let _platform = this.get_SDK_platform();
            if (_platform == PlatformConfig.WeiXin) {
                if (!this.wx) {
                    alert("please set platform = 0");
                    return;
                }
                this.sdk = new WeiXinSDK();
            }
            else if (_platform == PlatformConfig.CB1) {
                this.sdk = new cb1SDK();
            }
            else if (_platform == PlatformConfig.DOU_YIN) {
                this.sdk = new DouYinSDK();
            }
            else if (_platform == PlatformConfig.BaU) {
                this.sdk = new BaUSDK();
            }
            else {
                this.sdk = new BaseSdk();
            }
            E.sdk.init();
            E.sdk.login(this, this.onLoginCallBack);
        }
        static onLoginCallBack() {
            E.sdk.loginCallBack();
            E.taLoginTrack("wxLoginComolete");
            if (E.ta) {
                if (window["Sygame"]) {
                    E.ta.userSetOnce({ openid: window["Sygame"].openid });
                }
                else if (window["Y1YSDK"]) {
                    E.ta.userSetOnce({ openid: E.sdk.getOpenId() });
                }
            }
            if (this._hasInited)
                return;
            this._hasInited = true;
            AppCfg.Init();
            this.layaInit();
        }
        static Clear() {
            this.ClearFrameMgr();
            this._hasInited = false;
        }
        static get SceneMgr() { return this._sceneMgr; }
        static get ViewMgr() { return this._viewMgr; }
        static get ResMgr() { return this._resMgr; }
        static get EventMgr() { return this._eventMgr; }
        static get MsgMgr() { return this._msgMgr; }
        static get AudioMgr() { return this._audioMgr; }
        static get LangMgr() { return this._langMgr; }
        static get yinDaoMgr() { return this._yinDaoMgr; }
        static onPreInitFramework() {
            this._sceneMgr = new Scene2DManager();
            this._viewMgr = new ViewManager();
            this._resMgr = new ResourceManager();
            this._eventMgr = new EventManager();
            this._msgMgr = new MsgManager();
            this._audioMgr = new Frame.AudioManager();
            this._langMgr = new LanguageManager();
            this._yinDaoMgr = new YinDaoManager();
            if (!this.onAfterInitFramework()) {
                LogSys$1.Error("InitFramework failed!");
            }
        }
        static onAfterInitFramework() {
            if (!this._sceneMgr.Init())
                return false;
            if (!this._viewMgr.Init())
                return false;
            if (!this._resMgr.Init())
                return false;
            if (!this._eventMgr.Init())
                return false;
            if (!this._msgMgr.Init())
                return false;
            if (!this._audioMgr.Init())
                return false;
            if (!this._langMgr.Init())
                return false;
            return true;
        }
        static ClearFrameMgr() {
            this._sceneMgr.Clear();
            this._viewMgr.Clear();
            this._resMgr.Clear();
            this._eventMgr.Clear();
            this._msgMgr.Clear();
            this._audioMgr.Clear();
            this._langMgr.Clear();
        }
        static isMobile() {
            let userAgentInfo = navigator.userAgent.toLowerCase();
            let Agents = new Array('android', 'iphone', 'symbianos', 'windows phone', 'ipad', 'ipod');
            let flag = false;
            for (let v = 0; v < Agents.length; v++) {
                if (userAgentInfo.indexOf(Agents[v]) !== -1) {
                    flag = true;
                    break;
                }
            }
            return flag;
        }
        static beginGame() {
            let _isMobile = this.isMobile();
            this.isPc = !_isMobile;
            if (this.isPc) {
                var w = ScreenAdapter.RefWidth = 900;
                var h = ScreenAdapter.DefaultHeight;
                this.initStage(w, h);
            }
            else {
                var w = ScreenAdapter.RefWidth = ScreenAdapter.UIRefWidth;
                var h = ScreenAdapter.DefaultHeight;
                if (window.innerHeight / window.innerWidth > h / w) {
                    h = window.innerHeight / window.innerWidth * w;
                }
                else {
                    if (window.innerWidth / window.innerHeight <= 1) {
                        w = h / window.innerHeight * window.innerWidth;
                    }
                    else {
                        w = Math.min(1000, h / window.innerHeight * window.innerWidth);
                    }
                }
                this.initStage(w, h);
            }
            LogSys$1.Log("isMobile :" + _isMobile + ",innerWidth innerHeight " + window.innerWidth, window.innerHeight, "wh", Laya.stage.width, Laya.stage.height, "devicePixelRatio:" + window.devicePixelRatio);
        }
        static initStage(w, h) {
            Config.isAlpha = true;
            Laya.init(w, h, Laya.WebGL);
            Laya.stage.frameRate = InitConfig.frameRate;
            ByteCfg.indexKEY = "f_id";
            ByteCfg.uint64 = uint64;
        }
        static layaInit() {
            E.taLoginTrack("layaInit");
            Config.useRetinalCanvas = true;
            this.beginGame();
            if (Laya.MiniAdpter) {
                if (initConfig.littlegame) ;
                else {
                    Laya.MiniAdpter.nativefiles = ["bg1.jpg"];
                    let img = new Laya.Image();
                    img.skin = "bg1.jpg";
                    this.wxBg = img;
                }
            }
            else {
                LogSys$1.Log("Laya.MiniAdpter is null!");
            }
            Laya.URL.basePath = InitConfig.getUI2();
            Laya.stage.bgColor = "#000000";
            Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_HEIGHT;
            Laya.stage.setScreenSize(Browser.clientWidth, Browser.clientHeight);
            Laya.stage.screenMode = Laya.Stage.SCREEN_NONE;
            Laya.stage.alignH = Laya.Stage.ALIGN_CENTER;
            Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE;
            if (AppCfg.PhysicEnable)
                Laya["Physics"] && Laya["Physics"].enable();
            Laya["DebugPanel"] && Laya["DebugPanel"].enable();
            if (GameConfig.physicsDebug && Laya["PhysicsDebugDraw"]) {
                Laya["PhysicsDebugDraw"].enable();
            }
            Laya.alertGlobalError(true);
            Laya.MouseManager.multiTouchEnabled = true;
            Laya.URL.exportSceneToJson = true;
            if (this.wxBg) {
                Laya.stage.addChild(this.wxBg);
            }
            this.loadMas = new LoadMainnfestParse(new Laya.Handler(this, () => {
                E.sdk.loadFont(this.loadMas.data, new Laya.Handler(this, () => {
                    this.onloadAtlasComplete();
                }));
            }));
        }
        static onloadAtlasComplete() {
            E.taLoginTrack("fontLoadComolete");
            this.AppRoot = new Common.AppRoot();
            this.AppRoot.onInit();
            this.onPreInitFramework();
            LayerMgr.Ins.Init();
            this.layaInitComplete();
        }
        static addVersionPrefix(url) {
            let key = Laya.ResourceVersion.manifest;
            let arr = url.split("?");
            if (arr.length > 1) {
                url = arr[0];
            }
            if (url && key[url]) {
                let u;
                if (arr.length > 1) {
                    u = key[url] + "?" + arr[1];
                }
                else {
                    u = key[url];
                }
                return 'g/' + u;
            }
            return url;
        }
        static layaInitComplete() {
            E.taLoginTrack("layaLoadComolete");
            E.yinDaoMgr.Init();
            G.Init();
        }
    }
    E.TestVersion = false;
    E._hasInited = false;
    E.randomKey = Date.now();
    E.logstr = "";
    E.isPc = true;
    class G {
        static preResLoad() {
            let _defaultRes = new ResItemGroup();
            _defaultRes.Add(Path.GetAtlas("loginnew1.atlas"), Laya.Loader.ATLAS);
            _defaultRes.Add(Path.GetAtlas("num.atlas"), Laya.Loader.ATLAS);
            _defaultRes.Add(Path.GetAtlas("drop.atlas"), Laya.Loader.ATLAS);
            _defaultRes.Add(Path.GetAtlas("main/main.atlas"), Laya.Loader.ATLAS);
            _defaultRes.Add(Path.GetAtlas("common/base.atlas"), Laya.Loader.ATLAS);
            _defaultRes.addSkel("o/avatar/horse/horse");
            _defaultRes.addSkel("o/avatar/horse2/horse2");
            _defaultRes.addSkel("o/avatar/hero1/hero1");
            _defaultRes.addSkel("o/spine/hand/hand");
            _defaultRes.Add(ResPath.Avatar.equipAtlas, Laya.Loader.TEXT);
            _defaultRes.Add(ResPath.Avatar.equipSkel, Laya.Loader.BUFFER);
            E.ViewMgr.Loading(_defaultRes, new Laya.Handler(this, this.onPreComplete));
        }
        static onPreComplete() {
            if (HrefUtils.getVal("skipgame") != 1 && window["subSheGame"]) {
                window["subSheGame"].startGame(this.onInitGame);
            }
            else {
                this.onInitGame();
            }
        }
        static onInitGame() {
            G.gameStart();
            E.ViewMgr.Close(EViewType.Loading);
        }
        static loadAtlasComplete() {
            E.taLoginTrack("excelLoadComolete");
            this.gameData = new GameCfgData();
            this.preResLoad();
        }
        static Init() {
            E.taLoginTrack("excelLoading");
            StaticDataMgr.Ins.once(Laya.Event.COMPLETE, this, this.loadAtlasComplete);
            StaticDataMgr.Ins.Init();
        }
        static gameStart() {
            LogSys$1.Log("gameStart...");
            E.ViewMgr.Open(EViewType.LoginNew);
        }
        static sendGM(str) {
            let req = new Gm_req();
            req.datas = str;
            SocketMgr.Ins.SendMessageBin(req);
        }
        static OnUpdate() {
        }
        static OnLateUpdate() {
        }
        static OnFixedUpdate() {
        }
    }

    exports.E = E;
    exports.G = G;
    exports.ScreenAdapter = ScreenAdapter;

    return exports;

}(window));
(function () {
    'use strict';

    class Main {
        constructor() {
            E.Init();
        }
    }
    new Main();

}());
