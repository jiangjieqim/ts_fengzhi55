(function (exports) {
    'use strict';

    class CsTimeVo {
        constructor(_time) {
            let hour = Math.floor(_time / 3600);
            let minute = Math.floor(_time / 60) % 60;
            let sec = _time % 60;
            this.hour = hour;
            this.minute = minute;
            this.sec = sec;
        }
    }
    class TimeUtil {
        static Init() {
            this._startTime = Laya.timer.currTimer;
        }
        static get DeltaTimeS() { return Laya.timer.delta * 0.001; }
        static get DeltaTimeMS() { return Laya.timer.delta; }
        static get FixedDeltaTimeMS() { return 20; }
        static get FixedDeltaTimeS() { return TimeUtil.FixedDeltaTimeMS * 0.001; }
        static get Time() { return Laya.timer.currTimer; }
        static get TimeSinceStartupS() { return (Laya.timer.currTimer - this._startTime) / 1000.0; }
        static get TimeSinceStartupMS() { return (Laya.timer.currTimer - this._startTime); }
        static get FrameCount() { return Laya.timer.currFrame; }
        static get TimeScale() { return Laya.timer.scale; }
        static set TimeScale(scale) { Laya.timer.scale = scale; }
        static timeFormatStr(_time, _isHour = false) {
            let hour = Math.floor(_time / 3600);
            let minute = Math.floor(_time / 60) % 60;
            let sec = _time % 60;
            if (_isHour) {
                let v = "0";
                {
                    v = "";
                }
                return (hour < 10 ? (v + hour) : hour) + ':' + (minute < 10 ? ('0' + minute) : minute) + ':' + (sec < 10 ? ('0' + sec) : sec);
            }
            else {
                return (minute < 10 ? ('0' + minute) : minute) + ':' + (sec < 10 ? ('0' + sec) : sec);
            }
        }
        static getHMS(_sec) {
            return new CsTimeVo(_sec);
        }
        static set serverTimeV(v) {
            let sub = v.toNumber() - Laya.timer.currTimer;
            this._subTime = sub;
        }
        static get serverTime() {
            return Math.floor(this.serverTimeMS / 1000);
        }
        static isNotToday(time) {
            let zero = this.curZeroTime;
            if (time < zero) {
                return true;
            }
            else {
                return false;
            }
        }
        static get serverTimeMS() {
            let t = Laya.timer;
            let v = 0;
            if (t) {
                v = Laya.timer.currTimer;
            }
            return this._subTime + v;
        }
        static get serverTimeOutStr() {
            let a = this.serverTimeMS;
            return isNaN(a) ? ("#client time# " + this.timestamtoTime(Date.now(), "-", " ", ":", ":", true)) : this.timestamtoTime(a, "-", " ", ":", ":", true);
        }
        static toSecond(str, sign = ":") {
            let _arr = str.split(sign);
            return parseInt(_arr[0]) * 3600 + parseInt(_arr[1]) * 60 + parseInt(_arr[2]);
        }
        static getTimeStamp(str) {
            let t = new Date(str.replace(' ', "T") + '+08:00').getTime();
            return t;
        }
        static timestamtoTime(v, k = "-", dk = " ", tk = ":", prefix = "0", ms = false) {
            let date = new Date(v);
            let Y = date.getFullYear() + k;
            let M = (date.getMonth() + 1 < 10 ? prefix + (date.getMonth() + 1) : date.getMonth() + 1) + k;
            let D = date.getDate() + dk;
            let h = date.getHours() + tk;
            let m = date.getMinutes() + tk;
            let s = date.getSeconds();
            return Y + M + D + h + m + s + (ms ? "." + date.getMilliseconds() : "");
        }
        static timestamtoTime1(v, k = "-", dk = " ", tk = ":", hasYear = true) {
            let date = new Date(v * 1000);
            let Y = date.getFullYear() + k;
            let M = (date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1) + k;
            let D = date.getDate() < 10 ? "0" + date.getDate() + dk : date.getDate() + dk;
            let h = date.getHours() < 10 ? "0" + date.getHours() + tk : date.getHours() + tk;
            let m = date.getMinutes() < 10 ? "0" + date.getMinutes() + tk : date.getMinutes() + tk;
            let s = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();
            return (hasYear ? Y : "") + M + D + h + m + s;
        }
        static timestamtoTime2(v) {
            let date = new Date(v * 1000);
            let M = (date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1) + "月";
            let D = date.getDate() < 10 ? "0" + date.getDate() + "日   " : date.getDate() + "日   ";
            let h = date.getHours() < 10 ? "0" + date.getHours() + ":" : date.getHours() + ":";
            let m = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
            return M + D + h + m;
        }
        static timesMonthDay(v) {
            let date = new Date(v * 1000);
            let M = (date.getMonth() + 1) + "月";
            let D = date.getDate() + "日";
            let h = date.getHours() + ":";
            let m = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
            return M + D + " " + h + m;
        }
        static getMonthDay(sec) {
            let date = new Date(sec * 1000);
            let k = "/";
            let M = (date.getMonth() + 1) + k;
            let D = date.getDate();
            return M + D;
        }
        static timeToStr(v, k = "-", dk = " ", tk = ":") {
            return this.timestamtoTime(v * 1000);
        }
        static GetCurDayZero(time) {
            let date = new Date(time);
            let t = new Date(date.toLocaleDateString()).getTime();
            return t;
        }
        static getZeroSecond(time) {
            return this.GetCurDayZero(time * 1000) / 1000;
        }
        static get curZeroTime() {
            return this.getZeroSecond(this.serverTime);
        }
        static getDay() {
            let t = this.serverTime;
            let date = new Date(t * 1000);
            let day = date.getDay();
            return day;
        }
        static getDayString(day) {
            let weeks = ["日", "一", "二", "三", "四", "五", "六"];
            return weeks[day];
        }
        static getHourMin(t) {
            let day = Math.floor(t / 86400);
            let time = t % 86400;
            let a = this.timeFormatStr(time, true).split(":");
            return { day: day, hour: parseInt(a[0]), minutes: parseInt(a[1]), sec: parseInt(a[2]) };
        }
        static subTime(t) {
            if (t < 0) {
                return "";
            }
            if (t < 3600) {
                return this.timeFormatStr(t);
            }
            else if (t >= 3600 && t < 86400) {
                return this.timeFormatStr(t, true);
            }
            else if (t >= 86400) {
                let o = this.getHourMin(t);
                if (o.minutes > 0) {
                    return `${o.day}天${o.hour}小时${o.minutes}分钟`;
                }
                else if (o.hour > 0) {
                    return `${o.day}天${o.hour}小时`;
                }
                return `${o.day}天`;
            }
        }
        static subTimeHMS(t) {
            if (t < 0) {
                return "";
            }
            let o = this.getHourMin(t);
            let h = o.hour + o.day * 24;
            if (h > 0) {
                return `${h}时${o.minutes}分${o.sec}秒`;
            }
            if (o.minutes > 0) {
                return `${o.minutes}分${o.sec}秒`;
            }
            return `${o.sec}秒`;
        }
        static getTimeShow(time) {
            let oneYear = 3600 * 24 * 365;
            let oneMonth = oneYear / 12;
            if (time < 60 || time >= 60 && time <= 3600) {
                return Math.ceil(time / 60) + "分钟";
            }
            else if (time >= 3600 && time < 3600 * 24) {
                return Math.ceil(time / 3600) + "小时";
            }
            else if (time >= 3600 * 24 && time < oneMonth) {
                return Math.ceil(time / (3600 * 24)) + "天";
            }
            else if (time >= oneMonth && time < oneYear) {
                return Math.ceil(time / oneMonth) + "月";
            }
            return Math.ceil(time / (oneYear)) + "年";
        }
        static ShowTime(t, serverTime) {
            let zero = this.GetCurDayZero(t);
            let curZero = this.GetCurDayZero(serverTime);
            if (zero == curZero) {
                let date = new Date(t);
                let h = date.getHours();
                let m = date.getMinutes();
                return `${h}:${m}`;
            }
            else {
                let sub = curZero - zero;
                let oneDay = 86400 * 1000;
                if (sub <= oneDay) {
                    let date = new Date(t);
                    let h = date.getHours();
                    let m = date.getMinutes();
                    return `昨天 ${h}:${m}`;
                }
                else if (sub > oneDay && sub <= oneDay * 7) {
                    let weeks = ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"];
                    let date = new Date(t);
                    let day = date.getDay();
                    let h = date.getHours();
                    let m = date.getMinutes();
                    let week = weeks[day];
                    return `${week} ${h}:${m}`;
                }
                else if (sub > oneDay * 7 && sub < oneDay * 365) {
                    let date = new Date(t);
                    let M = (date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1);
                    let D = date.getDate();
                    let h = date.getHours();
                    let m = date.getMinutes();
                    return `${M}月${D}日 ${h}:${m}`;
                }
                else {
                    let date = new Date(t);
                    let Y = date.getFullYear();
                    let M = (date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1);
                    let D = date.getDate();
                    let h = date.getHours();
                    let m = date.getMinutes();
                    return `${Y}年${M}月${D}日 ${h}:${m}`;
                }
            }
        }
        static getUnixByWeek(dayOfWeek, time) {
            let t = this.serverTime;
            var currentDate = new Date(t * 1000);
            var currentDay = currentDate.getDay() ? currentDate.getDay() : 7;
            let day;
            const now = currentDate.getTime();
            day = new Date(now + (dayOfWeek - currentDay) * 86400000);
            const [HH, mm, ss] = time.split(':').map(Number);
            day.setHours(HH || 0, mm || 0, ss || 0, 0);
            var timestamp = Math.round(day.getTime() / 1000);
            return timestamp;
        }
    }
    TimeUtil._startTime = 0;

    exports.CsTimeVo = CsTimeVo;
    exports.TimeUtil = TimeUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ELogLevel) {
        ELogLevel[ELogLevel["LOG"] = 1] = "LOG";
        ELogLevel[ELogLevel["WARN"] = 2] = "WARN";
        ELogLevel[ELogLevel["ERROR"] = 3] = "ERROR";
    })(exports.ELogLevel || (exports.ELogLevel = {}));
    class LogSys {
        static get isWx() {
            if (this._isWx == undefined) {
                let wx = window['wx'];
                if (wx) {
                    let o = wx.getSystemInfoSync();
                    if (o) {
                        if (o.platform == "devtools") ;
                        else {
                            this._isWx = true;
                        }
                    }
                }
                else {
                    this._isWx = false;
                }
            }
            return this._isWx;
        }
        static get time() {
            return TimeUtil.serverTimeOutStr;
        }
        static Log(...args) {
            if (this.CanLog(exports.ELogLevel.LOG)) {
                console.log(this.time + "[Log]", args.toString());
            }
        }
        static Info(...args) {
            if (this.CanLog(exports.ELogLevel.LOG)) {
                console.info(this.time + "[Info]", args.toString());
            }
        }
        static Warn(...args) {
            if (this.CanLog(exports.ELogLevel.WARN)) {
                console.warn(this.time + "[Warn]", args.toString());
            }
        }
        static Error(...args) {
            if (this.CanLog(exports.ELogLevel.ERROR)) {
                console.error(this.time + "[Error]", args.toString());
            }
        }
        static Json(json) {
            if (this.CanLog(exports.ELogLevel.LOG))
                console.log("[Json]", JSON.stringify(json));
        }
        static CanLog(level) {
            if (initConfig.no_log)
                return;
            if (this.isWx && !debug) {
                return;
            }
            if (debug) {
                return true;
            }
            return LogSys.IsEnable && this.isValidLevel(level);
        }
        static isValidLevel(level) { if (LogSys.Level <= level)
            return true; return false; }
    }
    LogSys.IsEnable = false;
    LogSys.Level = exports.ELogLevel.LOG;

    exports.LogSys = LogSys;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class StringUtil {
        static SplitToString(value, sprelator = "#") {
            if (value == "0")
                return [];
            let result = [];
            let sArray = value.split(sprelator);
            for (let i = 0; i < sArray.length; i++)
                result.push(sArray[i]);
            return result;
        }
        static SplitToNumber(value, sprelator = "#") {
            if (value == "0")
                return [];
            let result = [];
            let sArray = value.split(sprelator);
            for (let i = 0; i < sArray.length; i++)
                result.push(parseInt(sArray[i]));
            return result;
        }
        static ParseInt(str) {
            let intNum = parseFloat(str);
            if (intNum)
                return Math.floor(intNum);
            return 0;
        }
        static ParseNum(str) {
            let num = parseFloat(str);
            if (num)
                return num;
            return 0;
        }
        static get Empty() { return ""; }
        static toInt(str, radix = 10) {
            if (!str || str.length == 0)
                return 0;
            return parseInt(str, radix);
        }
        static toFloat(str) {
            if (!str || str.length == 0)
                return 0;
            return parseFloat(str);
        }
        static getNumBytes(str) {
            let realLength = 0, len = str.length, charCode = -1;
            for (var i = 0; i < len; i++) {
                charCode = str.charCodeAt(i);
                if (charCode >= 0 && charCode <= 128)
                    realLength += 1;
                else
                    realLength += 2;
            }
            return realLength;
        }
        static convertName(str, limit = 12) {
            let result = "";
            let realLength = 0, len = str.length, charCode = -1;
            let need = false;
            for (var i = 0; i < len; i++) {
                charCode = str.charCodeAt(i);
                if (charCode >= 0 && charCode <= 128) {
                    realLength += 1;
                }
                else {
                    realLength += 2;
                }
                if (realLength <= limit) {
                    result += str[i];
                }
                else {
                    need = true;
                }
            }
            if (need) {
                result += "...";
            }
            return result;
        }
        static addZero(str, len, dir = 0) {
            let _str = "";
            let _len = str.length;
            let str_pre_zero = "";
            let str_end_zero = "";
            if (dir == 0)
                str_end_zero = "0";
            else
                str_pre_zero = "0";
            if (_len < len) {
                let i = 0;
                while (i < len - _len) {
                    _str = str_pre_zero + _str + str_end_zero;
                    ++i;
                }
                return _str + str;
            }
            return str;
        }
        static trim(input) {
            if (input == null) {
                return "";
            }
            return input.replace(/^\s+|\s+$""^\s+|\s+$/g, "");
        }
        static trimLeft(input) {
            if (input == null) {
                return "";
            }
            return input.replace(/^\s+""^\s+/, "");
        }
        static trimRight(input) {
            if (input == null) {
                return "";
            }
            return input.replace(/\s+$""\s+$/, "");
        }
        static minuteFormat(seconds) {
            let min = Math.floor(seconds / 60);
            let sec = Math.floor(seconds % 60);
            let min_str = min < 10 ? ("0" + min.toString()) : (min.toString());
            let sec_str = sec < 10 ? ("0" + sec.toString()) : (sec.toString());
            return min_str + ":" + sec_str;
        }
        static hourFormat(seconds) {
            let hour = Math.floor(seconds / 3600);
            let hour_str = hour < 10 ? ("0" + hour.toString()) : (hour.toString());
            return hour_str + ":" + StringUtil.minuteFormat(seconds % 3600);
        }
        static format(str, ...args) {
            if (args.length > 0 && typeof (args[0]) == "object") {
                args = args[0];
            }
            for (let i = 0; i < args.length; i++) {
                str = str.replace(new RegExp("\\{" + i + "\\}"), args[i]);
            }
            return str;
        }
        static beginsWith(input, prefix) {
            return prefix == input.substring(0, prefix.length);
        }
        static endsWith(input, suffix) {
            return suffix == input.substring(input.length - suffix.length);
        }
        static getGUIDString() {
            let d = Date.now();
            if (window.performance && typeof window.performance.now === "function") {
                d += performance.now();
            }
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
                let r = (d + Math.random() * 16) % 16 | 0;
                d = Math.floor(d / 16);
                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });
        }
        static firstUpperCase(word) {
            return word.charAt(0).toUpperCase() + word.slice(1);
        }
        static formatDashWord(word, capFirst = false) {
            let first = true;
            let result = "";
            word.split('_').forEach((sec) => {
                if (first) {
                    if (capFirst) {
                        result = StringUtil.firstUpperCase(sec);
                    }
                    else {
                        result = sec;
                    }
                    first = false;
                }
                else {
                    result = result + StringUtil.firstUpperCase(sec);
                }
            });
            return result;
        }
        static substring(str, start, end) {
            return str.substring(start, end);
        }
        static strToObject(str) {
            const strToObj = JSON.parse(str);
            return strToObj;
        }
        static objToStr(obj) {
            const objToStr = JSON.stringify(obj);
            return objToStr;
        }
        static IsNullOrEmpty(str) {
            if (str == undefined)
                return true;
            if (str == null)
                return true;
            if (str.length == 0)
                return true;
            if (str == "null")
                return true;
            if (str == "")
                return true;
            return false;
        }
        static Contains(str, item) {
            return str.indexOf(item) != -1;
        }
        static CheckResourcesVersion(path) {
            let result = Laya.ResourceVersion.manifest[path];
            if (result == null) {
                return path;
            }
            return result;
        }
        static NumToWord(num) {
            if (num < this.numWords.length && num > 0)
                return this.numWords[num];
            return this.Empty;
        }
        static toChinesNum(num) {
            let changeNum = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];
            let unit = ['', '十', '百', '千', '万'];
            num = parseInt(num);
            let getWan = (temp) => {
                let strArr = temp.toString().split('').reverse();
                let newNum = '';
                let newArr = [];
                strArr.forEach((item, index) => {
                    let a = changeNum[item] + unit[index];
                    newArr.unshift(item === '0' ? changeNum[item] : a);
                });
                let numArr = [];
                newArr.forEach((m, n) => {
                    if (m !== '零')
                        numArr.push(n);
                });
                if (newArr.length > 1) {
                    newArr.forEach((m, n) => {
                        if (newArr[newArr.length - 1] === '零') {
                            if (n <= numArr[numArr.length - 1]) {
                                newNum += m;
                            }
                        }
                        else {
                            newNum += m;
                        }
                    });
                }
                else {
                    newNum = newArr[0];
                }
                return newNum;
            };
            let overWan = Math.floor(num / 10000);
            let noWan = (num % 10000).toString();
            if (noWan.toString().length < 4) {
                noWan = '0' + noWan;
            }
            let s1 = overWan ? getWan(overWan) + '万' + getWan(noWan) : getWan(num);
            if (num >= 10 && num < 20) {
                s1 = s1.substr(1, 2);
            }
            return s1;
        }
        static replaceComments(data) {
            return data = data.replace(/\\"|"(?:\\"|[^"])*"|(\/\/.*|\/\*[\s\S]*?\*\/)/g, (m, g) => g ? "" : m);
        }
        static CutByteLen(str, len, suffix = "...") {
            let str_length = 0;
            let str_len = 0;
            let str_cut = new String();
            str_len = str.length;
            for (let i = 0; i < str_len; i++) {
                let a = str.charAt(i);
                str_length++;
                if (escape(a).length > 4) {
                    str_length++;
                }
                str_cut = str_cut.concat(a);
                if (str_length >= len) {
                    str_cut = str_cut.concat(suffix);
                    return str_cut;
                }
            }
            if (str_length < len) {
                return str;
            }
        }
        static val2m(val, atlas = false) {
            let _1y = 100000000;
            let checkVal = 1000000;
            if (val >= checkVal && val < _1y) {
                val = val / checkVal;
                return Math.floor(val * (checkVal / 10000)) + (atlas ? "w" : "万");
            }
            else if (val >= _1y) {
                val = val / _1y;
                return Math.floor(val) + (atlas ? "y" : "亿");
            }
            return Math.ceil(val).toString();
        }
        static val3m(val, atlas = false) {
            let _1y = 100000000;
            let checkVal = 100000;
            if (val >= checkVal && val < _1y) {
                val = val / checkVal;
                return Math.floor(val * (checkVal / 10000)) + (atlas ? "w" : "万");
            }
            else if (val >= _1y) {
                val = val / _1y;
                return Math.floor(val) + (atlas ? "y" : "亿");
            }
            return val.toString();
        }
        static val2Atlas(val) {
            return this.val2m(val, true);
        }
        static moneyCv(v) {
            return v / 100;
        }
        static toPercent(val) {
            if (typeof val == "string") {
                val = parseInt(val);
            }
            return (val / 100).toFixed(2) + "%";
        }
        static getCnMoney(index) {
            return E.getLang("MoneyVal")[index];
        }
    }
    StringUtil.numWords = ["零", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十"];

    exports.StringUtil = StringUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DebugUtil$1 {
        static draw(p, color = "#00ff00", w, h, x = 0, y = 0, full = false) {
            if (debug && p) {
                let keyName = "debugspr";
                if (p.getChildByName(keyName)) {
                    p.getChildByName(keyName).removeSelf();
                }
                let spr = new Laya.Sprite();
                spr.name = keyName;
                spr.mouseThrough = true;
                spr.width = p.width;
                spr.height = p.height;
                spr.graphics.clear();
                let offset = 2;
                spr.graphics.drawRect(x + offset, y + offset, (w || p.width) - offset * 2, (h || p.height) - offset * 2, !full ? null : color, color, 1);
                spr.alpha = full ? 0.5 : 1;
                p.addChild(spr);
            }
        }
        static drawCross(p, x = 0, y = 0, _size = 10, _color = "#0000ff") {
            if (debug) {
                let con = new Laya.Sprite();
                let size = _size;
                con.graphics.clear();
                con.graphics.drawLine(x - size, y, x + size, y, _color);
                con.graphics.drawLine(x, y - size, x, y + size, _color);
                p.addChild(con);
            }
        }
        static drawTF(view, content, color = "#ff0000") {
            if (debug) {
                let key = "debugTf";
                view.getChildByName(key);
                if (view.getChildByName(key)) {
                    view.getChildByName(key).removeSelf();
                }
                if (StringUtil.IsNullOrEmpty(content)) {
                    return;
                }
                let lb = new Laya.Label();
                lb.stroke = 2;
                lb.strokeColor = "#000000";
                lb.color = color;
                view.addChild(lb);
                lb.name = key;
                lb.fontSize = 18;
                lb.text = content;
            }
        }
    }

    exports.DebugUtil = DebugUtil$1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GameConfig {
        constructor() { }
        static init() {
            var reg = Laya.ClassUtils.regClass;
        }
    }
    GameConfig.width = 1280;
    GameConfig.height = 720;
    GameConfig.scaleMode = "fixedheight";
    GameConfig.screenMode = "horizontal";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = null;
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    GameConfig.spineCache = true;
    GameConfig.init();

    exports.GameConfig = GameConfig;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PlatformConfig {
    }
    PlatformConfig.Dev = 0;
    PlatformConfig.WeiXin = 1;
    PlatformConfig.CB1 = 2;
    PlatformConfig.DOU_YIN = 3;
    PlatformConfig.BaU = 4;
    PlatformConfig.War3 = 5;
    class InitConfig {
        static getAsset() {
            if (!this.asset && this.isExist()) {
                this.asset = initConfig.asset;
            }
            if (Laya.Utils.getQueryString("localgame")) {
                this.asset = `http://127.0.0.1:8001/Project1/Client/trunk/resource/`;
            }
            if (Laya.Utils.getQueryString("asset")) {
                return Laya.Utils.getQueryString("asset");
            }
            return this.asset || "";
        }
        static getSyURL() {
            let url = HrefUtils.getHref("sy_url");
            if (url) {
                return url;
            }
            return initConfig.sy_url;
        }
        static getOther() {
            return this.getAsset() + "o/";
        }
        static get tcp() {
            if (initConfig) {
                return initConfig.tcp;
            }
        }
        static get frameRate() {
            if (initConfig) {
                return initConfig.frameRate || "fast";
            }
        }
        static getServerIp() {
            let url = HrefUtils.getHref("url");
            if (url) {
                return "ws://" + url;
            }
            if (this.wxLoginResult) {
                return this.wxLoginResult.result.tcp;
            }
            if (!this.server_ip && this.isExist()) {
                this.server_ip = initConfig.server_ip;
            }
            return this.server_ip;
        }
        static isExist() {
            if (initConfig) {
                return true;
            }
        }
        static getUI() {
            return "";
        }
        static getUI2() {
            if (!this.ui && this.isExist()) {
                if (this.getAsset().length > 0) {
                    this.ui = this.getAsset();
                }
            }
            return this.ui || "";
        }
    }
    class HrefUtils {
        static getHref(string) {
            if (!E.wx && window.location && window.location.search) {
                let reg = new RegExp("(^|&)" + string + "=([^&]*)(&|$)");
                let r = window.location.search.substr(1).match(reg);
                if (r) {
                    return decodeURI(r[2]);
                }
            }
        }
        static getVal(string) {
            if (!E.wx && window.location && window.location.search) {
                let reg = new RegExp("(^|&)" + string + "=([^&]*)(&|$)");
                let r = window.location.search.substr(1).match(reg);
                if (r) {
                    return parseFloat(decodeURI(r[2]));
                }
            }
        }
    }
    class AnimConfig {
    }
    AnimConfig.openQuick = false;
    AnimConfig.AnimScale = 1;
    AnimConfig.ShootTime = 466;

    exports.AnimConfig = AnimConfig;
    exports.HrefUtils = HrefUtils;
    exports.InitConfig = InitConfig;
    exports.PlatformConfig = PlatformConfig;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RandomUtil {
        static RandomNext() {
            return Math.random();
        }
        static RandomRound(min, max) {
            let _min = min;
            let _max = max;
            if (_min > _max) {
                _min = max;
                _max = min;
            }
            let range = _max - _min;
            let rand = Math.random();
            return min + (rand * range);
        }
        static RandomRoundInt(min, max) {
            let _min = min;
            let _max = max;
            if (_min > _max) {
                _min = max;
                _max = min;
            }
            var range = _max - _min;
            var rand = Math.random();
            let result = Math.round(min + (rand * range));
            result = result >= max ? result - 1 : result;
            return result;
        }
        static RandomBoolean() {
            let ran = this.RandomNext();
            return ran >= 0.5;
        }
        static RandomByWeights(weights) {
            let sum = 0;
            for (let w of weights) {
                sum += w;
            }
            let rand = RandomUtil.RandomRound(0, sum);
            sum = 0;
            for (let i = 0; i < weights.length; i++) {
                sum += weights[i];
                if (rand <= sum)
                    return i;
            }
        }
        static OnWhetherItMeetsTheRequirementsByProportion(proportion, start, end, bCantains = false) {
            if (bCantains) {
                if (this.RandomRoundInt(start, end) <= proportion)
                    return true;
            }
            else {
                if (this.RandomRoundInt(start, end) < proportion)
                    return true;
            }
            return false;
        }
        static RandomCountList(lst) {
            let rand = this.RandomRoundInt(0, lst.length);
            if (rand < lst.length / 2) {
                rand = 0;
            }
            let randLst = this.RandomArray(lst);
            return randLst.splice(0, rand);
        }
        static RandomArray(lst) {
            let result = lst.sort(() => {
                return 0.5 - Math.random();
            });
            return result;
        }
        static RandSeed(seed) {
            seed = (seed * 9301 + 49297) % 233280;
            return [seed, ((seed / (233280.0)) * 100 | 0)];
        }
    }

    exports.RandomUtil = RandomUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ListUtil {
        static Contains(lst, item) {
            return lst.indexOf(item) >= 0 ? true : false;
        }
        static ContainsArray(lst1, items) {
            if (items.length == 0)
                return false;
            for (let i = 0; i < items.length; i++) {
                if (!this.Contains(lst1, items[i]))
                    return false;
            }
            return true;
        }
        static Add(self, item) {
            self.push(item);
        }
        static SafeAdd(self, item) {
            if (!this.Contains(self, item))
                self.push(item);
        }
        static SafeAddRange(self, items) {
            for (let i = 0; i < items.length; i++) {
                if (this.Contains(self, items[i]))
                    continue;
                self.push(items[i]);
            }
        }
        static AddRange(self, items) {
            for (let i = 0; i < items.length; i++) {
                self.push(items[i]);
            }
        }
        static Remove(self, item) {
            let index1 = self.indexOf(item);
            while (index1 != -1) {
                self.splice(index1, 1);
                index1 = self.indexOf(item);
            }
        }
        static RemoveAt(self, index) {
            if (index < 0)
                index = 0;
            if (index < self.length) {
                return self.splice(index, 1)[0];
            }
            return null;
        }
        static RemoveContainsRange(self, other) {
            for (let i = 0; i < other.length; i++) {
                if (this.Contains(self, other[i]))
                    this.RemoveAllCotains(self, other[i]);
            }
            return self;
        }
        static RemoveUnContainsRange(self, other) {
            let templst = this.Copy(self);
            for (let i = 0; i < templst.length; i++) {
                if (this.Contains(other, templst[i]))
                    continue;
                this.RemoveAllCotains(self, templst[i]);
            }
            return self;
        }
        static RemoveAllCotains(self, item) {
            while (this.Contains(self, item)) {
                this.Remove(self, item);
            }
            return self;
        }
        static Copy(lst) {
            let newlst = [];
            if (!this.IsNullOrEmpty(lst)) {
                for (let i = 0; i < lst.length; i++) {
                    ListUtil.Add(newlst, lst[i]);
                }
            }
            return newlst;
        }
        static Random(lst) {
            let newlst = [];
            while (lst.length != 0) {
                let index = RandomUtil.RandomRoundInt(0, lst.length);
                let item = lst[index];
                ListUtil.Add(newlst, item);
                ListUtil.Remove(lst, item);
            }
            return newlst;
        }
        static GetRandomOne(lst) {
            let i = RandomUtil.RandomRoundInt(0, lst.length);
            return lst[i];
        }
        static RandomNumFromRange(lst, num) {
            let templst = [];
            if (lst.length <= num) {
                templst = lst;
            }
            else {
                let count = 0;
                while (count < num) {
                    let tempindex = RandomUtil.RandomRoundInt(0, lst.length);
                    if (!ListUtil.Contains(templst, lst[tempindex])) {
                        count++;
                        ListUtil.Add(templst, lst[tempindex]);
                    }
                }
            }
            return templst;
        }
        static RandomNumIndexFromRange(lst, num) {
            let result = [];
            let templst = [];
            if (lst.length <= num) {
                templst = lst;
            }
            else {
                let count = 0;
                while (count < num) {
                    let tempindex = RandomUtil.RandomRoundInt(0, lst.length);
                    if (!ListUtil.Contains(templst, lst[tempindex])) {
                        count++;
                        ListUtil.Add(templst, lst[tempindex]);
                        ListUtil.Add(result, tempindex);
                    }
                }
            }
            return result;
        }
        static GetRange(lst, start, end) {
            let templst = [];
            templst = lst.slice(start, end);
            return templst;
        }
        static GetIndexList(lst) {
            let lstIndexs = [];
            for (let i = 0; i < lst.length; i++) {
                this.Add(lstIndexs, i);
            }
            return lstIndexs;
        }
        static GetIndex(lst, item) {
            for (let i = 0; i < lst.length; i++) {
                const element = lst[i];
                if (element == item) {
                    return i;
                }
            }
            return -1;
        }
        static GetContainsIndexList(self, other) {
            let lstIndexs = [];
            for (let i = 0; i < other.length; i++) {
                const item = other[i];
                let index = this.GetIndex(self, item);
                if (index > 0 && index < self.length) {
                    this.Add(lstIndexs, index);
                }
            }
            return lstIndexs;
        }
        static Insert(lst, item, index) {
            if (index >= lst.length) {
                lst.push(item);
                return lst;
            }
            let result = [];
            for (let i = 0; i < lst.length; i++) {
                if (i < index) {
                    result.push(lst[i]);
                }
                else if (i == index) {
                    result.push(item);
                    result.push(lst[i]);
                }
                else {
                    result.push(lst[i]);
                }
            }
            return result;
        }
        static IsNullOrEmpty(lst) {
            return lst == null || lst.length == 0;
        }
    }

    exports.ListUtil = ListUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MathUtil {
        static Range(min, max) {
            return Math.random() * (max - min) + min;
        }
        static RangeInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1) + min);
        }
        static UnitConversion(value) {
            if (value < 1000000)
                return Math.floor(value).toString();
            if (value === 0)
                return "0";
            let k = 1000, sizes = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'], i = Math.floor(Math.log(value) / Math.log(k));
            let unit = '';
            if (i < sizes.length)
                unit = sizes[i];
            else {
                let numLen = i - sizes.length;
                unit = String.fromCharCode(97 + numLen % 26);
                for (let idx = 0, len = 1 + Math.floor(numLen / 65); idx < len; idx++)
                    unit = unit + unit;
            }
            return (value / Math.pow(k, i)).toPrecision(3) + ' ' + unit;
        }
        static Sign(f) {
            return ((f < 0) ? -1 : 1);
        }
        static Clamp(value, min, max) {
            let mMin = min < max ? min : max;
            let mMax = max > min ? max : min;
            if (value <= mMin)
                return mMin;
            else if (value >= mMax)
                return mMax;
            else
                return value;
        }
        static Clamp01(value) {
            if (value < 0)
                return 0;
            if (value > 1)
                return 1;
            return value;
        }
        static Lerp(from, to, t) {
            return (from + ((to - from) * MathUtil.Clamp01(t)));
        }
        static LerpAngle(a, b, t) {
            let num = MathUtil.Repeat(b - a, 360);
            if (num > 180)
                num -= 360;
            return (a + (num * MathUtil.Clamp01(t)));
        }
        static Repeat(t, length) {
            return (t - (Math.floor(t / length) * length));
        }
        static RandRange(value1, value2) {
            let result = Math.random() * (value2 - value1) + value1;
            return result;
        }
        static RandRangeInt(value1, value2) {
            let result = Math.random() * (value2 - value1 + 1) + value1;
            return Math.floor(result);
        }
        static RandRangeArray(arr) {
            if (arr.length == 0)
                return null;
            let loc = arr[MathUtil.RandRangeInt(0, arr.length - 1)];
            return loc;
        }
        static clampDegrees(degrees) {
            while (degrees < 0)
                degrees = degrees + 360;
            while (degrees >= 360)
                degrees = degrees - 360;
            return degrees;
        }
        static clampRadians(radians) {
            while (radians < 0)
                radians = radians + 2 * Math.PI;
            while (radians >= 2 * Math.PI)
                radians = radians - 2 * Math.PI;
            return radians;
        }
        static getDistance(x1, y1, x2, y2) {
            return Math.sqrt(Math.pow(y2 - y1, 2) + Math.pow(x2 - x1, 2));
        }
        static getSquareDistance(x1, y1, x2, y2) {
            return Math.pow(y2 - y1, 2) + Math.pow(x2 - x1, 2);
        }
        static getLineRadians(x1, y1, x2, y2) {
            return Math.atan2(y2 - y1, x2 - x1);
        }
        static getLineDegree(x1, y1, x2, y2) {
            let degree = MathUtil.toDegree(MathUtil.getLineRadians(x1, y1, x2, y2));
            return MathUtil.clampDegrees(degree);
        }
        static getPointRadians(x, y) {
            return Math.atan2(y, x);
        }
        static getPointDegree(x, y) {
            let degree = MathUtil.toDegree(MathUtil.getPointRadians(x, y));
            return MathUtil.clampDegrees(degree);
        }
        static toDegree(radian) {
            return radian * (180.0 / Math.PI);
        }
        static toRadian(degree) {
            return degree * (Math.PI / 180.0);
        }
        static moveTowards(current, target, maxDelta) {
            if (Math.abs(target - current) <= maxDelta) {
                return target;
            }
            return (current + (MathUtil.Sign(target - current) * maxDelta));
        }
        static random(min, max) {
            return Math.floor(Math.random() * (max - min) + min);
        }
        static normalize(x, y) {
            return Math.sqrt(x * x + y * y);
        }
        static vectorAngle(x1, y1, x2, y2) {
            if (x1 == x2 && y1 == y2) {
                return;
            }
            var cosAngle = (x1 * x2 + y1 * y2) / (MathUtil.normalize(x1, y1) * MathUtil.normalize(x2, y2));
            var aCosAngle = Math.acos(cosAngle);
            var angle = MathUtil.Rad2Deg(aCosAngle);
            if (x1 / y1 < x2 / y2)
                angle = -angle;
            return angle;
        }
        static Deg2Rad(angle) {
            return Laya.Utils.toRadian(angle);
        }
        static Rad2Deg(radian) {
            return Laya.Utils.toAngle(radian);
        }
        static sin(angle) {
            var radian = MathUtil.Deg2Rad(angle);
            return Math.sin(radian);
        }
        static cos(angle) {
            var radian = MathUtil.Deg2Rad(angle);
            return Math.cos(radian);
        }
        static tan(angle) {
            var radian = MathUtil.Deg2Rad(angle);
            return Math.tan(radian);
        }
        static asin(angle) {
            var radian = MathUtil.Deg2Rad(angle);
            return Math.asin(radian);
        }
        static acos(angle) {
            var radian = MathUtil.Deg2Rad(angle);
            return Math.acos(radian);
        }
        static atan(angle) {
            var radian = MathUtil.Deg2Rad(angle);
            return Math.atan(radian);
        }
        static atan2(y, x) {
            return Math.atan2(y, x);
        }
        static Abs(value) {
            return Math.abs(value);
        }
        static Min(value, value2) {
            if (value <= value2)
                return value;
            return value2;
        }
        static Max(value, value2) {
            if (value >= value2)
                return value;
            return value2;
        }
        static Mins(values) {
            if (values == null || values.length == 0)
                return 0;
            let min = values[0];
            for (let i = 1; i < values.length; i++) {
                if (values[i] < min)
                    min = values[i];
            }
            return min;
        }
        static GetMaxs(values) {
            if (values == null || values.length == 0)
                return 0;
            let max = values[0];
            for (let i = 1; i < values.length; i++) {
                if (values[i] > max)
                    max = values[i];
            }
            return max;
        }
        static NumberClone(num, floatCount = -1) {
            if (floatCount < 0)
                return parseFloat(num.toString());
            else if (floatCount == 0)
                return parseInt(num.toFixed(0));
            else
                return parseFloat(num.toFixed(floatCount));
        }
        static DistanceV2(x1, y1, x2, y2) {
            let dx = x1 - x2;
            let dy = y1 - y2;
            let distance = Math.sqrt(dx * dx + dy * dy);
            return Math.abs(distance);
        }
        static Pow(n, p) {
            return Math.pow(n, p);
        }
        static Sqrt(n) {
            return Math.sqrt(n);
        }
        static Atan(n) {
            return Math.atan(n);
        }
        static CalNewPointByAngle2(startPoint, angle, distance) {
            var endPoint = new Laya.Vector2();
            var radian = (angle * Math.PI) / 180;
            endPoint.x = startPoint.x + distance * Math.sin(radian);
            endPoint.y = startPoint.y + distance * Math.cos(radian);
            return endPoint;
        }
        calNewPointByAngle3(startPoint, angle, distance) {
            var rate = Math.cos(startPoint.lat * Math.PI / 180);
            var lat_meter = 111111;
            var r = angle * Math.PI / 180.0;
            var x = Math.sin(r) * distance;
            var y = Math.cos(r) * distance;
            x = x / lat_meter / rate;
            y = y / lat_meter;
            return new Laya.Vector3(startPoint.lng + x, startPoint.lat + y, startPoint.alt);
        }
        ;
        static getPercent(n, m) {
            if (m <= 0)
                return 1;
            if (n <= 0)
                return 0;
            if (n > m)
                return 1;
            return parseFloat((n / m).toFixed(2));
        }
        static floatMultiply(arg1, arg2) {
            var n1, n2;
            var r1, r2;
            try {
                r1 = arg1.toString().split(".")[1].length;
            }
            catch (e) {
                r1 = 0;
            }
            try {
                r2 = arg2.toString().split(".")[1].length;
            }
            catch (_a) {
                r2 = 0;
            }
            n1 = Number(arg1.toString().replace(".", ""));
            n2 = Number(arg2.toString().replace(".", ""));
            return n1 * n2 / Math.pow(10, r1 + r2);
        }
        static floatDivide(arg1, arg2) {
            var n1, n2;
            var r1, r2;
            try {
                r1 = arg1.toString().split(".")[1].length;
            }
            catch (e) {
                r1 = 0;
            }
            try {
                r2 = arg2.toString().split(".")[1].length;
            }
            catch (_a) {
                r2 = 0;
            }
            n1 = Number(arg1.toString().replace(".", ""));
            n2 = Number(arg2.toString().replace(".", ""));
            return this.floatMultiply((n1 / n2), Math.pow(10, r2 - r1));
        }
        static floatAdd(arg1, arg2) {
            var r1, r2, m;
            try {
                r1 = arg1.toString().split(".")[1].length;
            }
            catch (e) {
                r1 = 0;
            }
            try {
                r2 = arg2.toString().split(".")[1].length;
            }
            catch (_a) {
                r2 = 0;
            }
            m = Math.pow(10, Math.max(r1, r2));
            return (this.floatMultiply(arg1, m) + this.floatMultiply(arg2, m)) / m;
        }
        static floatSub(arg1, arg2) {
            var r1, r2, m, n;
            try {
                r1 = arg1.toString().split(".")[1].length;
            }
            catch (e) {
                r1 = 0;
            }
            try {
                r2 = arg2.toString().split(".")[1].length;
            }
            catch (_a) {
                r2 = 0;
            }
            m = Math.pow(10, Math.max(r1, r2));
            n = (r1 >= r2) ? r1 : r2;
            return ((this.floatMultiply(arg1, m) - this.floatMultiply(arg2, m)) / m).toFixed(n);
        }
        static floatMode(arg1, arg2) {
            let intNum = arg1 / arg2;
            intNum = intNum < 0 ? Math.ceil(arg1 / arg2) : Math.floor(arg1 / arg2);
            let intVal = this.floatMultiply(intNum, arg2);
            return this.floatSub(arg1, intVal);
        }
    }
    MathUtil.PI = 3.14159274;
    MathUtil.deg2Rad = 0.0174532924;
    MathUtil.rad2Deg = 57.29578;
    MathUtil.BYTE_TO_M = 1 / (1024 * 1024);
    MathUtil.BYTE_TO_K = 1 / (1024);

    exports.MathUtil = MathUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (Frame) {
        class AudioManager {
            constructor() {
                this.minMusicVolume = 0;
                this.maxMusicVolume = 0.5;
                this.minSoundVolume = 0;
                this.maxSoundVolume = 1;
                this.isMusicMute = false;
                this.isSoundMute = false;
                this._hasInit = false;
                this.playList = [];
                this._items = [];
            }
            Init() {
                if (this._hasInit)
                    return false;
                this._hasInit = true;
                this.initAudioItems();
                Laya.SoundManager.autoStopMusic = true;
                Laya.SoundManager.autoReleaseSound = true;
                this.SetMusicMute(false);
                this.SetSoundMute(false);
                return true;
            }
            Clear() {
                this.clearAudioItems();
            }
            GetMusicMute() {
                let volume = this.getMusicMuteData() ? this.minMusicVolume : this.maxMusicVolume;
                this.setMusicVolume((MathUtil.Clamp(volume, this.minMusicVolume, this.maxMusicVolume)));
                return this.isMusicMute;
            }
            SetMusicMute(b) {
                this.setMusicMuteData(b);
                this.setMusicVolume(b ? this.minMusicVolume : this.maxMusicVolume);
            }
            GetSoundMute() {
                let volume = this.getSoundMuteData() ? this.minSoundVolume : this.maxSoundVolume;
                this.setSoundVolume(MathUtil.Clamp(volume, this.minSoundVolume, this.maxSoundVolume));
                return this.isSoundMute;
            }
            SetSoundMute(b) {
                this.setSoundMuteData(b);
                this.setSoundVolume(b ? this.minSoundVolume : this.maxSoundVolume);
            }
            setMusicVolume(v) {
                Laya.SoundManager.setMusicVolume(v);
            }
            setSoundVolume(v) {
                Laya.SoundManager.setSoundVolume(v);
            }
            getMusicMuteData() {
                return this.isMusicMute;
            }
            getSoundMuteData() {
                return this.isSoundMute;
            }
            setMusicMuteData(b) {
                this.isMusicMute = b;
            }
            setSoundMuteData(b) {
                this.isSoundMute = b;
            }
            PlayBGM(name, loop = 0, complete) {
                if (StringUtil.IsNullOrEmpty(name))
                    return;
                this.playBGM(name, loop, complete);
            }
            PlaySound1(name) {
                let volume = this.GetSoundMute() ? 0 : 1;
                this.playSound1("o/audio/sound/" + name, volume);
            }
            PlayUI(name) {
                if (StringUtil.IsNullOrEmpty(name))
                    return;
                let volume = this.GetSoundMute() ? 0 : 1;
                this.playSound(EAudioType.UI, name, volume);
            }
            StopBGM() {
                Laya.SoundManager.stopMusic();
            }
            StopSound() {
                Laya.SoundManager.stopAllSound();
            }
            getVolumeByDis(dis, maxDis) {
                return (1 - MathUtil.Clamp(dis / maxDis, 0, 1));
            }
            playBGM(name, loop = 0, complete) {
                let item = this.getItem(EAudioType.BGM, name);
                if (item != null) {
                    Laya.SoundManager.playMusic(item.Path, loop, complete);
                    this.GetMusicMute();
                }
            }
            playSound(type, name, volume) {
                if (this.GetSoundMute()) {
                    return;
                }
                let item = this.getItem(type, name);
                if (isNaN(volume) || volume <= 0) {
                    return;
                }
                if (item != null) {
                    return this.soundPlay(item.Path, volume);
                }
            }
            playSound1(path, volume) {
                if (this.GetSoundMute()) {
                    return;
                }
                if (isNaN(volume) || volume <= 0) {
                    return;
                }
                this.soundPlay(path, volume);
            }
            soundPlay(path, volume) {
                if (this.playList.indexOf(path) != -1) {
                    return;
                }
                this.playList.push(path);
                LogSys$1.Log("===>start" + Laya.timer.currTimer + ":" + path + "," + volume);
                volume = MathUtil.Clamp(volume, this.minSoundVolume, this.maxSoundVolume);
                let soundChannel = Laya.SoundManager.playSound(path, 1, new Laya.Handler(this, this.onPlayEnd, [path, volume]));
                if (soundChannel) {
                    soundChannel.volume = volume;
                }
                else {
                    LogSys$1.Error(path + " soundChannel is null");
                    this.onPlayEnd(path, volume);
                }
                return soundChannel;
            }
            onPlayEnd(path, vol) {
                let index = this.playList.indexOf(path);
                while (index != -1) {
                    this.playList = this.playList.splice(index, 0);
                    index = this.playList.indexOf(path);
                }
                LogSys$1.Log("===>end  " + Laya.timer.currTimer + ":" + path + "," + vol + " is end");
            }
            LoadAudio(that, complete, progress = null) {
                let path = [];
                if (this._items == null || this._items.length == 0) {
                    LogSys$1.Log("[AudioManager][LoadAudio],没有可加载音效");
                    return;
                }
                this._items.forEach(i => {
                    ListUtil.Add(path, { url: i.Path, type: Laya.Loader.SOUND });
                });
                LogSys$1.Log("[AudioManager][LoadAudio],正在加载音效资源");
                if (path == null || path.length == 0) {
                    LogSys$1.Log("[AudioManager][LoadAudio],音效资源加载完成");
                    if (null != complete)
                        complete.call(that);
                }
                Laya.loader.load(path, Laya.Handler.create(this, () => {
                    LogSys$1.Log("[AudioManager][LoadAudio],音效资源加载完成");
                    if (null != complete)
                        complete.call(that);
                }, [], false), Laya.Handler.create(this, (v) => {
                    if (null != progress)
                        progress.call(that, v);
                }, [], false));
            }
            getItem(type, name) {
                let str = "";
                if (type == EAudioType.BGM)
                    str = Path.BGMPath;
                else if (type == EAudioType.SOUND)
                    str = Path.SOUNDPath;
                else if (type == EAudioType.UI)
                    str = Path.UIPath;
                else if (type == EAudioType.VFX)
                    str = Path.VFXPath;
                let item = this._items.find(i => i.Type == type && i.Path == str + name);
                if (item == null)
                    item = this._items.find(i => i.Type == type && i.Path == str + name + ".mp3");
                if (item == null)
                    item = this._items.find(i => i.Type == type && i.Path == str + name + ".wav");
                return item;
            }
            initAudioItems() {
                this._items = [];
                ListUtil.Add(this._items, new Item(Path.BGMPath + BGMDefine.bgm, EAudioType.BGM));
                ListUtil.Add(this._items, new Item(Path.UIPath + UIDefine.anniu, EAudioType.UI));
            }
            clearAudioItems() {
                this._items.forEach(item => {
                    Laya.Loader.clearRes(item.Path);
                });
                this._items = [];
            }
        }
        Frame.AudioManager = AudioManager;
        class Item {
            constructor(path, type) {
                this._path = "";
                this._type = EAudioType.SOUND;
                this._path = path;
                this._type = type;
            }
            get Path() { return this._path; }
            get Type() { return this._type; }
            Contains(path, type) {
                if (this._path == path && this._type == type)
                    return true;
                return false;
            }
        }
        Frame.Item = Item;
        class Path {
            static get Root() { return this._root; }
            static get BGMPath() { return this._root + this._bgmFloder; }
            static get SOUNDPath() { return this._root + this._soundFloder; }
            static get UIPath() { return this._root + this._uiFloder; }
            static get VFXPath() { return this._root + this._vfxFloder; }
        }
        Path._root = "o/audio/";
        Path._bgmFloder = "bgm/";
        Path._soundFloder = "sound/";
        Path._uiFloder = "ui/";
        Path._vfxFloder = "vfx/";
        Frame.Path = Path;
        let EAudioType;
        (function (EAudioType) {
            EAudioType[EAudioType["BGM"] = 0] = "BGM";
            EAudioType[EAudioType["SOUND"] = 1] = "SOUND";
            EAudioType[EAudioType["UI"] = 2] = "UI";
            EAudioType[EAudioType["VFX"] = 3] = "VFX";
        })(EAudioType = Frame.EAudioType || (Frame.EAudioType = {}));
        class BGMDefine {
        }
        BGMDefine.bgm = "bg1.mp3";
        Frame.BGMDefine = BGMDefine;
        class SOUNDDefine {
        }
        Frame.SOUNDDefine = SOUNDDefine;
        class UIDefine {
        }
        UIDefine.anniu = "sound_anniu.mp3";
        Frame.UIDefine = UIDefine;
        class VFXDefine {
        }
        VFXDefine.chapping = "sound_chapping.mp3";
        Frame.VFXDefine = VFXDefine;
    })(exports.Frame || (exports.Frame = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Callback {
        static Create(caller, callback) {
            let func = new Callback();
            func._caller = caller;
            func._callback = callback;
            return func;
        }
        get Caller() { return this._caller; }
        get CallBack() { return this._callback; }
        Clear() {
            this._caller = null;
            this._callback = null;
        }
        Invoke(data) {
            if (this._callback) {
                return this._callback.call(this._caller, data);
            }
        }
    }

    exports.Callback = Callback;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TimerItem {
        constructor(caller, duration, loop, progress, complete, startTrig = false) {
            this._startTrig = false;
            this._duration = 0;
            this._loop = 0;
            this._timer = 0;
            this._caller = caller;
            this._duration = duration;
            this._loop = loop;
            this._progress = Callback.Create(caller, progress);
            this._complete = Callback.Create(caller, complete);
            this._startTrig = startTrig;
            if (this._startTrig) {
                if (this._progress != null)
                    this._progress.Invoke(0);
            }
        }
        get Caller() { return this._caller; }
        get Loop() { return this._loop; }
        get Looping() { return this._loop == -1; }
        get IsFinish() { return this._loop == 0; }
        Update(time) {
            if (this.IsFinish)
                return;
            this._timer += time;
            if (this._timer >= this._duration) {
                this._timer = 0;
                if (this._progress != null)
                    this._progress.Invoke(time);
                if (this._loop > 0) {
                    this._loop--;
                    if (this.IsFinish) {
                        if (this._complete)
                            this._complete.Invoke();
                    }
                }
            }
        }
        Clear() {
            this._caller = null;
            this._startTrig = false;
            this._duration = 0;
            this._loop = 0;
            this._progress = null;
            this._complete = null;
            this._timer = 0;
        }
    }

    exports.TimerItem = TimerItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TimerMgr {
        constructor() {
            this.minDuration = 1;
            this.updateCount = 0;
            this._addItems = [];
            this._curItems = [];
            this._removeItems = [];
            this.updateCount = 0;
            Laya.timer.loop(this.minDuration, this, this.onTick, null, true);
        }
        static get Ins() {
            if (this._ins == null)
                this._ins = new TimerMgr();
            return this._ins;
        }
        get bUpdate() {
            return this.updateCount % 2 == 0;
        }
        Add(caller, duration, loop, progress, complete, startTrig) {
            let item = new TimerItem(caller, duration, loop, progress, complete, startTrig);
            ListUtil.Add(this._addItems, item);
            return item;
        }
        Remove(item) {
            if (!ListUtil.Contains(this._removeItems, item))
                ListUtil.Add(this._removeItems, item);
        }
        ClearTimer(caller) {
            this._addItems.forEach(item => {
                if (item.Caller == caller) {
                    ListUtil.Add(this._removeItems, item);
                }
            });
            this._curItems.forEach(item => {
                if (item.Caller == caller) {
                    ListUtil.Add(this._removeItems, item);
                }
            });
        }
        ClearAll() {
            this._addItems.forEach(item => item.Clear());
            this._curItems.forEach(item => item.Clear());
            this._removeItems.forEach(item => item.Clear());
            this._addItems = [];
            this._curItems = [];
            this._removeItems = [];
        }
        Start() {
            this.updateCount++;
        }
        Stop() {
            this.updateCount++;
        }
        onTick() {
            if (!this.bUpdate)
                return;
            if (this._removeItems != null && this._removeItems.length > 0) {
                this._removeItems.forEach(item => {
                    ListUtil.Remove(this._curItems, item);
                    ListUtil.Remove(this._addItems, item);
                });
            }
            if (this._curItems != null && this._curItems.length > 0) {
                this._curItems.forEach(item => {
                    if (!item.IsFinish && !ListUtil.Contains(this._removeItems, item)) {
                        item.Update(this.minDuration);
                        if (item.IsFinish) {
                            ListUtil.Add(this._removeItems, item);
                        }
                    }
                });
            }
            if (this._addItems != null && this._addItems.length > 0) {
                this._addItems.forEach(item => {
                    ListUtil.Add(this._curItems, item);
                });
                this._addItems = [];
            }
            if (this._removeItems != null && this._removeItems.length > 0) {
                this._removeItems.forEach(item => {
                    ListUtil.Remove(this._curItems, item);
                    item.Clear();
                });
                this._removeItems = [];
            }
        }
    }
    TimerMgr._ins = null;

    exports.TimerMgr = TimerMgr;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Updater {
        constructor() {
            this.updateCalls = [];
            this.lateUpdateCalls = [];
            this.fixedUpdateCalls = [];
        }
        static get Ins() {
            if (this._ins == null)
                ;
            return this._ins;
        }
        Init() {
            this.updateCalls = [];
            this.lateUpdateCalls = [];
            this.fixedUpdateCalls = [];
            TimerMgr.Ins.Add(this, TimeUtil.FixedDeltaTimeMS, -1, this.FixedUpdate, null, false);
        }
        Update() {
            G.OnUpdate();
            for (let i = 0; i < this.updateCalls.length; i++) {
                if (this.updateCalls[i]) {
                    this.updateCalls[i].Invoke();
                }
            }
        }
        LateUpdate() {
            G.OnLateUpdate();
            this.lateUpdateCalls.forEach(item => {
                if (item)
                    item.Invoke();
            });
        }
        FixedUpdate() {
            G.OnFixedUpdate();
            this.fixedUpdateCalls.forEach(item => {
                if (item)
                    item.Invoke();
            });
        }
        AddUpdate(caller, func) {
            ListUtil.Add(this.updateCalls, Callback.Create(caller, func));
        }
        RemoveUpdate(caller) {
            let templst = ListUtil.Copy(this.updateCalls);
            for (let i = 0; i < templst.length; i++) {
                if (this.updateCalls[i].Caller == caller) {
                    this.updateCalls.splice(i, 1);
                    break;
                }
            }
        }
        AddLateUpdate(caller, func) {
            ListUtil.Add(this.lateUpdateCalls, Callback.Create(caller, func));
        }
        RemoveLateUpdate(caller) {
            let templst = ListUtil.Copy(this.lateUpdateCalls);
            for (let i = 0; i < templst.length; i++) {
                if (this.lateUpdateCalls[i].Caller == caller) {
                    this.lateUpdateCalls.splice(i, 1);
                    break;
                }
            }
        }
        AddFixedUpdate(caller, func) {
            ListUtil.Add(this.fixedUpdateCalls, Callback.Create(caller, func));
        }
        RemoveFixedUpdate(caller) {
            let templst = ListUtil.Copy(this.fixedUpdateCalls);
            for (let i = 0; i < templst.length; i++) {
                if (this.fixedUpdateCalls[i].Caller == caller) {
                    this.fixedUpdateCalls.splice(i, 1);
                    break;
                }
            }
        }
    }
    Updater._ins = new Updater();

    exports.Updater = Updater;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (Common) {
        class AppRoot extends Laya.Script {
            constructor() {
                super();
                if (this.root == null)
                    this.root = new Laya.Sprite();
                Laya.stage.addChild(this.root);
                this.root.name = "AppRoot";
                this.root.addComponentIntance(this);
            }
            onInit() {
                TimeUtil.Init();
                Updater.Ins.Init();
            }
            onUpdate() {
                Updater.Ins.Update();
            }
            onLateUpdate() {
                Updater.Ins.LateUpdate();
            }
        }
        Common.AppRoot = AppRoot;
    })(exports.Common || (exports.Common = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EPID) {
        EPID[EPID["Internal"] = 0] = "Internal";
        EPID[EPID["WxMini"] = 1] = "WxMini";
        EPID[EPID["QQMini"] = 2] = "QQMini";
    })(exports.EPID || (exports.EPID = {}));
    (function (ELanguage) {
        ELanguage[ELanguage["English"] = 0] = "English";
        ELanguage[ELanguage["Chinese"] = 1] = "Chinese";
    })(exports.ELanguage || (exports.ELanguage = {}));
    (function (EScene3DType) {
        EScene3DType[EScene3DType["None"] = 0] = "None";
        EScene3DType[EScene3DType["Main"] = 1] = "Main";
        EScene3DType[EScene3DType["ShowRole"] = 2] = "ShowRole";
        EScene3DType[EScene3DType["House"] = 3] = "House";
        EScene3DType[EScene3DType["HomeBuild"] = 4] = "HomeBuild";
    })(exports.EScene3DType || (exports.EScene3DType = {}));
    (function (EScene2DType) {
        EScene2DType[EScene2DType["None"] = 0] = "None";
        EScene2DType[EScene2DType["Test"] = 1] = "Test";
    })(exports.EScene2DType || (exports.EScene2DType = {}));
    (function (ERoleState) {
        ERoleState[ERoleState["Idle"] = 1] = "Idle";
        ERoleState[ERoleState["Run"] = 2] = "Run";
        ERoleState[ERoleState["Walk"] = 3] = "Walk";
        ERoleState[ERoleState["AttackPrev"] = 4] = "AttackPrev";
        ERoleState[ERoleState["AttackEnd"] = 5] = "AttackEnd";
        ERoleState[ERoleState["SkillPrev"] = 6] = "SkillPrev";
        ERoleState[ERoleState["SkillEnd"] = 7] = "SkillEnd";
        ERoleState[ERoleState["Hitted"] = 8] = "Hitted";
        ERoleState[ERoleState["Dead"] = 9] = "Dead";
        ERoleState[ERoleState["Born"] = 10] = "Born";
    })(exports.ERoleState || (exports.ERoleState = {}));
    (function (EDimension) {
        EDimension["D2"] = "2d";
        EDimension["D3"] = "3d";
    })(exports.EDimension || (exports.EDimension = {}));
    (function (ESubPackageName) {
        ESubPackageName["Bank"] = "bank";
        ESubPackageName["Create"] = "create";
        ESubPackageName["Pre"] = "pre";
    })(exports.ESubPackageName || (exports.ESubPackageName = {}));
    (function (EViewType) {
        EViewType[EViewType["None"] = 0] = "None";
        EViewType[EViewType["Debug"] = 1] = "Debug";
        EViewType[EViewType["MsgBox"] = 2] = "MsgBox";
        EViewType[EViewType["RulerBox"] = 3] = "RulerBox";
        EViewType[EViewType["MProp"] = 4] = "MProp";
        EViewType[EViewType["SProp"] = 5] = "SProp";
        EViewType[EViewType["MidLabel"] = 6] = "MidLabel";
        EViewType[EViewType["Loading"] = 7] = "Loading";
        EViewType[EViewType["QueryMsg"] = 8] = "QueryMsg";
        EViewType[EViewType["Main"] = 9] = "Main";
        EViewType[EViewType["LoginNew"] = 10] = "LoginNew";
        EViewType[EViewType["EquipTips"] = 11] = "EquipTips";
        EViewType[EViewType["EquipUpdate"] = 12] = "EquipUpdate";
        EViewType[EViewType["Equip_switch"] = 13] = "Equip_switch";
        EViewType[EViewType["Attr_detailed"] = 14] = "Attr_detailed";
        EViewType[EViewType["HelpView"] = 15] = "HelpView";
        EViewType[EViewType["ChestLevelUp"] = 16] = "ChestLevelUp";
        EViewType[EViewType["QuickSetting"] = 17] = "QuickSetting";
        EViewType[EViewType["SmallTips"] = 18] = "SmallTips";
        EViewType[EViewType["FightOpen"] = 19] = "FightOpen";
        EViewType[EViewType["FightMain"] = 20] = "FightMain";
        EViewType[EViewType["FightJieSuan"] = 21] = "FightJieSuan";
        EViewType[EViewType["Wait"] = 22] = "Wait";
        EViewType[EViewType["GetReward"] = 23] = "GetReward";
        EViewType[EViewType["ShowPlayer"] = 24] = "ShowPlayer";
        EViewType[EViewType["YeWaiBoss"] = 25] = "YeWaiBoss";
        EViewType[EViewType["YeWaiSweep"] = 26] = "YeWaiSweep";
        EViewType[EViewType["WingInfo"] = 27] = "WingInfo";
        EViewType[EViewType["WingMainLevel"] = 28] = "WingMainLevel";
        EViewType[EViewType["WingMainStage"] = 29] = "WingMainStage";
        EViewType[EViewType["WingExchange"] = 30] = "WingExchange";
        EViewType[EViewType["WingTreasure"] = 31] = "WingTreasure";
        EViewType[EViewType["ZuoqiChouQu"] = 32] = "ZuoqiChouQu";
        EViewType[EViewType["ZuoqiFangpai"] = 33] = "ZuoqiFangpai";
        EViewType[EViewType["ZuoqiTips"] = 34] = "ZuoqiTips";
        EViewType[EViewType["ZuoqiMain"] = 35] = "ZuoqiMain";
        EViewType[EViewType["ZuoqiStorge"] = 36] = "ZuoqiStorge";
        EViewType[EViewType["ZuoqiYunShu"] = 37] = "ZuoqiYunShu";
        EViewType[EViewType["ZuoqiMission"] = 38] = "ZuoqiMission";
        EViewType[EViewType["JjcMain"] = 39] = "JjcMain";
        EViewType[EViewType["JjcFight"] = 40] = "JjcFight";
        EViewType[EViewType["JjcRewardShow"] = 41] = "JjcRewardShow";
        EViewType[EViewType["jjcLog"] = 42] = "jjcLog";
        EViewType[EViewType["XingFuKuangHuanMain"] = 43] = "XingFuKuangHuanMain";
        EViewType[EViewType["Shop"] = 44] = "Shop";
        EViewType[EViewType["QianDao"] = 45] = "QianDao";
        EViewType[EViewType["Libao"] = 46] = "Libao";
        EViewType[EViewType["BoxChengZhang"] = 47] = "BoxChengZhang";
        EViewType[EViewType["ChongZhiTest"] = 48] = "ChongZhiTest";
        EViewType[EViewType["JueSeChengZhang"] = 49] = "JueSeChengZhang";
        EViewType[EViewType["SanGuo"] = 50] = "SanGuo";
        EViewType[EViewType["HuoDongLiBao"] = 51] = "HuoDongLiBao";
        EViewType[EViewType["MeiRiLiBao"] = 52] = "MeiRiLiBao";
        EViewType[EViewType["HuanzhuangMain"] = 53] = "HuanzhuangMain";
        EViewType[EViewType["HuanzhuangTuJian"] = 54] = "HuanzhuangTuJian";
        EViewType[EViewType["AttrShow"] = 55] = "AttrShow";
        EViewType[EViewType["YueKa"] = 56] = "YueKa";
        EViewType[EViewType["ZhongShenKa"] = 57] = "ZhongShenKa";
        EViewType[EViewType["NewPlayPackage"] = 58] = "NewPlayPackage";
        EViewType[EViewType["DiamondEject"] = 59] = "DiamondEject";
        EViewType[EViewType["ChestQuickUse"] = 63] = "ChestQuickUse";
        EViewType[EViewType["HeroHouse"] = 64] = "HeroHouse";
        EViewType[EViewType["HeroHouseSwicth"] = 65] = "HeroHouseSwicth";
        EViewType[EViewType["HeroHouseShow"] = 66] = "HeroHouseShow";
        EViewType[EViewType["HeroHouseMapSel"] = 67] = "HeroHouseMapSel";
        EViewType[EViewType["HeroHouseLevelUp"] = 68] = "HeroHouseLevelUp";
        EViewType[EViewType["HeroHouseShop"] = 69] = "HeroHouseShop";
        EViewType[EViewType["HeroHouseTask"] = 70] = "HeroHouseTask";
        EViewType[EViewType["HeroInherit"] = 71] = "HeroInherit";
        EViewType[EViewType["HeroHouseDetail"] = 72] = "HeroHouseDetail";
        EViewType[EViewType["HeroHouseKnowLedge"] = 73] = "HeroHouseKnowLedge";
        EViewType[EViewType["CIFU"] = 74] = "CIFU";
        EViewType[EViewType["CIFU_ZHUANHUAN"] = 75] = "CIFU_ZHUANHUAN";
        EViewType[EViewType["CIFU_SHEZHI"] = 76] = "CIFU_SHEZHI";
        EViewType[EViewType["CIFU_ITEMTIP"] = 77] = "CIFU_ITEMTIP";
        EViewType[EViewType["CIFU_ITEMTIP1"] = 78] = "CIFU_ITEMTIP1";
        EViewType[EViewType["HeroHouseHandbook"] = 80] = "HeroHouseHandbook";
        EViewType[EViewType["HeroHouseStorge"] = 81] = "HeroHouseStorge";
        EViewType[EViewType["HeroHouseWeiTuo"] = 82] = "HeroHouseWeiTuo";
        EViewType[EViewType["HeroHousePackage"] = 83] = "HeroHousePackage";
        EViewType[EViewType["PAOSHANG"] = 90] = "PAOSHANG";
        EViewType[EViewType["PAOSHANGJS"] = 91] = "PAOSHANGJS";
        EViewType[EViewType["PAOSHANGTASK"] = 92] = "PAOSHANGTASK";
        EViewType[EViewType["PAOSHANGRIZHI"] = 93] = "PAOSHANGRIZHI";
        EViewType[EViewType["PAOSHANGPH"] = 94] = "PAOSHANGPH";
        EViewType[EViewType["PAOSHANGNEAR"] = 95] = "PAOSHANGNEAR";
        EViewType[EViewType["GUAJI"] = 100] = "GUAJI";
        EViewType[EViewType["GUAJIADDTIME"] = 102] = "GUAJIADDTIME";
        EViewType[EViewType["GUAJIkUAISU"] = 103] = "GUAJIkUAISU";
        EViewType[EViewType["NewAdventureMain"] = 101] = "NewAdventureMain";
        EViewType[EViewType["NewAdventureCleanUp"] = 120] = "NewAdventureCleanUp";
        EViewType[EViewType["Soul"] = 121] = "Soul";
        EViewType[EViewType["SoulTips"] = 122] = "SoulTips";
        EViewType[EViewType["SoulUpgrade"] = 123] = "SoulUpgrade";
        EViewType[EViewType["SoulCompareTip"] = 124] = "SoulCompareTip";
        EViewType[EViewType["SoulSuitTips"] = 125] = "SoulSuitTips";
        EViewType[EViewType["SheZhiView"] = 130] = "SheZhiView";
        EViewType[EViewType["YinSiView"] = 131] = "YinSiView";
        EViewType[EViewType["DingYueView"] = 133] = "DingYueView";
        EViewType[EViewType["QuFuView"] = 134] = "QuFuView";
        EViewType[EViewType["SiderView"] = 135] = "SiderView";
        EViewType[EViewType["DaLuanDou"] = 140] = "DaLuanDou";
        EViewType[EViewType["ShopBuy"] = 141] = "ShopBuy";
        EViewType[EViewType["GZHVIEW"] = 142] = "GZHVIEW";
        EViewType[EViewType["SubCDView"] = 143] = "SubCDView";
        EViewType[EViewType["CjkfView"] = 144] = "CjkfView";
        EViewType[EViewType["BaoShiMainView"] = 150] = "BaoShiMainView";
        EViewType[EViewType["BaoShiXQView"] = 151] = "BaoShiXQView";
        EViewType[EViewType["BaoShiDHView"] = 152] = "BaoShiDHView";
        EViewType[EViewType["BaoShiGMView"] = 153] = "BaoShiGMView";
        EViewType[EViewType["BaoShiTJView"] = 154] = "BaoShiTJView";
        EViewType[EViewType["FaZhengGHView"] = 155] = "FaZhengGHView";
        EViewType[EViewType["FaZhengDHView"] = 156] = "FaZhengDHView";
        EViewType[EViewType["BaoShiHCView"] = 157] = "BaoShiHCView";
        EViewType[EViewType["BaoShiAutoHCView"] = 158] = "BaoShiAutoHCView";
        EViewType[EViewType["BaoShiGongMingView"] = 159] = "BaoShiGongMingView";
        EViewType[EViewType["GuangGaoView"] = 170] = "GuangGaoView";
        EViewType[EViewType["Mail"] = 171] = "Mail";
        EViewType[EViewType["MailShow"] = 172] = "MailShow";
        EViewType[EViewType["RollingLamp"] = 173] = "RollingLamp";
        EViewType[EViewType["NoticePop"] = 174] = "NoticePop";
        EViewType[EViewType["HighAutoChest"] = 175] = "HighAutoChest";
        EViewType[EViewType["Laborday"] = 176] = "Laborday";
        EViewType[EViewType["LabordayReward"] = 177] = "LabordayReward";
        EViewType[EViewType["LabordayShop"] = 178] = "LabordayShop";
        EViewType[EViewType["LabordayPackage"] = 179] = "LabordayPackage";
        EViewType[EViewType["ShenBin"] = 180] = "ShenBin";
        EViewType[EViewType["ShenBinLv"] = 181] = "ShenBinLv";
        EViewType[EViewType["ShenBinLog"] = 182] = "ShenBinLog";
        EViewType[EViewType["ShenBinLB"] = 183] = "ShenBinLB";
        EViewType[EViewType["ShenBinTZView"] = 194] = "ShenBinTZView";
        EViewType[EViewType["LabordayExchange"] = 184] = "LabordayExchange";
        EViewType[EViewType["RideBuyTips"] = 185] = "RideBuyTips";
        EViewType[EViewType["zuoqitujian"] = 186] = "zuoqitujian";
        EViewType[EViewType["JJCBSTIP"] = 187] = "JJCBSTIP";
        EViewType[EViewType["JJCSBTIP"] = 188] = "JJCSBTIP";
        EViewType[EViewType["JJCHYTIP"] = 189] = "JJCHYTIP";
        EViewType[EViewType["JJCWGTIP"] = 190] = "JJCWGTIP";
        EViewType[EViewType["JJCZHTIP"] = 191] = "JJCZHTIP";
        EViewType[EViewType["JJCDBTIP"] = 192] = "JJCDBTIP";
        EViewType[EViewType["jjcLCTip"] = 193] = "jjcLCTip";
        EViewType[EViewType["CHENGHAO"] = 200] = "CHENGHAO";
        EViewType[EViewType["DF_JJC"] = 201] = "DF_JJC";
        EViewType[EViewType["BackHome"] = 202] = "BackHome";
        EViewType[EViewType["MountWash"] = 203] = "MountWash";
        EViewType[EViewType["BoxAnimSet"] = 204] = "BoxAnimSet";
        EViewType[EViewType["JuBaoPeng"] = 205] = "JuBaoPeng";
        EViewType[EViewType["DuanWu"] = 206] = "DuanWu";
        EViewType[EViewType["DuanWuLeiChong"] = 207] = "DuanWuLeiChong";
        EViewType[EViewType["DuanWuPackage"] = 208] = "DuanWuPackage";
        EViewType[EViewType["DuanWuLog"] = 209] = "DuanWuLog";
        EViewType[EViewType["DuanWuRank"] = 210] = "DuanWuRank";
        EViewType[EViewType["DuanWuRewardShow"] = 211] = "DuanWuRewardShow";
        EViewType[EViewType["ZhengZhan"] = 212] = "ZhengZhan";
        EViewType[EViewType["FightMonster"] = 213] = "FightMonster";
        EViewType[EViewType["FightHardRank"] = 214] = "FightHardRank";
        EViewType[EViewType["FighthardReward"] = 215] = "FighthardReward";
        EViewType[EViewType["FighthardDetail"] = 216] = "FighthardDetail";
        EViewType[EViewType["FighthardTuJian"] = 217] = "FighthardTuJian";
        EViewType[EViewType["Summer"] = 218] = "Summer";
        EViewType[EViewType["SummerPackage"] = 219] = "SummerPackage";
        EViewType[EViewType["SummerShop"] = 220] = "SummerShop";
        EViewType[EViewType["GameGroup"] = 221] = "GameGroup";
        EViewType[EViewType["ExchangeCode"] = 222] = "ExchangeCode";
        EViewType[EViewType["JJZML"] = 234] = "JJZML";
        EViewType[EViewType["FuJiangFeast"] = 235] = "FuJiangFeast";
        EViewType[EViewType["UnlockEquip"] = 236] = "UnlockEquip";
        EViewType[EViewType["JiShaoChengDuo"] = 237] = "JiShaoChengDuo";
        EViewType[EViewType["NewPlayerFeast"] = 238] = "NewPlayerFeast";
        EViewType[EViewType["NewPlayerGemFeast"] = 239] = "NewPlayerGemFeast";
        EViewType[EViewType["NewPlayerFeastPackage"] = 240] = "NewPlayerFeastPackage";
        EViewType[EViewType["NewPlayerRideFeast"] = 241] = "NewPlayerRideFeast";
        EViewType[EViewType["NewPlayerFujiangFeast"] = 242] = "NewPlayerFujiangFeast";
        EViewType[EViewType["PetFeast"] = 243] = "PetFeast";
        EViewType[EViewType["NewPlayerPetFeast"] = 245] = "NewPlayerPetFeast";
        EViewType[EViewType["NewPlayerTaskView"] = 246] = "NewPlayerTaskView";
        EViewType[EViewType["ShenBinFeast"] = 247] = "ShenBinFeast";
        EViewType[EViewType["GemFeast"] = 250] = "GemFeast";
        EViewType[EViewType["ScoreJjcJieSuan"] = 251] = "ScoreJjcJieSuan";
        EViewType[EViewType["ZhengTu"] = 252] = "ZhengTu";
        EViewType[EViewType["FuJiang"] = 300] = "FuJiang";
        EViewType[EViewType["FuJiangChouKa"] = 301] = "FuJiangChouKa";
        EViewType[EViewType["Children"] = 302] = "Children";
        EViewType[EViewType["ChildPackage"] = 303] = "ChildPackage";
        EViewType[EViewType["ChildrenShop"] = 304] = "ChildrenShop";
        EViewType[EViewType["FuJiangGouMai"] = 305] = "FuJiangGouMai";
        EViewType[EViewType["FuJiangHuoDe"] = 306] = "FuJiangHuoDe";
        EViewType[EViewType["FuJiangWuSun"] = 307] = "FuJiangWuSun";
        EViewType[EViewType["FuJiangCK"] = 308] = "FuJiangCK";
        EViewType[EViewType["FuJiangWuSun1"] = 309] = "FuJiangWuSun1";
        EViewType[EViewType["FuJiangPY"] = 310] = "FuJiangPY";
        EViewType[EViewType["FuJiangCZ"] = 311] = "FuJiangCZ";
        EViewType[EViewType["FuJiangStar"] = 312] = "FuJiangStar";
        EViewType[EViewType["FuJiangSkillTip"] = 313] = "FuJiangSkillTip";
        EViewType[EViewType["FuJiangSQTip"] = 314] = "FuJiangSQTip";
        EViewType[EViewType["FuJiangXQView"] = 315] = "FuJiangXQView";
        EViewType[EViewType["FuJiangMountCKView"] = 316] = "FuJiangMountCKView";
        EViewType[EViewType["FujiangSCZZView"] = 317] = "FujiangSCZZView";
        EViewType[EViewType["FujiangJBSXView"] = 318] = "FujiangJBSXView";
        EViewType[EViewType["FujiangJBView"] = 319] = "FujiangJBView";
        EViewType[EViewType["FujiangJBZBView"] = 320] = "FujiangJBZBView";
        EViewType[EViewType["FuJiangAttrView"] = 321] = "FuJiangAttrView";
        EViewType[EViewType["FuJIiangZQGHView"] = 322] = "FuJIiangZQGHView";
        EViewType[EViewType["FuJiangStarView1"] = 323] = "FuJiangStarView1";
        EViewType[EViewType["FuJiangHDView1"] = 324] = "FuJiangHDView1";
        EViewType[EViewType["FuJiangAttrView1"] = 325] = "FuJiangAttrView1";
        EViewType[EViewType["FuJiangGLTip"] = 326] = "FuJiangGLTip";
        EViewType[EViewType["YaoQing"] = 350] = "YaoQing";
        EViewType[EViewType["YaoQingXQ"] = 351] = "YaoQingXQ";
        EViewType[EViewType["LoginQuFu"] = 352] = "LoginQuFu";
        EViewType[EViewType["YinDaoView"] = 353] = "YinDaoView";
        EViewType[EViewType["XXZDZView"] = 354] = "XXZDZView";
        EViewType[EViewType["XXZDZMJView"] = 355] = "XXZDZMJView";
        EViewType[EViewType["XXZDZRankView"] = 356] = "XXZDZRankView";
        EViewType[EViewType["XXZDZRZView"] = 357] = "XXZDZRZView";
        EViewType[EViewType["XXZDZShopView"] = 358] = "XXZDZShopView";
        EViewType[EViewType["XXZDZTZView"] = 359] = "XXZDZTZView";
        EViewType[EViewType["XXZDZGMView"] = 360] = "XXZDZGMView";
        EViewType[EViewType["XXZDZAwardView"] = 361] = "XXZDZAwardView";
        EViewType[EViewType["XXZDZShopBuyView"] = 368] = "XXZDZShopBuyView";
        EViewType[EViewType["WuShenDianView"] = 362] = "WuShenDianView";
        EViewType[EViewType["WuShenDianRankView"] = 363] = "WuShenDianRankView";
        EViewType[EViewType["WuShenDianShopView"] = 364] = "WuShenDianShopView";
        EViewType[EViewType["WuShenDianTJView"] = 365] = "WuShenDianTJView";
        EViewType[EViewType["WuShenDianSHView"] = 366] = "WuShenDianSHView";
        EViewType[EViewType["WuShenDianAwardView"] = 367] = "WuShenDianAwardView";
        EViewType[EViewType["WuShenDianSHLView"] = 369] = "WuShenDianSHLView";
        EViewType[EViewType["MeiRiZhuanPanView"] = 370] = "MeiRiZhuanPanView";
        EViewType[EViewType["MeiRiZhuanPanTip1"] = 371] = "MeiRiZhuanPanTip1";
        EViewType[EViewType["MeiRiZhuanPanTip2"] = 372] = "MeiRiZhuanPanTip2";
        EViewType[EViewType["MeiRiZhuanPanTip3"] = 373] = "MeiRiZhuanPanTip3";
        EViewType[EViewType["KaiFuChongBangView"] = 374] = "KaiFuChongBangView";
        EViewType[EViewType["KaiFuChongBangAwardView"] = 375] = "KaiFuChongBangAwardView";
        EViewType[EViewType["TeQuanKaView"] = 376] = "TeQuanKaView";
        EViewType[EViewType["JieDongFengView"] = 380] = "JieDongFengView";
        EViewType[EViewType["JieDongFengView1"] = 381] = "JieDongFengView1";
        EViewType[EViewType["LingChongMainView"] = 400] = "LingChongMainView";
        EViewType[EViewType["LingChongGMView"] = 401] = "LingChongGMView";
        EViewType[EViewType["LingChongFanPaiView"] = 402] = "LingChongFanPaiView";
        EViewType[EViewType["LingChongTJView"] = 403] = "LingChongTJView";
        EViewType[EViewType["LingChongXMTJView"] = 404] = "LingChongXMTJView";
        EViewType[EViewType["LingChongRH_Succeed"] = 405] = "LingChongRH_Succeed";
        EViewType[EViewType["LingChongCZView"] = 406] = "LingChongCZView";
        EViewType[EViewType["LingChongLVView"] = 407] = "LingChongLVView";
        EViewType[EViewType["LingChongStarView"] = 408] = "LingChongStarView";
        EViewType[EViewType["LingChongAutoRh"] = 409] = "LingChongAutoRh";
        EViewType[EViewType["LingChongXMView"] = 410] = "LingChongXMView";
        EViewType[EViewType["LingChongCQView"] = 411] = "LingChongCQView";
        EViewType[EViewType["LingChongExchange"] = 412] = "LingChongExchange";
        EViewType[EViewType["MountLiBaoView"] = 420] = "MountLiBaoView";
        EViewType[EViewType["PetLiBaoView"] = 421] = "PetLiBaoView";
        EViewType[EViewType["CCJJView"] = 422] = "CCJJView";
        EViewType[EViewType["ZuoqiChengZhangView"] = 423] = "ZuoqiChengZhangView";
        EViewType[EViewType["LingchongChengZhangView"] = 424] = "LingchongChengZhangView";
        EViewType[EViewType["BaoshiChengZhangView"] = 425] = "BaoshiChengZhangView";
        EViewType[EViewType["MeiRiFenXiangView"] = 426] = "MeiRiFenXiangView";
        EViewType[EViewType["TianJiaZhuoMianView"] = 427] = "TianJiaZhuoMianView";
        EViewType[EViewType["YouXiQuanLiBaoView"] = 428] = "YouXiQuanLiBaoView";
        EViewType[EViewType["FenXiangDaoQunView"] = 429] = "FenXiangDaoQunView";
        EViewType[EViewType["ServerTaskView"] = 430] = "ServerTaskView";
        EViewType[EViewType["SkinLiBaoView"] = 431] = "SkinLiBaoView";
        EViewType[EViewType["midAutumn"] = 440] = "midAutumn";
        EViewType[EViewType["midAutumnPackage"] = 441] = "midAutumnPackage";
        EViewType[EViewType["midAutumnrenShop"] = 442] = "midAutumnrenShop";
        EViewType[EViewType["midAutumnrenShop1"] = 443] = "midAutumnrenShop1";
        EViewType[EViewType["LCZQRankView"] = 450] = "LCZQRankView";
        EViewType[EViewType["Luck"] = 451] = "Luck";
        EViewType[EViewType["LuckPackage"] = 452] = "LuckPackage";
        EViewType[EViewType["LuckShop"] = 453] = "LuckShop";
        EViewType[EViewType["LCZQRankTip"] = 454] = "LCZQRankTip";
        EViewType[EViewType["LCZQRankTip1"] = 455] = "LCZQRankTip1";
        EViewType[EViewType["WanShengJieView"] = 460] = "WanShengJieView";
        EViewType[EViewType["WanShengJieView1"] = 461] = "WanShengJieView1";
        EViewType[EViewType["SignInNew"] = 462] = "SignInNew";
        EViewType[EViewType["AllianceCreateView"] = 463] = "AllianceCreateView";
        EViewType[EViewType["AllianceListView"] = 464] = "AllianceListView";
        EViewType[EViewType["AllianceMainView"] = 465] = "AllianceMainView";
        EViewType[EViewType["AllianceEditView"] = 466] = "AllianceEditView";
        EViewType[EViewType["AllianceNoticeView"] = 467] = "AllianceNoticeView";
        EViewType[EViewType["AllianceMenuView"] = 468] = "AllianceMenuView";
        EViewType[EViewType["AllianceApplyView"] = 469] = "AllianceApplyView";
        EViewType[EViewType["AllianceBossView"] = 490] = "AllianceBossView";
        EViewType[EViewType["AllianceBossDetailView"] = 491] = "AllianceBossDetailView";
        EViewType[EViewType["AllianceRankListView"] = 492] = "AllianceRankListView";
        EViewType[EViewType["JinShengView"] = 470] = "JinShengView";
        EViewType[EViewType["JinShengView1"] = 471] = "JinShengView1";
        EViewType[EViewType["AllianceFight56View"] = 472] = "AllianceFight56View";
        EViewType[EViewType["AllianceFightBossDetailView"] = 473] = "AllianceFightBossDetailView";
        EViewType[EViewType["AllianceFightEnrollView"] = 474] = "AllianceFightEnrollView";
        EViewType[EViewType["AllianceFightHarmDetailView"] = 475] = "AllianceFightHarmDetailView";
        EViewType[EViewType["ChatView"] = 480] = "ChatView";
        EViewType[EViewType["AllianceFightGCView"] = 481] = "AllianceFightGCView";
        EViewType[EViewType["AllianceFightGCTZView"] = 482] = "AllianceFightGCTZView";
        EViewType[EViewType["AllianceFightGCTZView1"] = 483] = "AllianceFightGCTZView1";
        EViewType[EViewType["AllianceFightRankView"] = 484] = "AllianceFightRankView";
        EViewType[EViewType["AllianceFightRewardView"] = 485] = "AllianceFightRewardView";
        EViewType[EViewType["AllianceFightRZView"] = 486] = "AllianceFightRZView";
        EViewType[EViewType["AllianceFightAwardView"] = 487] = "AllianceFightAwardView";
        EViewType[EViewType["AllianceFightJSAwardView"] = 488] = "AllianceFightJSAwardView";
        EViewType[EViewType["AllianceFightAwardView1"] = 489] = "AllianceFightAwardView1";
        EViewType[EViewType["AllianceFightAwardView2"] = 493] = "AllianceFightAwardView2";
        EViewType[EViewType["AllianceFightMemberView"] = 494] = "AllianceFightMemberView";
        EViewType[EViewType["ZhanLingView"] = 500] = "ZhanLingView";
        EViewType[EViewType["MoJinXiaoWeiView"] = 510] = "MoJinXiaoWeiView";
        EViewType[EViewType["MoJinXiaoWeiView1"] = 511] = "MoJinXiaoWeiView1";
        EViewType[EViewType["MoJinXiaoWeiView2"] = 512] = "MoJinXiaoWeiView2";
        EViewType[EViewType["MonopolyMainView"] = 520] = "MonopolyMainView";
        EViewType[EViewType["MonopolyView"] = 521] = "MonopolyView";
        EViewType[EViewType["MonopolyLBView"] = 522] = "MonopolyLBView";
        EViewType[EViewType["MonopolyAwardView"] = 523] = "MonopolyAwardView";
        EViewType[EViewType["MonopolyAwardView1"] = 524] = "MonopolyAwardView1";
        EViewType[EViewType["DrawEventView"] = 530] = "DrawEventView";
        EViewType[EViewType["DrawEventView1"] = 531] = "DrawEventView1";
        EViewType[EViewType["DrawEventView2"] = 532] = "DrawEventView2";
        EViewType[EViewType["DrawEventShowReward"] = 533] = "DrawEventShowReward";
        EViewType[EViewType["NamingChargeMain"] = 534] = "NamingChargeMain";
        EViewType[EViewType["NamingChargeAlert"] = 535] = "NamingChargeAlert";
        EViewType[EViewType["NamingChargeReward"] = 536] = "NamingChargeReward";
        EViewType[EViewType["Combopack"] = 537] = "Combopack";
        EViewType[EViewType["DiscountPopWin"] = 538] = "DiscountPopWin";
        EViewType[EViewType["SpringFestivalView"] = 550] = "SpringFestivalView";
        EViewType[EViewType["SpringFestivalWWView"] = 551] = "SpringFestivalWWView";
        EViewType[EViewType["SpringFestivalRankView"] = 552] = "SpringFestivalRankView";
        EViewType[EViewType["SpringFestivalAwRankView"] = 553] = "SpringFestivalAwRankView";
        EViewType[EViewType["SpringFestivalTaskView"] = 554] = "SpringFestivalTaskView";
        EViewType[EViewType["SpringFestivalShopView"] = 555] = "SpringFestivalShopView";
        EViewType[EViewType["SpringFestivalShopGMView"] = 556] = "SpringFestivalShopGMView";
        EViewType[EViewType["SpringFestivalTipView"] = 557] = "SpringFestivalTipView";
        EViewType[EViewType["WowHuanZhuangView"] = 600] = "WowHuanZhuangView";
        EViewType[EViewType["WowHuanZhuangView1"] = 601] = "WowHuanZhuangView1";
        EViewType[EViewType["yuanxiao"] = 610] = "yuanxiao";
        EViewType[EViewType["yuanxiaoPackage"] = 611] = "yuanxiaoPackage";
        EViewType[EViewType["yuanxiaoShop"] = 612] = "yuanxiaoShop";
    })(exports.EViewType || (exports.EViewType = {}));
    (function (EPageType) {
        EPageType[EPageType["None"] = 0] = "None";
        EPageType[EPageType["CloseBigToSmall"] = 1] = "CloseBigToSmall";
    })(exports.EPageType || (exports.EPageType = {}));
    (function (EAxis) {
        EAxis[EAxis["X"] = 0] = "X";
        EAxis[EAxis["Y"] = 1] = "Y";
        EAxis[EAxis["Z"] = 2] = "Z";
    })(exports.EAxis || (exports.EAxis = {}));
    (function (EBezierType) {
        EBezierType[EBezierType["Bezier2"] = 0] = "Bezier2";
        EBezierType[EBezierType["Bezier3"] = 1] = "Bezier3";
    })(exports.EBezierType || (exports.EBezierType = {}));
    (function (EBannerAdType) {
        EBannerAdType[EBannerAdType["None"] = 0] = "None";
        EBannerAdType[EBannerAdType["Home"] = 1] = "Home";
    })(exports.EBannerAdType || (exports.EBannerAdType = {}));
    (function (ERewardVideoAdType) {
        ERewardVideoAdType[ERewardVideoAdType["None"] = 0] = "None";
        ERewardVideoAdType[ERewardVideoAdType["Settle"] = 1] = "Settle";
    })(exports.ERewardVideoAdType || (exports.ERewardVideoAdType = {}));
    (function (EInterstitialAdType) {
        EInterstitialAdType[EInterstitialAdType["None"] = 0] = "None";
        EInterstitialAdType[EInterstitialAdType["Home"] = 1] = "Home";
    })(exports.EInterstitialAdType || (exports.EInterstitialAdType = {}));
    (function (EGridAdType) {
        EGridAdType[EGridAdType["None"] = 0] = "None";
        EGridAdType[EGridAdType["Home"] = 1] = "Home";
    })(exports.EGridAdType || (exports.EGridAdType = {}));
    (function (TweenEase) {
        TweenEase[TweenEase["None"] = 0] = "None";
        TweenEase[TweenEase["linearNone"] = 1] = "linearNone";
        TweenEase[TweenEase["linearIn"] = 2] = "linearIn";
        TweenEase[TweenEase["linearInOut"] = 3] = "linearInOut";
        TweenEase[TweenEase["linearOut"] = 4] = "linearOut";
        TweenEase[TweenEase["bounceIn"] = 5] = "bounceIn";
        TweenEase[TweenEase["bounceInOut"] = 6] = "bounceInOut";
        TweenEase[TweenEase["bounceOut"] = 7] = "bounceOut";
        TweenEase[TweenEase["backIn"] = 8] = "backIn";
        TweenEase[TweenEase["backInOut"] = 9] = "backInOut";
        TweenEase[TweenEase["backOut"] = 10] = "backOut";
        TweenEase[TweenEase["elasticIn"] = 11] = "elasticIn";
        TweenEase[TweenEase["elasticInOut"] = 12] = "elasticInOut";
        TweenEase[TweenEase["elasticOut"] = 13] = "elasticOut";
        TweenEase[TweenEase["strongIn"] = 14] = "strongIn";
        TweenEase[TweenEase["strongInOut"] = 15] = "strongInOut";
        TweenEase[TweenEase["strongOut"] = 16] = "strongOut";
        TweenEase[TweenEase["sineInOut"] = 17] = "sineInOut";
        TweenEase[TweenEase["sineIn"] = 18] = "sineIn";
        TweenEase[TweenEase["sineOut"] = 19] = "sineOut";
        TweenEase[TweenEase["quintIn"] = 20] = "quintIn";
        TweenEase[TweenEase["quintInOut"] = 21] = "quintInOut";
        TweenEase[TweenEase["quintOut"] = 22] = "quintOut";
        TweenEase[TweenEase["quartIn"] = 23] = "quartIn";
        TweenEase[TweenEase["quartInOut"] = 24] = "quartInOut";
        TweenEase[TweenEase["quartOut"] = 25] = "quartOut";
        TweenEase[TweenEase["cubicIn"] = 26] = "cubicIn";
        TweenEase[TweenEase["cubicInOut"] = 27] = "cubicInOut";
        TweenEase[TweenEase["cubicOut"] = 28] = "cubicOut";
        TweenEase[TweenEase["quadIn"] = 29] = "quadIn";
        TweenEase[TweenEase["quadInOut"] = 30] = "quadInOut";
        TweenEase[TweenEase["quadOut"] = 31] = "quadOut";
        TweenEase[TweenEase["expoIn"] = 32] = "expoIn";
        TweenEase[TweenEase["expoInOut"] = 33] = "expoInOut";
        TweenEase[TweenEase["expoOut"] = 34] = "expoOut";
        TweenEase[TweenEase["circIn"] = 35] = "circIn";
        TweenEase[TweenEase["circInOut"] = 36] = "circInOut";
        TweenEase[TweenEase["circOut"] = 37] = "circOut";
    })(exports.TweenEase || (exports.TweenEase = {}));
    (function (EMsgBoxType) {
        EMsgBoxType[EMsgBoxType["OkOrCancel"] = 0] = "OkOrCancel";
        EMsgBoxType[EMsgBoxType["OnlyOk"] = 1] = "OnlyOk";
    })(exports.EMsgBoxType || (exports.EMsgBoxType = {}));
    (function (ESPropType) {
        ESPropType[ESPropType["OnlyLabel"] = 0] = "OnlyLabel";
        ESPropType[ESPropType["IconAndLabel"] = 1] = "IconAndLabel";
    })(exports.ESPropType || (exports.ESPropType = {}));
    (function (EGuideType) {
        EGuideType[EGuideType["Rect"] = 0] = "Rect";
        EGuideType[EGuideType["Circle"] = 1] = "Circle";
    })(exports.EGuideType || (exports.EGuideType = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    var Vector2 = Laya.Vector2;
    var Vector3 = Laya.Vector3;
    var MeshSprite3D = Laya.MeshSprite3D;
    class GameHelp {
        static AddChild(parent, childView) {
            if (parent) {
                parent.addChild(childView);
            }
        }
        static RemoveChild(parent, childView) {
            if (parent) {
                parent.removeChild(childView);
            }
        }
        static ClearChild(parent) {
            if (parent) {
                while (parent.numChildren > 0) {
                    parent.removeChildAt(0);
                }
            }
        }
        static get StageMousePos() { return new Vector2(Laya.stage.mouseX, Laya.stage.mouseY); }
        static get StageWidth() { return Laya.stage.width; }
        static get StageHeight() { return Laya.stage.height; }
        static get CalViewDeviceRatioW() { return this.StageWidth / this.DesignWidth; }
        static get CalViewDeviceRatioH() { return this.StageHeight / this.DesignHeight; }
        static get BrowserAndGameConfigRatioW() { return Laya.Browser.width / this.DesignWidth; }
        static get BrowserAndGameConfigRatioH() { return Laya.Browser.height / this.DesignHeight; }
        static get ScreenCenter() { return new Vector2(this.StageWidth / 2, this.StageHeight / 2); }
        static get IsHor() { return this.StageWidth > this.StageHeight; }
        static get IsHorDesgin() { return this.DesignWidth > this.DesignHeight; }
        static IsInStageRange(x, y) {
            if (x > 0 && x < this.StageWidth && y > 0 && y < this.StageHeight)
                return true;
            return false;
        }
        static CalTwoObjDisV2(s_pos, e_pos, d) {
            return Math.abs(s_pos.x - e_pos.x) < d && Math.abs(s_pos.z - e_pos.z) < d;
        }
        static CalTwoObjDisV3(s_pos, e_pos, d) {
            return Vector3.distance(s_pos, e_pos) < d;
        }
        static RandomIsTigger(num) {
            let rand = Math.random();
            if (rand * 100 < num)
                return true;
            return false;
        }
        static ShowTrueOrFalseText(isTrue) {
            if (isTrue)
                return "是";
            else
                return "否";
        }
        static GetMesh(obj) {
            let mesh = null;
            for (let i = 0; i < obj.numChildren; i++) {
                let child = obj.getChildAt(i);
                if (child instanceof MeshSprite3D) {
                    mesh = child;
                }
                if (mesh == null)
                    mesh = this.GetMesh(child);
                if (mesh != null)
                    break;
            }
            return mesh;
        }
        static GetChildByName(obj, name) {
            let res;
            for (let i = 0; i < obj.numChildren; i++) {
                let child = obj.getChildAt(i);
                if (child.name == name) {
                    res = child;
                }
                if (res == null)
                    res = this.GetChildByName(child, name);
                if (res != null)
                    break;
            }
            return res;
        }
        static GetChildByNameContains(obj, name) {
            let res;
            for (let i = 0; i < obj.numChildren; i++) {
                let child = obj.getChildAt(i);
                if (StringUtil.Contains(child.name, name)) {
                    res = child;
                }
                if (res == null)
                    res = this.GetChildByName(child, name);
                if (res != null)
                    break;
            }
            return res;
        }
        static GetAllChildByName(obj, name) {
            let res = [];
            for (let i = 0; i < obj.numChildren; i++) {
                let child = obj.getChildAt(i);
                if (child.name == name) {
                    ListUtil.Add(res, child);
                }
                if (res == null) {
                    ListUtil.SafeAddRange(res, this.GetAllChildByName(child, name));
                }
            }
            return res;
        }
        static GetAllChildByNameContains(obj, name) {
            let res = [];
            for (let i = 0; i < obj.numChildren; i++) {
                let child = obj.getChildAt(i);
                if (StringUtil.Contains(child.name, name)) {
                    ListUtil.Add(res, child);
                }
                if (res == null) {
                    ListUtil.SafeAddRange(res, this.GetAllChildByName(child, name));
                }
            }
            return res;
        }
    }
    GameHelp.DesignWidth = 0;
    GameHelp.DesignHeight = 0;

    exports.GameHelp = GameHelp;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class StorageUtil {
        static SetGlobalKey(key) { this._globalKey = key; }
        static SetAccountKey(key) { this._accountKey = key; }
        static Set(key, value, g) {
            if (!this._canUsed) {
                return;
            }
            return Laya.LocalStorage.setItem(this.getFullKey(key, g), value);
        }
        static Get(key, g) {
            if (!this._canUsed) {
                return;
            }
            return Laya.LocalStorage.getItem(this.getFullKey(key, g));
        }
        static Remove(key, g) {
            if (!this._canUsed) {
                return;
            }
            Laya.LocalStorage.removeItem(this.getFullKey(key, g));
        }
        static SetNum(key, value, g) {
            this.Set(key, value.toString(), g);
        }
        static GetNum(key, g) {
            return StringUtil.ParseNum(this.Get(key, g));
        }
        static SetBool(key, value, g) {
            this.Set(key, value ? "1" : "0", g);
        }
        static GetBool(key, g) {
            return StringUtil.ParseNum(this.Get(key, g)) == 0 ? false : true;
        }
        static ClearAll() {
            if (!this._canUsed) {
                return;
            }
            Laya.LocalStorage.clear();
        }
        static getFullKey(key, g) {
            let str;
            if (g)
                str = this._globalKey + "_" + key;
            else
                str = this._globalKey + "_" + this._accountKey + "_" + key;
            return str;
        }
    }
    StorageUtil._canUsed = false;
    StorageUtil._globalKey = "";
    StorageUtil._accountKey = "";
    StorageUtil.AccountId = "AccountId";
    StorageUtil.AccountPwd = "AccountPwd";
    StorageUtil.MusicVolume = "MusicVolume";
    StorageUtil.SoundVolume = "SoundVolume";
    StorageUtil.Language = "Language";
    StorageUtil.NoticeCheck = "NoticeCheck";
    StorageUtil.NoticeTime = "NoticeTime";

    exports.StorageUtil = StorageUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AppCfg {
        static Init() {
            this.DimType = EDimension.D3;
            this.PhysicEnable = false;
            this.TestVersion = true;
            this.AppName = "meta";
            LogSys$1.IsEnable = true;
            StorageUtil.SetGlobalKey(this.AppName);
        }
    }
    AppCfg.config_ip = "127.0.0.1";
    AppCfg.res_ip = "127.0.0.1";
    AppCfg.local_server_ip = "ws://127.0.0.1:20000";
    AppCfg.remote_server_ip = "wss://cleannumber.wonderfrog.cn/websocket";
    AppCfg.res_version = "v_1_0_0";
    AppCfg.client_version = "v_1_0_0";

    exports.AppCfg = AppCfg;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DrawCallConfig {
        static init() {
        }
    }

    exports.DrawCallConfig = DrawCallConfig;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Dictionary {
        constructor() {
            this._keys = [];
            this._values = [];
            this._len = 0;
        }
        ToJsonObj() {
            const result = {};
            result.keys = this._keys;
            result.values = this._values;
            return result;
        }
        FromJsonObj(obj) {
            this._keys = obj.keys;
            this._values = obj.values;
        }
        Add(key, value) {
            let idx = this._keys.indexOf(key, 0);
            if (idx != -1) {
                this._keys[idx] = key;
                this._values[idx] = value;
                return true;
            }
            this._keys.push(key);
            this._values.push(value);
            this._len++;
            return true;
        }
        Remove(key) {
            let idx = this._keys.indexOf(key, 0);
            if (idx != -1) {
                this._keys.splice(idx, 1);
                this._values.splice(idx, 1);
                this._len--;
            }
        }
        Key(value) {
            let idx = this._values.indexOf(value);
            if (idx != -1)
                return this._keys[idx];
            return null;
        }
        Value(key) {
            let idx = this._keys.indexOf(key);
            if (idx != -1)
                return this._values[idx];
            return null;
        }
        TryGetValueListByCondition(value) {
            let list = [];
            for (let v of this._values) {
                if (value(v))
                    list[list.length] = v;
            }
            return list;
        }
        TryGetAnyByCondition(value) {
            let dic = {};
            for (let k of this._keys) {
                let idx = this._keys.indexOf(k, 0);
                if (value(this._values[idx]))
                    dic[k] = this._values[idx];
            }
            return dic;
        }
        TryGetKeyListByCondition(func) {
            let list = [];
            for (let k of this._keys) {
                if (func(k))
                    list[list.length] = k;
            }
            return list;
        }
        HasKey(key) {
            let ks = this._keys;
            for (let i = 0; i < ks.length; i++) {
                if (ks[i] == key)
                    return true;
            }
            return false;
        }
        SortByKey() {
            for (let i = this._keys.length - 1; i >= 0; i--) {
                for (let j = this._keys.length - 1; j >= 0; j--) {
                    if (Number(this._keys[i]) > Number(this._keys[i + 1])) {
                        let tmpK = this._keys[i];
                        let tmpV = this._values[i];
                        this._keys[i] = this._keys[i + 1];
                        this._values[i] = this._values[i + 1];
                        this._keys[i + 1] = tmpK;
                        this._values[i + 1] = tmpV;
                    }
                }
            }
            return true;
        }
        GetLength() { return this._len; }
        GetValueByIndex(idx) {
            if (idx < 0 || idx > +this._len)
                return;
            let v = this._values[idx];
            return v;
        }
        GetKeyByIndex(idx) {
            if (idx < 0 || idx > +this._len)
                return;
            let k = this._keys[idx];
            return k;
        }
        Values() { return this._values; }
        Keys() { return this._keys; }
        Clear() {
            while (this._keys.length > 0)
                this._keys.pop();
            while (this._values.length > 0) {
                let vt = this._values.pop();
                vt = null;
            }
            this._keys.length = 0;
            this._values.length = 0;
            this._len = 0;
        }
        Foreach(func) {
            let idx = -1;
            for (let k of this._keys) {
                idx = this._keys.indexOf(k);
                if (idx != -1) {
                    func(k, this._values[idx]);
                }
            }
        }
    }

    exports.Dictionary = Dictionary;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EventManager {
        constructor() {
            this._handles = null;
            this._hasInit = false;
        }
        Init() {
            if (this._hasInit)
                return false;
            this._hasInit = true;
            if (this._handles != null) {
                this._handles.Foreach((k, v) => {
                    return true;
                });
            }
            this._handles = new Dictionary();
            return true;
        }
        Clear() {
        }
        emit(eventId, data) {
            if (!this._hasInit)
                return;
            if (data) {
                data.eventName = eventId;
            }
            if (this._handles.HasKey(eventId) && this._handles != null) {
                this._handles.Value(eventId).forEach((i) => {
                    i.Invoke(data);
                });
            }
        }
        on(eventName, target, callback) {
            this._handles.Add(eventName, this._handles.Value(eventName) || []);
            let item = Callback.Create(target, callback);
            ListUtil.Add(this._handles.Value(eventName), item);
        }
        off(eventName, target, callback) {
            if (this._handles.HasKey(eventName) && this._handles.Value(eventName) != null) {
                ListUtil.Copy(this._handles.Value(eventName)).forEach((i) => {
                    if (i.Caller == target && i.CallBack == callback) {
                        ListUtil.Remove(this._handles.Value(eventName), i);
                        if (this._handles.Value(eventName).length == 0)
                            this._handles.Remove(eventName);
                    }
                });
            }
        }
    }

    exports.EventManager = EventManager;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LayerBase extends Laya.Sprite {
        constructor(layerid = 0, name) {
            super();
            this._layerid = 0;
            this.init(layerid, name);
        }
        get LayerID() { return this._layerid; }
        init(layerid = 0, name) {
            this._layerid = layerid;
            this.mouseEnabled = true;
            this.mouseThrough = true;
            this.name = name;
            this.zOrder = layerid;
        }
    }

    exports.LayerBase = LayerBase;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PointUtil {
        static InterPolate(startP, endP, pos) {
            return new Laya.Point(startP.x + (endP.x - startP.x) * pos, startP.y + (endP.y - startP.y) * pos);
        }
        static Distance(p1, p2) {
            return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) +
                (p1.y - p2.y) * (p1.y - p2.y));
        }
        static DistanceByAxis(x1, y1, x2, y2) {
            return Math.sqrt((x1 - x2) * (x1 - x2) +
                (y1 - y2) * (y1 - y2));
        }
        static GetDirection(p1, p2) {
            if (p1.x <= p2.x)
                return 1;
            if (p1.x > p2.x)
                return -1;
            return 1;
        }
        static localToGlobal(tar, moveRightNow) {
            let p = new Laya.Point(tar.x, tar.y);
            let parent = tar.parent;
            while (parent && !(parent instanceof LayerBase)) {
                p.x += parent.x - parent.pivotX - (parent.scrollRect ? parent.scrollRect.x : 0);
                p.y += parent.y - parent.pivotY - (parent.scrollRect ? parent.scrollRect.y : 0);
                parent = parent.parent;
            }
            if (moveRightNow)
                tar.pos(p.x, p.y);
            return p;
        }
        static ParentToParent(tar, newParent, moveRightNow) {
            let p = PointUtil.localToGlobal(tar);
            let tmpP = new Laya.Point;
            let parent = newParent;
            while (parent && !(parent instanceof LayerBase)) {
                tmpP.x += parent.x;
                tmpP.y += parent.y;
                parent = parent.parent;
            }
            p.x = p.x - tmpP.x;
            p.y = p.y - tmpP.y;
            if (moveRightNow)
                tar.pos(p.x, p.y);
            return p;
        }
    }

    exports.PointUtil = PointUtil;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class EventID {
	}
	EventID.WEBSOCKET_MESSAGE = "WEBSOCKET_MESSAGE";
	EventID.WEBSOCKET_CLOSED = "WEBSOCKET_CLOSED";
	EventID.WEBSOCKET_ERROR = "WEBSOCKET_ERROR";
	EventID.WEBSOCKET_SELECTSERVER = "WEBSOCKET_SELECTSERVER";
	EventID.WebClientRegistRsp = "WebClientRegistRsp";
	EventID.WebClientLoginRsp = "WebClientLoginRsp";
	EventID.KickNtf = "KickNtf";
	EventID.PlayerKickTheLineNtf = "PlayerKickTheLineNtf";
	EventID.PlayerPurseChangeNtf = "PlayerPurseChangeNtf";
	EventID.PlayerPropChangeNtf = "PlayerPropChangeNtf";
	EventID.PlayerChangeNameRsp = "PlayerChangeNameRsp";
	EventID.PlayerOfflineRsp = "PlayerOfflineRsp";
	EventID.PlayerChangeHeadRsp = "PlayerChangeHeadRsp";
	EventID.PlayerGetHeadNtf = "PlayerGetHeadNtf";
	EventID.UploadHeadImageRsp = "UploadHeadImageRsp";
	EventID.GetPlayerTagsRsp = "GetPlayerTagsRsp";
	EventID.ChangePlayerTagRsp = "ChangePlayerTagRsp";
	EventID.GetPlayerInfoRsp = "GetPlayerInfoRsp";
	EventID.NoticeInfoRsp = "NoticeInfoRsp";
	EventID.NoticeSetShowRsp = "NoticeSetShowRsp";
	EventID.GetNoticeRsp = "GetNoticeRsp";
	EventID.ScrollNoticeNtf = "ScrollNoticeNtf";
	EventID.MailNewsNtf = "MailNewsNtf";
	EventID.MailGetMailListRsp = "MailGetMailListRsp";
	EventID.MailGetMailDetailRsp = "MailGetMailDetailRsp";
	EventID.MailGetMailRewardRsp = "MailGetMailRewardRsp";
	EventID.EnterWorldRsp = "EnterWorldRsp";
	EventID.EnterWorldNtf = "EnterWorldNtf";
	EventID.ExitWorldRsp = "ExitWorldRsp";
	EventID.ExitWorldNtf = "ExitWorldNtf";
	EventID.GetWorldChatListRsp = "GetWorldChatListRsp";
	EventID.SendWorldChatRsp = "SendWorldChatRsp";
	EventID.SendWorldChatNtf = "SendWorldChatNtf";
	EventID.UpdateSyncInfoRsp = "UpdateSyncInfoRsp";
	EventID.UpdateSyncInfoNtf = "UpdateSyncInfoNtf";
	EventID.GetWorldPlayerListRsp = "GetWorldPlayerListRsp";
	EventID.UpdateJumpInfoRsp = "UpdateJumpInfoRsp";
	EventID.UpdateJumpInfoNtf = "UpdateJumpInfoNtf";
	EventID.GetFocusListRsp = "GetFocusListRsp";
	EventID.GetFinesListRsp = "GetFinesListRsp";
	EventID.RandMatchFrindRsp = "RandMatchFrindRsp";
	EventID.CancelFocusRsp = "CancelFocusRsp";
	EventID.FocusPlayerRsp = "FocusPlayerRsp";
	EventID.GetPlayerPartsRsp = "GetPlayerPartsRsp";
	EventID.PlayerCreateRsp = "PlayerCreateRsp";
	EventID.PlayerSetActionRsp = "PlayerSetActionRsp";
	EventID.PlayerSetActionNtf = "PlayerSetActionNtf";
	EventID.PlayerSetMoodRsp = "PlayerSetMoodRsp";
	EventID.PlayerSetMoodNtf = "PlayerSetMoodNtf";
	EventID.OnChangeLanguage = "OnChangeLanguage";
	EventID.OnClickAddTagBtn = "OnClickAddTagBtn";
	EventID.OnClickRemoveTagBtn = "OnClickRemoveTagBtn";
	EventID.RefreshRedPoint = "RefreshRedPoint";
	EventID.ClickTwoPart = "ClickTwoPart";
	EventID.ClickThreePart = "ClickThreePart";
	EventID.ClickPartItem = "ClickPartItem";
	EventID.OnChoiceAction = "OnChoiceAction";
	EventID.OnChoiceMood = "OnChoiceMood";
	EventID.OnChoiceNotice = "OnChoiceNotice";

	exports.EventID = EventID;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class ResItem {
        constructor(url, type, isKeepMemory = true) {
            this._url = url;
            this._type = type;
            this._isKeepMemory = isKeepMemory;
        }
        get Url() { return this._url; }
        get Type() { return this._type; }
        get IsKeepMemory() { return this._isKeepMemory; }
        Clear() {
            this._url = null;
            this._type = null;
            this._isKeepMemory = false;
        }
    }

    exports.ResItem = ResItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ResItemGroup {
        constructor() {
            this.Items = new Array();
        }
        Add(url, type, isKeepMemory = false) {
            let idx = this.Items.findIndex((value, index, items) => {
                return value.Url == url;
            });
            if (idx == -1) {
                let item = new ResItem(url, type, isKeepMemory);
                this.Items.push(item);
            }
            return this;
        }
        Clear() {
            if (this.Items != null) {
                this.Items.forEach(item => {
                    item.Clear();
                });
                this.Items = [];
            }
        }
        addSkel(url) {
            this.Add(`${url}.atlas`, Laya.Loader.TEXT);
            this.Add(`${url}.png`, Laya.Loader.IMAGE);
            this.Add(`${url}.skel`, Laya.Loader.BUFFER);
        }
    }

    exports.ResItemGroup = ResItemGroup;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function regOBJ(key, obj) {
        window[key] = obj;
    }

    exports.regOBJ = regOBJ;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TextureAtlasPage {
    }
    class TextureAtlasReader {
        constructor(text) {
            this.index = 0;
            this.index = 0;
            this.lines = text.split(/\r\n|\r|\n/);
        }
        readLine() {
            if (this.index >= this.lines.length)
                return null;
            return this.lines[this.index++];
        }
        readValue() {
            let line = this.readLine();
            let colon = line.indexOf(":");
            if (colon == -1)
                throw new Error("Invalid line: " + line);
            return line.substring(colon + 1).trim();
        }
        readTuple(tuple) {
            let line = this.readLine();
            let colon = line.indexOf(":");
            if (colon == -1)
                throw new Error("Invalid line: " + line);
            let i = 0, lastMatch = colon + 1;
            for (; i < 3; i++) {
                let comma = line.indexOf(",", lastMatch);
                if (comma == -1)
                    break;
                tuple[i] = line.substr(lastMatch, comma - lastMatch).trim();
                lastMatch = comma + 1;
            }
            tuple[i] = line.substring(lastMatch).trim();
            return i + 1;
        }
    }
    class AtlasParser {
        static Start(atlasText, out = null) {
            let reader = new TextureAtlasReader(atlasText);
            let tuple = new Array(4);
            let page = null;
            let regList = [];
            while (true) {
                let line = reader.readLine();
                if (line == null)
                    break;
                line = line.trim();
                if (line.length == 0)
                    page = null;
                else if (!page) {
                    page = new TextureAtlasPage();
                    page.name = line;
                    if (reader.readTuple(tuple) == 2) {
                        page.width = parseInt(tuple[0]);
                        page.height = parseInt(tuple[1]);
                        if (out) {
                            out.w = page.width;
                            out.h = page.height;
                        }
                        reader.readTuple(tuple);
                    }
                    reader.readTuple(tuple);
                    let direction = reader.readValue();
                }
                else {
                    let rotateValue = reader.readValue();
                    reader.readTuple(tuple);
                    let x = parseInt(tuple[0]);
                    let y = parseInt(tuple[1]);
                    reader.readTuple(tuple);
                    let width = parseInt(tuple[0]);
                    let height = parseInt(tuple[1]);
                    if (reader.readTuple(tuple) == 4) {
                        if (reader.readTuple(tuple) == 4) {
                            reader.readTuple(tuple);
                        }
                    }
                    reader.readTuple(tuple);
                    let index = parseInt(reader.readValue());
                    let reg = {};
                    reg.name = line;
                    reg.x = x;
                    reg.y = y;
                    reg.width = width;
                    reg.height = height;
                    regList.push(reg);
                }
            }
            return regList;
        }
    }
    class SplitFrameNode {
        draw() {
            let texData = this.sourceBitmap.getPixels(this.source.x, this.source.y, this.source.width, this.source.height);
            this.targetBitmap.setSubPixels(this.target.x, this.target.y, this.target.width, this.target.height, texData);
            console.log(Laya.timer.currTimer + " draw >>>>", this.source.name, this.target.name);
        }
    }
    class SplitFrame {
        constructor() {
            this.delayTime = 2;
            this._list = [];
            Laya.timer.frameLoop(this.delayTime, this, this.onLoop);
        }
        onLoop() {
            if (this._list.length > 0) {
                let cell = this._list.shift();
                cell.draw();
            }
        }
        push(sourceBitmap, source, targetBitmap, target) {
            let _cell = new SplitFrameNode();
            _cell.source = source;
            _cell.target = target;
            _cell.sourceBitmap = sourceBitmap;
            _cell.targetBitmap = targetBitmap;
            this._list.push(_cell);
        }
    }
    class SubBitmapUtils {
        static Draw(sourceBitmap, source, targetBitmap, target) {
            if (sourceBitmap) {
                if (!this._splitFrame) {
                    this._splitFrame = new SplitFrame();
                }
                let texData = sourceBitmap.getPixels(source.x, source.y, source.width, source.height);
                targetBitmap.setSubPixels(target.x, target.y, target.width, target.height, texData);
            }
            else {
                console.log("sourceBitmap is null!!!");
            }
        }
        static getTarget(asset, key, tname) {
            let atlas = asset.get(`${key}.atlas`);
            let regions = atlas.regions;
            let target;
            for (let i = 0; i < regions.length; i++) {
                let cell = regions[i];
                if (cell.name == tname) {
                    target = cell;
                    break;
                }
            }
            if (!target) {
                let err = "regions[" + tname + "]not found!";
                throw Error(err);
            }
            return target;
        }
        static Build(asset, key, sourceBitmap, sourceList, sname, tname) {
            let targetBitmap = asset.get(`${key}.png`).bitmap;
            let target = this.getTarget(asset, key, tname);
            let source;
            for (let i = 0; i < sourceList.length; i++) {
                let cell = sourceList[i];
                if (cell.name == sname) {
                    source = cell;
                    break;
                }
            }
            if (!source) {
                let err = "source[" + sname + "]not found!";
                throw Error(err);
            }
            this.Draw(sourceBitmap, source, targetBitmap, target);
        }
        static ClearPart(asset, key, tname) {
            let targetBitmap = asset.get(`${key}.png`).bitmap;
            let target = this.getTarget(asset, key, tname);
            targetBitmap.setSubPixels(target.x, target.y, target.width, target.height, new Uint8Array(target.width * target.height * 4));
        }
        static Fill(asset, key, part, pixel) {
            let targetBitmap = asset.get(`${key}.png`).bitmap;
            let target = this.getTarget(asset, key, part);
            targetBitmap.setSubPixels(target.x, target.y, target.width, target.height, pixel);
        }
    }
    class SpineSwitchSkin {
        constructor() {
        }
        load(url, complete) {
            this._complete = complete;
            this.atlas = url;
            Laya.loader.load([
                { url: this.atlas, type: Laya.Loader.TEXT }
            ], new Laya.Handler(this, this.onComplete));
        }
        onComplete() {
            let filelist = AtlasParser.Start(Laya.Loader.getRes(this.atlas));
            this.fileList = filelist;
            if (this._complete) {
                this._complete.run();
            }
        }
    }

    exports.AtlasParser = AtlasParser;
    exports.SpineSwitchSkin = SpineSwitchSkin;
    exports.SubBitmapUtils = SubBitmapUtils;
    exports.TextureAtlasReader = TextureAtlasReader;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MAssetManager extends spine.AssetManager {
        constructor(textureLoader, pathPrefix = "") {
            super(textureLoader, pathPrefix);
        }
        get mPathPrefix() {
            return this['pathPrefix'];
        }
        get mAssets() {
            return this['assets'];
        }
        loadTextureAtlas(path) {
            path = this.mPathPrefix + path;
            let atlasData = Laya.loader.getRes(path);
            if (!atlasData) {
                throw new Error("atlasData cannot be null.");
            }
            let reader = new TextureAtlasReader(atlasData);
            reader.readLine();
            reader.readLine();
            let tuple = new Array(4);
            if (reader.readTuple(tuple) == 2) {
                let atlas = new spine.TextureAtlas(atlasData, (path) => {
                    return this.loadTextureV(path, parseInt(tuple[0]), parseInt(tuple[1]));
                });
                this.mAssets[path] = atlas;
            }
        }
        loadTextureV(path, w, h) {
            path = this.mPathPrefix + path;
            let tex = new Laya.Texture();
            tex.bitmap = new Laya.Texture2D(w, h, Laya.TextureFormat.R8G8B8A8, false);
            this._newTex = tex;
            let ret = new Uint8Array(w * h * 4);
            tex.bitmap.setPixels(ret);
            let texture = this['textureLoader'](tex);
            this.mAssets[path] = texture;
            return texture;
        }
    }
    class SpineTemplet_3_8_v1 extends Laya.SpineTempletBase {
        constructor() {
            super();
            this.used = false;
            this._sourceUrlList = [];
        }
        loadAni(jsonOrSkelUrl) {
            this.mUrl = jsonOrSkelUrl;
            let splitIndex = jsonOrSkelUrl.lastIndexOf("/") + 1;
            let clientId = jsonOrSkelUrl.slice(0, splitIndex);
            jsonOrSkelUrl = jsonOrSkelUrl.slice(splitIndex);
            let atlasUrl = jsonOrSkelUrl.replace(".json", ".atlas").replace(".skel", ".atlas");
            this._textureDic.root = clientId;
            this.clientId = clientId;
            this.atlasUrl = atlasUrl;
            this.jsonOrSkelUrl = jsonOrSkelUrl;
            this.fileName = jsonOrSkelUrl.split(".")[0];
            this.assetManager = new MAssetManager(this._textureLoader.bind(this), clientId);
            this.assetManager.loadTextureAtlas(atlasUrl);
            Laya.timer.frameOnce(1, this, this.loop);
        }
        _textureLoader(tex) {
            let tTexture = this._textureDic[this.fileName + ".png"] = new Laya.SpineGLTexture(tex.bitmap);
            return tTexture;
        }
        loop() {
            if (this.assetManager.isLoadingComplete()) {
                this.parseSpineAni();
                return;
            }
            if (this.assetManager.hasErrors()) {
                this.event(Laya.Event.ERROR, "load failed:" + this.assetManager.getErrors());
                return;
            }
            Laya.timer.frameOnce(1, this, this.loop);
        }
        parseSpineAni() {
            if (this.isDestroyed) {
                this.destroy();
                return;
            }
            let atlas = this.assetManager.get(this.atlasUrl);
            let atlasLoader = new spine.AtlasAttachmentLoader(atlas);
            this.skeletonBinary = new spine.SkeletonBinary(atlasLoader);
            let buffer = Laya.loader.getRes(this.clientId + this.jsonOrSkelUrl);
            this.skeletonData = this.skeletonBinary.readSkeletonData(new Uint8Array(buffer));
            this.event(Laya.Event.COMPLETE, this);
        }
        buildArmature() {
            return super.buildArmature();
        }
        getAniNameByIndex(index) {
            return super.getAniNameByIndex(index);
        }
        getSkinIndexByName(skinName) {
            return super.getSkinIndexByName(skinName);
        }
        destroy() {
            super.destroy();
        }
        clearPart(part) {
            SubBitmapUtils.ClearPart(this.assetManager, this.fileName, part);
        }
        onLoadComplete(fileList, sourceUrl, part, callBack) {
            let index = this._sourceUrlList.indexOf(sourceUrl);
            if (index != -1) {
                this._sourceUrlList.splice(index, 1);
            }
            let sourceBitmap = Laya.Loader.getRes(sourceUrl);
            SubBitmapUtils.Build(this.assetManager, this.fileName, sourceBitmap, fileList, part, part);
            if (callBack) {
                callBack.run();
            }
        }
        setSkin(fileList, sourceUrl, part, callBack = null) {
            let sourceBitmap = Laya.Loader.getRes(sourceUrl);
            this._sourceUrlList.push(sourceUrl);
            if (!sourceBitmap) {
                Laya.loader.load(sourceUrl, new Laya.Handler(this, this.onLoadComplete, [fileList, sourceUrl, part, callBack]), null, Laya.Loader.IMAGE);
            }
            else {
                this.onLoadComplete(fileList, sourceUrl, part, callBack);
            }
        }
        get tex() {
            return this._textureDic[this.fileName + ".png"];
        }
        set tex(v) {
            this._textureDic[this.fileName + ".png"] = v;
        }
        fillSkin(pixel, part) {
            SubBitmapUtils.Fill(this.assetManager, this.fileName, part, pixel);
        }
        fillRect(pixel, x, y, w, h) {
            let targetBitmap = this.assetManager.get(`${this.fileName}.png`).bitmap;
            targetBitmap.setSubPixels(x, y, w, h, pixel);
        }
        onLoadUrlComplete(sourceUrl, part, callBack) {
            let _tex = Laya.loader.getRes(sourceUrl);
            if (_tex) {
                this.fillSkin(_tex.getPixels(0, 0, _tex.width, _tex.height), part);
            }
            if (callBack) {
                callBack.run();
            }
        }
        fillSkinByUrl(sourceUrl, part, callBack) {
            let sourceBitmap = Laya.Loader.getRes(sourceUrl);
            if (!sourceBitmap) {
                Laya.loader.load(sourceUrl, new Laya.Handler(this, this.onLoadUrlComplete, [sourceUrl, part, callBack]), null, Laya.Loader.IMAGE);
            }
            else {
                this.onLoadUrlComplete(sourceUrl, part, callBack);
            }
        }
    }

    exports.SpineTemplet_3_8_v1 = SpineTemplet_3_8_v1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ESpineTemplateType) {
        ESpineTemplateType[ESpineTemplateType["Normal"] = 1] = "Normal";
        ESpineTemplateType[ESpineTemplateType["Ver_3_8"] = 2] = "Ver_3_8";
    })(exports.ESpineTemplateType || (exports.ESpineTemplateType = {}));
    let GID = 0;
    class TemplateCache {
        constructor() {
            this.time_str = "";
        }
        set used(v) {
            this._used = v;
        }
        get used() {
            return this._used;
        }
        load(url, that, func, _clsType) {
            this.url = url;
            this.that = that;
            this.func = func;
            let _templet;
            switch (_clsType) {
                case exports.ESpineTemplateType.Normal:
                    _templet = new Laya.SpineTemplet(Laya.SpineVersion.v3_8);
                    break;
                case exports.ESpineTemplateType.Ver_3_8:
                    _templet = new SpineTemplet_3_8_v1();
                    break;
            }
            this.temp = _templet;
            _templet.once(Laya.Event.COMPLETE, this, this.onTempCallater);
            _templet.loadAni(url);
        }
        onTempCallater() {
            this.used = true;
            let l1 = SpineTemplateCache.Ins.tempList;
            this.skel = this.temp.buildArmature();
            this.skel.name = GID.toString();
            debug && (this.time_str = TimeUtil.serverTimeOutStr + " ");
            this.guid = GID;
            GID++;
            l1.push(this);
            LogSys.Warn("new..." + this.url + " now list len is " + l1.length + " guid:" + this.guid);
            DebugUtil.drawCross(this.skel, 0, 0, 30, "#ff00ff");
            this.func.call(this.that, this);
        }
        toString() {
            return `guid ${this.guid} used:${this.used ? "true " : "false"} ${this.url}  ${this.time_str || ""} skel name is [${this.skel.name}]`;
        }
        destroy() {
            this.skel.stop();
            this.skel.destroy();
            this.temp.destroy();
        }
    }
    class SpineTemplateCache {
        constructor() {
            this.tempList = [];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new SpineTemplateCache();
            }
            return this._ins;
        }
        onLaterTemp(that, func, cell) {
            LogSys.Warn("SpineTemplateCache use cache len:" + this.tempList.length + " url is " + cell.url + " guid:" + cell.guid);
            cell.used = true;
            func.call(that, cell);
        }
        getTemp(url, that, func, _cls) {
            for (let i = 0; i < this.tempList.length; i++) {
                let cell = this.tempList[i];
                if (!cell.skel) {
                    LogSys.Error("check: " + cell.url);
                }
                if (cell.skel && cell.url == url && cell.used == false) {
                    this.onLaterTemp(that, func, cell);
                    return;
                }
            }
            let item = new TemplateCache();
            item.load(url, that, func, _cls);
        }
        free(_skel) {
            for (let i = 0; i < this.tempList.length; i++) {
                let cell = this.tempList[i];
                if (_skel == cell.skel) {
                    if (cell.used == false) {
                        LogSys.Error("check it...");
                    }
                    cell.skel.removeSelf();
                    cell.used = false;
                    LogSys.Warn("SpineTemplateCache free succeed " + cell.toString());
                    return;
                }
            }
            LogSys.Error("SpineTemplateCache not find _skel!");
        }
        GC() {
            Laya.timer.callLater(this, this.laterGC);
        }
        laterGC() {
            LogSys.Log("start GC");
            let l = [];
            let nl = [];
            for (let i = 0; i < this.tempList.length; i++) {
                let cell = this.tempList[i];
                if (!cell.used) {
                    l.push(cell);
                }
                else {
                    nl.push(cell);
                }
            }
            while (l.length > 0) {
                let cell = l.shift();
                LogSys.Warn("GC:" + cell.toString());
                cell.destroy();
            }
            this.tempList = nl;
        }
    }
    regOBJ("spineRes", SpineTemplateCache.Ins);

    exports.SpineTemplateCache = SpineTemplateCache;
    exports.TemplateCache = TemplateCache;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SmallAnimSpine {
        constructor(url, that, callBack) {
            this.useCache = GameConfig.spineCache;
            this.isLoading = false;
            this.that = that;
            this.callBack = callBack;
            this.load(url);
        }
        dispose() {
            this.isLoading = false;
            if (this.useCache) {
                if (this.skeleton) {
                    spineRes.free(this.skeleton);
                }
            }
            else {
                if (this.skeleton) {
                    this.skeleton.stop();
                    this.skeleton.destroy();
                }
                this.templet.destroy();
            }
            this.templet = null;
            this.skeleton = null;
        }
        load(url) {
            if (this.isLoading) {
                return;
            }
            this.url = url;
            this.isLoading = true;
            if (this.useCache) {
                SpineTemplateCache.Ins.getTemp(url, this, this.onLoadFinish, ESpineTemplateType.Ver_3_8);
            }
            else {
                let _templet = new SpineTemplet_3_8_v1();
                this.templet = _templet;
                _templet.once(Laya.Event.COMPLETE, this, this.onTemplateComplete);
                _templet.loadAni(url);
            }
        }
        onTemplateComplete() {
            Laya.timer.callLater(this, this.onLoadFinish);
        }
        onLoadFinish(cache) {
            let skel;
            if (cache) {
                skel = cache.skel;
                this.templet = cache.temp;
            }
            else {
                if (this.templet) {
                    skel = this.templet.buildArmature();
                }
            }
            if (!this.templet) {
                return;
            }
            this.skeleton = skel;
            if (this.that) {
                this.callBack.call(this.that, this);
                this.that = null;
                this.callBack = null;
            }
        }
        get duration() {
            if (this.skeleton) {
                return this.skeleton['_duration'];
            }
            return 0;
        }
        get currentPlayTime() {
            if (this.skeleton) {
                return this.skeleton["currentPlayTime"];
            }
            return 0;
        }
        set currentTime(v) {
            if (this.skeleton) {
                this.skeleton.currentTime = v * 1000;
            }
        }
    }

    exports.SmallAnimSpine = SmallAnimSpine;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaseAnimSpine extends Laya.EventDispatcher {
        constructor(_mSetSkin = true) {
            super();
            this.destroyed = false;
            this.file = "";
            this._needDispose = false;
            this.mSetSkin = _mSetSkin;
        }
        load(file) {
            this.file = file;
            let _resList = [];
            _resList.push({ url: `${this.file}.atlas`, type: Laya.Loader.TEXT }, { url: `${this.file}.skel`, type: Laya.Loader.BUFFER });
            _resList.push({ url: `${this.file}.png`, type: Laya.Loader.IMAGE });
            Laya.loader.load(_resList, new Laya.Handler(this, this.resComplete));
        }
        dispose() {
            this.destroyed = true;
            if (this.avatar) {
                this.avatar.dispose();
            }
            else {
                this._needDispose = true;
            }
        }
        resComplete() {
            new SmallAnimSpine(`${this.file}.skel`, this, this.fillSpine);
        }
        stop() {
            if (this.avatar && this.avatar.skeleton) {
                this.avatar.skeleton.stop();
            }
        }
        paused() {
            if (this.avatar && this.avatar.skeleton) {
                this.avatar.skeleton.paused();
            }
        }
        fillSpine(_avatar) {
            this.avatar = _avatar;
            if (this.mSetSkin) {
                let fileList = AtlasParser.Start(Laya.Loader.getRes(`${this.file}.atlas`));
                let filelist = fileList;
                for (let i = 0; i < filelist.length; i++) {
                    let reg = filelist[i];
                    this.avatar.templet.setSkin(fileList, `${this.file}.png`, reg.name);
                }
            }
            else {
                let tex = this.avatar.templet.tex;
                tex.bitmap.destroy();
                let tex1 = Laya.loader.getRes(`${this.file}.png`);
                this.avatar.templet.tex.bitmap = tex1.bitmap;
            }
            if (this._needDispose) {
                this.dispose();
                this._needDispose = false;
            }
            else {
                this.event(Laya.Event.COMPLETE);
            }
        }
        play(nameOrIndex, loop, force = true) {
            this.curIndex = nameOrIndex;
            if (this.avatar && this.avatar.skeleton) {
                this.avatar.skeleton.play(nameOrIndex, loop, force);
            }
        }
        playOnce(nameOrIndex, target, callBack, args, force = true) {
            this.curIndex = nameOrIndex;
            if (this.avatar && this.avatar.skeleton) {
                if (args && !Array.isArray(args)) {
                    LogSys.Error(`1 args type is err ` + this.avatar.url);
                }
                this.avatar.skeleton.once(Laya.Event.STOPPED, this, this.onPlayEnd, [target, callBack, args]);
                this.avatar.skeleton.play(nameOrIndex, false, force);
            }
        }
        onPlayEnd(target, callBack, args) {
            if (!this.destroyed && callBack) {
                callBack.apply(target, args);
            }
        }
        get playState() {
            if (this.avatar && this.avatar.skeleton) {
                return this.avatar.skeleton.playState;
            }
            return Laya.SpineSkeleton.stopped;
        }
        get container() {
            if (this.avatar) {
                return this.avatar.skeleton;
            }
        }
        get animNum() {
            return this.avatar.skeleton.getAnimNum();
        }
        get isPlaying() {
            if (this.avatar && this.avatar.skeleton) {
                return this.avatar.skeleton.playState == Laya.SpineSkeleton.playing;
            }
        }
    }

    exports.BaseAnimSpine = BaseAnimSpine;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SimpleEffect extends Laya.EventDispatcher {
        constructor(container, url, offsetX = 0, offsetY = 0, speed = 1.0, hideDispose = false) {
            super();
            this.name = "";
            this.isLoaded = false;
            this._loop = false;
            this.curAnim = 0;
            this.needPlay = false;
            this.offsetX = 0;
            this.offsetY = 0;
            this.speed = 1;
            this.anim = new BaseAnimSpine(false);
            this.mUrl = url;
            this.container = container;
            this.offsetX = offsetX;
            this.offsetY = offsetY;
            this.speed = speed;
            this._hideDispose = hideDispose;
            this.anim.load(url);
            this.anim.once(Laya.Event.COMPLETE, this, this.onInit);
            this.container.on(Laya.Event.UNDISPLAY, this, this.onUndisplay);
        }
        onUndisplay() {
            if (this._hideDispose) {
                this.dispose();
            }
            else {
                this.stop();
            }
        }
        set autoPlay(v) {
            this.needPlay = v;
        }
        dispose() {
            this.remove();
            this.anim.dispose();
        }
        remove() {
            if (this.anim.container) {
                this.anim.container.removeSelf();
            }
        }
        onInit() {
            this.startAdd();
            this.anim.container.x = this.offsetX;
            this.anim.container.y = this.offsetY;
            this.anim.avatar.skeleton.playbackRate(this.speed);
            this.isLoaded = true;
            if (this.needPlay) {
                this.play(this.curAnim, this._loop, this.target, this.callBack, this.args);
                this.needPlay = false;
            }
            this.event(Laya.Event.COMPLETE);
        }
        play(index = 0, loop = false, target, callBack = null, args, force = false) {
            this.needPlay = true;
            this.target = target;
            this.callBack = callBack;
            this.args = args;
            this.addtoStage();
            this._loop = loop;
            this.curAnim = index;
            if (loop) {
                this.anim.play(index, loop, force);
            }
            else {
                this.anim.playOnce(index, target, callBack, args, force);
            }
        }
        playEndDisplse(index = 0) {
            this.play(index, false, this, this.dispose);
            this.autoPlay = true;
        }
        addtoStage() {
            if (this.anim.container && !this.anim.container.parent) {
                this.startAdd();
            }
        }
        startAdd() {
            if (!DrawCallConfig.disable_spine) {
                this.container.addChild(this.anim.container);
            }
        }
        stop() {
            if (this.anim.container) {
                this.anim.container.removeSelf();
            }
            this.anim.stop();
            this.needPlay = false;
        }
    }

    exports.SimpleEffect = SimpleEffect;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpineBaseClick extends Laya.Sprite {
        ShowEffect(x = Laya.stage.mouseX, y = Laya.stage.mouseY) {
        }
    }
    class SpineClick extends SpineBaseClick {
        constructor() {
            super();
            this._animList = [];
            this.url = "o/spine/click/click";
            this.curTimer = 0;
            this._resGroup = new ResItemGroup();
            this._resGroup.addSkel(this.url);
            E.ResMgr.LoadGroup(this._resGroup, Callback.Create(this, this.onLoadComplete), null);
        }
        onLoadComplete() {
        }
        getCanUse() {
            for (let i = 0; i < this._animList.length; i++) {
                let cell = this._animList[i];
                if (!cell.anim.container.displayedInStage) {
                    return cell;
                }
            }
        }
        ShowEffect(x = Laya.stage.mouseX, y = Laya.stage.mouseY) {
            if (Laya.timer.currTimer - this.curTimer <= 500) {
                LogSys.Log("勿多点! " + this._animList.length);
                return;
            }
            this.curTimer = Laya.timer.currTimer;
            let cell = this.getCanUse();
            if (cell) {
                cell.play(0, false, this, this.playEnd2, [cell]);
                cell.anim.container.pos(x, y);
            }
            else {
                let _aniSpine = new SimpleEffect(this, this.url, x, y);
                _aniSpine.play(0, false, this, this.playEnd, [_aniSpine]);
            }
        }
        playEnd(ani) {
            this._animList.push(ani);
            ani.remove();
        }
        playEnd2(ani) {
            ani.remove();
        }
    }
    class SpineClickClickEffect extends SpineBaseClick {
        constructor() {
            super();
            this._isEnable = false;
            this.url = "o/spine/click/click";
            this._isEnable = true;
            this._resGroup = new ResItemGroup();
            this._resGroup.addSkel(this.url);
            E.ResMgr.LoadGroup(this._resGroup, Callback.Create(this, this.onLoadComplete), null);
        }
        onLoadComplete() {
            this._aniSpine = new SimpleEffect(this, this.url);
            this._aniSpine.once(Laya.Event.COMPLETE, this, this.onSpineComplete);
        }
        onSpineComplete() {
            this.refreshView();
        }
        SetEnable(b) {
            this._isEnable = b;
        }
        play() {
            if (this._aniSpine && this._aniSpine.isLoaded) {
                this._aniSpine.play(0);
            }
        }
        stop() {
            if (this._aniSpine && this._aniSpine.isLoaded) {
                this._aniSpine.stop();
            }
        }
        refreshView() {
            this.SetEnable(this._isEnable);
        }
        ShowEffect(x = Laya.stage.mouseX, y = Laya.stage.mouseY) {
            if (!this._isEnable) {
                this.stop();
                return;
            }
            this.pos(x, y);
            this.play();
        }
    }

    exports.SpineBaseClick = SpineBaseClick;
    exports.SpineClick = SpineClick;
    exports.SpineClickClickEffect = SpineClickClickEffect;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaseModel extends Laya.EventDispatcher {
        Reg(iv) {
            E.ViewMgr.Reg(iv);
        }
        updateRed() {
        }
        set isOpen(v) {
            this._isOpen = v;
        }
        get isOpen() {
            return this._isOpen;
        }
    }

    exports.BaseModel = BaseModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TimeCheckCtl {
        constructor() {
            this.curTime = 0;
            this.checkSubMs = 0;
        }
        setTime(ms, actionHandler) {
            this.checkSubMs = ms;
            this._actionHandler = actionHandler;
        }
        delayStart() {
            Laya.timer.clear(this, this.start);
            Laya.timer.once(this.checkSubMs, this, this.start);
        }
        start() {
            let sub = Laya.timer.currTimer - this.curTime;
            let _time = 0;
            let s = sub - this.checkSubMs;
            if (s < 0) {
                _time = s;
            }
            else {
                this.curTime = Laya.timer.currTimer;
            }
            this._actionHandler.runWith(_time);
        }
        dispose() {
            this._actionHandler = null;
        }
    }

    exports.TimeCheckCtl = TimeCheckCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HttpUtil {
        static err(_url, errData) {
            E.sendTrack("HttpRequest", { error: errData, val: _url });
        }
        static complete(callBack, data) {
            callBack.runWith(data);
        }
        static httpGet(url, callBack) {
            let http = new Laya.HttpRequest();
            http.once(Laya.Event.COMPLETE, this, this.complete, [callBack]);
            LogSys$1.Log(url);
            http.send(url, null, "get");
            http.once(Laya.Event.ERROR, this, this.err, [url]);
        }
        static httpPost(url, data, callBack) {
            let http = new Laya.HttpRequest();
            http.once(Laya.Event.COMPLETE, this, this.complete, [callBack]);
            LogSys$1.Log(url);
            http.send(url, data, "post");
            http.once(Laya.Event.ERROR, this, this.err, [url]);
        }
    }

    exports.HttpUtil = HttpUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (MSGID) {
        MSGID[MSGID["GmReq"] = 1000] = "GmReq";
        MSGID[MSGID["HeartbeatReq"] = 1001] = "HeartbeatReq";
        MSGID[MSGID["HeartbeatRsp"] = 1002] = "HeartbeatRsp";
        MSGID[MSGID["KickNtf"] = 1003] = "KickNtf";
        MSGID[MSGID["ErrCode"] = 1004] = "ErrCode";
        MSGID[MSGID["PlayerLevel"] = 1005] = "PlayerLevel";
        MSGID[MSGID["PlayerCurExp"] = 1006] = "PlayerCurExp";
        MSGID[MSGID["WebClientRegistReq"] = 3001] = "WebClientRegistReq";
        MSGID[MSGID["WebClientRegistRsp"] = 3002] = "WebClientRegistRsp";
        MSGID[MSGID["WebClientLoginReq"] = 3003] = "WebClientLoginReq";
        MSGID[MSGID["WebClientLoginRsp"] = 3004] = "WebClientLoginRsp";
        MSGID[MSGID["ExchangeEquipReq"] = 3005] = "ExchangeEquipReq";
        MSGID[MSGID["ExchangeEquipRevc"] = 3006] = "ExchangeEquipRevc";
        MSGID[MSGID["EquipChangeRevc"] = 3007] = "EquipChangeRevc";
        MSGID[MSGID["ActionEquipReq"] = 3008] = "ActionEquipReq";
        MSGID[MSGID["ValChanelRevc"] = 3009] = "ValChanelRevc";
        MSGID[MSGID["InitRevc"] = 3010] = "InitRevc";
        MSGID[MSGID["ChestUpLevel"] = 3011] = "ChestUpLevel";
        MSGID[MSGID["ChestInfoUpdateRevc"] = 3012] = "ChestInfoUpdateRevc";
        MSGID[MSGID["ChestUpLevelRevc"] = 3013] = "ChestUpLevelRevc";
        MSGID[MSGID["FightRevc"] = 3014] = "FightRevc";
        MSGID[MSGID["ItemDelRevc"] = 3016] = "ItemDelRevc";
        MSGID[MSGID["SellRevc"] = 3017] = "SellRevc";
        MSGID[MSGID["AdventureRevc"] = 3020] = "AdventureRevc";
        MSGID[MSGID["DebugFightValRevc"] = 3023] = "DebugFightValRevc";
        MSGID[MSGID["TaskRevc"] = 3019] = "TaskRevc";
        MSGID[MSGID["RewardRevc"] = 3025] = "RewardRevc";
        MSGID[MSGID["Adventure_Boss"] = 3028] = "Adventure_Boss";
        MSGID[MSGID["GetRideRevc"] = 3030] = "GetRideRevc";
        MSGID[MSGID["RideInfoRevc"] = 3031] = "RideInfoRevc";
        MSGID[MSGID["RideLvUpRevc"] = 3033] = "RideLvUpRevc";
        MSGID[MSGID["RideQuaRevc"] = 3035] = "RideQuaRevc";
        MSGID[MSGID["RideMissionRevc"] = 3037] = "RideMissionRevc";
        MSGID[MSGID["RideStorgeUpRevc"] = 3040] = "RideStorgeUpRevc";
        MSGID[MSGID["RideOwnerInfo"] = 3042] = "RideOwnerInfo";
        MSGID[MSGID["RideOwnerCnt"] = 3043] = "RideOwnerCnt";
        MSGID[MSGID["RideMissionListRevc"] = 3046] = "RideMissionListRevc";
        MSGID[MSGID["RideMissionDataRevc"] = 3050] = "RideMissionDataRevc";
        MSGID[MSGID["WearedWingDataRevc"] = 3052] = "WearedWingDataRevc";
        MSGID[MSGID["WingInfoRevc"] = 3054] = "WingInfoRevc";
        MSGID[MSGID["WingListRevc"] = 3041] = "WingListRevc";
        MSGID[MSGID["WingTreasureStageRevc"] = 3058] = "WingTreasureStageRevc";
        MSGID[MSGID["JjcListRevc"] = 3060] = "JjcListRevc";
        MSGID[MSGID["JjcRefreshListRevc"] = 3062] = "JjcRefreshListRevc";
        MSGID[MSGID["JjcInfo"] = 3065] = "JjcInfo";
        MSGID[MSGID["WatchPlayerInfoRevc"] = 3071] = "WatchPlayerInfoRevc";
        MSGID[MSGID["JjcRewardGainRevc"] = 3073] = "JjcRewardGainRevc";
        MSGID[MSGID["JjcBuyFightCntRevc"] = 3076] = "JjcBuyFightCntRevc";
        MSGID[MSGID["JjcMoneyUpdateRevc"] = 3077] = "JjcMoneyUpdateRevc";
        MSGID[MSGID["JjcOpenRevc"] = 3078] = "JjcOpenRevc";
        MSGID[MSGID["JjcFightLogRevc"] = 3069] = "JjcFightLogRevc";
        MSGID[MSGID["JjcRankChangeRevc"] = 3079] = "JjcRankChangeRevc";
        MSGID[MSGID["JjcFightRevc"] = 3067] = "JjcFightRevc";
        MSGID[MSGID["BuyItemResultRevc"] = 3083] = "BuyItemResultRevc";
        MSGID[MSGID["ActivityListRevc"] = 3084] = "ActivityListRevc";
        MSGID[MSGID["ActivityChangeRevc"] = 3085] = "ActivityChangeRevc";
        MSGID[MSGID["ActivityStatus"] = 3086] = "ActivityStatus";
        MSGID[MSGID["ActivityInfo"] = 3091] = "ActivityInfo";
        MSGID[MSGID["RechargeBill"] = 3095] = "RechargeBill";
        MSGID[MSGID["ReloadEquipRevc"] = 3097] = "ReloadEquipRevc";
        MSGID[MSGID["SuitEquipListRevc"] = 3098] = "SuitEquipListRevc";
        MSGID[MSGID["PopWinRevc"] = 3102] = "PopWinRevc";
        MSGID[MSGID["StyleUpdate"] = 3103] = "StyleUpdate";
        MSGID[MSGID["ShopBoughtItemsRevc"] = 3105] = "ShopBoughtItemsRevc";
        MSGID[MSGID["ItemNotEnoughCode"] = 3107] = "ItemNotEnoughCode";
        MSGID[MSGID["BoxUsedCountRevc"] = 3108] = "BoxUsedCountRevc";
        MSGID[MSGID["JjcSucceedRewardRevc"] = 3118] = "JjcSucceedRewardRevc";
        MSGID[MSGID["JjcSurplusRefreshCountRevc"] = 3119] = "JjcSurplusRefreshCountRevc";
        MSGID[MSGID["JjcWeekInfoRevc"] = 3122] = "JjcWeekInfoRevc";
        MSGID[MSGID["GymInfoRevc"] = 3109] = "GymInfoRevc";
        MSGID[MSGID["GymInviteRevc"] = 3113] = "GymInviteRevc";
        MSGID[MSGID["GymEquipInitRevc"] = 3116] = "GymEquipInitRevc";
        MSGID[MSGID["GymEquipChangeRevc"] = 3117] = "GymEquipChangeRevc";
        MSGID[MSGID["GymFacilityListRevc"] = 3123] = "GymFacilityListRevc";
        MSGID[MSGID["GymUpgradeRevc"] = 3125] = "GymUpgradeRevc";
        MSGID[MSGID["GymForgetEquipRevc"] = 3126] = "GymForgetEquipRevc";
        MSGID[MSGID["GymRoomLevel"] = 3130] = "GymRoomLevel";
        MSGID[MSGID["GymMissionListRevc"] = 3134] = "GymMissionListRevc";
        MSGID[MSGID["GymMissionUpdateRevc"] = 3135] = "GymMissionUpdateRevc";
        MSGID[MSGID["GymFacilityRefinementListRevc"] = 3131] = "GymFacilityRefinementListRevc";
        MSGID[MSGID["GymFacilityRefinementChangeRevc"] = 3133] = "GymFacilityRefinementChangeRevc";
        MSGID[MSGID["GymMapTasksRevc"] = 3180] = "GymMapTasksRevc";
        MSGID[MSGID["BlessingInit"] = 3158] = "BlessingInit";
        MSGID[MSGID["BlessingChange"] = 3159] = "BlessingChange";
        MSGID[MSGID["BlessingRes"] = 3161] = "BlessingRes";
        MSGID[MSGID["BlessingItemRemove"] = 3164] = "BlessingItemRemove";
        MSGID[MSGID["GymBondListInitRevc"] = 3170] = "GymBondListInitRevc";
        MSGID[MSGID["GymBondChangeRevc"] = 3172] = "GymBondChangeRevc";
        MSGID[MSGID["GymBondNpcChangeRevc"] = 3173] = "GymBondNpcChangeRevc";
        MSGID[MSGID["GymInvitationRevc"] = 3176] = "GymInvitationRevc";
        MSGID[MSGID["StationInit"] = 3193] = "StationInit";
        MSGID[MSGID["StationChange"] = 3194] = "StationChange";
        MSGID[MSGID["UpgradePassportSlot"] = 3197] = "UpgradePassportSlot";
        MSGID[MSGID["StationBuy"] = 3233] = "StationBuy";
        MSGID[MSGID["MissionList"] = 3201] = "MissionList";
        MSGID[MSGID["GymFacilitySummaryRevc"] = 3178] = "GymFacilitySummaryRevc";
        MSGID[MSGID["GymRoomSummaryRevc"] = 3179] = "GymRoomSummaryRevc";
        MSGID[MSGID["BlessingMaxLevelRewards"] = 3154] = "BlessingMaxLevelRewards";
        MSGID[MSGID["NewAdventureInit"] = 3203] = "NewAdventureInit";
        MSGID[MSGID["NewAdventureUpdate"] = 3205] = "NewAdventureUpdate";
        MSGID[MSGID["NewAdventureCtnUpdate"] = 3206] = "NewAdventureCtnUpdate";
        MSGID[MSGID["HandleStationLogs"] = 3220] = "HandleStationLogs";
        MSGID[MSGID["StationOtherChange"] = 3213] = "StationOtherChange";
        MSGID[MSGID["OpenStationNearBy"] = 3210] = "OpenStationNearBy";
        MSGID[MSGID["RemarkStationList"] = 3217] = "RemarkStationList";
        MSGID[MSGID["AfkInit"] = 3181] = "AfkInit";
        MSGID[MSGID["NewAdventureRewardUpdate"] = 3230] = "NewAdventureRewardUpdate";
        MSGID[MSGID["StationDaliyInfo"] = 3231] = "StationDaliyInfo";
        MSGID[MSGID["AfkUpdate"] = 3182] = "AfkUpdate";
        MSGID[MSGID["AfkFastUpdate"] = 3183] = "AfkFastUpdate";
        MSGID[MSGID["AfkInviteeUpdate"] = 3184] = "AfkInviteeUpdate";
        MSGID[MSGID["AfkPackUpdate"] = 3190] = "AfkPackUpdate";
        MSGID[MSGID["SpiritList"] = 3223] = "SpiritList";
        MSGID[MSGID["SpiritListUpdate"] = 3225] = "SpiritListUpdate";
        MSGID[MSGID["SpiritListDel"] = 3226] = "SpiritListDel";
        MSGID[MSGID["SmashInit"] = 3236] = "SmashInit";
        MSGID[MSGID["SmashEnroll"] = 3238] = "SmashEnroll";
        MSGID[MSGID["SmashUpdate"] = 3241] = "SmashUpdate";
        MSGID[MSGID["ServerNumRevc"] = 3243] = "ServerNumRevc";
        MSGID[MSGID["ServerListRevc"] = 3245] = "ServerListRevc";
        MSGID[MSGID["SelectServerIDRevc"] = 3247] = "SelectServerIDRevc";
        MSGID[MSGID["SmashStateUpdate"] = 3248] = "SmashStateUpdate";
        MSGID[MSGID["SmashFight"] = 3249] = "SmashFight";
        MSGID[MSGID["Success"] = 3250] = "Success";
        MSGID[MSGID["BlessingAutoZH_revc"] = 3251] = "BlessingAutoZH_revc";
        MSGID[MSGID["DingYueRevc"] = 3255] = "DingYueRevc";
        MSGID[MSGID["DingYueSelectRevc"] = 3257] = "DingYueSelectRevc";
        MSGID[MSGID["ConfigHashRevc"] = 3258] = "ConfigHashRevc";
        MSGID[MSGID["ReloadEquipUpdate"] = 3260] = "ReloadEquipUpdate";
        MSGID[MSGID["WeeklyReward"] = 3261] = "WeeklyReward";
        MSGID[MSGID["ServerVersion"] = 3262] = "ServerVersion";
        MSGID[MSGID["MailRed"] = 3263] = "MailRed";
        MSGID[MSGID["MailList"] = 3265] = "MailList";
        MSGID[MSGID["GymMissionRefreshUpdateRevc"] = 3266] = "GymMissionRefreshUpdateRevc";
        MSGID[MSGID["RedDotUpdateOtpRevc"] = 3267] = "RedDotUpdateOtpRevc";
        MSGID[MSGID["AdCdInit"] = 3271] = "AdCdInit";
        MSGID[MSGID["AdCdChange"] = 3272] = "AdCdChange";
        MSGID[MSGID["JjcRankDrop"] = 3274] = "JjcRankDrop";
        MSGID[MSGID["SignStatus"] = 3275] = "SignStatus";
        MSGID[MSGID["GymPack"] = 3259] = "GymPack";
        MSGID[MSGID["MonthCard"] = 3277] = "MonthCard";
        MSGID[MSGID["AllLifeCard"] = 3279] = "AllLifeCard";
        MSGID[MSGID["GemInit"] = 3281] = "GemInit";
        MSGID[MSGID["GemBuy"] = 3283] = "GemBuy";
        MSGID[MSGID["GemChange"] = 3285] = "GemChange";
        MSGID[MSGID["GemRemove"] = 3286] = "GemRemove";
        MSGID[MSGID["GemFormationBuy"] = 3289] = "GemFormationBuy";
        MSGID[MSGID["GemFormationChange"] = 3291] = "GemFormationChange";
        MSGID[MSGID["NoticeList"] = 3292] = "NoticeList";
        MSGID[MSGID["GemHandler"] = 3293] = "GemHandler";
        MSGID[MSGID["ArtifactList"] = 3294] = "ArtifactList";
        MSGID[MSGID["OpenArtifactBox"] = 3296] = "OpenArtifactBox";
        MSGID[MSGID["ArtifactUpdate"] = 3298] = "ArtifactUpdate";
        MSGID[MSGID["ArtifactLogList"] = 3300] = "ArtifactLogList";
        MSGID[MSGID["LabourShopInit"] = 3306] = "LabourShopInit";
        MSGID[MSGID["LabourShopChange"] = 3307] = "LabourShopChange";
        MSGID[MSGID["ArtifactPackList"] = 3308] = "ArtifactPackList";
        MSGID[MSGID["ArtifactPackUpdate"] = 3309] = "ArtifactPackUpdate";
        MSGID[MSGID["LabourCapsuleToys"] = 3311] = "LabourCapsuleToys";
        MSGID[MSGID["LabourTicket"] = 3312] = "LabourTicket";
        MSGID[MSGID["LabourItemRedChange"] = 3313] = "LabourItemRedChange";
        MSGID[MSGID["LabourBaodiLeft"] = 3314] = "LabourBaodiLeft";
        MSGID[MSGID["DailyReward"] = 3316] = "DailyReward";
        MSGID[MSGID["TitleInfo"] = 3344] = "TitleInfo";
        MSGID[MSGID["TitleUpdate"] = 3345] = "TitleUpdate";
        MSGID[MSGID["TitleReward"] = 3347] = "TitleReward";
        MSGID[MSGID["TitleChange"] = 3349] = "TitleChange";
        MSGID[MSGID["TitleExpire"] = 3351] = "TitleExpire";
        MSGID[MSGID["TitleStateUpdate"] = 3352] = "TitleStateUpdate";
        MSGID[MSGID["BoxAuto"] = 3318] = "BoxAuto";
        MSGID[MSGID["TitleRefresh"] = 3353] = "TitleRefresh";
        MSGID[MSGID["PeakJjcInfo"] = 3323] = "PeakJjcInfo";
        MSGID[MSGID["PeakJjcList"] = 3320] = "PeakJjcList";
        MSGID[MSGID["PeakJjcRefreshList"] = 3322] = "PeakJjcRefreshList";
        MSGID[MSGID["PeakJjcFightLog"] = 3327] = "PeakJjcFightLog";
        MSGID[MSGID["PeakJjcBuyFightCnt"] = 3334] = "PeakJjcBuyFightCnt";
        MSGID[MSGID["PeakJjcOpen"] = 3335] = "PeakJjcOpen";
        MSGID[MSGID["PeakJjcRankChange"] = 3336] = "PeakJjcRankChange";
        MSGID[MSGID["PeakJjcRewardGain"] = 3331] = "PeakJjcRewardGain";
        MSGID[MSGID["PeakJjcSucceedReward"] = 3339] = "PeakJjcSucceedReward";
        MSGID[MSGID["PeakJjcSurplusRefreshCount"] = 3340] = "PeakJjcSurplusRefreshCount";
        MSGID[MSGID["PeakJjcWeekInfo"] = 3343] = "PeakJjcWeekInfo";
        MSGID[MSGID["PeakJjcWeeklyRewardUnix"] = 3337] = "PeakJjcWeeklyRewardUnix";
        MSGID[MSGID["PeakJjcDailyRewardUnix"] = 3338] = "PeakJjcDailyRewardUnix";
        MSGID[MSGID["PeakJjcMoneyUpdate"] = 3355] = "PeakJjcMoneyUpdate";
        MSGID[MSGID["PeakJjcAvatar"] = 3357] = "PeakJjcAvatar";
        MSGID[MSGID["MountReturnPreView"] = 3360] = "MountReturnPreView";
        MSGID[MSGID["MountRefinement"] = 3362] = "MountRefinement";
        MSGID[MSGID["MountRefinementLock"] = 3364] = "MountRefinementLock";
        MSGID[MSGID["MountReturn"] = 3365] = "MountReturn";
        MSGID[MSGID["PeakJjcOpenUnix"] = 3366] = "PeakJjcOpenUnix";
        MSGID[MSGID["JjcRewardPreview"] = 3367] = "JjcRewardPreview";
        MSGID[MSGID["ChiefInit"] = 3368] = "ChiefInit";
        MSGID[MSGID["ChiefMainChange"] = 3369] = "ChiefMainChange";
        MSGID[MSGID["RecruitChief"] = 3371] = "RecruitChief";
        MSGID[MSGID["BuyMilitaryPledge"] = 3374] = "BuyMilitaryPledge";
        MSGID[MSGID["CheifFightChange"] = 3375] = "CheifFightChange";
        MSGID[MSGID["InvitationRed"] = 3383] = "InvitationRed";
        MSGID[MSGID["Invitation"] = 3385] = "Invitation";
        MSGID[MSGID["InvitationUpdate"] = 3388] = "InvitationUpdate";
        MSGID[MSGID["InvitationActivationUpdate"] = 3389] = "InvitationActivationUpdate";
        MSGID[MSGID["CheifStarUp"] = 3390] = "CheifStarUp";
        MSGID[MSGID["CheifMoraleReward"] = 3382] = "CheifMoraleReward";
        MSGID[MSGID["MountChief"] = 3391] = "MountChief";
        MSGID[MSGID["FundInit"] = 3393] = "FundInit";
        MSGID[MSGID["FundReward"] = 3396] = "FundReward";
        MSGID[MSGID["GetServerTimeMS"] = 3401] = "GetServerTimeMS";
        MSGID[MSGID["MountFeastInit"] = 3402] = "MountFeastInit";
        MSGID[MSGID["MountFeastRecords"] = 3404] = "MountFeastRecords";
        MSGID[MSGID["MountFeastSelfRecords"] = 3405] = "MountFeastSelfRecords";
        MSGID[MSGID["MountFeastNums"] = 3407] = "MountFeastNums";
        MSGID[MSGID["MountFeastTotalCntReward"] = 3409] = "MountFeastTotalCntReward";
        MSGID[MSGID["MountFeastTotalCnt"] = 3410] = "MountFeastTotalCnt";
        MSGID[MSGID["Conquest"] = 3411] = "Conquest";
        MSGID[MSGID["StarBattleInit"] = 3414] = "StarBattleInit";
        MSGID[MSGID["StarBattleKeyRecovery"] = 3416] = "StarBattleKeyRecovery";
        MSGID[MSGID["StarBattleReward"] = 3418] = "StarBattleReward";
        MSGID[MSGID["TurnWheel"] = 3420] = "TurnWheel";
        MSGID[MSGID["StarBattleEnemys"] = 3422] = "StarBattleEnemys";
        MSGID[MSGID["StarBattleFight"] = 3424] = "StarBattleFight";
        MSGID[MSGID["StarNumChange"] = 3425] = "StarNumChange";
        MSGID[MSGID["SilkBagHandler"] = 3427] = "SilkBagHandler";
        MSGID[MSGID["StarBattleLog"] = 3429] = "StarBattleLog";
        MSGID[MSGID["StarBattleRankReward"] = 3433] = "StarBattleRankReward";
        MSGID[MSGID["StarBattleRank"] = 3431] = "StarBattleRank";
        MSGID[MSGID["StarShopBuy"] = 3436] = "StarShopBuy";
        MSGID[MSGID["ActivityInit"] = 3437] = "ActivityInit";
        MSGID[MSGID["ActivityRecords"] = 3439] = "ActivityRecords";
        MSGID[MSGID["ActivitySelfRecords"] = 3440] = "ActivitySelfRecords";
        MSGID[MSGID["ActivityNums"] = 3442] = "ActivityNums";
        MSGID[MSGID["ActivityTotalCntReward"] = 3444] = "ActivityTotalCntReward";
        MSGID[MSGID["ActivityTotalCnt"] = 3445] = "ActivityTotalCnt";
        MSGID[MSGID["TeamFightInit"] = 3446] = "TeamFightInit";
        MSGID[MSGID["TeamFight"] = 3453] = "TeamFight";
        MSGID[MSGID["TeamFightRankList"] = 3447] = "TeamFightRankList";
        MSGID[MSGID["TeamFightHarmReward"] = 3449] = "TeamFightHarmReward";
        MSGID[MSGID["TeamFightRankReward"] = 3451] = "TeamFightRankReward";
        MSGID[MSGID["PalaceInit"] = 3459] = "PalaceInit";
        MSGID[MSGID["PalaceChooseBuff"] = 3462] = "PalaceChooseBuff";
        MSGID[MSGID["PalaceBuffList"] = 3464] = "PalaceBuffList";
        MSGID[MSGID["PalaceChooseCoreBuff"] = 3466] = "PalaceChooseCoreBuff";
        MSGID[MSGID["PalaceCoreBuffList"] = 3468] = "PalaceCoreBuffList";
        MSGID[MSGID["PalaceRankList"] = 3470] = "PalaceRankList";
        MSGID[MSGID["PalaceReward"] = 3472] = "PalaceReward";
        MSGID[MSGID["PalaceUpdateRanking"] = 3473] = "PalaceUpdateRanking";
        MSGID[MSGID["PalaceShop"] = 3474] = "PalaceShop";
        MSGID[MSGID["PalaceShopUpdate"] = 3475] = "PalaceShopUpdate";
        MSGID[MSGID["PalaceRefresh"] = 3479] = "PalaceRefresh";
        MSGID[MSGID["GrowPackUnlock"] = 3481] = "GrowPackUnlock";
        MSGID[MSGID["DailyWheelBigPrize"] = 3484] = "DailyWheelBigPrize";
        MSGID[MSGID["DailyWheelTurn"] = 3486] = "DailyWheelTurn";
        MSGID[MSGID["OpenServerAdventureRank"] = 3490] = "OpenServerAdventureRank";
        MSGID[MSGID["AdFreeCard"] = 3487] = "AdFreeCard";
        MSGID[MSGID["OpenServerAccPaid"] = 3492] = "OpenServerAccPaid";
        MSGID[MSGID["NewPlayerAttr"] = 3494] = "NewPlayerAttr";
        MSGID[MSGID["TrammelsChiefInit"] = 3495] = "TrammelsChiefInit";
        MSGID[MSGID["TrammelsChief"] = 3497] = "TrammelsChief";
        MSGID[MSGID["PetInit"] = 3499] = "PetInit";
        MSGID[MSGID["PetChange"] = 3503] = "PetChange";
        MSGID[MSGID["PetFreeChange"] = 3504] = "PetFreeChange";
        MSGID[MSGID["PetBaoDiChange"] = 3505] = "PetBaoDiChange";
        MSGID[MSGID["PetRemove"] = 3510] = "PetRemove";
        MSGID[MSGID["PetHandleNewTalent"] = 3513] = "PetHandleNewTalent";
        MSGID[MSGID["PetBuyFlute"] = 3501] = "PetBuyFlute";
        MSGID[MSGID["PetExtractSuccess"] = 3515] = "PetExtractSuccess";
        MSGID[MSGID["PetFusion_revc"] = 3516] = "PetFusion_revc";
        MSGID[MSGID["PetUpgradeTalent"] = 3518] = "PetUpgradeTalent";
        MSGID[MSGID["PetNewTalent"] = 3519] = "PetNewTalent";
        MSGID[MSGID["NewPlayerFeast"] = 3520] = "NewPlayerFeast";
        MSGID[MSGID["NewPlayerFeastSelfRecords"] = 3521] = "NewPlayerFeastSelfRecords";
        MSGID[MSGID["NewPlayerFeastRewards"] = 3522] = "NewPlayerFeastRewards";
        MSGID[MSGID["NewPlayerFeastScore"] = 3523] = "NewPlayerFeastScore";
        MSGID[MSGID["NewArena"] = 3525] = "NewArena";
        MSGID[MSGID["JjcScoreUpdate"] = 3526] = "JjcScoreUpdate";
        MSGID[MSGID["PetFusionBaoDi"] = 3527] = "PetFusionBaoDi";
        MSGID[MSGID["StationPillagesNew"] = 3529] = "StationPillagesNew";
        MSGID[MSGID["GetFuncGuide"] = 3531] = "GetFuncGuide";
        MSGID[MSGID["BoxCommitState"] = 3532] = "BoxCommitState";
        MSGID[MSGID["PlayerTotalCnt"] = 3534] = "PlayerTotalCnt";
        MSGID[MSGID["SellEquipFinish"] = 3538] = "SellEquipFinish";
        MSGID[MSGID["SevenTask"] = 3535] = "SevenTask";
        MSGID[MSGID["SevenScore"] = 3536] = "SevenScore";
        MSGID[MSGID["ShareReward"] = 3540] = "ShareReward";
        MSGID[MSGID["BoxExtraItemInit"] = 3541] = "BoxExtraItemInit";
        MSGID[MSGID["BoxExtraItemChange"] = 3542] = "BoxExtraItemChange";
        MSGID[MSGID["GemFreeChange"] = 3545] = "GemFreeChange";
        MSGID[MSGID["ClubReward"] = 3544] = "ClubReward";
        MSGID[MSGID["DailyShopWeekCard"] = 3546] = "DailyShopWeekCard";
        MSGID[MSGID["NewPlayerFeastTask"] = 3547] = "NewPlayerFeastTask";
        MSGID[MSGID["LabourShopFreeChange"] = 3549] = "LabourShopFreeChange";
        MSGID[MSGID["ChiefBuyFlag"] = 3566] = "ChiefBuyFlag";
        MSGID[MSGID["ChiefChangeFlag"] = 3568] = "ChiefChangeFlag";
        MSGID[MSGID["ChiefUpgradeFlag"] = 3570] = "ChiefUpgradeFlag";
        MSGID[MSGID["CheifStarUpMulti"] = 3584] = "CheifStarUpMulti";
        MSGID[MSGID["SkyRank"] = 3586] = "SkyRank";
        MSGID[MSGID["DrawLevelChange"] = 3589] = "DrawLevelChange";
        MSGID[MSGID["WatchSkyRank"] = 3588] = "WatchSkyRank";
        MSGID[MSGID["TotalCntInit"] = 3590] = "TotalCntInit";
        MSGID[MSGID["TotalCntReward"] = 3592] = "TotalCntReward";
        MSGID[MSGID["TotalCntChange"] = 3593] = "TotalCntChange";
        MSGID[MSGID["WxAuthInfo"] = 3603] = "WxAuthInfo";
        MSGID[MSGID["AllianceList"] = 3555] = "AllianceList";
        MSGID[MSGID["AllianceInfo"] = 3556] = "AllianceInfo";
        MSGID[MSGID["AlliancePlayerList"] = 3557] = "AlliancePlayerList";
        MSGID[MSGID["AllianceApplyList"] = 3562] = "AllianceApplyList";
        MSGID[MSGID["AllianceSearch"] = 3572] = "AllianceSearch";
        MSGID[MSGID["AllianceBossInit"] = 3575] = "AllianceBossInit";
        MSGID[MSGID["AllianceBossRankList"] = 3577] = "AllianceBossRankList";
        MSGID[MSGID["AllianceInnerRankList"] = 3579] = "AllianceInnerRankList";
        MSGID[MSGID["AllianceRankReward"] = 3581] = "AllianceRankReward";
        MSGID[MSGID["AllianceBossFight"] = 3583] = "AllianceBossFight";
        MSGID[MSGID["AllianceShop"] = 3601] = "AllianceShop";
        MSGID[MSGID["AllianceShopInit"] = 3602] = "AllianceShopInit";
        MSGID[MSGID["PromotionInit"] = 3595] = "PromotionInit";
        MSGID[MSGID["PromotionUgraded"] = 3596] = "PromotionUgraded";
        MSGID[MSGID["PromotionDataChange"] = 3597] = "PromotionDataChange";
        MSGID[MSGID["WorldChatList"] = 3551] = "WorldChatList";
        MSGID[MSGID["WorldChatListChange"] = 3552] = "WorldChatListChange";
        MSGID[MSGID["AllianceJoinWait"] = 3607] = "AllianceJoinWait";
        MSGID[MSGID["AllianceWarCityPreview"] = 3620] = "AllianceWarCityPreview";
        MSGID[MSGID["AllianceWarCityDetail"] = 3622] = "AllianceWarCityDetail";
        MSGID[MSGID["AllianceWarInit"] = 3608] = "AllianceWarInit";
        MSGID[MSGID["AllianceWarTimeChange"] = 3609] = "AllianceWarTimeChange";
        MSGID[MSGID["AllianceWarSignUp"] = 3611] = "AllianceWarSignUp";
        MSGID[MSGID["AllianceWarPsChange"] = 3612] = "AllianceWarPsChange";
        MSGID[MSGID["AllianceWarEnemyLife"] = 3616] = "AllianceWarEnemyLife";
        MSGID[MSGID["AllianceWarBossDamage"] = 3627] = "AllianceWarBossDamage";
        MSGID[MSGID["AllianceWarAllianceRank"] = 3631] = "AllianceWarAllianceRank";
        MSGID[MSGID["AllianceWarInnerRank"] = 3633] = "AllianceWarInnerRank";
        MSGID[MSGID["AllianceWarRewardRank"] = 3635] = "AllianceWarRewardRank";
        MSGID[MSGID["AllianceWarGetRankReward"] = 3637] = "AllianceWarGetRankReward";
        MSGID[MSGID["BattlePass"] = 3638] = "BattlePass";
        MSGID[MSGID["BattlePassMonth"] = 3639] = "BattlePassMonth";
        MSGID[MSGID["BattlePassWeek"] = 3640] = "BattlePassWeek";
        MSGID[MSGID["BattlePassTask"] = 3642] = "BattlePassTask";
        MSGID[MSGID["BattlePassTaskUpdate"] = 3643] = "BattlePassTaskUpdate";
        MSGID[MSGID["BattlePassPack"] = 3644] = "BattlePassPack";
        MSGID[MSGID["BattlePassMonthUpdate"] = 3645] = "BattlePassMonthUpdate";
        MSGID[MSGID["BattlePassWeekUpdate"] = 3646] = "BattlePassWeekUpdate";
        MSGID[MSGID["BattlePassPackFree"] = 3649] = "BattlePassPackFree";
        MSGID[MSGID["BattlePassPackAccTimes"] = 3651] = "BattlePassPackAccTimes";
        MSGID[MSGID["BattlePassPackUpdate"] = 3652] = "BattlePassPackUpdate";
        MSGID[MSGID["GameStyle"] = 3653] = "GameStyle";
        MSGID[MSGID["NewCrossGroup"] = 3654] = "NewCrossGroup";
        MSGID[MSGID["DailyEventInit"] = 3655] = "DailyEventInit";
        MSGID[MSGID["DailyEventTaskUpdate"] = 3656] = "DailyEventTaskUpdate";
        MSGID[MSGID["DailyEventSearch"] = 3659] = "DailyEventSearch";
        MSGID[MSGID["MonopolyInit"] = 3660] = "MonopolyInit";
        MSGID[MSGID["MonopolyMapUpdate"] = 3662] = "MonopolyMapUpdate";
        MSGID[MSGID["MonopolyTaskUpdate"] = 3663] = "MonopolyTaskUpdate";
        MSGID[MSGID["MonopolyPackUpdate"] = 3666] = "MonopolyPackUpdate";
        MSGID[MSGID["DrawEventInit"] = 3668] = "DrawEventInit";
        MSGID[MSGID["DrawEventChoose"] = 3670] = "DrawEventChoose";
        MSGID[MSGID["DrawEventRewardUpdate"] = 3672] = "DrawEventRewardUpdate";
        MSGID[MSGID["DrawEventTaskUpdate"] = 3673] = "DrawEventTaskUpdate";
        MSGID[MSGID["DrawEventPack"] = 3676] = "DrawEventPack";
        MSGID[MSGID["DrawEventCumulateReward"] = 3678] = "DrawEventCumulateReward";
        MSGID[MSGID["GemLifeBlood"] = 3685] = "GemLifeBlood";
        MSGID[MSGID["AllianceWarCan"] = 3686] = "AllianceWarCan";
        MSGID[MSGID["ArtifactSuitInit"] = 3680] = "ArtifactSuitInit";
        MSGID[MSGID["AllianceWarCityLog"] = 3629] = "AllianceWarCityLog";
        MSGID[MSGID["ArtifactSuitUpdate"] = 3682] = "ArtifactSuitUpdate";
        MSGID[MSGID["AllianceWarPlayerDamage"] = 3687] = "AllianceWarPlayerDamage";
        MSGID[MSGID["AllianceWarSkins"] = 3688] = "AllianceWarSkins";
        MSGID[MSGID["AllianceWarRank"] = 3690] = "AllianceWarRank";
        MSGID[MSGID["AllianceWarBounsEnd"] = 3691] = "AllianceWarBounsEnd";
        MSGID[MSGID["AllianceWarBounsCan"] = 3703] = "AllianceWarBounsCan";
        MSGID[MSGID["NamingInit"] = 3692] = "NamingInit";
        MSGID[MSGID["FirstDayCharge"] = 3693] = "FirstDayCharge";
        MSGID[MSGID["NamingReward"] = 3694] = "NamingReward";
        MSGID[MSGID["NameingChange"] = 3695] = "NameingChange";
        MSGID[MSGID["NameingServer"] = 3698] = "NameingServer";
        MSGID[MSGID["NamingChargeRankFirstDay"] = 3700] = "NamingChargeRankFirstDay";
        MSGID[MSGID["NamingChargeRank"] = 3701] = "NamingChargeRank";
        MSGID[MSGID["SideBarReward"] = 3725] = "SideBarReward";
        MSGID[MSGID["SpringFestivalInit"] = 3705] = "SpringFestivalInit";
        MSGID[MSGID["SpringFestivalCanJoin"] = 3707] = "SpringFestivalCanJoin";
        MSGID[MSGID["SpringFestivalEnroll"] = 3709] = "SpringFestivalEnroll";
        MSGID[MSGID["SpringFestivalTaskUpdate"] = 3711] = "SpringFestivalTaskUpdate";
        MSGID[MSGID["SpringFestivalPack"] = 3714] = "SpringFestivalPack";
        MSGID[MSGID["SpringFestivalReward"] = 3716] = "SpringFestivalReward";
        MSGID[MSGID["SpringFestivalAllianceRank"] = 3718] = "SpringFestivalAllianceRank";
        MSGID[MSGID["SpringFestivalAllianceRankReward"] = 3720] = "SpringFestivalAllianceRankReward";
        MSGID[MSGID["SpringFestivalShop"] = 3722] = "SpringFestivalShop";
        MSGID[MSGID["SpringFestivalPrestige"] = 3723] = "SpringFestivalPrestige";
        MSGID[MSGID["SpringFestivalFire"] = 3726] = "SpringFestivalFire";
        MSGID[MSGID["WarcraftSkinInit"] = 3727] = "WarcraftSkinInit";
        MSGID[MSGID["WarcraftSkin"] = 3729] = "WarcraftSkin";
        MSGID[MSGID["WarcraftSkinListUpdate"] = 3730] = "WarcraftSkinListUpdate";
        MSGID[MSGID["WarcraftAttrListUpdate"] = 3731] = "WarcraftAttrListUpdate";
    })(exports.MSGID || (exports.MSGID = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    let TWO_PWR_16_DBL = 1 << 16;
    let TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
    let TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
    let pow_dbl = Math.pow;
    let INT_CACHE = {};
    let UINT_CACHE = {};
    function isLong(obj) {
        return (obj && obj["__isLong__"]) === true;
    }
    function fromString(str, unsigned = undefined, radix = undefined) {
        if (str.length === 0)
            throw Error('empty string');
        if (typeof unsigned === 'number') {
            radix = unsigned;
            unsigned = false;
        }
        else {
            unsigned = !!unsigned;
        }
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
            return unsigned ? UZERO : ZERO;
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw RangeError('radix');
        var p;
        if ((p = str.indexOf('-')) > 0)
            throw Error('interior hyphen');
        else if (p === 0) {
            return fromString(str.substring(1), unsigned, radix).neg();
        }
        var radixToPower = fromNumber(pow_dbl(radix, 8));
        var result = ZERO;
        for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = fromNumber(pow_dbl(radix, size));
                result = result.mul(power).add(fromNumber(value));
            }
            else {
                result = result.mul(radixToPower);
                result = result.add(fromNumber(value));
            }
        }
        result.unsigned = unsigned;
        return result;
    }
    function fromValue(val, unsigned = false) {
        if (typeof val === 'number')
            return fromNumber(val, unsigned);
        if (typeof val === 'string')
            return fromString(val, unsigned);
        return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
    }
    function fromInt(value, unsigned = false) {
        var obj, cachedObj, cache;
        if (unsigned) {
            value >>>= 0;
            if (cache = 0 <= value && value < 256) {
                cachedObj = UINT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = fromBits(value, 0, true);
            if (cache)
                UINT_CACHE[value] = obj;
            return obj;
        }
        else {
            value |= 0;
            if (cache = -128 <= value && value < 128) {
                cachedObj = INT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = fromBits(value, value < 0 ? -1 : 0, false);
            if (cache)
                INT_CACHE[value] = obj;
            return obj;
        }
    }
    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
    function fromNumber(value, unsigned = false) {
        if (isNaN(value))
            return unsigned ? UZERO : ZERO;
        if (unsigned) {
            if (value < 0)
                return UZERO;
            if (value >= TWO_PWR_64_DBL)
                return MAX_UNSIGNED_VALUE;
        }
        else {
            if (value <= -TWO_PWR_63_DBL)
                return MIN_VALUE;
            if (value + 1 >= TWO_PWR_63_DBL)
                return MAX_VALUE;
        }
        if (value < 0)
            return fromNumber(-value, unsigned).neg();
        return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
    }
    class uint64 {
        constructor(low = 0, high = 0, unsigned = true) {
            this.unsigned = true;
            this.low = low;
            this.high = high;
            this.unsigned = !!unsigned;
        }
        zero() {
            this.high = this.low = 0;
        }
        write(b) {
            b.writeUint32(this.high);
            b.writeUint32(this.low);
        }
        read(b) {
            this.high = b.readUint32();
            this.low = b.readUint32();
        }
        isZero() {
            return this.high === 0 && this.low === 0;
        }
        eq(other) {
            return this.equals(other);
        }
        equals(other) {
            if (!isLong(other))
                other = fromValue(other);
            if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
                return false;
            return this.high === other.high && this.low === other.low;
        }
        ;
        div(divisor) {
            return this.divide(divisor);
        }
        shiftRight(numBits) {
            if (isLong(numBits))
                numBits = numBits.toInt();
            if ((numBits &= 63) === 0)
                return this;
            else if (numBits < 32)
                return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
            else
                return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
        }
        shr(n) {
            return this.shiftRight(n);
        }
        add(addend) {
            if (!isLong(addend))
                addend = fromValue(addend);
            var a48 = this.high >>> 16;
            var a32 = this.high & 0xFFFF;
            var a16 = this.low >>> 16;
            var a00 = this.low & 0xFFFF;
            var b48 = addend.high >>> 16;
            var b32 = addend.high & 0xFFFF;
            var b16 = addend.low >>> 16;
            var b00 = addend.low & 0xFFFF;
            var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
            c00 += a00 + b00;
            c16 += c00 >>> 16;
            c00 &= 0xFFFF;
            c16 += a16 + b16;
            c32 += c16 >>> 16;
            c16 &= 0xFFFF;
            c32 += a32 + b32;
            c48 += c32 >>> 16;
            c32 &= 0xFFFF;
            c48 += a48 + b48;
            c48 &= 0xFFFF;
            return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
        }
        ;
        sub(subtrahend) {
            if (!isLong(subtrahend))
                subtrahend = fromValue(subtrahend);
            return this.add(subtrahend.neg());
        }
        ;
        not() {
            return fromBits(~this.low, ~this.high, this.unsigned);
        }
        ;
        neg() {
            if (!this.unsigned && this.eq(MIN_VALUE))
                return MIN_VALUE;
            return this.not().add(ONE);
        }
        ;
        shru(numBits) {
            if (isLong(numBits))
                numBits = numBits.toInt();
            if ((numBits &= 63) === 0)
                return this;
            if (numBits < 32)
                return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);
            if (numBits === 32)
                return fromBits(this.high, 0, this.unsigned);
            return fromBits(this.high >>> numBits - 32, 0, this.unsigned);
        }
        ;
        divide(divisor) {
            if (!isLong(divisor))
                divisor = fromValue(divisor);
            if (divisor.isZero())
                throw Error('division by zero');
            if (this.isZero())
                return this.unsigned ? UZERO : ZERO;
            var approx, rem, res;
            if (!this.unsigned) {
                if (this.eq(MIN_VALUE)) {
                    if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                        return MIN_VALUE;
                    else if (divisor.eq(MIN_VALUE))
                        return ONE;
                    else {
                        var halfThis = this.shr(1);
                        approx = halfThis.div(divisor).shl(1);
                        if (approx.eq(ZERO)) {
                            return divisor.isNegative() ? ONE : NEG_ONE;
                        }
                        else {
                            rem = this.sub(divisor.mul(approx));
                            res = approx.add(rem.div(divisor));
                            return res;
                        }
                    }
                }
                else if (divisor.eq(MIN_VALUE))
                    return this.unsigned ? UZERO : ZERO;
                if (this.isNegative()) {
                    if (divisor.isNegative())
                        return this.neg().div(divisor.neg());
                    return this.neg().div(divisor).neg();
                }
                else if (divisor.isNegative())
                    return this.div(divisor.neg()).neg();
                res = ZERO;
            }
            else {
                if (!divisor.unsigned)
                    divisor = divisor.toUnsigned();
                if (divisor.gt(this))
                    return UZERO;
                if (divisor.gt(this.shru(1)))
                    return UONE;
                res = UZERO;
            }
            rem = this;
            while (rem.gte(divisor)) {
                approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
                var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
                while (approxRem.isNegative() || approxRem.gt(rem)) {
                    approx -= delta;
                    approxRes = fromNumber(approx, this.unsigned);
                    approxRem = approxRes.mul(divisor);
                }
                if (approxRes.isZero())
                    approxRes = ONE;
                res = res.add(approxRes);
                rem = rem.sub(approxRem);
            }
            return res;
        }
        ;
        toInt() {
            return this.unsigned ? this.low >>> 0 : this.low;
        }
        ;
        toString(radix = undefined) {
            radix = radix || 10;
            if (radix < 2 || 36 < radix)
                throw RangeError('radix');
            if (this.isZero())
                return '0';
            if (this.isNegative()) {
                if (this.eq(MIN_VALUE)) {
                    var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
                    return div.toString(radix) + rem1.toInt().toString(radix);
                }
                else
                    return '-' + this.neg().toString(radix);
            }
            var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
            var result = '';
            while (true) {
                var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
                rem = remDiv;
                if (rem.isZero())
                    return digits + result;
                else {
                    while (digits.length < 6)
                        digits = '0' + digits;
                    result = '' + digits + result;
                }
            }
        }
        isNegative() {
            return !this.unsigned && this.high < 0;
        }
        toUnsigned() {
            if (this.unsigned)
                return this;
            return fromBits(this.low, this.high, true);
        }
        ;
        comp(other) {
            if (!isLong(other))
                other = fromValue(other);
            if (this.eq(other))
                return 0;
            var thisNeg = this.isNegative(), otherNeg = other.isNegative();
            if (thisNeg && !otherNeg)
                return -1;
            if (!thisNeg && otherNeg)
                return 1;
            if (!this.unsigned)
                return this.sub(other).isNegative() ? -1 : 1;
            return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
        }
        ;
        gte(other) {
            return this.comp(other) > 0;
        }
        ;
        ge(other) {
            return this.gte(other);
        }
        gt(other) {
            return this.comp(other) > 0;
        }
        ;
        lt(other) {
            return this.comp(other) < 0;
        }
        ;
        isOdd() {
            return (this.low & 1) === 1;
        }
        ;
        mul(multiplier) {
            if (this.isZero())
                return this;
            if (!isLong(multiplier))
                multiplier = fromValue(multiplier);
            if (multiplier.isZero())
                return this.unsigned ? UZERO : ZERO;
            if (this.eq(MIN_VALUE))
                return multiplier.isOdd() ? MIN_VALUE : ZERO;
            if (multiplier.eq(MIN_VALUE))
                return this.isOdd() ? MIN_VALUE : ZERO;
            if (this.isNegative()) {
                if (multiplier.isNegative())
                    return this.neg().mul(multiplier.neg());
                else
                    return this.neg().mul(multiplier).neg();
            }
            else if (multiplier.isNegative())
                return this.mul(multiplier.neg()).neg();
            if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
                return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
            var a48 = this.high >>> 16;
            var a32 = this.high & 0xFFFF;
            var a16 = this.low >>> 16;
            var a00 = this.low & 0xFFFF;
            var b48 = multiplier.high >>> 16;
            var b32 = multiplier.high & 0xFFFF;
            var b16 = multiplier.low >>> 16;
            var b00 = multiplier.low & 0xFFFF;
            var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
            c00 += a00 * b00;
            c16 += c00 >>> 16;
            c00 &= 0xFFFF;
            c16 += a16 * b00;
            c32 += c16 >>> 16;
            c16 &= 0xFFFF;
            c16 += a00 * b16;
            c32 += c16 >>> 16;
            c16 &= 0xFFFF;
            c32 += a32 * b00;
            c48 += c32 >>> 16;
            c32 &= 0xFFFF;
            c32 += a16 * b16;
            c48 += c32 >>> 16;
            c32 &= 0xFFFF;
            c32 += a00 * b32;
            c48 += c32 >>> 16;
            c32 &= 0xFFFF;
            c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
            c48 &= 0xFFFF;
            return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
        }
        ;
        toNumber() {
            if (this.unsigned)
                return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
            return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
        }
        ;
    }
    let MIN_VALUE = fromBits(0, 0x80000000 | 0, false);
    let MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);
    let NEG_ONE = fromInt(-1);
    let ONE = fromInt(1);
    let UONE = fromInt(1, true);
    let UZERO = fromInt(0, true);
    let ZERO = fromInt(0);
    let TWO_PWR_24_DBL = 1 << 24;
    let MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);
    let TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
    uint64.prototype['__isLong__'];
    Object.defineProperty(uint64.prototype, "__isLong__", {
        value: true
    });
    function fromBits(lowBits, highBits, unsigned) {
        return new uint64(lowBits, highBits, unsigned);
    }

    exports.fromString = fromString;
    exports.uint64 = uint64;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Gm_req {
        constructor() {
            this.protoid = 1000;
        }
        write(b) {
            b.writeUTFString(this.datas || "");
        }
    }
    class Heartbeat_req {
        constructor() {
            this.protoid = 1001;
        }
        write(b) {
        }
    }
    class Heartbeat_revc {
        constructor() {
            this.protoid = 1002;
        }
        read(b) {
        }
    }
    class Kick_revc {
        constructor() {
            this.protoid = 1003;
        }
        read(b) {
            this.reason = b.readUint8();
        }
    }
    class Err_revc {
        constructor() {
            this.protoid = 1004;
        }
        read(b) {
            this.reason = b.readUint16();
        }
    }
    class PlayerLevel_revc {
        constructor() {
            this.protoid = 1005;
        }
        read(b) {
            this.level = b.readUint16();
        }
    }
    class PlayerCurExp_revc {
        constructor() {
            this.protoid = 1006;
        }
        read(b) {
            this.curLevelExp = b.readUint32();
        }
    }
    class WebClientRegist_req {
        constructor() {
            this.protoid = 3001;
        }
        write(b) {
            b.writeUint8(this.pid);
            b.writeUTFString(this.account || "");
            b.writeUTFString(this.password || "");
        }
    }
    class WebClientRegist_revc {
        constructor() {
            this.protoid = 3002;
        }
        read(b) {
            this.errorID = b.readUint8();
            this.pid = b.readUint8();
        }
    }
    class WebClientLogin_req {
        constructor() {
            this.protoid = 3003;
        }
        write(b) {
            b.writeUint8(this.pid);
            b.writeUTFString(this.account || "");
            b.writeUTFString(this.password || "");
            b.writeUTFString(this.sceneid || "");
            b.writeUTFString(this.openid || "");
        }
    }
    class WebClientLogin_revc {
        constructor() {
            this.protoid = 3004;
            this.serverConfig = new stServerConfig();
            this.playerData = new stPlayerData();
            this.BaseInfo = new stPlayerBaseInfo();
        }
        read(b) {
            this.errorID = b.readUint8();
            this.serverConfig.read(b);
            this.playerData.read(b);
            this.BaseInfo.read(b);
            this.newRole = b.readUint8();
        }
    }
    class stServerConfig {
        constructor() {
            this.ServerTime = new uint64();
            this.openTime = new uint64();
        }
        write(b) {
            b.writeUint32(this.HeartMillisecond);
            this.ServerTime.write(b);
            this.openTime.write(b);
        }
        read(b) {
            this.HeartMillisecond = b.readUint32();
            this.ServerTime.read(b);
            this.openTime.read(b);
        }
    }
    class stPlayerData {
        constructor() { }
        write(b) {
            b.writeUTFString(this.Account || "");
            b.writeUTFString(this.NickName || "");
            b.writeUint32(this.AccountId);
            b.writeUTFString(this.HeadUrl || "");
            b.writeUint32(this.serverId);
            b.writeUTFString(this.serverName || "");
            b.writeUTFString(this.naming || "");
        }
        read(b) {
            this.Account = b.readUTFString();
            this.NickName = b.readUTFString();
            this.AccountId = b.readUint32();
            this.HeadUrl = b.readUTFString();
            this.serverId = b.readUint32();
            this.serverName = b.readUTFString();
            this.naming = b.readUTFString();
        }
    }
    class stPlayerBaseInfo {
        constructor() { }
        write(b) {
            let len;
            this.moneyInfo = this.moneyInfo || [];
            len = this.moneyInfo.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.moneyInfo[i].write(b);
            }
            this.equipItem = this.equipItem || [];
            len = this.equipItem.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.equipItem[i].write(b);
            }
            b.writeUint32(this.boxCdTime);
            b.writeUint8(this.isVip);
        }
        read(b) {
            let len;
            this.moneyInfo = this.moneyInfo || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.moneyInfo.push(item);
            }
            this.equipItem = this.equipItem || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipItem();
                item.read(b);
                this.equipItem.push(item);
            }
            this.boxCdTime = b.readUint32();
            this.isVip = b.readUint8();
        }
    }
    class stPropItem {
        constructor() { }
        write(b) {
            b.writeUint32(this.id);
            b.writeUint32(this.count);
        }
        read(b) {
            this.id = b.readUint32();
            this.count = b.readUint32();
        }
    }
    class stCellValue {
        constructor() { }
        write(b) {
            b.writeUint16(this.id);
            b.writeUint32(this.count);
        }
        read(b) {
            this.id = b.readUint16();
            this.count = b.readUint32();
        }
    }
    class stEquipAttr {
        constructor() { }
        write(b) {
            b.writeUint16(this.id);
            b.writeUint32(this.value);
        }
        read(b) {
            this.id = b.readUint16();
            this.value = b.readUint32();
        }
    }
    class stEquipItem {
        constructor() {
            this.uid = new uint64();
        }
        write(b) {
            let len;
            b.writeUint8(this.type);
            this.uid.write(b);
            b.writeUint16(this.level);
            b.writeUint16(this.quality);
            b.writeUint8(this.wearable);
            b.writeUint32(this.plus);
            b.writeUint8(this.equipStyle);
            this.attrList = this.attrList || [];
            len = this.attrList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.attrList[i].write(b);
            }
            this.attrList1 = this.attrList1 || [];
            len = this.attrList1.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.attrList1[i].write(b);
            }
            this.mountAttrList = this.mountAttrList || [];
            len = this.mountAttrList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.mountAttrList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.uid.read(b);
            this.level = b.readUint16();
            this.quality = b.readUint16();
            this.wearable = b.readUint8();
            this.plus = b.readUint32();
            this.equipStyle = b.readUint8();
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.attrList.push(item);
            }
            this.attrList1 = this.attrList1 || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.attrList1.push(item);
            }
            this.mountAttrList = this.mountAttrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMountRefinement();
                item.read(b);
                this.mountAttrList.push(item);
            }
        }
    }
    class stWingUpgradeInfo {
        constructor() { }
        write(b) {
            b.writeUint32(this.id);
            b.writeUint32(this.now);
            b.writeUint32(this.next);
        }
        read(b) {
            this.id = b.readUint32();
            this.now = b.readUint32();
            this.next = b.readUint32();
        }
    }
    class stWingItem {
        constructor() {
            this.wingInfoData = new stWingInfo();
        }
        write(b) {
            let len;
            this.wingInfoData.write(b);
            b.writeUint8(this.wingId);
            b.writeUint32(this.wingPower);
            this.levelAttrList = this.levelAttrList || [];
            len = this.levelAttrList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.levelAttrList[i].write(b);
            }
            this.stageAttrList = this.stageAttrList || [];
            len = this.stageAttrList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.stageAttrList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.wingInfoData.read(b);
            this.wingId = b.readUint8();
            this.wingPower = b.readUint32();
            this.levelAttrList = this.levelAttrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stWingUpgradeInfo();
                item.read(b);
                this.levelAttrList.push(item);
            }
            this.stageAttrList = this.stageAttrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stWingUpgradeInfo();
                item.read(b);
                this.stageAttrList.push(item);
            }
        }
    }
    class stWingInfo {
        constructor() { }
        write(b) {
            b.writeUint16(this.wingLevel);
            b.writeUint8(this.wingStage);
        }
        read(b) {
            this.wingLevel = b.readUint16();
            this.wingStage = b.readUint8();
        }
    }
    class ExchangeEquip_req {
        constructor() {
            this.protoid = 3005;
        }
        write(b) {
        }
    }
    class ExchangeEquip_revc {
        constructor() {
            this.protoid = 3006;
        }
        read(b) {
            let len;
            this.errorID = b.readUint8();
            this.equipItemList = this.equipItemList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipItem();
                item.read(b);
                this.equipItemList.push(item);
            }
        }
    }
    class EquipChange_revc {
        constructor() {
            this.protoid = 3007;
        }
        read(b) {
            let len;
            this.equipItem = this.equipItem || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipItem();
                item.read(b);
                this.equipItem.push(item);
            }
            this.type = b.readUint8();
        }
    }
    class ActionEquip_req {
        constructor() {
            this.protoid = 3008;
            this.value = new uint64();
        }
        write(b) {
            b.writeUint8(this.type);
            this.value.write(b);
        }
    }
    class ValChanel_revc {
        constructor() {
            this.protoid = 3009;
        }
        read(b) {
            let len;
            this.itemList = this.itemList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.itemList.push(item);
            }
        }
    }
    class Init_revc {
        constructor() {
            this.protoid = 3010;
        }
        read(b) {
        }
    }
    class ChestUpLevel_req {
        constructor() {
            this.protoid = 3011;
        }
        write(b) {
        }
    }
    class ChestInfoUpdate_revc {
        constructor() {
            this.protoid = 3012;
        }
        read(b) {
            this.boxlv = b.readUint16();
            this.time = b.readFloat64();
            this.pos = b.readUint8();
        }
    }
    class ChestUpLevel_revc {
        constructor() {
            this.protoid = 3013;
        }
        read(b) {
            this.type = b.readUint8();
        }
    }
    class stFightActionLog {
        constructor() { }
        write(b) {
            b.writeUint16(this.skillId);
            b.writeUint8(this.pos);
            b.writeUint16(this.round);
            b.writeUint8(this.type);
            b.writeUint16(this.attrId);
            b.writeUint32(this.oldVal);
            b.writeUint32(this.newVal);
            b.writeUint8(this.addType);
        }
        read(b) {
            this.skillId = b.readUint16();
            this.pos = b.readUint8();
            this.round = b.readUint16();
            this.type = b.readUint8();
            this.attrId = b.readUint16();
            this.oldVal = b.readUint32();
            this.newVal = b.readUint32();
            this.addType = b.readUint8();
        }
    }
    class stFightPet {
        constructor() { }
        write(b) {
            b.writeUint8(this.pos);
            b.writeUint16(this.petId);
        }
        read(b) {
            this.pos = b.readUint8();
            this.petId = b.readUint16();
        }
    }
    class stFightData {
        constructor() { }
        write(b) {
            b.writeUint8(this.target);
            b.writeUint32(this.val);
        }
        read(b) {
            this.target = b.readUint8();
            this.val = b.readUint32();
        }
    }
    class stFightAction {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.type);
            b.writeUint32(this.skillId);
            b.writeUint8(this.pos);
            this.targetList = this.targetList || [];
            len = this.targetList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.targetList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.skillId = b.readUint32();
            this.pos = b.readUint8();
            this.targetList = this.targetList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stFightData();
                item.read(b);
                this.targetList.push(item);
            }
        }
    }
    class stSkin {
        constructor() { }
        write(b) {
            b.writeUint16(this.f_HeadID);
            b.writeUint16(this.f_WeaponID);
            b.writeUint16(this.f_ShieldID);
            b.writeUint16(this.f_WingID);
            b.writeUint16(this.f_MountID);
            b.writeUint16(this.f_BodyID);
            b.writeUint16(this.f_BulletPic);
        }
        read(b) {
            this.f_HeadID = b.readUint16();
            this.f_WeaponID = b.readUint16();
            this.f_ShieldID = b.readUint16();
            this.f_WingID = b.readUint16();
            this.f_MountID = b.readUint16();
            this.f_BodyID = b.readUint16();
            this.f_BulletPic = b.readUint16();
        }
    }
    class stFightRole {
        constructor() {
            this.skin = new stSkin();
        }
        write(b) {
            b.writeUint32(this.blood);
            b.writeUint32(this.init_blood);
            this.skin.write(b);
            b.writeUint32(this.plus);
            b.writeUint8(this.pos);
            b.writeUint16(this.level);
            b.writeUint16(this.star);
            b.writeUTFString(this.name || "");
        }
        read(b) {
            this.blood = b.readUint32();
            this.init_blood = b.readUint32();
            this.skin.read(b);
            this.plus = b.readUint32();
            this.pos = b.readUint8();
            this.level = b.readUint16();
            this.star = b.readUint16();
            this.name = b.readUTFString();
        }
    }
    class stFightVo {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.owner);
            b.writeUint8(this.ownerpos);
            this.itemList = this.itemList || [];
            len = this.itemList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.itemList[i].write(b);
            }
            this.logList = this.logList || [];
            len = this.logList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.logList[i].write(b);
            }
            this.rewardList = this.rewardList || [];
            len = this.rewardList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.rewardList[i].write(b);
            }
            this.roleList = this.roleList || [];
            len = this.roleList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.roleList[i].write(b);
            }
            this.petList = this.petList || [];
            len = this.petList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.petList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.owner = b.readUint8();
            this.ownerpos = b.readUint8();
            this.itemList = this.itemList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stFightAction();
                item.read(b);
                this.itemList.push(item);
            }
            this.logList = this.logList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stFightActionLog();
                item.read(b);
                this.logList.push(item);
            }
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewardList.push(item);
            }
            this.roleList = this.roleList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stFightRole();
                item.read(b);
                this.roleList.push(item);
            }
            this.petList = this.petList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stFightPet();
                item.read(b);
                this.petList.push(item);
            }
        }
    }
    class FightResult_revc {
        constructor() {
            this.protoid = 3014;
            this.fightVo = new stFightVo();
        }
        read(b) {
            this.fight_type = b.readUint8();
            this.fightVo.read(b);
        }
    }
    class FightStart_req {
        constructor() {
            this.protoid = 3015;
        }
        write(b) {
            b.writeUint32(this.id);
        }
    }
    class ItemDel_revc {
        constructor() {
            this.protoid = 3016;
        }
        read(b) {
            let len;
            this.delList = this.delList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new uint64();
                item.read(b);
                this.delList.push(item);
            }
        }
    }
    class Sell_revc {
        constructor() {
            this.protoid = 3017;
            this.value = new uint64();
        }
        read(b) {
            let len;
            this.errorID = b.readUint8();
            this.value.read(b);
            this.itemList = this.itemList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.itemList.push(item);
            }
        }
    }
    class Task_req {
        constructor() {
            this.protoid = 3018;
        }
        write(b) {
        }
    }
    class Task_revc {
        constructor() {
            this.protoid = 3019;
        }
        read(b) {
            let len;
            this.id = b.readUint16();
            this.status = b.readUint8();
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.datalist.push(b.readUint32());
            }
        }
    }
    class Adventure_revc {
        constructor() {
            this.protoid = 3020;
        }
        read(b) {
            this.id = b.readUint16();
            this.plus = b.readUint32();
            this.rewardId = b.readUint32();
        }
    }
    class Adventure_req {
        constructor() {
            this.protoid = 3021;
        }
        write(b) {
        }
    }
    class FightEnd_req {
        constructor() {
            this.protoid = 3022;
        }
        write(b) {
            b.writeUint8(this.fight_type);
        }
    }
    class DebugFightVal_revc {
        constructor() {
            this.protoid = 3023;
        }
        read(b) {
            let len;
            this.id = b.readUint32();
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.attrList.push(item);
            }
        }
    }
    class Reward_req {
        constructor() {
            this.protoid = 3024;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class stSkinStyle {
        constructor() { }
        write(b) {
            b.writeUint8(this.qua);
            b.writeUint16(this.part);
            b.writeUint16(this.style);
        }
        read(b) {
            this.qua = b.readUint8();
            this.part = b.readUint16();
            this.style = b.readUint16();
        }
    }
    class Reward_revc {
        constructor() {
            this.protoid = 3025;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewardList.push(item);
            }
            this.equipList = this.equipList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipItem();
                item.read(b);
                this.equipList.push(item);
            }
            this.partList = this.partList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSkinStyle();
                item.read(b);
                this.partList.push(item);
            }
        }
    }
    class ExchangeEquipProxy_req {
        constructor() {
            this.protoid = 3026;
        }
        write(b) {
        }
    }
    class Adventure_Boss_req {
        constructor() {
            this.protoid = 3027;
        }
        write(b) {
            b.writeUint32(this.f_id);
            b.writeUint8(this.type);
        }
    }
    class Adventure_Boss_revc {
        constructor() {
            this.protoid = 3028;
        }
        read(b) {
            this.f_id = b.readUint32();
            this.cnt = b.readUint8();
        }
    }
    class GetRide_req {
        constructor() {
            this.protoid = 3029;
        }
        write(b) {
            b.writeUint16(this.itemId);
            b.writeUint8(this.type);
        }
    }
    class stRewardRideVo {
        constructor() { }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint16(this.rideid);
            b.writeUint16(this.itemid);
            b.writeUint16(this.count);
        }
        read(b) {
            this.type = b.readUint8();
            this.rideid = b.readUint16();
            this.itemid = b.readUint16();
            this.count = b.readUint16();
        }
    }
    class stRideVo {
        constructor() { }
        write(b) {
            b.writeUint16(this.id);
            b.writeUint16(this.lv);
            b.writeUint16(this.star);
        }
        read(b) {
            this.id = b.readUint16();
            this.lv = b.readUint16();
            this.star = b.readUint16();
        }
    }
    class stMountRelation {
        constructor() {
            this.equipItem = new stEquipItem();
        }
        write(b) {
            let len;
            b.writeUint16(this.mountId);
            b.writeFloat64(this.cheifId);
            this.equipItem.write(b);
            b.writeUint8(this.canLock);
            this.refinements = this.refinements || [];
            len = this.refinements.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.refinements[i].write(b);
            }
        }
        read(b) {
            let len;
            this.mountId = b.readUint16();
            this.cheifId = b.readFloat64();
            this.equipItem.read(b);
            this.canLock = b.readUint8();
            this.refinements = this.refinements || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMountRefinement();
                item.read(b);
                this.refinements.push(item);
            }
        }
    }
    class GetRide_revc {
        constructor() {
            this.protoid = 3030;
        }
        read(b) {
            let len;
            this.rideList = this.rideList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stRewardRideVo();
                item.read(b);
                this.rideList.push(item);
            }
        }
    }
    class RideInfo_revc {
        constructor() {
            this.protoid = 3031;
        }
        read(b) {
            let len;
            this.mlist = this.mlist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stRideVo();
                item.read(b);
                this.mlist.push(item);
            }
        }
    }
    class RideLv_req {
        constructor() {
            this.protoid = 3032;
        }
        write(b) {
            b.writeUint16(this.id);
            b.writeUint16(this.cnt);
        }
    }
    class RideLv_revc {
        constructor() {
            this.protoid = 3033;
        }
        read(b) {
            this.id = b.readUint16();
            this.lv = b.readUint16();
        }
    }
    class RideQua_req {
        constructor() {
            this.protoid = 3034;
        }
        write(b) {
            b.writeUint16(this.id);
        }
    }
    class RideQua_revc {
        constructor() {
            this.protoid = 3035;
        }
        read(b) {
            this.id = b.readUint16();
            this.star = b.readUint16();
        }
    }
    class stRideMissionVo {
        constructor() { }
        write(b) {
            b.writeUint16(this.id);
            b.writeUint16(this.rideId);
            b.writeUint32(this.time);
        }
        read(b) {
            this.id = b.readUint16();
            this.rideId = b.readUint16();
            this.time = b.readUint32();
        }
    }
    class stRideReq {
        constructor() { }
        write(b) {
            b.writeUint16(this.rideId);
            b.writeUint16(this.missionId);
        }
        read(b) {
            this.rideId = b.readUint16();
            this.missionId = b.readUint16();
        }
    }
    class RideMission_req {
        constructor() {
            this.protoid = 3036;
        }
        write(b) {
            let len;
            this.rideList = this.rideList || [];
            len = this.rideList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.rideList[i].write(b);
            }
        }
    }
    class RideMission_revc {
        constructor() {
            this.protoid = 3037;
        }
        read(b) {
            let len;
            this.rideList = this.rideList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stRideMissionVo();
                item.read(b);
                this.rideList.push(item);
            }
        }
    }
    class RideStorgeUp_req {
        constructor() {
            this.protoid = 3039;
        }
        write(b) {
        }
    }
    class RideStorgeUp_revc {
        constructor() {
            this.protoid = 3040;
        }
        read(b) {
            this.total = b.readUint32();
        }
    }
    class WingList_revc {
        constructor() {
            this.protoid = 3041;
        }
        read(b) {
            let len;
            this.list = this.list || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.list.push(b.readUint8());
            }
        }
    }
    class RideOwnerInfo_revc {
        constructor() {
            this.protoid = 3042;
            this.equipItem = new stEquipItem();
        }
        read(b) {
            this.equipItem.read(b);
        }
    }
    class RideOwnerCnt_revc {
        constructor() {
            this.protoid = 3043;
        }
        read(b) {
            this.cnt = b.readUint32();
        }
    }
    class RideUpdate_req {
        constructor() {
            this.protoid = 3045;
        }
        write(b) {
            b.writeUint16(this.id);
        }
    }
    class RideMissionList_revc {
        constructor() {
            this.protoid = 3046;
        }
        read(b) {
            let len;
            this.rideList = this.rideList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.rideList.push(b.readUint32());
            }
        }
    }
    class RideMissionList_req {
        constructor() {
            this.protoid = 3047;
        }
        write(b) {
            b.writeUint16(this.id);
        }
    }
    class RideMissionLingQu_req {
        constructor() {
            this.protoid = 3048;
        }
        write(b) {
        }
    }
    class RideMissionDel_req {
        constructor() {
            this.protoid = 3049;
        }
        write(b) {
            b.writeUint16(this.id);
        }
    }
    class RideMissionData_revc {
        constructor() {
            this.protoid = 3050;
        }
        read(b) {
            let len;
            this.itemList = this.itemList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.itemList.push(item);
            }
        }
    }
    class WingLevelUp_req {
        constructor() {
            this.protoid = 3051;
        }
        write(b) {
            b.writeUint16(this.cnt);
        }
    }
    class WearedWingData_revc {
        constructor() {
            this.protoid = 3052;
            this.wingData = new stWingItem();
        }
        read(b) {
            this.wingData.read(b);
        }
    }
    class WingExchange_req {
        constructor() {
            this.protoid = 3053;
        }
        write(b) {
            b.writeUint8(this.wingId);
        }
    }
    class WingInfo_revc {
        constructor() {
            this.protoid = 3054;
            this.wingInfo = new stWingInfo();
        }
        read(b) {
            this.wingInfo.read(b);
        }
    }
    class GetWingList_req {
        constructor() {
            this.protoid = 3055;
        }
        write(b) {
        }
    }
    class RideMissionTimeEnd_req {
        constructor() {
            this.protoid = 3056;
        }
        write(b) {
        }
    }
    class wingTreasureUpgrade_req {
        constructor() {
            this.protoid = 3057;
        }
        write(b) {
        }
    }
    class wingTreasureStage_revc {
        constructor() {
            this.protoid = 3058;
        }
        read(b) {
            this.stage = b.readUint16();
            this.errorID = b.readUint8();
            this.treasurePower = b.readUint32();
        }
    }
    class stJjcPlayer {
        constructor() { }
        write(b) {
            b.writeUint32(this.id);
            b.writeUTFString(this.headUrl || "");
            b.writeUTFString(this.name || "");
            b.writeUint16(this.lv);
            b.writeUint32(this.plus);
            b.writeUint16(this.rank);
            b.writeUint32(this.accountId);
            b.writeUint8(this.titleId);
            b.writeUint32(this.score);
        }
        read(b) {
            this.id = b.readUint32();
            this.headUrl = b.readUTFString();
            this.name = b.readUTFString();
            this.lv = b.readUint16();
            this.plus = b.readUint32();
            this.rank = b.readUint16();
            this.accountId = b.readUint32();
            this.titleId = b.readUint8();
            this.score = b.readUint32();
        }
    }
    class JjcList_req {
        constructor() {
            this.protoid = 3059;
        }
        write(b) {
        }
    }
    class JjcList_revc {
        constructor() {
            this.protoid = 3060;
        }
        read(b) {
            let len;
            this.playerList = this.playerList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stJjcPlayer();
                item.read(b);
                this.playerList.push(item);
            }
        }
    }
    class JjcRefreshList_req {
        constructor() {
            this.protoid = 3061;
        }
        write(b) {
        }
    }
    class JjcRefreshList_revc {
        constructor() {
            this.protoid = 3062;
        }
        read(b) {
            let len;
            this.playerList = this.playerList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stJjcPlayer();
                item.read(b);
                this.playerList.push(item);
            }
        }
    }
    class JjcInfo_revc {
        constructor() {
            this.protoid = 3065;
        }
        read(b) {
            this.fightRefreshTime = b.readUint32();
        }
    }
    class JjcFight_req {
        constructor() {
            this.protoid = 3066;
        }
        write(b) {
            b.writeUint32(this.playerId);
        }
    }
    class JjcFight_revc {
        constructor() {
            this.protoid = 3067;
            this.fightVo = new stFightVo();
            this.enemyInfo = new stJjcPlayer();
        }
        read(b) {
            this.type = b.readUint8();
            this.fightVo.read(b);
            this.win = b.readUint8();
            this.upval = b.readInt16();
            this.downval = b.readInt16();
            this.enemyInfo.read(b);
        }
    }
    class stJjcLog {
        constructor() { }
        write(b) {
            b.writeUint32(this.time);
            b.writeUint8(this.atk);
            b.writeUTFString(this.playerName || "");
            b.writeUint16(this.rank);
            b.writeInt16(this.changeVal);
            b.writeUTFString(this.headUrl || "");
            b.writeUint32(this.plus);
            b.writeUint8(this.win);
        }
        read(b) {
            this.time = b.readUint32();
            this.atk = b.readUint8();
            this.playerName = b.readUTFString();
            this.rank = b.readUint16();
            this.changeVal = b.readInt16();
            this.headUrl = b.readUTFString();
            this.plus = b.readUint32();
            this.win = b.readUint8();
        }
    }
    class JjcFightLog_req {
        constructor() {
            this.protoid = 3068;
        }
        write(b) {
        }
    }
    class JjcFightLog_revc {
        constructor() {
            this.protoid = 3069;
        }
        read(b) {
            let len;
            this.loglist = this.loglist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stJjcLog();
                item.read(b);
                this.loglist.push(item);
            }
        }
    }
    class WatchPlayerInfo_req {
        constructor() {
            this.protoid = 3070;
        }
        write(b) {
            b.writeUint32(this.playerId);
        }
    }
    class stRideInfo {
        constructor() {
            this.baseInfo = new stRideVo();
        }
        write(b) {
            let len;
            this.baseInfo.write(b);
            this.attr = this.attr || [];
            len = this.attr.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.attr[i].write(b);
            }
        }
        read(b) {
            let len;
            this.baseInfo.read(b);
            this.attr = this.attr || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipItem();
                item.read(b);
                this.attr.push(item);
            }
        }
    }
    class stWing {
        constructor() { }
        write(b) {
            b.writeUint32(this.wingId);
            b.writeUint32(this.stage);
            b.writeUint32(this.level);
            b.writeUint32(this.treasureStage);
            b.writeUint32(this.power);
        }
        read(b) {
            this.wingId = b.readUint32();
            this.stage = b.readUint32();
            this.level = b.readUint32();
            this.treasureStage = b.readUint32();
            this.power = b.readUint32();
        }
    }
    class stGemArena {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.formationId);
            this.Gem = this.Gem || [];
            len = this.Gem.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.Gem[i].write(b);
            }
        }
        read(b) {
            let len;
            this.formationId = b.readUint8();
            this.Gem = this.Gem || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGem();
                item.read(b);
                this.Gem.push(item);
            }
        }
    }
    class stSpiritInfo {
        constructor() { }
        write(b) {
            b.writeUint8(this.spiritId);
            b.writeUint8(this.pos);
            b.writeUint8(this.level);
        }
        read(b) {
            this.spiritId = b.readUint8();
            this.pos = b.readUint8();
            this.level = b.readUint8();
        }
    }
    class stSpiritArena {
        constructor() { }
        write(b) {
            let len;
            this.spiritInfo = this.spiritInfo || [];
            len = this.spiritInfo.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.spiritInfo[i].write(b);
            }
            this.attrList = this.attrList || [];
            len = this.attrList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.attrList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.spiritInfo = this.spiritInfo || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSpiritInfo();
                item.read(b);
                this.spiritInfo.push(item);
            }
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.attrList.push(item);
            }
        }
    }
    class stGymArena {
        constructor() { }
        write(b) {
            let len;
            this.gymAttrList = this.gymAttrList || [];
            len = this.gymAttrList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.gymAttrList[i].write(b);
            }
            this.roomAttrList = this.roomAttrList || [];
            len = this.roomAttrList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.roomAttrList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.gymAttrList = this.gymAttrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.gymAttrList.push(item);
            }
            this.roomAttrList = this.roomAttrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.roomAttrList.push(item);
            }
        }
    }
    class stBlessingArena {
        constructor() { }
        write(b) {
            let len;
            this.attrList = this.attrList || [];
            len = this.attrList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.attrList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.attrList.push(item);
            }
        }
    }
    class WatchPlayerInfo_revc {
        constructor() {
            this.protoid = 3071;
            this.PlayerSkin = new stSkin();
            this.wing = new stWing();
            this.Gem = new stGemArena();
            this.Spirit = new stSpiritArena();
            this.Gym = new stGymArena();
            this.Blessing = new stBlessingArena();
        }
        read(b) {
            let len;
            this.NickName = b.readUTFString();
            this.HeadUrl = b.readUTFString();
            this.Level = b.readUint16();
            this.PlayerSkin.read(b);
            this.moneyInfo = this.moneyInfo || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.moneyInfo.push(item);
            }
            this.equipItem = this.equipItem || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipItem();
                item.read(b);
                this.equipItem.push(item);
            }
            this.wing.read(b);
            this.ride = this.ride || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stRideInfo();
                item.read(b);
                this.ride.push(item);
            }
            this.rank = b.readUint16();
            this.Gem.read(b);
            this.Artifact = this.Artifact || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stArtifact();
                item.read(b);
                this.Artifact.push(item);
            }
            this.Spirit.read(b);
            this.Gym.read(b);
            this.Blessing.read(b);
            this.bagInfo = this.bagInfo || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stItem();
                item.read(b);
                this.bagInfo.push(item);
            }
            this.bagInfoAttr = this.bagInfoAttr || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stItemEquipAttr();
                item.read(b);
                this.bagInfoAttr.push(item);
            }
            this.titleId = b.readUint8();
            this.petInfo = this.petInfo || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPet();
                item.read(b);
                this.petInfo.push(item);
            }
        }
    }
    class JjcRewardGain_req {
        constructor() {
            this.protoid = 3072;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class JjcRewardGain_revc {
        constructor() {
            this.protoid = 3073;
        }
        read(b) {
            this.day = b.readUint8();
        }
    }
    class JjcListChange_revc {
        constructor() {
            this.protoid = 3074;
        }
        read(b) {
            let len;
            this.playerList = this.playerList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stJjcPlayer();
                item.read(b);
                this.playerList.push(item);
            }
        }
    }
    class JjcBuyFightCnt_req {
        constructor() {
            this.protoid = 3075;
        }
        write(b) {
        }
    }
    class JjcBuyFightCnt_revc {
        constructor() {
            this.protoid = 3076;
        }
        read(b) {
            this.freeCnt = b.readUint32();
            this.totalCnt = b.readUint32();
            this.buyCnt = b.readUint32();
        }
    }
    class JjcMoneyUpdate_revc {
        constructor() {
            this.protoid = 3077;
        }
        read(b) {
            this.moneyVal = b.readUint32();
        }
    }
    class JjcOpen_revc {
        constructor() {
            this.protoid = 3078;
        }
        read(b) {
            this.open = b.readUint8();
        }
    }
    class JjcRankChange_revc {
        constructor() {
            this.protoid = 3079;
        }
        read(b) {
            this.rank = b.readUint16();
        }
    }
    class stTipsVo {
        constructor() { }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint8(this.open);
        }
        read(b) {
            this.type = b.readUint8();
            this.open = b.readUint8();
        }
    }
    class TipsVoList_revc {
        constructor() {
            this.protoid = 3080;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stTipsVo();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class TipsVoList_req {
        constructor() {
            this.protoid = 3081;
            this.data = new stTipsVo();
        }
        write(b) {
            this.data.write(b);
        }
    }
    class stShopItem {
        constructor() { }
        write(b) {
            b.writeUint8(this.fid);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint8();
            this.state = b.readUint8();
        }
    }
    class BuyItem_req {
        constructor() {
            this.protoid = 3082;
        }
        write(b) {
            b.writeUint16(this.fid);
            b.writeUint8(this.type);
        }
    }
    class BuyItemResult_revc {
        constructor() {
            this.protoid = 3083;
            this.data = new stShopItem();
        }
        read(b) {
            this.data.read(b);
        }
    }
    class stActivityStatus {
        constructor() { }
        write(b) {
            b.writeUint16(this.uid);
            b.writeUint8(this.status);
        }
        read(b) {
            this.uid = b.readUint16();
            this.status = b.readUint8();
        }
    }
    class stActivityCell {
        constructor() { }
        write(b) {
            b.writeUint16(this.id);
            b.writeUint8(this.param1);
        }
        read(b) {
            this.id = b.readUint16();
            this.param1 = b.readUint8();
        }
    }
    class stActivity {
        constructor() { }
        write(b) {
            let len;
            b.writeUint16(this.uid);
            b.writeUint32(this.starttime);
            b.writeUint32(this.endtime);
            this.datalist = this.datalist || [];
            len = this.datalist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.datalist[i].write(b);
            }
        }
        read(b) {
            let len;
            this.uid = b.readUint16();
            this.starttime = b.readUint32();
            this.endtime = b.readUint32();
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivityCell();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class ActivityList_revc {
        constructor() {
            this.protoid = 3084;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivity();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class ActivityChange_revc {
        constructor() {
            this.protoid = 3085;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivity();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class ActivityStatus_revc {
        constructor() {
            this.protoid = 3086;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivityStatus();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class ActivityAction_req {
        constructor() {
            this.protoid = 3087;
        }
        write(b) {
            b.writeUint16(this.uid);
            b.writeUint16(this.id);
            b.writeUTFString(this.extra || "");
        }
    }
    class stActivityRed {
        constructor() { }
        write(b) {
            b.writeUint16(this.uid);
            b.writeUint16(this.id);
            b.writeUint8(this.red);
        }
        read(b) {
            this.uid = b.readUint16();
            this.id = b.readUint16();
            this.red = b.readUint8();
        }
    }
    class ActivityRedListInit_req {
        constructor() {
            this.protoid = 3088;
        }
        write(b) {
            let len;
            this.datalist = this.datalist || [];
            len = this.datalist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.datalist[i].write(b);
            }
        }
    }
    class ActivityRedListChange_revc {
        constructor() {
            this.protoid = 3089;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivityRed();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class SaoMarkRefresh_req {
        constructor() {
            this.protoid = 3092;
        }
        write(b) {
            b.writeUint16(this.uid);
        }
    }
    class BuyWing_req {
        constructor() {
            this.protoid = 3093;
        }
        write(b) {
            b.writeUint8(this.wingId);
        }
    }
    class RechargeBill_req {
        constructor() {
            this.protoid = 3094;
        }
        write(b) {
            b.writeUint32(this.id);
        }
    }
    class RechargeBill_revc {
        constructor() {
            this.protoid = 3095;
        }
        read(b) {
            this.id = b.readUint32();
            this.val = b.readUTFString();
        }
    }
    class reloadEquip_req {
        constructor() {
            this.protoid = 3096;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint8(this.id);
        }
    }
    class stReloadEquip {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.type);
            this.dataList = this.dataList || [];
            len = this.dataList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint8(this.dataList[i]);
            }
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.dataList.push(b.readUint8());
            }
        }
    }
    class reloadEquip_revc {
        constructor() {
            this.protoid = 3097;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stReloadEquip();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class suitEquipList_revc {
        constructor() {
            this.protoid = 3098;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.datalist.push(b.readUint16());
            }
        }
    }
    class suitEquip_req {
        constructor() {
            this.protoid = 3099;
        }
        write(b) {
            b.writeUint16(this.id);
        }
    }
    class popWin_req {
        constructor() {
            this.protoid = 3101;
        }
        write(b) {
            b.writeUint16(this.uid);
        }
    }
    class stPopWin {
        constructor() { }
        write(b) {
            b.writeUint16(this.uid);
            b.writeUint32(this.time);
            b.writeUint8(this.iconStatus);
            b.writeUint32(this.iconHideTime);
        }
        read(b) {
            this.uid = b.readUint16();
            this.time = b.readUint32();
            this.iconStatus = b.readUint8();
            this.iconHideTime = b.readUint32();
        }
    }
    class popWin_revc {
        constructor() {
            this.protoid = 3102;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPopWin();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class stStyle {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint16(this.style);
        }
        read(b) {
            this.id = b.readUint8();
            this.style = b.readUint16();
        }
    }
    class StyleUpdate_revc {
        constructor() {
            this.protoid = 3103;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stStyle();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class GetEquipSkinList_req {
        constructor() {
            this.protoid = 3104;
        }
        write(b) {
        }
    }
    class ShopBoughtItems_revc {
        constructor() {
            this.protoid = 3105;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stShopItem();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class UseItem_req {
        constructor() {
            this.protoid = 3106;
        }
        write(b) {
            let len;
            b.writeUint8(this.type);
            this.itemlist = this.itemlist || [];
            len = this.itemlist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.itemlist[i].write(b);
            }
        }
    }
    class ItemNotEnoughCode_revc {
        constructor() {
            this.protoid = 3107;
        }
        read(b) {
            this.id = b.readUint32();
        }
    }
    class BoxUsedCount_revc {
        constructor() {
            this.protoid = 3108;
        }
        read(b) {
            this.val = b.readUint32();
        }
    }
    class GymInfo_revc {
        constructor() {
            this.protoid = 3109;
        }
        read(b) {
            this.curMapId = b.readUint8();
            this.mapId = b.readUint8();
        }
    }
    class GymLock_req {
        constructor() {
            this.protoid = 3110;
        }
        write(b) {
        }
    }
    class GymGoto_req {
        constructor() {
            this.protoid = 3111;
        }
        write(b) {
            b.writeUint8(this.mapId);
        }
    }
    class GymInvite_req {
        constructor() {
            this.protoid = 3112;
        }
        write(b) {
            let len;
            this.invitionIds = this.invitionIds || [];
            len = this.invitionIds.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint8(this.invitionIds[i]);
            }
            this.itemIds = this.itemIds || [];
            len = this.itemIds.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint32(this.itemIds[i]);
            }
            b.writeUint8(this.type);
        }
    }
    class stGymInvite {
        constructor() {
            this.endtime = new uint64();
            this.item = new stGymEquip();
        }
        write(b) {
            b.writeUint8(this.result);
            b.writeUint8(this.type);
            b.writeUint8(this.heroId);
            this.endtime.write(b);
            this.item.write(b);
            b.writeUint32(this.speedUpTime);
        }
        read(b) {
            this.result = b.readUint8();
            this.type = b.readUint8();
            this.heroId = b.readUint8();
            this.endtime.read(b);
            this.item.read(b);
            this.speedUpTime = b.readUint32();
        }
    }
    class stGymEquip {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.heroType);
            b.writeUint8(this.heroId);
            b.writeUint32(this.uid);
            this.itemlist = this.itemlist || [];
            len = this.itemlist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.itemlist[i].write(b);
            }
            this.attrList = this.attrList || [];
            len = this.attrList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.attrList[i].write(b);
            }
            b.writeUint16(this.degree);
        }
        read(b) {
            let len;
            this.heroType = b.readUint8();
            this.heroId = b.readUint8();
            this.uid = b.readUint32();
            this.itemlist = this.itemlist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.itemlist.push(item);
            }
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.attrList.push(item);
            }
            this.degree = b.readUint16();
        }
    }
    class GymInvite_revc {
        constructor() {
            this.protoid = 3113;
        }
        read(b) {
            let len;
            this.itemlist = this.itemlist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGymInvite();
                item.read(b);
                this.itemlist.push(item);
            }
        }
    }
    class GymForgetEquip_req {
        constructor() {
            this.protoid = 3114;
        }
        write(b) {
            b.writeUint32(this.uid);
        }
    }
    class GymSwicthEquip_req {
        constructor() {
            this.protoid = 3115;
        }
        write(b) {
            b.writeUint32(this.oldUid);
            b.writeUint32(this.newUid);
        }
    }
    class GymEquipInit_revc {
        constructor() {
            this.protoid = 3116;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGymEquip();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class GymEquipChange_revc {
        constructor() {
            this.protoid = 3117;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGymEquip();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class JjcSucceedReward_revc {
        constructor() {
            this.protoid = 3118;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.succeedRewardList = this.succeedRewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.succeedRewardList.push(item);
            }
        }
    }
    class JjcSurplusRefreshCount_revc {
        constructor() {
            this.protoid = 3119;
        }
        read(b) {
            this.val = b.readUint8();
        }
    }
    class JjcActiveRefresh_req {
        constructor() {
            this.protoid = 3120;
        }
        write(b) {
        }
    }
    class JjcWeekInfo_req {
        constructor() {
            this.protoid = 3121;
        }
        write(b) {
        }
    }
    class JjcWeekInfo_revc {
        constructor() {
            this.protoid = 3122;
        }
        read(b) {
            this.rank = b.readFloat64();
            this.rewardStatus = b.readUint8();
        }
    }
    class stGymUpgradeInfo {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.fid);
            b.writeUint16(this.taskVal);
        }
        read(b) {
            this.id = b.readUint8();
            this.fid = b.readUint8();
            this.taskVal = b.readUint16();
        }
    }
    class GymFacilityList_revc {
        constructor() {
            this.protoid = 3123;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGymUpgradeInfo();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class GymUpgrade_req {
        constructor() {
            this.protoid = 3124;
        }
        write(b) {
            b.writeUint8(this.id);
        }
    }
    class GymUpgrade_revc {
        constructor() {
            this.protoid = 3125;
            this.upgradeInfo = new stGymUpgradeInfo();
        }
        read(b) {
            this.upgradeInfo.read(b);
        }
    }
    class GymForgetEquip_revc {
        constructor() {
            this.protoid = 3126;
        }
        read(b) {
            this.uid = b.readUint32();
        }
    }
    class ActivityGetInfo_req {
        constructor() {
            this.protoid = 3127;
        }
        write(b) {
            b.writeUint32(this.uid);
        }
    }
    class GymRoomUpgrade_req {
        constructor() {
            this.protoid = 3129;
        }
        write(b) {
        }
    }
    class GymRoomLevel_revc {
        constructor() {
            this.protoid = 3130;
        }
        read(b) {
            this.level = b.readUint8();
            this.time = b.readUint32();
        }
    }
    class stGymFacilityRefinementInfo {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.wearable);
            this.attrList = this.attrList || [];
            len = this.attrList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.attrList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.wearable = b.readUint8();
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.attrList.push(item);
            }
        }
    }
    class stGymFacilityRefinement {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.id);
            this.datalist = this.datalist || [];
            len = this.datalist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.datalist[i].write(b);
            }
        }
        read(b) {
            let len;
            this.id = b.readUint8();
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGymFacilityRefinementInfo();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class GymFacilityRefinementList_revc {
        constructor() {
            this.protoid = 3131;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGymFacilityRefinement();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class GymFacilityRefinement_req {
        constructor() {
            this.protoid = 3132;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint8(this.usetype);
            b.writeUint8(this.id);
        }
    }
    class GymFacilityRefinement_revc {
        constructor() {
            this.protoid = 3133;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGymFacilityRefinement();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class stGymMission {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint16(this.count);
            b.writeUint8(this.rewardStatus);
        }
        read(b) {
            this.fid = b.readUint32();
            this.count = b.readUint16();
            this.rewardStatus = b.readUint8();
        }
    }
    class GymMissionList_revc {
        constructor() {
            this.protoid = 3134;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGymMission();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class GymMissionUpdate_revc {
        constructor() {
            this.protoid = 3135;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGymMission();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class GymMissionReward_req {
        constructor() {
            this.protoid = 3136;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class GymMissionRefresh_req {
        constructor() {
            this.protoid = 3137;
        }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint8(this.index);
        }
    }
    class BlessingMaxLevelRewards_revc {
        constructor() {
            this.protoid = 3154;
        }
        read(b) {
            let len;
            this.id = b.readUint32();
            this.level = b.readUint16();
            this.rewards = this.rewards || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stItemEquipAttr();
                item.read(b);
                this.rewards.push(item);
            }
        }
    }
    class BlessingLevel_req {
        constructor() {
            this.protoid = 3155;
        }
        write(b) {
        }
    }
    class stItem {
        constructor() {
            this.uid = new uint64();
        }
        write(b) {
            b.writeUint8(this.type);
            this.uid.write(b);
            b.writeUint32(this.id);
            b.writeUint16(this.level);
            b.writeUint16(this.pos);
            b.writeUint8(this.actionType);
            b.writeUint16(this.count);
            b.writeUint16(this.cheifId);
        }
        read(b) {
            this.type = b.readUint8();
            this.uid.read(b);
            this.id = b.readUint32();
            this.level = b.readUint16();
            this.pos = b.readUint16();
            this.actionType = b.readUint8();
            this.count = b.readUint16();
            this.cheifId = b.readUint16();
        }
    }
    class stItemEquipAttr {
        constructor() {
            this.uid = new uint64();
        }
        write(b) {
            let len;
            this.uid.write(b);
            this.attrList = this.attrList || [];
            len = this.attrList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.attrList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.uid.read(b);
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.attrList.push(item);
            }
        }
    }
    class stItemRem {
        constructor() {
            this.uid = new uint64();
        }
        write(b) {
            this.uid.write(b);
            b.writeUint8(this.type);
        }
        read(b) {
            this.uid.read(b);
            this.type = b.readUint8();
        }
    }
    class BlessingAuto_req {
        constructor() {
            this.protoid = 3157;
        }
        write(b) {
            b.writeUint8(this.qua);
            b.writeUint8(this.isFlag);
            b.writeUint8(this.isPay);
        }
    }
    class BlessingInit_revc {
        constructor() {
            this.protoid = 3158;
        }
        read(b) {
            let len;
            this.bagInfo = this.bagInfo || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stItem();
                item.read(b);
                this.bagInfo.push(item);
            }
            this.bagInfoAttr = this.bagInfoAttr || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stItemEquipAttr();
                item.read(b);
                this.bagInfoAttr.push(item);
            }
            this.startTime = b.readUint32();
            this.level = b.readUint8();
            this.count = b.readUint8();
        }
    }
    class BlessingChange_revc {
        constructor() {
            this.protoid = 3159;
        }
        read(b) {
            let len;
            this.bagInfo = this.bagInfo || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stItem();
                item.read(b);
                this.bagInfo.push(item);
            }
            this.bagInfoAttr = this.bagInfoAttr || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stItemEquipAttr();
                item.read(b);
                this.bagInfoAttr.push(item);
            }
            this.startTime = b.readUint32();
            this.count = b.readUint8();
        }
    }
    class BlessingOnce_req {
        constructor() {
            this.protoid = 3160;
        }
        write(b) {
            b.writeUint8(this.isPay);
        }
    }
    class BlessingRes_revc {
        constructor() {
            this.protoid = 3161;
        }
        read(b) {
            this.level = b.readUint8();
        }
    }
    class BlessingConvert_req {
        constructor() {
            this.protoid = 3162;
        }
        write(b) {
            let len;
            this.datalist = this.datalist || [];
            len = this.datalist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.datalist[i].write(b);
            }
        }
    }
    class BlessingWear_req {
        constructor() {
            this.protoid = 3163;
            this.uid = new uint64();
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint16(this.pos);
            this.uid.write(b);
            b.writeUint16(this.cheifId);
        }
    }
    class BlessingItemRemove_revc {
        constructor() {
            this.protoid = 3164;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stItemRem();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class BlessingSlotStatus_revc {
        constructor() {
            this.protoid = 3165;
        }
        read(b) {
            this.status = b.readUint8();
        }
    }
    class BlessingLevelUp_req {
        constructor() {
            this.protoid = 3166;
            this.uid = new uint64();
        }
        write(b) {
            this.uid.write(b);
        }
    }
    class BlessingShop_req {
        constructor() {
            this.protoid = 3167;
        }
        write(b) {
            b.writeUint32(this.id);
        }
    }
    class GymShop_req {
        constructor() {
            this.protoid = 3168;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class GymInviteGetList_req {
        constructor() {
            this.protoid = 3169;
        }
        write(b) {
        }
    }
    class stGymNpc {
        constructor() { }
        write(b) {
            b.writeUint16(this.id);
            b.writeUint16(this.degree);
        }
        read(b) {
            this.id = b.readUint16();
            this.degree = b.readUint16();
        }
    }
    class GymBondListInit_revc {
        constructor() {
            this.protoid = 3170;
        }
        read(b) {
            let len;
            this.activedFids = this.activedFids || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.activedFids.push(b.readUint32());
            }
            this.npcIds = this.npcIds || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGymNpc();
                item.read(b);
                this.npcIds.push(item);
            }
        }
    }
    class GymBond_req {
        constructor() {
            this.protoid = 3171;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class GymBondChange_revc {
        constructor() {
            this.protoid = 3172;
        }
        read(b) {
            this.fid = b.readUint32();
        }
    }
    class GymBondNpcChange_revc {
        constructor() {
            this.protoid = 3173;
            this.npcId = new stGymNpc();
        }
        read(b) {
            this.npcId.read(b);
        }
    }
    class GymInvitation_req {
        constructor() {
            this.protoid = 3175;
        }
        write(b) {
        }
    }
    class GymInvitation_revc {
        constructor() {
            this.protoid = 3176;
        }
        read(b) {
            this.nextRefreshTime = b.readUint32();
        }
    }
    class GymMissionCronRefresh_req {
        constructor() {
            this.protoid = 3177;
        }
        write(b) {
        }
    }
    class GymFacilitySummary_revc {
        constructor() {
            this.protoid = 3178;
        }
        read(b) {
            let len;
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.attrList.push(item);
            }
        }
    }
    class GymRoomSummary_revc {
        constructor() {
            this.protoid = 3179;
        }
        read(b) {
            let len;
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.attrList.push(item);
            }
        }
    }
    class stGymMapTasks {
        constructor() { }
        write(b) {
            b.writeUint32(this.taskTypeId);
            b.writeUint32(this.param);
        }
        read(b) {
            this.taskTypeId = b.readUint32();
            this.param = b.readUint32();
        }
    }
    class GymMapTasks_revc {
        constructor() {
            this.protoid = 3180;
        }
        read(b) {
            let len;
            this.list = this.list || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGymMapTasks();
                item.read(b);
                this.list.push(item);
            }
        }
    }
    class stAfk {
        constructor() {
            this.startUnix = new uint64();
            this.endUnix = new uint64();
        }
        write(b) {
            let len;
            b.writeUint8(this.level);
            this.startUnix.write(b);
            this.endUnix.write(b);
            this.rewardList = this.rewardList || [];
            len = this.rewardList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.rewardList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.level = b.readUint8();
            this.startUnix.read(b);
            this.endUnix.read(b);
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewardList.push(item);
            }
        }
    }
    class stAfkFast {
        constructor() { }
        write(b) {
            b.writeUint8(this.fastAfkVideoNum);
            b.writeUint8(this.fastAfkBuyNum);
        }
        read(b) {
            this.fastAfkVideoNum = b.readUint8();
            this.fastAfkBuyNum = b.readUint8();
        }
    }
    class stAfkInvitee {
        constructor() { }
        write(b) {
            b.writeUTFString(this.portrait || "");
            b.writeUint32(this.endUnix);
        }
        read(b) {
            this.portrait = b.readUTFString();
            this.endUnix = b.readUint32();
        }
    }
    class AfkInit_revc {
        constructor() {
            this.protoid = 3181;
            this.mianData = new stAfk();
            this.fastData = new stAfkFast();
        }
        read(b) {
            let len;
            this.mianData.read(b);
            this.fastData.read(b);
            this.inviteeData = this.inviteeData || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAfkInvitee();
                item.read(b);
                this.inviteeData.push(item);
            }
            this.packEndUnix = b.readUint32();
        }
    }
    class AfkUpdate_revc {
        constructor() {
            this.protoid = 3182;
            this.data = new stAfk();
        }
        read(b) {
            this.data.read(b);
        }
    }
    class AfkFastUpdate_revc {
        constructor() {
            this.protoid = 3183;
            this.data = new stAfkFast();
        }
        read(b) {
            this.data.read(b);
        }
    }
    class AfkInviteeUpdate_revc {
        constructor() {
            this.protoid = 3184;
            this.endUnix = new uint64();
        }
        read(b) {
            let len;
            this.inviteeList = this.inviteeList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAfkInvitee();
                item.read(b);
                this.inviteeList.push(item);
            }
            this.endUnix.read(b);
        }
    }
    class AfkReward_req {
        constructor() {
            this.protoid = 3185;
        }
        write(b) {
        }
    }
    class AfkFast_req {
        constructor() {
            this.protoid = 3186;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class AfkInviteeBuy_req {
        constructor() {
            this.protoid = 3187;
        }
        write(b) {
        }
    }
    class AfkRewardTimeUp_req {
        constructor() {
            this.protoid = 3188;
        }
        write(b) {
        }
    }
    class AfkInviteeTimeUp_req {
        constructor() {
            this.protoid = 3189;
        }
        write(b) {
        }
    }
    class AfkPackUpdate_revc {
        constructor() {
            this.protoid = 3190;
            this.endUnix = new uint64();
        }
        read(b) {
            this.packEndUnix = b.readUint32();
            this.endUnix.read(b);
        }
    }
    class AfkInvite_req {
        constructor() {
            this.protoid = 3191;
        }
        write(b) {
            b.writeUint32(this.inviterId);
        }
    }
    class AfkPackTimeUp_req {
        constructor() {
            this.protoid = 3192;
        }
        write(b) {
        }
    }
    class stItemStation {
        constructor() { }
        write(b) {
            b.writeUint8(this.pos);
            b.writeUint32(this.id);
            b.writeUint8(this.missionId);
            b.writeUint8(this.state);
            b.writeUint32(this.endUnix);
            b.writeUint32(this.destoryEndUnix);
            b.writeUint8(this.count);
            b.writeUint8(this.handlerState);
        }
        read(b) {
            this.pos = b.readUint8();
            this.id = b.readUint32();
            this.missionId = b.readUint8();
            this.state = b.readUint8();
            this.endUnix = b.readUint32();
            this.destoryEndUnix = b.readUint32();
            this.count = b.readUint8();
            this.handlerState = b.readUint8();
        }
    }
    class StationInit_revc {
        constructor() {
            this.protoid = 3193;
        }
        read(b) {
            let len;
            this.passports = b.readUint16();
            this.buyIds = this.buyIds || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.buyIds.push(b.readUint8());
            }
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stItemStation();
                item.read(b);
                this.datalist.push(item);
            }
            this.freeStationNum = b.readUint8();
        }
    }
    class StationMainChange_revc {
        constructor() {
            this.protoid = 3194;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stItemStation();
                item.read(b);
                this.datalist.push(item);
            }
            this.endUnix = b.readUint32();
            this.freeStationNum = b.readUint8();
        }
    }
    class StationRewards_req {
        constructor() {
            this.protoid = 3195;
        }
        write(b) {
            b.writeUint32(this.id);
        }
    }
    class UpgradePassportSlot_req {
        constructor() {
            this.protoid = 3196;
        }
        write(b) {
        }
    }
    class UpgradePassportSlot_revc {
        constructor() {
            this.protoid = 3197;
        }
        read(b) {
            this.passports = b.readUint16();
        }
    }
    class DelegatePage_req {
        constructor() {
            this.protoid = 3198;
        }
        write(b) {
        }
    }
    class FreshMission_req {
        constructor() {
            this.protoid = 3199;
        }
        write(b) {
        }
    }
    class stMission {
        constructor() {
            this.uid = new uint64();
        }
        write(b) {
            b.writeUint8(this.missionId);
            b.writeUint8(this.type);
            this.uid.write(b);
        }
        read(b) {
            this.missionId = b.readUint8();
            this.type = b.readUint8();
            this.uid.read(b);
        }
    }
    class MissionList_revc {
        constructor() {
            this.protoid = 3201;
        }
        read(b) {
            let len;
            this.missionList = this.missionList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMission();
                item.read(b);
                this.missionList.push(item);
            }
            this.totalStationNum = b.readUint8();
            this.freeStationNum = b.readUint8();
            this.freshTimes = b.readUint8();
            this.nextRefreshTime = b.readUint32();
            this.cd = b.readUint16();
        }
    }
    class DoMissions_req {
        constructor() {
            this.protoid = 3202;
        }
        write(b) {
            let len;
            this.missionIds = this.missionIds || [];
            len = this.missionIds.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.missionIds[i].write(b);
            }
        }
    }
    class stNewAdventure {
        constructor() { }
        write(b) {
            let len;
            b.writeUint16(this.adventureId);
            b.writeUint32(this.plus);
            this.rewardAdventureIds = this.rewardAdventureIds || [];
            len = this.rewardAdventureIds.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint16(this.rewardAdventureIds[i]);
            }
        }
        read(b) {
            let len;
            this.adventureId = b.readUint16();
            this.plus = b.readUint32();
            this.rewardAdventureIds = this.rewardAdventureIds || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.rewardAdventureIds.push(b.readUint16());
            }
        }
    }
    class NewAdventureInit_revc {
        constructor() {
            this.protoid = 3203;
            this.adventureData = new stNewAdventure();
        }
        read(b) {
            this.adventureData.read(b);
            this.cnt = b.readUint8();
        }
    }
    class NewAdventureFight_req {
        constructor() {
            this.protoid = 3204;
        }
        write(b) {
            b.writeUint32(this.adventureId);
            b.writeUint8(this.type);
        }
    }
    class NewAdventureUpdate_revc {
        constructor() {
            this.protoid = 3205;
            this.adventureData = new stNewAdventure();
        }
        read(b) {
            this.adventureData.read(b);
        }
    }
    class NewAdventureCtnUpdate_revc {
        constructor() {
            this.protoid = 3206;
        }
        read(b) {
            this.cnt = b.readUint8();
        }
    }
    class OpenStation_req {
        constructor() {
            this.protoid = 3207;
        }
        write(b) {
        }
    }
    class RecoverPassport_req {
        constructor() {
            this.protoid = 3208;
        }
        write(b) {
        }
    }
    class OpenStationNearBy_req {
        constructor() {
            this.protoid = 3209;
        }
        write(b) {
        }
    }
    class OpenStationNearBy_revc {
        constructor() {
            this.protoid = 3210;
        }
        read(b) {
            let len;
            this.pillages = b.readUint8();
            this.passportsFromDestory = b.readUint8();
            this.cd = b.readUint16();
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stStationNearBy();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class FreshStationNearBy_req {
        constructor() {
            this.protoid = 3211;
        }
        write(b) {
        }
    }
    class stStationNearBy {
        constructor() { }
        write(b) {
            let len;
            b.writeUint32(this.playerId);
            b.writeUint8(this.isRealPlayer);
            b.writeUTFString(this.nickName || "");
            b.writeUTFString(this.headUrl || "");
            b.writeUint8(this.totalNum);
            b.writeUint8(this.underwayNum);
            this.datalist = this.datalist || [];
            len = this.datalist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.datalist[i].write(b);
            }
        }
        read(b) {
            let len;
            this.playerId = b.readUint32();
            this.isRealPlayer = b.readUint8();
            this.nickName = b.readUTFString();
            this.headUrl = b.readUTFString();
            this.totalNum = b.readUint8();
            this.underwayNum = b.readUint8();
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stItemStation();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class StationNearByDetail_req {
        constructor() {
            this.protoid = 3212;
        }
        write(b) {
            b.writeUint32(this.playerId);
            b.writeUint8(this.isRealPlayer);
            b.writeUint8(this.type);
        }
    }
    class StationOtherChange_revc {
        constructor() {
            this.protoid = 3213;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stItemStation();
                item.read(b);
                this.datalist.push(item);
            }
            this.name = b.readUTFString();
            this.flag = b.readUint8();
            this.playerId = b.readUint32();
            this.isRealPlayer = b.readUint8();
        }
    }
    class HandleStationNearBy_req {
        constructor() {
            this.protoid = 3214;
        }
        write(b) {
            b.writeUint8(this.flag);
            b.writeUint32(this.id);
        }
    }
    class RemarkStationNearBy_req {
        constructor() {
            this.protoid = 3215;
        }
        write(b) {
            b.writeUint32(this.playerId);
            b.writeUint8(this.isRealPlayer);
        }
    }
    class RemarkStationList_req {
        constructor() {
            this.protoid = 3216;
        }
        write(b) {
        }
    }
    class RemarkStationList_revc {
        constructor() {
            this.protoid = 3217;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stStationNearBy();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class RemRemarkStationNearBy_req {
        constructor() {
            this.protoid = 3218;
        }
        write(b) {
            b.writeUint32(this.playerId);
            b.writeUint8(this.isRealPlayer);
        }
    }
    class HandleStationLogs_req {
        constructor() {
            this.protoid = 3219;
        }
        write(b) {
        }
    }
    class HandleStationLogs_revc {
        constructor() {
            this.protoid = 3220;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stStationHandleLog();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class stStationHandleLog {
        constructor() { }
        write(b) {
            let len;
            b.writeUint32(this.logId);
            b.writeUint32(this.playerId);
            b.writeUint8(this.isRealPlayer);
            b.writeUTFString(this.nickName || "");
            b.writeUTFString(this.headUrl || "");
            b.writeUint8(this.flag);
            b.writeUint8(this.isWho);
            b.writeUint32(this.logUnix);
            this.rewards = this.rewards || [];
            len = this.rewards.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.rewards[i].write(b);
            }
        }
        read(b) {
            let len;
            this.logId = b.readUint32();
            this.playerId = b.readUint32();
            this.isRealPlayer = b.readUint8();
            this.nickName = b.readUTFString();
            this.headUrl = b.readUTFString();
            this.flag = b.readUint8();
            this.isWho = b.readUint8();
            this.logUnix = b.readUint32();
            this.rewards = this.rewards || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewards.push(item);
            }
        }
    }
    class HandleStationRevenge_req {
        constructor() {
            this.protoid = 3221;
        }
        write(b) {
            b.writeUint32(this.logId);
        }
    }
    class StationBySlot_req {
        constructor() {
            this.protoid = 3222;
        }
        write(b) {
            b.writeUint8(this.id);
        }
    }
    class stSpirit {
        constructor() { }
        write(b) {
            let len;
            b.writeUint32(this.uid);
            b.writeUint8(this.spiritId);
            b.writeUint8(this.pos);
            b.writeUint8(this.wearable);
            b.writeUint8(this.qualityId);
            b.writeUint8(this.level);
            b.writeUint32(this.exp);
            this.attrList = this.attrList || [];
            len = this.attrList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.attrList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.uid = b.readUint32();
            this.spiritId = b.readUint8();
            this.pos = b.readUint8();
            this.wearable = b.readUint8();
            this.qualityId = b.readUint8();
            this.level = b.readUint8();
            this.exp = b.readUint32();
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.attrList.push(item);
            }
        }
    }
    class SpiritList_revc {
        constructor() {
            this.protoid = 3223;
        }
        read(b) {
            let len;
            this.spiritList = this.spiritList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSpirit();
                item.read(b);
                this.spiritList.push(item);
            }
        }
    }
    class SpiritQuickWear_req {
        constructor() {
            this.protoid = 3224;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class SpiritListUpdate_revc {
        constructor() {
            this.protoid = 3225;
        }
        read(b) {
            let len;
            this.spiritList = this.spiritList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSpirit();
                item.read(b);
                this.spiritList.push(item);
            }
        }
    }
    class SpiritListDel_revc {
        constructor() {
            this.protoid = 3226;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.datalist.push(b.readUint32());
            }
        }
    }
    class SpiritUpgrade_req {
        constructor() {
            this.protoid = 3227;
        }
        write(b) {
            let len;
            b.writeUint32(this.uid);
            this.datalist = this.datalist || [];
            len = this.datalist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint32(this.datalist[i]);
            }
        }
    }
    class SpiritWear_req {
        constructor() {
            this.protoid = 3228;
        }
        write(b) {
            b.writeUint32(this.oldUid);
            b.writeUint32(this.newUid);
        }
    }
    class SpiritUnwear_req {
        constructor() {
            this.protoid = 3229;
        }
        write(b) {
            b.writeUint32(this.uid);
        }
    }
    class NewAdventureRewardUpdate_revc {
        constructor() {
            this.protoid = 3230;
        }
        read(b) {
            let len;
            this.rewardAdventureIds = this.rewardAdventureIds || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.rewardAdventureIds.push(b.readUint16());
            }
        }
    }
    class StationDaliyInfo_revc {
        constructor() {
            this.protoid = 3231;
        }
        read(b) {
            this.pillages = b.readUint8();
            this.passportsFromDestory = b.readUint8();
        }
    }
    class StationBuy_req {
        constructor() {
            this.protoid = 3232;
        }
        write(b) {
            b.writeUint8(this.id);
        }
    }
    class StationBuy_revc {
        constructor() {
            this.protoid = 3233;
        }
        read(b) {
            let len;
            this.buyIds = this.buyIds || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.buyIds.push(b.readUint8());
            }
            this.freeStationNum = b.readUint8();
        }
    }
    class AfkRefresh_req {
        constructor() {
            this.protoid = 3234;
        }
        write(b) {
        }
    }
    class PurchasePriceSucceed_revc {
        constructor() {
            this.protoid = 3235;
        }
        read(b) {
            this.f_id = b.readUint32();
        }
    }
    class stSmashFightLang {
        constructor() { }
        write(b) {
            b.writeUint8(this.type);
            b.writeUTFString(this.lang || "");
        }
        read(b) {
            this.type = b.readUint8();
            this.lang = b.readUTFString();
        }
    }
    class stSmashFight {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.type);
            this.langList = this.langList || [];
            len = this.langList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.langList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.langList = this.langList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSmashFightLang();
                item.read(b);
                this.langList.push(item);
            }
        }
    }
    class stSmashTopWinner {
        constructor() { }
        write(b) {
            b.writeUint8(this.position);
            b.writeUTFString(this.name || "");
            b.writeUTFString(this.portrait || "");
            b.writeUint8(this.streakTimes);
            b.writeUint16(this.level);
            b.writeUint8(this.titleId);
        }
        read(b) {
            this.position = b.readUint8();
            this.name = b.readUTFString();
            this.portrait = b.readUTFString();
            this.streakTimes = b.readUint8();
            this.level = b.readUint16();
            this.titleId = b.readUint8();
        }
    }
    class stSmashFightResult {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.streakTimes);
            b.writeUint8(this.winTimes);
            this.rewardList = this.rewardList || [];
            len = this.rewardList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.rewardList[i].write(b);
            }
            this.onlineRewardList = this.onlineRewardList || [];
            len = this.onlineRewardList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.onlineRewardList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.streakTimes = b.readUint8();
            this.winTimes = b.readUint8();
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewardList.push(item);
            }
            this.onlineRewardList = this.onlineRewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.onlineRewardList.push(item);
            }
        }
    }
    class SmashInit_revc {
        constructor() {
            this.protoid = 3236;
            this.fightResult = new stSmashFightResult();
        }
        read(b) {
            let len;
            this.isEnroll = b.readUint8();
            this.isReward = b.readUint8();
            this.openType = b.readUint8();
            this.smashFightList = this.smashFightList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSmashFight();
                item.read(b);
                this.smashFightList.push(item);
            }
            this.smashTopWinnerList = this.smashTopWinnerList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSmashTopWinner();
                item.read(b);
                this.smashTopWinnerList.push(item);
            }
            this.fightResult.read(b);
            this.time = b.readUint32();
            this.crossServers = this.crossServers || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.crossServers.push(b.readUint16());
            }
            this.crossTime = b.readUint32();
        }
    }
    class SmashEnroll_req {
        constructor() {
            this.protoid = 3237;
        }
        write(b) {
        }
    }
    class SmashEnroll_revc {
        constructor() {
            this.protoid = 3238;
        }
        read(b) {
        }
    }
    class SmashFightOpenReq_req {
        constructor() {
            this.protoid = 3239;
        }
        write(b) {
        }
    }
    class SmashFightUpdataRep_req {
        constructor() {
            this.protoid = 3240;
        }
        write(b) {
            b.writeUint8(this.round);
        }
    }
    class SmashUpdate_revc {
        constructor() {
            this.protoid = 3241;
            this.fightResult = new stSmashFightResult();
        }
        read(b) {
            let len;
            this.smashFightList = this.smashFightList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSmashFight();
                item.read(b);
                this.smashFightList.push(item);
            }
            this.smashTopWinnerList = this.smashTopWinnerList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSmashTopWinner();
                item.read(b);
                this.smashTopWinnerList.push(item);
            }
            this.fightResult.read(b);
            this.time = b.readUint32();
        }
    }
    class stServerItem {
        constructor() { }
        write(b) {
            b.writeUTFString(this.serverName || "");
            b.writeUTFString(this.naming || "");
            b.writeUint32(this.serverID);
            b.writeUint8(this.serverState);
            b.writeUint8(this.isNew);
            b.writeUint8(this.roleLevel);
            b.writeUTFString(this.roleName || "");
        }
        read(b) {
            this.serverName = b.readUTFString();
            this.naming = b.readUTFString();
            this.serverID = b.readUint32();
            this.serverState = b.readUint8();
            this.isNew = b.readUint8();
            this.roleLevel = b.readUint8();
            this.roleName = b.readUTFString();
        }
    }
    class ServerNumReq_req {
        constructor() {
            this.protoid = 3242;
        }
        write(b) {
        }
    }
    class ServerNumRevc_revc {
        constructor() {
            this.protoid = 3243;
        }
        read(b) {
            this.serverZu = b.readUint8();
        }
    }
    class ServerListReq_req {
        constructor() {
            this.protoid = 3244;
        }
        write(b) {
            b.writeUint16(this.serverZuID);
        }
    }
    class ServerListRevc_revc {
        constructor() {
            this.protoid = 3245;
        }
        read(b) {
            let len;
            this.serverItems = this.serverItems || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stServerItem();
                item.read(b);
                this.serverItems.push(item);
            }
        }
    }
    class SelectServerIDReq_req {
        constructor() {
            this.protoid = 3246;
        }
        write(b) {
            b.writeUint32(this.serverID);
        }
    }
    class SelectServerIDRevc_revc {
        constructor() {
            this.protoid = 3247;
        }
        read(b) {
            this.ret = b.readUint8();
        }
    }
    class SmashStateUpdate_revc {
        constructor() {
            this.protoid = 3248;
        }
        read(b) {
            this.openType = b.readUint8();
        }
    }
    class SmashFight_revc {
        constructor() {
            this.protoid = 3249;
        }
        read(b) {
            this.round = b.readUint8();
        }
    }
    class Success_revc {
        constructor() {
            this.protoid = 3250;
        }
        read(b) {
            this.reason = b.readUint16();
        }
    }
    class BlessingAutoZH_revc_revc {
        constructor() {
            this.protoid = 3251;
        }
        read(b) {
            let len;
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewardList.push(item);
            }
        }
    }
    class wxLogin_req {
        constructor() {
            this.protoid = 3252;
        }
        write(b) {
            b.writeUTFString(this.appid || "");
            b.writeUTFString(this.openid || "");
            b.writeUTFString(this.distinctId || "");
            b.writeUTFString(this.token || "");
            b.writeUint8(this.type);
            b.writeUint16(this.scene);
            b.writeUint32(this.inviterId);
            b.writeUint32(this.tunnelId);
        }
    }
    class wxPlayerInfo_req {
        constructor() {
            this.protoid = 3253;
        }
        write(b) {
            b.writeUTFString(this.nickName || "");
            b.writeUTFString(this.portrait || "");
        }
    }
    class stDingYue {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.type);
        }
        read(b) {
            this.id = b.readUint8();
            this.type = b.readUint8();
        }
    }
    class DingYueReq_req {
        constructor() {
            this.protoid = 3254;
        }
        write(b) {
        }
    }
    class DingYueRevc_revc {
        constructor() {
            this.protoid = 3255;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.dyList = this.dyList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDingYue();
                item.read(b);
                this.dyList.push(item);
            }
        }
    }
    class DingYueSelectReq_req {
        constructor() {
            this.protoid = 3256;
        }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.type);
        }
    }
    class DingYueSelectRevc_revc {
        constructor() {
            this.protoid = 3257;
        }
        read(b) {
            this.id = b.readUint8();
            this.type = b.readUint8();
        }
    }
    class ConfigHash_revc {
        constructor() {
            this.protoid = 3258;
        }
        read(b) {
            this.val = b.readUTFString();
        }
    }
    class GymPack_revc {
        constructor() {
            this.protoid = 3259;
        }
        read(b) {
            this.type = b.readUint8();
            this.day = b.readUint16();
            this.tryout = b.readUint8();
        }
    }
    class reloadEquipUpdate_revc {
        constructor() {
            this.protoid = 3260;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stReloadEquip();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class weeklyReward_revc {
        constructor() {
            this.protoid = 3261;
        }
        read(b) {
            this.time = b.readUint32();
        }
    }
    class ServerVersion_revc {
        constructor() {
            this.protoid = 3262;
        }
        read(b) {
            this.val = b.readUTFString();
        }
    }
    class stMail {
        constructor() { }
        write(b) {
            let len;
            b.writeUint32(this.uid);
            b.writeUTFString(this.title || "");
            b.writeUTFString(this.content || "");
            b.writeUint16(this.templateId);
            this.params = this.params || [];
            len = this.params.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUTFString(this.params[i] || "");
            }
            this.itemlist = this.itemlist || [];
            len = this.itemlist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.itemlist[i].write(b);
            }
            b.writeUint8(this.state);
            b.writeUint32(this.time);
        }
        read(b) {
            let len;
            this.uid = b.readUint32();
            this.title = b.readUTFString();
            this.content = b.readUTFString();
            this.templateId = b.readUint16();
            this.params = this.params || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.params.push(b.readUTFString());
            }
            this.itemlist = this.itemlist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.itemlist.push(item);
            }
            this.state = b.readUint8();
            this.time = b.readUint32();
        }
    }
    class MailRed_revc {
        constructor() {
            this.protoid = 3263;
        }
        read(b) {
            this.red = b.readUint8();
        }
    }
    class MailList_req {
        constructor() {
            this.protoid = 3264;
        }
        write(b) {
            b.writeUint32(this.uid);
            b.writeUint8(this.type);
        }
    }
    class MailList_revc {
        constructor() {
            this.protoid = 3265;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMail();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class GymMissionRefreshUpdate_revc {
        constructor() {
            this.protoid = 3266;
            this.mission = new stGymMission();
        }
        read(b) {
            this.index = b.readUint8();
            this.mission.read(b);
        }
    }
    class stRedDot {
        constructor() { }
        write(b) {
            b.writeUint32(this.type);
            b.writeUint16(this.id);
        }
        read(b) {
            this.type = b.readUint32();
            this.id = b.readUint16();
        }
    }
    class RedDotUpdate_revc {
        constructor() {
            this.protoid = 3267;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stRedDot();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class RedDotUpdate_req {
        constructor() {
            this.protoid = 3268;
        }
        write(b) {
            let len;
            this.datalist = this.datalist || [];
            len = this.datalist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.datalist[i].write(b);
            }
        }
    }
    class RedDotDel_req {
        constructor() {
            this.protoid = 3269;
        }
        write(b) {
            let len;
            this.datalist = this.datalist || [];
            len = this.datalist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint16(this.datalist[i]);
            }
        }
    }
    class GmResult_revc {
        constructor() {
            this.protoid = 3270;
        }
        read(b) {
            this.result = b.readUTFString();
        }
    }
    class stAdCd {
        constructor() { }
        write(b) {
            b.writeUint8(this.pos);
            b.writeUint32(this.endUnix);
            b.writeUint8(this.times);
        }
        read(b) {
            this.pos = b.readUint8();
            this.endUnix = b.readUint32();
            this.times = b.readUint8();
        }
    }
    class AdCdInit_revc {
        constructor() {
            this.protoid = 3271;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAdCd();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class AdCdChange_revc {
        constructor() {
            this.protoid = 3272;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAdCd();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class AdWatchDone_req {
        constructor() {
            this.protoid = 3273;
        }
        write(b) {
            b.writeUint8(this.pos);
        }
    }
    class JjcRankDrop_revc {
        constructor() {
            this.protoid = 3274;
        }
        read(b) {
            this.rank = b.readUint16();
        }
    }
    class SignStatus_revc {
        constructor() {
            this.protoid = 3275;
        }
        read(b) {
            this.val = b.readUint8();
            this.isNew = b.readUint8();
        }
    }
    class SignStatus_req {
        constructor() {
            this.protoid = 3276;
        }
        write(b) {
        }
    }
    class MonthCard_revc {
        constructor() {
            this.protoid = 3277;
        }
        read(b) {
            this.val = b.readUint8();
            this.subday = b.readUint16();
        }
    }
    class MonthCardGet_req {
        constructor() {
            this.protoid = 3278;
        }
        write(b) {
        }
    }
    class AllLifeCard_revc {
        constructor() {
            this.protoid = 3279;
        }
        read(b) {
            this.val = b.readUint8();
        }
    }
    class AllLifeCardGet_req {
        constructor() {
            this.protoid = 3280;
        }
        write(b) {
        }
    }
    class stGem {
        constructor() {
            this.uid = new uint64();
        }
        write(b) {
            b.writeUint8(this.type);
            this.uid.write(b);
            b.writeUint8(this.id);
            b.writeUint16(this.level);
            b.writeUint16(this.pos);
        }
        read(b) {
            this.type = b.readUint8();
            this.uid.read(b);
            this.id = b.readUint8();
            this.level = b.readUint16();
            this.pos = b.readUint16();
        }
    }
    class stGemLifeBlood {
        constructor() { }
        write(b) {
            b.writeUint16(this.id);
            b.writeUint8(this.state);
        }
        read(b) {
            this.id = b.readUint16();
            this.state = b.readUint8();
        }
    }
    class GemInit_revc {
        constructor() {
            this.protoid = 3281;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGem();
                item.read(b);
                this.datalist.push(item);
            }
            this.formationIds = this.formationIds || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.formationIds.push(b.readUint8());
            }
            this.defaultFormationId = b.readUint8();
            this.nextFreeUnix = b.readUint32();
            this.freeCount = b.readUint8();
            this.lifeBloodList = this.lifeBloodList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGemLifeBlood();
                item.read(b);
                this.lifeBloodList.push(item);
            }
        }
    }
    class GemBuy_req {
        constructor() {
            this.protoid = 3282;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint8(this.id);
            b.writeUint16(this.num);
        }
    }
    class GemBuy_revc {
        constructor() {
            this.protoid = 3283;
        }
        read(b) {
        }
    }
    class stGemItem {
        constructor() { }
        write(b) {
            b.writeUint16(this.itemId);
            b.writeUint16(this.num);
        }
        read(b) {
            this.itemId = b.readUint16();
            this.num = b.readUint16();
        }
    }
    class GemHandler_req {
        constructor() {
            this.protoid = 3284;
        }
        write(b) {
            let len;
            b.writeUint8(this.type);
            this.uids = this.uids || [];
            len = this.uids.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.uids[i].write(b);
            }
            b.writeUint16(this.itemId);
            this.items = this.items || [];
            len = this.items.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.items[i].write(b);
            }
        }
    }
    class GemChange_revc {
        constructor() {
            this.protoid = 3285;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGem();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class GemRemove_revc {
        constructor() {
            this.protoid = 3286;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new uint64();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class GemFormationWear_req {
        constructor() {
            this.protoid = 3287;
            this.uid = new uint64();
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint16(this.pos);
            this.uid.write(b);
        }
    }
    class GemFormationBuy_req {
        constructor() {
            this.protoid = 3288;
        }
        write(b) {
            b.writeUint8(this.id);
        }
    }
    class GemFormationBuy_revc {
        constructor() {
            this.protoid = 3289;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.datalist.push(b.readUint8());
            }
        }
    }
    class GemFormationChange_req {
        constructor() {
            this.protoid = 3290;
        }
        write(b) {
            b.writeUint8(this.id);
        }
    }
    class GemFormationChange_revc {
        constructor() {
            this.protoid = 3291;
        }
        read(b) {
            this.defaultFormationId = b.readUint8();
        }
    }
    class stNotice {
        constructor() { }
        write(b) {
            let len;
            b.writeUint32(this.uid);
            b.writeUint8(this.type);
            b.writeUint8(this.frequent);
            b.writeUTFString(this.title || "");
            b.writeUTFString(this.content || "");
            b.writeUint8(this.templateId);
            this.params = this.params || [];
            len = this.params.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUTFString(this.params[i] || "");
            }
            b.writeUint32(this.time);
        }
        read(b) {
            let len;
            this.uid = b.readUint32();
            this.type = b.readUint8();
            this.frequent = b.readUint8();
            this.title = b.readUTFString();
            this.content = b.readUTFString();
            this.templateId = b.readUint8();
            this.params = this.params || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.params.push(b.readUTFString());
            }
            this.time = b.readUint32();
        }
    }
    class NoticeList_revc {
        constructor() {
            this.protoid = 3292;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stNotice();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class GemHandler_revc {
        constructor() {
            this.protoid = 3293;
            this.handlerAfter = new stGem();
        }
        read(b) {
            this.type = b.readUint8();
            this.handlerAfter.read(b);
        }
    }
    class stArtifact {
        constructor() { }
        write(b) {
            b.writeUint8(this.artifactId);
            b.writeUint8(this.level);
            b.writeUint8(this.wearable);
        }
        read(b) {
            this.artifactId = b.readUint8();
            this.level = b.readUint8();
            this.wearable = b.readUint8();
        }
    }
    class ArtifactList_revc {
        constructor() {
            this.protoid = 3294;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stArtifact();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class OpenArtifactBox_req {
        constructor() {
            this.protoid = 3295;
        }
        write(b) {
            b.writeUint8(this.flag);
        }
    }
    class OpenArtifactBox_revc {
        constructor() {
            this.protoid = 3296;
            this.item = new stCellValue();
        }
        read(b) {
            this.item.read(b);
        }
    }
    class ArtifactHandler_req {
        constructor() {
            this.protoid = 3297;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint8(this.itemId);
        }
    }
    class ArtifactUpdate_revc {
        constructor() {
            this.protoid = 3298;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stArtifact();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class stArtifactLog {
        constructor() {
            this.item = new stCellValue();
        }
        write(b) {
            this.item.write(b);
            b.writeUint32(this.time);
        }
        read(b) {
            this.item.read(b);
            this.time = b.readUint32();
        }
    }
    class ArtifactLogList_req {
        constructor() {
            this.protoid = 3299;
        }
        write(b) {
        }
    }
    class ArtifactLogList_revc {
        constructor() {
            this.protoid = 3300;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stArtifactLog();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class LabourPackGet_req {
        constructor() {
            this.protoid = 3301;
        }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.type);
        }
    }
    class LabourPackBuy_req {
        constructor() {
            this.protoid = 3302;
        }
        write(b) {
            b.writeUint32(this.id);
            b.writeUint8(this.type);
        }
    }
    class LabourCapsuleToys_req {
        constructor() {
            this.protoid = 3303;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class LabourExchange_req {
        constructor() {
            this.protoid = 3304;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class LabourShop_req {
        constructor() {
            this.protoid = 3305;
        }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.type);
        }
    }
    class stLabourShop {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.num);
        }
        read(b) {
            this.id = b.readUint8();
            this.num = b.readUint8();
        }
    }
    class stLabourItemRed {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.num);
        }
        read(b) {
            this.id = b.readUint8();
            this.num = b.readUint8();
        }
    }
    class LabourShopInit_revc {
        constructor() {
            this.protoid = 3306;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stLabourShop();
                item.read(b);
                this.datalist.push(item);
            }
            this.datalistFree = this.datalistFree || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stLabourShop();
                item.read(b);
                this.datalistFree.push(item);
            }
            this.todayTicketNum = b.readUint8();
            this.redDatalist = this.redDatalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stLabourItemRed();
                item.read(b);
                this.redDatalist.push(item);
            }
            this.baodi = b.readUint8();
            this.type = b.readUint8();
        }
    }
    class LabourShopChange_revc {
        constructor() {
            this.protoid = 3307;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stLabourShop();
                item.read(b);
                this.datalist.push(item);
            }
            this.type = b.readUint8();
        }
    }
    class stArtifactPack {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.num);
        }
        read(b) {
            this.id = b.readUint8();
            this.num = b.readUint8();
        }
    }
    class ArtifactPackList_revc {
        constructor() {
            this.protoid = 3308;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stArtifactPack();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class ArtifactPackUpdate_revc {
        constructor() {
            this.protoid = 3309;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stArtifactPack();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class ArtifactPack_req {
        constructor() {
            this.protoid = 3310;
        }
        write(b) {
            b.writeUint8(this.id);
        }
    }
    class stLabourCapsuleToys {
        constructor() { }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint32(this.id);
            b.writeUint32(this.count);
        }
        read(b) {
            this.type = b.readUint8();
            this.id = b.readUint32();
            this.count = b.readUint32();
        }
    }
    class LabourCapsuleToys_revc {
        constructor() {
            this.protoid = 3311;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stLabourCapsuleToys();
                item.read(b);
                this.datalist.push(item);
            }
            this.type = b.readUint8();
        }
    }
    class LabourTicket_revc {
        constructor() {
            this.protoid = 3312;
        }
        read(b) {
            this.num = b.readUint8();
            this.type = b.readUint8();
        }
    }
    class LabourItemRedChange_revc {
        constructor() {
            this.protoid = 3313;
        }
        read(b) {
            let len;
            this.redDatalist = this.redDatalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stLabourItemRed();
                item.read(b);
                this.redDatalist.push(item);
            }
            this.type = b.readUint8();
        }
    }
    class LabourBaodiLeft_revc {
        constructor() {
            this.protoid = 3314;
        }
        read(b) {
            this.baodi = b.readUint8();
            this.type = b.readUint8();
        }
    }
    class refreshItems_req {
        constructor() {
            this.protoid = 3315;
        }
        write(b) {
            let len;
            this.items = this.items || [];
            len = this.items.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint8(this.items[i]);
            }
        }
    }
    class dailyReward_revc {
        constructor() {
            this.protoid = 3316;
        }
        read(b) {
            this.time = b.readUint32();
        }
    }
    class BoxAuto_req {
        constructor() {
            this.protoid = 3317;
        }
        write(b) {
            b.writeUint8(this.boxNum);
        }
    }
    class BoxAuto_revc {
        constructor() {
            this.protoid = 3318;
        }
        read(b) {
            this.open = b.readUint8();
            this.rate = b.readUint8();
        }
    }
    class PeakJjcList_req {
        constructor() {
            this.protoid = 3319;
        }
        write(b) {
        }
    }
    class PeakJjcList_revc {
        constructor() {
            this.protoid = 3320;
        }
        read(b) {
            let len;
            this.playerList = this.playerList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stJjcPlayer();
                item.read(b);
                this.playerList.push(item);
            }
        }
    }
    class PeakJjcRefreshList_req {
        constructor() {
            this.protoid = 3321;
        }
        write(b) {
        }
    }
    class PeakJjcRefreshList_revc {
        constructor() {
            this.protoid = 3322;
        }
        read(b) {
            let len;
            this.playerList = this.playerList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stJjcPlayer();
                item.read(b);
                this.playerList.push(item);
            }
        }
    }
    class PeakJjcInfo_revc {
        constructor() {
            this.protoid = 3323;
        }
        read(b) {
            this.fightRefreshTime = b.readUint32();
            this.redFeatherVal = b.readUint32();
        }
    }
    class PeakJjcFight_req {
        constructor() {
            this.protoid = 3324;
        }
        write(b) {
            b.writeUint32(this.playerId);
        }
    }
    class PeakJjcFightLog_req {
        constructor() {
            this.protoid = 3326;
        }
        write(b) {
        }
    }
    class PeakJjcFightLog_revc {
        constructor() {
            this.protoid = 3327;
        }
        read(b) {
            let len;
            this.loglist = this.loglist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stJjcLog();
                item.read(b);
                this.loglist.push(item);
            }
        }
    }
    class PeakWatchPlayerInfo_req {
        constructor() {
            this.protoid = 3328;
        }
        write(b) {
            b.writeUint32(this.playerId);
        }
    }
    class PeakWatchPlayerInfo_revc {
        constructor() {
            this.protoid = 3329;
            this.PlayerSkin = new stSkin();
            this.wing = new stWing();
            this.Gem = new stGemArena();
            this.Spirit = new stSpiritArena();
            this.Gym = new stGymArena();
            this.Blessing = new stBlessingArena();
        }
        read(b) {
            let len;
            this.NickName = b.readUTFString();
            this.HeadUrl = b.readUTFString();
            this.Level = b.readUint16();
            this.PlayerSkin.read(b);
            this.moneyInfo = this.moneyInfo || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.moneyInfo.push(item);
            }
            this.equipItem = this.equipItem || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipItem();
                item.read(b);
                this.equipItem.push(item);
            }
            this.wing.read(b);
            this.ride = this.ride || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stRideInfo();
                item.read(b);
                this.ride.push(item);
            }
            this.rank = b.readUint16();
            this.Gem.read(b);
            this.Artifact = this.Artifact || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stArtifact();
                item.read(b);
                this.Artifact.push(item);
            }
            this.Spirit.read(b);
            this.Gym.read(b);
            this.Blessing.read(b);
        }
    }
    class PeakJjcRewardGain_req {
        constructor() {
            this.protoid = 3330;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class PeakJjcRewardGain_revc {
        constructor() {
            this.protoid = 3331;
        }
        read(b) {
            this.day = b.readUint8();
        }
    }
    class PeakJjcListChange_revc {
        constructor() {
            this.protoid = 3332;
        }
        read(b) {
            let len;
            this.playerList = this.playerList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stJjcPlayer();
                item.read(b);
                this.playerList.push(item);
            }
        }
    }
    class PeakJjcBuyFightCnt_req {
        constructor() {
            this.protoid = 3333;
        }
        write(b) {
        }
    }
    class PeakJjcBuyFightCnt_revc {
        constructor() {
            this.protoid = 3334;
        }
        read(b) {
            this.freeCnt = b.readUint32();
            this.totalCnt = b.readUint32();
            this.buyCnt = b.readUint32();
        }
    }
    class PeakJjcOpen_revc {
        constructor() {
            this.protoid = 3335;
        }
        read(b) {
            this.open = b.readUint8();
        }
    }
    class PeakJjcRankChange_revc {
        constructor() {
            this.protoid = 3336;
        }
        read(b) {
            this.rank = b.readUint16();
        }
    }
    class PeakJjcWeeklyRewardUnix_revc {
        constructor() {
            this.protoid = 3337;
        }
        read(b) {
            this.time = b.readUint32();
        }
    }
    class PeakJjcDailyRewardUnix_revc {
        constructor() {
            this.protoid = 3338;
        }
        read(b) {
            this.time = b.readUint32();
        }
    }
    class PeakJjcSucceedReward_revc {
        constructor() {
            this.protoid = 3339;
        }
        read(b) {
            let len;
            this.succeedRewardList = this.succeedRewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.succeedRewardList.push(item);
            }
        }
    }
    class PeakJjcSurplusRefreshCount_revc {
        constructor() {
            this.protoid = 3340;
        }
        read(b) {
            this.val = b.readUint8();
        }
    }
    class PeakJjcActiveRefresh_req {
        constructor() {
            this.protoid = 3341;
        }
        write(b) {
        }
    }
    class PeakJjcWeekInfo_req {
        constructor() {
            this.protoid = 3342;
        }
        write(b) {
        }
    }
    class PeakJjcWeekInfo_revc {
        constructor() {
            this.protoid = 3343;
        }
        read(b) {
            this.rank = b.readFloat64();
            this.rewardStatus = b.readUint8();
        }
    }
    class stTitleInfo {
        constructor() { }
        write(b) {
            b.writeUint8(this.titleId);
            b.writeUint32(this.endTime);
        }
        read(b) {
            this.titleId = b.readUint8();
            this.endTime = b.readUint32();
        }
    }
    class TitleInfo_revc {
        constructor() {
            this.protoid = 3344;
        }
        read(b) {
            let len;
            this.titleList = this.titleList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stTitleInfo();
                item.read(b);
                this.titleList.push(item);
            }
            this.wearedTitleId = b.readUint8();
            this.state = b.readUint8();
        }
    }
    class TitleUpdate_revc {
        constructor() {
            this.protoid = 3345;
        }
        read(b) {
            let len;
            this.titleList = this.titleList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stTitleInfo();
                item.read(b);
                this.titleList.push(item);
            }
        }
    }
    class TitleReward_req {
        constructor() {
            this.protoid = 3346;
        }
        write(b) {
        }
    }
    class TitleReward_revc {
        constructor() {
            this.protoid = 3347;
        }
        read(b) {
            let len;
            this.titleId = b.readUint8();
            this.state = b.readUint8();
            this.vals = this.vals || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.vals.push(b.readUint32());
            }
        }
    }
    class TitleChange_req {
        constructor() {
            this.protoid = 3348;
        }
        write(b) {
            b.writeUint8(this.titleId);
        }
    }
    class TitleChange_revc {
        constructor() {
            this.protoid = 3349;
        }
        read(b) {
            this.titleId = b.readUint8();
        }
    }
    class TitleRefresh_req {
        constructor() {
            this.protoid = 3350;
        }
        write(b) {
        }
    }
    class TitleExpire_revc {
        constructor() {
            this.protoid = 3351;
        }
        read(b) {
            let len;
            this.titleList = this.titleList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stTitleInfo();
                item.read(b);
                this.titleList.push(item);
            }
        }
    }
    class TitleStateUpdate_revc {
        constructor() {
            this.protoid = 3352;
        }
        read(b) {
            this.state = b.readUint8();
        }
    }
    class TitleRefresh_revc {
        constructor() {
            this.protoid = 3353;
        }
        read(b) {
            let len;
            this.titleId = b.readUint8();
            this.state = b.readUint8();
            this.vals = this.vals || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.vals.push(b.readUint32());
            }
        }
    }
    class RedMod_req {
        constructor() {
            this.protoid = 3354;
        }
        write(b) {
            let len;
            this.datalist = this.datalist || [];
            len = this.datalist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.datalist[i].write(b);
            }
        }
    }
    class PeakJjcMoneyUpdate_revc {
        constructor() {
            this.protoid = 3355;
        }
        read(b) {
            this.moneyVal = b.readUint32();
        }
    }
    class stPeakJjcAvatar {
        constructor() {
            this.enemySkin = new stSkin();
        }
        write(b) {
            b.writeUTFString(this.name || "");
            b.writeUint32(this.titleid);
            b.writeUint32(this.plus);
            b.writeUint8(this.rank);
            this.enemySkin.write(b);
        }
        read(b) {
            this.name = b.readUTFString();
            this.titleid = b.readUint32();
            this.plus = b.readUint32();
            this.rank = b.readUint8();
            this.enemySkin.read(b);
        }
    }
    class PeakJjcAvatar_req {
        constructor() {
            this.protoid = 3356;
        }
        write(b) {
        }
    }
    class PeakJjcAvatar_revc {
        constructor() {
            this.protoid = 3357;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPeakJjcAvatar();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class MountReturn_req {
        constructor() {
            this.protoid = 3358;
        }
        write(b) {
            b.writeUint16(this.id);
        }
    }
    class MountReturnPreView_req {
        constructor() {
            this.protoid = 3359;
        }
        write(b) {
            b.writeUint16(this.id);
        }
    }
    class MountReturnPreView_revc {
        constructor() {
            this.protoid = 3360;
        }
        read(b) {
            let len;
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewardList.push(item);
            }
        }
    }
    class stMountRefinement {
        constructor() { }
        write(b) {
            b.writeUint16(this.id);
            b.writeUint32(this.value);
            b.writeUint8(this.quality);
            b.writeUint32(this.valueExtra);
        }
        read(b) {
            this.id = b.readUint16();
            this.value = b.readUint32();
            this.quality = b.readUint8();
            this.valueExtra = b.readUint32();
        }
    }
    class MountRefinement_req {
        constructor() {
            this.protoid = 3361;
        }
        write(b) {
            let len;
            b.writeUint16(this.id);
            this.fixedIds = this.fixedIds || [];
            len = this.fixedIds.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint16(this.fixedIds[i]);
            }
            b.writeUint16(this.refinementItem);
        }
    }
    class MountRefinement_revc {
        constructor() {
            this.protoid = 3362;
        }
        read(b) {
            let len;
            this.id = b.readUint16();
            this.refinements = this.refinements || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMountRefinement();
                item.read(b);
                this.refinements.push(item);
            }
        }
    }
    class MountRefinementReplace_req {
        constructor() {
            this.protoid = 3363;
        }
        write(b) {
            b.writeUint8(this.status);
            b.writeUint16(this.id);
        }
    }
    class MountRefinementLock_revc {
        constructor() {
            this.protoid = 3364;
        }
        read(b) {
            this.id = b.readUint16();
            this.canLock = b.readUint8();
        }
    }
    class MountReturn_revc {
        constructor() {
            this.protoid = 3365;
        }
        read(b) {
        }
    }
    class PeakJjcOpenUnix_revc {
        constructor() {
            this.protoid = 3366;
        }
        read(b) {
            this.time = b.readUint32();
        }
    }
    class JjcRewardPreview_revc {
        constructor() {
            this.protoid = 3367;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewardList.push(item);
            }
        }
    }
    class stChief {
        constructor() { }
        write(b) {
            let len;
            b.writeUint16(this.cheifId);
            b.writeUint16(this.level);
            b.writeUint8(this.star);
            b.writeUint8(this.onBattle);
            b.writeUint8(this.pos);
            b.writeUint8(this.isChief);
            b.writeUint32(this.cheifFight);
            this.equips = this.equips || [];
            len = this.equips.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.equips[i].write(b);
            }
            this.skills = this.skills || [];
            len = this.skills.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.skills[i].write(b);
            }
            this.attrs = this.attrs || [];
            len = this.attrs.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.attrs[i].write(b);
            }
            b.writeUint16(this.skinId);
            this.skinIds = this.skinIds || [];
            len = this.skinIds.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint16(this.skinIds[i]);
            }
            b.writeUint8(this.assistId);
        }
        read(b) {
            let len;
            this.cheifId = b.readUint16();
            this.level = b.readUint16();
            this.star = b.readUint8();
            this.onBattle = b.readUint8();
            this.pos = b.readUint8();
            this.isChief = b.readUint8();
            this.cheifFight = b.readUint32();
            this.equips = this.equips || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stChiefEquip();
                item.read(b);
                this.equips.push(item);
            }
            this.skills = this.skills || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stChiefSkill();
                item.read(b);
                this.skills.push(item);
            }
            this.attrs = this.attrs || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stEquipAttr();
                item.read(b);
                this.attrs.push(item);
            }
            this.skinId = b.readUint16();
            this.skinIds = this.skinIds || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.skinIds.push(b.readUint16());
            }
            this.assistId = b.readUint8();
        }
    }
    class stChiefEquip {
        constructor() { }
        write(b) {
            b.writeUint8(this.partId);
            b.writeUint16(this.equipStar);
            b.writeUint16(this.equipLevel);
        }
        read(b) {
            this.partId = b.readUint8();
            this.equipStar = b.readUint16();
            this.equipLevel = b.readUint16();
        }
    }
    class stChiefSkill {
        constructor() { }
        write(b) {
            b.writeUint8(this.skillId);
            b.writeUint8(this.skillPos);
            b.writeUint16(this.skillLevel);
        }
        read(b) {
            this.skillId = b.readUint8();
            this.skillPos = b.readUint8();
            this.skillLevel = b.readUint16();
        }
    }
    class ChiefInit_revc {
        constructor() {
            this.protoid = 3368;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stChief();
                item.read(b);
                this.dataList.push(item);
            }
            this.nextFreeUnix = b.readUint32();
            this.freeCount = b.readUint8();
            this.moraleRewardNum = b.readUint16();
            this.isNewServer = b.readUint8();
            this.flagList = this.flagList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.flagList.push(b.readUint8());
            }
            this.flag = b.readUint8();
            this.flagSerial = b.readUint16();
            this.flagFight = b.readUint32();
            this.drawLevel = b.readUint8();
            this.curDrawExp = b.readUint32();
        }
    }
    class ChiefMainChange_revc {
        constructor() {
            this.protoid = 3369;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stChief();
                item.read(b);
                this.dataList.push(item);
            }
            this.nextFreeUnix = b.readUint32();
            this.freeCount = b.readUint8();
        }
    }
    class stRecruitChief {
        constructor() { }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint16(this.cheifId);
            b.writeUint16(this.itemId);
            b.writeUint16(this.count);
        }
        read(b) {
            this.type = b.readUint8();
            this.cheifId = b.readUint16();
            this.itemId = b.readUint16();
            this.count = b.readUint16();
        }
    }
    class RecruitChief_req {
        constructor() {
            this.protoid = 3370;
        }
        write(b) {
            b.writeUint16(this.itemId);
            b.writeUint8(this.type);
        }
    }
    class RecruitChief_revc {
        constructor() {
            this.protoid = 3371;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stRecruitChief();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class ChiefIntoBattle_req {
        constructor() {
            this.protoid = 3372;
        }
        write(b) {
            b.writeUint16(this.cheifId);
            b.writeUint8(this.type);
            b.writeUint8(this.pos);
            b.writeUint8(this.isChief);
        }
    }
    class BuyMilitaryPledge_req {
        constructor() {
            this.protoid = 3373;
        }
        write(b) {
            b.writeUint32(this.num);
        }
    }
    class BuyMilitaryPledge_revc {
        constructor() {
            this.protoid = 3374;
        }
        read(b) {
        }
    }
    class CheifFightChange_revc {
        constructor() {
            this.protoid = 3375;
        }
        read(b) {
            this.cheifFight = b.readUint32();
        }
    }
    class CheifUpgrade_req {
        constructor() {
            this.protoid = 3376;
        }
        write(b) {
            b.writeUint16(this.cheifId);
            b.writeUint8(this.type);
            b.writeUint16(this.cnt);
        }
    }
    class CheifStarUp_req {
        constructor() {
            this.protoid = 3377;
        }
        write(b) {
            b.writeUint16(this.cheifId);
            b.writeUint16(this.num);
        }
    }
    class CheifEquipUp_req {
        constructor() {
            this.protoid = 3378;
        }
        write(b) {
            b.writeUint16(this.cheifId);
            b.writeUint8(this.partId);
            b.writeUint8(this.type);
        }
    }
    class CheifReturn_req {
        constructor() {
            this.protoid = 3379;
        }
        write(b) {
            b.writeUint16(this.cheifId);
            b.writeUint8(this.type);
        }
    }
    class CheifSkillUp_req {
        constructor() {
            this.protoid = 3380;
        }
        write(b) {
            b.writeUint16(this.cheifId);
            b.writeUint8(this.skillId);
            b.writeUint8(this.skillPos);
        }
    }
    class CheifMoraleReward_req {
        constructor() {
            this.protoid = 3381;
        }
        write(b) {
        }
    }
    class CheifMoraleReward_revc {
        constructor() {
            this.protoid = 3382;
        }
        read(b) {
            this.moraleRewardNum = b.readUint16();
        }
    }
    class stInvitationTopPlayer {
        constructor() { }
        write(b) {
            b.writeUint16(this.level);
            b.writeUTFString(this.name || "");
            b.writeUTFString(this.portrait || "");
        }
        read(b) {
            this.level = b.readUint16();
            this.name = b.readUTFString();
            this.portrait = b.readUTFString();
        }
    }
    class stInvitationInfo {
        constructor() { }
        write(b) {
            b.writeUint8(this.fid);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint8();
            this.state = b.readUint8();
        }
    }
    class stActivationInfo {
        constructor() { }
        write(b) {
            b.writeUint8(this.fid);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint8();
            this.state = b.readUint8();
        }
    }
    class InvitationRed_revc {
        constructor() {
            this.protoid = 3383;
        }
        read(b) {
            this.red = b.readUint8();
        }
    }
    class Invitation_req {
        constructor() {
            this.protoid = 3384;
        }
        write(b) {
        }
    }
    class Invitation_revc {
        constructor() {
            this.protoid = 3385;
        }
        read(b) {
            let len;
            this.inviteNum = b.readUint8();
            this.topList = this.topList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stInvitationTopPlayer();
                item.read(b);
                this.topList.push(item);
            }
            this.invitationList = this.invitationList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stInvitationInfo();
                item.read(b);
                this.invitationList.push(item);
            }
            this.activationList = this.activationList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivationInfo();
                item.read(b);
                this.activationList.push(item);
            }
        }
    }
    class InvitationGetReward_req {
        constructor() {
            this.protoid = 3386;
        }
        write(b) {
            b.writeUint8(this.fid);
        }
    }
    class InvitationGetActivation_req {
        constructor() {
            this.protoid = 3387;
        }
        write(b) {
            b.writeUint8(this.fid);
        }
    }
    class InvitationUpdate_revc {
        constructor() {
            this.protoid = 3388;
        }
        read(b) {
            let len;
            this.invitationList = this.invitationList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stInvitationInfo();
                item.read(b);
                this.invitationList.push(item);
            }
        }
    }
    class InvitationActivationUpdate_revc {
        constructor() {
            this.protoid = 3389;
        }
        read(b) {
            let len;
            this.activationList = this.activationList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivationInfo();
                item.read(b);
                this.activationList.push(item);
            }
        }
    }
    class CheifStarUp_revc {
        constructor() {
            this.protoid = 3390;
        }
        read(b) {
            this.cheifId = b.readUint16();
            this.num = b.readUint16();
        }
    }
    class MountChief_revc {
        constructor() {
            this.protoid = 3391;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMountRelation();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class MountChiefChange_req {
        constructor() {
            this.protoid = 3392;
        }
        write(b) {
            b.writeUint16(this.cheifId);
            b.writeUint16(this.mountId);
        }
    }
    class stFundReward {
        constructor() { }
        write(b) {
            b.writeUint8(this.state);
            b.writeUint8(this.f_id);
        }
        read(b) {
            this.state = b.readUint8();
            this.f_id = b.readUint8();
        }
    }
    class stFund {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.id);
            b.writeUint8(this.canBuy);
            this.dataList = this.dataList || [];
            len = this.dataList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.dataList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.id = b.readUint8();
            this.canBuy = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stFundReward();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class FundInit_revc {
        constructor() {
            this.protoid = 3393;
        }
        read(b) {
            let len;
            this.endUnix = b.readUint32();
            this.fundList = this.fundList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stFund();
                item.read(b);
                this.fundList.push(item);
            }
        }
    }
    class FundRefresh_req {
        constructor() {
            this.protoid = 3394;
        }
        write(b) {
        }
    }
    class FundReward_req {
        constructor() {
            this.protoid = 3395;
        }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.f_id);
        }
    }
    class FundReward_revc {
        constructor() {
            this.protoid = 3396;
            this.updatedFundData = new stFund();
        }
        read(b) {
            this.updatedFundData.read(b);
        }
    }
    class ChiefLosslessReplacement_req {
        constructor() {
            this.protoid = 3398;
        }
        write(b) {
            b.writeUint16(this.cheifId);
            b.writeUint16(this.cheifReplaceId);
        }
    }
    class ChiefLosslessReplacement_revc {
        constructor() {
            this.protoid = 3399;
        }
        read(b) {
        }
    }
    class GetServerTimeMS_req {
        constructor() {
            this.protoid = 3400;
        }
        write(b) {
        }
    }
    class GetServerTimeMS_revc {
        constructor() {
            this.protoid = 3401;
            this.serverTime = new uint64();
        }
        read(b) {
            this.serverTime.read(b);
        }
    }
    class stMountRecord {
        constructor() { }
        write(b) {
            b.writeUint32(this.playerId);
            b.writeUTFString(this.nickName || "");
            b.writeUint16(this.mountId);
            b.writeUint32(this.recordSerial);
            b.writeUint32(this.time);
        }
        read(b) {
            this.playerId = b.readUint32();
            this.nickName = b.readUTFString();
            this.mountId = b.readUint16();
            this.recordSerial = b.readUint32();
            this.time = b.readUint32();
        }
    }
    class stMountNum {
        constructor() { }
        write(b) {
            b.writeUint32(this.playerId);
            b.writeUTFString(this.nickName || "");
            b.writeUTFString(this.headUrl || "");
            b.writeUint32(this.ranking);
            b.writeUint32(this.num);
            b.writeUint16(this.titleId);
            b.writeUint16(this.playerLevel);
        }
        read(b) {
            this.playerId = b.readUint32();
            this.nickName = b.readUTFString();
            this.headUrl = b.readUTFString();
            this.ranking = b.readUint32();
            this.num = b.readUint32();
            this.titleId = b.readUint16();
            this.playerLevel = b.readUint16();
        }
    }
    class MountFeastInit_revc {
        constructor() {
            this.protoid = 3402;
        }
        read(b) {
            let len;
            this.selfRecords = this.selfRecords || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMountRecord();
                item.read(b);
                this.selfRecords.push(item);
            }
            this.totalCnt = b.readUint32();
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.rewardList.push(b.readUint16());
            }
        }
    }
    class MountFeastRecords_req {
        constructor() {
            this.protoid = 3403;
        }
        write(b) {
            b.writeUint32(this.recordSerial);
        }
    }
    class MountFeastRecords_revc {
        constructor() {
            this.protoid = 3404;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMountRecord();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class MountFeastSelfRecords_revc {
        constructor() {
            this.protoid = 3405;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMountRecord();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class MountFeastNums_req {
        constructor() {
            this.protoid = 3406;
        }
        write(b) {
        }
    }
    class MountFeastNums_revc {
        constructor() {
            this.protoid = 3407;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMountNum();
                item.read(b);
                this.dataList.push(item);
            }
            this.self = this.self || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMountNum();
                item.read(b);
                this.self.push(item);
            }
            this.top3 = this.top3 || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPeakJjcAvatar();
                item.read(b);
                this.top3.push(item);
            }
        }
    }
    class MountFeastTotalCntReward_req {
        constructor() {
            this.protoid = 3408;
        }
        write(b) {
            b.writeUint16(this.id);
        }
    }
    class MountFeastTotalCntReward_revc {
        constructor() {
            this.protoid = 3409;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.dataList.push(b.readUint16());
            }
        }
    }
    class MountFeastTotalCnt_revc {
        constructor() {
            this.protoid = 3410;
        }
        read(b) {
            this.totalCnt = b.readUint32();
        }
    }
    class Conquest_revc {
        constructor() {
            this.protoid = 3411;
        }
        read(b) {
            this.fid = b.readUint16();
            this.state = b.readUint8();
        }
    }
    class ConquestChapterReward_req {
        constructor() {
            this.protoid = 3412;
        }
        write(b) {
        }
    }
    class ConquestFight_req {
        constructor() {
            this.protoid = 3413;
        }
        write(b) {
        }
    }
    class stSilkBag {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint32(this.val);
        }
        read(b) {
            this.id = b.readUint8();
            this.val = b.readUint32();
        }
    }
    class stStarBattleEnemy {
        constructor() { }
        write(b) {
            let len;
            b.writeUint32(this.accountId);
            this.skin = this.skin || [];
            len = this.skin.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.skin[i].write(b);
            }
            this.silkBags = this.silkBags || [];
            len = this.silkBags.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.silkBags[i].write(b);
            }
            b.writeUint32(this.starNum);
        }
        read(b) {
            let len;
            this.accountId = b.readUint32();
            this.skin = this.skin || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPeakJjcAvatar();
                item.read(b);
                this.skin.push(item);
            }
            this.silkBags = this.silkBags || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSilkBag();
                item.read(b);
                this.silkBags.push(item);
            }
            this.starNum = b.readUint32();
        }
    }
    class StarBattleInit_revc {
        constructor() {
            this.protoid = 3414;
        }
        read(b) {
            let len;
            this.wheelNum = b.readUint8();
            this.keyRecoveryUnix = b.readUint32();
            this.ranking = b.readUint32();
            this.starNum = b.readUint32();
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewardList.push(item);
            }
            this.silkBags = this.silkBags || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSilkBag();
                item.read(b);
                this.silkBags.push(item);
            }
            this.rankRewardState = b.readUint8();
            this.rankingSettle = b.readUint32();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stStarGoods();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class StarBattleKeyRecovery_req {
        constructor() {
            this.protoid = 3415;
        }
        write(b) {
        }
    }
    class StarBattleKeyRecovery_revc {
        constructor() {
            this.protoid = 3416;
        }
        read(b) {
            this.keyRecoveryUnix = b.readUint32();
        }
    }
    class StarBattleReward_req {
        constructor() {
            this.protoid = 3417;
        }
        write(b) {
        }
    }
    class StarBattleReward_revc {
        constructor() {
            this.protoid = 3418;
        }
        read(b) {
            let len;
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewardList.push(item);
            }
        }
    }
    class TurnWheel_req {
        constructor() {
            this.protoid = 3419;
        }
        write(b) {
        }
    }
    class TurnWheel_revc {
        constructor() {
            this.protoid = 3420;
        }
        read(b) {
            this.wheelNum = b.readUint8();
        }
    }
    class StarBattleEnemys_req {
        constructor() {
            this.protoid = 3421;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class StarBattleEnemys_revc {
        constructor() {
            this.protoid = 3422;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stStarBattleEnemy();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class StarBattleFight_req {
        constructor() {
            this.protoid = 3423;
        }
        write(b) {
            b.writeUint32(this.accountId);
        }
    }
    class StarBattleFight_revc {
        constructor() {
            this.protoid = 3424;
        }
        read(b) {
            this.ranking = b.readUint32();
            this.starPercent = b.readUint8();
        }
    }
    class StarNumChange_revc {
        constructor() {
            this.protoid = 3425;
        }
        read(b) {
            this.starNum = b.readUint32();
        }
    }
    class SilkBagHandler_req {
        constructor() {
            this.protoid = 3426;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint16(this.id);
        }
    }
    class SilkBagHandler_revc {
        constructor() {
            this.protoid = 3427;
        }
        read(b) {
            let len;
            this.silkBags = this.silkBags || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSilkBag();
                item.read(b);
                this.silkBags.push(item);
            }
        }
    }
    class stStarBattleLog {
        constructor() { }
        write(b) {
            b.writeUint32(this.accountId);
            b.writeUint32(this.time);
            b.writeUint8(this.atk);
            b.writeUTFString(this.playerName || "");
            b.writeInt16(this.changeVal);
            b.writeUTFString(this.headUrl || "");
            b.writeUint32(this.plus);
            b.writeUint8(this.win);
            b.writeUint32(this.starNum);
        }
        read(b) {
            this.accountId = b.readUint32();
            this.time = b.readUint32();
            this.atk = b.readUint8();
            this.playerName = b.readUTFString();
            this.changeVal = b.readInt16();
            this.headUrl = b.readUTFString();
            this.plus = b.readUint32();
            this.win = b.readUint8();
            this.starNum = b.readUint32();
        }
    }
    class StarBattleLog_req {
        constructor() {
            this.protoid = 3428;
        }
        write(b) {
        }
    }
    class StarBattleLog_revc {
        constructor() {
            this.protoid = 3429;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stStarBattleLog();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class stStarRank {
        constructor() { }
        write(b) {
            b.writeUint32(this.accountId);
            b.writeUTFString(this.nickName || "");
            b.writeUTFString(this.serverName || "");
            b.writeUTFString(this.naming || "");
            b.writeUTFString(this.headUrl || "");
            b.writeUint32(this.ranking);
            b.writeUint32(this.starNum);
            b.writeUint16(this.titleId);
            b.writeUint16(this.playerLevel);
            b.writeUint32(this.plus);
        }
        read(b) {
            this.accountId = b.readUint32();
            this.nickName = b.readUTFString();
            this.serverName = b.readUTFString();
            this.naming = b.readUTFString();
            this.headUrl = b.readUTFString();
            this.ranking = b.readUint32();
            this.starNum = b.readUint32();
            this.titleId = b.readUint16();
            this.playerLevel = b.readUint16();
            this.plus = b.readUint32();
        }
    }
    class StarBattleRank_req {
        constructor() {
            this.protoid = 3430;
        }
        write(b) {
        }
    }
    class StarBattleRank_revc {
        constructor() {
            this.protoid = 3431;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stStarRank();
                item.read(b);
                this.dataList.push(item);
            }
            this.self = this.self || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stStarRank();
                item.read(b);
                this.self.push(item);
            }
            this.top3 = this.top3 || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPeakJjcAvatar();
                item.read(b);
                this.top3.push(item);
            }
            this.rewardUnix = b.readUint32();
        }
    }
    class StarBattleRankReward_req {
        constructor() {
            this.protoid = 3432;
        }
        write(b) {
        }
    }
    class StarBattleRankReward_revc {
        constructor() {
            this.protoid = 3433;
        }
        read(b) {
            this.rewardState = b.readUint8();
        }
    }
    class StarWatchPlayerInfo_req {
        constructor() {
            this.protoid = 3434;
        }
        write(b) {
            b.writeUint32(this.accountId);
        }
    }
    class stStarGoods {
        constructor() { }
        write(b) {
            b.writeUint16(this.goodsId);
            b.writeUint16(this.num);
        }
        read(b) {
            this.goodsId = b.readUint16();
            this.num = b.readUint16();
        }
    }
    class StarShopBuy_req {
        constructor() {
            this.protoid = 3435;
        }
        write(b) {
            b.writeUint32(this.num);
            b.writeUint16(this.goodsId);
        }
    }
    class StarShopBuy_revc {
        constructor() {
            this.protoid = 3436;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stStarGoods();
                item.read(b);
                this.dataList.push(item);
            }
            this.goodsFreshUnix = b.readUint32();
        }
    }
    class stActivityRecord {
        constructor() { }
        write(b) {
            b.writeUint32(this.playerId);
            b.writeUTFString(this.nickName || "");
            b.writeUint32(this.id);
            b.writeUint16(this.level);
            b.writeUint32(this.recordSerial);
            b.writeUint32(this.time);
        }
        read(b) {
            this.playerId = b.readUint32();
            this.nickName = b.readUTFString();
            this.id = b.readUint32();
            this.level = b.readUint16();
            this.recordSerial = b.readUint32();
            this.time = b.readUint32();
        }
    }
    class stActivityNum {
        constructor() { }
        write(b) {
            b.writeUint32(this.playerId);
            b.writeUTFString(this.nickName || "");
            b.writeUTFString(this.headUrl || "");
            b.writeUint32(this.ranking);
            b.writeUint32(this.num);
            b.writeUint16(this.titleId);
            b.writeUint16(this.playerLevel);
        }
        read(b) {
            this.playerId = b.readUint32();
            this.nickName = b.readUTFString();
            this.headUrl = b.readUTFString();
            this.ranking = b.readUint32();
            this.num = b.readUint32();
            this.titleId = b.readUint16();
            this.playerLevel = b.readUint16();
        }
    }
    class ActivityInit_revc {
        constructor() {
            this.protoid = 3437;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.selfRecords = this.selfRecords || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivityRecord();
                item.read(b);
                this.selfRecords.push(item);
            }
            this.totalCnt = b.readUint32();
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.rewardList.push(b.readUint16());
            }
        }
    }
    class ActivityRecords_req {
        constructor() {
            this.protoid = 3438;
        }
        write(b) {
            b.writeUint8(this.isNewPlayer);
            b.writeUint8(this.type);
            b.writeUint32(this.recordSerial);
        }
    }
    class ActivityRecords_revc {
        constructor() {
            this.protoid = 3439;
        }
        read(b) {
            let len;
            this.isNewPlayer = b.readUint8();
            this.type = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivityRecord();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class ActivitySelfRecords_revc {
        constructor() {
            this.protoid = 3440;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivityRecord();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class ActivityNums_req {
        constructor() {
            this.protoid = 3441;
        }
        write(b) {
            b.writeUint8(this.isNewPlayer);
            b.writeUint8(this.type);
        }
    }
    class ActivityNums_revc {
        constructor() {
            this.protoid = 3442;
        }
        read(b) {
            let len;
            this.isNewPlayer = b.readUint8();
            this.type = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivityNum();
                item.read(b);
                this.dataList.push(item);
            }
            this.self = this.self || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivityNum();
                item.read(b);
                this.self.push(item);
            }
            this.top3 = this.top3 || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPeakJjcAvatar();
                item.read(b);
                this.top3.push(item);
            }
        }
    }
    class ActivityTotalCntReward_req {
        constructor() {
            this.protoid = 3443;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint16(this.id);
        }
    }
    class ActivityTotalCntReward_revc {
        constructor() {
            this.protoid = 3444;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.dataList.push(b.readUint16());
            }
        }
    }
    class ActivityTotalCnt_revc {
        constructor() {
            this.protoid = 3445;
        }
        read(b) {
            this.type = b.readUint8();
            this.totalCnt = b.readUint32();
        }
    }
    class TeamFightInit_revc {
        constructor() {
            this.protoid = 3446;
            this.accHarm = new uint64();
        }
        read(b) {
            this.bossId = b.readUint8();
            this.freeNum = b.readUint8();
            this.buyNum = b.readUint8();
            this.adNum = b.readUint8();
            this.accHarm.read(b);
            this.harmRewardFid = b.readUint8();
            this.ranking = b.readUint16();
            this.lastRanking = b.readUint16();
            this.rankRewardState = b.readUint8();
            this.closeUnix = b.readUint32();
        }
    }
    class stTeamFightPlayer {
        constructor() {
            this.accHarm = new uint64();
        }
        write(b) {
            b.writeUTFString(this.headUrl || "");
            b.writeUTFString(this.name || "");
            b.writeUint16(this.lv);
            b.writeUint32(this.plus);
            b.writeUint16(this.rank);
            b.writeUint32(this.accountId);
            b.writeUint8(this.titleId);
            this.accHarm.write(b);
        }
        read(b) {
            this.headUrl = b.readUTFString();
            this.name = b.readUTFString();
            this.lv = b.readUint16();
            this.plus = b.readUint32();
            this.rank = b.readUint16();
            this.accountId = b.readUint32();
            this.titleId = b.readUint8();
            this.accHarm.read(b);
        }
    }
    class TeamFightRankList_revc {
        constructor() {
            this.protoid = 3447;
        }
        read(b) {
            let len;
            this.plus = b.readUint32();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stTeamFightPlayer();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class TeamFightHarmReward_req {
        constructor() {
            this.protoid = 3448;
        }
        write(b) {
        }
    }
    class TeamFightHarmReward_revc {
        constructor() {
            this.protoid = 3449;
        }
        read(b) {
            this.harmRewardFid = b.readUint8();
        }
    }
    class TeamFightRankReward_req {
        constructor() {
            this.protoid = 3450;
        }
        write(b) {
        }
    }
    class TeamFightRankReward_revc {
        constructor() {
            this.protoid = 3451;
        }
        read(b) {
            this.rankRewardState = b.readUint8();
        }
    }
    class TeamFight_req {
        constructor() {
            this.protoid = 3452;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class TeamFight_revc {
        constructor() {
            this.protoid = 3453;
            this.accHarm = new uint64();
        }
        read(b) {
            this.freeNum = b.readUint8();
            this.buyNum = b.readUint8();
            this.adNum = b.readUint8();
            this.accHarm.read(b);
            this.ranking = b.readUint16();
            this.totalHarm = b.readUint32();
        }
    }
    class TeamFightRankList_req {
        constructor() {
            this.protoid = 3454;
        }
        write(b) {
        }
    }
    class TeamFightNum_revc {
        constructor() {
            this.protoid = 3455;
        }
        read(b) {
            this.freeNum = b.readUint8();
            this.buyNum = b.readUint8();
            this.adNum = b.readUint8();
        }
    }
    class CheifChangeSkin_req {
        constructor() {
            this.protoid = 3456;
        }
        write(b) {
            b.writeUint16(this.cheifId);
            b.writeUint16(this.skinId);
        }
    }
    class RedemptionCode_req {
        constructor() {
            this.protoid = 3457;
        }
        write(b) {
            b.writeUTFString(this.code || "");
        }
    }
    class StarStrike_req {
        constructor() {
            this.protoid = 3458;
        }
        write(b) {
        }
    }
    class stPalaceEnemy {
        constructor() { }
        write(b) {
            b.writeUint8(this.enemyId);
            b.writeUint8(this.star);
            b.writeUint16(this.level);
            b.writeUint8(this.quality);
        }
        read(b) {
            this.enemyId = b.readUint8();
            this.star = b.readUint8();
            this.level = b.readUint16();
            this.quality = b.readUint8();
        }
    }
    class PalaceInit_revc {
        constructor() {
            this.protoid = 3459;
        }
        read(b) {
            let len;
            this.id = b.readUint8();
            this.enemyList = this.enemyList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPalaceEnemy();
                item.read(b);
                this.enemyList.push(item);
            }
            this.power = b.readUint32();
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.attrList.push(b.readUint16());
            }
            this.ranking = b.readUint16();
            this.lastRanking = b.readUint16();
            this.rankRewardState = b.readUint8();
            this.buffList = this.buffList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPalaceBuff();
                item.read(b);
                this.buffList.push(item);
            }
            this.coreBuffList = this.coreBuffList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.coreBuffList.push(b.readUint8());
            }
            this.state = b.readUint8();
            this.clear = b.readUint8();
        }
    }
    class PalaceReset_req {
        constructor() {
            this.protoid = 3460;
        }
        write(b) {
        }
    }
    class PalaceFight_req {
        constructor() {
            this.protoid = 3461;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class stPalaceBuff {
        constructor() { }
        write(b) {
            b.writeUint8(this.buffId);
            b.writeUint32(this.val);
            b.writeUint8(this.times);
            b.writeUint32(this.addVal);
            b.writeUint8(this.quality);
        }
        read(b) {
            this.buffId = b.readUint8();
            this.val = b.readUint32();
            this.times = b.readUint8();
            this.addVal = b.readUint32();
            this.quality = b.readUint8();
        }
    }
    class PalaceChooseBuff_revc {
        constructor() {
            this.protoid = 3462;
        }
        read(b) {
            let len;
            this.buffList = this.buffList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPalaceBuff();
                item.read(b);
                this.buffList.push(item);
            }
            this.refreshTimes = b.readUint8();
        }
    }
    class PalaceChooseBuff_req {
        constructor() {
            this.protoid = 3463;
        }
        write(b) {
            b.writeUint8(this.buffId);
        }
    }
    class PalaceBuffList_revc {
        constructor() {
            this.protoid = 3464;
        }
        read(b) {
            let len;
            this.buffList = this.buffList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPalaceBuff();
                item.read(b);
                this.buffList.push(item);
            }
        }
    }
    class PalaceRefreshBuff_req {
        constructor() {
            this.protoid = 3465;
        }
        write(b) {
        }
    }
    class PalaceChooseCoreBuff_revc {
        constructor() {
            this.protoid = 3466;
        }
        read(b) {
            let len;
            this.coreBuffList = this.coreBuffList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.coreBuffList.push(b.readUint8());
            }
        }
    }
    class PalaceChooseCoreBuff_req {
        constructor() {
            this.protoid = 3467;
        }
        write(b) {
            b.writeUint8(this.coreBuffId);
        }
    }
    class PalaceCoreBuffList_revc {
        constructor() {
            this.protoid = 3468;
        }
        read(b) {
            let len;
            this.coreBuffList = this.coreBuffList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.coreBuffList.push(b.readUint8());
            }
        }
    }
    class stPalacePlayer {
        constructor() { }
        write(b) {
            b.writeUTFString(this.severName || "");
            b.writeUTFString(this.headUrl || "");
            b.writeUTFString(this.name || "");
            b.writeUint16(this.lv);
            b.writeUint32(this.plus);
            b.writeUint16(this.rank);
            b.writeUint32(this.accountId);
            b.writeUint8(this.titleId);
            b.writeUint8(this.palaceLevel);
            b.writeUint32(this.accRound);
        }
        read(b) {
            this.severName = b.readUTFString();
            this.headUrl = b.readUTFString();
            this.name = b.readUTFString();
            this.lv = b.readUint16();
            this.plus = b.readUint32();
            this.rank = b.readUint16();
            this.accountId = b.readUint32();
            this.titleId = b.readUint8();
            this.palaceLevel = b.readUint8();
            this.accRound = b.readUint32();
        }
    }
    class PalaceRankList_req {
        constructor() {
            this.protoid = 3469;
        }
        write(b) {
        }
    }
    class PalaceRankList_revc {
        constructor() {
            this.protoid = 3470;
            this.data = new stPalacePlayer();
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPalacePlayer();
                item.read(b);
                this.dataList.push(item);
            }
            this.data.read(b);
        }
    }
    class PalaceReward_req {
        constructor() {
            this.protoid = 3471;
        }
        write(b) {
        }
    }
    class PalaceReward_revc {
        constructor() {
            this.protoid = 3472;
        }
        read(b) {
            this.lastRanking = b.readUint16();
            this.rankRewardState = b.readUint8();
        }
    }
    class PalaceUpdateRanking_revc {
        constructor() {
            this.protoid = 3473;
        }
        read(b) {
            let len;
            this.id = b.readUint8();
            this.enemyList = this.enemyList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPalaceEnemy();
                item.read(b);
                this.enemyList.push(item);
            }
            this.power = b.readUint32();
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.attrList.push(b.readUint16());
            }
            this.ranking = b.readUint16();
            this.state = b.readUint8();
            this.clear = b.readUint8();
        }
    }
    class stPalaceShopItem {
        constructor() { }
        write(b) {
            b.writeUint8(this.fid);
            b.writeUint8(this.buyNum);
        }
        read(b) {
            this.fid = b.readUint8();
            this.buyNum = b.readUint8();
        }
    }
    class PalaceShop_revc {
        constructor() {
            this.protoid = 3474;
        }
        read(b) {
            let len;
            this.itemList = this.itemList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPalaceShopItem();
                item.read(b);
                this.itemList.push(item);
            }
            this.shopRefreshUnix = b.readUint32();
            this.itemNum = b.readUint16();
        }
    }
    class PalaceShopUpdate_revc {
        constructor() {
            this.protoid = 3475;
            this.item = new stPalaceShopItem();
        }
        read(b) {
            this.item.read(b);
        }
    }
    class PalaceUnlockBuff_req {
        constructor() {
            this.protoid = 3476;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class PalaceUpdateShop_req {
        constructor() {
            this.protoid = 3477;
        }
        write(b) {
        }
    }
    class PalaceRefresh_req {
        constructor() {
            this.protoid = 3478;
        }
        write(b) {
        }
    }
    class PalaceRefresh_revc {
        constructor() {
            this.protoid = 3479;
        }
        read(b) {
            this.refreshUnix = b.readUint32();
            this.rewardUnix = b.readUint32();
        }
    }
    class PalaceShop_req {
        constructor() {
            this.protoid = 3480;
        }
        write(b) {
            b.writeUint8(this.fid);
        }
    }
    class GrowPackUnlock_revc {
        constructor() {
            this.protoid = 3481;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.dataList.push(b.readUint8());
            }
        }
    }
    class StarShopOpen_req {
        constructor() {
            this.protoid = 3482;
        }
        write(b) {
        }
    }
    class DailyWheelBigPrize_req {
        constructor() {
            this.protoid = 3483;
        }
        write(b) {
            b.writeUint16(this.itemId);
        }
    }
    class DailyWheelBigPrize_revc {
        constructor() {
            this.protoid = 3484;
        }
        read(b) {
            this.itemId = b.readUint16();
        }
    }
    class DailyWheelTurn_req {
        constructor() {
            this.protoid = 3485;
        }
        write(b) {
            b.writeUint8(this.ad);
        }
    }
    class DailyWheelTurn_revc {
        constructor() {
            this.protoid = 3486;
        }
        read(b) {
            this.pos = b.readUint8();
        }
    }
    class AdFreeCard_revc {
        constructor() {
            this.protoid = 3487;
        }
        read(b) {
            this.val = b.readUint8();
            this.subday = b.readUint16();
        }
    }
    class AdFreeCardGet_req {
        constructor() {
            this.protoid = 3488;
        }
        write(b) {
        }
    }
    class stCommonRank {
        constructor() { }
        write(b) {
            b.writeUint32(this.accountId);
            b.writeUTFString(this.nickName || "");
            b.writeUTFString(this.serverName || "");
            b.writeUTFString(this.headUrl || "");
            b.writeUint32(this.ranking);
            b.writeUint32(this.commonNum);
            b.writeUint16(this.titleId);
            b.writeUint16(this.playerLevel);
            b.writeUint32(this.plus);
        }
        read(b) {
            this.accountId = b.readUint32();
            this.nickName = b.readUTFString();
            this.serverName = b.readUTFString();
            this.headUrl = b.readUTFString();
            this.ranking = b.readUint32();
            this.commonNum = b.readUint32();
            this.titleId = b.readUint16();
            this.playerLevel = b.readUint16();
            this.plus = b.readUint32();
        }
    }
    class OpenServerAdventureRank_req {
        constructor() {
            this.protoid = 3489;
        }
        write(b) {
        }
    }
    class OpenServerAdventureRank_revc {
        constructor() {
            this.protoid = 3490;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCommonRank();
                item.read(b);
                this.dataList.push(item);
            }
            this.self = this.self || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCommonRank();
                item.read(b);
                this.self.push(item);
            }
            this.top3 = this.top3 || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPeakJjcAvatar();
                item.read(b);
                this.top3.push(item);
            }
        }
    }
    class CommonWatchPlayerInfo_req {
        constructor() {
            this.protoid = 3491;
        }
        write(b) {
            b.writeUint32(this.accountId);
            b.writeUint8(this.type);
        }
    }
    class OpenServerAccPaid_revc {
        constructor() {
            this.protoid = 3492;
        }
        read(b) {
            this.accPaid = b.readUint32();
            this.accDailyPaid = b.readUint32();
        }
    }
    class NewPlayerAttr_req {
        constructor() {
            this.protoid = 3493;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint8(this.id);
        }
    }
    class stNewPlayerAttr {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.type);
            b.writeUint32(this.endUnix);
        }
        read(b) {
            this.id = b.readUint8();
            this.type = b.readUint8();
            this.endUnix = b.readUint32();
        }
    }
    class NewPlayerAttr_revc {
        constructor() {
            this.protoid = 3494;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stNewPlayerAttr();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class stTrammelsChief {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.state);
            b.writeUint8(this.pos);
        }
        read(b) {
            this.id = b.readUint8();
            this.state = b.readUint8();
            this.pos = b.readUint8();
        }
    }
    class TrammelsChiefInit_revc {
        constructor() {
            this.protoid = 3495;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stTrammelsChief();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class TrammelsChief_req {
        constructor() {
            this.protoid = 3496;
        }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.pos);
        }
    }
    class TrammelsChief_revc {
        constructor() {
            this.protoid = 3497;
            this.data = new stTrammelsChief();
        }
        read(b) {
            this.data.read(b);
        }
    }
    class TrammelsChiefUnlock_req {
        constructor() {
            this.protoid = 3498;
        }
        write(b) {
        }
    }
    class stPet {
        constructor() { }
        write(b) {
            let len;
            b.writeUint32(this.petSerialNum);
            b.writeUint8(this.petId);
            b.writeUint16(this.petLevel);
            b.writeUint8(this.petStar);
            this.petTalents = this.petTalents || [];
            len = this.petTalents.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.petTalents[i].write(b);
            }
            b.writeUint8(this.petTalentIdToDo);
            b.writeUint8(this.onBattle);
        }
        read(b) {
            let len;
            this.petSerialNum = b.readUint32();
            this.petId = b.readUint8();
            this.petLevel = b.readUint16();
            this.petStar = b.readUint8();
            this.petTalents = this.petTalents || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPetTalent();
                item.read(b);
                this.petTalents.push(item);
            }
            this.petTalentIdToDo = b.readUint8();
            this.onBattle = b.readUint8();
        }
    }
    class stPetSkill {
        constructor() { }
        write(b) {
            b.writeUint8(this.skillId);
            b.writeUint8(this.skillLevel);
        }
        read(b) {
            this.skillId = b.readUint8();
            this.skillLevel = b.readUint8();
        }
    }
    class stPetTalent {
        constructor() { }
        write(b) {
            b.writeUint8(this.talentId);
            b.writeUint8(this.talentLevel);
            b.writeUint8(this.lock);
        }
        read(b) {
            this.talentId = b.readUint8();
            this.talentLevel = b.readUint8();
            this.lock = b.readUint8();
        }
    }
    class PetInit_revc {
        constructor() {
            this.protoid = 3499;
        }
        read(b) {
            let len;
            this.nextFreeUnix = b.readUint32();
            this.freeCount = b.readUint8();
            this.baoDi = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPet();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class PetBuyFlute_req {
        constructor() {
            this.protoid = 3500;
        }
        write(b) {
            b.writeUint32(this.num);
        }
    }
    class PetBuyFlute_revc {
        constructor() {
            this.protoid = 3501;
        }
        read(b) {
        }
    }
    class PetExtract_req {
        constructor() {
            this.protoid = 3502;
        }
        write(b) {
            b.writeUint16(this.itemId);
            b.writeUint8(this.type);
        }
    }
    class PetChange_revc {
        constructor() {
            this.protoid = 3503;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPet();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class PetFreeChange_revc {
        constructor() {
            this.protoid = 3504;
        }
        read(b) {
            this.nextFreeUnix = b.readUint32();
            this.freeCount = b.readUint8();
        }
    }
    class PetBaoDiChange_revc {
        constructor() {
            this.protoid = 3505;
        }
        read(b) {
            this.baoDi = b.readUint8();
        }
    }
    class PetOnBattle_req {
        constructor() {
            this.protoid = 3506;
        }
        write(b) {
            b.writeUint32(this.petSerialNum);
        }
    }
    class PetRebirth_req {
        constructor() {
            this.protoid = 3507;
        }
        write(b) {
            b.writeUint32(this.petSerialNum);
        }
    }
    class PetUpgradeLevel_req {
        constructor() {
            this.protoid = 3508;
        }
        write(b) {
            b.writeUint32(this.petSerialNum);
            b.writeUint16(this.cnt);
        }
    }
    class PetUpgradeStar_req {
        constructor() {
            this.protoid = 3509;
        }
        write(b) {
            let len;
            b.writeUint32(this.petSerialNum);
            this.sameQuaPetSerialNums = this.sameQuaPetSerialNums || [];
            len = this.sameQuaPetSerialNums.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint32(this.sameQuaPetSerialNums[i]);
            }
            b.writeUint8(this.type);
        }
    }
    class PetRemove_revc {
        constructor() {
            this.protoid = 3510;
        }
        read(b) {
            let len;
            this.petSerialNums = this.petSerialNums || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.petSerialNums.push(b.readUint32());
            }
        }
    }
    class PetNewTalent_req {
        constructor() {
            this.protoid = 3511;
        }
        write(b) {
            let len;
            b.writeUint32(this.petSerialNum);
            this.lockTalentIds = this.lockTalentIds || [];
            len = this.lockTalentIds.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint8(this.lockTalentIds[i]);
            }
        }
    }
    class PetHandleNewTalent_req {
        constructor() {
            this.protoid = 3512;
        }
        write(b) {
            b.writeUint32(this.petSerialNum);
            b.writeUint8(this.type);
        }
    }
    class PetHandleNewTalent_revc {
        constructor() {
            this.protoid = 3513;
        }
        read(b) {
            this.idx = b.readUint8();
            this.type = b.readUint8();
        }
    }
    class PetUpgradeTalent_req {
        constructor() {
            this.protoid = 3514;
        }
        write(b) {
            b.writeUint32(this.petSerialNum);
        }
    }
    class PetExtractSuccess_revc {
        constructor() {
            this.protoid = 3515;
        }
        read(b) {
            let len;
            this.petIds = this.petIds || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.petIds.push(b.readUint8());
            }
            this.type = b.readUint8();
        }
    }
    class PetFusion_revc {
        constructor() {
            this.protoid = 3516;
        }
        read(b) {
            let len;
            this.result = b.readUint8();
            this.petSerialNum = b.readUint32();
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewardList.push(item);
            }
        }
    }
    class PetFusion_req {
        constructor() {
            this.protoid = 3517;
        }
        write(b) {
            let len;
            b.writeUint8(this.isAuto);
            this.datalist = this.datalist || [];
            len = this.datalist.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint32(this.datalist[i]);
            }
        }
    }
    class PetUpgradeTalent_revc {
        constructor() {
            this.protoid = 3518;
        }
        read(b) {
            this.idx = b.readUint8();
        }
    }
    class PetNewTalent_revc {
        constructor() {
            this.protoid = 3519;
        }
        read(b) {
        }
    }
    class NewPlayerFeast_revc {
        constructor() {
            this.protoid = 3520;
        }
        read(b) {
            let len;
            this.serialNums = this.serialNums || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.serialNums.push(b.readUint16());
            }
            this.feastBeginUnix = b.readUint32();
            this.feastEndUnix = b.readUint32();
        }
    }
    class NewPlayerFeastSelfRecords_revc {
        constructor() {
            this.protoid = 3521;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stActivityRecord();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class stNewFeast {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.status);
        }
        read(b) {
            this.id = b.readUint8();
            this.status = b.readUint8();
        }
    }
    class NewPlayerFeastRewards_revc {
        constructor() {
            this.protoid = 3522;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stNewFeast();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class NewPlayerFeastScore_revc {
        constructor() {
            this.protoid = 3523;
        }
        read(b) {
            this.type = b.readUint8();
            this.score = b.readUint32();
        }
    }
    class NewPlayerFeastScoreDraw_req {
        constructor() {
            this.protoid = 3524;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint8(this.id);
        }
    }
    class NewServer_revc {
        constructor() {
            this.protoid = 3525;
        }
        read(b) {
            this.isNew = b.readUint8();
        }
    }
    class JjcScoreUpdate_revc {
        constructor() {
            this.protoid = 3526;
        }
        read(b) {
            this.val = b.readUint32();
        }
    }
    class stPetFusionBaoDi {
        constructor() { }
        write(b) {
            b.writeUint8(this.quality);
            b.writeUint8(this.baoDi);
        }
        read(b) {
            this.quality = b.readUint8();
            this.baoDi = b.readUint8();
        }
    }
    class PetFusionBaoDi_revc {
        constructor() {
            this.protoid = 3527;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPetFusionBaoDi();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class StationPillagesNew_req {
        constructor() {
            this.protoid = 3528;
        }
        write(b) {
        }
    }
    class StationPillagesNew_revc {
        constructor() {
            this.protoid = 3529;
        }
        read(b) {
            this.pillagesNew = b.readUint8();
            this.nextRecoverUnix = b.readUint32();
        }
    }
    class stFuncGuide {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint16(this.intervalTask);
            b.writeUint8(this.state);
        }
        read(b) {
            this.id = b.readUint8();
            this.intervalTask = b.readUint16();
            this.state = b.readUint8();
        }
    }
    class GetFuncGuide_req {
        constructor() {
            this.protoid = 3530;
        }
        write(b) {
            b.writeUint8(this.id);
        }
    }
    class GetFuncGuide_revc {
        constructor() {
            this.protoid = 3531;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stFuncGuide();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class BoxCommitState_revc {
        constructor() {
            this.protoid = 3532;
        }
        read(b) {
            this.state = b.readUint8();
        }
    }
    class PetDecompose_req {
        constructor() {
            this.protoid = 3533;
        }
        write(b) {
            b.writeUint32(this.petSerialNum);
        }
    }
    class PlayerTotalCnt_revc {
        constructor() {
            this.protoid = 3534;
        }
        read(b) {
            this.totalCnt = b.readUint32();
        }
    }
    class stSevenTask {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint16(this.nums);
            b.writeUint8(this.status);
        }
        read(b) {
            this.id = b.readUint8();
            this.nums = b.readUint16();
            this.status = b.readUint8();
        }
    }
    class SevenTask_revc {
        constructor() {
            this.protoid = 3535;
        }
        read(b) {
            let len;
            this.flag = b.readUint8();
            this.num = b.readUint16();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSevenTask();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class SevenScore_revc {
        constructor() {
            this.protoid = 3536;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.dataList.push(b.readUint8());
            }
        }
    }
    class SevenEvent_req {
        constructor() {
            this.protoid = 3537;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint8(this.id);
        }
    }
    class SellEquipFinish_revc {
        constructor() {
            this.protoid = 3538;
        }
        read(b) {
        }
    }
    class ShareReward_req {
        constructor() {
            this.protoid = 3539;
        }
        write(b) {
            b.writeUint16(this.funcId);
            b.writeUint8(this.type);
        }
    }
    class stShareReward {
        constructor() { }
        write(b) {
            b.writeUint16(this.funcId);
            b.writeUint8(this.state);
        }
        read(b) {
            this.funcId = b.readUint16();
            this.state = b.readUint8();
        }
    }
    class ShareReward_revc {
        constructor() {
            this.protoid = 3540;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stShareReward();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class stBoxExtraItem {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint16(this.num);
        }
        read(b) {
            this.id = b.readUint8();
            this.num = b.readUint16();
        }
    }
    class BoxExtraItemInit_revc {
        constructor() {
            this.protoid = 3541;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stBoxExtraItem();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class BoxExtraItemChange_revc {
        constructor() {
            this.protoid = 3542;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stBoxExtraItem();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class ClubReward_req {
        constructor() {
            this.protoid = 3543;
        }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.type);
        }
    }
    class stClubReward {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.num);
            b.writeUint8(this.state);
        }
        read(b) {
            this.id = b.readUint8();
            this.num = b.readUint8();
            this.state = b.readUint8();
        }
    }
    class ClubReward_revc {
        constructor() {
            this.protoid = 3544;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stClubReward();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class GemFreeChange_revc {
        constructor() {
            this.protoid = 3545;
        }
        read(b) {
            this.nextFreeUnix = b.readUint32();
            this.freeCount = b.readUint8();
        }
    }
    class stDailyShopWeekCard {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint16(this.subday);
        }
        read(b) {
            this.id = b.readUint8();
            this.subday = b.readUint16();
        }
    }
    class DailyShopWeekCard_revc {
        constructor() {
            this.protoid = 3546;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDailyShopWeekCard();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class stNewPlayerTask {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint16(this.nums);
            b.writeUint8(this.status);
        }
        read(b) {
            this.id = b.readUint8();
            this.nums = b.readUint16();
            this.status = b.readUint8();
        }
    }
    class NewPlayerFeastTask_revc {
        constructor() {
            this.protoid = 3547;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stNewPlayerTask();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class NewPlayerFeastTask_req {
        constructor() {
            this.protoid = 3548;
        }
        write(b) {
            b.writeUint8(this.id);
        }
    }
    class LabourShopFreeChange_revc {
        constructor() {
            this.protoid = 3549;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stLabourShop();
                item.read(b);
                this.datalist.push(item);
            }
            this.type = b.readUint8();
        }
    }
    class LabourShopFree_req {
        constructor() {
            this.protoid = 3550;
        }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.type);
        }
    }
    class stChatPlayer {
        constructor() { }
        write(b) {
            b.writeUint32(this.uid);
            b.writeUTFString(this.headUrl || "");
            b.writeUTFString(this.name || "");
            b.writeUint32(this.playerId);
            b.writeUint8(this.titleId);
            b.writeUint32(this.unix);
            b.writeUTFString(this.chat || "");
            b.writeUint8(this.emojiId);
            b.writeUint8(this.type);
        }
        read(b) {
            this.uid = b.readUint32();
            this.headUrl = b.readUTFString();
            this.name = b.readUTFString();
            this.playerId = b.readUint32();
            this.titleId = b.readUint8();
            this.unix = b.readUint32();
            this.chat = b.readUTFString();
            this.emojiId = b.readUint8();
            this.type = b.readUint8();
        }
    }
    class WorldChatList_revc {
        constructor() {
            this.protoid = 3551;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stChatPlayer();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class WorldChatListChange_revc {
        constructor() {
            this.protoid = 3552;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stChatPlayer();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class WorldChat_req {
        constructor() {
            this.protoid = 3553;
        }
        write(b) {
            b.writeUTFString(this.chat || "");
            b.writeUint8(this.emojiId);
            b.writeUint8(this.type);
        }
    }
    class stAlliance {
        constructor() { }
        write(b) {
            b.writeUint32(this.uid);
            b.writeUTFString(this.name || "");
            b.writeUTFString(this.notice || "");
            b.writeUint16(this.playerLevel);
            b.writeUint8(this.num);
            b.writeUint8(this.auto);
            b.writeUint8(this.show);
            b.writeUint8(this.rank);
        }
        read(b) {
            this.uid = b.readUint32();
            this.name = b.readUTFString();
            this.notice = b.readUTFString();
            this.playerLevel = b.readUint16();
            this.num = b.readUint8();
            this.auto = b.readUint8();
            this.show = b.readUint8();
            this.rank = b.readUint8();
        }
    }
    class stAlliancePlayer {
        constructor() { }
        write(b) {
            b.writeUint32(this.uid);
            b.writeUTFString(this.headUrl || "");
            b.writeUTFString(this.name || "");
            b.writeUint16(this.playerLevel);
            b.writeUint32(this.playerId);
            b.writeUint8(this.titleId);
            b.writeUint8(this.position);
            b.writeUint8(this.isActive);
            b.writeUint32(this.plus);
        }
        read(b) {
            this.uid = b.readUint32();
            this.headUrl = b.readUTFString();
            this.name = b.readUTFString();
            this.playerLevel = b.readUint16();
            this.playerId = b.readUint32();
            this.titleId = b.readUint8();
            this.position = b.readUint8();
            this.isActive = b.readUint8();
            this.plus = b.readUint32();
        }
    }
    class AllianceList_req {
        constructor() {
            this.protoid = 3554;
        }
        write(b) {
        }
    }
    class AllianceList_revc {
        constructor() {
            this.protoid = 3555;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAlliance();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class AllianceInfo_revc {
        constructor() {
            this.protoid = 3556;
            this.info = new stAlliance();
        }
        read(b) {
            this.info.read(b);
        }
    }
    class AlliancePlayerList_revc {
        constructor() {
            this.protoid = 3557;
        }
        read(b) {
            let len;
            this.playerList = this.playerList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAlliancePlayer();
                item.read(b);
                this.playerList.push(item);
            }
        }
    }
    class AllianceJoin_req {
        constructor() {
            this.protoid = 3558;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint32(this.uid);
        }
    }
    class AlliancePlayerManage_req {
        constructor() {
            this.protoid = 3559;
        }
        write(b) {
            b.writeUint32(this.playerId);
            b.writeUint8(this.type);
        }
    }
    class AllianceSet_req {
        constructor() {
            this.protoid = 3560;
        }
        write(b) {
            b.writeUint16(this.level);
            b.writeUint8(this.join);
            b.writeUint8(this.search);
        }
    }
    class AllianceCreate_req {
        constructor() {
            this.protoid = 3561;
        }
        write(b) {
            b.writeUTFString(this.name || "");
        }
    }
    class AllianceApplyList_revc {
        constructor() {
            this.protoid = 3562;
        }
        read(b) {
            let len;
            this.datalist = this.datalist || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAlliancePlayer();
                item.read(b);
                this.datalist.push(item);
            }
        }
    }
    class CheifOnOpen_req {
        constructor() {
            this.protoid = 3563;
        }
        write(b) {
        }
    }
    class ChiefAssist_req {
        constructor() {
            this.protoid = 3564;
        }
        write(b) {
            b.writeUint16(this.cheifId);
            b.writeUint8(this.assistId);
        }
    }
    class ChiefBuyFlag_req {
        constructor() {
            this.protoid = 3565;
        }
        write(b) {
            b.writeUint8(this.id);
        }
    }
    class ChiefBuyFlag_revc {
        constructor() {
            this.protoid = 3566;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.dataList.push(b.readUint8());
            }
        }
    }
    class ChiefChangeFlag_req {
        constructor() {
            this.protoid = 3567;
        }
        write(b) {
            b.writeUint8(this.id);
        }
    }
    class ChiefChangeFlag_revc {
        constructor() {
            this.protoid = 3568;
        }
        read(b) {
            this.id = b.readUint8();
            this.flagFight = b.readUint32();
        }
    }
    class ChiefUpgradeFlag_req {
        constructor() {
            this.protoid = 3569;
        }
        write(b) {
            b.writeUint16(this.cnt);
        }
    }
    class ChiefUpgradeFlag_revc {
        constructor() {
            this.protoid = 3570;
        }
        read(b) {
            this.flagSerial = b.readUint16();
            this.flagFight = b.readUint32();
        }
    }
    class AllianceSearch_req {
        constructor() {
            this.protoid = 3571;
        }
        write(b) {
            b.writeUTFString(this.value || "");
        }
    }
    class AllianceSearch_revc {
        constructor() {
            this.protoid = 3572;
            this.info = new stAlliance();
        }
        read(b) {
            this.info.read(b);
        }
    }
    class AllianceApplyList_req {
        constructor() {
            this.protoid = 3573;
        }
        write(b) {
        }
    }
    class stCheifStarUp {
        constructor() { }
        write(b) {
            b.writeUint16(this.cheifId);
            b.writeUint16(this.num);
        }
        read(b) {
            this.cheifId = b.readUint16();
            this.num = b.readUint16();
        }
    }
    class CheifStarUpMulti_req {
        constructor() {
            this.protoid = 3574;
        }
        write(b) {
            let len;
            this.dataList = this.dataList || [];
            len = this.dataList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.dataList[i].write(b);
            }
        }
    }
    class AllianceBossInit_revc {
        constructor() {
            this.protoid = 3575;
        }
        read(b) {
            this.bossId = b.readUint8();
            this.fightNum = b.readUint8();
            this.ranking = b.readUint16();
            this.lastRanking = b.readUint16();
            this.rankRewardState = b.readUint8();
            this.closeUnix = b.readUint32();
        }
    }
    class stAllianceInnerRankPlayer {
        constructor() {
            this.accHarm = new uint64();
        }
        write(b) {
            b.writeUint8(this.position);
            b.writeUTFString(this.headUrl || "");
            b.writeUTFString(this.name || "");
            b.writeUint16(this.lv);
            b.writeUint32(this.plus);
            b.writeUint16(this.rank);
            b.writeUint32(this.accountId);
            b.writeUint8(this.titleId);
            this.accHarm.write(b);
            b.writeUTFString(this.serverName || "");
        }
        read(b) {
            this.position = b.readUint8();
            this.headUrl = b.readUTFString();
            this.name = b.readUTFString();
            this.lv = b.readUint16();
            this.plus = b.readUint32();
            this.rank = b.readUint16();
            this.accountId = b.readUint32();
            this.titleId = b.readUint8();
            this.accHarm.read(b);
            this.serverName = b.readUTFString();
        }
    }
    class stAllianceBossRank {
        constructor() {
            this.accHarm = new uint64();
        }
        write(b) {
            b.writeUint16(this.rank);
            b.writeUint32(this.uid);
            b.writeUTFString(this.name || "");
            this.accHarm.write(b);
            b.writeUint8(this.num);
        }
        read(b) {
            this.rank = b.readUint16();
            this.uid = b.readUint32();
            this.name = b.readUTFString();
            this.accHarm.read(b);
            this.num = b.readUint8();
        }
    }
    class AllianceBossRankList_req {
        constructor() {
            this.protoid = 3576;
        }
        write(b) {
        }
    }
    class AllianceBossRankList_revc {
        constructor() {
            this.protoid = 3577;
            this.accHarm = new uint64();
        }
        read(b) {
            let len;
            this.rank = b.readUint16();
            this.accHarm.read(b);
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceBossRank();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class AllianceInnerRankList_req {
        constructor() {
            this.protoid = 3578;
        }
        write(b) {
        }
    }
    class AllianceInnerRankList_revc {
        constructor() {
            this.protoid = 3579;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceInnerRankPlayer();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class AllianceMember_req {
        constructor() {
            this.protoid = 3580;
        }
        write(b) {
            b.writeUint32(this.allianceId);
        }
    }
    class AllianceRankReward_revc {
        constructor() {
            this.protoid = 3581;
        }
        read(b) {
            this.rankRewardState = b.readUint8();
        }
    }
    class AllianceBossFight_req {
        constructor() {
            this.protoid = 3582;
        }
        write(b) {
        }
    }
    class AllianceBossFight_revc {
        constructor() {
            this.protoid = 3583;
        }
        read(b) {
            this.fightNum = b.readUint8();
        }
    }
    class CheifStarUpMulti_revc {
        constructor() {
            this.protoid = 3584;
        }
        read(b) {
        }
    }
    class stSkyRank {
        constructor() { }
        write(b) {
            b.writeUint32(this.accountId);
            b.writeUTFString(this.nickName || "");
            b.writeUTFString(this.serverName || "");
            b.writeUTFString(this.naming || "");
            b.writeUTFString(this.headUrl || "");
            b.writeUint32(this.ranking);
            b.writeUint32(this.id);
            b.writeUint16(this.star);
            b.writeUint16(this.level);
            b.writeUint32(this.plus);
            b.writeUint32(this.serialNum);
        }
        read(b) {
            this.accountId = b.readUint32();
            this.nickName = b.readUTFString();
            this.serverName = b.readUTFString();
            this.naming = b.readUTFString();
            this.headUrl = b.readUTFString();
            this.ranking = b.readUint32();
            this.id = b.readUint32();
            this.star = b.readUint16();
            this.level = b.readUint16();
            this.plus = b.readUint32();
            this.serialNum = b.readUint32();
        }
    }
    class SkyRank_req {
        constructor() {
            this.protoid = 3585;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class SkyRank_revc {
        constructor() {
            this.protoid = 3586;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSkyRank();
                item.read(b);
                this.dataList.push(item);
            }
            this.self = this.self || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSkyRank();
                item.read(b);
                this.self.push(item);
            }
        }
    }
    class WatchSkyRank_req {
        constructor() {
            this.protoid = 3587;
        }
        write(b) {
            b.writeUint32(this.accountId);
            b.writeUint32(this.serialNum);
            b.writeUint8(this.type);
        }
    }
    class WatchSkyRank_revc {
        constructor() {
            this.protoid = 3588;
        }
        read(b) {
            let len;
            this.NickName = b.readUTFString();
            this.HeadUrl = b.readUTFString();
            this.serverName = b.readUTFString();
            this.Level = b.readUint16();
            this.plus = b.readUint32();
            this.titleId = b.readUint8();
            this.type = b.readUint8();
            this.ride = this.ride || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stRideInfo();
                item.read(b);
                this.ride.push(item);
            }
            this.petInfo = this.petInfo || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPet();
                item.read(b);
                this.petInfo.push(item);
            }
        }
    }
    class DrawLevelChange_revc {
        constructor() {
            this.protoid = 3589;
        }
        read(b) {
            this.drawLevel = b.readUint8();
            this.curDrawExp = b.readUint32();
        }
    }
    class TotalCntInit_revc {
        constructor() {
            this.protoid = 3590;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.totalCnt = b.readUint32();
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.rewardList.push(b.readUint16());
            }
        }
    }
    class TotalCntReward_req {
        constructor() {
            this.protoid = 3591;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint16(this.id);
        }
    }
    class TotalCntReward_revc {
        constructor() {
            this.protoid = 3592;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.dataList.push(b.readUint16());
            }
        }
    }
    class TotalCntChange_revc {
        constructor() {
            this.protoid = 3593;
        }
        read(b) {
            this.type = b.readUint8();
            this.totalCnt = b.readUint32();
        }
    }
    class PetSoulExchange_req {
        constructor() {
            this.protoid = 3594;
        }
        write(b) {
            b.writeUint8(this.fid);
        }
    }
    class stPromotion {
        constructor() { }
        write(b) {
            b.writeUint16(this.taskId);
            b.writeUint16(this.taskContent);
            b.writeUint8(this.rewardStatus);
        }
        read(b) {
            this.taskId = b.readUint16();
            this.taskContent = b.readUint16();
            this.rewardStatus = b.readUint8();
        }
    }
    class PromotionInit_revc {
        constructor() {
            this.protoid = 3595;
        }
        read(b) {
            let len;
            this.promotionLevel = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPromotion();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class PromotionUgraded_revc {
        constructor() {
            this.protoid = 3596;
        }
        read(b) {
            let len;
            this.promotionLevel = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPromotion();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class PromotionDataChange_revc {
        constructor() {
            this.protoid = 3597;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPromotion();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class PromotionReward_req {
        constructor() {
            this.protoid = 3598;
        }
        write(b) {
            b.writeUint16(this.taskId);
        }
    }
    class Promotion_req {
        constructor() {
            this.protoid = 3599;
        }
        write(b) {
        }
    }
    class stAllianceShop {
        constructor() { }
        write(b) {
            b.writeUint8(this.fid);
            b.writeUint8(this.count);
        }
        read(b) {
            this.fid = b.readUint8();
            this.count = b.readUint8();
        }
    }
    class AllianceShop_req {
        constructor() {
            this.protoid = 3600;
        }
        write(b) {
            b.writeUint8(this.fid);
        }
    }
    class AllianceShop_revc {
        constructor() {
            this.protoid = 3601;
            this.data = new stAllianceShop();
        }
        read(b) {
            this.data.read(b);
        }
    }
    class AllianceShopInit_revc {
        constructor() {
            this.protoid = 3602;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceShop();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class WxAuthInfo_revc {
        constructor() {
            this.protoid = 3603;
        }
        read(b) {
            this.show = b.readUint8();
        }
    }
    class WxAuthInfo_req {
        constructor() {
            this.protoid = 3604;
        }
        write(b) {
        }
    }
    class AllianceSetWord_req {
        constructor() {
            this.protoid = 3605;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUTFString(this.value || "");
        }
    }
    class JustWatchPlayer_req {
        constructor() {
            this.protoid = 3606;
        }
        write(b) {
            b.writeUint32(this.playerId);
        }
    }
    class AllianceJoinWait_revc {
        constructor() {
            this.protoid = 3607;
        }
        read(b) {
            this.seconds = b.readUint32();
        }
    }
    class stAllianceWarTime {
        constructor() { }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint32(this.beginUnix);
            b.writeUint32(this.endUnix);
            b.writeUint8(this.state);
        }
        read(b) {
            this.type = b.readUint8();
            this.beginUnix = b.readUint32();
            this.endUnix = b.readUint32();
            this.state = b.readUint8();
        }
    }
    class AllianceWarInit_revc {
        constructor() {
            this.protoid = 3608;
        }
        read(b) {
            let len;
            this.times = this.times || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceWarTime();
                item.read(b);
                this.times.push(item);
            }
            this.allianceRank = b.readUint8();
            this.clientState = b.readUint8();
        }
    }
    class AllianceWarTimeChange_revc {
        constructor() {
            this.protoid = 3609;
        }
        read(b) {
            let len;
            this.times = this.times || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceWarTime();
                item.read(b);
                this.times.push(item);
            }
            this.clientState = b.readUint8();
        }
    }
    class AllianceWarSignUp_req {
        constructor() {
            this.protoid = 3610;
        }
        write(b) {
        }
    }
    class AllianceWarSignUp_revc {
        constructor() {
            this.protoid = 3611;
        }
        read(b) {
        }
    }
    class AllianceWarPsChange_revc {
        constructor() {
            this.protoid = 3612;
        }
        read(b) {
            this.ps = b.readUint8();
            this.unix = b.readUint32();
        }
    }
    class AllianceWarEnterActivity_req {
        constructor() {
            this.protoid = 3613;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class stAllianceWarLife {
        constructor() { }
        write(b) {
            b.writeUint32(this.id);
            b.writeUint32(this.life);
        }
        read(b) {
            this.id = b.readUint32();
            this.life = b.readUint32();
        }
    }
    class AllianceWarEnemyLife_req {
        constructor() {
            this.protoid = 3614;
        }
        write(b) {
            b.writeUint32(this.id);
        }
    }
    class GameStyle_req {
        constructor() {
            this.protoid = 3615;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class AllianceWarEnemyLife_revc {
        constructor() {
            this.protoid = 3616;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceWarLife();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class AllianceWarFight_req {
        constructor() {
            this.protoid = 3617;
        }
        write(b) {
            b.writeUint32(this.id);
        }
    }
    class GetChestQua_req {
        constructor() {
            this.protoid = 3618;
        }
        write(b) {
            b.writeUint8(this.rate);
        }
    }
    class GetChestQua_revc {
        constructor() {
            this.protoid = 3619;
        }
        read(b) {
            this.val = b.readUint8();
        }
    }
    class stAllianceWarCityPreview {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.cityType);
            this.baseNums = this.baseNums || [];
            len = this.baseNums.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint8(this.baseNums[i]);
            }
        }
        read(b) {
            let len;
            this.cityType = b.readUint8();
            this.baseNums = this.baseNums || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.baseNums.push(b.readUint8());
            }
        }
    }
    class stAllianceWarCityContent {
        constructor() {
            this.enemySkin = new stSkin();
        }
        write(b) {
            b.writeUint8(this.cityType);
            b.writeUint8(this.baseNum);
            b.writeUint32(this.playerId);
            b.writeUint32(this.lifeTotal);
            b.writeUint32(this.life);
            b.writeUTFString(this.name || "");
            b.writeUTFString(this.serverName || "");
            b.writeUTFString(this.allianceName || "");
            b.writeUint32(this.titleid);
            b.writeUint32(this.plus);
            this.enemySkin.write(b);
            b.writeUint32(this.seconds);
            b.writeUint32(this.points);
        }
        read(b) {
            this.cityType = b.readUint8();
            this.baseNum = b.readUint8();
            this.playerId = b.readUint32();
            this.lifeTotal = b.readUint32();
            this.life = b.readUint32();
            this.name = b.readUTFString();
            this.serverName = b.readUTFString();
            this.allianceName = b.readUTFString();
            this.titleid = b.readUint32();
            this.plus = b.readUint32();
            this.enemySkin.read(b);
            this.seconds = b.readUint32();
            this.points = b.readUint32();
        }
    }
    class AllianceWarCityPreview_revc {
        constructor() {
            this.protoid = 3620;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceWarCityPreview();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class AllianceWarCityDetail_req {
        constructor() {
            this.protoid = 3621;
        }
        write(b) {
            b.writeUint8(this.cityType);
        }
    }
    class stAllianceWarCityTakeOver {
        constructor() { }
        write(b) {
            b.writeUint8(this.cityType);
            b.writeUint8(this.baseNum);
            b.writeUint8(this.firsted);
        }
        read(b) {
            this.cityType = b.readUint8();
            this.baseNum = b.readUint8();
            this.firsted = b.readUint8();
        }
    }
    class AllianceWarCityDetail_revc {
        constructor() {
            this.protoid = 3622;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceWarCityContent();
                item.read(b);
                this.dataList.push(item);
            }
            this.takeOverList = this.takeOverList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceWarCityTakeOver();
                item.read(b);
                this.takeOverList.push(item);
            }
        }
    }
    class AllianceWarCityEvent_req {
        constructor() {
            this.protoid = 3623;
        }
        write(b) {
            b.writeUint8(this.flag);
            b.writeUint8(this.cityType);
            b.writeUint8(this.baseNum);
        }
    }
    class AllianceWarCityFresh_req {
        constructor() {
            this.protoid = 3624;
        }
        write(b) {
            b.writeUint8(this.flag);
            b.writeUint8(this.cityType);
        }
    }
    class AllianceWarBounsEnd_req {
        constructor() {
            this.protoid = 3625;
        }
        write(b) {
            b.writeUint32(this.num);
        }
    }
    class AllianceWarBossDamage_req {
        constructor() {
            this.protoid = 3626;
        }
        write(b) {
            b.writeUint32(this.id);
        }
    }
    class stBossDamage {
        constructor() { }
        write(b) {
            b.writeUint32(this.rank);
            b.writeUTFString(this.nickName || "");
            b.writeUint16(this.level);
            b.writeUTFString(this.headUrl || "");
            b.writeUint32(this.titleid);
            b.writeUint32(this.plus);
            b.writeUint16(this.damagePercent);
            b.writeUint32(this.damage);
        }
        read(b) {
            this.rank = b.readUint32();
            this.nickName = b.readUTFString();
            this.level = b.readUint16();
            this.headUrl = b.readUTFString();
            this.titleid = b.readUint32();
            this.plus = b.readUint32();
            this.damagePercent = b.readUint16();
            this.damage = b.readUint32();
        }
    }
    class AllianceWarBossDamage_revc {
        constructor() {
            this.protoid = 3627;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stBossDamage();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class AllianceWarCityLog_req {
        constructor() {
            this.protoid = 3628;
        }
        write(b) {
        }
    }
    class stAllianceWarCityLog {
        constructor() { }
        write(b) {
            b.writeUint32(this.playerId);
            b.writeUTFString(this.nickName || "");
            b.writeUTFString(this.headUrl || "");
            b.writeUTFString(this.allianceName || "");
            b.writeUint16(this.cityFID);
            b.writeUint8(this.action);
            b.writeUint32(this.playerIdDefend);
            b.writeUTFString(this.nickNameDefend || "");
            b.writeUTFString(this.allianceNameDefend || "");
            b.writeUint16(this.lifeDefendPercent);
            b.writeUint32(this.unix);
        }
        read(b) {
            this.playerId = b.readUint32();
            this.nickName = b.readUTFString();
            this.headUrl = b.readUTFString();
            this.allianceName = b.readUTFString();
            this.cityFID = b.readUint16();
            this.action = b.readUint8();
            this.playerIdDefend = b.readUint32();
            this.nickNameDefend = b.readUTFString();
            this.allianceNameDefend = b.readUTFString();
            this.lifeDefendPercent = b.readUint16();
            this.unix = b.readUint32();
        }
    }
    class AllianceWarCityLog_revc {
        constructor() {
            this.protoid = 3629;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceWarCityLog();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class stAllianceWarAllianceRank {
        constructor() { }
        write(b) {
            b.writeUint32(this.uid);
            b.writeUint32(this.rank);
            b.writeUTFString(this.name || "");
            b.writeUint16(this.baseNum);
            b.writeUint32(this.point);
        }
        read(b) {
            this.uid = b.readUint32();
            this.rank = b.readUint32();
            this.name = b.readUTFString();
            this.baseNum = b.readUint16();
            this.point = b.readUint32();
        }
    }
    class AllianceWarAllianceRank_req {
        constructor() {
            this.protoid = 3630;
        }
        write(b) {
        }
    }
    class AllianceWarAllianceRank_revc {
        constructor() {
            this.protoid = 3631;
            this.my = new stAllianceWarAllianceRank();
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceWarAllianceRank();
                item.read(b);
                this.dataList.push(item);
            }
            this.my.read(b);
        }
    }
    class stAllianceWarInnerRank {
        constructor() { }
        write(b) {
            b.writeUint32(this.rank);
            b.writeUTFString(this.nickName || "");
            b.writeUint16(this.level);
            b.writeUTFString(this.headUrl || "");
            b.writeUint32(this.titleid);
            b.writeUint32(this.plus);
            b.writeUint32(this.point);
            b.writeUint32(this.playerId);
        }
        read(b) {
            this.rank = b.readUint32();
            this.nickName = b.readUTFString();
            this.level = b.readUint16();
            this.headUrl = b.readUTFString();
            this.titleid = b.readUint32();
            this.plus = b.readUint32();
            this.point = b.readUint32();
            this.playerId = b.readUint32();
        }
    }
    class AllianceWarInnerRank_req {
        constructor() {
            this.protoid = 3632;
        }
        write(b) {
        }
    }
    class AllianceWarInnerRank_revc {
        constructor() {
            this.protoid = 3633;
            this.my = new stAllianceWarInnerRank();
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceWarInnerRank();
                item.read(b);
                this.dataList.push(item);
            }
            this.my.read(b);
        }
    }
    class stAllianceWarRewardRank {
        constructor() { }
        write(b) {
            b.writeUint32(this.rank);
            b.writeUTFString(this.nickName || "");
            b.writeUint16(this.level);
            b.writeUTFString(this.headUrl || "");
            b.writeUint32(this.titleid);
            b.writeUint32(this.plus);
            b.writeUint32(this.count);
            b.writeUint32(this.playerId);
        }
        read(b) {
            this.rank = b.readUint32();
            this.nickName = b.readUTFString();
            this.level = b.readUint16();
            this.headUrl = b.readUTFString();
            this.titleid = b.readUint32();
            this.plus = b.readUint32();
            this.count = b.readUint32();
            this.playerId = b.readUint32();
        }
    }
    class AllianceWarRewardRank_req {
        constructor() {
            this.protoid = 3634;
        }
        write(b) {
        }
    }
    class AllianceWarRewardRank_revc {
        constructor() {
            this.protoid = 3635;
            this.my = new stAllianceWarRewardRank();
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stAllianceWarRewardRank();
                item.read(b);
                this.dataList.push(item);
            }
            this.my.read(b);
        }
    }
    class AllianceWarGetRankReward_req {
        constructor() {
            this.protoid = 3636;
        }
        write(b) {
            b.writeUint8(this.flag);
        }
    }
    class AllianceWarGetRankReward_revc {
        constructor() {
            this.protoid = 3637;
        }
        read(b) {
            this.flag = b.readUint8();
            this.state = b.readUint8();
        }
    }
    class BattlePass_revc {
        constructor() {
            this.protoid = 3638;
        }
        read(b) {
            this.monthPoint = b.readUint32();
            this.weekPoint = b.readUint32();
        }
    }
    class stBattlePassCard {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint32();
            this.state = b.readUint8();
        }
    }
    class BattlePassMonth_revc {
        constructor() {
            this.protoid = 3639;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stBattlePassCard();
                item.read(b);
                this.dataList.push(item);
            }
            this.paid = b.readUint8();
            this.round = b.readUint8();
            this.endUnix = b.readUint32();
        }
    }
    class BattlePassWeek_revc {
        constructor() {
            this.protoid = 3640;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stBattlePassCard();
                item.read(b);
                this.dataList.push(item);
            }
            this.paid = b.readUint8();
            this.round = b.readUint8();
            this.endUnix = b.readUint32();
        }
    }
    class BattlePassReward_req {
        constructor() {
            this.protoid = 3641;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class stBattlePassTask {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint16(this.count);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint32();
            this.count = b.readUint16();
            this.state = b.readUint8();
        }
    }
    class BattlePassTask_revc {
        constructor() {
            this.protoid = 3642;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stBattlePassTask();
                item.read(b);
                this.dataList.push(item);
            }
            this.endUnix = b.readUint32();
        }
    }
    class BattlePassTaskUpdate_revc {
        constructor() {
            this.protoid = 3643;
            this.data = new stBattlePassTask();
        }
        read(b) {
            this.data.read(b);
        }
    }
    class stBattlePassPack {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint8(this.paid);
        }
        read(b) {
            this.fid = b.readUint32();
            this.paid = b.readUint8();
        }
    }
    class BattlePassPack_revc {
        constructor() {
            this.protoid = 3644;
        }
        read(b) {
            let len;
            this.buyNum = b.readUint16();
            this.endUnix = b.readUint32();
            this.freeState = b.readUint8();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stBattlePassPack();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class BattlePassMonthUpdate_revc {
        constructor() {
            this.protoid = 3645;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stBattlePassCard();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class BattlePassWeekUpdate_revc {
        constructor() {
            this.protoid = 3646;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stBattlePassCard();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class BattlePassTask_req {
        constructor() {
            this.protoid = 3647;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class BattlePassPackFree_req {
        constructor() {
            this.protoid = 3648;
        }
        write(b) {
        }
    }
    class BattlePassPackFree_revc {
        constructor() {
            this.protoid = 3649;
        }
        read(b) {
            this.freeState = b.readUint8();
        }
    }
    class BattlePassPackAccTimes_req {
        constructor() {
            this.protoid = 3650;
        }
        write(b) {
        }
    }
    class BattlePassPackAccTimes_revc {
        constructor() {
            this.protoid = 3651;
        }
        read(b) {
            this.buyNum = b.readUint16();
        }
    }
    class BattlePassPackUpdate_revc {
        constructor() {
            this.protoid = 3652;
            this.data = new stBattlePassPack();
        }
        read(b) {
            this.data.read(b);
        }
    }
    class GameStyle_revc {
        constructor() {
            this.protoid = 3653;
        }
        read(b) {
            this.type = b.readUint8();
        }
    }
    class NewCrossGroup_revc {
        constructor() {
            this.protoid = 3654;
        }
        read(b) {
            this.newCrossGroupId = b.readUint32();
            this.serverIdBegin = b.readUint32();
            this.serverIdEnd = b.readUint32();
        }
    }
    class stDailyEventTask {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint16(this.count);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint32();
            this.count = b.readUint16();
            this.state = b.readUint8();
        }
    }
    class DailyEventInit_revc {
        constructor() {
            this.protoid = 3655;
        }
        read(b) {
            let len;
            this.taskList = this.taskList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDailyEventTask();
                item.read(b);
                this.taskList.push(item);
            }
            this.taskEndUnix = b.readUint32();
        }
    }
    class DailyEventTaskUpdate_revc {
        constructor() {
            this.protoid = 3656;
        }
        read(b) {
            let len;
            this.taskList = this.taskList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDailyEventTask();
                item.read(b);
                this.taskList.push(item);
            }
        }
    }
    class DailyEventTask_req {
        constructor() {
            this.protoid = 3657;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class DailyEventSearch_req {
        constructor() {
            this.protoid = 3658;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint8(this.position);
        }
    }
    class stDailyEvent {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.type);
            this.rewardList = this.rewardList || [];
            len = this.rewardList.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                this.rewardList[i].write(b);
            }
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewardList.push(item);
            }
        }
    }
    class DailyEventSearch_revc {
        constructor() {
            this.protoid = 3659;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDailyEvent();
                item.read(b);
                this.dataList.push(item);
            }
            this.position = b.readUint8();
        }
    }
    class stMonopolyMapInfo {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint16(this.num);
            b.writeUint16(this.count);
            b.writeUint8(this.type);
        }
        read(b) {
            this.fid = b.readUint32();
            this.num = b.readUint16();
            this.count = b.readUint16();
            this.type = b.readUint8();
        }
    }
    class stMonopolyTask {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint16(this.count);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint32();
            this.count = b.readUint16();
            this.state = b.readUint8();
        }
    }
    class stMonopolyPack {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint8(this.count);
        }
        read(b) {
            this.fid = b.readUint32();
            this.count = b.readUint8();
        }
    }
    class MonopolyInit_revc {
        constructor() {
            this.protoid = 3660;
        }
        read(b) {
            let len;
            this.type = b.readUint16();
            this.mapList = this.mapList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMonopolyMapInfo();
                item.read(b);
                this.mapList.push(item);
            }
            this.taskList = this.taskList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMonopolyTask();
                item.read(b);
                this.taskList.push(item);
            }
            this.packList = this.packList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMonopolyPack();
                item.read(b);
                this.packList.push(item);
            }
            this.refreshUnix = b.readUint32();
            this.endUnix = b.readUint32();
        }
    }
    class MonopolyGo_req {
        constructor() {
            this.protoid = 3661;
        }
        write(b) {
            b.writeUint32(this.mapId);
        }
    }
    class MonopolyMapUpdate_revc {
        constructor() {
            this.protoid = 3662;
        }
        read(b) {
            let len;
            this.mapList = this.mapList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMonopolyMapInfo();
                item.read(b);
                this.mapList.push(item);
            }
        }
    }
    class MonopolyTaskUpdate_revc {
        constructor() {
            this.protoid = 3663;
        }
        read(b) {
            let len;
            this.taskList = this.taskList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stMonopolyTask();
                item.read(b);
                this.taskList.push(item);
            }
        }
    }
    class MonopolyTask_req {
        constructor() {
            this.protoid = 3664;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class MonopolyPack_req {
        constructor() {
            this.protoid = 3665;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class MonopolyPackUpdate_revc {
        constructor() {
            this.protoid = 3666;
            this.data = new stMonopolyPack();
        }
        read(b) {
            this.data.read(b);
        }
    }
    class MonopolyReward_req {
        constructor() {
            this.protoid = 3667;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class stDrawEventRewardInfo {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint32();
            this.state = b.readUint8();
        }
    }
    class stDrawEventCumulateRewardInfo {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint32();
            this.state = b.readUint8();
        }
    }
    class stDrawEventTask {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint16(this.count);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint32();
            this.count = b.readUint16();
            this.state = b.readUint8();
        }
    }
    class stDrawEventPack {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint8(this.count);
        }
        read(b) {
            this.fid = b.readUint32();
            this.count = b.readUint8();
        }
    }
    class DrawEventInit_revc {
        constructor() {
            this.protoid = 3668;
        }
        read(b) {
            let len;
            this.rewardFid = b.readUint32();
            this.type = b.readUint16();
            this.count = b.readUint32();
            this.fuYunCount = b.readUint32();
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDrawEventRewardInfo();
                item.read(b);
                this.rewardList.push(item);
            }
            this.cumulateRewardList = this.cumulateRewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDrawEventCumulateRewardInfo();
                item.read(b);
                this.cumulateRewardList.push(item);
            }
            this.taskList = this.taskList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDrawEventTask();
                item.read(b);
                this.taskList.push(item);
            }
            this.packList = this.packList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDrawEventPack();
                item.read(b);
                this.packList.push(item);
            }
            this.refreshUnix = b.readUint32();
            this.endUnix = b.readUint32();
        }
    }
    class DrawEventChoose_req {
        constructor() {
            this.protoid = 3669;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class DrawEventChoose_revc {
        constructor() {
            this.protoid = 3670;
        }
        read(b) {
            this.fid = b.readUint32();
        }
    }
    class DrawEvent_req {
        constructor() {
            this.protoid = 3671;
        }
        write(b) {
            b.writeUint8(this.type);
        }
    }
    class DrawEventRewardUpdate_revc {
        constructor() {
            this.protoid = 3672;
        }
        read(b) {
            let len;
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDrawEventRewardInfo();
                item.read(b);
                this.rewardList.push(item);
            }
            this.count = b.readUint32();
            this.fuYunCount = b.readUint32();
            this.cumulateRewardList = this.cumulateRewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDrawEventCumulateRewardInfo();
                item.read(b);
                this.cumulateRewardList.push(item);
            }
        }
    }
    class DrawEventTaskUpdate_revc {
        constructor() {
            this.protoid = 3673;
        }
        read(b) {
            let len;
            this.taskList = this.taskList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDrawEventTask();
                item.read(b);
                this.taskList.push(item);
            }
        }
    }
    class DrawEventTask_req {
        constructor() {
            this.protoid = 3674;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class DrawEventPack_req {
        constructor() {
            this.protoid = 3675;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class DrawEventPack_revc {
        constructor() {
            this.protoid = 3676;
            this.data = new stDrawEventPack();
        }
        read(b) {
            this.data.read(b);
        }
    }
    class DrawEventCumulateReward_req {
        constructor() {
            this.protoid = 3677;
        }
        write(b) {
            b.writeUint8(this.fid);
        }
    }
    class DrawEventCumulateReward_revc {
        constructor() {
            this.protoid = 3678;
        }
        read(b) {
            let len;
            this.cumulateRewardList = this.cumulateRewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stDrawEventCumulateRewardInfo();
                item.read(b);
                this.cumulateRewardList.push(item);
            }
        }
    }
    class DrawEventReward_req {
        constructor() {
            this.protoid = 3679;
        }
        write(b) {
        }
    }
    class stArtifactSuit {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint8(this.state);
            b.writeUint8(this.currentLevel);
            b.writeUint8(this.activeLevel);
        }
        read(b) {
            this.fid = b.readUint32();
            this.state = b.readUint8();
            this.currentLevel = b.readUint8();
            this.activeLevel = b.readUint8();
        }
    }
    class ArtifactSuitInit_revc {
        constructor() {
            this.protoid = 3680;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stArtifactSuit();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class ArtifactSuit_req {
        constructor() {
            this.protoid = 3681;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class ArtifactSuitUpdate_revc {
        constructor() {
            this.protoid = 3682;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stArtifactSuit();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class GemLifeBlood_req {
        constructor() {
            this.protoid = 3684;
        }
        write(b) {
            b.writeUint8(this.flag);
        }
    }
    class GemLifeBlood_revc {
        constructor() {
            this.protoid = 3685;
        }
        read(b) {
            let len;
            this.lifeBloodList = this.lifeBloodList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stGemLifeBlood();
                item.read(b);
                this.lifeBloodList.push(item);
            }
        }
    }
    class AllianceWarCan_revc {
        constructor() {
            this.protoid = 3686;
        }
        read(b) {
            this.state = b.readUint8();
        }
    }
    class AllianceWarPlayerDamage_revc {
        constructor() {
            this.protoid = 3687;
        }
        read(b) {
            this.bossId = b.readUint8();
            this.damage = b.readUint32();
        }
    }
    class AllianceWarSkins_revc {
        constructor() {
            this.protoid = 3688;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSkin();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class AllianceWarRank_req {
        constructor() {
            this.protoid = 3689;
        }
        write(b) {
        }
    }
    class AllianceWarRank_revc {
        constructor() {
            this.protoid = 3690;
        }
        read(b) {
            this.rank = b.readUint8();
        }
    }
    class AllianceWarBounsEnd_revc {
        constructor() {
            this.protoid = 3691;
        }
        read(b) {
            let len;
            this.num = b.readUint32();
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stCellValue();
                item.read(b);
                this.rewardList.push(item);
            }
        }
    }
    class stNamingReward {
        constructor() { }
        write(b) {
            b.writeUint8(this.id);
            b.writeUint8(this.state);
        }
        read(b) {
            this.id = b.readUint8();
            this.state = b.readUint8();
        }
    }
    class NamingInit_revc {
        constructor() {
            this.protoid = 3692;
        }
        read(b) {
            let len;
            this.firstDayCharge = b.readUint32();
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stNamingReward();
                item.read(b);
                this.dataList.push(item);
            }
            this.canNamed = b.readUint8();
            this.namedTimes = b.readUint8();
            this.namedEndUnix = b.readUint32();
            this.firstDayEndUnix = b.readUint32();
        }
    }
    class FirstDayCharge_revc {
        constructor() {
            this.protoid = 3693;
        }
        read(b) {
            this.cnt = b.readUint32();
        }
    }
    class NamingReward_revc {
        constructor() {
            this.protoid = 3694;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stNamingReward();
                item.read(b);
                this.dataList.push(item);
            }
        }
    }
    class NameingChange_revc {
        constructor() {
            this.protoid = 3695;
        }
        read(b) {
            this.canNamed = b.readUint8();
            this.namedTimes = b.readUint8();
            this.namedEndUnix = b.readUint32();
        }
    }
    class GetNamingReward_req {
        constructor() {
            this.protoid = 3696;
        }
        write(b) {
            b.writeUint8(this.flag);
        }
    }
    class NameingServer_req {
        constructor() {
            this.protoid = 3697;
        }
        write(b) {
            b.writeUTFString(this.serverName || "");
        }
    }
    class NameingServer_revc {
        constructor() {
            this.protoid = 3698;
        }
        read(b) {
            this.serverId = b.readUint32();
            this.naming = b.readUTFString();
        }
    }
    class NamingChargeRank_req {
        constructor() {
            this.protoid = 3699;
        }
        write(b) {
            b.writeUint8(this.flag);
        }
    }
    class stNamingRank {
        constructor() { }
        write(b) {
            b.writeUint32(this.ranking);
            b.writeUint32(this.accountId);
            b.writeUTFString(this.nickName || "");
            b.writeUTFString(this.headUrl || "");
            b.writeUint16(this.playerLevel);
            b.writeUint16(this.titleId);
            b.writeUint32(this.plus);
        }
        read(b) {
            this.ranking = b.readUint32();
            this.accountId = b.readUint32();
            this.nickName = b.readUTFString();
            this.headUrl = b.readUTFString();
            this.playerLevel = b.readUint16();
            this.titleId = b.readUint16();
            this.plus = b.readUint32();
        }
    }
    class NamingChargeRankFirstDay_revc {
        constructor() {
            this.protoid = 3700;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stNamingRank();
                item.read(b);
                this.dataList.push(item);
            }
            this.top1 = this.top1 || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPeakJjcAvatar();
                item.read(b);
                this.top1.push(item);
            }
        }
    }
    class NamingChargeRank_revc {
        constructor() {
            this.protoid = 3701;
        }
        read(b) {
            let len;
            this.dataList = this.dataList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stNamingRank();
                item.read(b);
                this.dataList.push(item);
            }
            this.self = this.self || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stNamingRank();
                item.read(b);
                this.self.push(item);
            }
            this.top3 = this.top3 || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stPeakJjcAvatar();
                item.read(b);
                this.top3.push(item);
            }
        }
    }
    class AllianceWarBounsCan_revc {
        constructor() {
            this.protoid = 3703;
        }
        read(b) {
            this.code = b.readUint8();
        }
    }
    class AllianceWarGetRankRewardState_req {
        constructor() {
            this.protoid = 3704;
        }
        write(b) {
        }
    }
    class stSpringFestivalRewardInfo {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint32();
            this.state = b.readUint8();
        }
    }
    class stSpringFestivalTask {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint32(this.count);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint32();
            this.count = b.readUint32();
            this.state = b.readUint8();
        }
    }
    class stSpringFestivalPack {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint8(this.count);
        }
        read(b) {
            this.fid = b.readUint32();
            this.count = b.readUint8();
        }
    }
    class stSpringFestivalShop {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint8(this.count);
        }
        read(b) {
            this.fid = b.readUint32();
            this.count = b.readUint8();
        }
    }
    class stSpringFestivalAllianceRank {
        constructor() { }
        write(b) {
            b.writeUint32(this.uid);
            b.writeUint32(this.rank);
            b.writeUTFString(this.name || "");
            b.writeUint32(this.prestige);
        }
        read(b) {
            this.uid = b.readUint32();
            this.rank = b.readUint32();
            this.name = b.readUTFString();
            this.prestige = b.readUint32();
        }
    }
    class SpringFestivalInit_revc {
        constructor() {
            this.protoid = 3705;
        }
        read(b) {
            let len;
            this.allianceId = b.readUint32();
            this.prestige = b.readUint32();
            this.canJoin = b.readUint8();
            this.isEnroll = b.readUint8();
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSpringFestivalRewardInfo();
                item.read(b);
                this.rewardList.push(item);
            }
            this.taskList = this.taskList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSpringFestivalTask();
                item.read(b);
                this.taskList.push(item);
            }
            this.packList = this.packList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSpringFestivalPack();
                item.read(b);
                this.packList.push(item);
            }
            this.shopList = this.shopList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSpringFestivalShop();
                item.read(b);
                this.shopList.push(item);
            }
            this.rank = b.readUint16();
            this.state = b.readUint8();
            this.endunix = b.readUint32();
            this.rewardEndunix = b.readUint32();
        }
    }
    class SpringFestivalCanJoin_req {
        constructor() {
            this.protoid = 3706;
        }
        write(b) {
        }
    }
    class SpringFestivalCanJoin_revc {
        constructor() {
            this.protoid = 3707;
        }
        read(b) {
            this.canJoin = b.readUint8();
        }
    }
    class SpringFestivalEnroll_req {
        constructor() {
            this.protoid = 3708;
        }
        write(b) {
        }
    }
    class SpringFestivalEnroll_revc {
        constructor() {
            this.protoid = 3709;
        }
        read(b) {
            this.isEnroll = b.readUint8();
        }
    }
    class SpringFestivalFire_req {
        constructor() {
            this.protoid = 3710;
        }
        write(b) {
            b.writeUint32(this.itemId);
            b.writeUint32(this.count);
        }
    }
    class SpringFestivalTaskUpdate_revc {
        constructor() {
            this.protoid = 3711;
        }
        read(b) {
            let len;
            this.taskList = this.taskList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSpringFestivalTask();
                item.read(b);
                this.taskList.push(item);
            }
        }
    }
    class SpringFestivalTask_req {
        constructor() {
            this.protoid = 3712;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class SpringFestivalPack_req {
        constructor() {
            this.protoid = 3713;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }
    class SpringFestivalPack_revc {
        constructor() {
            this.protoid = 3714;
            this.data = new stSpringFestivalPack();
        }
        read(b) {
            this.data.read(b);
        }
    }
    class SpringFestivalReward_req {
        constructor() {
            this.protoid = 3715;
        }
        write(b) {
            b.writeUint8(this.fid);
        }
    }
    class SpringFestivalReward_revc {
        constructor() {
            this.protoid = 3716;
        }
        read(b) {
            let len;
            this.rewardList = this.rewardList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSpringFestivalRewardInfo();
                item.read(b);
                this.rewardList.push(item);
            }
        }
    }
    class SpringFestivalAllianceRank_req {
        constructor() {
            this.protoid = 3717;
        }
        write(b) {
        }
    }
    class SpringFestivalAllianceRank_revc {
        constructor() {
            this.protoid = 3718;
        }
        read(b) {
            let len;
            this.rankList = this.rankList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSpringFestivalAllianceRank();
                item.read(b);
                this.rankList.push(item);
            }
            this.rank = b.readUint16();
        }
    }
    class SpringFestivalAllianceRankReward_req {
        constructor() {
            this.protoid = 3719;
        }
        write(b) {
        }
    }
    class SpringFestivalAllianceRankReward_revc {
        constructor() {
            this.protoid = 3720;
        }
        read(b) {
            this.state = b.readUint8();
        }
    }
    class SpringFestivalShop_req {
        constructor() {
            this.protoid = 3721;
        }
        write(b) {
            b.writeUint16(this.fid);
            b.writeUint16(this.count);
        }
    }
    class SpringFestivalShop_revc {
        constructor() {
            this.protoid = 3722;
        }
        read(b) {
            let len;
            this.shopList = this.shopList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stSpringFestivalShop();
                item.read(b);
                this.shopList.push(item);
            }
        }
    }
    class SpringFestivalPrestige_revc {
        constructor() {
            this.protoid = 3723;
        }
        read(b) {
            this.prestige = b.readUint32();
        }
    }
    class SideBarReward_req {
        constructor() {
            this.protoid = 3724;
        }
        write(b) {
        }
    }
    class SideBarReward_revc {
        constructor() {
            this.protoid = 3725;
        }
        read(b) {
            this.state = b.readUint8();
        }
    }
    class SpringFestivalFire_revc {
        constructor() {
            this.protoid = 3726;
        }
        read(b) {
            this.itemId = b.readUint32();
        }
    }
    class stWarcraftSkin {
        constructor() { }
        write(b) {
            let len;
            b.writeUint8(this.type);
            b.writeUint32(this.skinId);
            this.skinIds = this.skinIds || [];
            len = this.skinIds.length;
            b.writeInt32(len);
            for (let i = 0; i < len; i++) {
                b.writeUint32(this.skinIds[i]);
            }
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.skinId = b.readUint32();
            this.skinIds = this.skinIds || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.skinIds.push(b.readUint32());
            }
        }
    }
    class stWarcraftAttr {
        constructor() { }
        write(b) {
            b.writeUint32(this.fid);
            b.writeUint8(this.state);
        }
        read(b) {
            this.fid = b.readUint32();
            this.state = b.readUint8();
        }
    }
    class WarcraftSkinInit_revc {
        constructor() {
            this.protoid = 3727;
        }
        read(b) {
            let len;
            this.skinList = this.skinList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stWarcraftSkin();
                item.read(b);
                this.skinList.push(item);
            }
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stWarcraftAttr();
                item.read(b);
                this.attrList.push(item);
            }
        }
    }
    class WarcraftSkin_req {
        constructor() {
            this.protoid = 3728;
        }
        write(b) {
            b.writeUint8(this.type);
            b.writeUint32(this.fid);
        }
    }
    class WarcraftSkin_revc {
        constructor() {
            this.protoid = 3729;
        }
        read(b) {
            this.type = b.readUint8();
            this.skinId = b.readUint32();
        }
    }
    class WarcraftSkinListUpdate_revc {
        constructor() {
            this.protoid = 3730;
        }
        read(b) {
            let len;
            this.type = b.readUint8();
            this.skinIds = this.skinIds || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                this.skinIds.push(b.readUint32());
            }
        }
    }
    class WarcraftAttrListUpdate_revc {
        constructor() {
            this.protoid = 3731;
        }
        read(b) {
            let len;
            this.attrList = this.attrList || [];
            len = b.readInt32();
            for (let i = 0; i < len; i++) {
                let item = new stWarcraftAttr();
                item.read(b);
                this.attrList.push(item);
            }
        }
    }
    class WarcraftSkinAttr_req {
        constructor() {
            this.protoid = 3732;
        }
        write(b) {
            b.writeUint32(this.fid);
        }
    }

    exports.ActionEquip_req = ActionEquip_req;
    exports.ActivityAction_req = ActivityAction_req;
    exports.ActivityChange_revc = ActivityChange_revc;
    exports.ActivityGetInfo_req = ActivityGetInfo_req;
    exports.ActivityInit_revc = ActivityInit_revc;
    exports.ActivityList_revc = ActivityList_revc;
    exports.ActivityNums_req = ActivityNums_req;
    exports.ActivityNums_revc = ActivityNums_revc;
    exports.ActivityRecords_req = ActivityRecords_req;
    exports.ActivityRecords_revc = ActivityRecords_revc;
    exports.ActivityRedListChange_revc = ActivityRedListChange_revc;
    exports.ActivityRedListInit_req = ActivityRedListInit_req;
    exports.ActivitySelfRecords_revc = ActivitySelfRecords_revc;
    exports.ActivityStatus_revc = ActivityStatus_revc;
    exports.ActivityTotalCntReward_req = ActivityTotalCntReward_req;
    exports.ActivityTotalCntReward_revc = ActivityTotalCntReward_revc;
    exports.ActivityTotalCnt_revc = ActivityTotalCnt_revc;
    exports.AdCdChange_revc = AdCdChange_revc;
    exports.AdCdInit_revc = AdCdInit_revc;
    exports.AdFreeCardGet_req = AdFreeCardGet_req;
    exports.AdFreeCard_revc = AdFreeCard_revc;
    exports.AdWatchDone_req = AdWatchDone_req;
    exports.Adventure_Boss_req = Adventure_Boss_req;
    exports.Adventure_Boss_revc = Adventure_Boss_revc;
    exports.Adventure_req = Adventure_req;
    exports.Adventure_revc = Adventure_revc;
    exports.AfkFastUpdate_revc = AfkFastUpdate_revc;
    exports.AfkFast_req = AfkFast_req;
    exports.AfkInit_revc = AfkInit_revc;
    exports.AfkInvite_req = AfkInvite_req;
    exports.AfkInviteeBuy_req = AfkInviteeBuy_req;
    exports.AfkInviteeTimeUp_req = AfkInviteeTimeUp_req;
    exports.AfkInviteeUpdate_revc = AfkInviteeUpdate_revc;
    exports.AfkPackTimeUp_req = AfkPackTimeUp_req;
    exports.AfkPackUpdate_revc = AfkPackUpdate_revc;
    exports.AfkRefresh_req = AfkRefresh_req;
    exports.AfkRewardTimeUp_req = AfkRewardTimeUp_req;
    exports.AfkReward_req = AfkReward_req;
    exports.AfkUpdate_revc = AfkUpdate_revc;
    exports.AllLifeCardGet_req = AllLifeCardGet_req;
    exports.AllLifeCard_revc = AllLifeCard_revc;
    exports.AllianceApplyList_req = AllianceApplyList_req;
    exports.AllianceApplyList_revc = AllianceApplyList_revc;
    exports.AllianceBossFight_req = AllianceBossFight_req;
    exports.AllianceBossFight_revc = AllianceBossFight_revc;
    exports.AllianceBossInit_revc = AllianceBossInit_revc;
    exports.AllianceBossRankList_req = AllianceBossRankList_req;
    exports.AllianceBossRankList_revc = AllianceBossRankList_revc;
    exports.AllianceCreate_req = AllianceCreate_req;
    exports.AllianceInfo_revc = AllianceInfo_revc;
    exports.AllianceInnerRankList_req = AllianceInnerRankList_req;
    exports.AllianceInnerRankList_revc = AllianceInnerRankList_revc;
    exports.AllianceJoinWait_revc = AllianceJoinWait_revc;
    exports.AllianceJoin_req = AllianceJoin_req;
    exports.AllianceList_req = AllianceList_req;
    exports.AllianceList_revc = AllianceList_revc;
    exports.AllianceMember_req = AllianceMember_req;
    exports.AlliancePlayerList_revc = AlliancePlayerList_revc;
    exports.AlliancePlayerManage_req = AlliancePlayerManage_req;
    exports.AllianceRankReward_revc = AllianceRankReward_revc;
    exports.AllianceSearch_req = AllianceSearch_req;
    exports.AllianceSearch_revc = AllianceSearch_revc;
    exports.AllianceSetWord_req = AllianceSetWord_req;
    exports.AllianceSet_req = AllianceSet_req;
    exports.AllianceShopInit_revc = AllianceShopInit_revc;
    exports.AllianceShop_req = AllianceShop_req;
    exports.AllianceShop_revc = AllianceShop_revc;
    exports.AllianceWarAllianceRank_req = AllianceWarAllianceRank_req;
    exports.AllianceWarAllianceRank_revc = AllianceWarAllianceRank_revc;
    exports.AllianceWarBossDamage_req = AllianceWarBossDamage_req;
    exports.AllianceWarBossDamage_revc = AllianceWarBossDamage_revc;
    exports.AllianceWarBounsCan_revc = AllianceWarBounsCan_revc;
    exports.AllianceWarBounsEnd_req = AllianceWarBounsEnd_req;
    exports.AllianceWarBounsEnd_revc = AllianceWarBounsEnd_revc;
    exports.AllianceWarCan_revc = AllianceWarCan_revc;
    exports.AllianceWarCityDetail_req = AllianceWarCityDetail_req;
    exports.AllianceWarCityDetail_revc = AllianceWarCityDetail_revc;
    exports.AllianceWarCityEvent_req = AllianceWarCityEvent_req;
    exports.AllianceWarCityFresh_req = AllianceWarCityFresh_req;
    exports.AllianceWarCityLog_req = AllianceWarCityLog_req;
    exports.AllianceWarCityLog_revc = AllianceWarCityLog_revc;
    exports.AllianceWarCityPreview_revc = AllianceWarCityPreview_revc;
    exports.AllianceWarEnemyLife_req = AllianceWarEnemyLife_req;
    exports.AllianceWarEnemyLife_revc = AllianceWarEnemyLife_revc;
    exports.AllianceWarEnterActivity_req = AllianceWarEnterActivity_req;
    exports.AllianceWarFight_req = AllianceWarFight_req;
    exports.AllianceWarGetRankRewardState_req = AllianceWarGetRankRewardState_req;
    exports.AllianceWarGetRankReward_req = AllianceWarGetRankReward_req;
    exports.AllianceWarGetRankReward_revc = AllianceWarGetRankReward_revc;
    exports.AllianceWarInit_revc = AllianceWarInit_revc;
    exports.AllianceWarInnerRank_req = AllianceWarInnerRank_req;
    exports.AllianceWarInnerRank_revc = AllianceWarInnerRank_revc;
    exports.AllianceWarPlayerDamage_revc = AllianceWarPlayerDamage_revc;
    exports.AllianceWarPsChange_revc = AllianceWarPsChange_revc;
    exports.AllianceWarRank_req = AllianceWarRank_req;
    exports.AllianceWarRank_revc = AllianceWarRank_revc;
    exports.AllianceWarRewardRank_req = AllianceWarRewardRank_req;
    exports.AllianceWarRewardRank_revc = AllianceWarRewardRank_revc;
    exports.AllianceWarSignUp_req = AllianceWarSignUp_req;
    exports.AllianceWarSignUp_revc = AllianceWarSignUp_revc;
    exports.AllianceWarSkins_revc = AllianceWarSkins_revc;
    exports.AllianceWarTimeChange_revc = AllianceWarTimeChange_revc;
    exports.ArtifactHandler_req = ArtifactHandler_req;
    exports.ArtifactList_revc = ArtifactList_revc;
    exports.ArtifactLogList_req = ArtifactLogList_req;
    exports.ArtifactLogList_revc = ArtifactLogList_revc;
    exports.ArtifactPackList_revc = ArtifactPackList_revc;
    exports.ArtifactPackUpdate_revc = ArtifactPackUpdate_revc;
    exports.ArtifactPack_req = ArtifactPack_req;
    exports.ArtifactSuitInit_revc = ArtifactSuitInit_revc;
    exports.ArtifactSuitUpdate_revc = ArtifactSuitUpdate_revc;
    exports.ArtifactSuit_req = ArtifactSuit_req;
    exports.ArtifactUpdate_revc = ArtifactUpdate_revc;
    exports.BattlePassMonthUpdate_revc = BattlePassMonthUpdate_revc;
    exports.BattlePassMonth_revc = BattlePassMonth_revc;
    exports.BattlePassPackAccTimes_req = BattlePassPackAccTimes_req;
    exports.BattlePassPackAccTimes_revc = BattlePassPackAccTimes_revc;
    exports.BattlePassPackFree_req = BattlePassPackFree_req;
    exports.BattlePassPackFree_revc = BattlePassPackFree_revc;
    exports.BattlePassPackUpdate_revc = BattlePassPackUpdate_revc;
    exports.BattlePassPack_revc = BattlePassPack_revc;
    exports.BattlePassReward_req = BattlePassReward_req;
    exports.BattlePassTaskUpdate_revc = BattlePassTaskUpdate_revc;
    exports.BattlePassTask_req = BattlePassTask_req;
    exports.BattlePassTask_revc = BattlePassTask_revc;
    exports.BattlePassWeekUpdate_revc = BattlePassWeekUpdate_revc;
    exports.BattlePassWeek_revc = BattlePassWeek_revc;
    exports.BattlePass_revc = BattlePass_revc;
    exports.BlessingAutoZH_revc_revc = BlessingAutoZH_revc_revc;
    exports.BlessingAuto_req = BlessingAuto_req;
    exports.BlessingChange_revc = BlessingChange_revc;
    exports.BlessingConvert_req = BlessingConvert_req;
    exports.BlessingInit_revc = BlessingInit_revc;
    exports.BlessingItemRemove_revc = BlessingItemRemove_revc;
    exports.BlessingLevelUp_req = BlessingLevelUp_req;
    exports.BlessingLevel_req = BlessingLevel_req;
    exports.BlessingMaxLevelRewards_revc = BlessingMaxLevelRewards_revc;
    exports.BlessingOnce_req = BlessingOnce_req;
    exports.BlessingRes_revc = BlessingRes_revc;
    exports.BlessingShop_req = BlessingShop_req;
    exports.BlessingSlotStatus_revc = BlessingSlotStatus_revc;
    exports.BlessingWear_req = BlessingWear_req;
    exports.BoxAuto_req = BoxAuto_req;
    exports.BoxAuto_revc = BoxAuto_revc;
    exports.BoxCommitState_revc = BoxCommitState_revc;
    exports.BoxExtraItemChange_revc = BoxExtraItemChange_revc;
    exports.BoxExtraItemInit_revc = BoxExtraItemInit_revc;
    exports.BoxUsedCount_revc = BoxUsedCount_revc;
    exports.BuyItemResult_revc = BuyItemResult_revc;
    exports.BuyItem_req = BuyItem_req;
    exports.BuyMilitaryPledge_req = BuyMilitaryPledge_req;
    exports.BuyMilitaryPledge_revc = BuyMilitaryPledge_revc;
    exports.BuyWing_req = BuyWing_req;
    exports.CheifChangeSkin_req = CheifChangeSkin_req;
    exports.CheifEquipUp_req = CheifEquipUp_req;
    exports.CheifFightChange_revc = CheifFightChange_revc;
    exports.CheifMoraleReward_req = CheifMoraleReward_req;
    exports.CheifMoraleReward_revc = CheifMoraleReward_revc;
    exports.CheifOnOpen_req = CheifOnOpen_req;
    exports.CheifReturn_req = CheifReturn_req;
    exports.CheifSkillUp_req = CheifSkillUp_req;
    exports.CheifStarUpMulti_req = CheifStarUpMulti_req;
    exports.CheifStarUpMulti_revc = CheifStarUpMulti_revc;
    exports.CheifStarUp_req = CheifStarUp_req;
    exports.CheifStarUp_revc = CheifStarUp_revc;
    exports.CheifUpgrade_req = CheifUpgrade_req;
    exports.ChestInfoUpdate_revc = ChestInfoUpdate_revc;
    exports.ChestUpLevel_req = ChestUpLevel_req;
    exports.ChestUpLevel_revc = ChestUpLevel_revc;
    exports.ChiefAssist_req = ChiefAssist_req;
    exports.ChiefBuyFlag_req = ChiefBuyFlag_req;
    exports.ChiefBuyFlag_revc = ChiefBuyFlag_revc;
    exports.ChiefChangeFlag_req = ChiefChangeFlag_req;
    exports.ChiefChangeFlag_revc = ChiefChangeFlag_revc;
    exports.ChiefInit_revc = ChiefInit_revc;
    exports.ChiefIntoBattle_req = ChiefIntoBattle_req;
    exports.ChiefLosslessReplacement_req = ChiefLosslessReplacement_req;
    exports.ChiefLosslessReplacement_revc = ChiefLosslessReplacement_revc;
    exports.ChiefMainChange_revc = ChiefMainChange_revc;
    exports.ChiefUpgradeFlag_req = ChiefUpgradeFlag_req;
    exports.ChiefUpgradeFlag_revc = ChiefUpgradeFlag_revc;
    exports.ClubReward_req = ClubReward_req;
    exports.ClubReward_revc = ClubReward_revc;
    exports.CommonWatchPlayerInfo_req = CommonWatchPlayerInfo_req;
    exports.ConfigHash_revc = ConfigHash_revc;
    exports.ConquestChapterReward_req = ConquestChapterReward_req;
    exports.ConquestFight_req = ConquestFight_req;
    exports.Conquest_revc = Conquest_revc;
    exports.DailyEventInit_revc = DailyEventInit_revc;
    exports.DailyEventSearch_req = DailyEventSearch_req;
    exports.DailyEventSearch_revc = DailyEventSearch_revc;
    exports.DailyEventTaskUpdate_revc = DailyEventTaskUpdate_revc;
    exports.DailyEventTask_req = DailyEventTask_req;
    exports.DailyShopWeekCard_revc = DailyShopWeekCard_revc;
    exports.DailyWheelBigPrize_req = DailyWheelBigPrize_req;
    exports.DailyWheelBigPrize_revc = DailyWheelBigPrize_revc;
    exports.DailyWheelTurn_req = DailyWheelTurn_req;
    exports.DailyWheelTurn_revc = DailyWheelTurn_revc;
    exports.DebugFightVal_revc = DebugFightVal_revc;
    exports.DelegatePage_req = DelegatePage_req;
    exports.DingYueReq_req = DingYueReq_req;
    exports.DingYueRevc_revc = DingYueRevc_revc;
    exports.DingYueSelectReq_req = DingYueSelectReq_req;
    exports.DingYueSelectRevc_revc = DingYueSelectRevc_revc;
    exports.DoMissions_req = DoMissions_req;
    exports.DrawEventChoose_req = DrawEventChoose_req;
    exports.DrawEventChoose_revc = DrawEventChoose_revc;
    exports.DrawEventCumulateReward_req = DrawEventCumulateReward_req;
    exports.DrawEventCumulateReward_revc = DrawEventCumulateReward_revc;
    exports.DrawEventInit_revc = DrawEventInit_revc;
    exports.DrawEventPack_req = DrawEventPack_req;
    exports.DrawEventPack_revc = DrawEventPack_revc;
    exports.DrawEventRewardUpdate_revc = DrawEventRewardUpdate_revc;
    exports.DrawEventReward_req = DrawEventReward_req;
    exports.DrawEventTaskUpdate_revc = DrawEventTaskUpdate_revc;
    exports.DrawEventTask_req = DrawEventTask_req;
    exports.DrawEvent_req = DrawEvent_req;
    exports.DrawLevelChange_revc = DrawLevelChange_revc;
    exports.EquipChange_revc = EquipChange_revc;
    exports.Err_revc = Err_revc;
    exports.ExchangeEquipProxy_req = ExchangeEquipProxy_req;
    exports.ExchangeEquip_req = ExchangeEquip_req;
    exports.ExchangeEquip_revc = ExchangeEquip_revc;
    exports.FightEnd_req = FightEnd_req;
    exports.FightResult_revc = FightResult_revc;
    exports.FightStart_req = FightStart_req;
    exports.FirstDayCharge_revc = FirstDayCharge_revc;
    exports.FreshMission_req = FreshMission_req;
    exports.FreshStationNearBy_req = FreshStationNearBy_req;
    exports.FundInit_revc = FundInit_revc;
    exports.FundRefresh_req = FundRefresh_req;
    exports.FundReward_req = FundReward_req;
    exports.FundReward_revc = FundReward_revc;
    exports.GameStyle_req = GameStyle_req;
    exports.GameStyle_revc = GameStyle_revc;
    exports.GemBuy_req = GemBuy_req;
    exports.GemBuy_revc = GemBuy_revc;
    exports.GemChange_revc = GemChange_revc;
    exports.GemFormationBuy_req = GemFormationBuy_req;
    exports.GemFormationBuy_revc = GemFormationBuy_revc;
    exports.GemFormationChange_req = GemFormationChange_req;
    exports.GemFormationChange_revc = GemFormationChange_revc;
    exports.GemFormationWear_req = GemFormationWear_req;
    exports.GemFreeChange_revc = GemFreeChange_revc;
    exports.GemHandler_req = GemHandler_req;
    exports.GemHandler_revc = GemHandler_revc;
    exports.GemInit_revc = GemInit_revc;
    exports.GemLifeBlood_req = GemLifeBlood_req;
    exports.GemLifeBlood_revc = GemLifeBlood_revc;
    exports.GemRemove_revc = GemRemove_revc;
    exports.GetChestQua_req = GetChestQua_req;
    exports.GetChestQua_revc = GetChestQua_revc;
    exports.GetEquipSkinList_req = GetEquipSkinList_req;
    exports.GetFuncGuide_req = GetFuncGuide_req;
    exports.GetFuncGuide_revc = GetFuncGuide_revc;
    exports.GetNamingReward_req = GetNamingReward_req;
    exports.GetRide_req = GetRide_req;
    exports.GetRide_revc = GetRide_revc;
    exports.GetServerTimeMS_req = GetServerTimeMS_req;
    exports.GetServerTimeMS_revc = GetServerTimeMS_revc;
    exports.GetWingList_req = GetWingList_req;
    exports.GmResult_revc = GmResult_revc;
    exports.Gm_req = Gm_req;
    exports.GrowPackUnlock_revc = GrowPackUnlock_revc;
    exports.GymBondChange_revc = GymBondChange_revc;
    exports.GymBondListInit_revc = GymBondListInit_revc;
    exports.GymBondNpcChange_revc = GymBondNpcChange_revc;
    exports.GymBond_req = GymBond_req;
    exports.GymEquipChange_revc = GymEquipChange_revc;
    exports.GymEquipInit_revc = GymEquipInit_revc;
    exports.GymFacilityList_revc = GymFacilityList_revc;
    exports.GymFacilityRefinementList_revc = GymFacilityRefinementList_revc;
    exports.GymFacilityRefinement_req = GymFacilityRefinement_req;
    exports.GymFacilityRefinement_revc = GymFacilityRefinement_revc;
    exports.GymFacilitySummary_revc = GymFacilitySummary_revc;
    exports.GymForgetEquip_req = GymForgetEquip_req;
    exports.GymForgetEquip_revc = GymForgetEquip_revc;
    exports.GymGoto_req = GymGoto_req;
    exports.GymInfo_revc = GymInfo_revc;
    exports.GymInvitation_req = GymInvitation_req;
    exports.GymInvitation_revc = GymInvitation_revc;
    exports.GymInviteGetList_req = GymInviteGetList_req;
    exports.GymInvite_req = GymInvite_req;
    exports.GymInvite_revc = GymInvite_revc;
    exports.GymLock_req = GymLock_req;
    exports.GymMapTasks_revc = GymMapTasks_revc;
    exports.GymMissionCronRefresh_req = GymMissionCronRefresh_req;
    exports.GymMissionList_revc = GymMissionList_revc;
    exports.GymMissionRefreshUpdate_revc = GymMissionRefreshUpdate_revc;
    exports.GymMissionRefresh_req = GymMissionRefresh_req;
    exports.GymMissionReward_req = GymMissionReward_req;
    exports.GymMissionUpdate_revc = GymMissionUpdate_revc;
    exports.GymPack_revc = GymPack_revc;
    exports.GymRoomLevel_revc = GymRoomLevel_revc;
    exports.GymRoomSummary_revc = GymRoomSummary_revc;
    exports.GymRoomUpgrade_req = GymRoomUpgrade_req;
    exports.GymShop_req = GymShop_req;
    exports.GymSwicthEquip_req = GymSwicthEquip_req;
    exports.GymUpgrade_req = GymUpgrade_req;
    exports.GymUpgrade_revc = GymUpgrade_revc;
    exports.HandleStationLogs_req = HandleStationLogs_req;
    exports.HandleStationLogs_revc = HandleStationLogs_revc;
    exports.HandleStationNearBy_req = HandleStationNearBy_req;
    exports.HandleStationRevenge_req = HandleStationRevenge_req;
    exports.Heartbeat_req = Heartbeat_req;
    exports.Heartbeat_revc = Heartbeat_revc;
    exports.Init_revc = Init_revc;
    exports.InvitationActivationUpdate_revc = InvitationActivationUpdate_revc;
    exports.InvitationGetActivation_req = InvitationGetActivation_req;
    exports.InvitationGetReward_req = InvitationGetReward_req;
    exports.InvitationRed_revc = InvitationRed_revc;
    exports.InvitationUpdate_revc = InvitationUpdate_revc;
    exports.Invitation_req = Invitation_req;
    exports.Invitation_revc = Invitation_revc;
    exports.ItemDel_revc = ItemDel_revc;
    exports.ItemNotEnoughCode_revc = ItemNotEnoughCode_revc;
    exports.JjcActiveRefresh_req = JjcActiveRefresh_req;
    exports.JjcBuyFightCnt_req = JjcBuyFightCnt_req;
    exports.JjcBuyFightCnt_revc = JjcBuyFightCnt_revc;
    exports.JjcFightLog_req = JjcFightLog_req;
    exports.JjcFightLog_revc = JjcFightLog_revc;
    exports.JjcFight_req = JjcFight_req;
    exports.JjcFight_revc = JjcFight_revc;
    exports.JjcInfo_revc = JjcInfo_revc;
    exports.JjcListChange_revc = JjcListChange_revc;
    exports.JjcList_req = JjcList_req;
    exports.JjcList_revc = JjcList_revc;
    exports.JjcMoneyUpdate_revc = JjcMoneyUpdate_revc;
    exports.JjcOpen_revc = JjcOpen_revc;
    exports.JjcRankChange_revc = JjcRankChange_revc;
    exports.JjcRankDrop_revc = JjcRankDrop_revc;
    exports.JjcRefreshList_req = JjcRefreshList_req;
    exports.JjcRefreshList_revc = JjcRefreshList_revc;
    exports.JjcRewardGain_req = JjcRewardGain_req;
    exports.JjcRewardGain_revc = JjcRewardGain_revc;
    exports.JjcRewardPreview_revc = JjcRewardPreview_revc;
    exports.JjcScoreUpdate_revc = JjcScoreUpdate_revc;
    exports.JjcSucceedReward_revc = JjcSucceedReward_revc;
    exports.JjcSurplusRefreshCount_revc = JjcSurplusRefreshCount_revc;
    exports.JjcWeekInfo_req = JjcWeekInfo_req;
    exports.JjcWeekInfo_revc = JjcWeekInfo_revc;
    exports.JustWatchPlayer_req = JustWatchPlayer_req;
    exports.Kick_revc = Kick_revc;
    exports.LabourBaodiLeft_revc = LabourBaodiLeft_revc;
    exports.LabourCapsuleToys_req = LabourCapsuleToys_req;
    exports.LabourCapsuleToys_revc = LabourCapsuleToys_revc;
    exports.LabourExchange_req = LabourExchange_req;
    exports.LabourItemRedChange_revc = LabourItemRedChange_revc;
    exports.LabourPackBuy_req = LabourPackBuy_req;
    exports.LabourPackGet_req = LabourPackGet_req;
    exports.LabourShopChange_revc = LabourShopChange_revc;
    exports.LabourShopFreeChange_revc = LabourShopFreeChange_revc;
    exports.LabourShopFree_req = LabourShopFree_req;
    exports.LabourShopInit_revc = LabourShopInit_revc;
    exports.LabourShop_req = LabourShop_req;
    exports.LabourTicket_revc = LabourTicket_revc;
    exports.MailList_req = MailList_req;
    exports.MailList_revc = MailList_revc;
    exports.MailRed_revc = MailRed_revc;
    exports.MissionList_revc = MissionList_revc;
    exports.MonopolyGo_req = MonopolyGo_req;
    exports.MonopolyInit_revc = MonopolyInit_revc;
    exports.MonopolyMapUpdate_revc = MonopolyMapUpdate_revc;
    exports.MonopolyPackUpdate_revc = MonopolyPackUpdate_revc;
    exports.MonopolyPack_req = MonopolyPack_req;
    exports.MonopolyReward_req = MonopolyReward_req;
    exports.MonopolyTaskUpdate_revc = MonopolyTaskUpdate_revc;
    exports.MonopolyTask_req = MonopolyTask_req;
    exports.MonthCardGet_req = MonthCardGet_req;
    exports.MonthCard_revc = MonthCard_revc;
    exports.MountChiefChange_req = MountChiefChange_req;
    exports.MountChief_revc = MountChief_revc;
    exports.MountFeastInit_revc = MountFeastInit_revc;
    exports.MountFeastNums_req = MountFeastNums_req;
    exports.MountFeastNums_revc = MountFeastNums_revc;
    exports.MountFeastRecords_req = MountFeastRecords_req;
    exports.MountFeastRecords_revc = MountFeastRecords_revc;
    exports.MountFeastSelfRecords_revc = MountFeastSelfRecords_revc;
    exports.MountFeastTotalCntReward_req = MountFeastTotalCntReward_req;
    exports.MountFeastTotalCntReward_revc = MountFeastTotalCntReward_revc;
    exports.MountFeastTotalCnt_revc = MountFeastTotalCnt_revc;
    exports.MountRefinementLock_revc = MountRefinementLock_revc;
    exports.MountRefinementReplace_req = MountRefinementReplace_req;
    exports.MountRefinement_req = MountRefinement_req;
    exports.MountRefinement_revc = MountRefinement_revc;
    exports.MountReturnPreView_req = MountReturnPreView_req;
    exports.MountReturnPreView_revc = MountReturnPreView_revc;
    exports.MountReturn_req = MountReturn_req;
    exports.MountReturn_revc = MountReturn_revc;
    exports.NameingChange_revc = NameingChange_revc;
    exports.NameingServer_req = NameingServer_req;
    exports.NameingServer_revc = NameingServer_revc;
    exports.NamingChargeRankFirstDay_revc = NamingChargeRankFirstDay_revc;
    exports.NamingChargeRank_req = NamingChargeRank_req;
    exports.NamingChargeRank_revc = NamingChargeRank_revc;
    exports.NamingInit_revc = NamingInit_revc;
    exports.NamingReward_revc = NamingReward_revc;
    exports.NewAdventureCtnUpdate_revc = NewAdventureCtnUpdate_revc;
    exports.NewAdventureFight_req = NewAdventureFight_req;
    exports.NewAdventureInit_revc = NewAdventureInit_revc;
    exports.NewAdventureRewardUpdate_revc = NewAdventureRewardUpdate_revc;
    exports.NewAdventureUpdate_revc = NewAdventureUpdate_revc;
    exports.NewCrossGroup_revc = NewCrossGroup_revc;
    exports.NewPlayerAttr_req = NewPlayerAttr_req;
    exports.NewPlayerAttr_revc = NewPlayerAttr_revc;
    exports.NewPlayerFeastRewards_revc = NewPlayerFeastRewards_revc;
    exports.NewPlayerFeastScoreDraw_req = NewPlayerFeastScoreDraw_req;
    exports.NewPlayerFeastScore_revc = NewPlayerFeastScore_revc;
    exports.NewPlayerFeastSelfRecords_revc = NewPlayerFeastSelfRecords_revc;
    exports.NewPlayerFeastTask_req = NewPlayerFeastTask_req;
    exports.NewPlayerFeastTask_revc = NewPlayerFeastTask_revc;
    exports.NewPlayerFeast_revc = NewPlayerFeast_revc;
    exports.NewServer_revc = NewServer_revc;
    exports.NoticeList_revc = NoticeList_revc;
    exports.OpenArtifactBox_req = OpenArtifactBox_req;
    exports.OpenArtifactBox_revc = OpenArtifactBox_revc;
    exports.OpenServerAccPaid_revc = OpenServerAccPaid_revc;
    exports.OpenServerAdventureRank_req = OpenServerAdventureRank_req;
    exports.OpenServerAdventureRank_revc = OpenServerAdventureRank_revc;
    exports.OpenStationNearBy_req = OpenStationNearBy_req;
    exports.OpenStationNearBy_revc = OpenStationNearBy_revc;
    exports.OpenStation_req = OpenStation_req;
    exports.PalaceBuffList_revc = PalaceBuffList_revc;
    exports.PalaceChooseBuff_req = PalaceChooseBuff_req;
    exports.PalaceChooseBuff_revc = PalaceChooseBuff_revc;
    exports.PalaceChooseCoreBuff_req = PalaceChooseCoreBuff_req;
    exports.PalaceChooseCoreBuff_revc = PalaceChooseCoreBuff_revc;
    exports.PalaceCoreBuffList_revc = PalaceCoreBuffList_revc;
    exports.PalaceFight_req = PalaceFight_req;
    exports.PalaceInit_revc = PalaceInit_revc;
    exports.PalaceRankList_req = PalaceRankList_req;
    exports.PalaceRankList_revc = PalaceRankList_revc;
    exports.PalaceRefreshBuff_req = PalaceRefreshBuff_req;
    exports.PalaceRefresh_req = PalaceRefresh_req;
    exports.PalaceRefresh_revc = PalaceRefresh_revc;
    exports.PalaceReset_req = PalaceReset_req;
    exports.PalaceReward_req = PalaceReward_req;
    exports.PalaceReward_revc = PalaceReward_revc;
    exports.PalaceShopUpdate_revc = PalaceShopUpdate_revc;
    exports.PalaceShop_req = PalaceShop_req;
    exports.PalaceShop_revc = PalaceShop_revc;
    exports.PalaceUnlockBuff_req = PalaceUnlockBuff_req;
    exports.PalaceUpdateRanking_revc = PalaceUpdateRanking_revc;
    exports.PalaceUpdateShop_req = PalaceUpdateShop_req;
    exports.PeakJjcActiveRefresh_req = PeakJjcActiveRefresh_req;
    exports.PeakJjcAvatar_req = PeakJjcAvatar_req;
    exports.PeakJjcAvatar_revc = PeakJjcAvatar_revc;
    exports.PeakJjcBuyFightCnt_req = PeakJjcBuyFightCnt_req;
    exports.PeakJjcBuyFightCnt_revc = PeakJjcBuyFightCnt_revc;
    exports.PeakJjcDailyRewardUnix_revc = PeakJjcDailyRewardUnix_revc;
    exports.PeakJjcFightLog_req = PeakJjcFightLog_req;
    exports.PeakJjcFightLog_revc = PeakJjcFightLog_revc;
    exports.PeakJjcFight_req = PeakJjcFight_req;
    exports.PeakJjcInfo_revc = PeakJjcInfo_revc;
    exports.PeakJjcListChange_revc = PeakJjcListChange_revc;
    exports.PeakJjcList_req = PeakJjcList_req;
    exports.PeakJjcList_revc = PeakJjcList_revc;
    exports.PeakJjcMoneyUpdate_revc = PeakJjcMoneyUpdate_revc;
    exports.PeakJjcOpenUnix_revc = PeakJjcOpenUnix_revc;
    exports.PeakJjcOpen_revc = PeakJjcOpen_revc;
    exports.PeakJjcRankChange_revc = PeakJjcRankChange_revc;
    exports.PeakJjcRefreshList_req = PeakJjcRefreshList_req;
    exports.PeakJjcRefreshList_revc = PeakJjcRefreshList_revc;
    exports.PeakJjcRewardGain_req = PeakJjcRewardGain_req;
    exports.PeakJjcRewardGain_revc = PeakJjcRewardGain_revc;
    exports.PeakJjcSucceedReward_revc = PeakJjcSucceedReward_revc;
    exports.PeakJjcSurplusRefreshCount_revc = PeakJjcSurplusRefreshCount_revc;
    exports.PeakJjcWeekInfo_req = PeakJjcWeekInfo_req;
    exports.PeakJjcWeekInfo_revc = PeakJjcWeekInfo_revc;
    exports.PeakJjcWeeklyRewardUnix_revc = PeakJjcWeeklyRewardUnix_revc;
    exports.PeakWatchPlayerInfo_req = PeakWatchPlayerInfo_req;
    exports.PeakWatchPlayerInfo_revc = PeakWatchPlayerInfo_revc;
    exports.PetBaoDiChange_revc = PetBaoDiChange_revc;
    exports.PetBuyFlute_req = PetBuyFlute_req;
    exports.PetBuyFlute_revc = PetBuyFlute_revc;
    exports.PetChange_revc = PetChange_revc;
    exports.PetDecompose_req = PetDecompose_req;
    exports.PetExtractSuccess_revc = PetExtractSuccess_revc;
    exports.PetExtract_req = PetExtract_req;
    exports.PetFreeChange_revc = PetFreeChange_revc;
    exports.PetFusionBaoDi_revc = PetFusionBaoDi_revc;
    exports.PetFusion_req = PetFusion_req;
    exports.PetFusion_revc = PetFusion_revc;
    exports.PetHandleNewTalent_req = PetHandleNewTalent_req;
    exports.PetHandleNewTalent_revc = PetHandleNewTalent_revc;
    exports.PetInit_revc = PetInit_revc;
    exports.PetNewTalent_req = PetNewTalent_req;
    exports.PetNewTalent_revc = PetNewTalent_revc;
    exports.PetOnBattle_req = PetOnBattle_req;
    exports.PetRebirth_req = PetRebirth_req;
    exports.PetRemove_revc = PetRemove_revc;
    exports.PetSoulExchange_req = PetSoulExchange_req;
    exports.PetUpgradeLevel_req = PetUpgradeLevel_req;
    exports.PetUpgradeStar_req = PetUpgradeStar_req;
    exports.PetUpgradeTalent_req = PetUpgradeTalent_req;
    exports.PetUpgradeTalent_revc = PetUpgradeTalent_revc;
    exports.PlayerCurExp_revc = PlayerCurExp_revc;
    exports.PlayerLevel_revc = PlayerLevel_revc;
    exports.PlayerTotalCnt_revc = PlayerTotalCnt_revc;
    exports.PromotionDataChange_revc = PromotionDataChange_revc;
    exports.PromotionInit_revc = PromotionInit_revc;
    exports.PromotionReward_req = PromotionReward_req;
    exports.PromotionUgraded_revc = PromotionUgraded_revc;
    exports.Promotion_req = Promotion_req;
    exports.PurchasePriceSucceed_revc = PurchasePriceSucceed_revc;
    exports.RechargeBill_req = RechargeBill_req;
    exports.RechargeBill_revc = RechargeBill_revc;
    exports.RecoverPassport_req = RecoverPassport_req;
    exports.RecruitChief_req = RecruitChief_req;
    exports.RecruitChief_revc = RecruitChief_revc;
    exports.RedDotDel_req = RedDotDel_req;
    exports.RedDotUpdate_req = RedDotUpdate_req;
    exports.RedDotUpdate_revc = RedDotUpdate_revc;
    exports.RedMod_req = RedMod_req;
    exports.RedemptionCode_req = RedemptionCode_req;
    exports.RemRemarkStationNearBy_req = RemRemarkStationNearBy_req;
    exports.RemarkStationList_req = RemarkStationList_req;
    exports.RemarkStationList_revc = RemarkStationList_revc;
    exports.RemarkStationNearBy_req = RemarkStationNearBy_req;
    exports.Reward_req = Reward_req;
    exports.Reward_revc = Reward_revc;
    exports.RideInfo_revc = RideInfo_revc;
    exports.RideLv_req = RideLv_req;
    exports.RideLv_revc = RideLv_revc;
    exports.RideMissionData_revc = RideMissionData_revc;
    exports.RideMissionDel_req = RideMissionDel_req;
    exports.RideMissionLingQu_req = RideMissionLingQu_req;
    exports.RideMissionList_req = RideMissionList_req;
    exports.RideMissionList_revc = RideMissionList_revc;
    exports.RideMissionTimeEnd_req = RideMissionTimeEnd_req;
    exports.RideMission_req = RideMission_req;
    exports.RideMission_revc = RideMission_revc;
    exports.RideOwnerCnt_revc = RideOwnerCnt_revc;
    exports.RideOwnerInfo_revc = RideOwnerInfo_revc;
    exports.RideQua_req = RideQua_req;
    exports.RideQua_revc = RideQua_revc;
    exports.RideStorgeUp_req = RideStorgeUp_req;
    exports.RideStorgeUp_revc = RideStorgeUp_revc;
    exports.RideUpdate_req = RideUpdate_req;
    exports.SaoMarkRefresh_req = SaoMarkRefresh_req;
    exports.SelectServerIDReq_req = SelectServerIDReq_req;
    exports.SelectServerIDRevc_revc = SelectServerIDRevc_revc;
    exports.SellEquipFinish_revc = SellEquipFinish_revc;
    exports.Sell_revc = Sell_revc;
    exports.ServerListReq_req = ServerListReq_req;
    exports.ServerListRevc_revc = ServerListRevc_revc;
    exports.ServerNumReq_req = ServerNumReq_req;
    exports.ServerNumRevc_revc = ServerNumRevc_revc;
    exports.ServerVersion_revc = ServerVersion_revc;
    exports.SevenEvent_req = SevenEvent_req;
    exports.SevenScore_revc = SevenScore_revc;
    exports.SevenTask_revc = SevenTask_revc;
    exports.ShareReward_req = ShareReward_req;
    exports.ShareReward_revc = ShareReward_revc;
    exports.ShopBoughtItems_revc = ShopBoughtItems_revc;
    exports.SideBarReward_req = SideBarReward_req;
    exports.SideBarReward_revc = SideBarReward_revc;
    exports.SignStatus_req = SignStatus_req;
    exports.SignStatus_revc = SignStatus_revc;
    exports.SilkBagHandler_req = SilkBagHandler_req;
    exports.SilkBagHandler_revc = SilkBagHandler_revc;
    exports.SkyRank_req = SkyRank_req;
    exports.SkyRank_revc = SkyRank_revc;
    exports.SmashEnroll_req = SmashEnroll_req;
    exports.SmashEnroll_revc = SmashEnroll_revc;
    exports.SmashFightOpenReq_req = SmashFightOpenReq_req;
    exports.SmashFightUpdataRep_req = SmashFightUpdataRep_req;
    exports.SmashFight_revc = SmashFight_revc;
    exports.SmashInit_revc = SmashInit_revc;
    exports.SmashStateUpdate_revc = SmashStateUpdate_revc;
    exports.SmashUpdate_revc = SmashUpdate_revc;
    exports.SpiritListDel_revc = SpiritListDel_revc;
    exports.SpiritListUpdate_revc = SpiritListUpdate_revc;
    exports.SpiritList_revc = SpiritList_revc;
    exports.SpiritQuickWear_req = SpiritQuickWear_req;
    exports.SpiritUnwear_req = SpiritUnwear_req;
    exports.SpiritUpgrade_req = SpiritUpgrade_req;
    exports.SpiritWear_req = SpiritWear_req;
    exports.SpringFestivalAllianceRankReward_req = SpringFestivalAllianceRankReward_req;
    exports.SpringFestivalAllianceRankReward_revc = SpringFestivalAllianceRankReward_revc;
    exports.SpringFestivalAllianceRank_req = SpringFestivalAllianceRank_req;
    exports.SpringFestivalAllianceRank_revc = SpringFestivalAllianceRank_revc;
    exports.SpringFestivalCanJoin_req = SpringFestivalCanJoin_req;
    exports.SpringFestivalCanJoin_revc = SpringFestivalCanJoin_revc;
    exports.SpringFestivalEnroll_req = SpringFestivalEnroll_req;
    exports.SpringFestivalEnroll_revc = SpringFestivalEnroll_revc;
    exports.SpringFestivalFire_req = SpringFestivalFire_req;
    exports.SpringFestivalFire_revc = SpringFestivalFire_revc;
    exports.SpringFestivalInit_revc = SpringFestivalInit_revc;
    exports.SpringFestivalPack_req = SpringFestivalPack_req;
    exports.SpringFestivalPack_revc = SpringFestivalPack_revc;
    exports.SpringFestivalPrestige_revc = SpringFestivalPrestige_revc;
    exports.SpringFestivalReward_req = SpringFestivalReward_req;
    exports.SpringFestivalReward_revc = SpringFestivalReward_revc;
    exports.SpringFestivalShop_req = SpringFestivalShop_req;
    exports.SpringFestivalShop_revc = SpringFestivalShop_revc;
    exports.SpringFestivalTaskUpdate_revc = SpringFestivalTaskUpdate_revc;
    exports.SpringFestivalTask_req = SpringFestivalTask_req;
    exports.StarBattleEnemys_req = StarBattleEnemys_req;
    exports.StarBattleEnemys_revc = StarBattleEnemys_revc;
    exports.StarBattleFight_req = StarBattleFight_req;
    exports.StarBattleFight_revc = StarBattleFight_revc;
    exports.StarBattleInit_revc = StarBattleInit_revc;
    exports.StarBattleKeyRecovery_req = StarBattleKeyRecovery_req;
    exports.StarBattleKeyRecovery_revc = StarBattleKeyRecovery_revc;
    exports.StarBattleLog_req = StarBattleLog_req;
    exports.StarBattleLog_revc = StarBattleLog_revc;
    exports.StarBattleRankReward_req = StarBattleRankReward_req;
    exports.StarBattleRankReward_revc = StarBattleRankReward_revc;
    exports.StarBattleRank_req = StarBattleRank_req;
    exports.StarBattleRank_revc = StarBattleRank_revc;
    exports.StarBattleReward_req = StarBattleReward_req;
    exports.StarBattleReward_revc = StarBattleReward_revc;
    exports.StarNumChange_revc = StarNumChange_revc;
    exports.StarShopBuy_req = StarShopBuy_req;
    exports.StarShopBuy_revc = StarShopBuy_revc;
    exports.StarShopOpen_req = StarShopOpen_req;
    exports.StarStrike_req = StarStrike_req;
    exports.StarWatchPlayerInfo_req = StarWatchPlayerInfo_req;
    exports.StationBuy_req = StationBuy_req;
    exports.StationBuy_revc = StationBuy_revc;
    exports.StationBySlot_req = StationBySlot_req;
    exports.StationDaliyInfo_revc = StationDaliyInfo_revc;
    exports.StationInit_revc = StationInit_revc;
    exports.StationMainChange_revc = StationMainChange_revc;
    exports.StationNearByDetail_req = StationNearByDetail_req;
    exports.StationOtherChange_revc = StationOtherChange_revc;
    exports.StationPillagesNew_req = StationPillagesNew_req;
    exports.StationPillagesNew_revc = StationPillagesNew_revc;
    exports.StationRewards_req = StationRewards_req;
    exports.StyleUpdate_revc = StyleUpdate_revc;
    exports.Success_revc = Success_revc;
    exports.Task_req = Task_req;
    exports.Task_revc = Task_revc;
    exports.TeamFightHarmReward_req = TeamFightHarmReward_req;
    exports.TeamFightHarmReward_revc = TeamFightHarmReward_revc;
    exports.TeamFightInit_revc = TeamFightInit_revc;
    exports.TeamFightNum_revc = TeamFightNum_revc;
    exports.TeamFightRankList_req = TeamFightRankList_req;
    exports.TeamFightRankList_revc = TeamFightRankList_revc;
    exports.TeamFightRankReward_req = TeamFightRankReward_req;
    exports.TeamFightRankReward_revc = TeamFightRankReward_revc;
    exports.TeamFight_req = TeamFight_req;
    exports.TeamFight_revc = TeamFight_revc;
    exports.TipsVoList_req = TipsVoList_req;
    exports.TipsVoList_revc = TipsVoList_revc;
    exports.TitleChange_req = TitleChange_req;
    exports.TitleChange_revc = TitleChange_revc;
    exports.TitleExpire_revc = TitleExpire_revc;
    exports.TitleInfo_revc = TitleInfo_revc;
    exports.TitleRefresh_req = TitleRefresh_req;
    exports.TitleRefresh_revc = TitleRefresh_revc;
    exports.TitleReward_req = TitleReward_req;
    exports.TitleReward_revc = TitleReward_revc;
    exports.TitleStateUpdate_revc = TitleStateUpdate_revc;
    exports.TitleUpdate_revc = TitleUpdate_revc;
    exports.TotalCntChange_revc = TotalCntChange_revc;
    exports.TotalCntInit_revc = TotalCntInit_revc;
    exports.TotalCntReward_req = TotalCntReward_req;
    exports.TotalCntReward_revc = TotalCntReward_revc;
    exports.TrammelsChiefInit_revc = TrammelsChiefInit_revc;
    exports.TrammelsChiefUnlock_req = TrammelsChiefUnlock_req;
    exports.TrammelsChief_req = TrammelsChief_req;
    exports.TrammelsChief_revc = TrammelsChief_revc;
    exports.TurnWheel_req = TurnWheel_req;
    exports.TurnWheel_revc = TurnWheel_revc;
    exports.UpgradePassportSlot_req = UpgradePassportSlot_req;
    exports.UpgradePassportSlot_revc = UpgradePassportSlot_revc;
    exports.UseItem_req = UseItem_req;
    exports.ValChanel_revc = ValChanel_revc;
    exports.WarcraftAttrListUpdate_revc = WarcraftAttrListUpdate_revc;
    exports.WarcraftSkinAttr_req = WarcraftSkinAttr_req;
    exports.WarcraftSkinInit_revc = WarcraftSkinInit_revc;
    exports.WarcraftSkinListUpdate_revc = WarcraftSkinListUpdate_revc;
    exports.WarcraftSkin_req = WarcraftSkin_req;
    exports.WarcraftSkin_revc = WarcraftSkin_revc;
    exports.WatchPlayerInfo_req = WatchPlayerInfo_req;
    exports.WatchPlayerInfo_revc = WatchPlayerInfo_revc;
    exports.WatchSkyRank_req = WatchSkyRank_req;
    exports.WatchSkyRank_revc = WatchSkyRank_revc;
    exports.WearedWingData_revc = WearedWingData_revc;
    exports.WebClientLogin_req = WebClientLogin_req;
    exports.WebClientLogin_revc = WebClientLogin_revc;
    exports.WebClientRegist_req = WebClientRegist_req;
    exports.WebClientRegist_revc = WebClientRegist_revc;
    exports.WingExchange_req = WingExchange_req;
    exports.WingInfo_revc = WingInfo_revc;
    exports.WingLevelUp_req = WingLevelUp_req;
    exports.WingList_revc = WingList_revc;
    exports.WorldChatListChange_revc = WorldChatListChange_revc;
    exports.WorldChatList_revc = WorldChatList_revc;
    exports.WorldChat_req = WorldChat_req;
    exports.WxAuthInfo_req = WxAuthInfo_req;
    exports.WxAuthInfo_revc = WxAuthInfo_revc;
    exports.dailyReward_revc = dailyReward_revc;
    exports.popWin_req = popWin_req;
    exports.popWin_revc = popWin_revc;
    exports.refreshItems_req = refreshItems_req;
    exports.reloadEquipUpdate_revc = reloadEquipUpdate_revc;
    exports.reloadEquip_req = reloadEquip_req;
    exports.reloadEquip_revc = reloadEquip_revc;
    exports.stActivationInfo = stActivationInfo;
    exports.stActivity = stActivity;
    exports.stActivityCell = stActivityCell;
    exports.stActivityNum = stActivityNum;
    exports.stActivityRecord = stActivityRecord;
    exports.stActivityRed = stActivityRed;
    exports.stActivityStatus = stActivityStatus;
    exports.stAdCd = stAdCd;
    exports.stAfk = stAfk;
    exports.stAfkFast = stAfkFast;
    exports.stAfkInvitee = stAfkInvitee;
    exports.stAlliance = stAlliance;
    exports.stAllianceBossRank = stAllianceBossRank;
    exports.stAllianceInnerRankPlayer = stAllianceInnerRankPlayer;
    exports.stAlliancePlayer = stAlliancePlayer;
    exports.stAllianceShop = stAllianceShop;
    exports.stAllianceWarAllianceRank = stAllianceWarAllianceRank;
    exports.stAllianceWarCityContent = stAllianceWarCityContent;
    exports.stAllianceWarCityLog = stAllianceWarCityLog;
    exports.stAllianceWarCityPreview = stAllianceWarCityPreview;
    exports.stAllianceWarCityTakeOver = stAllianceWarCityTakeOver;
    exports.stAllianceWarInnerRank = stAllianceWarInnerRank;
    exports.stAllianceWarLife = stAllianceWarLife;
    exports.stAllianceWarRewardRank = stAllianceWarRewardRank;
    exports.stAllianceWarTime = stAllianceWarTime;
    exports.stArtifact = stArtifact;
    exports.stArtifactLog = stArtifactLog;
    exports.stArtifactPack = stArtifactPack;
    exports.stArtifactSuit = stArtifactSuit;
    exports.stBattlePassCard = stBattlePassCard;
    exports.stBattlePassPack = stBattlePassPack;
    exports.stBattlePassTask = stBattlePassTask;
    exports.stBlessingArena = stBlessingArena;
    exports.stBossDamage = stBossDamage;
    exports.stBoxExtraItem = stBoxExtraItem;
    exports.stCellValue = stCellValue;
    exports.stChatPlayer = stChatPlayer;
    exports.stCheifStarUp = stCheifStarUp;
    exports.stChief = stChief;
    exports.stChiefEquip = stChiefEquip;
    exports.stChiefSkill = stChiefSkill;
    exports.stClubReward = stClubReward;
    exports.stCommonRank = stCommonRank;
    exports.stDailyEvent = stDailyEvent;
    exports.stDailyEventTask = stDailyEventTask;
    exports.stDailyShopWeekCard = stDailyShopWeekCard;
    exports.stDingYue = stDingYue;
    exports.stDrawEventCumulateRewardInfo = stDrawEventCumulateRewardInfo;
    exports.stDrawEventPack = stDrawEventPack;
    exports.stDrawEventRewardInfo = stDrawEventRewardInfo;
    exports.stDrawEventTask = stDrawEventTask;
    exports.stEquipAttr = stEquipAttr;
    exports.stEquipItem = stEquipItem;
    exports.stFightAction = stFightAction;
    exports.stFightActionLog = stFightActionLog;
    exports.stFightData = stFightData;
    exports.stFightPet = stFightPet;
    exports.stFightRole = stFightRole;
    exports.stFightVo = stFightVo;
    exports.stFuncGuide = stFuncGuide;
    exports.stFund = stFund;
    exports.stFundReward = stFundReward;
    exports.stGem = stGem;
    exports.stGemArena = stGemArena;
    exports.stGemItem = stGemItem;
    exports.stGemLifeBlood = stGemLifeBlood;
    exports.stGymArena = stGymArena;
    exports.stGymEquip = stGymEquip;
    exports.stGymFacilityRefinement = stGymFacilityRefinement;
    exports.stGymFacilityRefinementInfo = stGymFacilityRefinementInfo;
    exports.stGymInvite = stGymInvite;
    exports.stGymMapTasks = stGymMapTasks;
    exports.stGymMission = stGymMission;
    exports.stGymNpc = stGymNpc;
    exports.stGymUpgradeInfo = stGymUpgradeInfo;
    exports.stInvitationInfo = stInvitationInfo;
    exports.stInvitationTopPlayer = stInvitationTopPlayer;
    exports.stItem = stItem;
    exports.stItemEquipAttr = stItemEquipAttr;
    exports.stItemRem = stItemRem;
    exports.stItemStation = stItemStation;
    exports.stJjcLog = stJjcLog;
    exports.stJjcPlayer = stJjcPlayer;
    exports.stLabourCapsuleToys = stLabourCapsuleToys;
    exports.stLabourItemRed = stLabourItemRed;
    exports.stLabourShop = stLabourShop;
    exports.stMail = stMail;
    exports.stMission = stMission;
    exports.stMonopolyMapInfo = stMonopolyMapInfo;
    exports.stMonopolyPack = stMonopolyPack;
    exports.stMonopolyTask = stMonopolyTask;
    exports.stMountNum = stMountNum;
    exports.stMountRecord = stMountRecord;
    exports.stMountRefinement = stMountRefinement;
    exports.stMountRelation = stMountRelation;
    exports.stNamingRank = stNamingRank;
    exports.stNamingReward = stNamingReward;
    exports.stNewAdventure = stNewAdventure;
    exports.stNewFeast = stNewFeast;
    exports.stNewPlayerAttr = stNewPlayerAttr;
    exports.stNewPlayerTask = stNewPlayerTask;
    exports.stNotice = stNotice;
    exports.stPalaceBuff = stPalaceBuff;
    exports.stPalaceEnemy = stPalaceEnemy;
    exports.stPalacePlayer = stPalacePlayer;
    exports.stPalaceShopItem = stPalaceShopItem;
    exports.stPeakJjcAvatar = stPeakJjcAvatar;
    exports.stPet = stPet;
    exports.stPetFusionBaoDi = stPetFusionBaoDi;
    exports.stPetSkill = stPetSkill;
    exports.stPetTalent = stPetTalent;
    exports.stPlayerBaseInfo = stPlayerBaseInfo;
    exports.stPlayerData = stPlayerData;
    exports.stPopWin = stPopWin;
    exports.stPromotion = stPromotion;
    exports.stPropItem = stPropItem;
    exports.stRecruitChief = stRecruitChief;
    exports.stRedDot = stRedDot;
    exports.stReloadEquip = stReloadEquip;
    exports.stRewardRideVo = stRewardRideVo;
    exports.stRideInfo = stRideInfo;
    exports.stRideMissionVo = stRideMissionVo;
    exports.stRideReq = stRideReq;
    exports.stRideVo = stRideVo;
    exports.stServerConfig = stServerConfig;
    exports.stServerItem = stServerItem;
    exports.stSevenTask = stSevenTask;
    exports.stShareReward = stShareReward;
    exports.stShopItem = stShopItem;
    exports.stSilkBag = stSilkBag;
    exports.stSkin = stSkin;
    exports.stSkinStyle = stSkinStyle;
    exports.stSkyRank = stSkyRank;
    exports.stSmashFight = stSmashFight;
    exports.stSmashFightLang = stSmashFightLang;
    exports.stSmashFightResult = stSmashFightResult;
    exports.stSmashTopWinner = stSmashTopWinner;
    exports.stSpirit = stSpirit;
    exports.stSpiritArena = stSpiritArena;
    exports.stSpiritInfo = stSpiritInfo;
    exports.stSpringFestivalAllianceRank = stSpringFestivalAllianceRank;
    exports.stSpringFestivalPack = stSpringFestivalPack;
    exports.stSpringFestivalRewardInfo = stSpringFestivalRewardInfo;
    exports.stSpringFestivalShop = stSpringFestivalShop;
    exports.stSpringFestivalTask = stSpringFestivalTask;
    exports.stStarBattleEnemy = stStarBattleEnemy;
    exports.stStarBattleLog = stStarBattleLog;
    exports.stStarGoods = stStarGoods;
    exports.stStarRank = stStarRank;
    exports.stStationHandleLog = stStationHandleLog;
    exports.stStationNearBy = stStationNearBy;
    exports.stStyle = stStyle;
    exports.stTeamFightPlayer = stTeamFightPlayer;
    exports.stTipsVo = stTipsVo;
    exports.stTitleInfo = stTitleInfo;
    exports.stTrammelsChief = stTrammelsChief;
    exports.stWarcraftAttr = stWarcraftAttr;
    exports.stWarcraftSkin = stWarcraftSkin;
    exports.stWing = stWing;
    exports.stWingInfo = stWingInfo;
    exports.stWingItem = stWingItem;
    exports.stWingUpgradeInfo = stWingUpgradeInfo;
    exports.suitEquipList_revc = suitEquipList_revc;
    exports.suitEquip_req = suitEquip_req;
    exports.weeklyReward_revc = weeklyReward_revc;
    exports.wingTreasureStage_revc = wingTreasureStage_revc;
    exports.wingTreasureUpgrade_req = wingTreasureUpgrade_req;
    exports.wxLogin_req = wxLogin_req;
    exports.wxPlayerInfo_req = wxPlayerInfo_req;

    return exports;

}(window));
(function (exports) {
    'use strict';

    var Handler$1 = Laya.Handler;
    class LoadUtil {
        constructor() { }
        static GetRes(path) { return Laya.loader.getRes(path); }
        static LoadXML(path, complete, progress) {
            this.LoadRes(path, complete, progress, Laya.Loader.XML);
        }
        static GetXML(path) { return Laya.loader.getRes(path); }
        static LoadJson(path, complete, progress) {
            this.LoadRes(path, complete, progress, Laya.Loader.JSON);
        }
        static parseUint64(json) {
        }
        static GetJson(path) {
            let d = StaticDataMgr.Ins.getData(path);
            if (d) {
                return d;
            }
            let json = Laya.loader.getRes(path);
            if (typeof json == 'string') {
                json = JSON.parse(StringUtil.replaceComments(json));
            }
            this.parseUint64(json);
            if (json != null)
                return json;
            return null;
        }
        static LoadTxt(path, complete, progress) {
            this.LoadRes(path, complete, progress, Laya.Loader.TEXT);
        }
        static GetTxt(path) { return Laya.loader.getRes(path); }
        static LoadRes(path, complete, progress, type = null) {
            if (path == null || path.length == 0) {
                if (complete != null)
                    complete();
                return;
            }
            Laya.loader.load(path, Handler$1.create(this, complete), Handler$1.create(this, progress, [], false), type);
        }
        static LoadSprite3D(path, complete, progress) {
            if (path == null || path.length == 0) {
                if (complete != null)
                    complete();
                return;
            }
            Laya.loader.create(path, Handler$1.create(this, complete, [], false), Handler$1.create(this, progress, [], false));
        }
        static LoadScene3D(path, complete) {
            if (StringUtil.IsNullOrEmpty(path)) {
                if (complete != null)
                    complete();
                return;
            }
            Laya.Scene3D.load(path, Handler$1.create(this, complete, [], false));
        }
        static ClearRes(url) {
            Laya.loader.clearRes(url);
        }
        static ClearUnUnLoaded() {
            Laya.loader.clearUnLoaded();
        }
    }

    exports.LoadUtil = LoadUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ECfgVersion) {
        ECfgVersion[ECfgVersion["Normal"] = 1] = "Normal";
        ECfgVersion[ECfgVersion["Diff"] = 2] = "Diff";
    })(exports.ECfgVersion || (exports.ECfgVersion = {}));
    class BaseCfg {
        constructor() {
            let _name = this.GetTabelName();
            if (!_name) {
                throw Error("Please set your tabel name!");
            }
            this.Cfg = this.GetTabel(`cfg_${_name}`);
            if (!this.Cfg) {
                LogSys$1.Error("Cfg is null");
            }
        }
        get ver() {
            if (this._ver == undefined) {
                let _name = this.GetTabelName();
                let arr = _name.split("_");
                let s = arr[arr.length - 1];
                this._ver = parseInt(s.substr(1, s.length - 1));
                if (isNaN(this._ver)) {
                    this._ver = 0;
                }
            }
            return this._ver;
        }
        get suffix() {
            return MainModel.Ins.tabelSuffix;
        }
        get isHasData() {
            if (!this._isHasData) {
                let _name = this.GetTabelName();
                if (!_name) ;
                else {
                    this._isHasData = this.GetTabel(`cfg_${_name}`) != null;
                }
            }
            return this._isHasData;
        }
        GetDataById(id) {
            return this.getkv('f_id', id);
        }
        GetAllFids() {
            return this.getAllValue('f_id');
        }
        get isLoaded() {
            return this.Cfg != undefined;
        }
        getkv(keyStr, v) {
            let by = this.Cfg;
            if (by.tableName && !by._mDataMap) {
                return by.getKv(keyStr, v);
            }
            for (var key in this.Cfg.mDataMap) {
                let element = this.Cfg.mDataMap[key];
                if (element[keyStr] == v)
                    return element;
            }
            return null;
        }
        getAllValue(keyStr) {
            let by = this.Cfg;
            if (by.tableName && !by._mDataMap) {
                return by.getAllByKey(keyStr);
            }
            let m = this.Cfg.mDataMap;
            let result = [];
            for (let key in m) {
                let element = m[key];
                result.push(element[keyStr]);
            }
            return result;
        }
        forEach(that, func) {
            let by = this.Cfg;
            by.getAllCallByKey(that, func);
        }
        get List() {
            if (this._list) {
                return this._list;
            }
            let by = this.Cfg;
            if (by.tableName && !by._mDataMap) {
                let m1 = this.Cfg.mDataMap;
                this._list = by.list1;
                return this._list;
            }
            let _list1 = [];
            for (var key in this.Cfg.mDataMap) {
                let element = this.Cfg.mDataMap[key];
                _list1.push(element);
            }
            this._list = _list1;
            return this._list;
        }
        GetTabel(name) {
            return LoadUtil.GetJson(`o/config/export/${name}.json`);
        }
        dispose() {
            let by = this.Cfg;
            by.dispose();
        }
        checkVaild() {
        }
    }

    exports.BaseCfg = BaseCfg;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZipJson {
        constructor(name, o) {
            this.o = o;
            this.name = name;
        }
        getJson() {
            if (!this._json) {
                let ab = this.o.asArrayBuffer();
                let b1 = new Laya.Byte();
                b1.writeArrayBuffer(ab);
                b1.pos = 0;
                let str = b1.readUTFBytes();
                str = StringUtil.replaceComments(str);
                if (this.isUI) {
                    let _newFont = E.sdk.convertFont(ZipJson.BOLD);
                    str = str.replace(/\"font\":\"BOLD\"/g, `\"font\":\"${_newFont}\"`);
                    str = str.replace(/\"font\":\"Bold\"/g, `\"font\":\"${_newFont}\"`);
                    str = str.replace(/\"font\":\"bold\"/g, `\"font\":\"${_newFont}\"`);
                    _newFont = E.sdk.convertFont("fz");
                    str = str.replace(/\"font\":\"fz\"/g, `\"font\":\"${_newFont}\"`);
                    this.checkStr(str);
                }
                let json = JSON.parse(str);
                this._json = json;
            }
            return this._json;
        }
        checkStr(str) {
            let strlist = ["战鼓", "击鼓"];
            for (let i = 0; i < strlist.length; i++) {
                let badStr = strlist[i];
                if (str.indexOf(badStr) != -1) {
                    LogSys.Error(badStr + " find..............." + this.name);
                    if (debug) {
                        E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, "异常字符串:" + this.name + " " + badStr);
                    }
                }
            }
        }
    }
    ZipJson.BOLD = "BOLD";

    exports.ZipJson = ZipJson;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Txt_Config extends BaseCfg {
        GetTabelName() {
            return "t_Txt_Config";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Txt_Config();
            }
            return this._ins;
        }
        replaceAll(str, s, t) {
            let index = str.indexOf(s);
            if (index == -1) {
                return str;
            }
            str = str.replace(s, t);
            return this.replaceAll(str, s, t);
        }
        replace(str) {
            let index = MainModel.Ins.skinStyle - 1;
            if (index == 0) {
                return str;
            }
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                let arr = cfg.f_str.split("|");
                str = this.replaceAll(str, arr[0], arr[index]);
            }
            return str;
        }
    }
    class StaticDataMgr extends Laya.EventDispatcher {
        constructor() {
            super();
            this.jsonList = [];
            this.bList = [];
            this.uiBin = "";
            this.allBin = "";
            this.hasVal = "";
            this.langKey = "";
        }
        static get Ins() {
            if (!this._ins)
                this._ins = new StaticDataMgr();
            return this._ins;
        }
        parseBs(bs) {
            let cnt = bs.readUint32();
            let list2 = [];
            for (let i = 0; i < cnt; i++) {
                let len = bs.readUint32();
                let ns = new Laya.Byte();
                let ba = bs.readArrayBuffer(len);
                ns.writeArrayBuffer(ba);
                let b = new ByteCfg();
                b.init(ns);
                list2.push(b);
            }
            this.bList = list2;
        }
        getData(url) {
            let arr = url.split("/");
            let name = arr[arr.length - 1];
            let mName = name.split('.')[0];
            let node = this.haveName(mName);
            if (node) {
                return node;
            }
            for (let i = 0; i < this.jsonList.length; i++) {
                let jn = this.jsonList[i];
                if (jn.name == name) {
                    return jn.getJson();
                }
            }
            return null;
        }
        haveName(mName) {
            for (let i = 0; i < this.bList.length; i++) {
                let node = this.bList[i];
                if (`cfg_${node.tableName}` == mName) {
                    return node;
                }
            }
            return false;
        }
        onLoadComplete() {
            let all = Laya.loader.getRes(this.allBin);
            LogSys$1.Log("StaticDataMgr onLoadComplete...");
            let data = all;
            let zip = JSZip(all);
            let buffer = zip.files['all.bin'].asArrayBuffer();
            data = buffer;
            let hash = zip.files['hash'].asArrayBuffer();
            if (hash) {
                let _hashBs = new Laya.Byte();
                _hashBs.endian = Laya.Byte.LITTLE_ENDIAN;
                _hashBs.writeArrayBuffer(hash);
                _hashBs.pos = 0;
                let _hashStr = _hashBs.readUTFBytes();
                LogSys$1.Log("hash:" + _hashStr);
                this.hasVal = _hashStr;
            }
            for (let i in zip.files) {
                if (i.indexOf('.json') != -1) {
                    this.jsonList.push(new ZipJson(i, zip.files[i]));
                }
            }
            let bs = new Laya.Byte();
            bs.endian = Laya.Byte.LITTLE_ENDIAN;
            bs.writeArrayBuffer(data);
            bs.pos = 0;
            this.parseBs(bs);
            this.parseUI(this.uiBin);
            this.event(Laya.Event.COMPLETE);
            E.MsgMgr.reset();
        }
        Init() {
            let asset = InitConfig.getAsset();
            let all_bin = Laya.Utils.getQueryString("all_bin") || initConfig.all_bin;
            if (all_bin) {
                this.allBin = all_bin + "?" + E.randomKey;
            }
            else {
                this.allBin = asset + "all.bin" + "?" + E.randomKey;
            }
            this.uiBin = asset + `o/config/export/ui.bin` + "?" + E.randomKey;
            this.gameJson = asset + `o/config/game.json` + "?" + E.randomKey;
            this.langKey = "o/font/lang.json";
            LogSys$1.Log("StaticDataMgr Init");
            let resList = [{ url: this.langKey, type: Laya.Loader.JSON },
                { url: this.allBin, type: Laya.Loader.BUFFER },
                { url: this.uiBin, type: Laya.Loader.BUFFER },
                { url: this.gameJson, type: Laya.Loader.JSON },
            ];
            Laya.loader.load(resList, new Laya.Handler(this, this.onLoadComplete));
        }
        parseUI(ui_path) {
            let uifile = Laya.loader.getRes(ui_path);
            let zip = JSZip(uifile);
            for (let fileName in zip.files) {
                let _zipfile = zip.files[fileName];
                if (_zipfile._data) {
                    let _zipJson = new ZipJson(fileName, _zipfile);
                    _zipJson.isUI = true;
                    let basePath = Laya.URL.basePath;
                    let uiURL = `${basePath}views${fileName}`;
                    Laya.Loader.loadedMap[uiURL] = _zipJson.getJson();
                }
            }
        }
    }

    exports.StaticDataMgr = StaticDataMgr;
    exports.t_Txt_Config = t_Txt_Config;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class Version {
	}
	Version.curValue = "v1_0_20240226_13_59_dy";
	Version.cli_version = Version.curValue + "_01";
	Version.SIGN = "-1";

	exports.Version = Version;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class PetConfigProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new PetConfigProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Pet_Config";
        }
    }
    class PetListProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new PetListProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Pet_List";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_petid == id);
        }
        getPetIconById(id) {
            let cfg = PetListProxy.Ins.getCfgById(id);
            return "o/pet_icon/" + cfg.f_peticon;
        }
        getByPetID(id) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_id == id) {
                    return cfg;
                }
            }
        }
    }
    class PetQualityProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new PetQualityProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Pet_Quality";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_quality == id);
        }
    }
    class PetSkillClientProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new PetSkillClientProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Pet_Skill_Client";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_petskillid == id);
        }
    }
    class PetTalentProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new PetTalentProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Pet_Talent_List";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_talentid == id);
        }
    }
    class t_Pet_Fusion_Rate extends BaseCfg {
        GetTabelName() {
            return "t_Pet_Fusion_Rate";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pet_Fusion_Rate();
            }
            return this._ins;
        }
        getByLv(f_fusionlevel) {
            let l = this.List;
            let cell = l.find(cell => cell.f_fusionlevel == f_fusionlevel);
            return cell;
        }
    }
    class t_Pet_Fusion_Protection extends BaseCfg {
        GetTabelName() {
            return "t_Pet_Fusion_Protection";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pet_Fusion_Protection();
            }
            return this._ins;
        }
    }

    exports.PetConfigProxy = PetConfigProxy;
    exports.PetListProxy = PetListProxy;
    exports.PetQualityProxy = PetQualityProxy;
    exports.PetSkillClientProxy = PetSkillClientProxy;
    exports.PetTalentProxy = PetTalentProxy;
    exports.t_Pet_Fusion_Protection = t_Pet_Fusion_Protection;
    exports.t_Pet_Fusion_Rate = t_Pet_Fusion_Rate;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ECellType) {
        ECellType[ECellType["GOLD"] = 1] = "GOLD";
        ECellType[ECellType["COPPER_MONEY"] = 2] = "COPPER_MONEY";
        ECellType[ECellType["BOX"] = 3] = "BOX";
        ECellType[ECellType["BATTLE"] = 4] = "BATTLE";
        ECellType[ECellType["EXP"] = 5] = "EXP";
        ECellType[ECellType["Forage"] = 8] = "Forage";
        ECellType[ECellType["ChestQuick"] = 9] = "ChestQuick";
        ECellType[ECellType["JjcTicket"] = 10] = "JjcTicket";
        ECellType[ECellType["WhitePlume"] = 12] = "WhitePlume";
        ECellType[ECellType["HorseItemId"] = 19] = "HorseItemId";
        ECellType[ECellType["WuXing"] = 21] = "WuXing";
        ECellType[ECellType["TokenMoney"] = 22] = "TokenMoney";
        ECellType[ECellType["HeroInvite"] = 23] = "HeroInvite";
        ECellType[ECellType["TaskRefresh"] = 25] = "TaskRefresh";
        ECellType[ECellType["GouYu"] = 26] = "GouYu";
        ECellType[ECellType["QiYun"] = 31] = "QiYun";
        ECellType[ECellType["DaoQi"] = 32] = "DaoQi";
        ECellType[ECellType["TongXingZheng"] = 56] = "TongXingZheng";
        ECellType[ECellType["Auth"] = 58] = "Auth";
        ECellType[ECellType["BaoShiQuan"] = 59] = "BaoShiQuan";
        ECellType[ECellType["ShenTie"] = 84] = "ShenTie";
        ECellType[ECellType["ShenBinCP"] = 85] = "ShenBinCP";
        ECellType[ECellType["BaoShiQuanG"] = 99] = "BaoShiQuanG";
        ECellType[ECellType["HighHeroInvite"] = 100] = "HighHeroInvite";
        ECellType[ECellType["FuJiangLv"] = 104] = "FuJiangLv";
        ECellType[ECellType["FuJiangEquipLv"] = 105] = "FuJiangEquipLv";
        ECellType[ECellType["FuJiangEquipStar"] = 106] = "FuJiangEquipStar";
        ECellType[ECellType["FuJiangSkill1"] = 107] = "FuJiangSkill1";
        ECellType[ECellType["FuJiangSkill2"] = 108] = "FuJiangSkill2";
        ECellType[ECellType["JunLingZhuang"] = 293] = "JunLingZhuang";
        ECellType[ECellType["XingXing"] = 302] = "XingXing";
        ECellType[ECellType["XZJJ"] = 303] = "XZJJ";
        ECellType[ECellType["JGYS"] = 304] = "JGYS";
        ECellType[ECellType["BaoZi"] = 305] = "BaoZi";
        ECellType[ECellType["JingNang"] = 306] = "JingNang";
        ECellType[ECellType["GemPiece"] = 317] = "GemPiece";
        ECellType[ECellType["ShenHun"] = 318] = "ShenHun";
        ECellType[ECellType["LingChongSMJH"] = 334] = "LingChongSMJH";
        ECellType[ECellType["LingChouZM"] = 335] = "LingChouZM";
        ECellType[ECellType["LingChouJS"] = 336] = "LingChouJS";
        ECellType[ECellType["LingChouXM"] = 334] = "LingChouXM";
        ECellType[ECellType["Gongxun"] = 504] = "Gongxun";
        ECellType[ECellType["Voucher"] = 527] = "Voucher";
        ECellType[ECellType["AllianceEnergy"] = 528] = "AllianceEnergy";
        ECellType[ECellType["GreenDragonPiece"] = 530] = "GreenDragonPiece";
        ECellType[ECellType["AllianceLing"] = 532] = "AllianceLing";
        ECellType[ECellType["WeiWang"] = 536] = "WeiWang";
        ECellType[ECellType["NianShoulinpian"] = 537] = "NianShoulinpian";
        ECellType[ECellType["XinNianFuZi"] = 538] = "XinNianFuZi";
    })(exports.ECellType || (exports.ECellType = {}));
    (function (EquipmentQuality) {
        EquipmentQuality[EquipmentQuality["Normal"] = 1] = "Normal";
        EquipmentQuality[EquipmentQuality["Excellence"] = 2] = "Excellence";
        EquipmentQuality[EquipmentQuality["Polish"] = 3] = "Polish";
        EquipmentQuality[EquipmentQuality["Rare"] = 4] = "Rare";
        EquipmentQuality[EquipmentQuality["Epic"] = 5] = "Epic";
        EquipmentQuality[EquipmentQuality["Legend"] = 6] = "Legend";
        EquipmentQuality[EquipmentQuality["Manna"] = 7] = "Manna";
        EquipmentQuality[EquipmentQuality["GodCast"] = 8] = "GodCast";
    })(exports.EquipmentQuality || (exports.EquipmentQuality = {}));
    (function (EEquipType) {
        EEquipType[EEquipType["None"] = 0] = "None";
        EEquipType[EEquipType["Shoulder"] = 1] = "Shoulder";
        EEquipType[EEquipType["Casque"] = 2] = "Casque";
        EEquipType[EEquipType["Necklace"] = 3] = "Necklace";
        EEquipType[EEquipType["Wrister"] = 4] = "Wrister";
        EEquipType[EEquipType["Barde"] = 5] = "Barde";
        EEquipType[EEquipType["Gloves"] = 6] = "Gloves";
        EEquipType[EEquipType["Waistband"] = 7] = "Waistband";
        EEquipType[EEquipType["Trousers"] = 8] = "Trousers";
        EEquipType[EEquipType["Weapon"] = 9] = "Weapon";
        EEquipType[EEquipType["Ornament"] = 10] = "Ornament";
        EEquipType[EEquipType["Shoe"] = 11] = "Shoe";
        EEquipType[EEquipType["Shield"] = 12] = "Shield";
        EEquipType[EEquipType["Wing"] = 13] = "Wing";
        EEquipType[EEquipType["ZuoQi"] = 14] = "ZuoQi";
    })(exports.EEquipType || (exports.EEquipType = {}));
    (function (EWearableType) {
        EWearableType[EWearableType["Wearable"] = 1] = "Wearable";
        EWearableType[EWearableType["Not"] = 2] = "Not";
    })(exports.EWearableType || (exports.EWearableType = {}));
    (function (EActionEquip) {
        EActionEquip[EActionEquip["Sell"] = 0] = "Sell";
        EActionEquip[EActionEquip["Equip"] = 1] = "Equip";
    })(exports.EActionEquip || (exports.EActionEquip = {}));
    (function (EAttrType) {
        EAttrType[EAttrType["Speed"] = 10002] = "Speed";
        EAttrType[EAttrType["Life"] = 10003] = "Life";
        EAttrType[EAttrType["Attack"] = 10004] = "Attack";
        EAttrType[EAttrType["Defense"] = 10005] = "Defense";
        EAttrType[EAttrType["SuckBlood"] = 10006] = "SuckBlood";
        EAttrType[EAttrType["AefenseAttack"] = 10007] = "AefenseAttack";
    })(exports.EAttrType || (exports.EAttrType = {}));
    (function (EChestAnimStatus) {
        EChestAnimStatus[EChestAnimStatus["Close"] = 0] = "Close";
        EChestAnimStatus[EChestAnimStatus["Open"] = 1] = "Open";
    })(exports.EChestAnimStatus || (exports.EChestAnimStatus = {}));
    (function (EFkSceneType) {
        EFkSceneType[EFkSceneType["Main"] = 1] = "Main";
        EFkSceneType[EFkSceneType["Details"] = 2] = "Details";
        EFkSceneType[EFkSceneType["Fight"] = 3] = "Fight";
    })(exports.EFkSceneType || (exports.EFkSceneType = {}));
    (function (EFightType) {
        EFightType[EFightType["Adventure"] = 1] = "Adventure";
        EFightType[EFightType["Boss"] = 2] = "Boss";
        EFightType[EFightType["Jjc"] = 5] = "Jjc";
        EFightType[EFightType["DLD"] = 6] = "DLD";
        EFightType[EFightType["HeroPackage"] = 7] = "HeroPackage";
        EFightType[EFightType["Expedition"] = 13] = "Expedition";
        EFightType[EFightType["XXZDZ"] = 14] = "XXZDZ";
        EFightType[EFightType["BigBoss"] = 15] = "BigBoss";
        EFightType[EFightType["WuShenDian"] = 16] = "WuShenDian";
        EFightType[EFightType["BossFight"] = 18] = "BossFight";
        EFightType[EFightType["AllianceWar"] = 19] = "AllianceWar";
    })(exports.EFightType || (exports.EFightType = {}));
    (function (EServerFightType) {
        EServerFightType[EServerFightType["JJC"] = 0] = "JJC";
        EServerFightType[EServerFightType["DF_JJC"] = 1] = "DF_JJC";
        EServerFightType[EServerFightType["XXZDZ"] = 2] = "XXZDZ";
        EServerFightType[EServerFightType["ScoreJJC"] = 3] = "ScoreJJC";
    })(exports.EServerFightType || (exports.EServerFightType = {}));
    (function (ERewardType) {
        ERewardType[ERewardType["Adventure"] = 1] = "Adventure";
        ERewardType[ERewardType["YeWaiBoss"] = 2] = "YeWaiBoss";
        ERewardType[ERewardType["BossSweep"] = 3] = "BossSweep";
        ERewardType[ERewardType["Task"] = 4] = "Task";
        ERewardType[ERewardType["DLD"] = 9] = "DLD";
        ERewardType[ERewardType["Ticket"] = 11] = "Ticket";
        ERewardType[ERewardType["PetFusion"] = 17] = "PetFusion";
    })(exports.ERewardType || (exports.ERewardType = {}));
    (function (EItemCfgId) {
    })(exports.EItemCfgId || (exports.EItemCfgId = {}));
    (function (EGetStatus) {
        EGetStatus[EGetStatus["CanNotGet"] = 0] = "CanNotGet";
        EGetStatus[EGetStatus["CanGet"] = 1] = "CanGet";
        EGetStatus[EGetStatus["IsAlreadyGet"] = 2] = "IsAlreadyGet";
    })(exports.EGetStatus || (exports.EGetStatus = {}));
    (function (EUseItemScene) {
        EUseItemScene[EUseItemScene["Normal"] = 0] = "Normal";
        EUseItemScene[EUseItemScene["Knowledge"] = 1] = "Knowledge";
        EUseItemScene[EUseItemScene["Chest"] = 2] = "Chest";
    })(exports.EUseItemScene || (exports.EUseItemScene = {}));
    (function (EItemSubType) {
        EItemSubType[EItemSubType["Currency"] = 1] = "Currency";
        EItemSubType[EItemSubType["Plume"] = 2] = "Plume";
        EItemSubType[EItemSubType["Authenticating"] = 6] = "Authenticating";
    })(exports.EItemSubType || (exports.EItemSubType = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EQianDaoRewardsType) {
        EQianDaoRewardsType[EQianDaoRewardsType["Item"] = 0] = "Item";
        EQianDaoRewardsType[EQianDaoRewardsType["Horse"] = 1] = "Horse";
    })(exports.EQianDaoRewardsType || (exports.EQianDaoRewardsType = {}));
    class t_Pack_AttendanceProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Attendance";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_AttendanceProxy();
            }
            return this._ins;
        }
    }
    class t_Pack_Attendanc_new extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Attendanc_new";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_Attendanc_new();
            }
            return this._ins;
        }
    }
    class t_Pack_ChaGrowProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_ChaGrow";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_ChaGrowProxy();
            }
            return this._ins;
        }
    }
    class t_Pack_BoxGrowProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_BoxGrow";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_BoxGrowProxy();
            }
            return this._ins;
        }
    }
    class t_Fund_TypeProxy extends BaseCfg {
        GetTabelName() {
            return "t_Fund_Type";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Fund_TypeProxy();
            }
            return this._ins;
        }
        getCfgByType(type) {
            const conf = this.List.find(o => o.f_FundType === type);
            return conf ? conf.f_PurchaseItem : '';
        }
    }
    class t_Fund_NewProxy extends BaseCfg {
        GetTabelName() {
            return "t_Fund_New";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Fund_NewProxy();
            }
            return this._ins;
        }
        getCfgByType(type) {
            let arr = this.List.filter(o => o.f_FundType === type).map(o => ({
                f_id: o.f_id,
                f_Level: o.f_Condition,
                f_NumberFree: o.f_FreeReward,
                f_NumberNotFree: o.f_RmbReward,
                f_itemid: '',
                f_rewardstype: 0,
                f_taskText: o.f_TaskText
            }));
            const buyReward = t_Fund_TypeProxy.Ins.getCfgByType(type);
            arr.push({
                f_id: 0,
                f_Level: 0,
                f_NumberFree: '',
                f_NumberNotFree: '',
                f_itemid: buyReward,
                f_rewardstype: 1,
                f_taskText: ''
            });
            return arr;
        }
    }
    class t_Pack_ControllerProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Controller";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_ControllerProxy();
            }
            return this._ins;
        }
        getCfgByPackidId(packid) {
            return this.List.find(o => o.f_packid === packid);
        }
        getByUID(uid) {
            return this.GetDataById(uid);
        }
    }
    class t_Purchase_PriceProxy extends BaseCfg {
        GetTabelName() {
            return "t_Purchase_Price";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Purchase_PriceProxy();
            }
            return this._ins;
        }
        getPriceItemById(purchaseId) {
            const _l = this.List;
            const cfg = _l.find(o => Number(o.f_id) === purchaseId);
            if (!cfg)
                throw new Error(`${this.GetTabelName()}缺少f_id#${purchaseId}的配置`);
            return {
                price: Number(cfg.f_price),
                isFirstDouble: cfg.f_double ? true : false
            };
        }
    }
    class t_Pack_BoxEventProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_BoxEvent";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_BoxEventProxy();
            }
            return this._ins;
        }
    }
    class t_Pack_NewSeverProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_NewSever";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_NewSeverProxy();
            }
            return this._ins;
        }
    }
    class t_Pack_DailyProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Daily";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_DailyProxy();
            }
            return this._ins;
        }
    }
    class t_Pack_SupplyProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Supply";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_SupplyProxy();
            }
            return this._ins;
        }
    }
    class t_Pack_Shop_MartProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Shop_Mart";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_Shop_MartProxy();
            }
            return this._ins;
        }
    }
    class t_Pack_Shop_Mart_ConfigProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Shop_Mart_Config";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_Shop_Mart_ConfigProxy();
            }
            return this._ins;
        }
    }
    class System_RefreshTimeProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new System_RefreshTimeProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_System_RefreshTime";
        }
        getVal(id) {
            if (this.isLoaded) {
                let cfg = this.GetDataById(id);
                if (cfg) {
                    return this.f_SystemConfig(cfg);
                }
            }
            return "";
        }
        getNumberVal(id) {
            if (this.isLoaded) {
                let cfg = this.GetDataById(id);
                if (cfg) {
                    return this.f_SystemConfig(cfg);
                }
            }
            return 0;
        }
        f_SystemConfig(cfg) {
            let v = cfg[`f_SystemConfig${this.suffix}`];
            return v;
        }
    }
    class t_Pack_NewPlayerProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_NewPlayer";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_NewPlayerProxy();
            }
            return this._ins;
        }
    }
    class t_Pack_FirstPay_Equip extends BaseCfg {
        GetTabelName() {
            return "t_Pack_FirstPay_Equip";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_FirstPay_Equip();
            }
            return this._ins;
        }
        get max_f_id() {
            let l = this.List;
            return l[l.length - 1].f_id;
        }
    }
    class t_Custom_CostumesProxy extends BaseCfg {
        constructor() {
            super(...arguments);
            this.quaList = [];
        }
        GetTabelName() {
            return "t_Custom_Costumes";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Custom_CostumesProxy();
            }
            return this._ins;
        }
        onSortHandler(a, b) {
            if (a < b) {
                return -1;
            }
            else if (a > b) {
                return 1;
            }
            return 0;
        }
        get mapList() {
            if (!this._mapList) {
                this._mapList = {};
                let l = this.List;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    if (!this._mapList[cfg.f_CostumesQuality]) {
                        this._mapList[cfg.f_CostumesQuality] = [];
                        this.quaList.push(cfg.f_CostumesQuality);
                    }
                    this._mapList[cfg.f_CostumesQuality].push(cfg);
                }
            }
            this.quaList = this.quaList.sort(this.onSortHandler);
            return this._mapList;
        }
        get qua() {
            let m = this.mapList;
            return this.quaList;
        }
        getByCostumesid(costid) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_Costumesid == costid) {
                    return cfg;
                }
            }
        }
    }
    class t_Pack_List extends BaseCfg {
        GetTabelName() {
            return "t_Pack_List";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_List();
            }
            return this._ins;
        }
    }
    class t_Pack_Daily_Shop extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Daily_Shop";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_Daily_Shop();
            }
            return this._ins;
        }
        getCfgById(id) {
            return this.List.find(item => item.f_id == id);
        }
    }
    class System_CommunityProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new System_CommunityProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_System_Community";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_id == id);
        }
    }
    class t_Pack_Daily_Shop_WeekCard extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Daily_Shop_WeekCard";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_Daily_Shop_WeekCard();
            }
            return this._ins;
        }
        getCfgByGroupId(groupId) {
            return this.List.find(item => item.f_group == groupId);
        }
    }

    exports.System_CommunityProxy = System_CommunityProxy;
    exports.System_RefreshTimeProxy = System_RefreshTimeProxy;
    exports.t_Custom_CostumesProxy = t_Custom_CostumesProxy;
    exports.t_Fund_NewProxy = t_Fund_NewProxy;
    exports.t_Fund_TypeProxy = t_Fund_TypeProxy;
    exports.t_Pack_Attendanc_new = t_Pack_Attendanc_new;
    exports.t_Pack_AttendanceProxy = t_Pack_AttendanceProxy;
    exports.t_Pack_BoxEventProxy = t_Pack_BoxEventProxy;
    exports.t_Pack_BoxGrowProxy = t_Pack_BoxGrowProxy;
    exports.t_Pack_ChaGrowProxy = t_Pack_ChaGrowProxy;
    exports.t_Pack_ControllerProxy = t_Pack_ControllerProxy;
    exports.t_Pack_DailyProxy = t_Pack_DailyProxy;
    exports.t_Pack_Daily_Shop = t_Pack_Daily_Shop;
    exports.t_Pack_Daily_Shop_WeekCard = t_Pack_Daily_Shop_WeekCard;
    exports.t_Pack_FirstPay_Equip = t_Pack_FirstPay_Equip;
    exports.t_Pack_List = t_Pack_List;
    exports.t_Pack_NewPlayerProxy = t_Pack_NewPlayerProxy;
    exports.t_Pack_NewSeverProxy = t_Pack_NewSeverProxy;
    exports.t_Pack_Shop_MartProxy = t_Pack_Shop_MartProxy;
    exports.t_Pack_Shop_Mart_ConfigProxy = t_Pack_Shop_Mart_ConfigProxy;
    exports.t_Pack_SupplyProxy = t_Pack_SupplyProxy;
    exports.t_Purchase_PriceProxy = t_Purchase_PriceProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EFuncDef) {
        EFuncDef[EFuncDef["Adventure"] = 1] = "Adventure";
        EFuncDef[EFuncDef["Wing"] = 2] = "Wing";
        EFuncDef[EFuncDef["Libao"] = 3] = "Libao";
        EFuncDef[EFuncDef["KaiFuKuangHuang"] = 4] = "KaiFuKuangHuang";
        EFuncDef[EFuncDef["YeWaiBoss"] = 6] = "YeWaiBoss";
        EFuncDef[EFuncDef["Jjc"] = 7] = "Jjc";
        EFuncDef[EFuncDef["Shop"] = 8] = "Shop";
        EFuncDef[EFuncDef["SignIn"] = 9] = "SignIn";
        EFuncDef[EFuncDef["SaoGuoMark"] = 10] = "SaoGuoMark";
        EFuncDef[EFuncDef["NewPlayer"] = 81] = "NewPlayer";
        EFuncDef[EFuncDef["PopWin"] = 12] = "PopWin";
        EFuncDef[EFuncDef["ZhuHouBuji"] = 13] = "ZhuHouBuji";
        EFuncDef[EFuncDef["ChestAuto"] = 14] = "ChestAuto";
        EFuncDef[EFuncDef["Ride"] = 15] = "Ride";
        EFuncDef[EFuncDef["SwitchStyle"] = 16] = "SwitchStyle";
        EFuncDef[EFuncDef["HeroHouse"] = 17] = "HeroHouse";
        EFuncDef[EFuncDef["CiFu"] = 18] = "CiFu";
        EFuncDef[EFuncDef["PaoShang"] = 20] = "PaoShang";
        EFuncDef[EFuncDef["GuaJi"] = 19] = "GuaJi";
        EFuncDef[EFuncDef["Soul"] = 21] = "Soul";
        EFuncDef[EFuncDef["Gem"] = 22] = "Gem";
        EFuncDef[EFuncDef["Confraternity"] = 23] = "Confraternity";
        EFuncDef[EFuncDef["DaLuanDou"] = 24] = "DaLuanDou";
        EFuncDef[EFuncDef["Recharge"] = 25] = "Recharge";
        EFuncDef[EFuncDef["GuangGao"] = 26] = "GuangGao";
        EFuncDef[EFuncDef["HideChestAuto"] = 27] = "HideChestAuto";
        EFuncDef[EFuncDef["Laborday"] = 28] = "Laborday";
        EFuncDef[EFuncDef["chenghao"] = 29] = "chenghao";
        EFuncDef[EFuncDef["DF_jjc"] = 30] = "DF_jjc";
        EFuncDef[EFuncDef["Mount_Wash"] = 31] = "Mount_Wash";
        EFuncDef[EFuncDef["ChildrenHD"] = 32] = "ChildrenHD";
        EFuncDef[EFuncDef["FuJiang"] = 33] = "FuJiang";
        EFuncDef[EFuncDef["YaoQing"] = 34] = "YaoQing";
        EFuncDef[EFuncDef["JuBaoPeng"] = 35] = "JuBaoPeng";
        EFuncDef[EFuncDef["DuanWu"] = 36] = "DuanWu";
        EFuncDef[EFuncDef["Expedition"] = 37] = "Expedition";
        EFuncDef[EFuncDef["FightHard"] = 38] = "FightHard";
        EFuncDef[EFuncDef["XXZDZ"] = 39] = "XXZDZ";
        EFuncDef[EFuncDef["GemFeast"] = 40] = "GemFeast";
        EFuncDef[EFuncDef["Summer"] = 41] = "Summer";
        EFuncDef[EFuncDef["GameCirle"] = 42] = "GameCirle";
        EFuncDef[EFuncDef["WuShenDian"] = 43] = "WuShenDian";
        EFuncDef[EFuncDef["JJZML"] = 44] = "JJZML";
        EFuncDef[EFuncDef["FuJiangFeast"] = 45] = "FuJiangFeast";
        EFuncDef[EFuncDef["MeiRiZhuanPan"] = 46] = "MeiRiZhuanPan";
        EFuncDef[EFuncDef["HuoDong"] = 47] = "HuoDong";
        EFuncDef[EFuncDef["KaiFuChongBang"] = 48] = "KaiFuChongBang";
        EFuncDef[EFuncDef["JiShaoChengDuo"] = 49] = "JiShaoChengDuo";
        EFuncDef[EFuncDef["JieDongFeng"] = 50] = "JieDongFeng";
        EFuncDef[EFuncDef["FuJiangJB"] = 51] = "FuJiangJB";
        EFuncDef[EFuncDef["LingChong"] = 52] = "LingChong";
        EFuncDef[EFuncDef["NewPlayerFeast"] = 53] = "NewPlayerFeast";
        EFuncDef[EFuncDef["PetFeast"] = 54] = "PetFeast";
        EFuncDef[EFuncDef["CJKF"] = 55] = "CJKF";
        EFuncDef[EFuncDef["ZhengTu"] = 56] = "ZhengTu";
        EFuncDef[EFuncDef["MountLB"] = 57] = "MountLB";
        EFuncDef[EFuncDef["PetLB"] = 58] = "PetLB";
        EFuncDef[EFuncDef["JiJing"] = 59] = "JiJing";
        EFuncDef[EFuncDef["LibaoZi"] = 60] = "LibaoZi";
        EFuncDef[EFuncDef["ServerTask"] = 61] = "ServerTask";
        EFuncDef[EFuncDef["FenXiang"] = 62] = "FenXiang";
        EFuncDef[EFuncDef["TianJiaZhuoMian"] = 63] = "TianJiaZhuoMian";
        EFuncDef[EFuncDef["YouXiQuan"] = 64] = "YouXiQuan";
        EFuncDef[EFuncDef["GroupShare"] = 65] = "GroupShare";
        EFuncDef[EFuncDef["SkinLiBao"] = 66] = "SkinLiBao";
        EFuncDef[EFuncDef["ShenBinSY"] = 67] = "ShenBinSY";
        EFuncDef[EFuncDef["midAutumn"] = 68] = "midAutumn";
        EFuncDef[EFuncDef["Luck"] = 70] = "Luck";
        EFuncDef[EFuncDef["EveryDayPackage"] = 71] = "EveryDayPackage";
        EFuncDef[EFuncDef["WanShengJie"] = 72] = "WanShengJie";
        EFuncDef[EFuncDef["SignInNew"] = 74] = "SignInNew";
        EFuncDef[EFuncDef["Chat"] = 75] = "Chat";
        EFuncDef[EFuncDef["Alliance"] = 76] = "Alliance";
        EFuncDef[EFuncDef["MountDQ"] = 78] = "MountDQ";
        EFuncDef[EFuncDef["PetQD"] = 79] = "PetQD";
        EFuncDef[EFuncDef["GemQD"] = 80] = "GemQD";
        EFuncDef[EFuncDef["ZhanLing"] = 82] = "ZhanLing";
        EFuncDef[EFuncDef["MoJinXiaoWei"] = 83] = "MoJinXiaoWei";
        EFuncDef[EFuncDef["Monopoly"] = 84] = "Monopoly";
        EFuncDef[EFuncDef["DrawEvent"] = 85] = "DrawEvent";
        EFuncDef[EFuncDef["NamingCharge"] = 86] = "NamingCharge";
        EFuncDef[EFuncDef["NamingRename"] = 87] = "NamingRename";
        EFuncDef[EFuncDef["SpringFestival"] = 88] = "SpringFestival";
        EFuncDef[EFuncDef["SiderView"] = 89] = "SiderView";
        EFuncDef[EFuncDef["Combopack"] = 90] = "Combopack";
        EFuncDef[EFuncDef["DiscountWin"] = 92] = "DiscountWin";
        EFuncDef[EFuncDef["Client"] = 93] = "Client";
        EFuncDef[EFuncDef["DouYinClient"] = 94] = "DouYinClient";
        EFuncDef[EFuncDef["yuanxiao"] = 95] = "yuanxiao";
    })(exports.EFuncDef || (exports.EFuncDef = {}));

    return exports;

}(window));
(function (exports) {
	'use strict';

	class RedEnum {
	}
	RedEnum.JJC_FIGHT = 1;
	RedEnum.CHEST_LV = 2;
	RedEnum.NOTICE_SEL = 3;
	RedEnum.BOX_QUA = 4;
	RedEnum.BOX_ATTR_0 = 5;
	RedEnum.BOX_ATTR_1 = 6;
	RedEnum.BOX_ATTR_2 = 7;
	RedEnum.BOX_ATTR_3 = 8;
	RedEnum.BOX_PLUS = 9;
	RedEnum.BOX_NUM_INDEX = 10;
	RedEnum.BOX_CK0 = 11;
	RedEnum.BOX_CK1 = 12;
	RedEnum.DF_JJC_FIGHT = 13;
	RedEnum.HERO_AUTO_CK0 = 14;
	RedEnum.HERO_AUTO_CK1 = 15;
	RedEnum.HERO_AUTO_CK2 = 16;
	RedEnum.HERO_AUTO_QUA = 17;
	RedEnum.CIFU_QUA = 18;
	RedEnum.CIFU_CK1 = 19;
	RedEnum.CIFU_CK2 = 20;
	RedEnum.MUISC_BG = 21;
	RedEnum.MUISC_EFFECT = 22;
	RedEnum.FIGHT_ANIM_SCALE = 24;
	RedEnum.IsKowtow = 25;
	RedEnum.BaoShiAutoHC = 26;
	RedEnum.POP_VAL = 27;
	RedEnum.SUIT_ID = 100;
	RedEnum.ZHANGHE_ANI = 1001;
	RedEnum.VIP_KEFU = 1002;
	RedEnum.JI_SHAO_CHENGDUO = 1003;
	RedEnum.RED_JuBaoPeng = 1004;
	RedEnum.RED_JieDongFeng = 1005;
	RedEnum.PET_RH_QUA = 1006;
	RedEnum.DISCOUNT = 1007;
	RedEnum.DISCOUNT_POP_PLAYER = 1008;

	exports.RedEnum = RedEnum;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class CheckBox2Ctl {
        constructor(skin, label = "") {
            this._sel = false;
            this.skin = skin;
            this.skin.on(Laya.Event.CLICK, this, this.onClickHander);
            this.selected = this._sel;
            this.skin.tf.text = label;
        }
        onClickHander() {
            this.selected = !this.selected;
            if (this.selectHander) {
                this.selectHander.run();
            }
        }
        set selected(v) {
            this._sel = v;
            if (v) {
                this.skin.kaiimg.x = 37;
                this.skin.kai.text = "开";
                this.skin.kai.x = 13;
            }
            else {
                this.skin.kaiimg.x = 2;
                this.skin.kai.text = "关";
                this.skin.kai.x = 39;
            }
        }
        get selected() {
            return this._sel;
        }
    }

    exports.CheckBox2Ctl = CheckBox2Ctl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class CheckBoxCtl {
        constructor(skin, contentStr) {
            this.skin = skin;
            this.bg = skin.bg;
            this.gou = skin.gou;
            this.content = skin.content;
            this.gou.mouseEnabled = false;
            if (this.content) {
                this.content.mouseEnabled = false;
                if (contentStr) {
                    this.content.text = contentStr;
                }
            }
            this.bg.mouseEnabled = true;
            this.bg.on(Laya.Event.CLICK, this, this.onClick);
        }
        onClick() {
            this.selected = !this.gou.visible;
            if (this.selectHander) {
                this.selectHander.run();
            }
        }
        set selected(v) {
            this.gou.visible = v;
        }
        get selected() {
            return this.gou.visible;
        }
        set visible(v) {
            this.bg.visible = this.gou.visible = v;
            if (this.content) {
                this.content.visible = v;
            }
        }
    }
    class CheckBoxList {
        init(skinlist) {
            this.l2 = [];
            for (let i = 0; i < skinlist.length; i++) {
                this.l2.push(new CheckBoxCtl(skinlist[i]));
            }
            for (let i = 0; i < this.l2.length; i++) {
                let ctl = this.l2[i];
                ctl.bg.on(Laya.Event.CLICK, this, this.onClickHandler, [i]);
            }
        }
        setData(data) {
            let l2 = this.l2;
            for (let i = 0; i < l2.length; i++) {
                let ctl = l2[i];
                let cellData = data[i];
                if (cellData) {
                    ctl.visible = true;
                    this.itemRender.runWith([ctl.skin, i]);
                }
                else {
                    ctl.visible = false;
                }
            }
        }
        onClickHandler(index) {
            this.refreshSelect(index);
            this.callClickHandler.runWith(index);
        }
        setSelectIndex(v) {
            this.refreshSelect(v);
        }
        refreshSelect(index) {
            let l2 = this.l2;
            for (let i = 0; i < l2.length; i++) {
                let ctl = l2[i];
                if (i == index) {
                    ctl.selected = true;
                }
                else {
                    ctl.selected = false;
                }
            }
        }
    }

    exports.CheckBoxCtl = CheckBoxCtl;
    exports.CheckBoxList = CheckBoxList;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SelectListCtl {
        constructor() {
            this.mCompose = false;
            this.curIndex = 0;
            this.dirBottom = false;
            this._maxColCount = 0;
            this.btnlist = [];
            this.hitSpr = new Laya.Sprite();
            SelectListCtl._allList.push(this);
        }
        static closeAll() {
            for (let i = 0; i < this._allList.length; i++) {
                let cell = this._allList[i];
                cell.close();
            }
        }
        get maxColCount() {
            return this._maxColCount;
        }
        set maxColCount(v) {
            this._maxColCount = v;
        }
        get selectVo() {
            return this.dataList[this.curIndex];
        }
        get curDataList() {
            return this.dataList;
        }
        drawBotLine(_item, index) {
            _item.graphics.clear();
            if (_item.y == 0) ;
            else {
                _item.graphics.drawRect(0, 0, _item.width, 2, null, "#9F540C", 1);
            }
            if ((_item.y + _item.height) == _item.height * this.maxColCount) ;
            else {
                _item.graphics.drawRect(0, _item.height, _item.width, 2, null, "#9F540C", 1);
            }
        }
        drawtop(_item) {
            _item.graphics.clear();
            _item.graphics.drawRect(0, 0, _item.width, 2, null, "#9F540C", 1);
        }
        init(sanjiao, listarea, listcontainer, showTf, cls, dataList, poolKey) {
            this.startPosX = listarea.x;
            while (this.btnlist.length > 0) {
                let item = this.btnlist.pop();
                item.removeSelf();
                if (poolKey) {
                    Laya.Pool.recover(poolKey, item);
                }
            }
            this.sanjiao = sanjiao;
            this.listarea = listarea;
            listarea.on(Laya.Event.CLICK, this, this.onAreaHander);
            this.dataList = dataList;
            this.showTf = showTf;
            this.listcontainer = listcontainer;
            let cnt = dataList.length;
            let cellHeight = 0;
            let startIndex = -1;
            let colIndex = 0;
            let cellWidth = 0;
            for (let i = 0; i < cnt; i++) {
                if (this.maxColCount > 0) {
                    if (i % this.maxColCount == 0) {
                        startIndex = 0;
                        colIndex++;
                    }
                    else {
                        startIndex++;
                    }
                }
                else {
                    startIndex++;
                }
                let _item;
                if (poolKey) {
                    _item = Laya.Pool.getItemByClass(poolKey, cls);
                }
                else {
                    _item = new cls();
                }
                cellWidth = _item.width;
                if (this.dirBottom) {
                    _item.y = startIndex * _item.height;
                    if (i > 0) {
                        this.drawBotLine(_item, i);
                    }
                }
                else {
                    _item.y = (cnt - startIndex - 1) * _item.height;
                    if (i < cnt - 1) {
                        this.drawtop(_item);
                    }
                }
                if (this.maxColCount > 0) {
                    let offset = Math.ceil(this.dataList.length / this.maxColCount);
                    _item.x = this.startPosX + cellWidth * (offset - colIndex);
                }
                else {
                    _item.x = 0;
                }
                listcontainer.addChild(_item);
                cellHeight = _item.height;
                let cfg = dataList[i];
                _item.dataSource = cfg;
                if (this.itemHandler) {
                    this.itemHandler.runWith(_item);
                }
                else {
                    this.updateCell(_item.tf, cfg);
                }
                _item.btn.on(Laya.Event.MOUSE_DOWN, this, this.onItemClickHandler, [i]);
                this.cellWidth = cellWidth;
                this.btnlist.push(_item);
            }
            if (colIndex == 0 || this.maxColCount == 0) {
                this.listcontainer.height = cnt * cellHeight;
                this.listcontainer.x = this.startPosX;
                this.listcontainer.width = cellWidth;
            }
            else {
                this.listcontainer.width = cellWidth * colIndex;
                this.listcontainer.height = cellHeight * this.maxColCount;
                let offset = Math.ceil(this.dataList.length / this.maxColCount);
                this.listcontainer.x = this.startPosX - (offset - 1) * cellWidth;
            }
            if (this.dirBottom) {
                this.listcontainer.y = listarea.y + listarea.height;
            }
            else {
                this.listcontainer.y = listarea.y - this.listcontainer.height;
            }
            this.resetHit();
        }
        resetHit() {
            if (this.mCompose) {
                let p = this.listcontainer.parent;
                if (this.isOpen) {
                    let offset = Math.ceil(this.dataList.length / this.maxColCount);
                    if (offset == Infinity) {
                        offset = 1;
                    }
                    let ox = -(offset - 1) * this.cellWidth;
                    if (this.dirBottom) {
                        p.hitArea = new Laya.Rectangle(ox, 0, this.listcontainer.width, this.listcontainer.height + this.listarea.height);
                    }
                    else {
                        p.hitArea = new Laya.Rectangle(ox, -this.listcontainer.height, this.listcontainer.width, this.listcontainer.height + this.listarea.height);
                    }
                }
                else {
                    p.hitArea = new Laya.Rectangle(0, 0, this.listarea.width, this.listarea.height);
                }
                let rect = p.hitArea;
                this.hitSpr.hitArea = rect;
                this.hitSpr.on(Laya.Event.CLICK, this, this.onClickDo);
                this.listarea.addChildAt(this.hitSpr, 0);
            }
        }
        onClickDo() {
        }
        get isOpen() {
            return this.listcontainer.visible;
        }
        onAreaHander(e) {
            this.closeOtherList();
            this.onLater();
        }
        onLater() {
            this.listcontainer.visible = !this.listcontainer.visible;
            this.isOpen = this.listcontainer.visible;
            if (this.listcontainer.visible) {
                this.sanjiao.rotation = 180;
            }
            else {
                this.sanjiao.rotation = 0;
            }
            this.refreshSelect();
            this.resetHit();
        }
        refreshSelect() {
            for (let i = 0; i < this.btnlist.length; i++) {
                let skin = this.btnlist[i].btn;
                let btn = skin;
                if (i == this.curIndex) {
                    btn.skin = `remote/main/main/pinjixuankuang.png`;
                }
                else {
                    btn.skin = "";
                }
                if (this.itemHandler) {
                    this.itemHandler.runWith(this.btnlist[i]);
                }
            }
        }
        set isOpen(v) {
            if (v) {
                Laya.stage.on(Laya.Event.MOUSE_WHEEL, this, this._onStageMouseWheel);
            }
            else {
                Laya.stage.off(Laya.Event.MOUSE_WHEEL, this, this._onStageMouseWheel);
            }
        }
        _onStageMouseWheel(e) {
            this.close();
        }
        close() {
            if (!this.listcontainer) {
                return;
            }
            if (!this.listcontainer.visible) {
                return;
            }
            this.listcontainer.visible = false;
            this.sanjiao.rotation = 0;
            this.resetHit();
            Laya.stage.off(Laya.Event.MOUSE_WHEEL, this, this._onStageMouseWheel);
        }
        selectIndex(index) {
            let cfg;
            for (let i = 0; i < this.btnlist.length; i++) {
                let cell = this.btnlist[i];
                if (index == i) {
                    cfg = cell.dataSource;
                    break;
                }
            }
            if (cfg) {
                this.curIndex = index;
                this.updateCell(this.showTf, cfg);
            }
            if (this.selectHandler) {
                this.selectHandler.runWith(index);
            }
            this.close();
        }
        refresh() {
            this.selectIndex(this.curIndex);
        }
        updateCell(label, cfg) {
            label.text = cfg.txt;
            label.color = `#${cfg.color}`;
        }
        closeOtherList() {
            let l1 = SelectListCtl._allList;
            for (let i = 0; i < l1.length; i++) {
                let cell = l1[i];
                if (cell != this) {
                    cell.close();
                }
            }
        }
        onItemClickHandler(_index, e) {
            e.stopPropagation();
            this.closeOtherList();
            let b = true;
            if (this.checkHandler) {
                b = this.checkHandler.runWith(_index);
            }
            if (b) {
                this.selectIndex(_index);
            }
            if (this.clickCallBack) {
                this.clickCallBack.runWith(_index);
            }
        }
    }
    SelectListCtl._allList = [];

    exports.SelectListCtl = SelectListCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RedUpdateUtils {
        static refreshByConfig(ck, redType, defaultSel) {
            let id = redType;
            let o = RedUpdateModel.Ins.getByID(id);
            if (ck instanceof CheckBoxCtl || ck instanceof CheckBox2Ctl) {
                if (o) {
                    ck.selected = o.type == 1;
                }
                else {
                    ck.selected = defaultSel;
                }
            }
            else if (ck instanceof SelectListCtl) {
                if (o) {
                    ck.selectIndex(o.type);
                }
                else {
                    ck.selectIndex(defaultSel);
                }
            }
            else if (ck instanceof Laya.Handler) {
                if (o) {
                    ck.runWith(o.type);
                }
                else {
                    ck.runWith(defaultSel);
                }
            }
        }
        static push(l1, id, ctl) {
            let obj;
            if (ctl instanceof CheckBoxCtl || ctl instanceof CheckBox2Ctl) {
                obj = { id: id, val: ctl.selected ? 1 : 0 };
            }
            else if (ctl instanceof SelectListCtl) {
                obj = { id: id, val: ctl.curIndex };
            }
            else if (typeof ctl == "number") {
                obj = { id: id, val: ctl };
            }
            l1.push(obj);
        }
    }
    class RedUpdateModel extends Laya.EventDispatcher {
        constructor() {
            super(...arguments);
            this.redList = [];
            this.localEquipList = [];
        }
        clear() {
            this.localEquipList = [];
            this.redList = [];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new RedUpdateModel();
            }
            return this._ins;
        }
        delById(id) {
            let out = [];
            for (let i = 0; i < this.redList.length; i++) {
                let cell = this.redList[i];
                if (cell.id != id) {
                    out.push(cell);
                }
            }
            this.redList = out;
        }
        send(id, val) {
            let have = false;
            let o = this.redList.find(cell => cell.id == id && cell.type == val);
            this.delById(id);
            let _cell2 = new stRedDot();
            _cell2.id = id;
            _cell2.type = val;
            this.redList.push(_cell2);
            if (o) {
                have = true;
            }
            if (have) {
                return;
            }
            let _cell = new stRedDot();
            _cell.id = id;
            _cell.type = val;
            this.mod([_cell]);
        }
        mod(l) {
            let req = new RedDotUpdate_req();
            req.datalist = l;
            SocketMgr.Ins.SendMessageBin(req);
            this.event(RedUpdateModel.UPDATA);
        }
        saveArr(l) {
            for (let i = 0; i < l.length; i++) {
                let o = l[i];
                this.send(o.id, o.val);
            }
        }
        save(id, val = 1) {
            this.send(id, val);
        }
        del(id) {
            let o = this.redList.find(cell => cell.id == id);
            if (o) {
                let index = this.redList.indexOf(o);
                this.redList.splice(index, 1);
                this.protoDel([id]);
            }
        }
        protoDel(arr) {
            let req = new RedDotDel_req();
            req.datalist = arr;
            SocketMgr.Ins.SendMessageBin(req);
            this.event(RedUpdateModel.UPDATA);
        }
        delArr(arr) {
            let idsArr = [];
            for (let i = 0; i < arr.length; i++) {
                let cellId = arr[i];
                let o = this.redList.find(cell => cell.id == cellId);
                if (o) {
                    let index = this.redList.indexOf(o);
                    if (index != 0) {
                        this.redList.splice(index, 1);
                        idsArr.push(o.id);
                    }
                }
            }
            if (idsArr.length > 0) {
                this.protoDel(idsArr);
            }
        }
        getByID(id) {
            return this.redList.find(cell => cell.id == id);
        }
        getValByID(id) {
            let o = this.redList.find(cell => cell.id == id);
            if (o) {
                return o.type;
            }
            return 0;
        }
        delEquipRed(type, id) {
            let o = this.localEquipList.find(cell => cell.id == id && cell.type == type);
            if (o) {
                let index = this.localEquipList.indexOf(o);
                this.localEquipList.splice(index, 1);
                this.event(RedUpdateModel.UPDATA);
            }
        }
        saveEquipRed(type, id) {
            let arr = [EEquipType.Casque, EEquipType.Barde, EEquipType.Shield, EEquipType.ZuoQi, EEquipType.Wing, EEquipType.Weapon];
            if (arr.indexOf(type) == -1) {
                return;
            }
            let o = this.localEquipList.find(cell => cell.id == id && cell.type == type);
            if (!o) {
                let _cell = new stRedDot();
                _cell.id = id;
                _cell.type = type;
                this.localEquipList.push(_cell);
            }
        }
        getEquipRed(type, id) {
            let o = this.localEquipList.find(cell => cell.id == id && cell.type == type);
            return o != undefined;
        }
        getEquipType(type) {
            let o = this.localEquipList.find(cell => cell.type == type);
            return o != undefined;
        }
        addRedImg(con, offsetX = -20, offsetY = -10) {
            let red = new Laya.Image();
            red.skin = `remote/main/main/reddot.png`;
            red.x = con.width + offsetX;
            red.y = offsetY;
            con.addChild(red);
            return red;
        }
    }
    RedUpdateModel.UPDATA = "UPDATA";
    RedUpdateModel.NULL = 65535;

    exports.RedUpdateModel = RedUpdateModel;
    exports.RedUpdateUtils = RedUpdateUtils;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AudioHelper {
        static Click() {
            E.AudioMgr.PlayUI(Frame.UIDefine.anniu);
        }
    }

    exports.AudioHelper = AudioHelper;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class MainEvent {
	}
	MainEvent.ValChange = "ValChange";
	MainEvent.ValChangeCell = "ValChangeCell";
	MainEvent.EquipChange = "EquipChange";
	MainEvent.DelItems = "DelItem";
	MainEvent.SellSucceed = "SellSucceed";
	MainEvent.SellFinished = "SellFinished";
	MainEvent.AdventureBossUpdate = "AdventureBossUpdate";
	MainEvent.UpdateWingId = "UpdateWingId";
	MainEvent.Reward_revcUpdate = "Reward_revcUpdate";
	MainEvent.AddHero = "AddHero";
	MainEvent.MainViewLayerChange = "MainViewLayerChange";
	MainEvent.ButtonCtlClick = "ButtonCtlClick";
	MainEvent.UpdateAvatarNickName = "UpdateAvatarNickName";
	MainEvent.MainViewInit = "MainViewInit";
	MainEvent.Function_Open = "Function_Open";
	MainEvent.Open_Equip_switch_View = "Open_Equip_switch_View";
	MainEvent.CrossDayUpadte = "CrossDayUpadte";
	MainEvent.FuncSmallIconUpdate = "FuncSmallIconUpdate";
	MainEvent.BoxUsed = "BoxUse";
	MainEvent.GymCardUpdate = "GymCardUpdate";
	MainEvent.MonthUpdate = "MonthUpdate";
	MainEvent.AllLifeUpdate = "AllLifeUpdate";
	MainEvent.SignStatus = "SignStatus";
	MainEvent.MailRed = "MailRed";
	MainEvent.YXQRed = "YXQRed";
	MainEvent.MailListUpdate = "MailListUpdate";
	MainEvent.SWITCH_ANIM = "SWITCH_ANIM";
	MainEvent.UPDATE_NEW_PLAYER = "UPDATE_NEW_PLAYER";
	MainEvent.EquipSlot = "EquipSlot";
	MainEvent.ConquestUpdate = "ConquestUpdate";
	MainEvent.WindowSpread = "WindowSpread";
	MainEvent.BottomBoxVisible = "BottomBoxVisible";
	MainEvent.GrowPackUnlock = "GrowPackUnlock";
	MainEvent.Updata_TeQuanKa = "Updata_TeQuanKa";
	MainEvent.DailyShopWeekCard_Card = "DailyShopWeekCard_Card";
	MainEvent.Exp = "Exp";
	MainEvent.Level = "Level";
	MainEvent.EventPetFusionBaoDi = "EventPetFusionBaoDi";
	MainEvent.EventMainUpdateView = "EventMainUpdateView";
	MainEvent.WxOnShow = "WxOnShow";
	MainEvent.ShareReward = 'ShareReward';
	MainEvent.BoxExtraChange = 'BoxExtraChange';
	MainEvent.ClubReward = 'ClubReward';
	MainEvent.GameClubUpdate = 'GameClubUpdate';
	MainEvent.NewPlayerFeastRed_Update = "NewPlayerFeastRed_Update";
	MainEvent.SUB_DAY = "SUB_DAY";
	MainEvent.AuthBtnChange = 'AuthBtnChange';
	MainEvent.EquipViewClose = "EquipViewClose";
	MainEvent.ChestProxy = "ChestProxy";
	MainEvent.FightAvatarAnim = "FightAvatarAnim";

	exports.MainEvent = MainEvent;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class ButtonCtl {
        constructor(skin, onClick = null, scaleAnim = true) {
            this.oldx = 0;
            this.oldy = 0;
            this.refScale = 1.0;
            this.useSound = true;
            DebugUtil$1.draw(skin, "#ff00ff");
            this.refScale = skin.scaleX;
            this.clickHandler = onClick;
            this.scaleAnim = scaleAnim;
            this.skin = skin;
            this.skin.on(Laya.Event.MOUSE_DOWN, this, this.onDown);
            this.skin.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
            this.skin.on(Laya.Event.CLICK, this, this.onMouseClick);
            this.oldx = this.skin.x;
            this.oldy = this.skin.y;
        }
        set visible(v) {
            if (this.skin.visible != v) {
                this.skin.visible = v;
            }
        }
        get visible() {
            return this.skin.visible;
        }
        set bgSkin(url) {
            let img = this.skin;
            img.skin = url;
        }
        set gray(v) {
            this.skin.gray = v;
            for (let i = 0; i < this.skin.numChildren; i++) {
                this.skin.getChildAt(i).gray = v;
            }
        }
        static Create(skin, onClick, scaleAnim = true) {
            return new ButtonCtl(skin, onClick, scaleAnim);
        }
        static CreateBtn(skin, that, func, scaleAnim = true, args) {
            return this.Create(skin, new Laya.Handler(that, func, args), scaleAnim);
        }
        setDelayTime(s) {
            if (!this.timeCtl) {
                this.timeCtl = new TimeCheckCtl();
            }
            this.timeCtl.setTime(s * 1000, new Laya.Handler(this, this.onActionHandler));
        }
        onActionHandler(time) {
            if (time != 0) ;
            else {
                if (this.clickHandler) {
                    this.clickHandler.runWith(this.data);
                }
            }
        }
        onMouseClick() {
            this.doClickHandler();
        }
        set enable(v) {
            let img = this.skin;
            if (v) {
                img.skin = `remote/common/base/anniu_green.png`;
                this.skin.on(Laya.Event.MOUSE_DOWN, this, this.onDown);
                this.skin.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
                this.skin.on(Laya.Event.CLICK, this, this.onMouseClick);
            }
            else {
                img.skin = `remote/common/base/anniu_grey.png`;
                this.skin.off(Laya.Event.MOUSE_DOWN, this, this.onDown);
                this.skin.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
                this.skin.off(Laya.Event.CLICK, this, this.onMouseClick);
            }
            this.clearUp();
        }
        set mouseEnable(v) {
            if (v) {
                this.skin.on(Laya.Event.MOUSE_DOWN, this, this.onDown);
                this.skin.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
                this.skin.on(Laya.Event.CLICK, this, this.onMouseClick);
            }
            else {
                this.skin.off(Laya.Event.MOUSE_DOWN, this, this.onDown);
                this.skin.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
                this.skin.off(Laya.Event.CLICK, this, this.onMouseClick);
            }
            this.clearUp();
        }
        set grayMouseDisable(v) {
            this.mouseEnable = !v;
            this.gray = v;
        }
        onMouseUp() {
            this.clearUp();
        }
        playSound() {
            if (this.useSound) {
                AudioHelper.Click();
            }
        }
        onDown() {
            this.playSound();
            let _scale = 0.95 * this.refScale;
            if (!this.scaleAnim) {
                _scale = 1.0 * this.refScale;
            }
            else {
                this.skin.scaleX = this.skin.scaleY = _scale;
            }
            this.skin.x = this.oldx + (this.skin.width * (this.refScale - _scale)) / 2;
            this.skin.y = this.oldy + (this.skin.height * (this.refScale - _scale)) / 2;
            Laya.timer.once(500, this, this.clearUp);
        }
        doClickHandler() {
            if (this.timeCtl) {
                this.timeCtl.start();
            }
            else {
                if (this.clickHandler) {
                    this.clickHandler.runWith(this.data);
                }
                MainModel.Ins.event(MainEvent.ButtonCtlClick, this.skin);
            }
        }
        setpos(x, y) {
            this.oldx = x;
            this.oldy = y;
            this.clearUp();
        }
        setX(v) {
            this.oldx = v;
            this.clearUp();
        }
        setY(v) {
            this.oldy = v;
            this.clearUp();
        }
        clearUp() {
            if (this.skin && !this.skin.destroyed) {
                this.skin.scaleX = this.skin.scaleY = this.refScale;
                this.skin.x = this.oldx;
                this.skin.y = this.oldy;
            }
        }
        dispose() {
            if (this.timeCtl) {
                this.timeCtl.dispose();
            }
            this.skin.off(Laya.Event.MOUSE_DOWN, this, this.onDown);
            this.skin.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
            this.skin.off(Laya.Event.CLICK, this, this.onMouseClick);
            this.clearUp();
            this.skin = null;
            this.clickHandler = null;
        }
    }
    class ButtonAlphaCtl extends ButtonCtl {
        constructor(skin, onClick) {
            super(skin, onClick);
        }
        onDown() {
            this.playSound();
            this.skin.alpha = 0.5;
        }
        clearUp() {
            this.skin.alpha = 1.0;
        }
    }

    exports.ButtonAlphaCtl = ButtonAlphaCtl;
    exports.ButtonCtl = ButtonCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LangHelper {
        static GetView(viewType) {
            let viewLang = StringUtil.Empty;
            return viewLang;
        }
    }

    exports.LangHelper = LangHelper;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LayerHelper {
        static GetLayer(layerType) {
            if (layerType == ELayerType.sceneLayer)
                return LayerMgr.Ins.sceneLayer;
            else if (layerType == ELayerType.sceneMaskLayer)
                return LayerMgr.Ins.sceneMaskLayer;
            else if (layerType == ELayerType.battleLayer)
                return LayerMgr.Ins.battleLayer;
            else if (layerType == ELayerType.navLayer)
                return LayerMgr.Ins.navLayer;
            else if (layerType == ELayerType.flyLayer)
                return LayerMgr.Ins.flyLayer;
            else if (layerType == ELayerType.frameLayer)
                return LayerMgr.Ins.frameLayer;
            else if (layerType == ELayerType.subFrameLayer)
                return LayerMgr.Ins.subFrameLayer;
            else if (layerType == ELayerType.alertLayer)
                return LayerMgr.Ins.alertLayer;
            else if (layerType == ELayerType.screenEffectLayer)
                return LayerMgr.Ins.screenEffectLayer;
            else if (layerType == ELayerType.rollMessageLayer)
                return LayerMgr.Ins.rollMessageLayer;
            else if (layerType == ELayerType.guideLayer)
                return LayerMgr.Ins.guideLayer;
            else if (layerType == ELayerType.smallLoadingLayer)
                return LayerMgr.Ins.smallLoadingLayer;
            else if (layerType == ELayerType.noteLayer)
                return LayerMgr.Ins.noteLayer;
            else if (layerType == ELayerType.debugLayer)
                return LayerMgr.Ins.debugLayer;
            else {
                return LayerMgr.Ins.rootLayer;
            }
        }
    }

    exports.LayerHelper = LayerHelper;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EventItem {
        constructor(caller, listener, eventid, callback, eventtype, data) {
            this._caller = caller;
            this._listener = listener;
            this._eventId = eventid;
            this._callback = callback;
            this._eventType = eventtype;
            this._data = data;
        }
        get EventId() { return this._eventId; }
        get Callback() { return this._callback; }
        get EventType() { return this._eventType; }
        get Caller() { return this._caller; }
        get Listener() { return this._listener; }
    }

    exports.EventItem = EventItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EventType) {
        EventType[EventType["System"] = 0] = "System";
        EventType[EventType["Custom"] = 1] = "Custom";
    })(exports.EventType || (exports.EventType = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EventGroup {
        constructor() {
            this._items = new Array();
            this._items = new Array();
        }
        Add(caller, listener, eventid, callback, type, data) {
            let idx = this._items.findIndex((value, index, items) => {
                return value.Caller == caller &&
                    value.Listener == listener &&
                    value.EventId == eventid &&
                    value.EventType == type;
            });
            if (idx == -1) {
                let item = new EventItem(caller, listener, eventid, callback, type, data);
                this._items.push(item);
            }
            if (type == EventType.System) {
                listener.on(eventid, caller, callback, data);
            }
            else if (type == EventType.Custom) {
                E.EventMgr.on(eventid, caller, callback);
            }
            return this;
        }
        Remove(caller, listener, eventid, callback, type) {
            if (this._items == null || this._items.length == 0)
                return;
            let item = this._items.find((value, index, items) => {
                return value.Caller == caller &&
                    value.Listener == listener &&
                    value.EventId == eventid &&
                    value.EventType == type;
            });
            if (item) {
                ListUtil.Remove(this._items, item);
            }
            if (type == EventType.System) {
                listener.off(eventid, caller, callback);
            }
            else if (type == EventType.Custom) {
                E.EventMgr.off(eventid, caller, callback);
            }
        }
        Clear() {
            if (this._items == null || this._items.length == 0)
                return;
            let len = this._items.length;
            for (let i = 0; i < len; ++i) {
                let item = this._items[i];
                if (item.EventType == EventType.System) {
                    item.Listener.off(item.EventId, item.Caller, item.Callback);
                }
                else if (item.EventType == EventType.Custom) {
                    E.EventMgr.off(item.EventId, item.Caller, item.Callback);
                }
            }
            this._items = [];
        }
        addEventCus(eventid, callback, caller) {
            this.Add(caller, null, eventid, callback, EventType.Custom, null);
        }
        addEventSys(eventid, callback, caller, listener, data) {
            this.Add(caller, listener, eventid, callback, EventType.System, data);
        }
        static Create() {
            let group = new EventGroup();
            return group;
        }
    }

    exports.EventGroup = EventGroup;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Path {
        static GetUI(url) {
            return `views/${url}`;
        }
        static GetAtlas(url) {
            return `res/atlas/remote/${url}`;
        }
    }
    (function (ResPath) {
        class Avatar {
            static get baseImg() {
                return this.baseSkel.replace(".skel", ".png");
            }
            static get baseAtlas() {
                return this.baseSkel.replace(".skel", ".atlas");
            }
        }
        Avatar.baseSkel = `o/avatar/hero1/hero1.skel`;
        Avatar.equipAtlas = `o/equip/equip.atlas`;
        Avatar.equipSkel = `o/equip/equip.skel`;
        ResPath.Avatar = Avatar;
        class Atlas {
            static get Anim_Click() { return this._root + "res/atlas/remote/anims/com_click.atlas"; }
            static get Main_Loading() { return this._root + "res/atlas/remote/main/loading.atlas"; }
            static get Main_Login() { return this._root + "res/atlas/remote/main/login.atlas"; }
        }
        Atlas._root = InitConfig.getUI();
        ResPath.Atlas = Atlas;
        class View {
            static getRoot() {
                return this._root;
            }
            static get MsgBox() { return this._root + this._msgbox; }
            static get MidLabel() { return this._root + this._midlabel; }
            static get Loading() { return this._root + this._loading; }
            static get Debug() { return this._root + "common/ui_debug.json"; }
            static get Login() { return this._root + "login/ui_login.json"; }
        }
        View._root = InitConfig.getUI() + "views/";
        View._msgbox = "common/ui_msgbox.json";
        View._midlabel = "common/ui_midlabel.json";
        View._loading = "common/ui_loading.json";
        ResPath.View = View;
        class Ani {
            static get Click() { return this._root + "ani_click.ani"; }
        }
        Ani._root = "anims/";
        ResPath.Ani = Ani;
    })(exports.ResPath || (exports.ResPath = {}));

    exports.Path = Path;

    return exports;

}(window));
(function (exports) {
    'use strict';

    var Tween = Laya.Tween;
    var Handler = Laya.Handler;
    class TweenUtil {
        static ClearAll(tar) {
            Tween.clearAll(tar);
        }
        static Clear(tween) {
            Tween.clear(tween);
        }
        static Fade(sp, a, t, ease, complete) {
            return Tween.to(sp, { alpha: a }, t, this.getEase(ease), complete);
        }
        static Scale(sp, x, y, t, ease, complete) {
            return Tween.to(sp, { scaleX: x, scaleY: y }, t, this.getEase(ease), complete);
        }
        static ScaleX(sp, x, t, ease, complete) {
            return Tween.to(sp, { scaleX: x }, t, this.getEase(ease), Handler.create(this, () => {
                if (complete != null)
                    complete();
            }));
        }
        static ScaleY(sp, y, t, ease, complete) {
            return Tween.to(sp, { scaleY: y }, t, this.getEase(ease), Handler.create(this, () => {
                if (complete)
                    complete();
            }));
        }
        static ScaleWidth(sp, width, t, ease, complete) {
            return Tween.to(sp, { width: width }, t, this.getEase(ease), Handler.create(this, () => {
                if (complete)
                    complete();
            }));
        }
        static ScaleHeight(sp, height, t, ease, complete) {
            return Tween.to(sp, { height: height }, t, this.getEase(ease), Handler.create(this, () => {
                if (complete)
                    complete();
            }));
        }
        static Move(sp, x, y, t, ease, complete) {
            return Tween.to(sp, { x: x, y: y }, t, this.getEase(ease), Handler.create(this, () => {
                if (complete)
                    complete();
            }));
        }
        static MoveX(sp, x, t, ease, complete) {
            return Tween.to(sp, { x: x }, t, this.getEase(ease), complete);
        }
        static MoveY(sp, y, t, ease, complete) {
            return Tween.to(sp, { y: y }, t, this.getEase(ease), complete);
        }
        static RotateZ(sp, z, t, ease, complete) {
            return Tween.to(sp, { rotation: z }, t, this.getEase(ease), Handler.create(this, () => {
                if (complete)
                    complete();
            }));
        }
        static getEase(ease) {
            if (ease == TweenEase.linearNone)
                return Laya.Ease.linearNone;
            else if (ease == TweenEase.linearIn)
                return Laya.Ease.linearIn;
            else if (ease == TweenEase.linearInOut)
                return Laya.Ease.linearInOut;
            else if (ease == TweenEase.linearOut)
                return Laya.Ease.linearOut;
            else if (ease == TweenEase.bounceIn)
                return Laya.Ease.bounceIn;
            else if (ease == TweenEase.bounceInOut)
                return Laya.Ease.bounceInOut;
            else if (ease == TweenEase.bounceOut)
                return Laya.Ease.bounceOut;
            else if (ease == TweenEase.backIn)
                return Laya.Ease.backIn;
            else if (ease == TweenEase.backInOut)
                return Laya.Ease.backInOut;
            else if (ease == TweenEase.backOut)
                return Laya.Ease.backOut;
            else if (ease == TweenEase.elasticIn)
                return Laya.Ease.elasticIn;
            else if (ease == TweenEase.elasticInOut)
                return Laya.Ease.elasticInOut;
            else if (ease == TweenEase.elasticOut)
                return Laya.Ease.elasticOut;
            else if (ease == TweenEase.strongIn)
                return Laya.Ease.strongIn;
            else if (ease == TweenEase.strongInOut)
                return Laya.Ease.strongInOut;
            else if (ease == TweenEase.strongOut)
                return Laya.Ease.strongOut;
            else if (ease == TweenEase.sineInOut)
                return Laya.Ease.sineInOut;
            else if (ease == TweenEase.sineIn)
                return Laya.Ease.sineIn;
            else if (ease == TweenEase.sineOut)
                return Laya.Ease.sineOut;
            else if (ease == TweenEase.quintIn)
                return Laya.Ease.quintIn;
            else if (ease == TweenEase.quintInOut)
                return Laya.Ease.quintInOut;
            else if (ease == TweenEase.quintOut)
                return Laya.Ease.quintOut;
            else if (ease == TweenEase.quartIn)
                return Laya.Ease.quartIn;
            else if (ease == TweenEase.quartInOut)
                return Laya.Ease.quartInOut;
            else if (ease == TweenEase.quartOut)
                return Laya.Ease.quartOut;
            else if (ease == TweenEase.cubicIn)
                return Laya.Ease.cubicIn;
            else if (ease == TweenEase.cubicInOut)
                return Laya.Ease.cubicInOut;
            else if (ease == TweenEase.cubicOut)
                return Laya.Ease.cubicOut;
            else if (ease == TweenEase.quadIn)
                return Laya.Ease.quadIn;
            else if (ease == TweenEase.quadInOut)
                return Laya.Ease.quadInOut;
            else if (ease == TweenEase.quadOut)
                return Laya.Ease.quadOut;
            else if (ease == TweenEase.expoIn)
                return Laya.Ease.expoIn;
            else if (ease == TweenEase.expoInOut)
                return Laya.Ease.expoInOut;
            else if (ease == TweenEase.expoOut)
                return Laya.Ease.expoOut;
            else if (ease == TweenEase.circIn)
                return Laya.Ease.circIn;
            else if (ease == TweenEase.circInOut)
                return Laya.Ease.circInOut;
            else if (ease == TweenEase.circOut)
                return Laya.Ease.circOut;
            return null;
        }
    }

    exports.TweenUtil = TweenUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DragControl {
        constructor() {
        }
        reg(view) {
            if (view) {
                this.view = view;
                view.hitArea = new Laya.Rectangle(0, 0, view.width, view.height);
                view.on(Laya.Event.MOUSE_DOWN, this, this.onDownHandler);
                view.on(Laya.Event.MOUSE_UP, this, this.onUpHandler);
            }
        }
        unReg() {
            if (!this.view) {
                return;
            }
            this.view.off(Laya.Event.MOUSE_DOWN, this, this.onDownHandler);
            this.view.off(Laya.Event.MOUSE_UP, this, this.onUpHandler);
        }
        get getParent() {
            return this.selfP.parent;
        }
        onDownHandler(e) {
            let selfP = this.selfP;
            selfP.startDrag(new Laya.Rectangle(0, 0, this.getParent.width - selfP.width, this.getParent.height - selfP.height));
        }
        get selfP() {
            return this.view.parent;
        }
        onUpHandler(e) {
            this.selfP.stopDrag();
        }
    }

    exports.DragControl = DragControl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ViewBase {
        constructor(viewType, layerType = ELayerType.frameLayer) {
            this.uiBgCloseClick = false;
            this.btnList = [];
            this.isClearTimer = true;
            this.autoFree = false;
            this.checkGuide = true;
            this.mMask = false;
            this.mMainSnapshot = false;
            this.mMaskClick = true;
            this.mClickAnyAreaClose = false;
            this.ViewType = EViewType.None;
            this.ViewPath = "";
            this.LanguageType = "";
            this.PageType = EPageType.CloseBigToSmall;
            this.UI = null;
            this.hasInit = false;
            this.IsListening = false;
            this.Data = null;
            this.useTime = 200;
            this.maskAlpha = 0.8;
            this.ViewType = viewType;
            this.LanguageType = LangHelper.GetView(viewType);
            this.LayerType = layerType;
            this.onAddLoadRes();
        }
        UpdateView() { }
        ;
        onEnter() { }
        onAddEventListener() { }
        onChangeLanguage() { }
        get ResGroup() { if (!this._resGroup)
            this._resGroup = new ResItemGroup(); return this._resGroup; }
        set enableDrag(v) {
            if (v) {
                if (!this._dragControl) {
                    this._dragControl = new DragControl();
                }
                this._dragControl.reg(this.UI['dragarea']);
            }
            else {
                if (this._dragControl) {
                    this._dragControl.unReg();
                }
            }
        }
        setMouseBg(view) {
            if (view) {
                DebugUtil.draw(view);
                view.once(Laya.Event.CLICK, this, this.onBgClick);
            }
        }
        onBgClick() {
        }
        addBlackBg(alpha = 0.75) {
            let bg1 = new Laya.Sprite();
            bg1.graphics.drawRect(0, 0, this.UI.width, this.UI.height, "#000000");
            this.UI.addChildAt(bg1, 0);
            bg1.alpha = 0.75;
        }
        bindClose(closeImg) {
            this.closeCtl = ButtonCtl.Create(closeImg, new Laya.Handler(this, this.Close));
            return this.closeCtl;
        }
        SetCenter() {
            if (this.UI && !this.UI.destroyed) {
                this.UI.anchorX = this.UI.anchorY = 0.5;
                this.UI.x = this.ViewParent.width >> 1;
                this.UI.y = this.ViewParent.height >> 1;
            }
        }
        addRes(url, type) {
            if (!this._resGroup)
                this._resGroup = new ResItemGroup();
            this._resGroup.Add(url, type);
        }
        addImg(url) {
            if (!this._resGroup)
                this._resGroup = new ResItemGroup();
            this._resGroup.Add(url, Laya.Loader.IMAGE);
        }
        addUI(url) {
            url = Path.GetUI(url);
            this.addRes(url, Laya.Loader.JSON);
        }
        addAtlas(url) {
            this.addRes("res/atlas/remote/" + url, Laya.Loader.ATLAS);
        }
        get uiPath() {
            return ResPath.View.getRoot();
        }
        clearRes() {
            if (this._resGroup == null)
                return;
            this._resGroup.Clear();
            this._resGroup = null;
        }
        addEventCus(eventid, callback, caller) {
            this.addEvent(eventid, callback, caller, null, EventType.Custom);
        }
        addEventSys(eventid, callback, caller, listener, data) {
            this.addEvent(eventid, callback, caller, listener, EventType.System, data);
        }
        addEvent(eventid, callback, caller, listener, type, data) {
            if (this._eventGroup == null)
                return;
            this._eventGroup.Add(caller, listener, eventid, callback, type, data);
        }
        addEventListener() {
            if (this.IsListening)
                return;
            this.IsListening = true;
            if (this._eventGroup == null)
                this._eventGroup = new EventGroup();
            this.addEventCus(EventID.OnChangeLanguage, this.changeLanguage, this);
            this.onAddEventListener();
        }
        clearEventListenr() {
            if (!this.IsListening)
                return;
            this.IsListening = false;
            if (this._eventGroup == null)
                return;
            this._eventGroup.Clear();
            this._eventGroup = null;
        }
        Enter(callback, data) {
            this.Data = data;
            this.Callback = callback;
            this.onEnter();
            if (!this.hasInit) {
                this.ViewParent = LayerHelper.GetLayer(this.LayerType);
                this.firstInit();
            }
            Updater.Ins.AddUpdate(this, this.onUpdate);
            Updater.Ins.AddFixedUpdate(this, this.onFixedUpdate);
            Updater.Ins.AddLateUpdate(this, this.onLateUpdate);
        }
        finish() {
            Updater.Ins.RemoveUpdate(this);
            Updater.Ins.RemoveFixedUpdate(this);
            Updater.Ins.RemoveLateUpdate(this);
            this.enableDrag = false;
            this.onExit();
            if (this.mMainSnapshot) {
                MainModel.Ins.mainMask = false;
            }
            if (this._maskLayer) {
                this._maskLayer.removeSelf();
                this._maskLayer.offAll(Laya.Event.CLICK);
            }
            if (this._bgcloseMask) {
                this._bgcloseMask.removeSelf();
                this._bgcloseMask.offAll(Laya.Event.CLICK);
            }
            if (this.checkGuide) {
                E.yinDaoMgr.removeYD();
            }
            if (this.isClearTimer) {
                Laya.timer.clearAll(this);
            }
        }
        Exit() {
            this.clear();
        }
        onUpdate() { }
        onLateUpdate() { }
        onFixedUpdate() { }
        HasInit() { return this.hasInit; }
        ;
        IsShow() {
            return this.UI && this.UI.visible && this.ViewParent != null;
        }
        firstInit() {
            if (this.hasInit)
                return;
            this.hasInit = true;
            this.start();
        }
        start() {
            this.btnList = [];
            this.onFirstInit();
            DebugUtil.draw(this.UI, "#ff00ff");
            DebugUtil.drawTF(this.UI, "" + this.ViewType + "", "#ffff00");
            this.init();
        }
        onCloseHandler() {
            this.Close();
        }
        Close() {
            E.ViewMgr.Close(this.ViewType);
        }
        onMaskClick(e) {
            if (!this.mMaskClick) {
                return;
            }
            this.onMaskClose();
            this.onCloseHandler();
        }
        onMaskClose() {
        }
        initMask() {
            if (!this._maskLayer) {
                this._maskLayer = new Laya.Image();
            }
            this.ViewParent.addChild(this._maskLayer);
            this._maskLayer.graphics.clear();
            this._maskLayer.graphics.drawRect(0, 0, this.ViewParent.width, this.ViewParent.height, "#000000");
            this._maskLayer.size(this.ViewParent.width, this.ViewParent.height);
            this._maskLayer.pos(0, 0);
            this._maskLayer.hitArea = new Laya.Rectangle(0, 0, this.ViewParent.width, this.ViewParent.height);
            if (initConfig.maskColor) {
                this.maskAlpha = 0.1;
            }
            this._maskLayer.alpha = this.maskAlpha;
            this._maskLayer.offAll(Laya.Event.CLICK);
            this._maskLayer.on(Laya.Event.CLICK, this, this.onMaskClick);
        }
        addUiBgClose() {
            if (this.uiBgCloseClick) {
                if (!this._bgcloseMask) {
                    this._bgcloseMask = new Laya.Sprite();
                    this._bgcloseMask.alpha = 0.35;
                }
                this._bgcloseMask.on(Laya.Event.CLICK, this, this.Close);
                this.UI.addChildAt(this._bgcloseMask, 0);
                this._bgcloseMask.hitArea = new Laya.Rectangle(0, 0, this.UI.width, this.UI.height);
                if (debug) {
                    this._bgcloseMask.graphics.clear();
                    this._bgcloseMask.graphics.drawRect(0, 0, this.UI.width, this.UI.height, "#0000ff");
                }
            }
        }
        init() {
            if (this.mMask) {
                this.initMask();
            }
            this.addUiBgClose();
            if (this.mClickAnyAreaClose) {
                this.UI.on(Laya.Event.CLICK, this, this.onCloseHandler);
            }
            this.onInit();
            Laya.timer.once(this.PageType == EPageType.None ? 0 : this.useTime, this, this.onLaterInit);
        }
        onLaterInit() {
            this.ViewParent.addChild(this.UI);
            this.UI.visible = true;
            this.changeLanguage();
            this.openEffect();
            this.addEventListener();
            this.updateLayer();
            if (this.mMainSnapshot) {
                MainModel.Ins.mainMask = true;
            }
            this.SetLayout();
            if (this.PageType == EPageType.CloseBigToSmall) ;
            else {
                Laya.timer.callLater(this, this.onShow);
            }
            if (this.Callback)
                this.Callback.Invoke();
        }
        openEffect() {
            if (this.PageType == EPageType.CloseBigToSmall) {
                this.UI.scale(0.8, 0.8);
                TweenUtil.Scale(this.UI, 1, 1, this.useTime, TweenEase.backOut, Laya.Handler.create(this, this.onShow));
            }
            else {
                this.UI.scaleX = this.UI.scaleY = 1;
            }
        }
        onShowYD() {
            if (this.checkGuide) {
                E.yinDaoMgr.removeTS();
                E.yinDaoMgr.removeYD();
                E.yinDaoMgr.showYD(this.ViewType);
            }
        }
        onShow() {
            this.onShowYD();
        }
        updateLayer() {
            let v = E.ViewMgr.HasFrameOpenExcept([EViewType.Main]);
            MainModel.Ins.event(MainEvent.MainViewLayerChange, [this.ViewType, v]);
        }
        clear() {
            this.finish();
            this.clearEventListenr();
            this.clearRes();
            this.hasInit = false;
            if (this.UI) {
                Laya.timer.clear(this, this.onLaterInit);
                TweenUtil.ClearAll(this.UI);
                this.UI.removeSelf();
                this.UI.visible = false;
                if (this.autoFree) {
                    this.closeCtl && this.closeCtl.dispose();
                    while (this.btnList.length) {
                        let btn = this.btnList.pop();
                        btn.dispose();
                    }
                    this.UI.destroy(true);
                    this.UI = null;
                }
            }
            this.updateLayer();
        }
        onInitData() { }
        onInitUI() { }
        onInitEvent() { }
        SetLayout() {
            this.SetCenter();
        }
        changeLanguage() {
            if (!StringUtil.IsNullOrEmpty(this.LanguageType)) ;
            this.onChangeLanguage();
        }
    }

    exports.ViewBase = ViewBase;

    return exports;

}(window));
(function (exports) {
    'use strict';

    var View = Laya.View;
    var Dialog = Laya.Dialog;
    var REG = Laya.ClassUtils.regClass;
    (function (ui) {
        var views;
        (function (views) {
            var alliance;
            (function (alliance) {
                class ui_allianceApplyViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_allianceApplyView");
                    }
                }
                alliance.ui_allianceApplyViewUI = ui_allianceApplyViewUI;
                REG("ui.views.alliance.ui_allianceApplyViewUI", ui_allianceApplyViewUI);
                class ui_allianceBossViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_allianceBossView");
                    }
                }
                alliance.ui_allianceBossViewUI = ui_allianceBossViewUI;
                REG("ui.views.alliance.ui_allianceBossViewUI", ui_allianceBossViewUI);
                class ui_allianceCreateViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_allianceCreateView");
                    }
                }
                alliance.ui_allianceCreateViewUI = ui_allianceCreateViewUI;
                REG("ui.views.alliance.ui_allianceCreateViewUI", ui_allianceCreateViewUI);
                class ui_allianceEditViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_allianceEditView");
                    }
                }
                alliance.ui_allianceEditViewUI = ui_allianceEditViewUI;
                REG("ui.views.alliance.ui_allianceEditViewUI", ui_allianceEditViewUI);
                class ui_allianceListViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_allianceListView");
                    }
                }
                alliance.ui_allianceListViewUI = ui_allianceListViewUI;
                REG("ui.views.alliance.ui_allianceListViewUI", ui_allianceListViewUI);
                class ui_allianceMainViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_allianceMainView");
                    }
                }
                alliance.ui_allianceMainViewUI = ui_allianceMainViewUI;
                REG("ui.views.alliance.ui_allianceMainViewUI", ui_allianceMainViewUI);
                class ui_allianceNoticeViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_allianceNoticeView");
                    }
                }
                alliance.ui_allianceNoticeViewUI = ui_allianceNoticeViewUI;
                REG("ui.views.alliance.ui_allianceNoticeViewUI", ui_allianceNoticeViewUI);
                class ui_alliance_apply_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_alliance_apply_item");
                    }
                }
                alliance.ui_alliance_apply_itemUI = ui_alliance_apply_itemUI;
                REG("ui.views.alliance.ui_alliance_apply_itemUI", ui_alliance_apply_itemUI);
                class ui_alliance_boss_avatarUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_alliance_boss_avatar");
                    }
                }
                alliance.ui_alliance_boss_avatarUI = ui_alliance_boss_avatarUI;
                REG("ui.views.alliance.ui_alliance_boss_avatarUI", ui_alliance_boss_avatarUI);
                class ui_alliance_boss_cirleUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_alliance_boss_cirle");
                    }
                }
                alliance.ui_alliance_boss_cirleUI = ui_alliance_boss_cirleUI;
                REG("ui.views.alliance.ui_alliance_boss_cirleUI", ui_alliance_boss_cirleUI);
                class ui_alliance_boss_tujianUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_alliance_boss_tujian");
                    }
                }
                alliance.ui_alliance_boss_tujianUI = ui_alliance_boss_tujianUI;
                REG("ui.views.alliance.ui_alliance_boss_tujianUI", ui_alliance_boss_tujianUI);
                class ui_alliance_list_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_alliance_list_item");
                    }
                }
                alliance.ui_alliance_list_itemUI = ui_alliance_list_itemUI;
                REG("ui.views.alliance.ui_alliance_list_itemUI", ui_alliance_list_itemUI);
                class ui_alliance_list_item1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_alliance_list_item1");
                    }
                }
                alliance.ui_alliance_list_item1UI = ui_alliance_list_item1UI;
                REG("ui.views.alliance.ui_alliance_list_item1UI", ui_alliance_list_item1UI);
                class ui_alliance_mall_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_alliance_mall_item");
                    }
                }
                alliance.ui_alliance_mall_itemUI = ui_alliance_mall_itemUI;
                REG("ui.views.alliance.ui_alliance_mall_itemUI", ui_alliance_mall_itemUI);
                class ui_alliance_member_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_alliance_member_item");
                    }
                }
                alliance.ui_alliance_member_itemUI = ui_alliance_member_itemUI;
                REG("ui.views.alliance.ui_alliance_member_itemUI", ui_alliance_member_itemUI);
                class ui_alliance_menuUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_alliance_menu");
                    }
                }
                alliance.ui_alliance_menuUI = ui_alliance_menuUI;
                REG("ui.views.alliance.ui_alliance_menuUI", ui_alliance_menuUI);
                class ui_alliance_menu_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_alliance_menu_item");
                    }
                }
                alliance.ui_alliance_menu_itemUI = ui_alliance_menu_itemUI;
                REG("ui.views.alliance.ui_alliance_menu_itemUI", ui_alliance_menu_itemUI);
                class ui_alliance_rankUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_alliance_rank");
                    }
                }
                alliance.ui_alliance_rankUI = ui_alliance_rankUI;
                REG("ui.views.alliance.ui_alliance_rankUI", ui_alliance_rankUI);
                class ui_alliance_rank_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/alliance/ui_alliance_rank_item");
                    }
                }
                alliance.ui_alliance_rank_itemUI = ui_alliance_rank_itemUI;
                REG("ui.views.alliance.ui_alliance_rank_itemUI", ui_alliance_rank_itemUI);
            })(alliance = views.alliance || (views.alliance = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var allianceFight;
            (function (allianceFight) {
                class ui_allianceFight56ViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFight56View");
                    }
                }
                allianceFight.ui_allianceFight56ViewUI = ui_allianceFight56ViewUI;
                REG("ui.views.allianceFight.ui_allianceFight56ViewUI", ui_allianceFight56ViewUI);
                class ui_allianceFightAwardItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightAwardItem");
                    }
                }
                allianceFight.ui_allianceFightAwardItemUI = ui_allianceFightAwardItemUI;
                REG("ui.views.allianceFight.ui_allianceFightAwardItemUI", ui_allianceFightAwardItemUI);
                class ui_allianceFightAwardJSViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightAwardJSView");
                    }
                }
                allianceFight.ui_allianceFightAwardJSViewUI = ui_allianceFightAwardJSViewUI;
                REG("ui.views.allianceFight.ui_allianceFightAwardJSViewUI", ui_allianceFightAwardJSViewUI);
                class ui_allianceFightAwardViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightAwardView");
                    }
                }
                allianceFight.ui_allianceFightAwardViewUI = ui_allianceFightAwardViewUI;
                REG("ui.views.allianceFight.ui_allianceFightAwardViewUI", ui_allianceFightAwardViewUI);
                class ui_allianceFightAwardView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightAwardView1");
                    }
                }
                allianceFight.ui_allianceFightAwardView1UI = ui_allianceFightAwardView1UI;
                REG("ui.views.allianceFight.ui_allianceFightAwardView1UI", ui_allianceFightAwardView1UI);
                class ui_allianceFightAwardView2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightAwardView2");
                    }
                }
                allianceFight.ui_allianceFightAwardView2UI = ui_allianceFightAwardView2UI;
                REG("ui.views.allianceFight.ui_allianceFightAwardView2UI", ui_allianceFightAwardView2UI);
                class ui_allianceFightBossAvatarUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightBossAvatar");
                    }
                }
                allianceFight.ui_allianceFightBossAvatarUI = ui_allianceFightBossAvatarUI;
                REG("ui.views.allianceFight.ui_allianceFightBossAvatarUI", ui_allianceFightBossAvatarUI);
                class ui_allianceFightBossDetailViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightBossDetailView");
                    }
                }
                allianceFight.ui_allianceFightBossDetailViewUI = ui_allianceFightBossDetailViewUI;
                REG("ui.views.allianceFight.ui_allianceFightBossDetailViewUI", ui_allianceFightBossDetailViewUI);
                class ui_allianceFightEnrollViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightEnrollView");
                    }
                }
                allianceFight.ui_allianceFightEnrollViewUI = ui_allianceFightEnrollViewUI;
                REG("ui.views.allianceFight.ui_allianceFightEnrollViewUI", ui_allianceFightEnrollViewUI);
                class ui_allianceFightGCTZItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightGCTZItem");
                    }
                }
                allianceFight.ui_allianceFightGCTZItemUI = ui_allianceFightGCTZItemUI;
                REG("ui.views.allianceFight.ui_allianceFightGCTZItemUI", ui_allianceFightGCTZItemUI);
                class ui_allianceFightGCTZViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightGCTZView");
                    }
                }
                allianceFight.ui_allianceFightGCTZViewUI = ui_allianceFightGCTZViewUI;
                REG("ui.views.allianceFight.ui_allianceFightGCTZViewUI", ui_allianceFightGCTZViewUI);
                class ui_allianceFightGCTZView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightGCTZView1");
                    }
                }
                allianceFight.ui_allianceFightGCTZView1UI = ui_allianceFightGCTZView1UI;
                REG("ui.views.allianceFight.ui_allianceFightGCTZView1UI", ui_allianceFightGCTZView1UI);
                class ui_allianceFightGCViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightGCView");
                    }
                }
                allianceFight.ui_allianceFightGCViewUI = ui_allianceFightGCViewUI;
                REG("ui.views.allianceFight.ui_allianceFightGCViewUI", ui_allianceFightGCViewUI);
                class ui_allianceFightHarmDetailViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightHarmDetailView");
                    }
                }
                allianceFight.ui_allianceFightHarmDetailViewUI = ui_allianceFightHarmDetailViewUI;
                REG("ui.views.allianceFight.ui_allianceFightHarmDetailViewUI", ui_allianceFightHarmDetailViewUI);
                class ui_allianceFightMemberItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightMemberItem");
                    }
                }
                allianceFight.ui_allianceFightMemberItemUI = ui_allianceFightMemberItemUI;
                REG("ui.views.allianceFight.ui_allianceFightMemberItemUI", ui_allianceFightMemberItemUI);
                class ui_allianceFightMemberViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightMemberView");
                    }
                }
                allianceFight.ui_allianceFightMemberViewUI = ui_allianceFightMemberViewUI;
                REG("ui.views.allianceFight.ui_allianceFightMemberViewUI", ui_allianceFightMemberViewUI);
                class ui_allianceFightRankItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightRankItem");
                    }
                }
                allianceFight.ui_allianceFightRankItemUI = ui_allianceFightRankItemUI;
                REG("ui.views.allianceFight.ui_allianceFightRankItemUI", ui_allianceFightRankItemUI);
                class ui_allianceFightRankItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightRankItem1");
                    }
                }
                allianceFight.ui_allianceFightRankItem1UI = ui_allianceFightRankItem1UI;
                REG("ui.views.allianceFight.ui_allianceFightRankItem1UI", ui_allianceFightRankItem1UI);
                class ui_allianceFightRankItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightRankItem2");
                    }
                }
                allianceFight.ui_allianceFightRankItem2UI = ui_allianceFightRankItem2UI;
                REG("ui.views.allianceFight.ui_allianceFightRankItem2UI", ui_allianceFightRankItem2UI);
                class ui_allianceFightRankItem3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightRankItem3");
                    }
                }
                allianceFight.ui_allianceFightRankItem3UI = ui_allianceFightRankItem3UI;
                REG("ui.views.allianceFight.ui_allianceFightRankItem3UI", ui_allianceFightRankItem3UI);
                class ui_allianceFightRankViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightRankView");
                    }
                }
                allianceFight.ui_allianceFightRankViewUI = ui_allianceFightRankViewUI;
                REG("ui.views.allianceFight.ui_allianceFightRankViewUI", ui_allianceFightRankViewUI);
                class ui_allianceFightRewardItemViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightRewardItemView");
                    }
                }
                allianceFight.ui_allianceFightRewardItemViewUI = ui_allianceFightRewardItemViewUI;
                REG("ui.views.allianceFight.ui_allianceFightRewardItemViewUI", ui_allianceFightRewardItemViewUI);
                class ui_allianceFightRewardViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightRewardView");
                    }
                }
                allianceFight.ui_allianceFightRewardViewUI = ui_allianceFightRewardViewUI;
                REG("ui.views.allianceFight.ui_allianceFightRewardViewUI", ui_allianceFightRewardViewUI);
                class ui_allianceFightRZItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightRZItem");
                    }
                }
                allianceFight.ui_allianceFightRZItemUI = ui_allianceFightRZItemUI;
                REG("ui.views.allianceFight.ui_allianceFightRZItemUI", ui_allianceFightRZItemUI);
                class ui_allianceFightRZViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/allianceFight/ui_allianceFightRZView");
                    }
                }
                allianceFight.ui_allianceFightRZViewUI = ui_allianceFightRZViewUI;
                REG("ui.views.allianceFight.ui_allianceFightRZViewUI", ui_allianceFightRZViewUI);
            })(allianceFight = views.allianceFight || (views.allianceFight = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var baoshi;
            (function (baoshi) {
                class ui_baoshiAttrItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiAttrItem");
                    }
                }
                baoshi.ui_baoshiAttrItemUI = ui_baoshiAttrItemUI;
                REG("ui.views.baoshi.ui_baoshiAttrItemUI", ui_baoshiAttrItemUI);
                class ui_baoshiAttrViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiAttrView");
                    }
                }
                baoshi.ui_baoshiAttrViewUI = ui_baoshiAttrViewUI;
                REG("ui.views.baoshi.ui_baoshiAttrViewUI", ui_baoshiAttrViewUI);
                class ui_baoshiAutoHCTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiAutoHCTip");
                    }
                }
                baoshi.ui_baoshiAutoHCTipUI = ui_baoshiAutoHCTipUI;
                REG("ui.views.baoshi.ui_baoshiAutoHCTipUI", ui_baoshiAutoHCTipUI);
                class ui_baoshiDHItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiDHItem");
                    }
                }
                baoshi.ui_baoshiDHItemUI = ui_baoshiDHItemUI;
                REG("ui.views.baoshi.ui_baoshiDHItemUI", ui_baoshiDHItemUI);
                class ui_baoshiDHViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiDHView");
                    }
                }
                baoshi.ui_baoshiDHViewUI = ui_baoshiDHViewUI;
                REG("ui.views.baoshi.ui_baoshiDHViewUI", ui_baoshiDHViewUI);
                class ui_baoshiGMViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiGMView");
                    }
                }
                baoshi.ui_baoshiGMViewUI = ui_baoshiGMViewUI;
                REG("ui.views.baoshi.ui_baoshiGMViewUI", ui_baoshiGMViewUI);
                class ui_baoshiGongMingItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiGongMingItem");
                    }
                }
                baoshi.ui_baoshiGongMingItemUI = ui_baoshiGongMingItemUI;
                REG("ui.views.baoshi.ui_baoshiGongMingItemUI", ui_baoshiGongMingItemUI);
                class ui_baoshiGongMingViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiGongMingView");
                    }
                }
                baoshi.ui_baoshiGongMingViewUI = ui_baoshiGongMingViewUI;
                REG("ui.views.baoshi.ui_baoshiGongMingViewUI", ui_baoshiGongMingViewUI);
                class ui_baoshiHCViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiHCView");
                    }
                }
                baoshi.ui_baoshiHCViewUI = ui_baoshiHCViewUI;
                REG("ui.views.baoshi.ui_baoshiHCViewUI", ui_baoshiHCViewUI);
                class ui_baoshiItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiItem");
                    }
                }
                baoshi.ui_baoshiItemUI = ui_baoshiItemUI;
                REG("ui.views.baoshi.ui_baoshiItemUI", ui_baoshiItemUI);
                class ui_baoshiSelectItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiSelectItem");
                    }
                }
                baoshi.ui_baoshiSelectItemUI = ui_baoshiSelectItemUI;
                REG("ui.views.baoshi.ui_baoshiSelectItemUI", ui_baoshiSelectItemUI);
                class ui_baoshiSelectViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiSelectView");
                    }
                }
                baoshi.ui_baoshiSelectViewUI = ui_baoshiSelectViewUI;
                REG("ui.views.baoshi.ui_baoshiSelectViewUI", ui_baoshiSelectViewUI);
                class ui_baoshiTJItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiTJItem");
                    }
                }
                baoshi.ui_baoshiTJItemUI = ui_baoshiTJItemUI;
                REG("ui.views.baoshi.ui_baoshiTJItemUI", ui_baoshiTJItemUI);
                class ui_baoshiTJViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiTJView");
                    }
                }
                baoshi.ui_baoshiTJViewUI = ui_baoshiTJViewUI;
                REG("ui.views.baoshi.ui_baoshiTJViewUI", ui_baoshiTJViewUI);
                class ui_baoshiViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiView");
                    }
                }
                baoshi.ui_baoshiViewUI = ui_baoshiViewUI;
                REG("ui.views.baoshi.ui_baoshiViewUI", ui_baoshiViewUI);
                class ui_baoshiViewItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiViewItem");
                    }
                }
                baoshi.ui_baoshiViewItemUI = ui_baoshiViewItemUI;
                REG("ui.views.baoshi.ui_baoshiViewItemUI", ui_baoshiViewItemUI);
                class ui_baoshiXQViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_baoshiXQView");
                    }
                }
                baoshi.ui_baoshiXQViewUI = ui_baoshiXQViewUI;
                REG("ui.views.baoshi.ui_baoshiXQViewUI", ui_baoshiXQViewUI);
                class ui_fazhengDHItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_fazhengDHItem");
                    }
                }
                baoshi.ui_fazhengDHItemUI = ui_fazhengDHItemUI;
                REG("ui.views.baoshi.ui_fazhengDHItemUI", ui_fazhengDHItemUI);
                class ui_fazhengDHItemLabelUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_fazhengDHItemLabel");
                    }
                }
                baoshi.ui_fazhengDHItemLabelUI = ui_fazhengDHItemLabelUI;
                REG("ui.views.baoshi.ui_fazhengDHItemLabelUI", ui_fazhengDHItemLabelUI);
                class ui_fazhengDHViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_fazhengDHView");
                    }
                }
                baoshi.ui_fazhengDHViewUI = ui_fazhengDHViewUI;
                REG("ui.views.baoshi.ui_fazhengDHViewUI", ui_fazhengDHViewUI);
                class ui_fazhengGHItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_fazhengGHItem");
                    }
                }
                baoshi.ui_fazhengGHItemUI = ui_fazhengGHItemUI;
                REG("ui.views.baoshi.ui_fazhengGHItemUI", ui_fazhengGHItemUI);
                class ui_fazhengGHViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_fazhengGHView");
                    }
                }
                baoshi.ui_fazhengGHViewUI = ui_fazhengGHViewUI;
                REG("ui.views.baoshi.ui_fazhengGHViewUI", ui_fazhengGHViewUI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/baoshi/ui_tab");
                    }
                }
                baoshi.ui_tabUI = ui_tabUI;
                REG("ui.views.baoshi.ui_tabUI", ui_tabUI);
            })(baoshi = views.baoshi || (views.baoshi = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var chat;
            (function (chat) {
                class ui_chatMyItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/chat/ui_chatMyItem");
                    }
                }
                chat.ui_chatMyItemUI = ui_chatMyItemUI;
                REG("ui.views.chat.ui_chatMyItemUI", ui_chatMyItemUI);
                class ui_chatOtherItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/chat/ui_chatOtherItem");
                    }
                }
                chat.ui_chatOtherItemUI = ui_chatOtherItemUI;
                REG("ui.views.chat.ui_chatOtherItemUI", ui_chatOtherItemUI);
                class ui_chatTimeItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/chat/ui_chatTimeItem");
                    }
                }
                chat.ui_chatTimeItemUI = ui_chatTimeItemUI;
                REG("ui.views.chat.ui_chatTimeItemUI", ui_chatTimeItemUI);
                class ui_chatViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/chat/ui_chatView");
                    }
                }
                chat.ui_chatViewUI = ui_chatViewUI;
                REG("ui.views.chat.ui_chatViewUI", ui_chatViewUI);
            })(chat = views.chat || (views.chat = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var chenghao;
            (function (chenghao) {
                class ui_chenghaoUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/chenghao/ui_chenghao");
                    }
                }
                chenghao.ui_chenghaoUI = ui_chenghaoUI;
                REG("ui.views.chenghao.ui_chenghaoUI", ui_chenghaoUI);
                class ui_chenghaoAttrItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/chenghao/ui_chenghaoAttrItem");
                    }
                }
                chenghao.ui_chenghaoAttrItemUI = ui_chenghaoAttrItemUI;
                REG("ui.views.chenghao.ui_chenghaoAttrItemUI", ui_chenghaoAttrItemUI);
                class ui_chenghaoItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/chenghao/ui_chenghaoItem");
                    }
                }
                chenghao.ui_chenghaoItemUI = ui_chenghaoItemUI;
                REG("ui.views.chenghao.ui_chenghaoItemUI", ui_chenghaoItemUI);
                class ui_chenghaoItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/chenghao/ui_chenghaoItem1");
                    }
                }
                chenghao.ui_chenghaoItem1UI = ui_chenghaoItem1UI;
                REG("ui.views.chenghao.ui_chenghaoItem1UI", ui_chenghaoItem1UI);
                class ui_chenghaoItem2UI extends Dialog {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/chenghao/ui_chenghaoItem2");
                    }
                }
                chenghao.ui_chenghaoItem2UI = ui_chenghaoItem2UI;
                REG("ui.views.chenghao.ui_chenghaoItem2UI", ui_chenghaoItem2UI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/chenghao/ui_tab");
                    }
                }
                chenghao.ui_tabUI = ui_tabUI;
                REG("ui.views.chenghao.ui_tabUI", ui_tabUI);
            })(chenghao = views.chenghao || (views.chenghao = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var combopack;
            (function (combopack) {
                class ui_combopack_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/combopack/ui_combopack_main");
                    }
                }
                combopack.ui_combopack_mainUI = ui_combopack_mainUI;
                REG("ui.views.combopack.ui_combopack_mainUI", ui_combopack_mainUI);
                class ui_combopack_tab_btnUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/combopack/ui_combopack_tab_btn");
                    }
                }
                combopack.ui_combopack_tab_btnUI = ui_combopack_tab_btnUI;
                REG("ui.views.combopack.ui_combopack_tab_btnUI", ui_combopack_tab_btnUI);
                class ui_comboppack_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/combopack/ui_comboppack_item");
                    }
                }
                combopack.ui_comboppack_itemUI = ui_comboppack_itemUI;
                REG("ui.views.combopack.ui_comboppack_itemUI", ui_comboppack_itemUI);
            })(combopack = views.combopack || (views.combopack = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var common;
            (function (common) {
                class ui_chongzhi_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/common/ui_chongzhi_view");
                    }
                }
                common.ui_chongzhi_viewUI = ui_chongzhi_viewUI;
                REG("ui.views.common.ui_chongzhi_viewUI", ui_chongzhi_viewUI);
                class ui_loadingUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/common/ui_loading");
                    }
                }
                common.ui_loadingUI = ui_loadingUI;
                REG("ui.views.common.ui_loadingUI", ui_loadingUI);
                class ui_midlabelUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/common/ui_midlabel");
                    }
                }
                common.ui_midlabelUI = ui_midlabelUI;
                REG("ui.views.common.ui_midlabelUI", ui_midlabelUI);
                class ui_money_infoUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/common/ui_money_info");
                    }
                }
                common.ui_money_infoUI = ui_money_infoUI;
                REG("ui.views.common.ui_money_infoUI", ui_money_infoUI);
                class ui_msgboxUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/common/ui_msgbox");
                    }
                }
                common.ui_msgboxUI = ui_msgboxUI;
                REG("ui.views.common.ui_msgboxUI", ui_msgboxUI);
                class ui_query_msgUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/common/ui_query_msg");
                    }
                }
                common.ui_query_msgUI = ui_query_msgUI;
                REG("ui.views.common.ui_query_msgUI", ui_query_msgUI);
                class ui_query_msg1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/common/ui_query_msg1");
                    }
                }
                common.ui_query_msg1UI = ui_query_msg1UI;
                REG("ui.views.common.ui_query_msg1UI", ui_query_msg1UI);
                class ui_scene_maskUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/common/ui_scene_mask");
                    }
                }
                common.ui_scene_maskUI = ui_scene_maskUI;
                REG("ui.views.common.ui_scene_maskUI", ui_scene_maskUI);
                class ui_slotviewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/common/ui_slotview");
                    }
                }
                common.ui_slotviewUI = ui_slotviewUI;
                REG("ui.views.common.ui_slotviewUI", ui_slotviewUI);
                class ui_testUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/common/ui_test");
                    }
                }
                common.ui_testUI = ui_testUI;
                REG("ui.views.common.ui_testUI", ui_testUI);
            })(common = views.common || (views.common = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var daluandou;
            (function (daluandou) {
                class ui_daluandouUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/daluandou/ui_daluandou");
                    }
                }
                daluandou.ui_daluandouUI = ui_daluandouUI;
                REG("ui.views.daluandou.ui_daluandouUI", ui_daluandouUI);
            })(daluandou = views.daluandou || (views.daluandou = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var drawEvent;
            (function (drawEvent) {
                class ui_DrawEventItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/drawEvent/ui_DrawEventItem");
                    }
                }
                drawEvent.ui_DrawEventItemUI = ui_DrawEventItemUI;
                REG("ui.views.drawEvent.ui_DrawEventItemUI", ui_DrawEventItemUI);
                class ui_DrawEventItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/drawEvent/ui_DrawEventItem1");
                    }
                }
                drawEvent.ui_DrawEventItem1UI = ui_DrawEventItem1UI;
                REG("ui.views.drawEvent.ui_DrawEventItem1UI", ui_DrawEventItem1UI);
                class ui_DrawEventItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/drawEvent/ui_DrawEventItem2");
                    }
                }
                drawEvent.ui_DrawEventItem2UI = ui_DrawEventItem2UI;
                REG("ui.views.drawEvent.ui_DrawEventItem2UI", ui_DrawEventItem2UI);
                class ui_DrawEventItem3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/drawEvent/ui_DrawEventItem3");
                    }
                }
                drawEvent.ui_DrawEventItem3UI = ui_DrawEventItem3UI;
                REG("ui.views.drawEvent.ui_DrawEventItem3UI", ui_DrawEventItem3UI);
                class ui_DrawEventItem4UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/drawEvent/ui_DrawEventItem4");
                    }
                }
                drawEvent.ui_DrawEventItem4UI = ui_DrawEventItem4UI;
                REG("ui.views.drawEvent.ui_DrawEventItem4UI", ui_DrawEventItem4UI);
                class ui_DrawEventLBItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/drawEvent/ui_DrawEventLBItem");
                    }
                }
                drawEvent.ui_DrawEventLBItemUI = ui_DrawEventLBItemUI;
                REG("ui.views.drawEvent.ui_DrawEventLBItemUI", ui_DrawEventLBItemUI);
                class ui_DrawEventTaskItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/drawEvent/ui_DrawEventTaskItem");
                    }
                }
                drawEvent.ui_DrawEventTaskItemUI = ui_DrawEventTaskItemUI;
                REG("ui.views.drawEvent.ui_DrawEventTaskItemUI", ui_DrawEventTaskItemUI);
                class ui_DrawEventViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/drawEvent/ui_DrawEventView");
                    }
                }
                drawEvent.ui_DrawEventViewUI = ui_DrawEventViewUI;
                REG("ui.views.drawEvent.ui_DrawEventViewUI", ui_DrawEventViewUI);
                class ui_DrawEventView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/drawEvent/ui_DrawEventView1");
                    }
                }
                drawEvent.ui_DrawEventView1UI = ui_DrawEventView1UI;
                REG("ui.views.drawEvent.ui_DrawEventView1UI", ui_DrawEventView1UI);
                class ui_DrawEventView2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/drawEvent/ui_DrawEventView2");
                    }
                }
                drawEvent.ui_DrawEventView2UI = ui_DrawEventView2UI;
                REG("ui.views.drawEvent.ui_DrawEventView2UI", ui_DrawEventView2UI);
                class ui_DrawEventView3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/drawEvent/ui_DrawEventView3");
                    }
                }
                drawEvent.ui_DrawEventView3UI = ui_DrawEventView3UI;
                REG("ui.views.drawEvent.ui_DrawEventView3UI", ui_DrawEventView3UI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/drawEvent/ui_tab");
                    }
                }
                drawEvent.ui_tabUI = ui_tabUI;
                REG("ui.views.drawEvent.ui_tabUI", ui_tabUI);
            })(drawEvent = views.drawEvent || (views.drawEvent = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var duanwu;
            (function (duanwu) {
                class ui_duanwu_avatarUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_avatar");
                    }
                }
                duanwu.ui_duanwu_avatarUI = ui_duanwu_avatarUI;
                REG("ui.views.duanwu.ui_duanwu_avatarUI", ui_duanwu_avatarUI);
                class ui_duanwu_leichongUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_leichong");
                    }
                }
                duanwu.ui_duanwu_leichongUI = ui_duanwu_leichongUI;
                REG("ui.views.duanwu.ui_duanwu_leichongUI", ui_duanwu_leichongUI);
                class ui_duanwu_leichong_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_leichong_item");
                    }
                }
                duanwu.ui_duanwu_leichong_itemUI = ui_duanwu_leichong_itemUI;
                REG("ui.views.duanwu.ui_duanwu_leichong_itemUI", ui_duanwu_leichong_itemUI);
                class ui_duanwu_log_itemviewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_log_itemview");
                    }
                }
                duanwu.ui_duanwu_log_itemviewUI = ui_duanwu_log_itemviewUI;
                REG("ui.views.duanwu.ui_duanwu_log_itemviewUI", ui_duanwu_log_itemviewUI);
                class ui_duanwu_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_main");
                    }
                }
                duanwu.ui_duanwu_mainUI = ui_duanwu_mainUI;
                REG("ui.views.duanwu.ui_duanwu_mainUI", ui_duanwu_mainUI);
                class ui_duanwu_packageUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_package");
                    }
                }
                duanwu.ui_duanwu_packageUI = ui_duanwu_packageUI;
                REG("ui.views.duanwu.ui_duanwu_packageUI", ui_duanwu_packageUI);
                class ui_duanwu_package_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_package_item");
                    }
                }
                duanwu.ui_duanwu_package_itemUI = ui_duanwu_package_itemUI;
                REG("ui.views.duanwu.ui_duanwu_package_itemUI", ui_duanwu_package_itemUI);
                class ui_duanwu_rankUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_rank");
                    }
                }
                duanwu.ui_duanwu_rankUI = ui_duanwu_rankUI;
                REG("ui.views.duanwu.ui_duanwu_rankUI", ui_duanwu_rankUI);
                class ui_duanwu_rank_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_rank_item");
                    }
                }
                duanwu.ui_duanwu_rank_itemUI = ui_duanwu_rank_itemUI;
                REG("ui.views.duanwu.ui_duanwu_rank_itemUI", ui_duanwu_rank_itemUI);
                class ui_duanwu_rank_owner_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_rank_owner_item");
                    }
                }
                duanwu.ui_duanwu_rank_owner_itemUI = ui_duanwu_rank_owner_itemUI;
                REG("ui.views.duanwu.ui_duanwu_rank_owner_itemUI", ui_duanwu_rank_owner_itemUI);
                class ui_duanwu_reward_log_item_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_reward_log_item_view");
                    }
                }
                duanwu.ui_duanwu_reward_log_item_viewUI = ui_duanwu_reward_log_item_viewUI;
                REG("ui.views.duanwu.ui_duanwu_reward_log_item_viewUI", ui_duanwu_reward_log_item_viewUI);
                class ui_duanwu_reward_log_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_reward_log_view");
                    }
                }
                duanwu.ui_duanwu_reward_log_viewUI = ui_duanwu_reward_log_viewUI;
                REG("ui.views.duanwu.ui_duanwu_reward_log_viewUI", ui_duanwu_reward_log_viewUI);
                class ui_duanwu_reward_showUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_reward_show");
                    }
                }
                duanwu.ui_duanwu_reward_showUI = ui_duanwu_reward_showUI;
                REG("ui.views.duanwu.ui_duanwu_reward_showUI", ui_duanwu_reward_showUI);
                class ui_duanwu_reward_show_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_reward_show_item");
                    }
                }
                duanwu.ui_duanwu_reward_show_itemUI = ui_duanwu_reward_show_itemUI;
                REG("ui.views.duanwu.ui_duanwu_reward_show_itemUI", ui_duanwu_reward_show_itemUI);
                class ui_duanwu_top_rewardUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_top_reward");
                    }
                }
                duanwu.ui_duanwu_top_rewardUI = ui_duanwu_top_rewardUI;
                REG("ui.views.duanwu.ui_duanwu_top_rewardUI", ui_duanwu_top_rewardUI);
                class ui_duanwu_txt_cellUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/duanwu/ui_duanwu_txt_cell");
                    }
                }
                duanwu.ui_duanwu_txt_cellUI = ui_duanwu_txt_cellUI;
                REG("ui.views.duanwu.ui_duanwu_txt_cellUI", ui_duanwu_txt_cellUI);
            })(duanwu = views.duanwu || (views.duanwu = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var fighthard;
            (function (fighthard) {
                class ui_fighthardbiewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fighthard/ui_fighthardbiew");
                    }
                }
                fighthard.ui_fighthardbiewUI = ui_fighthardbiewUI;
                REG("ui.views.fighthard.ui_fighthardbiewUI", ui_fighthardbiewUI);
                class ui_fighthardtujianUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.createView(ui_fighthardtujianUI.uiView);
                    }
                }
                ui_fighthardtujianUI.uiView = { "type": "View", "props": { "width": 678, "height": 865 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 25, "width": 631, "var": "bg1", "skin": "remote/common/base/mb.png", "sizeGrid": "18,21,22,19", "height": 837, "centerX": 0 }, "compId": 4 }, { "type": "Image", "props": { "y": 0, "x": 615, "var": "close1", "skin": "remote/common/base/close45.png" }, "compId": 5 }, { "type": "Image", "props": { "y": 49, "width": 227, "skin": "remote/common/base/sxk.png", "sizeGrid": "0,24,0,24", "height": 55, "centerX": 0 }, "compId": 6 }, { "type": "Label", "props": { "y": 59, "var": "tf2", "text": "凶兽图鉴", "fontSize": 35, "font": "BOLD", "color": "#BE8757", "centerX": 0 }, "compId": 7 }, { "type": "Image", "props": { "y": 151, "x": 92, "var": "bg2", "skin": "remote/fighthard/az_bg1.png", "centerX": 0 }, "compId": 11 }, { "type": "Image", "props": { "y": 117, "x": 453, "var": "bg7", "skin": "remote/zhengzhan/line.png" }, "compId": 8 }, { "type": "Image", "props": { "y": 117, "x": 234, "var": "bg8", "skin": "remote/zhengzhan/line.png", "scaleX": -1 }, "compId": 9 }, { "type": "Label", "props": { "y": 107, "var": "nametf", "text": "凶兽", "strokeColor": "#6B280A", "stroke": 3, "fontSize": 40, "color": "#F83535", "centerX": 0 }, "compId": 10 }, { "type": "Sprite", "props": { "y": 398, "x": 331, "var": "avatarCon" }, "compId": 12 }, { "type": "Label", "props": { "y": 415, "width": 383, "var": "tf3", "text": "高闪避，回复克星", "strokeColor": "#7E5236", "stroke": 3, "height": 20, "fontSize": 22, "font": "BOLD", "color": "#F1E1C2", "centerX": 0, "align": "center" }, "compId": 14 }, { "type": "Image", "props": { "y": 467, "width": 566, "var": "bg3", "skin": "remote/common/base/juxing_2.png", "sizeGrid": "10,11,13,11", "height": 200, "centerX": 0 }, "compId": 15 }, { "type": "Label", "props": { "y": 476, "var": "tf4", "text": "凶兽技能", "height": 20, "fontSize": 28, "font": "BOLD", "color": "#B2713C", "centerX": 0, "align": "center" }, "compId": 16 }, { "type": "List", "props": { "y": 702, "width": 524, "var": "list1", "spaceX": 20, "height": 125, "hScrollBarSkin": " ", "centerX": 0 }, "compId": 26, "child": [{ "type": "ui_fighthard_avatar", "props": { "renderType": "render", "runtime": "ui.views.fighthard.ui_fighthard_avatarUI" }, "compId": 27 }] }, { "type": "List", "props": { "y": 535, "x": 83, "width": 516, "var": "list2", "spaceX": 38, "height": 100, "hScrollBarSkin": " " }, "compId": 28, "child": [{ "type": "ui_fight_hard_cirle", "props": { "renderType": "render", "runtime": "ui.views.fighthard.ui_fight_hard_cirleUI" }, "compId": 29 }] }], "loadList": ["remote/common/base/mb.png", "remote/common/base/close45.png", "remote/common/base/sxk.png", "remote/fighthard/az_bg1.png", "remote/zhengzhan/line.png", "remote/common/base/juxing_2.png", "views/fighthard/ui_fighthard_avatar.scene"], "loadList3D": [] };
                fighthard.ui_fighthardtujianUI = ui_fighthardtujianUI;
                REG("ui.views.fighthard.ui_fighthardtujianUI", ui_fighthardtujianUI);
                class ui_fighthard_avatarUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fighthard/ui_fighthard_avatar");
                    }
                }
                fighthard.ui_fighthard_avatarUI = ui_fighthard_avatarUI;
                REG("ui.views.fighthard.ui_fighthard_avatarUI", ui_fighthard_avatarUI);
                class ui_fighthard_detail_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fighthard/ui_fighthard_detail_item");
                    }
                }
                fighthard.ui_fighthard_detail_itemUI = ui_fighthard_detail_itemUI;
                REG("ui.views.fighthard.ui_fighthard_detail_itemUI", ui_fighthard_detail_itemUI);
                class ui_fighthard_detail_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fighthard/ui_fighthard_detail_view");
                    }
                }
                fighthard.ui_fighthard_detail_viewUI = ui_fighthard_detail_viewUI;
                REG("ui.views.fighthard.ui_fighthard_detail_viewUI", ui_fighthard_detail_viewUI);
                class ui_fighthard_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fighthard/ui_fighthard_item");
                    }
                }
                fighthard.ui_fighthard_itemUI = ui_fighthard_itemUI;
                REG("ui.views.fighthard.ui_fighthard_itemUI", ui_fighthard_itemUI);
                class ui_fighthard_rankUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fighthard/ui_fighthard_rank");
                    }
                }
                fighthard.ui_fighthard_rankUI = ui_fighthard_rankUI;
                REG("ui.views.fighthard.ui_fighthard_rankUI", ui_fighthard_rankUI);
                class ui_fighthard_rank_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fighthard/ui_fighthard_rank_item");
                    }
                }
                fighthard.ui_fighthard_rank_itemUI = ui_fighthard_rank_itemUI;
                REG("ui.views.fighthard.ui_fighthard_rank_itemUI", ui_fighthard_rank_itemUI);
                class ui_fighthard_rank_owner_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fighthard/ui_fighthard_rank_owner_item");
                    }
                }
                fighthard.ui_fighthard_rank_owner_itemUI = ui_fighthard_rank_owner_itemUI;
                REG("ui.views.fighthard.ui_fighthard_rank_owner_itemUI", ui_fighthard_rank_owner_itemUI);
                class ui_fighthard_reward_showUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fighthard/ui_fighthard_reward_show");
                    }
                }
                fighthard.ui_fighthard_reward_showUI = ui_fighthard_reward_showUI;
                REG("ui.views.fighthard.ui_fighthard_reward_showUI", ui_fighthard_reward_showUI);
                class ui_fighthard_reward_show_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fighthard/ui_fighthard_reward_show_item");
                    }
                }
                fighthard.ui_fighthard_reward_show_itemUI = ui_fighthard_reward_show_itemUI;
                REG("ui.views.fighthard.ui_fighthard_reward_show_itemUI", ui_fighthard_reward_show_itemUI);
                class ui_fighthard_slotUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fighthard/ui_fighthard_slot");
                    }
                }
                fighthard.ui_fighthard_slotUI = ui_fighthard_slotUI;
                REG("ui.views.fighthard.ui_fighthard_slotUI", ui_fighthard_slotUI);
                class ui_fight_hard_cirleUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.createView(ui_fight_hard_cirleUI.uiView);
                    }
                }
                ui_fight_hard_cirleUI.uiView = { "type": "View", "props": { "width": 100, "height": 100 }, "compId": 2, "child": [{ "type": "Image", "props": { "var": "bg1", "skin": "remote/fighthard/az_anniu.png" }, "compId": 4 }, { "type": "Label", "props": { "wordWrap": true, "width": 58, "var": "tf", "text": "爪击好", "fontSize": 28, "font": "BOLD", "color": "#9E734D", "centerY": 0, "centerX": 0, "align": "center" }, "compId": 5 }], "loadList": ["remote/fighthard/az_anniu.png"], "loadList3D": [] };
                fighthard.ui_fight_hard_cirleUI = ui_fight_hard_cirleUI;
                REG("ui.views.fighthard.ui_fight_hard_cirleUI", ui_fight_hard_cirleUI);
            })(fighthard = views.fighthard || (views.fighthard = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var fujiang;
            (function (fujiang) {
                class ui_fujiangAttrItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrItem");
                    }
                }
                fujiang.ui_fujiangAttrItemUI = ui_fujiangAttrItemUI;
                REG("ui.views.fujiang.ui_fujiangAttrItemUI", ui_fujiangAttrItemUI);
                class ui_fujiangAttrItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrItem1");
                    }
                }
                fujiang.ui_fujiangAttrItem1UI = ui_fujiangAttrItem1UI;
                REG("ui.views.fujiang.ui_fujiangAttrItem1UI", ui_fujiangAttrItem1UI);
                class ui_fujiangAttrItem10UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrItem10");
                    }
                }
                fujiang.ui_fujiangAttrItem10UI = ui_fujiangAttrItem10UI;
                REG("ui.views.fujiang.ui_fujiangAttrItem10UI", ui_fujiangAttrItem10UI);
                class ui_fujiangAttrItem11UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrItem11");
                    }
                }
                fujiang.ui_fujiangAttrItem11UI = ui_fujiangAttrItem11UI;
                REG("ui.views.fujiang.ui_fujiangAttrItem11UI", ui_fujiangAttrItem11UI);
                class ui_fujiangAttrItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrItem2");
                    }
                }
                fujiang.ui_fujiangAttrItem2UI = ui_fujiangAttrItem2UI;
                REG("ui.views.fujiang.ui_fujiangAttrItem2UI", ui_fujiangAttrItem2UI);
                class ui_fujiangAttrItem3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrItem3");
                    }
                }
                fujiang.ui_fujiangAttrItem3UI = ui_fujiangAttrItem3UI;
                REG("ui.views.fujiang.ui_fujiangAttrItem3UI", ui_fujiangAttrItem3UI);
                class ui_fujiangAttrItem4UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrItem4");
                    }
                }
                fujiang.ui_fujiangAttrItem4UI = ui_fujiangAttrItem4UI;
                REG("ui.views.fujiang.ui_fujiangAttrItem4UI", ui_fujiangAttrItem4UI);
                class ui_fujiangAttrItem5UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrItem5");
                    }
                }
                fujiang.ui_fujiangAttrItem5UI = ui_fujiangAttrItem5UI;
                REG("ui.views.fujiang.ui_fujiangAttrItem5UI", ui_fujiangAttrItem5UI);
                class ui_fujiangAttrItem6UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrItem6");
                    }
                }
                fujiang.ui_fujiangAttrItem6UI = ui_fujiangAttrItem6UI;
                REG("ui.views.fujiang.ui_fujiangAttrItem6UI", ui_fujiangAttrItem6UI);
                class ui_fujiangAttrItem7UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrItem7");
                    }
                }
                fujiang.ui_fujiangAttrItem7UI = ui_fujiangAttrItem7UI;
                REG("ui.views.fujiang.ui_fujiangAttrItem7UI", ui_fujiangAttrItem7UI);
                class ui_fujiangAttrItem8UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrItem8");
                    }
                }
                fujiang.ui_fujiangAttrItem8UI = ui_fujiangAttrItem8UI;
                REG("ui.views.fujiang.ui_fujiangAttrItem8UI", ui_fujiangAttrItem8UI);
                class ui_fujiangAttrItem9UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrItem9");
                    }
                }
                fujiang.ui_fujiangAttrItem9UI = ui_fujiangAttrItem9UI;
                REG("ui.views.fujiang.ui_fujiangAttrItem9UI", ui_fujiangAttrItem9UI);
                class ui_fujiangAttrViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrView");
                    }
                }
                fujiang.ui_fujiangAttrViewUI = ui_fujiangAttrViewUI;
                REG("ui.views.fujiang.ui_fujiangAttrViewUI", ui_fujiangAttrViewUI);
                class ui_fujiangAttrView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangAttrView1");
                    }
                }
                fujiang.ui_fujiangAttrView1UI = ui_fujiangAttrView1UI;
                REG("ui.views.fujiang.ui_fujiangAttrView1UI", ui_fujiangAttrView1UI);
                class ui_fujiangChouKaViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangChouKaView");
                    }
                }
                fujiang.ui_fujiangChouKaViewUI = ui_fujiangChouKaViewUI;
                REG("ui.views.fujiang.ui_fujiangChouKaViewUI", ui_fujiangChouKaViewUI);
                class ui_fujiangCKViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangCKView");
                    }
                }
                fujiang.ui_fujiangCKViewUI = ui_fujiangCKViewUI;
                REG("ui.views.fujiang.ui_fujiangCKViewUI", ui_fujiangCKViewUI);
                class ui_fujiangCZViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangCZView");
                    }
                }
                fujiang.ui_fujiangCZViewUI = ui_fujiangCZViewUI;
                REG("ui.views.fujiang.ui_fujiangCZViewUI", ui_fujiangCZViewUI);
                class ui_fujiangglItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangglItem");
                    }
                }
                fujiang.ui_fujiangglItemUI = ui_fujiangglItemUI;
                REG("ui.views.fujiang.ui_fujiangglItemUI", ui_fujiangglItemUI);
                class ui_fujiangglTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangglTip");
                    }
                }
                fujiang.ui_fujiangglTipUI = ui_fujiangglTipUI;
                REG("ui.views.fujiang.ui_fujiangglTipUI", ui_fujiangglTipUI);
                class ui_fujiangGMViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangGMView");
                    }
                }
                fujiang.ui_fujiangGMViewUI = ui_fujiangGMViewUI;
                REG("ui.views.fujiang.ui_fujiangGMViewUI", ui_fujiangGMViewUI);
                class ui_fujiangHDViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangHDView");
                    }
                }
                fujiang.ui_fujiangHDViewUI = ui_fujiangHDViewUI;
                REG("ui.views.fujiang.ui_fujiangHDViewUI", ui_fujiangHDViewUI);
                class ui_fujiangHDView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangHDView1");
                    }
                }
                fujiang.ui_fujiangHDView1UI = ui_fujiangHDView1UI;
                REG("ui.views.fujiang.ui_fujiangHDView1UI", ui_fujiangHDView1UI);
                class ui_fujiangItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem");
                    }
                }
                fujiang.ui_fujiangItemUI = ui_fujiangItemUI;
                REG("ui.views.fujiang.ui_fujiangItemUI", ui_fujiangItemUI);
                class ui_fujiangItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem1");
                    }
                }
                fujiang.ui_fujiangItem1UI = ui_fujiangItem1UI;
                REG("ui.views.fujiang.ui_fujiangItem1UI", ui_fujiangItem1UI);
                class ui_fujiangItem10UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem10");
                    }
                }
                fujiang.ui_fujiangItem10UI = ui_fujiangItem10UI;
                REG("ui.views.fujiang.ui_fujiangItem10UI", ui_fujiangItem10UI);
                class ui_fujiangItem11UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem11");
                    }
                }
                fujiang.ui_fujiangItem11UI = ui_fujiangItem11UI;
                REG("ui.views.fujiang.ui_fujiangItem11UI", ui_fujiangItem11UI);
                class ui_fujiangItem12UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem12");
                    }
                }
                fujiang.ui_fujiangItem12UI = ui_fujiangItem12UI;
                REG("ui.views.fujiang.ui_fujiangItem12UI", ui_fujiangItem12UI);
                class ui_fujiangItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem2");
                    }
                }
                fujiang.ui_fujiangItem2UI = ui_fujiangItem2UI;
                REG("ui.views.fujiang.ui_fujiangItem2UI", ui_fujiangItem2UI);
                class ui_fujiangItem3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem3");
                    }
                }
                fujiang.ui_fujiangItem3UI = ui_fujiangItem3UI;
                REG("ui.views.fujiang.ui_fujiangItem3UI", ui_fujiangItem3UI);
                class ui_fujiangItem4UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem4");
                    }
                }
                fujiang.ui_fujiangItem4UI = ui_fujiangItem4UI;
                REG("ui.views.fujiang.ui_fujiangItem4UI", ui_fujiangItem4UI);
                class ui_fujiangItem5UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem5");
                    }
                }
                fujiang.ui_fujiangItem5UI = ui_fujiangItem5UI;
                REG("ui.views.fujiang.ui_fujiangItem5UI", ui_fujiangItem5UI);
                class ui_fujiangItem6UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem6");
                    }
                }
                fujiang.ui_fujiangItem6UI = ui_fujiangItem6UI;
                REG("ui.views.fujiang.ui_fujiangItem6UI", ui_fujiangItem6UI);
                class ui_fujiangItem7UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem7");
                    }
                }
                fujiang.ui_fujiangItem7UI = ui_fujiangItem7UI;
                REG("ui.views.fujiang.ui_fujiangItem7UI", ui_fujiangItem7UI);
                class ui_fujiangItem8UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem8");
                    }
                }
                fujiang.ui_fujiangItem8UI = ui_fujiangItem8UI;
                REG("ui.views.fujiang.ui_fujiangItem8UI", ui_fujiangItem8UI);
                class ui_fujiangItem9UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangItem9");
                    }
                }
                fujiang.ui_fujiangItem9UI = ui_fujiangItem9UI;
                REG("ui.views.fujiang.ui_fujiangItem9UI", ui_fujiangItem9UI);
                class ui_fujiangJBItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangJBItem");
                    }
                }
                fujiang.ui_fujiangJBItemUI = ui_fujiangJBItemUI;
                REG("ui.views.fujiang.ui_fujiangJBItemUI", ui_fujiangJBItemUI);
                class ui_fujiangJBItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangJBItem1");
                    }
                }
                fujiang.ui_fujiangJBItem1UI = ui_fujiangJBItem1UI;
                REG("ui.views.fujiang.ui_fujiangJBItem1UI", ui_fujiangJBItem1UI);
                class ui_fujiangJBItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangJBItem2");
                    }
                }
                fujiang.ui_fujiangJBItem2UI = ui_fujiangJBItem2UI;
                REG("ui.views.fujiang.ui_fujiangJBItem2UI", ui_fujiangJBItem2UI);
                class ui_fujiangJBSXViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangJBSXView");
                    }
                }
                fujiang.ui_fujiangJBSXViewUI = ui_fujiangJBSXViewUI;
                REG("ui.views.fujiang.ui_fujiangJBSXViewUI", ui_fujiangJBSXViewUI);
                class ui_fujiangJBViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangJBView");
                    }
                }
                fujiang.ui_fujiangJBViewUI = ui_fujiangJBViewUI;
                REG("ui.views.fujiang.ui_fujiangJBViewUI", ui_fujiangJBViewUI);
                class ui_fujiangJNItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangJNItem");
                    }
                }
                fujiang.ui_fujiangJNItemUI = ui_fujiangJNItemUI;
                REG("ui.views.fujiang.ui_fujiangJNItemUI", ui_fujiangJNItemUI);
                class ui_fujiangJNTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangJNTip");
                    }
                }
                fujiang.ui_fujiangJNTipUI = ui_fujiangJNTipUI;
                REG("ui.views.fujiang.ui_fujiangJNTipUI", ui_fujiangJNTipUI);
                class ui_fujiangListUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangList");
                    }
                }
                fujiang.ui_fujiangListUI = ui_fujiangListUI;
                REG("ui.views.fujiang.ui_fujiangListUI", ui_fujiangListUI);
                class ui_fujiangMountCKViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangMountCKView");
                    }
                }
                fujiang.ui_fujiangMountCKViewUI = ui_fujiangMountCKViewUI;
                REG("ui.views.fujiang.ui_fujiangMountCKViewUI", ui_fujiangMountCKViewUI);
                class ui_fujiangPYViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangPYView");
                    }
                }
                fujiang.ui_fujiangPYViewUI = ui_fujiangPYViewUI;
                REG("ui.views.fujiang.ui_fujiangPYViewUI", ui_fujiangPYViewUI);
                class ui_fujiangSCZZItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangSCZZItem");
                    }
                }
                fujiang.ui_fujiangSCZZItemUI = ui_fujiangSCZZItemUI;
                REG("ui.views.fujiang.ui_fujiangSCZZItemUI", ui_fujiangSCZZItemUI);
                class ui_fujiangSCZZViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangSCZZView");
                    }
                }
                fujiang.ui_fujiangSCZZViewUI = ui_fujiangSCZZViewUI;
                REG("ui.views.fujiang.ui_fujiangSCZZViewUI", ui_fujiangSCZZViewUI);
                class ui_fujiangSQTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangSQTip");
                    }
                }
                fujiang.ui_fujiangSQTipUI = ui_fujiangSQTipUI;
                REG("ui.views.fujiang.ui_fujiangSQTipUI", ui_fujiangSQTipUI);
                class ui_fujiangStarView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangStarView1");
                    }
                }
                fujiang.ui_fujiangStarView1UI = ui_fujiangStarView1UI;
                REG("ui.views.fujiang.ui_fujiangStarView1UI", ui_fujiangStarView1UI);
                class ui_fujiangSXTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangSXTip");
                    }
                }
                fujiang.ui_fujiangSXTipUI = ui_fujiangSXTipUI;
                REG("ui.views.fujiang.ui_fujiangSXTipUI", ui_fujiangSXTipUI);
                class ui_fujiangViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangView");
                    }
                }
                fujiang.ui_fujiangViewUI = ui_fujiangViewUI;
                REG("ui.views.fujiang.ui_fujiangViewUI", ui_fujiangViewUI);
                class ui_fujiangView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangView1");
                    }
                }
                fujiang.ui_fujiangView1UI = ui_fujiangView1UI;
                REG("ui.views.fujiang.ui_fujiangView1UI", ui_fujiangView1UI);
                class ui_fujiangView2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangView2");
                    }
                }
                fujiang.ui_fujiangView2UI = ui_fujiangView2UI;
                REG("ui.views.fujiang.ui_fujiangView2UI", ui_fujiangView2UI);
                class ui_fujiangView3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangView3");
                    }
                }
                fujiang.ui_fujiangView3UI = ui_fujiangView3UI;
                REG("ui.views.fujiang.ui_fujiangView3UI", ui_fujiangView3UI);
                class ui_fujiangView33UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangView33");
                    }
                }
                fujiang.ui_fujiangView33UI = ui_fujiangView33UI;
                REG("ui.views.fujiang.ui_fujiangView33UI", ui_fujiangView33UI);
                class ui_fujiangView4UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangView4");
                    }
                }
                fujiang.ui_fujiangView4UI = ui_fujiangView4UI;
                REG("ui.views.fujiang.ui_fujiangView4UI", ui_fujiangView4UI);
                class ui_fujiangView5UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangView5");
                    }
                }
                fujiang.ui_fujiangView5UI = ui_fujiangView5UI;
                REG("ui.views.fujiang.ui_fujiangView5UI", ui_fujiangView5UI);
                class ui_fujiangView6UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangView6");
                    }
                }
                fujiang.ui_fujiangView6UI = ui_fujiangView6UI;
                REG("ui.views.fujiang.ui_fujiangView6UI", ui_fujiangView6UI);
                class ui_fujiangWSViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangWSView");
                    }
                }
                fujiang.ui_fujiangWSViewUI = ui_fujiangWSViewUI;
                REG("ui.views.fujiang.ui_fujiangWSViewUI", ui_fujiangWSViewUI);
                class ui_fujiangWSView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangWSView1");
                    }
                }
                fujiang.ui_fujiangWSView1UI = ui_fujiangWSView1UI;
                REG("ui.views.fujiang.ui_fujiangWSView1UI", ui_fujiangWSView1UI);
                class ui_fujiangXQViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangXQView");
                    }
                }
                fujiang.ui_fujiangXQViewUI = ui_fujiangXQViewUI;
                REG("ui.views.fujiang.ui_fujiangXQViewUI", ui_fujiangXQViewUI);
                class ui_fujiangZBJBItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangZBJBItem");
                    }
                }
                fujiang.ui_fujiangZBJBItemUI = ui_fujiangZBJBItemUI;
                REG("ui.views.fujiang.ui_fujiangZBJBItemUI", ui_fujiangZBJBItemUI);
                class ui_fujiangZBJBViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangZBJBView");
                    }
                }
                fujiang.ui_fujiangZBJBViewUI = ui_fujiangZBJBViewUI;
                REG("ui.views.fujiang.ui_fujiangZBJBViewUI", ui_fujiangZBJBViewUI);
                class ui_fujiangZQGHViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangZQGHView");
                    }
                }
                fujiang.ui_fujiangZQGHViewUI = ui_fujiangZQGHViewUI;
                REG("ui.views.fujiang.ui_fujiangZQGHViewUI", ui_fujiangZQGHViewUI);
                class ui_fujiangZQItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangZQItem");
                    }
                }
                fujiang.ui_fujiangZQItemUI = ui_fujiangZQItemUI;
                REG("ui.views.fujiang.ui_fujiangZQItemUI", ui_fujiangZQItemUI);
                class ui_fujiangZZItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_fujiangZZItem");
                    }
                }
                fujiang.ui_fujiangZZItemUI = ui_fujiangZZItemUI;
                REG("ui.views.fujiang.ui_fujiangZZItemUI", ui_fujiangZZItemUI);
                class ui_mTabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_mTab");
                    }
                }
                fujiang.ui_mTabUI = ui_mTabUI;
                REG("ui.views.fujiang.ui_mTabUI", ui_mTabUI);
                class ui_starUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_star");
                    }
                }
                fujiang.ui_starUI = ui_starUI;
                REG("ui.views.fujiang.ui_starUI", ui_starUI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_tab");
                    }
                }
                fujiang.ui_tabUI = ui_tabUI;
                REG("ui.views.fujiang.ui_tabUI", ui_tabUI);
                class ui_tab1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiang/ui_tab1");
                    }
                }
                fujiang.ui_tab1UI = ui_tab1UI;
                REG("ui.views.fujiang.ui_tab1UI", ui_tab1UI);
            })(fujiang = views.fujiang || (views.fujiang = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var fujiangfeast;
            (function (fujiangfeast) {
                class ui_fujiangfeast_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fujiangfeast/ui_fujiangfeast_main");
                    }
                }
                fujiangfeast.ui_fujiangfeast_mainUI = ui_fujiangfeast_mainUI;
                REG("ui.views.fujiangfeast.ui_fujiangfeast_mainUI", ui_fujiangfeast_mainUI);
            })(fujiangfeast = views.fujiangfeast || (views.fujiangfeast = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var fuyou;
            (function (fuyou) {
                class ui_cifuUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fuyou/ui_cifu");
                    }
                }
                fuyou.ui_cifuUI = ui_cifuUI;
                REG("ui.views.fuyou.ui_cifuUI", ui_cifuUI);
                class ui_cifuAutoUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fuyou/ui_cifuAuto");
                    }
                }
                fuyou.ui_cifuAutoUI = ui_cifuAutoUI;
                REG("ui.views.fuyou.ui_cifuAutoUI", ui_cifuAutoUI);
                class ui_cifuLevelUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fuyou/ui_cifuLevel");
                    }
                }
                fuyou.ui_cifuLevelUI = ui_cifuLevelUI;
                REG("ui.views.fuyou.ui_cifuLevelUI", ui_cifuLevelUI);
                class ui_cifuLevel1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fuyou/ui_cifuLevel1");
                    }
                }
                fuyou.ui_cifuLevel1UI = ui_cifuLevel1UI;
                REG("ui.views.fuyou.ui_cifuLevel1UI", ui_cifuLevel1UI);
                class ui_duihuanItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fuyou/ui_duihuanItem");
                    }
                }
                fuyou.ui_duihuanItemUI = ui_duihuanItemUI;
                REG("ui.views.fuyou.ui_duihuanItemUI", ui_duihuanItemUI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fuyou/ui_tab");
                    }
                }
                fuyou.ui_tabUI = ui_tabUI;
                REG("ui.views.fuyou.ui_tabUI", ui_tabUI);
                class ui_zhuanhuaUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fuyou/ui_zhuanhua");
                    }
                }
                fuyou.ui_zhuanhuaUI = ui_zhuanhuaUI;
                REG("ui.views.fuyou.ui_zhuanhuaUI", ui_zhuanhuaUI);
                class ui_zhuanhuaItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fuyou/ui_zhuanhuaItem");
                    }
                }
                fuyou.ui_zhuanhuaItemUI = ui_zhuanhuaItemUI;
                REG("ui.views.fuyou.ui_zhuanhuaItemUI", ui_zhuanhuaItemUI);
                class ui_zhuanhuaItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/fuyou/ui_zhuanhuaItem1");
                    }
                }
                fuyou.ui_zhuanhuaItem1UI = ui_zhuanhuaItem1UI;
                REG("ui.views.fuyou.ui_zhuanhuaItem1UI", ui_zhuanhuaItem1UI);
            })(fuyou = views.fuyou || (views.fuyou = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var gemfeast;
            (function (gemfeast) {
                class ui_gemfeast_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/gemfeast/ui_gemfeast_item");
                    }
                }
                gemfeast.ui_gemfeast_itemUI = ui_gemfeast_itemUI;
                REG("ui.views.gemfeast.ui_gemfeast_itemUI", ui_gemfeast_itemUI);
                class ui_gemfeast_item2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/gemfeast/ui_gemfeast_item2");
                    }
                }
                gemfeast.ui_gemfeast_item2UI = ui_gemfeast_item2UI;
                REG("ui.views.gemfeast.ui_gemfeast_item2UI", ui_gemfeast_item2UI);
                class ui_gemfeast_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/gemfeast/ui_gemfeast_main");
                    }
                }
                gemfeast.ui_gemfeast_mainUI = ui_gemfeast_mainUI;
                REG("ui.views.gemfeast.ui_gemfeast_mainUI", ui_gemfeast_mainUI);
                class ui_gemfeast_main2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/gemfeast/ui_gemfeast_main2");
                    }
                }
                gemfeast.ui_gemfeast_main2UI = ui_gemfeast_main2UI;
                REG("ui.views.gemfeast.ui_gemfeast_main2UI", ui_gemfeast_main2UI);
            })(gemfeast = views.gemfeast || (views.gemfeast = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var guaji;
            (function (guaji) {
                class ui_guajiUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/guaji/ui_guaji");
                    }
                }
                guaji.ui_guajiUI = ui_guajiUI;
                REG("ui.views.guaji.ui_guajiUI", ui_guajiUI);
                class ui_kuaisuzhenchaUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/guaji/ui_kuaisuzhencha");
                    }
                }
                guaji.ui_kuaisuzhenchaUI = ui_kuaisuzhenchaUI;
                REG("ui.views.guaji.ui_kuaisuzhenchaUI", ui_kuaisuzhenchaUI);
                class ui_yaoQingItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/guaji/ui_yaoQingItem");
                    }
                }
                guaji.ui_yaoQingItemUI = ui_yaoQingItemUI;
                REG("ui.views.guaji.ui_yaoQingItemUI", ui_yaoQingItemUI);
                class ui_zhenchanaijiuUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/guaji/ui_zhenchanaijiu");
                    }
                }
                guaji.ui_zhenchanaijiuUI = ui_zhenchanaijiuUI;
                REG("ui.views.guaji.ui_zhenchanaijiuUI", ui_zhenchanaijiuUI);
            })(guaji = views.guaji || (views.guaji = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var hero_house;
            (function (hero_house) {
                class ui_hero_house_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_attr");
                    }
                }
                hero_house.ui_hero_house_attrUI = ui_hero_house_attrUI;
                REG("ui.views.hero_house.ui_hero_house_attrUI", ui_hero_house_attrUI);
                class ui_hero_house_attr1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_attr1");
                    }
                }
                hero_house.ui_hero_house_attr1UI = ui_hero_house_attr1UI;
                REG("ui.views.hero_house.ui_hero_house_attr1UI", ui_hero_house_attr1UI);
                class ui_hero_house_chongzhi_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_chongzhi_view");
                    }
                }
                hero_house.ui_hero_house_chongzhi_viewUI = ui_hero_house_chongzhi_viewUI;
                REG("ui.views.hero_house.ui_hero_house_chongzhi_viewUI", ui_hero_house_chongzhi_viewUI);
                class ui_hero_house_detailedUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_detailed");
                    }
                }
                hero_house.ui_hero_house_detailedUI = ui_hero_house_detailedUI;
                REG("ui.views.hero_house.ui_hero_house_detailedUI", ui_hero_house_detailedUI);
                class ui_hero_house_detailed_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_detailed_item");
                    }
                }
                hero_house.ui_hero_house_detailed_itemUI = ui_hero_house_detailed_itemUI;
                REG("ui.views.hero_house.ui_hero_house_detailed_itemUI", ui_hero_house_detailed_itemUI);
                class ui_hero_house_detailed_item_labeUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_detailed_item_labe");
                    }
                }
                hero_house.ui_hero_house_detailed_item_labeUI = ui_hero_house_detailed_item_labeUI;
                REG("ui.views.hero_house.ui_hero_house_detailed_item_labeUI", ui_hero_house_detailed_item_labeUI);
                class ui_hero_house_handbookUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_handbook");
                    }
                }
                hero_house.ui_hero_house_handbookUI = ui_hero_house_handbookUI;
                REG("ui.views.hero_house.ui_hero_house_handbookUI", ui_hero_house_handbookUI);
                class ui_hero_house_handbook_cellUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_handbook_cell");
                    }
                }
                hero_house.ui_hero_house_handbook_cellUI = ui_hero_house_handbook_cellUI;
                REG("ui.views.hero_house.ui_hero_house_handbook_cellUI", ui_hero_house_handbook_cellUI);
                class ui_hero_house_handbook_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_handbook_item");
                    }
                }
                hero_house.ui_hero_house_handbook_itemUI = ui_hero_house_handbook_itemUI;
                REG("ui.views.hero_house.ui_hero_house_handbook_itemUI", ui_hero_house_handbook_itemUI);
                class ui_hero_house_level_upUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_level_up");
                    }
                }
                hero_house.ui_hero_house_level_upUI = ui_hero_house_level_upUI;
                REG("ui.views.hero_house.ui_hero_house_level_upUI", ui_hero_house_level_upUI);
                class ui_hero_house_level_up_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_level_up_attr");
                    }
                }
                hero_house.ui_hero_house_level_up_attrUI = ui_hero_house_level_up_attrUI;
                REG("ui.views.hero_house.ui_hero_house_level_up_attrUI", ui_hero_house_level_up_attrUI);
                class ui_hero_house_level_up_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_level_up_item");
                    }
                }
                hero_house.ui_hero_house_level_up_itemUI = ui_hero_house_level_up_itemUI;
                REG("ui.views.hero_house.ui_hero_house_level_up_itemUI", ui_hero_house_level_up_itemUI);
                class ui_hero_house_level_up_switch_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_level_up_switch_attr");
                    }
                }
                hero_house.ui_hero_house_level_up_switch_attrUI = ui_hero_house_level_up_switch_attrUI;
                REG("ui.views.hero_house.ui_hero_house_level_up_switch_attrUI", ui_hero_house_level_up_switch_attrUI);
                class ui_hero_house_main_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_main_view");
                    }
                }
                hero_house.ui_hero_house_main_viewUI = ui_hero_house_main_viewUI;
                REG("ui.views.hero_house.ui_hero_house_main_viewUI", ui_hero_house_main_viewUI);
                class ui_hero_house_map_bot_item_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_map_bot_item_view");
                    }
                }
                hero_house.ui_hero_house_map_bot_item_viewUI = ui_hero_house_map_bot_item_viewUI;
                REG("ui.views.hero_house.ui_hero_house_map_bot_item_viewUI", ui_hero_house_map_bot_item_viewUI);
                class ui_hero_house_map_sel_item_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_map_sel_item_view");
                    }
                }
                hero_house.ui_hero_house_map_sel_item_viewUI = ui_hero_house_map_sel_item_viewUI;
                REG("ui.views.hero_house.ui_hero_house_map_sel_item_viewUI", ui_hero_house_map_sel_item_viewUI);
                class ui_hero_house_map_sel_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_map_sel_view");
                    }
                }
                hero_house.ui_hero_house_map_sel_viewUI = ui_hero_house_map_sel_viewUI;
                REG("ui.views.hero_house.ui_hero_house_map_sel_viewUI", ui_hero_house_map_sel_viewUI);
                class ui_hero_house_pop_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_pop_view");
                    }
                }
                hero_house.ui_hero_house_pop_viewUI = ui_hero_house_pop_viewUI;
                REG("ui.views.hero_house.ui_hero_house_pop_viewUI", ui_hero_house_pop_viewUI);
                class ui_hero_house_readUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_read");
                    }
                }
                hero_house.ui_hero_house_readUI = ui_hero_house_readUI;
                REG("ui.views.hero_house.ui_hero_house_readUI", ui_hero_house_readUI);
                class ui_hero_house_shengshi_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_shengshi_item");
                    }
                }
                hero_house.ui_hero_house_shengshi_itemUI = ui_hero_house_shengshi_itemUI;
                REG("ui.views.hero_house.ui_hero_house_shengshi_itemUI", ui_hero_house_shengshi_itemUI);
                class ui_hero_house_shengshi_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_shengshi_view");
                    }
                }
                hero_house.ui_hero_house_shengshi_viewUI = ui_hero_house_shengshi_viewUI;
                REG("ui.views.hero_house.ui_hero_house_shengshi_viewUI", ui_hero_house_shengshi_viewUI);
                class ui_hero_house_shopUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_shop");
                    }
                }
                hero_house.ui_hero_house_shopUI = ui_hero_house_shopUI;
                REG("ui.views.hero_house.ui_hero_house_shopUI", ui_hero_house_shopUI);
                class ui_hero_house_shop_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_shop_item");
                    }
                }
                hero_house.ui_hero_house_shop_itemUI = ui_hero_house_shop_itemUI;
                REG("ui.views.hero_house.ui_hero_house_shop_itemUI", ui_hero_house_shop_itemUI);
                class ui_hero_house_shop_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_shop_tab");
                    }
                }
                hero_house.ui_hero_house_shop_tabUI = ui_hero_house_shop_tabUI;
                REG("ui.views.hero_house.ui_hero_house_shop_tabUI", ui_hero_house_shop_tabUI);
                class ui_hero_house_showUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_show");
                    }
                }
                hero_house.ui_hero_house_showUI = ui_hero_house_showUI;
                REG("ui.views.hero_house.ui_hero_house_showUI", ui_hero_house_showUI);
                class ui_hero_house_storgeUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_storge");
                    }
                }
                hero_house.ui_hero_house_storgeUI = ui_hero_house_storgeUI;
                REG("ui.views.hero_house.ui_hero_house_storgeUI", ui_hero_house_storgeUI);
                class ui_hero_house_storge_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_storge_item");
                    }
                }
                hero_house.ui_hero_house_storge_itemUI = ui_hero_house_storge_itemUI;
                REG("ui.views.hero_house.ui_hero_house_storge_itemUI", ui_hero_house_storge_itemUI);
                class ui_hero_house_switch_equipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_switch_equip");
                    }
                }
                hero_house.ui_hero_house_switch_equipUI = ui_hero_house_switch_equipUI;
                REG("ui.views.hero_house.ui_hero_house_switch_equipUI", ui_hero_house_switch_equipUI);
                class ui_hero_house_switch_equip_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_switch_equip_item");
                    }
                }
                hero_house.ui_hero_house_switch_equip_itemUI = ui_hero_house_switch_equip_itemUI;
                REG("ui.views.hero_house.ui_hero_house_switch_equip_itemUI", ui_hero_house_switch_equip_itemUI);
                class ui_hero_house_tab_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_tab_item");
                    }
                }
                hero_house.ui_hero_house_tab_itemUI = ui_hero_house_tab_itemUI;
                REG("ui.views.hero_house.ui_hero_house_tab_itemUI", ui_hero_house_tab_itemUI);
                class ui_hero_house_taskitem_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_taskitem_view");
                    }
                }
                hero_house.ui_hero_house_taskitem_viewUI = ui_hero_house_taskitem_viewUI;
                REG("ui.views.hero_house.ui_hero_house_taskitem_viewUI", ui_hero_house_taskitem_viewUI);
                class ui_hero_house_task_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_task_view");
                    }
                }
                hero_house.ui_hero_house_task_viewUI = ui_hero_house_task_viewUI;
                REG("ui.views.hero_house.ui_hero_house_task_viewUI", ui_hero_house_task_viewUI);
                class ui_hero_house_weituo_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_weituo_view");
                    }
                }
                hero_house.ui_hero_house_weituo_viewUI = ui_hero_house_weituo_viewUI;
                REG("ui.views.hero_house.ui_hero_house_weituo_viewUI", ui_hero_house_weituo_viewUI);
                class ui_hero_house_ywt_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/ui_hero_house_ywt_item");
                    }
                }
                hero_house.ui_hero_house_ywt_itemUI = ui_hero_house_ywt_itemUI;
                REG("ui.views.hero_house.ui_hero_house_ywt_itemUI", ui_hero_house_ywt_itemUI);
                class u_hero_house_handbook_cellUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/hero_house/u_hero_house_handbook_cell");
                    }
                }
                hero_house.u_hero_house_handbook_cellUI = u_hero_house_handbook_cellUI;
                REG("ui.views.hero_house.u_hero_house_handbook_cellUI", u_hero_house_handbook_cellUI);
            })(hero_house = views.hero_house || (views.hero_house = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var huanzhuang;
            (function (huanzhuang) {
                class ui_huangzhuangtujian_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huanzhuang/ui_huangzhuangtujian_item");
                    }
                }
                huanzhuang.ui_huangzhuangtujian_itemUI = ui_huangzhuangtujian_itemUI;
                REG("ui.views.huanzhuang.ui_huangzhuangtujian_itemUI", ui_huangzhuangtujian_itemUI);
                class ui_huangzhuang_shuxing_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huanzhuang/ui_huangzhuang_shuxing_view");
                    }
                }
                huanzhuang.ui_huangzhuang_shuxing_viewUI = ui_huangzhuang_shuxing_viewUI;
                REG("ui.views.huanzhuang.ui_huangzhuang_shuxing_viewUI", ui_huangzhuang_shuxing_viewUI);
                class ui_huangzhuang_tab_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huanzhuang/ui_huangzhuang_tab_item");
                    }
                }
                huanzhuang.ui_huangzhuang_tab_itemUI = ui_huangzhuang_tab_itemUI;
                REG("ui.views.huanzhuang.ui_huangzhuang_tab_itemUI", ui_huangzhuang_tab_itemUI);
                class ui_huangzhuang_tujianUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huanzhuang/ui_huangzhuang_tujian");
                    }
                }
                huanzhuang.ui_huangzhuang_tujianUI = ui_huangzhuang_tujianUI;
                REG("ui.views.huanzhuang.ui_huangzhuang_tujianUI", ui_huangzhuang_tujianUI);
                class ui_huanzhuang_bot_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huanzhuang/ui_huanzhuang_bot_item");
                    }
                }
                huanzhuang.ui_huanzhuang_bot_itemUI = ui_huanzhuang_bot_itemUI;
                REG("ui.views.huanzhuang.ui_huanzhuang_bot_itemUI", ui_huanzhuang_bot_itemUI);
                class ui_huanzhuang_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huanzhuang/ui_huanzhuang_item");
                    }
                }
                huanzhuang.ui_huanzhuang_itemUI = ui_huanzhuang_itemUI;
                REG("ui.views.huanzhuang.ui_huanzhuang_itemUI", ui_huanzhuang_itemUI);
                class ui_huanzhuang_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huanzhuang/ui_huanzhuang_main");
                    }
                }
                huanzhuang.ui_huanzhuang_mainUI = ui_huanzhuang_mainUI;
                REG("ui.views.huanzhuang.ui_huanzhuang_mainUI", ui_huanzhuang_mainUI);
            })(huanzhuang = views.huanzhuang || (views.huanzhuang = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var huodong;
            (function (huodong) {
                class ui_01rate_btnUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_01rate_btn");
                    }
                }
                huodong.ui_01rate_btnUI = ui_01rate_btnUI;
                REG("ui.views.huodong.ui_01rate_btnUI", ui_01rate_btnUI);
                class ui_add_deskUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_add_desk");
                    }
                }
                huodong.ui_add_deskUI = ui_add_deskUI;
                REG("ui.views.huodong.ui_add_deskUI", ui_add_deskUI);
                class ui_baoxiang_chengzhangUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_baoxiang_chengzhang");
                    }
                }
                huodong.ui_baoxiang_chengzhangUI = ui_baoxiang_chengzhangUI;
                REG("ui.views.huodong.ui_baoxiang_chengzhangUI", ui_baoxiang_chengzhangUI);
                class ui_baoxiang_chengzhang_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_baoxiang_chengzhang_item");
                    }
                }
                huodong.ui_baoxiang_chengzhang_itemUI = ui_baoxiang_chengzhang_itemUI;
                REG("ui.views.huodong.ui_baoxiang_chengzhang_itemUI", ui_baoxiang_chengzhang_itemUI);
                class ui_baoxiang_chengzhang_slot_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_baoxiang_chengzhang_slot_item");
                    }
                }
                huodong.ui_baoxiang_chengzhang_slot_itemUI = ui_baoxiang_chengzhang_slot_itemUI;
                REG("ui.views.huodong.ui_baoxiang_chengzhang_slot_itemUI", ui_baoxiang_chengzhang_slot_itemUI);
                class ui_ccjj_item_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_ccjj_item_view");
                    }
                }
                huodong.ui_ccjj_item_viewUI = ui_ccjj_item_viewUI;
                REG("ui.views.huodong.ui_ccjj_item_viewUI", ui_ccjj_item_viewUI);
                class ui_ccjj_listUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_ccjj_list");
                    }
                }
                huodong.ui_ccjj_listUI = ui_ccjj_listUI;
                REG("ui.views.huodong.ui_ccjj_listUI", ui_ccjj_listUI);
                class ui_ccjj_tequan_item_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_ccjj_tequan_item_view");
                    }
                }
                huodong.ui_ccjj_tequan_item_viewUI = ui_ccjj_tequan_item_viewUI;
                REG("ui.views.huodong.ui_ccjj_tequan_item_viewUI", ui_ccjj_tequan_item_viewUI);
                class ui_ccjj_yuka_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_ccjj_yuka_item");
                    }
                }
                huodong.ui_ccjj_yuka_itemUI = ui_ccjj_yuka_itemUI;
                REG("ui.views.huodong.ui_ccjj_yuka_itemUI", ui_ccjj_yuka_itemUI);
                class ui_ccjj_zhongshen_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_ccjj_zhongshen_item");
                    }
                }
                huodong.ui_ccjj_zhongshen_itemUI = ui_ccjj_zhongshen_itemUI;
                REG("ui.views.huodong.ui_ccjj_zhongshen_itemUI", ui_ccjj_zhongshen_itemUI);
                class ui_daily_shareUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_daily_share");
                    }
                }
                huodong.ui_daily_shareUI = ui_daily_shareUI;
                REG("ui.views.huodong.ui_daily_shareUI", ui_daily_shareUI);
                class ui_game_clubUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_game_club");
                    }
                }
                huodong.ui_game_clubUI = ui_game_clubUI;
                REG("ui.views.huodong.ui_game_clubUI", ui_game_clubUI);
                class ui_game_club_menu_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_game_club_menu_item");
                    }
                }
                huodong.ui_game_club_menu_itemUI = ui_game_club_menu_itemUI;
                REG("ui.views.huodong.ui_game_club_menu_itemUI", ui_game_club_menu_itemUI);
                class ui_gem_chengzhangUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_gem_chengzhang");
                    }
                }
                huodong.ui_gem_chengzhangUI = ui_gem_chengzhangUI;
                REG("ui.views.huodong.ui_gem_chengzhangUI", ui_gem_chengzhangUI);
                class ui_gem_chengzhang_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_gem_chengzhang_item");
                    }
                }
                huodong.ui_gem_chengzhang_itemUI = ui_gem_chengzhang_itemUI;
                REG("ui.views.huodong.ui_gem_chengzhang_itemUI", ui_gem_chengzhang_itemUI);
                class ui_group_shareUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_group_share");
                    }
                }
                huodong.ui_group_shareUI = ui_group_shareUI;
                REG("ui.views.huodong.ui_group_shareUI", ui_group_shareUI);
                class ui_guanggaoUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_guanggao");
                    }
                }
                huodong.ui_guanggaoUI = ui_guanggaoUI;
                REG("ui.views.huodong.ui_guanggaoUI", ui_guanggaoUI);
                class ui_huodonglibao_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_huodonglibao_item");
                    }
                }
                huodong.ui_huodonglibao_itemUI = ui_huodonglibao_itemUI;
                REG("ui.views.huodong.ui_huodonglibao_itemUI", ui_huodonglibao_itemUI);
                class ui_huodonglibao_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_huodonglibao_view");
                    }
                }
                huodong.ui_huodonglibao_viewUI = ui_huodonglibao_viewUI;
                REG("ui.views.huodong.ui_huodonglibao_viewUI", ui_huodonglibao_viewUI);
                class ui_jubaopengUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_jubaopeng");
                    }
                }
                huodong.ui_jubaopengUI = ui_jubaopengUI;
                REG("ui.views.huodong.ui_jubaopengUI", ui_jubaopengUI);
                class ui_jubaopeng_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_jubaopeng_item");
                    }
                }
                huodong.ui_jubaopeng_itemUI = ui_jubaopeng_itemUI;
                REG("ui.views.huodong.ui_jubaopeng_itemUI", ui_jubaopeng_itemUI);
                class ui_jubaopeng_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_jubaopeng_tab");
                    }
                }
                huodong.ui_jubaopeng_tabUI = ui_jubaopeng_tabUI;
                REG("ui.views.huodong.ui_jubaopeng_tabUI", ui_jubaopeng_tabUI);
                class ui_juesechengzhang_item2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_juesechengzhang_item2");
                    }
                }
                huodong.ui_juesechengzhang_item2UI = ui_juesechengzhang_item2UI;
                REG("ui.views.huodong.ui_juesechengzhang_item2UI", ui_juesechengzhang_item2UI);
                class ui_juese_chengzhangUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_juese_chengzhang");
                    }
                }
                huodong.ui_juese_chengzhangUI = ui_juese_chengzhangUI;
                REG("ui.views.huodong.ui_juese_chengzhangUI", ui_juese_chengzhangUI);
                class ui_kaixiangdaji_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_kaixiangdaji_item");
                    }
                }
                huodong.ui_kaixiangdaji_itemUI = ui_kaixiangdaji_itemUI;
                REG("ui.views.huodong.ui_kaixiangdaji_itemUI", ui_kaixiangdaji_itemUI);
                class ui_kaixiangdaji_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_kaixiangdaji_view");
                    }
                }
                huodong.ui_kaixiangdaji_viewUI = ui_kaixiangdaji_viewUI;
                REG("ui.views.huodong.ui_kaixiangdaji_viewUI", ui_kaixiangdaji_viewUI);
                class ui_libao_gongnenglistUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_libao_gongnenglist");
                    }
                }
                huodong.ui_libao_gongnenglistUI = ui_libao_gongnenglistUI;
                REG("ui.views.huodong.ui_libao_gongnenglistUI", ui_libao_gongnenglistUI);
                class ui_meirilibao_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_meirilibao_item");
                    }
                }
                huodong.ui_meirilibao_itemUI = ui_meirilibao_itemUI;
                REG("ui.views.huodong.ui_meirilibao_itemUI", ui_meirilibao_itemUI);
                class ui_meirilibao_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_meirilibao_view");
                    }
                }
                huodong.ui_meirilibao_viewUI = ui_meirilibao_viewUI;
                REG("ui.views.huodong.ui_meirilibao_viewUI", ui_meirilibao_viewUI);
                class ui_mount_chengzhangUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_mount_chengzhang");
                    }
                }
                huodong.ui_mount_chengzhangUI = ui_mount_chengzhangUI;
                REG("ui.views.huodong.ui_mount_chengzhangUI", ui_mount_chengzhangUI);
                class ui_mount_chengzhang_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_mount_chengzhang_item");
                    }
                }
                huodong.ui_mount_chengzhang_itemUI = ui_mount_chengzhang_itemUI;
                REG("ui.views.huodong.ui_mount_chengzhang_itemUI", ui_mount_chengzhang_itemUI);
                class ui_newplayerfeastUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_newplayerfeast");
                    }
                }
                huodong.ui_newplayerfeastUI = ui_newplayerfeastUI;
                REG("ui.views.huodong.ui_newplayerfeastUI", ui_newplayerfeastUI);
                class ui_newplayerfeast_packageUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_newplayerfeast_package");
                    }
                }
                huodong.ui_newplayerfeast_packageUI = ui_newplayerfeast_packageUI;
                REG("ui.views.huodong.ui_newplayerfeast_packageUI", ui_newplayerfeast_packageUI);
                class ui_newplayerfeast_package_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_newplayerfeast_package_item");
                    }
                }
                huodong.ui_newplayerfeast_package_itemUI = ui_newplayerfeast_package_itemUI;
                REG("ui.views.huodong.ui_newplayerfeast_package_itemUI", ui_newplayerfeast_package_itemUI);
                class ui_newplayer_feast_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.createView(ui_newplayer_feast_itemUI.uiView);
                    }
                }
                ui_newplayer_feast_itemUI.uiView = { "type": "View", "props": { "width": 603, "height": 205 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "bg1", "skin": "remote/newplayerfeast/a1.png" }, "compId": 3, "child": [{ "type": "Sprite", "props": { "y": 63, "x": 101, "var": "numCon" }, "compId": 7 }] }, { "type": "Image", "props": { "y": 0, "x": 573, "var": "redImg", "skin": "remote/main/main/reddot.png" }, "compId": 4 }, { "type": "Label", "props": { "y": 48, "x": 124, "width": 464, "var": "timeTF", "text": "1小时50分后结束", "strokeColor": "#5E3021", "stroke": 2, "height": 24, "fontSize": 21, "font": "BOLD", "color": "#FFEFCD", "align": "right" }, "compId": 5 }], "loadList": ["remote/newplayerfeast/a1.png", "remote/main/main/reddot.png"], "loadList3D": [] };
                huodong.ui_newplayer_feast_itemUI = ui_newplayer_feast_itemUI;
                REG("ui.views.huodong.ui_newplayer_feast_itemUI", ui_newplayer_feast_itemUI);
                class ui_pet_chengzhangUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_pet_chengzhang");
                    }
                }
                huodong.ui_pet_chengzhangUI = ui_pet_chengzhangUI;
                REG("ui.views.huodong.ui_pet_chengzhangUI", ui_pet_chengzhangUI);
                class ui_pet_chengzhang_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_pet_chengzhang_item");
                    }
                }
                huodong.ui_pet_chengzhang_itemUI = ui_pet_chengzhang_itemUI;
                REG("ui.views.huodong.ui_pet_chengzhang_itemUI", ui_pet_chengzhang_itemUI);
                class ui_qiandao_horseUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_qiandao_horse");
                    }
                }
                huodong.ui_qiandao_horseUI = ui_qiandao_horseUI;
                REG("ui.views.huodong.ui_qiandao_horseUI", ui_qiandao_horseUI);
                class ui_qiandao_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_qiandao_item");
                    }
                }
                huodong.ui_qiandao_itemUI = ui_qiandao_itemUI;
                REG("ui.views.huodong.ui_qiandao_itemUI", ui_qiandao_itemUI);
                class ui_qiandao_item2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_qiandao_item2");
                    }
                }
                huodong.ui_qiandao_item2UI = ui_qiandao_item2UI;
                REG("ui.views.huodong.ui_qiandao_item2UI", ui_qiandao_item2UI);
                class ui_qiriqiandaoviewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_qiriqiandaoview");
                    }
                }
                huodong.ui_qiriqiandaoviewUI = ui_qiriqiandaoviewUI;
                REG("ui.views.huodong.ui_qiriqiandaoviewUI", ui_qiriqiandaoviewUI);
                class ui_qiriqiandaoview_newUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_qiriqiandaoview_new");
                    }
                }
                huodong.ui_qiriqiandaoview_newUI = ui_qiriqiandaoview_newUI;
                REG("ui.views.huodong.ui_qiriqiandaoview_newUI", ui_qiriqiandaoview_newUI);
                class ui_sanguoshiji_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_sanguoshiji_view");
                    }
                }
                huodong.ui_sanguoshiji_viewUI = ui_sanguoshiji_viewUI;
                REG("ui.views.huodong.ui_sanguoshiji_viewUI", ui_sanguoshiji_viewUI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_tab");
                    }
                }
                huodong.ui_tabUI = ui_tabUI;
                REG("ui.views.huodong.ui_tabUI", ui_tabUI);
                class ui_tehui_libao_item_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_tehui_libao_item_view");
                    }
                }
                huodong.ui_tehui_libao_item_viewUI = ui_tehui_libao_item_viewUI;
                REG("ui.views.huodong.ui_tehui_libao_item_viewUI", ui_tehui_libao_item_viewUI);
                class ui_tehui_libao_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_tehui_libao_view");
                    }
                }
                huodong.ui_tehui_libao_viewUI = ui_tehui_libao_viewUI;
                REG("ui.views.huodong.ui_tehui_libao_viewUI", ui_tehui_libao_viewUI);
                class ui_tequanka_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_tequanka_view");
                    }
                }
                huodong.ui_tequanka_viewUI = ui_tequanka_viewUI;
                REG("ui.views.huodong.ui_tequanka_viewUI", ui_tequanka_viewUI);
                class ui_xianshifuli_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_xianshifuli_item");
                    }
                }
                huodong.ui_xianshifuli_itemUI = ui_xianshifuli_itemUI;
                REG("ui.views.huodong.ui_xianshifuli_itemUI", ui_xianshifuli_itemUI);
                class ui_xianshifuli_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_xianshifuli_view");
                    }
                }
                huodong.ui_xianshifuli_viewUI = ui_xianshifuli_viewUI;
                REG("ui.views.huodong.ui_xianshifuli_viewUI", ui_xianshifuli_viewUI);
                class ui_xingfukuang_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_xingfukuang_main");
                    }
                }
                huodong.ui_xingfukuang_mainUI = ui_xingfukuang_mainUI;
                REG("ui.views.huodong.ui_xingfukuang_mainUI", ui_xingfukuang_mainUI);
                class ui_xingfu_tabItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_xingfu_tabItem");
                    }
                }
                huodong.ui_xingfu_tabItemUI = ui_xingfu_tabItemUI;
                REG("ui.views.huodong.ui_xingfu_tabItemUI", ui_xingfu_tabItemUI);
                class ui_xingfu_tabItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_xingfu_tabItem2");
                    }
                }
                huodong.ui_xingfu_tabItem2UI = ui_xingfu_tabItem2UI;
                REG("ui.views.huodong.ui_xingfu_tabItem2UI", ui_xingfu_tabItem2UI);
                class ui_xingrenlibao_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_xingrenlibao_view");
                    }
                }
                huodong.ui_xingrenlibao_viewUI = ui_xingrenlibao_viewUI;
                REG("ui.views.huodong.ui_xingrenlibao_viewUI", ui_xingrenlibao_viewUI);
                class ui_yueka_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_yueka_view");
                    }
                }
                huodong.ui_yueka_viewUI = ui_yueka_viewUI;
                REG("ui.views.huodong.ui_yueka_viewUI", ui_yueka_viewUI);
                class ui_zhekouItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_zhekouItem");
                    }
                }
                huodong.ui_zhekouItemUI = ui_zhekouItemUI;
                REG("ui.views.huodong.ui_zhekouItemUI", ui_zhekouItemUI);
                class ui_zhekouItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_zhekouItem1");
                    }
                }
                huodong.ui_zhekouItem1UI = ui_zhekouItem1UI;
                REG("ui.views.huodong.ui_zhekouItem1UI", ui_zhekouItem1UI);
                class ui_zhekouItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_zhekouItem2");
                    }
                }
                huodong.ui_zhekouItem2UI = ui_zhekouItem2UI;
                REG("ui.views.huodong.ui_zhekouItem2UI", ui_zhekouItem2UI);
                class ui_zhekoushangdian_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_zhekoushangdian_item");
                    }
                }
                huodong.ui_zhekoushangdian_itemUI = ui_zhekoushangdian_itemUI;
                REG("ui.views.huodong.ui_zhekoushangdian_itemUI", ui_zhekoushangdian_itemUI);
                class ui_zhekoushangdian_item1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_zhekoushangdian_item1");
                    }
                }
                huodong.ui_zhekoushangdian_item1UI = ui_zhekoushangdian_item1UI;
                REG("ui.views.huodong.ui_zhekoushangdian_item1UI", ui_zhekoushangdian_item1UI);
                class ui_zhekoushangdian_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_zhekoushangdian_view");
                    }
                }
                huodong.ui_zhekoushangdian_viewUI = ui_zhekoushangdian_viewUI;
                REG("ui.views.huodong.ui_zhekoushangdian_viewUI", ui_zhekoushangdian_viewUI);
                class ui_zhongshenka_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_zhongshenka_view");
                    }
                }
                huodong.ui_zhongshenka_viewUI = ui_zhongshenka_viewUI;
                REG("ui.views.huodong.ui_zhongshenka_viewUI", ui_zhongshenka_viewUI);
                class ui_zhongshen_item_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/huodong/ui_zhongshen_item_view");
                    }
                }
                huodong.ui_zhongshen_item_viewUI = ui_zhongshen_item_viewUI;
                REG("ui.views.huodong.ui_zhongshen_item_viewUI", ui_zhongshen_item_viewUI);
            })(huodong = views.huodong || (views.huodong = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var jiedoufeng;
            (function (jiedoufeng) {
                class ui_jiedoufengitemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jiedoufeng/ui_jiedoufengitem");
                    }
                }
                jiedoufeng.ui_jiedoufengitemUI = ui_jiedoufengitemUI;
                REG("ui.views.jiedoufeng.ui_jiedoufengitemUI", ui_jiedoufengitemUI);
                class ui_jiedoufengitem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jiedoufeng/ui_jiedoufengitem1");
                    }
                }
                jiedoufeng.ui_jiedoufengitem1UI = ui_jiedoufengitem1UI;
                REG("ui.views.jiedoufeng.ui_jiedoufengitem1UI", ui_jiedoufengitem1UI);
                class ui_jiedoufengviewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jiedoufeng/ui_jiedoufengview");
                    }
                }
                jiedoufeng.ui_jiedoufengviewUI = ui_jiedoufengviewUI;
                REG("ui.views.jiedoufeng.ui_jiedoufengviewUI", ui_jiedoufengviewUI);
                class ui_jiedoufengview1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jiedoufeng/ui_jiedoufengview1");
                    }
                }
                jiedoufeng.ui_jiedoufengview1UI = ui_jiedoufengview1UI;
                REG("ui.views.jiedoufeng.ui_jiedoufengview1UI", ui_jiedoufengview1UI);
            })(jiedoufeng = views.jiedoufeng || (views.jiedoufeng = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var jinsheng;
            (function (jinsheng) {
                class ui_jinshengItemUI extends Dialog {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jinsheng/ui_jinshengItem");
                    }
                }
                jinsheng.ui_jinshengItemUI = ui_jinshengItemUI;
                REG("ui.views.jinsheng.ui_jinshengItemUI", ui_jinshengItemUI);
                class ui_jinshengItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jinsheng/ui_jinshengItem1");
                    }
                }
                jinsheng.ui_jinshengItem1UI = ui_jinshengItem1UI;
                REG("ui.views.jinsheng.ui_jinshengItem1UI", ui_jinshengItem1UI);
                class ui_jinshengViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jinsheng/ui_jinshengView");
                    }
                }
                jinsheng.ui_jinshengViewUI = ui_jinshengViewUI;
                REG("ui.views.jinsheng.ui_jinshengViewUI", ui_jinshengViewUI);
                class ui_jinshengView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jinsheng/ui_jinshengView1");
                    }
                }
                jinsheng.ui_jinshengView1UI = ui_jinshengView1UI;
                REG("ui.views.jinsheng.ui_jinshengView1UI", ui_jinshengView1UI);
            })(jinsheng = views.jinsheng || (views.jinsheng = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var jjc;
            (function (jjc) {
                class ui_jjclcTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjclcTip");
                    }
                }
                jjc.ui_jjclcTipUI = ui_jjclcTipUI;
                REG("ui.views.jjc.ui_jjclcTipUI", ui_jjclcTipUI);
                class ui_jjcsbTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjcsbTip");
                    }
                }
                jjc.ui_jjcsbTipUI = ui_jjcsbTipUI;
                REG("ui.views.jjc.ui_jjcsbTipUI", ui_jjcsbTipUI);
                class ui_jjc_bsTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_bsTip");
                    }
                }
                jjc.ui_jjc_bsTipUI = ui_jjc_bsTipUI;
                REG("ui.views.jjc.ui_jjc_bsTipUI", ui_jjc_bsTipUI);
                class ui_jjc_fightUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_fight");
                    }
                }
                jjc.ui_jjc_fightUI = ui_jjc_fightUI;
                REG("ui.views.jjc.ui_jjc_fightUI", ui_jjc_fightUI);
                class ui_jjc_fight_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_fight_item");
                    }
                }
                jjc.ui_jjc_fight_itemUI = ui_jjc_fight_itemUI;
                REG("ui.views.jjc.ui_jjc_fight_itemUI", ui_jjc_fight_itemUI);
                class ui_jjc_fight_logUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_fight_log");
                    }
                }
                jjc.ui_jjc_fight_logUI = ui_jjc_fight_logUI;
                REG("ui.views.jjc.ui_jjc_fight_logUI", ui_jjc_fight_logUI);
                class ui_jjc_headitemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_headitem");
                    }
                }
                jjc.ui_jjc_headitemUI = ui_jjc_headitemUI;
                REG("ui.views.jjc.ui_jjc_headitemUI", ui_jjc_headitemUI);
                class ui_jjc_hyTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_hyTip");
                    }
                }
                jjc.ui_jjc_hyTipUI = ui_jjc_hyTipUI;
                REG("ui.views.jjc.ui_jjc_hyTipUI", ui_jjc_hyTipUI);
                class ui_jjc_jiesuan_item_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_jiesuan_item_view");
                    }
                }
                jjc.ui_jjc_jiesuan_item_viewUI = ui_jjc_jiesuan_item_viewUI;
                REG("ui.views.jjc.ui_jjc_jiesuan_item_viewUI", ui_jjc_jiesuan_item_viewUI);
                class ui_jjc_log_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_log_item");
                    }
                }
                jjc.ui_jjc_log_itemUI = ui_jjc_log_itemUI;
                REG("ui.views.jjc.ui_jjc_log_itemUI", ui_jjc_log_itemUI);
                class ui_jjc_log_new_item_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_log_new_item_view");
                    }
                }
                jjc.ui_jjc_log_new_item_viewUI = ui_jjc_log_new_item_viewUI;
                REG("ui.views.jjc.ui_jjc_log_new_item_viewUI", ui_jjc_log_new_item_viewUI);
                class ui_jjc_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_main");
                    }
                }
                jjc.ui_jjc_mainUI = ui_jjc_mainUI;
                REG("ui.views.jjc.ui_jjc_mainUI", ui_jjc_mainUI);
                class ui_jjc_other_item1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_other_item1");
                    }
                }
                jjc.ui_jjc_other_item1UI = ui_jjc_other_item1UI;
                REG("ui.views.jjc.ui_jjc_other_item1UI", ui_jjc_other_item1UI);
                class ui_jjc_owner_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_owner_item");
                    }
                }
                jjc.ui_jjc_owner_itemUI = ui_jjc_owner_itemUI;
                REG("ui.views.jjc.ui_jjc_owner_itemUI", ui_jjc_owner_itemUI);
                class ui_jjc_player_infoUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_player_info");
                    }
                }
                jjc.ui_jjc_player_infoUI = ui_jjc_player_infoUI;
                REG("ui.views.jjc.ui_jjc_player_infoUI", ui_jjc_player_infoUI);
                class ui_jjc_reward_showUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_reward_show");
                    }
                }
                jjc.ui_jjc_reward_showUI = ui_jjc_reward_showUI;
                REG("ui.views.jjc.ui_jjc_reward_showUI", ui_jjc_reward_showUI);
                class ui_jjc_reward_show_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_reward_show_item");
                    }
                }
                jjc.ui_jjc_reward_show_itemUI = ui_jjc_reward_show_itemUI;
                REG("ui.views.jjc.ui_jjc_reward_show_itemUI", ui_jjc_reward_show_itemUI);
                class ui_jjc_wgTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_wgTip");
                    }
                }
                jjc.ui_jjc_wgTipUI = ui_jjc_wgTipUI;
                REG("ui.views.jjc.ui_jjc_wgTipUI", ui_jjc_wgTipUI);
                class ui_jjc_zhTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_jjc_zhTip");
                    }
                }
                jjc.ui_jjc_zhTipUI = ui_jjc_zhTipUI;
                REG("ui.views.jjc.ui_jjc_zhTipUI", ui_jjc_zhTipUI);
                class ui_score_jjc_item_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_score_jjc_item_view");
                    }
                }
                jjc.ui_score_jjc_item_viewUI = ui_score_jjc_item_viewUI;
                REG("ui.views.jjc.ui_score_jjc_item_viewUI", ui_score_jjc_item_viewUI);
                class ui_score_jjc_succeedUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjc/ui_score_jjc_succeed");
                    }
                }
                jjc.ui_score_jjc_succeedUI = ui_score_jjc_succeedUI;
                REG("ui.views.jjc.ui_score_jjc_succeedUI", ui_score_jjc_succeedUI);
            })(jjc = views.jjc || (views.jjc = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var jjcAttr;
            (function (jjcAttr) {
                class ui_jjc_attrItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_jjc_attrItem1");
                    }
                }
                jjcAttr.ui_jjc_attrItem1UI = ui_jjc_attrItem1UI;
                REG("ui.views.jjcAttr.ui_jjc_attrItem1UI", ui_jjc_attrItem1UI);
                class ui_jjc_attrItem3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_jjc_attrItem3");
                    }
                }
                jjcAttr.ui_jjc_attrItem3UI = ui_jjc_attrItem3UI;
                REG("ui.views.jjcAttr.ui_jjc_attrItem3UI", ui_jjc_attrItem3UI);
                class ui_jjc_attrItem4UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_jjc_attrItem4");
                    }
                }
                jjcAttr.ui_jjc_attrItem4UI = ui_jjc_attrItem4UI;
                REG("ui.views.jjcAttr.ui_jjc_attrItem4UI", ui_jjc_attrItem4UI);
                class ui_jjc_attrViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_jjc_attrView");
                    }
                }
                jjcAttr.ui_jjc_attrViewUI = ui_jjc_attrViewUI;
                REG("ui.views.jjcAttr.ui_jjc_attrViewUI", ui_jjc_attrViewUI);
                class ui_jjc_attrView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_jjc_attrView1");
                    }
                }
                jjcAttr.ui_jjc_attrView1UI = ui_jjc_attrView1UI;
                REG("ui.views.jjcAttr.ui_jjc_attrView1UI", ui_jjc_attrView1UI);
                class ui_jjc_attrView2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_jjc_attrView2");
                    }
                }
                jjcAttr.ui_jjc_attrView2UI = ui_jjc_attrView2UI;
                REG("ui.views.jjcAttr.ui_jjc_attrView2UI", ui_jjc_attrView2UI);
                class ui_jjc_attrView3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_jjc_attrView3");
                    }
                }
                jjcAttr.ui_jjc_attrView3UI = ui_jjc_attrView3UI;
                REG("ui.views.jjcAttr.ui_jjc_attrView3UI", ui_jjc_attrView3UI);
                class ui_jjc_attrView4UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_jjc_attrView4");
                    }
                }
                jjcAttr.ui_jjc_attrView4UI = ui_jjc_attrView4UI;
                REG("ui.views.jjcAttr.ui_jjc_attrView4UI", ui_jjc_attrView4UI);
                class ui_jjc_attrView5UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_jjc_attrView5");
                    }
                }
                jjcAttr.ui_jjc_attrView5UI = ui_jjc_attrView5UI;
                REG("ui.views.jjcAttr.ui_jjc_attrView5UI", ui_jjc_attrView5UI);
                class ui_jjc_attrView6UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_jjc_attrView6");
                    }
                }
                jjcAttr.ui_jjc_attrView6UI = ui_jjc_attrView6UI;
                REG("ui.views.jjcAttr.ui_jjc_attrView6UI", ui_jjc_attrView6UI);
                class ui_jjc_attrView7UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_jjc_attrView7");
                    }
                }
                jjcAttr.ui_jjc_attrView7UI = ui_jjc_attrView7UI;
                REG("ui.views.jjcAttr.ui_jjc_attrView7UI", ui_jjc_attrView7UI);
                class ui_jjc_attrView8UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_jjc_attrView8");
                    }
                }
                jjcAttr.ui_jjc_attrView8UI = ui_jjc_attrView8UI;
                REG("ui.views.jjcAttr.ui_jjc_attrView8UI", ui_jjc_attrView8UI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjcAttr/ui_tab");
                    }
                }
                jjcAttr.ui_tabUI = ui_tabUI;
                REG("ui.views.jjcAttr.ui_tabUI", ui_tabUI);
            })(jjcAttr = views.jjcAttr || (views.jjcAttr = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var jjzml;
            (function (jjzml) {
                class ui_jjzml_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jjzml/ui_jjzml_item");
                    }
                }
                jjzml.ui_jjzml_itemUI = ui_jjzml_itemUI;
                REG("ui.views.jjzml.ui_jjzml_itemUI", ui_jjzml_itemUI);
                class ui_jjzml_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.createView(ui_jjzml_mainUI.uiView);
                    }
                }
                ui_jjzml_mainUI.uiView = { "type": "View", "props": { "width": 705, "height": 682 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": -301, "x": -18, "var": "bg1", "skin": "remote/jjzml/jjzml.png" }, "compId": 4 }, { "type": "Image", "props": { "y": -60, "x": 637, "var": "close1", "skin": "remote/jjzml/x.png" }, "compId": 5 }, { "type": "Image", "props": { "y": 536, "x": 256, "var": "btn1", "skin": "remote/jjzml/qiandao.png" }, "compId": 6 }, { "type": "Sprite", "props": { "y": 129, "x": 41, "var": "rewardCon" }, "compId": 17, "child": [{ "type": "ui_jjzml_item", "props": { "var": "item0", "runtime": "ui.views.jjzml.ui_jjzml_itemUI" }, "compId": 7 }, { "type": "ui_jjzml_item", "props": { "x": 159, "var": "item1", "runtime": "ui.views.jjzml.ui_jjzml_itemUI" }, "compId": 8 }, { "type": "ui_jjzml_item", "props": { "x": 323, "var": "item2", "runtime": "ui.views.jjzml.ui_jjzml_itemUI" }, "compId": 11 }, { "type": "ui_jjzml_item", "props": { "x": 484, "var": "item3", "runtime": "ui.views.jjzml.ui_jjzml_itemUI" }, "compId": 12 }, { "type": "ui_jjzml_item", "props": { "y": 196, "x": 69, "var": "item4", "runtime": "ui.views.jjzml.ui_jjzml_itemUI" }, "compId": 13 }, { "type": "ui_jjzml_item", "props": { "y": 196, "x": 241, "var": "item5", "runtime": "ui.views.jjzml.ui_jjzml_itemUI" }, "compId": 14 }, { "type": "ui_jjzml_item", "props": { "y": 196, "x": 407, "var": "item6", "runtime": "ui.views.jjzml.ui_jjzml_itemUI" }, "compId": 15 }] }, { "type": "Image", "props": { "y": -15, "x": 61, "var": "titleimg", "skin": "remote/jjzml/t0.png" }, "compId": 18 }, { "type": "Label", "props": { "y": 557, "width": 285, "var": "tf2", "text": "今日已签到", "strokeColor": "#904C23", "stroke": 2, "height": 22, "fontSize": 28, "font": "BOLD", "color": "#FCEEC7", "centerX": 0, "align": "center" }, "compId": 20 }], "loadList": ["remote/jjzml/jjzml.png", "remote/jjzml/x.png", "remote/jjzml/qiandao.png", "views/jjzml/ui_jjzml_item.scene", "remote/jjzml/t0.png"], "loadList3D": [] };
                jjzml.ui_jjzml_mainUI = ui_jjzml_mainUI;
                REG("ui.views.jjzml.ui_jjzml_mainUI", ui_jjzml_mainUI);
            })(jjzml = views.jjzml || (views.jjzml = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var jscd;
            (function (jscd) {
                class ui_jscd_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jscd/ui_jscd_item");
                    }
                }
                jscd.ui_jscd_itemUI = ui_jscd_itemUI;
                REG("ui.views.jscd.ui_jscd_itemUI", ui_jscd_itemUI);
                class ui_jscd_small_tab_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jscd/ui_jscd_small_tab_item");
                    }
                }
                jscd.ui_jscd_small_tab_itemUI = ui_jscd_small_tab_itemUI;
                REG("ui.views.jscd.ui_jscd_small_tab_itemUI", ui_jscd_small_tab_itemUI);
                class ui_jscd_tab_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jscd/ui_jscd_tab_item");
                    }
                }
                jscd.ui_jscd_tab_itemUI = ui_jscd_tab_itemUI;
                REG("ui.views.jscd.ui_jscd_tab_itemUI", ui_jscd_tab_itemUI);
                class ui_jscd_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/jscd/ui_jscd_view");
                    }
                }
                jscd.ui_jscd_viewUI = ui_jscd_viewUI;
                REG("ui.views.jscd.ui_jscd_viewUI", ui_jscd_viewUI);
            })(jscd = views.jscd || (views.jscd = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var kaifuchongbang;
            (function (kaifuchongbang) {
                class ui_KaiFuChongBangAwardItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/kaifuchongbang/ui_KaiFuChongBangAwardItem");
                    }
                }
                kaifuchongbang.ui_KaiFuChongBangAwardItemUI = ui_KaiFuChongBangAwardItemUI;
                REG("ui.views.kaifuchongbang.ui_KaiFuChongBangAwardItemUI", ui_KaiFuChongBangAwardItemUI);
                class ui_KaiFuChongBangAwardViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/kaifuchongbang/ui_KaiFuChongBangAwardView");
                    }
                }
                kaifuchongbang.ui_KaiFuChongBangAwardViewUI = ui_KaiFuChongBangAwardViewUI;
                REG("ui.views.kaifuchongbang.ui_KaiFuChongBangAwardViewUI", ui_KaiFuChongBangAwardViewUI);
                class ui_KaiFuChongBangitemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/kaifuchongbang/ui_KaiFuChongBangitem");
                    }
                }
                kaifuchongbang.ui_KaiFuChongBangitemUI = ui_KaiFuChongBangitemUI;
                REG("ui.views.kaifuchongbang.ui_KaiFuChongBangitemUI", ui_KaiFuChongBangitemUI);
                class ui_KaiFuChongBangitem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/kaifuchongbang/ui_KaiFuChongBangitem1");
                    }
                }
                kaifuchongbang.ui_KaiFuChongBangitem1UI = ui_KaiFuChongBangitem1UI;
                REG("ui.views.kaifuchongbang.ui_KaiFuChongBangitem1UI", ui_KaiFuChongBangitem1UI);
                class ui_KaiFuChongBangitem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/kaifuchongbang/ui_KaiFuChongBangitem2");
                    }
                }
                kaifuchongbang.ui_KaiFuChongBangitem2UI = ui_KaiFuChongBangitem2UI;
                REG("ui.views.kaifuchongbang.ui_KaiFuChongBangitem2UI", ui_KaiFuChongBangitem2UI);
                class ui_KaiFuChongBangitem3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/kaifuchongbang/ui_KaiFuChongBangitem3");
                    }
                }
                kaifuchongbang.ui_KaiFuChongBangitem3UI = ui_KaiFuChongBangitem3UI;
                REG("ui.views.kaifuchongbang.ui_KaiFuChongBangitem3UI", ui_KaiFuChongBangitem3UI);
                class ui_KaiFuChongBangViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/kaifuchongbang/ui_KaiFuChongBangView");
                    }
                }
                kaifuchongbang.ui_KaiFuChongBangViewUI = ui_KaiFuChongBangViewUI;
                REG("ui.views.kaifuchongbang.ui_KaiFuChongBangViewUI", ui_KaiFuChongBangViewUI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/kaifuchongbang/ui_tab");
                    }
                }
                kaifuchongbang.ui_tabUI = ui_tabUI;
                REG("ui.views.kaifuchongbang.ui_tabUI", ui_tabUI);
            })(kaifuchongbang = views.kaifuchongbang || (views.kaifuchongbang = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var laborday;
            (function (laborday) {
                class ui_children_markerUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_children_marker");
                    }
                }
                laborday.ui_children_markerUI = ui_children_markerUI;
                REG("ui.views.laborday.ui_children_markerUI", ui_children_markerUI);
                class ui_children_marker_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_children_marker_item");
                    }
                }
                laborday.ui_children_marker_itemUI = ui_children_marker_itemUI;
                REG("ui.views.laborday.ui_children_marker_itemUI", ui_children_marker_itemUI);
                class ui_children_packageUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_children_package");
                    }
                }
                laborday.ui_children_packageUI = ui_children_packageUI;
                REG("ui.views.laborday.ui_children_packageUI", ui_children_packageUI);
                class ui_children_package_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_children_package_item");
                    }
                }
                laborday.ui_children_package_itemUI = ui_children_package_itemUI;
                REG("ui.views.laborday.ui_children_package_itemUI", ui_children_package_itemUI);
                class ui_children_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_children_view");
                    }
                }
                laborday.ui_children_viewUI = ui_children_viewUI;
                REG("ui.views.laborday.ui_children_viewUI", ui_children_viewUI);
                class ui_laborday_exchangeUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_laborday_exchange");
                    }
                }
                laborday.ui_laborday_exchangeUI = ui_laborday_exchangeUI;
                REG("ui.views.laborday.ui_laborday_exchangeUI", ui_laborday_exchangeUI);
                class ui_laborday_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_laborday_view");
                    }
                }
                laborday.ui_laborday_viewUI = ui_laborday_viewUI;
                REG("ui.views.laborday.ui_laborday_viewUI", ui_laborday_viewUI);
                class ui_layorday_markerUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_layorday_marker");
                    }
                }
                laborday.ui_layorday_markerUI = ui_layorday_markerUI;
                REG("ui.views.laborday.ui_layorday_markerUI", ui_layorday_markerUI);
                class ui_layorday_marker_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_layorday_marker_item");
                    }
                }
                laborday.ui_layorday_marker_itemUI = ui_layorday_marker_itemUI;
                REG("ui.views.laborday.ui_layorday_marker_itemUI", ui_layorday_marker_itemUI);
                class ui_layorday_packageUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_layorday_package");
                    }
                }
                laborday.ui_layorday_packageUI = ui_layorday_packageUI;
                REG("ui.views.laborday.ui_layorday_packageUI", ui_layorday_packageUI);
                class ui_layorday_package_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_layorday_package_item");
                    }
                }
                laborday.ui_layorday_package_itemUI = ui_layorday_package_itemUI;
                REG("ui.views.laborday.ui_layorday_package_itemUI", ui_layorday_package_itemUI);
                class ui_layorday_rewardUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_layorday_reward");
                    }
                }
                laborday.ui_layorday_rewardUI = ui_layorday_rewardUI;
                REG("ui.views.laborday.ui_layorday_rewardUI", ui_layorday_rewardUI);
                class ui_layorday_reward_cell_showUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_layorday_reward_cell_show");
                    }
                }
                laborday.ui_layorday_reward_cell_showUI = ui_layorday_reward_cell_showUI;
                REG("ui.views.laborday.ui_layorday_reward_cell_showUI", ui_layorday_reward_cell_showUI);
                class ui_layorday_reward_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_layorday_reward_item");
                    }
                }
                laborday.ui_layorday_reward_itemUI = ui_layorday_reward_itemUI;
                REG("ui.views.laborday.ui_layorday_reward_itemUI", ui_layorday_reward_itemUI);
                class ui_midautumn_lbItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_midautumn_lbItem");
                    }
                }
                laborday.ui_midautumn_lbItemUI = ui_midautumn_lbItemUI;
                REG("ui.views.laborday.ui_midautumn_lbItemUI", ui_midautumn_lbItemUI);
                class ui_midautumn_lbviewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_midautumn_lbview");
                    }
                }
                laborday.ui_midautumn_lbviewUI = ui_midautumn_lbviewUI;
                REG("ui.views.laborday.ui_midautumn_lbviewUI", ui_midautumn_lbviewUI);
                class ui_midautumn_maviewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_midautumn_maview");
                    }
                }
                laborday.ui_midautumn_maviewUI = ui_midautumn_maviewUI;
                REG("ui.views.laborday.ui_midautumn_maviewUI", ui_midautumn_maviewUI);
                class ui_midautumn_qqItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_midautumn_qqItem");
                    }
                }
                laborday.ui_midautumn_qqItemUI = ui_midautumn_qqItemUI;
                REG("ui.views.laborday.ui_midautumn_qqItemUI", ui_midautumn_qqItemUI);
                class ui_midautumn_qqviewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_midautumn_qqview");
                    }
                }
                laborday.ui_midautumn_qqviewUI = ui_midautumn_qqviewUI;
                REG("ui.views.laborday.ui_midautumn_qqviewUI", ui_midautumn_qqviewUI);
                class ui_midautumn_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_midautumn_view");
                    }
                }
                laborday.ui_midautumn_viewUI = ui_midautumn_viewUI;
                REG("ui.views.laborday.ui_midautumn_viewUI", ui_midautumn_viewUI);
                class ui_yuanxiaoPackageItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_yuanxiaoPackageItem");
                    }
                }
                laborday.ui_yuanxiaoPackageItemUI = ui_yuanxiaoPackageItemUI;
                REG("ui.views.laborday.ui_yuanxiaoPackageItemUI", ui_yuanxiaoPackageItemUI);
                class ui_yuanxiaoPackageViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_yuanxiaoPackageView");
                    }
                }
                laborday.ui_yuanxiaoPackageViewUI = ui_yuanxiaoPackageViewUI;
                REG("ui.views.laborday.ui_yuanxiaoPackageViewUI", ui_yuanxiaoPackageViewUI);
                class ui_yuanxiaoShopItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_yuanxiaoShopItem");
                    }
                }
                laborday.ui_yuanxiaoShopItemUI = ui_yuanxiaoShopItemUI;
                REG("ui.views.laborday.ui_yuanxiaoShopItemUI", ui_yuanxiaoShopItemUI);
                class ui_yuanxiaoShopViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_yuanxiaoShopView");
                    }
                }
                laborday.ui_yuanxiaoShopViewUI = ui_yuanxiaoShopViewUI;
                REG("ui.views.laborday.ui_yuanxiaoShopViewUI", ui_yuanxiaoShopViewUI);
                class ui_yuanxiaoViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/laborday/ui_yuanxiaoView");
                    }
                }
                laborday.ui_yuanxiaoViewUI = ui_yuanxiaoViewUI;
                REG("ui.views.laborday.ui_yuanxiaoViewUI", ui_yuanxiaoViewUI);
            })(laborday = views.laborday || (views.laborday = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var lczqrank;
            (function (lczqrank) {
                class lczqRankItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lczqrank/lczqRankItem");
                    }
                }
                lczqrank.lczqRankItemUI = lczqRankItemUI;
                REG("ui.views.lczqrank.lczqRankItemUI", lczqRankItemUI);
                class lczqRankItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lczqrank/lczqRankItem1");
                    }
                }
                lczqrank.lczqRankItem1UI = lczqRankItem1UI;
                REG("ui.views.lczqrank.lczqRankItem1UI", lczqRankItem1UI);
                class lczqRankItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lczqrank/lczqRankItem2");
                    }
                }
                lczqrank.lczqRankItem2UI = lczqRankItem2UI;
                REG("ui.views.lczqrank.lczqRankItem2UI", lczqRankItem2UI);
                class lczqRankItem3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lczqrank/lczqRankItem3");
                    }
                }
                lczqrank.lczqRankItem3UI = lczqRankItem3UI;
                REG("ui.views.lczqrank.lczqRankItem3UI", lczqRankItem3UI);
                class lczqRankTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lczqrank/lczqRankTip");
                    }
                }
                lczqrank.lczqRankTipUI = lczqRankTipUI;
                REG("ui.views.lczqrank.lczqRankTipUI", lczqRankTipUI);
                class lczqRankTip1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lczqrank/lczqRankTip1");
                    }
                }
                lczqrank.lczqRankTip1UI = lczqRankTip1UI;
                REG("ui.views.lczqrank.lczqRankTip1UI", lczqRankTip1UI);
                class lczqRankViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lczqrank/lczqRankView");
                    }
                }
                lczqrank.lczqRankViewUI = lczqRankViewUI;
                REG("ui.views.lczqrank.lczqRankViewUI", lczqRankViewUI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lczqrank/ui_tab");
                    }
                }
                lczqrank.ui_tabUI = ui_tabUI;
                REG("ui.views.lczqrank.ui_tabUI", ui_tabUI);
            })(lczqrank = views.lczqrank || (views.lczqrank = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var libao;
            (function (libao) {
                class ui_liBaoItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/libao/ui_liBaoItem");
                    }
                }
                libao.ui_liBaoItemUI = ui_liBaoItemUI;
                REG("ui.views.libao.ui_liBaoItemUI", ui_liBaoItemUI);
                class ui_mountLiBaoViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/libao/ui_mountLiBaoView");
                    }
                }
                libao.ui_mountLiBaoViewUI = ui_mountLiBaoViewUI;
                REG("ui.views.libao.ui_mountLiBaoViewUI", ui_mountLiBaoViewUI);
                class ui_petLiBaoViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/libao/ui_petLiBaoView");
                    }
                }
                libao.ui_petLiBaoViewUI = ui_petLiBaoViewUI;
                REG("ui.views.libao.ui_petLiBaoViewUI", ui_petLiBaoViewUI);
                class ui_skinItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/libao/ui_skinItem");
                    }
                }
                libao.ui_skinItemUI = ui_skinItemUI;
                REG("ui.views.libao.ui_skinItemUI", ui_skinItemUI);
                class ui_skinSlotItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/libao/ui_skinSlotItem");
                    }
                }
                libao.ui_skinSlotItemUI = ui_skinSlotItemUI;
                REG("ui.views.libao.ui_skinSlotItemUI", ui_skinSlotItemUI);
                class ui_skinViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/libao/ui_skinView");
                    }
                }
                libao.ui_skinViewUI = ui_skinViewUI;
                REG("ui.views.libao.ui_skinViewUI", ui_skinViewUI);
            })(libao = views.libao || (views.libao = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var lingchong;
            (function (lingchong) {
                class ui_lingchongAttrItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongAttrItem");
                    }
                }
                lingchong.ui_lingchongAttrItemUI = ui_lingchongAttrItemUI;
                REG("ui.views.lingchong.ui_lingchongAttrItemUI", ui_lingchongAttrItemUI);
                class ui_lingchongAttrItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongAttrItem1");
                    }
                }
                lingchong.ui_lingchongAttrItem1UI = ui_lingchongAttrItem1UI;
                REG("ui.views.lingchong.ui_lingchongAttrItem1UI", ui_lingchongAttrItem1UI);
                class ui_lingchongAutoHCTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongAutoHCTip");
                    }
                }
                lingchong.ui_lingchongAutoHCTipUI = ui_lingchongAutoHCTipUI;
                REG("ui.views.lingchong.ui_lingchongAutoHCTipUI", ui_lingchongAutoHCTipUI);
                class ui_lingchongCuiQuViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongCuiQuView");
                    }
                }
                lingchong.ui_lingchongCuiQuViewUI = ui_lingchongCuiQuViewUI;
                REG("ui.views.lingchong.ui_lingchongCuiQuViewUI", ui_lingchongCuiQuViewUI);
                class ui_lingchongCZViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongCZView");
                    }
                }
                lingchong.ui_lingchongCZViewUI = ui_lingchongCZViewUI;
                REG("ui.views.lingchong.ui_lingchongCZViewUI", ui_lingchongCZViewUI);
                class ui_lingchongExchangeUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongExchange");
                    }
                }
                lingchong.ui_lingchongExchangeUI = ui_lingchongExchangeUI;
                REG("ui.views.lingchong.ui_lingchongExchangeUI", ui_lingchongExchangeUI);
                class ui_lingchongExchangeItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongExchangeItem");
                    }
                }
                lingchong.ui_lingchongExchangeItemUI = ui_lingchongExchangeItemUI;
                REG("ui.views.lingchong.ui_lingchongExchangeItemUI", ui_lingchongExchangeItemUI);
                class ui_lingchongFPItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongFPItem");
                    }
                }
                lingchong.ui_lingchongFPItemUI = ui_lingchongFPItemUI;
                REG("ui.views.lingchong.ui_lingchongFPItemUI", ui_lingchongFPItemUI);
                class ui_lingchongFPViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongFPView");
                    }
                }
                lingchong.ui_lingchongFPViewUI = ui_lingchongFPViewUI;
                REG("ui.views.lingchong.ui_lingchongFPViewUI", ui_lingchongFPViewUI);
                class ui_lingchongItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongItem");
                    }
                }
                lingchong.ui_lingchongItemUI = ui_lingchongItemUI;
                REG("ui.views.lingchong.ui_lingchongItemUI", ui_lingchongItemUI);
                class ui_lingchongItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongItem1");
                    }
                }
                lingchong.ui_lingchongItem1UI = ui_lingchongItem1UI;
                REG("ui.views.lingchong.ui_lingchongItem1UI", ui_lingchongItem1UI);
                class ui_lingchongItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongItem2");
                    }
                }
                lingchong.ui_lingchongItem2UI = ui_lingchongItem2UI;
                REG("ui.views.lingchong.ui_lingchongItem2UI", ui_lingchongItem2UI);
                class ui_lingchongJNItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongJNItem");
                    }
                }
                lingchong.ui_lingchongJNItemUI = ui_lingchongJNItemUI;
                REG("ui.views.lingchong.ui_lingchongJNItemUI", ui_lingchongJNItemUI);
                class ui_lingchongLvViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongLvView");
                    }
                }
                lingchong.ui_lingchongLvViewUI = ui_lingchongLvViewUI;
                REG("ui.views.lingchong.ui_lingchongLvViewUI", ui_lingchongLvViewUI);
                class ui_lingchongMainViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongMainView");
                    }
                }
                lingchong.ui_lingchongMainViewUI = ui_lingchongMainViewUI;
                REG("ui.views.lingchong.ui_lingchongMainViewUI", ui_lingchongMainViewUI);
                class ui_lingchongPYViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongPYView");
                    }
                }
                lingchong.ui_lingchongPYViewUI = ui_lingchongPYViewUI;
                REG("ui.views.lingchong.ui_lingchongPYViewUI", ui_lingchongPYViewUI);
                class ui_lingchongRHItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongRHItem");
                    }
                }
                lingchong.ui_lingchongRHItemUI = ui_lingchongRHItemUI;
                REG("ui.views.lingchong.ui_lingchongRHItemUI", ui_lingchongRHItemUI);
                class ui_lingchongRHViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongRHView");
                    }
                }
                lingchong.ui_lingchongRHViewUI = ui_lingchongRHViewUI;
                REG("ui.views.lingchong.ui_lingchongRHViewUI", ui_lingchongRHViewUI);
                class ui_lingchongStarViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongStarView");
                    }
                }
                lingchong.ui_lingchongStarViewUI = ui_lingchongStarViewUI;
                REG("ui.views.lingchong.ui_lingchongStarViewUI", ui_lingchongStarViewUI);
                class ui_lingchongTJViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongTJView");
                    }
                }
                lingchong.ui_lingchongTJViewUI = ui_lingchongTJViewUI;
                REG("ui.views.lingchong.ui_lingchongTJViewUI", ui_lingchongTJViewUI);
                class ui_lingchongXMItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongXMItem");
                    }
                }
                lingchong.ui_lingchongXMItemUI = ui_lingchongXMItemUI;
                REG("ui.views.lingchong.ui_lingchongXMItemUI", ui_lingchongXMItemUI);
                class ui_lingchongXMItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongXMItem1");
                    }
                }
                lingchong.ui_lingchongXMItem1UI = ui_lingchongXMItem1UI;
                REG("ui.views.lingchong.ui_lingchongXMItem1UI", ui_lingchongXMItem1UI);
                class ui_lingchongXMJXViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongXMJXView");
                    }
                }
                lingchong.ui_lingchongXMJXViewUI = ui_lingchongXMJXViewUI;
                REG("ui.views.lingchong.ui_lingchongXMJXViewUI", ui_lingchongXMJXViewUI);
                class ui_lingchongXMTJViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongXMTJView");
                    }
                }
                lingchong.ui_lingchongXMTJViewUI = ui_lingchongXMTJViewUI;
                REG("ui.views.lingchong.ui_lingchongXMTJViewUI", ui_lingchongXMTJViewUI);
                class ui_lingchongZHViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchongZHView");
                    }
                }
                lingchong.ui_lingchongZHViewUI = ui_lingchongZHViewUI;
                REG("ui.views.lingchong.ui_lingchongZHViewUI", ui_lingchongZHViewUI);
                class ui_lingchong_attr1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchong_attr1");
                    }
                }
                lingchong.ui_lingchong_attr1UI = ui_lingchong_attr1UI;
                REG("ui.views.lingchong.ui_lingchong_attr1UI", ui_lingchong_attr1UI);
                class ui_lingchong_combox_list01UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchong_combox_list01");
                    }
                }
                lingchong.ui_lingchong_combox_list01UI = ui_lingchong_combox_list01UI;
                REG("ui.views.lingchong.ui_lingchong_combox_list01UI", ui_lingchong_combox_list01UI);
                class ui_lingchong_list_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchong_list_attr");
                    }
                }
                lingchong.ui_lingchong_list_attrUI = ui_lingchong_list_attrUI;
                REG("ui.views.lingchong.ui_lingchong_list_attrUI", ui_lingchong_list_attrUI);
                class ui_lingchong_RH_succeedUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchong_RH_succeed");
                    }
                }
                lingchong.ui_lingchong_RH_succeedUI = ui_lingchong_RH_succeedUI;
                REG("ui.views.lingchong.ui_lingchong_RH_succeedUI", ui_lingchong_RH_succeedUI);
                class ui_lingchouGMViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_lingchouGMView");
                    }
                }
                lingchong.ui_lingchouGMViewUI = ui_lingchouGMViewUI;
                REG("ui.views.lingchong.ui_lingchouGMViewUI", ui_lingchouGMViewUI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_tab");
                    }
                }
                lingchong.ui_tabUI = ui_tabUI;
                REG("ui.views.lingchong.ui_tabUI", ui_tabUI);
                class ui_tab1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchong/ui_tab1");
                    }
                }
                lingchong.ui_tab1UI = ui_tab1UI;
                REG("ui.views.lingchong.ui_tab1UI", ui_tab1UI);
            })(lingchong = views.lingchong || (views.lingchong = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var lingchongfeast;
            (function (lingchongfeast) {
                class ui_lingchong_feastUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/lingchongfeast/ui_lingchong_feast");
                    }
                }
                lingchongfeast.ui_lingchong_feastUI = ui_lingchong_feastUI;
                REG("ui.views.lingchongfeast.ui_lingchong_feastUI", ui_lingchong_feastUI);
            })(lingchongfeast = views.lingchongfeast || (views.lingchongfeast = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var little;
            (function (little) {
                class littlegame_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/little/littlegame_item");
                    }
                }
                little.littlegame_itemUI = littlegame_itemUI;
                REG("ui.views.little.littlegame_itemUI", littlegame_itemUI);
                class ui_littlegame_succeedUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/little/ui_littlegame_succeed");
                    }
                }
                little.ui_littlegame_succeedUI = ui_littlegame_succeedUI;
                REG("ui.views.little.ui_littlegame_succeedUI", ui_littlegame_succeedUI);
            })(little = views.little || (views.little = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var login;
            (function (login) {
                class ui_loginUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/login/ui_login");
                    }
                }
                login.ui_loginUI = ui_loginUI;
                REG("ui.views.login.ui_loginUI", ui_loginUI);
                class ui_loginQuFuItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/login/ui_loginQuFuItem");
                    }
                }
                login.ui_loginQuFuItemUI = ui_loginQuFuItemUI;
                REG("ui.views.login.ui_loginQuFuItemUI", ui_loginQuFuItemUI);
                class ui_loginQuFuItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/login/ui_loginQuFuItem1");
                    }
                }
                login.ui_loginQuFuItem1UI = ui_loginQuFuItem1UI;
                REG("ui.views.login.ui_loginQuFuItem1UI", ui_loginQuFuItem1UI);
                class ui_loginQuFuViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/login/ui_loginQuFuView");
                    }
                }
                login.ui_loginQuFuViewUI = ui_loginQuFuViewUI;
                REG("ui.views.login.ui_loginQuFuViewUI", ui_loginQuFuViewUI);
                class ui_login_newUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/login/ui_login_new");
                    }
                }
                login.ui_login_newUI = ui_login_newUI;
                REG("ui.views.login.ui_login_newUI", ui_login_newUI);
            })(login = views.login || (views.login = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var mail;
            (function (mail) {
                class mailshowUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mail/mailshow");
                    }
                }
                mail.mailshowUI = mailshowUI;
                REG("ui.views.mail.mailshowUI", mailshowUI);
                class mail_slot_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mail/mail_slot_item");
                    }
                }
                mail.mail_slot_itemUI = mail_slot_itemUI;
                REG("ui.views.mail.mail_slot_itemUI", mail_slot_itemUI);
                class mail_tf_contentUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mail/mail_tf_content");
                    }
                }
                mail.mail_tf_contentUI = mail_tf_contentUI;
                REG("ui.views.mail.mail_tf_contentUI", mail_tf_contentUI);
                class mail_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mail/mail_view");
                    }
                }
                mail.mail_viewUI = mail_viewUI;
                REG("ui.views.mail.mail_viewUI", mail_viewUI);
                class mallitemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mail/mallitem");
                    }
                }
                mail.mallitemUI = mallitemUI;
                REG("ui.views.mail.mallitemUI", mallitemUI);
            })(mail = views.mail || (views.mail = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var main;
            (function (main) {
                var maincell;
                (function (maincell) {
                    class ui_main_juanzhouUI extends View {
                        constructor() { super(); }
                        createChildren() {
                            super.createChildren();
                            this.loadScene("views/main/maincell/ui_main_juanzhou");
                        }
                    }
                    maincell.ui_main_juanzhouUI = ui_main_juanzhouUI;
                    REG("ui.views.main.maincell.ui_main_juanzhouUI", ui_main_juanzhouUI);
                    class ui_main_liebiao_btnUI extends View {
                        constructor() { super(); }
                        createChildren() {
                            super.createChildren();
                            this.loadScene("views/main/maincell/ui_main_liebiao_btn");
                        }
                    }
                    maincell.ui_main_liebiao_btnUI = ui_main_liebiao_btnUI;
                    REG("ui.views.main.maincell.ui_main_liebiao_btnUI", ui_main_liebiao_btnUI);
                })(maincell = main.maincell || (main.maincell = {}));
            })(main = views.main || (views.main = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var main;
            (function (main) {
                class ui_attr_detailedUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_attr_detailed");
                    }
                }
                main.ui_attr_detailedUI = ui_attr_detailedUI;
                REG("ui.views.main.ui_attr_detailedUI", ui_attr_detailedUI);
                class ui_avatar_showUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_avatar_show");
                    }
                }
                main.ui_avatar_showUI = ui_avatar_showUI;
                REG("ui.views.main.ui_avatar_showUI", ui_avatar_showUI);
                class ui_bottom_little_btnUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_bottom_little_btn");
                    }
                }
                main.ui_bottom_little_btnUI = ui_bottom_little_btnUI;
                REG("ui.views.main.ui_bottom_little_btnUI", ui_bottom_little_btnUI);
                class ui_bottom_little_btn2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_bottom_little_btn2");
                    }
                }
                main.ui_bottom_little_btn2UI = ui_bottom_little_btn2UI;
                REG("ui.views.main.ui_bottom_little_btn2UI", ui_bottom_little_btn2UI);
                class ui_cebianlangUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_cebianlang");
                    }
                }
                main.ui_cebianlangUI = ui_cebianlangUI;
                REG("ui.views.main.ui_cebianlangUI", ui_cebianlangUI);
                class ui_checkbox_01UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_checkbox_01");
                    }
                }
                main.ui_checkbox_01UI = ui_checkbox_01UI;
                REG("ui.views.main.ui_checkbox_01UI", ui_checkbox_01UI);
                class ui_checkbox_02UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_checkbox_02");
                    }
                }
                main.ui_checkbox_02UI = ui_checkbox_02UI;
                REG("ui.views.main.ui_checkbox_02UI", ui_checkbox_02UI);
                class ui_chestlv_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_chestlv_item");
                    }
                }
                main.ui_chestlv_itemUI = ui_chestlv_itemUI;
                REG("ui.views.main.ui_chestlv_itemUI", ui_chestlv_itemUI);
                class ui_chest_quick_useUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_chest_quick_use");
                    }
                }
                main.ui_chest_quick_useUI = ui_chest_quick_useUI;
                REG("ui.views.main.ui_chest_quick_useUI", ui_chest_quick_useUI);
                class ui_equip_switchUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_equip_switch");
                    }
                }
                main.ui_equip_switchUI = ui_equip_switchUI;
                REG("ui.views.main.ui_equip_switchUI", ui_equip_switchUI);
                class ui_equip_tipsUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_equip_tips");
                    }
                }
                main.ui_equip_tipsUI = ui_equip_tipsUI;
                REG("ui.views.main.ui_equip_tipsUI", ui_equip_tipsUI);
                class ui_equip_updateUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_equip_update");
                    }
                }
                main.ui_equip_updateUI = ui_equip_updateUI;
                REG("ui.views.main.ui_equip_updateUI", ui_equip_updateUI);
                class ui_game_maskUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.createView(ui_game_maskUI.uiView);
                    }
                }
                ui_game_maskUI.uiView = { "type": "View", "props": { "width": 750, "height": 1334 }, "compId": 2, "child": [{ "type": "Image", "props": { "width": 750, "var": "bg", "height": 1630, "centerY": 0, "centerX": 0 }, "compId": 4, "child": [{ "type": "Label", "props": { "y": 651, "x": 314, "var": "tf", "text": "请稍等...", "fontSize": 32, "color": "#ffffff", "centerY": 0, "centerX": 0 }, "compId": 3 }] }, { "type": "Image", "props": { "y": 667, "x": 375, "var": "juhua", "skin": "static/jh.png", "rotation": 0, "centerY": 0, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 11 }], "loadList": ["static/jh.png"], "loadList3D": [] };
                main.ui_game_maskUI = ui_game_maskUI;
                REG("ui.views.main.ui_game_maskUI", ui_game_maskUI);
                class ui_guaji_showUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_guaji_show");
                    }
                }
                main.ui_guaji_showUI = ui_guaji_showUI;
                REG("ui.views.main.ui_guaji_showUI", ui_guaji_showUI);
                class ui_gzhViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_gzhView");
                    }
                }
                main.ui_gzhViewUI = ui_gzhViewUI;
                REG("ui.views.main.ui_gzhViewUI", ui_gzhViewUI);
                class ui_help_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_help_view");
                    }
                }
                main.ui_help_viewUI = ui_help_viewUI;
                REG("ui.views.main.ui_help_viewUI", ui_help_viewUI);
                class ui_high_quick_num_setting_list_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_high_quick_num_setting_list_attr");
                    }
                }
                main.ui_high_quick_num_setting_list_attrUI = ui_high_quick_num_setting_list_attrUI;
                REG("ui.views.main.ui_high_quick_num_setting_list_attrUI", ui_high_quick_num_setting_list_attrUI);
                class ui_high_quick_setting_list_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_high_quick_setting_list_attr");
                    }
                }
                main.ui_high_quick_setting_list_attrUI = ui_high_quick_setting_list_attrUI;
                REG("ui.views.main.ui_high_quick_setting_list_attrUI", ui_high_quick_setting_list_attrUI);
                class ui_huodong_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_huodong_item");
                    }
                }
                main.ui_huodong_itemUI = ui_huodong_itemUI;
                REG("ui.views.main.ui_huodong_itemUI", ui_huodong_itemUI);
                class ui_jccdViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_jccdView");
                    }
                }
                main.ui_jccdViewUI = ui_jccdViewUI;
                REG("ui.views.main.ui_jccdViewUI", ui_jccdViewUI);
                class ui_little_iconUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_little_icon");
                    }
                }
                main.ui_little_iconUI = ui_little_iconUI;
                REG("ui.views.main.ui_little_iconUI", ui_little_iconUI);
                class ui_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main");
                    }
                }
                main.ui_mainUI = ui_mainUI;
                REG("ui.views.main.ui_mainUI", ui_mainUI);
                class ui_main_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_attr");
                    }
                }
                main.ui_main_attrUI = ui_main_attrUI;
                REG("ui.views.main.ui_main_attrUI", ui_main_attrUI);
                class ui_main_attr1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_attr1");
                    }
                }
                main.ui_main_attr1UI = ui_main_attr1UI;
                REG("ui.views.main.ui_main_attr1UI", ui_main_attr1UI);
                class ui_main_attr2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_attr2");
                    }
                }
                main.ui_main_attr2UI = ui_main_attr2UI;
                REG("ui.views.main.ui_main_attr2UI", ui_main_attr2UI);
                class ui_main_bottom_iconUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_bottom_icon");
                    }
                }
                main.ui_main_bottom_iconUI = ui_main_bottom_iconUI;
                REG("ui.views.main.ui_main_bottom_iconUI", ui_main_bottom_iconUI);
                class ui_main_bottom_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_bottom_item");
                    }
                }
                main.ui_main_bottom_itemUI = ui_main_bottom_itemUI;
                REG("ui.views.main.ui_main_bottom_itemUI", ui_main_bottom_itemUI);
                class ui_main_bottom_popUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_bottom_pop");
                    }
                }
                main.ui_main_bottom_popUI = ui_main_bottom_popUI;
                REG("ui.views.main.ui_main_bottom_popUI", ui_main_bottom_popUI);
                class ui_main_bottom_small_iconUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_bottom_small_icon");
                    }
                }
                main.ui_main_bottom_small_iconUI = ui_main_bottom_small_iconUI;
                REG("ui.views.main.ui_main_bottom_small_iconUI", ui_main_bottom_small_iconUI);
                class ui_main_center_iconUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_center_icon");
                    }
                }
                main.ui_main_center_iconUI = ui_main_center_iconUI;
                REG("ui.views.main.ui_main_center_iconUI", ui_main_center_iconUI);
                class ui_main_chest_lvupUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_chest_lvup");
                    }
                }
                main.ui_main_chest_lvupUI = ui_main_chest_lvupUI;
                REG("ui.views.main.ui_main_chest_lvupUI", ui_main_chest_lvupUI);
                class ui_main_chest_lvupItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_chest_lvupItem");
                    }
                }
                main.ui_main_chest_lvupItemUI = ui_main_chest_lvupItemUI;
                REG("ui.views.main.ui_main_chest_lvupItemUI", ui_main_chest_lvupItemUI);
                class ui_main_icon_09UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_icon_09");
                    }
                }
                main.ui_main_icon_09UI = ui_main_icon_09UI;
                REG("ui.views.main.ui_main_icon_09UI", ui_main_icon_09UI);
                class ui_main_midUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_mid");
                    }
                }
                main.ui_main_midUI = ui_main_midUI;
                REG("ui.views.main.ui_main_midUI", ui_main_midUI);
                class ui_main_show_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_show_attr");
                    }
                }
                main.ui_main_show_attrUI = ui_main_show_attrUI;
                REG("ui.views.main.ui_main_show_attrUI", ui_main_show_attrUI);
                class ui_main_zhuangbeiUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_zhuangbei");
                    }
                }
                main.ui_main_zhuangbeiUI = ui_main_zhuangbeiUI;
                REG("ui.views.main.ui_main_zhuangbeiUI", ui_main_zhuangbeiUI);
                class ui_main_zuoqi_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_zuoqi_attr");
                    }
                }
                main.ui_main_zuoqi_attrUI = ui_main_zuoqi_attrUI;
                REG("ui.views.main.ui_main_zuoqi_attrUI", ui_main_zuoqi_attrUI);
                class ui_main_zuoqi_attr2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_main_zuoqi_attr2");
                    }
                }
                main.ui_main_zuoqi_attr2UI = ui_main_zuoqi_attr2UI;
                REG("ui.views.main.ui_main_zuoqi_attr2UI", ui_main_zuoqi_attr2UI);
                class ui_notice_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_notice_item");
                    }
                }
                main.ui_notice_itemUI = ui_notice_itemUI;
                REG("ui.views.main.ui_notice_itemUI", ui_notice_itemUI);
                class ui_paomaLightUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_paomaLight");
                    }
                }
                main.ui_paomaLightUI = ui_paomaLightUI;
                REG("ui.views.main.ui_paomaLightUI", ui_paomaLightUI);
                class ui_pop_01discountUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_pop_01discount");
                    }
                }
                main.ui_pop_01discountUI = ui_pop_01discountUI;
                REG("ui.views.main.ui_pop_01discountUI", ui_pop_01discountUI);
                class ui_pop_noticeUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_pop_notice");
                    }
                }
                main.ui_pop_noticeUI = ui_pop_noticeUI;
                REG("ui.views.main.ui_pop_noticeUI", ui_pop_noticeUI);
                class ui_quick_combox_list01UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_quick_combox_list01");
                    }
                }
                main.ui_quick_combox_list01UI = ui_quick_combox_list01UI;
                REG("ui.views.main.ui_quick_combox_list01UI", ui_quick_combox_list01UI);
                class ui_quick_settingUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_quick_setting");
                    }
                }
                main.ui_quick_settingUI = ui_quick_settingUI;
                REG("ui.views.main.ui_quick_settingUI", ui_quick_settingUI);
                class ui_quick_setting_highUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_quick_setting_high");
                    }
                }
                main.ui_quick_setting_highUI = ui_quick_setting_highUI;
                REG("ui.views.main.ui_quick_setting_highUI", ui_quick_setting_highUI);
                class ui_quick_setting_list_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_quick_setting_list_attr");
                    }
                }
                main.ui_quick_setting_list_attrUI = ui_quick_setting_list_attrUI;
                REG("ui.views.main.ui_quick_setting_list_attrUI", ui_quick_setting_list_attrUI);
                class ui_reward_getUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_reward_get");
                    }
                }
                main.ui_reward_getUI = ui_reward_getUI;
                REG("ui.views.main.ui_reward_getUI", ui_reward_getUI);
                class ui_shopBuyViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_shopBuyView");
                    }
                }
                main.ui_shopBuyViewUI = ui_shopBuyViewUI;
                REG("ui.views.main.ui_shopBuyViewUI", ui_shopBuyViewUI);
                class ui_slot_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_slot_item");
                    }
                }
                main.ui_slot_itemUI = ui_slot_itemUI;
                REG("ui.views.main.ui_slot_itemUI", ui_slot_itemUI);
                class ui_slot_item1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_slot_item1");
                    }
                }
                main.ui_slot_item1UI = ui_slot_item1UI;
                REG("ui.views.main.ui_slot_item1UI", ui_slot_item1UI);
                class ui_slot_item2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_slot_item2");
                    }
                }
                main.ui_slot_item2UI = ui_slot_item2UI;
                REG("ui.views.main.ui_slot_item2UI", ui_slot_item2UI);
                class ui_slot_item3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_slot_item3");
                    }
                }
                main.ui_slot_item3UI = ui_slot_item3UI;
                REG("ui.views.main.ui_slot_item3UI", ui_slot_item3UI);
                class ui_slot_item_newplayerUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_slot_item_newplayer");
                    }
                }
                main.ui_slot_item_newplayerUI = ui_slot_item_newplayerUI;
                REG("ui.views.main.ui_slot_item_newplayerUI", ui_slot_item_newplayerUI);
                class ui_slot_item_rewardUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_slot_item_reward");
                    }
                }
                main.ui_slot_item_rewardUI = ui_slot_item_rewardUI;
                REG("ui.views.main.ui_slot_item_rewardUI", ui_slot_item_rewardUI);
                class ui_slot_lingqu_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_slot_lingqu_item");
                    }
                }
                main.ui_slot_lingqu_itemUI = ui_slot_lingqu_itemUI;
                REG("ui.views.main.ui_slot_lingqu_itemUI", ui_slot_lingqu_itemUI);
                class ui_top_iconUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_top_icon");
                    }
                }
                main.ui_top_iconUI = ui_top_iconUI;
                REG("ui.views.main.ui_top_iconUI", ui_top_iconUI);
                class ui_txt_tipsUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_txt_tips");
                    }
                }
                main.ui_txt_tipsUI = ui_txt_tipsUI;
                REG("ui.views.main.ui_txt_tipsUI", ui_txt_tipsUI);
                class ui_unlock_heroUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_unlock_hero");
                    }
                }
                main.ui_unlock_heroUI = ui_unlock_heroUI;
                REG("ui.views.main.ui_unlock_heroUI", ui_unlock_heroUI);
                class ui_vipKFViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/main/ui_vipKFView");
                    }
                }
                main.ui_vipKFViewUI = ui_vipKFViewUI;
                REG("ui.views.main.ui_vipKFViewUI", ui_vipKFViewUI);
            })(main = views.main || (views.main = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var mall;
            (function (mall) {
                class ui_mallUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mall/ui_mall");
                    }
                }
                mall.ui_mallUI = ui_mallUI;
                REG("ui.views.mall.ui_mallUI", ui_mallUI);
                class ui_mall_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mall/ui_mall_item");
                    }
                }
                mall.ui_mall_itemUI = ui_mall_itemUI;
                REG("ui.views.mall.ui_mall_itemUI", ui_mall_itemUI);
            })(mall = views.mall || (views.mall = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var maoxian;
            (function (maoxian) {
                class ui_blood_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian/ui_blood_view");
                    }
                }
                maoxian.ui_blood_viewUI = ui_blood_viewUI;
                REG("ui.views.maoxian.ui_blood_viewUI", ui_blood_viewUI);
                class ui_bossYeWaiItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian/ui_bossYeWaiItem");
                    }
                }
                maoxian.ui_bossYeWaiItemUI = ui_bossYeWaiItemUI;
                REG("ui.views.maoxian.ui_bossYeWaiItemUI", ui_bossYeWaiItemUI);
                class ui_fail_tip_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian/ui_fail_tip_item");
                    }
                }
                maoxian.ui_fail_tip_itemUI = ui_fail_tip_itemUI;
                REG("ui.views.maoxian.ui_fail_tip_itemUI", ui_fail_tip_itemUI);
                class ui_fightUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian/ui_fight");
                    }
                }
                maoxian.ui_fightUI = ui_fightUI;
                REG("ui.views.maoxian.ui_fightUI", ui_fightUI);
                class ui_fight_jiesuanUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian/ui_fight_jiesuan");
                    }
                }
                maoxian.ui_fight_jiesuanUI = ui_fight_jiesuanUI;
                REG("ui.views.maoxian.ui_fight_jiesuanUI", ui_fight_jiesuanUI);
                class ui_maoxianUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian/ui_maoxian");
                    }
                }
                maoxian.ui_maoxianUI = ui_maoxianUI;
                REG("ui.views.maoxian.ui_maoxianUI", ui_maoxianUI);
                class ui_maoxian2_item11UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian/ui_maoxian2_item11");
                    }
                }
                maoxian.ui_maoxian2_item11UI = ui_maoxian2_item11UI;
                REG("ui.views.maoxian.ui_maoxian2_item11UI", ui_maoxian2_item11UI);
                class ui_saodan_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian/ui_saodan_view");
                    }
                }
                maoxian.ui_saodan_viewUI = ui_saodan_viewUI;
                REG("ui.views.maoxian.ui_saodan_viewUI", ui_saodan_viewUI);
                class ui_yewaiBossViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian/ui_yewaiBossView");
                    }
                }
                maoxian.ui_yewaiBossViewUI = ui_yewaiBossViewUI;
                REG("ui.views.maoxian.ui_yewaiBossViewUI", ui_yewaiBossViewUI);
            })(maoxian = views.maoxian || (views.maoxian = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var maoxian2;
            (function (maoxian2) {
                class ui_maoxian2_item0UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian2/ui_maoxian2_item0");
                    }
                }
                maoxian2.ui_maoxian2_item0UI = ui_maoxian2_item0UI;
                REG("ui.views.maoxian2.ui_maoxian2_item0UI", ui_maoxian2_item0UI);
                class ui_maoxian2_item1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian2/ui_maoxian2_item1");
                    }
                }
                maoxian2.ui_maoxian2_item1UI = ui_maoxian2_item1UI;
                REG("ui.views.maoxian2.ui_maoxian2_item1UI", ui_maoxian2_item1UI);
                class ui_maoxian2_item2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian2/ui_maoxian2_item2");
                    }
                }
                maoxian2.ui_maoxian2_item2UI = ui_maoxian2_item2UI;
                REG("ui.views.maoxian2.ui_maoxian2_item2UI", ui_maoxian2_item2UI);
                class ui_maoxian2_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian2/ui_maoxian2_main");
                    }
                }
                maoxian2.ui_maoxian2_mainUI = ui_maoxian2_mainUI;
                REG("ui.views.maoxian2.ui_maoxian2_mainUI", ui_maoxian2_mainUI);
                class ui_maoxian2_saodan_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian2/ui_maoxian2_saodan_view");
                    }
                }
                maoxian2.ui_maoxian2_saodan_viewUI = ui_maoxian2_saodan_viewUI;
                REG("ui.views.maoxian2.ui_maoxian2_saodan_viewUI", ui_maoxian2_saodan_viewUI);
                class ui_maoxian2_tab_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/maoxian2/ui_maoxian2_tab_item");
                    }
                }
                maoxian2.ui_maoxian2_tab_itemUI = ui_maoxian2_tab_itemUI;
                REG("ui.views.maoxian2.ui_maoxian2_tab_itemUI", ui_maoxian2_tab_itemUI);
            })(maoxian2 = views.maoxian2 || (views.maoxian2 = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var meirizhuanpan;
            (function (meirizhuanpan) {
                class ui_meirizhuanItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/meirizhuanpan/ui_meirizhuanItem");
                    }
                }
                meirizhuanpan.ui_meirizhuanItemUI = ui_meirizhuanItemUI;
                REG("ui.views.meirizhuanpan.ui_meirizhuanItemUI", ui_meirizhuanItemUI);
                class ui_meirizhuanpanUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/meirizhuanpan/ui_meirizhuanpan");
                    }
                }
                meirizhuanpan.ui_meirizhuanpanUI = ui_meirizhuanpanUI;
                REG("ui.views.meirizhuanpan.ui_meirizhuanpanUI", ui_meirizhuanpanUI);
                class ui_meirizhuanpan1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/meirizhuanpan/ui_meirizhuanpan1");
                    }
                }
                meirizhuanpan.ui_meirizhuanpan1UI = ui_meirizhuanpan1UI;
                REG("ui.views.meirizhuanpan.ui_meirizhuanpan1UI", ui_meirizhuanpan1UI);
                class ui_meirizhuanpan2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/meirizhuanpan/ui_meirizhuanpan2");
                    }
                }
                meirizhuanpan.ui_meirizhuanpan2UI = ui_meirizhuanpan2UI;
                REG("ui.views.meirizhuanpan.ui_meirizhuanpan2UI", ui_meirizhuanpan2UI);
                class ui_meirizhuanpan3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/meirizhuanpan/ui_meirizhuanpan3");
                    }
                }
                meirizhuanpan.ui_meirizhuanpan3UI = ui_meirizhuanpan3UI;
                REG("ui.views.meirizhuanpan.ui_meirizhuanpan3UI", ui_meirizhuanpan3UI);
            })(meirizhuanpan = views.meirizhuanpan || (views.meirizhuanpan = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var mojinxiaowei;
            (function (mojinxiaowei) {
                class ui_mojinxiaoweiItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mojinxiaowei/ui_mojinxiaoweiItem");
                    }
                }
                mojinxiaowei.ui_mojinxiaoweiItemUI = ui_mojinxiaoweiItemUI;
                REG("ui.views.mojinxiaowei.ui_mojinxiaoweiItemUI", ui_mojinxiaoweiItemUI);
                class ui_mojinxiaoweiItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mojinxiaowei/ui_mojinxiaoweiItem1");
                    }
                }
                mojinxiaowei.ui_mojinxiaoweiItem1UI = ui_mojinxiaoweiItem1UI;
                REG("ui.views.mojinxiaowei.ui_mojinxiaoweiItem1UI", ui_mojinxiaoweiItem1UI);
                class ui_mojinxiaoweiViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mojinxiaowei/ui_mojinxiaoweiView");
                    }
                }
                mojinxiaowei.ui_mojinxiaoweiViewUI = ui_mojinxiaoweiViewUI;
                REG("ui.views.mojinxiaowei.ui_mojinxiaoweiViewUI", ui_mojinxiaoweiViewUI);
                class ui_mojinxiaoweiView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mojinxiaowei/ui_mojinxiaoweiView1");
                    }
                }
                mojinxiaowei.ui_mojinxiaoweiView1UI = ui_mojinxiaoweiView1UI;
                REG("ui.views.mojinxiaowei.ui_mojinxiaoweiView1UI", ui_mojinxiaoweiView1UI);
                class ui_mojinxiaoweiView2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mojinxiaowei/ui_mojinxiaoweiView2");
                    }
                }
                mojinxiaowei.ui_mojinxiaoweiView2UI = ui_mojinxiaoweiView2UI;
                REG("ui.views.mojinxiaowei.ui_mojinxiaoweiView2UI", ui_mojinxiaoweiView2UI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/mojinxiaowei/ui_tab");
                    }
                }
                mojinxiaowei.ui_tabUI = ui_tabUI;
                REG("ui.views.mojinxiaowei.ui_tabUI", ui_tabUI);
            })(mojinxiaowei = views.mojinxiaowei || (views.mojinxiaowei = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var monopoly;
            (function (monopoly) {
                class ui_MonopolyAwardItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/monopoly/ui_MonopolyAwardItem");
                    }
                }
                monopoly.ui_MonopolyAwardItemUI = ui_MonopolyAwardItemUI;
                REG("ui.views.monopoly.ui_MonopolyAwardItemUI", ui_MonopolyAwardItemUI);
                class ui_MonopolyAwardViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/monopoly/ui_MonopolyAwardView");
                    }
                }
                monopoly.ui_MonopolyAwardViewUI = ui_MonopolyAwardViewUI;
                REG("ui.views.monopoly.ui_MonopolyAwardViewUI", ui_MonopolyAwardViewUI);
                class ui_MonopolyAwardView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/monopoly/ui_MonopolyAwardView1");
                    }
                }
                monopoly.ui_MonopolyAwardView1UI = ui_MonopolyAwardView1UI;
                REG("ui.views.monopoly.ui_MonopolyAwardView1UI", ui_MonopolyAwardView1UI);
                class ui_MonopolyIconItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/monopoly/ui_MonopolyIconItem");
                    }
                }
                monopoly.ui_MonopolyIconItemUI = ui_MonopolyIconItemUI;
                REG("ui.views.monopoly.ui_MonopolyIconItemUI", ui_MonopolyIconItemUI);
                class ui_MonopolyItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/monopoly/ui_MonopolyItem");
                    }
                }
                monopoly.ui_MonopolyItemUI = ui_MonopolyItemUI;
                REG("ui.views.monopoly.ui_MonopolyItemUI", ui_MonopolyItemUI);
                class ui_MonopolyLBItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/monopoly/ui_MonopolyLBItem");
                    }
                }
                monopoly.ui_MonopolyLBItemUI = ui_MonopolyLBItemUI;
                REG("ui.views.monopoly.ui_MonopolyLBItemUI", ui_MonopolyLBItemUI);
                class ui_MonopolyLBViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/monopoly/ui_MonopolyLBView");
                    }
                }
                monopoly.ui_MonopolyLBViewUI = ui_MonopolyLBViewUI;
                REG("ui.views.monopoly.ui_MonopolyLBViewUI", ui_MonopolyLBViewUI);
                class ui_MonopolyMainViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/monopoly/ui_MonopolyMainView");
                    }
                }
                monopoly.ui_MonopolyMainViewUI = ui_MonopolyMainViewUI;
                REG("ui.views.monopoly.ui_MonopolyMainViewUI", ui_MonopolyMainViewUI);
                class ui_MonopolyTaskItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/monopoly/ui_MonopolyTaskItem");
                    }
                }
                monopoly.ui_MonopolyTaskItemUI = ui_MonopolyTaskItemUI;
                REG("ui.views.monopoly.ui_MonopolyTaskItemUI", ui_MonopolyTaskItemUI);
                class ui_MonopolyViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/monopoly/ui_MonopolyView");
                    }
                }
                monopoly.ui_MonopolyViewUI = ui_MonopolyViewUI;
                REG("ui.views.monopoly.ui_MonopolyViewUI", ui_MonopolyViewUI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/monopoly/ui_tab");
                    }
                }
                monopoly.ui_tabUI = ui_tabUI;
                REG("ui.views.monopoly.ui_tabUI", ui_tabUI);
            })(monopoly = views.monopoly || (views.monopoly = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var naming_charge;
            (function (naming_charge) {
                class ui_jianghuyoumingUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/naming_charge/ui_jianghuyouming");
                    }
                }
                naming_charge.ui_jianghuyoumingUI = ui_jianghuyoumingUI;
                REG("ui.views.naming_charge.ui_jianghuyoumingUI", ui_jianghuyoumingUI);
                class ui_jianghuyouming_renameUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/naming_charge/ui_jianghuyouming_rename");
                    }
                }
                naming_charge.ui_jianghuyouming_renameUI = ui_jianghuyouming_renameUI;
                REG("ui.views.naming_charge.ui_jianghuyouming_renameUI", ui_jianghuyouming_renameUI);
                class ui_jianghuyouming_rewardUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/naming_charge/ui_jianghuyouming_reward");
                    }
                }
                naming_charge.ui_jianghuyouming_rewardUI = ui_jianghuyouming_rewardUI;
                REG("ui.views.naming_charge.ui_jianghuyouming_rewardUI", ui_jianghuyouming_rewardUI);
            })(naming_charge = views.naming_charge || (views.naming_charge = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var paoshang;
            (function (paoshang) {
                class ui_paoshangUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_paoshang");
                    }
                }
                paoshang.ui_paoshangUI = ui_paoshangUI;
                REG("ui.views.paoshang.ui_paoshangUI", ui_paoshangUI);
                class ui_paoshangItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_paoshangItem");
                    }
                }
                paoshang.ui_paoshangItemUI = ui_paoshangItemUI;
                REG("ui.views.paoshang.ui_paoshangItemUI", ui_paoshangItemUI);
                class ui_paoshangJSUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_paoshangJS");
                    }
                }
                paoshang.ui_paoshangJSUI = ui_paoshangJSUI;
                REG("ui.views.paoshang.ui_paoshangJSUI", ui_paoshangJSUI);
                class ui_paoshangJSItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_paoshangJSItem");
                    }
                }
                paoshang.ui_paoshangJSItemUI = ui_paoshangJSItemUI;
                REG("ui.views.paoshang.ui_paoshangJSItemUI", ui_paoshangJSItemUI);
                class ui_paoshangPHUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_paoshangPH");
                    }
                }
                paoshang.ui_paoshangPHUI = ui_paoshangPHUI;
                REG("ui.views.paoshang.ui_paoshangPHUI", ui_paoshangPHUI);
                class ui_paoshangTaskUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_paoshangTask");
                    }
                }
                paoshang.ui_paoshangTaskUI = ui_paoshangTaskUI;
                REG("ui.views.paoshang.ui_paoshangTaskUI", ui_paoshangTaskUI);
                class ui_paoshangTaskItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_paoshangTaskItem");
                    }
                }
                paoshang.ui_paoshangTaskItemUI = ui_paoshangTaskItemUI;
                REG("ui.views.paoshang.ui_paoshangTaskItemUI", ui_paoshangTaskItemUI);
                class ui_paoshangYZUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_paoshangYZ");
                    }
                }
                paoshang.ui_paoshangYZUI = ui_paoshangYZUI;
                REG("ui.views.paoshang.ui_paoshangYZUI", ui_paoshangYZUI);
                class ui_paoshangYZItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_paoshangYZItem1");
                    }
                }
                paoshang.ui_paoshangYZItem1UI = ui_paoshangYZItem1UI;
                REG("ui.views.paoshang.ui_paoshangYZItem1UI", ui_paoshangYZItem1UI);
                class ui_paoshangYZItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_paoshangYZItem2");
                    }
                }
                paoshang.ui_paoshangYZItem2UI = ui_paoshangYZItem2UI;
                REG("ui.views.paoshang.ui_paoshangYZItem2UI", ui_paoshangYZItem2UI);
                class ui_paoshangYZItem3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_paoshangYZItem3");
                    }
                }
                paoshang.ui_paoshangYZItem3UI = ui_paoshangYZItem3UI;
                REG("ui.views.paoshang.ui_paoshangYZItem3UI", ui_paoshangYZItem3UI);
                class ui_rizhiUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_rizhi");
                    }
                }
                paoshang.ui_rizhiUI = ui_rizhiUI;
                REG("ui.views.paoshang.ui_rizhiUI", ui_rizhiUI);
                class ui_rizhiItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_rizhiItem");
                    }
                }
                paoshang.ui_rizhiItemUI = ui_rizhiItemUI;
                REG("ui.views.paoshang.ui_rizhiItemUI", ui_rizhiItemUI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/paoshang/ui_tab");
                    }
                }
                paoshang.ui_tabUI = ui_tabUI;
                REG("ui.views.paoshang.ui_tabUI", ui_tabUI);
            })(paoshang = views.paoshang || (views.paoshang = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var peakjjc;
            (function (peakjjc) {
                class ui_jjcsbTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjcsbTip");
                    }
                }
                peakjjc.ui_jjcsbTipUI = ui_jjcsbTipUI;
                REG("ui.views.peakjjc.ui_jjcsbTipUI", ui_jjcsbTipUI);
                class ui_jjc_bsTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_bsTip");
                    }
                }
                peakjjc.ui_jjc_bsTipUI = ui_jjc_bsTipUI;
                REG("ui.views.peakjjc.ui_jjc_bsTipUI", ui_jjc_bsTipUI);
                class ui_jjc_fightUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_fight");
                    }
                }
                peakjjc.ui_jjc_fightUI = ui_jjc_fightUI;
                REG("ui.views.peakjjc.ui_jjc_fightUI", ui_jjc_fightUI);
                class ui_jjc_fight_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_fight_item");
                    }
                }
                peakjjc.ui_jjc_fight_itemUI = ui_jjc_fight_itemUI;
                REG("ui.views.peakjjc.ui_jjc_fight_itemUI", ui_jjc_fight_itemUI);
                class ui_jjc_fight_logUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_fight_log");
                    }
                }
                peakjjc.ui_jjc_fight_logUI = ui_jjc_fight_logUI;
                REG("ui.views.peakjjc.ui_jjc_fight_logUI", ui_jjc_fight_logUI);
                class ui_jjc_headitemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_headitem");
                    }
                }
                peakjjc.ui_jjc_headitemUI = ui_jjc_headitemUI;
                REG("ui.views.peakjjc.ui_jjc_headitemUI", ui_jjc_headitemUI);
                class ui_jjc_hyTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_hyTip");
                    }
                }
                peakjjc.ui_jjc_hyTipUI = ui_jjc_hyTipUI;
                REG("ui.views.peakjjc.ui_jjc_hyTipUI", ui_jjc_hyTipUI);
                class ui_jjc_jiesuan_item_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_jiesuan_item_view");
                    }
                }
                peakjjc.ui_jjc_jiesuan_item_viewUI = ui_jjc_jiesuan_item_viewUI;
                REG("ui.views.peakjjc.ui_jjc_jiesuan_item_viewUI", ui_jjc_jiesuan_item_viewUI);
                class ui_jjc_log_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_log_item");
                    }
                }
                peakjjc.ui_jjc_log_itemUI = ui_jjc_log_itemUI;
                REG("ui.views.peakjjc.ui_jjc_log_itemUI", ui_jjc_log_itemUI);
                class ui_jjc_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_main");
                    }
                }
                peakjjc.ui_jjc_mainUI = ui_jjc_mainUI;
                REG("ui.views.peakjjc.ui_jjc_mainUI", ui_jjc_mainUI);
                class ui_jjc_other_item1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_other_item1");
                    }
                }
                peakjjc.ui_jjc_other_item1UI = ui_jjc_other_item1UI;
                REG("ui.views.peakjjc.ui_jjc_other_item1UI", ui_jjc_other_item1UI);
                class ui_jjc_owner_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_owner_item");
                    }
                }
                peakjjc.ui_jjc_owner_itemUI = ui_jjc_owner_itemUI;
                REG("ui.views.peakjjc.ui_jjc_owner_itemUI", ui_jjc_owner_itemUI);
                class ui_jjc_player_infoUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_player_info");
                    }
                }
                peakjjc.ui_jjc_player_infoUI = ui_jjc_player_infoUI;
                REG("ui.views.peakjjc.ui_jjc_player_infoUI", ui_jjc_player_infoUI);
                class ui_jjc_reward_showUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_reward_show");
                    }
                }
                peakjjc.ui_jjc_reward_showUI = ui_jjc_reward_showUI;
                REG("ui.views.peakjjc.ui_jjc_reward_showUI", ui_jjc_reward_showUI);
                class ui_jjc_reward_show_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_reward_show_item");
                    }
                }
                peakjjc.ui_jjc_reward_show_itemUI = ui_jjc_reward_show_itemUI;
                REG("ui.views.peakjjc.ui_jjc_reward_show_itemUI", ui_jjc_reward_show_itemUI);
                class ui_jjc_wgTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_wgTip");
                    }
                }
                peakjjc.ui_jjc_wgTipUI = ui_jjc_wgTipUI;
                REG("ui.views.peakjjc.ui_jjc_wgTipUI", ui_jjc_wgTipUI);
                class ui_jjc_zhTipUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_jjc_zhTip");
                    }
                }
                peakjjc.ui_jjc_zhTipUI = ui_jjc_zhTipUI;
                REG("ui.views.peakjjc.ui_jjc_zhTipUI", ui_jjc_zhTipUI);
                class ui_peak_main_avatarUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/peakjjc/ui_peak_main_avatar");
                    }
                }
                peakjjc.ui_peak_main_avatarUI = ui_peak_main_avatarUI;
                REG("ui.views.peakjjc.ui_peak_main_avatarUI", ui_peak_main_avatarUI);
            })(peakjjc = views.peakjjc || (views.peakjjc = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var serverTask;
            (function (serverTask) {
                class ui_serverTaskItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/serverTask/ui_serverTaskItem");
                    }
                }
                serverTask.ui_serverTaskItemUI = ui_serverTaskItemUI;
                REG("ui.views.serverTask.ui_serverTaskItemUI", ui_serverTaskItemUI);
                class ui_serverTaskItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/serverTask/ui_serverTaskItem1");
                    }
                }
                serverTask.ui_serverTaskItem1UI = ui_serverTaskItem1UI;
                REG("ui.views.serverTask.ui_serverTaskItem1UI", ui_serverTaskItem1UI);
                class ui_serverTaskItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/serverTask/ui_serverTaskItem2");
                    }
                }
                serverTask.ui_serverTaskItem2UI = ui_serverTaskItem2UI;
                REG("ui.views.serverTask.ui_serverTaskItem2UI", ui_serverTaskItem2UI);
                class ui_serverTaskItem3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/serverTask/ui_serverTaskItem3");
                    }
                }
                serverTask.ui_serverTaskItem3UI = ui_serverTaskItem3UI;
                REG("ui.views.serverTask.ui_serverTaskItem3UI", ui_serverTaskItem3UI);
                class ui_serverTaskViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/serverTask/ui_serverTaskView");
                    }
                }
                serverTask.ui_serverTaskViewUI = ui_serverTaskViewUI;
                REG("ui.views.serverTask.ui_serverTaskViewUI", ui_serverTaskViewUI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/serverTask/ui_tab");
                    }
                }
                serverTask.ui_tabUI = ui_tabUI;
                REG("ui.views.serverTask.ui_tabUI", ui_tabUI);
            })(serverTask = views.serverTask || (views.serverTask = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var shenbin;
            (function (shenbin) {
                class ui_shenbinAttrItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbin/ui_shenbinAttrItem");
                    }
                }
                shenbin.ui_shenbinAttrItemUI = ui_shenbinAttrItemUI;
                REG("ui.views.shenbin.ui_shenbinAttrItemUI", ui_shenbinAttrItemUI);
                class ui_shenbingLBItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbin/ui_shenbingLBItem");
                    }
                }
                shenbin.ui_shenbingLBItemUI = ui_shenbingLBItemUI;
                REG("ui.views.shenbin.ui_shenbingLBItemUI", ui_shenbingLBItemUI);
                class ui_shenbingLBViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbin/ui_shenbingLBView");
                    }
                }
                shenbin.ui_shenbingLBViewUI = ui_shenbingLBViewUI;
                REG("ui.views.shenbin.ui_shenbingLBViewUI", ui_shenbingLBViewUI);
                class ui_shenbinItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbin/ui_shenbinItem");
                    }
                }
                shenbin.ui_shenbinItemUI = ui_shenbinItemUI;
                REG("ui.views.shenbin.ui_shenbinItemUI", ui_shenbinItemUI);
                class ui_shenbinLogItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbin/ui_shenbinLogItem");
                    }
                }
                shenbin.ui_shenbinLogItemUI = ui_shenbinLogItemUI;
                REG("ui.views.shenbin.ui_shenbinLogItemUI", ui_shenbinLogItemUI);
                class ui_shenbinLogViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbin/ui_shenbinLogView");
                    }
                }
                shenbin.ui_shenbinLogViewUI = ui_shenbinLogViewUI;
                REG("ui.views.shenbin.ui_shenbinLogViewUI", ui_shenbinLogViewUI);
                class ui_shenbinLvViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbin/ui_shenbinLvView");
                    }
                }
                shenbin.ui_shenbinLvViewUI = ui_shenbinLvViewUI;
                REG("ui.views.shenbin.ui_shenbinLvViewUI", ui_shenbinLvViewUI);
                class ui_shenbinTZItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbin/ui_shenbinTZItem");
                    }
                }
                shenbin.ui_shenbinTZItemUI = ui_shenbinTZItemUI;
                REG("ui.views.shenbin.ui_shenbinTZItemUI", ui_shenbinTZItemUI);
                class ui_shenbinTZItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbin/ui_shenbinTZItem1");
                    }
                }
                shenbin.ui_shenbinTZItem1UI = ui_shenbinTZItem1UI;
                REG("ui.views.shenbin.ui_shenbinTZItem1UI", ui_shenbinTZItem1UI);
                class ui_shenbinTZItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbin/ui_shenbinTZItem2");
                    }
                }
                shenbin.ui_shenbinTZItem2UI = ui_shenbinTZItem2UI;
                REG("ui.views.shenbin.ui_shenbinTZItem2UI", ui_shenbinTZItem2UI);
                class ui_shenbinTZViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbin/ui_shenbinTZView");
                    }
                }
                shenbin.ui_shenbinTZViewUI = ui_shenbinTZViewUI;
                REG("ui.views.shenbin.ui_shenbinTZViewUI", ui_shenbinTZViewUI);
                class ui_shenbinViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbin/ui_shenbinView");
                    }
                }
                shenbin.ui_shenbinViewUI = ui_shenbinViewUI;
                REG("ui.views.shenbin.ui_shenbinViewUI", ui_shenbinViewUI);
            })(shenbin = views.shenbin || (views.shenbin = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var shenbingfeast;
            (function (shenbingfeast) {
                class ui_shenbing_feastUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shenbingfeast/ui_shenbing_feast");
                    }
                }
                shenbingfeast.ui_shenbing_feastUI = ui_shenbing_feastUI;
                REG("ui.views.shenbingfeast.ui_shenbing_feastUI", ui_shenbing_feastUI);
            })(shenbingfeast = views.shenbingfeast || (views.shenbingfeast = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var shezhi;
            (function (shezhi) {
                class ui_dingyueUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_dingyue");
                    }
                }
                shezhi.ui_dingyueUI = ui_dingyueUI;
                REG("ui.views.shezhi.ui_dingyueUI", ui_dingyueUI);
                class ui_dingyueItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_dingyueItem");
                    }
                }
                shezhi.ui_dingyueItemUI = ui_dingyueItemUI;
                REG("ui.views.shezhi.ui_dingyueItemUI", ui_dingyueItemUI);
                class ui_duihuanma_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_duihuanma_view");
                    }
                }
                shezhi.ui_duihuanma_viewUI = ui_duihuanma_viewUI;
                REG("ui.views.shezhi.ui_duihuanma_viewUI", ui_duihuanma_viewUI);
                class ui_gonggaoUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_gonggao");
                    }
                }
                shezhi.ui_gonggaoUI = ui_gonggaoUI;
                REG("ui.views.shezhi.ui_gonggaoUI", ui_gonggaoUI);
                class ui_gonggao_testUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_gonggao_test");
                    }
                }
                shezhi.ui_gonggao_testUI = ui_gonggao_testUI;
                REG("ui.views.shezhi.ui_gonggao_testUI", ui_gonggao_testUI);
                class ui_openboxUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_openbox");
                    }
                }
                shezhi.ui_openboxUI = ui_openboxUI;
                REG("ui.views.shezhi.ui_openboxUI", ui_openboxUI);
                class ui_qufuUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_qufu");
                    }
                }
                shezhi.ui_qufuUI = ui_qufuUI;
                REG("ui.views.shezhi.ui_qufuUI", ui_qufuUI);
                class ui_qufuItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_qufuItem");
                    }
                }
                shezhi.ui_qufuItemUI = ui_qufuItemUI;
                REG("ui.views.shezhi.ui_qufuItemUI", ui_qufuItemUI);
                class ui_qufuItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_qufuItem1");
                    }
                }
                shezhi.ui_qufuItem1UI = ui_qufuItem1UI;
                REG("ui.views.shezhi.ui_qufuItem1UI", ui_qufuItem1UI);
                class ui_shezhiUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_shezhi");
                    }
                }
                shezhi.ui_shezhiUI = ui_shezhiUI;
                REG("ui.views.shezhi.ui_shezhiUI", ui_shezhiUI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_tab");
                    }
                }
                shezhi.ui_tabUI = ui_tabUI;
                REG("ui.views.shezhi.ui_tabUI", ui_tabUI);
                class ui_yingsiUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_yingsi");
                    }
                }
                shezhi.ui_yingsiUI = ui_yingsiUI;
                REG("ui.views.shezhi.ui_yingsiUI", ui_yingsiUI);
                class ui_yingsi_txtUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_yingsi_txt");
                    }
                }
                shezhi.ui_yingsi_txtUI = ui_yingsi_txtUI;
                REG("ui.views.shezhi.ui_yingsi_txtUI", ui_yingsi_txtUI);
                class ui_youxiquan_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/shezhi/ui_youxiquan_view");
                    }
                }
                shezhi.ui_youxiquan_viewUI = ui_youxiquan_viewUI;
                REG("ui.views.shezhi.ui_youxiquan_viewUI", ui_youxiquan_viewUI);
            })(shezhi = views.shezhi || (views.shezhi = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var soul;
            (function (soul) {
                class ui_soulcompare_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soulcompare_view");
                    }
                }
                soul.ui_soulcompare_viewUI = ui_soulcompare_viewUI;
                REG("ui.views.soul.ui_soulcompare_viewUI", ui_soulcompare_viewUI);
                class ui_soul_attr_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_attr_item");
                    }
                }
                soul.ui_soul_attr_itemUI = ui_soul_attr_itemUI;
                REG("ui.views.soul.ui_soul_attr_itemUI", ui_soul_attr_itemUI);
                class ui_soul_iconUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_icon");
                    }
                }
                soul.ui_soul_iconUI = ui_soul_iconUI;
                REG("ui.views.soul.ui_soul_iconUI", ui_soul_iconUI);
                class ui_soul_qianghuaUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_qianghua");
                    }
                }
                soul.ui_soul_qianghuaUI = ui_soul_qianghuaUI;
                REG("ui.views.soul.ui_soul_qianghuaUI", ui_soul_qianghuaUI);
                class ui_soul_qianghua_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_qianghua_attr");
                    }
                }
                soul.ui_soul_qianghua_attrUI = ui_soul_qianghua_attrUI;
                REG("ui.views.soul.ui_soul_qianghua_attrUI", ui_soul_qianghua_attrUI);
                class ui_soul_small_iconUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_small_icon");
                    }
                }
                soul.ui_soul_small_iconUI = ui_soul_small_iconUI;
                REG("ui.views.soul.ui_soul_small_iconUI", ui_soul_small_iconUI);
                class ui_soul_suit_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_suit_item");
                    }
                }
                soul.ui_soul_suit_itemUI = ui_soul_suit_itemUI;
                REG("ui.views.soul.ui_soul_suit_itemUI", ui_soul_suit_itemUI);
                class ui_soul_sult_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_sult_view");
                    }
                }
                soul.ui_soul_sult_viewUI = ui_soul_sult_viewUI;
                REG("ui.views.soul.ui_soul_sult_viewUI", ui_soul_sult_viewUI);
                class ui_soul_tab_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_tab_item");
                    }
                }
                soul.ui_soul_tab_itemUI = ui_soul_tab_itemUI;
                REG("ui.views.soul.ui_soul_tab_itemUI", ui_soul_tab_itemUI);
                class ui_soul_tips_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_tips_item");
                    }
                }
                soul.ui_soul_tips_itemUI = ui_soul_tips_itemUI;
                REG("ui.views.soul.ui_soul_tips_itemUI", ui_soul_tips_itemUI);
                class ui_soul_tip_attr_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_tip_attr_item");
                    }
                }
                soul.ui_soul_tip_attr_itemUI = ui_soul_tip_attr_itemUI;
                REG("ui.views.soul.ui_soul_tip_attr_itemUI", ui_soul_tip_attr_itemUI);
                class ui_soul_tip_attr_item2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_tip_attr_item2");
                    }
                }
                soul.ui_soul_tip_attr_item2UI = ui_soul_tip_attr_item2UI;
                REG("ui.views.soul.ui_soul_tip_attr_item2UI", ui_soul_tip_attr_item2UI);
                class ui_soul_top_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_top_item");
                    }
                }
                soul.ui_soul_top_itemUI = ui_soul_top_itemUI;
                REG("ui.views.soul.ui_soul_top_itemUI", ui_soul_top_itemUI);
                class ui_soul_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/soul/ui_soul_view");
                    }
                }
                soul.ui_soul_viewUI = ui_soul_viewUI;
                REG("ui.views.soul.ui_soul_viewUI", ui_soul_viewUI);
            })(soul = views.soul || (views.soul = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var springFestival;
            (function (springFestival) {
                class ui_springFestivalIconItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalIconItem");
                    }
                }
                springFestival.ui_springFestivalIconItemUI = ui_springFestivalIconItemUI;
                REG("ui.views.springFestival.ui_springFestivalIconItemUI", ui_springFestivalIconItemUI);
                class ui_springFestivalRankAwItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalRankAwItem");
                    }
                }
                springFestival.ui_springFestivalRankAwItemUI = ui_springFestivalRankAwItemUI;
                REG("ui.views.springFestival.ui_springFestivalRankAwItemUI", ui_springFestivalRankAwItemUI);
                class ui_springFestivalRankAwViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalRankAwView");
                    }
                }
                springFestival.ui_springFestivalRankAwViewUI = ui_springFestivalRankAwViewUI;
                REG("ui.views.springFestival.ui_springFestivalRankAwViewUI", ui_springFestivalRankAwViewUI);
                class ui_springFestivalRankItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalRankItem");
                    }
                }
                springFestival.ui_springFestivalRankItemUI = ui_springFestivalRankItemUI;
                REG("ui.views.springFestival.ui_springFestivalRankItemUI", ui_springFestivalRankItemUI);
                class ui_springFestivalRankItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalRankItem1");
                    }
                }
                springFestival.ui_springFestivalRankItem1UI = ui_springFestivalRankItem1UI;
                REG("ui.views.springFestival.ui_springFestivalRankItem1UI", ui_springFestivalRankItem1UI);
                class ui_springFestivalRankViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalRankView");
                    }
                }
                springFestival.ui_springFestivalRankViewUI = ui_springFestivalRankViewUI;
                REG("ui.views.springFestival.ui_springFestivalRankViewUI", ui_springFestivalRankViewUI);
                class ui_springFestivalRankView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalRankView1");
                    }
                }
                springFestival.ui_springFestivalRankView1UI = ui_springFestivalRankView1UI;
                REG("ui.views.springFestival.ui_springFestivalRankView1UI", ui_springFestivalRankView1UI);
                class ui_springFestivalShopGMViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalShopGMView");
                    }
                }
                springFestival.ui_springFestivalShopGMViewUI = ui_springFestivalShopGMViewUI;
                REG("ui.views.springFestival.ui_springFestivalShopGMViewUI", ui_springFestivalShopGMViewUI);
                class ui_springFestivalShopItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalShopItem");
                    }
                }
                springFestival.ui_springFestivalShopItemUI = ui_springFestivalShopItemUI;
                REG("ui.views.springFestival.ui_springFestivalShopItemUI", ui_springFestivalShopItemUI);
                class ui_springFestivalShopViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalShopView");
                    }
                }
                springFestival.ui_springFestivalShopViewUI = ui_springFestivalShopViewUI;
                REG("ui.views.springFestival.ui_springFestivalShopViewUI", ui_springFestivalShopViewUI);
                class ui_springFestivalTaskItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalTaskItem");
                    }
                }
                springFestival.ui_springFestivalTaskItemUI = ui_springFestivalTaskItemUI;
                REG("ui.views.springFestival.ui_springFestivalTaskItemUI", ui_springFestivalTaskItemUI);
                class ui_springFestivalTaskItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalTaskItem1");
                    }
                }
                springFestival.ui_springFestivalTaskItem1UI = ui_springFestivalTaskItem1UI;
                REG("ui.views.springFestival.ui_springFestivalTaskItem1UI", ui_springFestivalTaskItem1UI);
                class ui_springFestivalTaskViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalTaskView");
                    }
                }
                springFestival.ui_springFestivalTaskViewUI = ui_springFestivalTaskViewUI;
                REG("ui.views.springFestival.ui_springFestivalTaskViewUI", ui_springFestivalTaskViewUI);
                class ui_springFestivalTipItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalTipItem");
                    }
                }
                springFestival.ui_springFestivalTipItemUI = ui_springFestivalTipItemUI;
                REG("ui.views.springFestival.ui_springFestivalTipItemUI", ui_springFestivalTipItemUI);
                class ui_springFestivalTipViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalTipView");
                    }
                }
                springFestival.ui_springFestivalTipViewUI = ui_springFestivalTipViewUI;
                REG("ui.views.springFestival.ui_springFestivalTipViewUI", ui_springFestivalTipViewUI);
                class ui_springFestivalViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalView");
                    }
                }
                springFestival.ui_springFestivalViewUI = ui_springFestivalViewUI;
                REG("ui.views.springFestival.ui_springFestivalViewUI", ui_springFestivalViewUI);
                class ui_springFestivalWWItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalWWItem");
                    }
                }
                springFestival.ui_springFestivalWWItemUI = ui_springFestivalWWItemUI;
                REG("ui.views.springFestival.ui_springFestivalWWItemUI", ui_springFestivalWWItemUI);
                class ui_springFestivalWWItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalWWItem1");
                    }
                }
                springFestival.ui_springFestivalWWItem1UI = ui_springFestivalWWItem1UI;
                REG("ui.views.springFestival.ui_springFestivalWWItem1UI", ui_springFestivalWWItem1UI);
                class ui_springFestivalWWViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_springFestivalWWView");
                    }
                }
                springFestival.ui_springFestivalWWViewUI = ui_springFestivalWWViewUI;
                REG("ui.views.springFestival.ui_springFestivalWWViewUI", ui_springFestivalWWViewUI);
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/springFestival/ui_tab");
                    }
                }
                springFestival.ui_tabUI = ui_tabUI;
                REG("ui.views.springFestival.ui_tabUI", ui_tabUI);
            })(springFestival = views.springFestival || (views.springFestival = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var summer;
            (function (summer) {
                class ui_summer_markerUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/summer/ui_summer_marker");
                    }
                }
                summer.ui_summer_markerUI = ui_summer_markerUI;
                REG("ui.views.summer.ui_summer_markerUI", ui_summer_markerUI);
                class ui_summer_marker_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/summer/ui_summer_marker_item");
                    }
                }
                summer.ui_summer_marker_itemUI = ui_summer_marker_itemUI;
                REG("ui.views.summer.ui_summer_marker_itemUI", ui_summer_marker_itemUI);
                class ui_summer_packageUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/summer/ui_summer_package");
                    }
                }
                summer.ui_summer_packageUI = ui_summer_packageUI;
                REG("ui.views.summer.ui_summer_packageUI", ui_summer_packageUI);
                class ui_summer_package_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/summer/ui_summer_package_item");
                    }
                }
                summer.ui_summer_package_itemUI = ui_summer_package_itemUI;
                REG("ui.views.summer.ui_summer_package_itemUI", ui_summer_package_itemUI);
                class ui_summer_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/summer/ui_summer_view");
                    }
                }
                summer.ui_summer_viewUI = ui_summer_viewUI;
                REG("ui.views.summer.ui_summer_viewUI", ui_summer_viewUI);
            })(summer = views.summer || (views.summer = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var wanshengjie;
            (function (wanshengjie) {
                class ui_wanshengjieItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wanshengjie/ui_wanshengjieItem");
                    }
                }
                wanshengjie.ui_wanshengjieItemUI = ui_wanshengjieItemUI;
                REG("ui.views.wanshengjie.ui_wanshengjieItemUI", ui_wanshengjieItemUI);
                class ui_wanshengjieViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wanshengjie/ui_wanshengjieView");
                    }
                }
                wanshengjie.ui_wanshengjieViewUI = ui_wanshengjieViewUI;
                REG("ui.views.wanshengjie.ui_wanshengjieViewUI", ui_wanshengjieViewUI);
                class ui_wanshengjieView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wanshengjie/ui_wanshengjieView1");
                    }
                }
                wanshengjie.ui_wanshengjieView1UI = ui_wanshengjieView1UI;
                REG("ui.views.wanshengjie.ui_wanshengjieView1UI", ui_wanshengjieView1UI);
            })(wanshengjie = views.wanshengjie || (views.wanshengjie = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var wing;
            (function (wing) {
                class ui_main_chibang1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wing/ui_main_chibang1");
                    }
                }
                wing.ui_main_chibang1UI = ui_main_chibang1UI;
                REG("ui.views.wing.ui_main_chibang1UI", ui_main_chibang1UI);
                class ui_main_chibang2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wing/ui_main_chibang2");
                    }
                }
                wing.ui_main_chibang2UI = ui_main_chibang2UI;
                REG("ui.views.wing.ui_main_chibang2UI", ui_main_chibang2UI);
                class ui_wing_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wing/ui_wing_attr");
                    }
                }
                wing.ui_wing_attrUI = ui_wing_attrUI;
                REG("ui.views.wing.ui_wing_attrUI", ui_wing_attrUI);
                class ui_wing_attr2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wing/ui_wing_attr2");
                    }
                }
                wing.ui_wing_attr2UI = ui_wing_attr2UI;
                REG("ui.views.wing.ui_wing_attr2UI", ui_wing_attr2UI);
                class ui_wing_exchangeUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wing/ui_wing_exchange");
                    }
                }
                wing.ui_wing_exchangeUI = ui_wing_exchangeUI;
                REG("ui.views.wing.ui_wing_exchangeUI", ui_wing_exchangeUI);
                class ui_wing_infoUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wing/ui_wing_info");
                    }
                }
                wing.ui_wing_infoUI = ui_wing_infoUI;
                REG("ui.views.wing.ui_wing_infoUI", ui_wing_infoUI);
                class ui_wing_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wing/ui_wing_main");
                    }
                }
                wing.ui_wing_mainUI = ui_wing_mainUI;
                REG("ui.views.wing.ui_wing_mainUI", ui_wing_mainUI);
                class ui_wing_treasureUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wing/ui_wing_treasure");
                    }
                }
                wing.ui_wing_treasureUI = ui_wing_treasureUI;
                REG("ui.views.wing.ui_wing_treasureUI", ui_wing_treasureUI);
                class ui_wing_treasure_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wing/ui_wing_treasure_item");
                    }
                }
                wing.ui_wing_treasure_itemUI = ui_wing_treasure_itemUI;
                REG("ui.views.wing.ui_wing_treasure_itemUI", ui_wing_treasure_itemUI);
                class ui_wing_update_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wing/ui_wing_update_attr");
                    }
                }
                wing.ui_wing_update_attrUI = ui_wing_update_attrUI;
                REG("ui.views.wing.ui_wing_update_attrUI", ui_wing_update_attrUI);
            })(wing = views.wing || (views.wing = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var wowhuanzhuang;
            (function (wowhuanzhuang) {
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wowhuanzhuang/ui_tab");
                    }
                }
                wowhuanzhuang.ui_tabUI = ui_tabUI;
                REG("ui.views.wowhuanzhuang.ui_tabUI", ui_tabUI);
                class ui_wowhuangzhuangIconItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wowhuanzhuang/ui_wowhuangzhuangIconItem");
                    }
                }
                wowhuanzhuang.ui_wowhuangzhuangIconItemUI = ui_wowhuangzhuangIconItemUI;
                REG("ui.views.wowhuanzhuang.ui_wowhuangzhuangIconItemUI", ui_wowhuangzhuangIconItemUI);
                class ui_wowhuangzhuangItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wowhuanzhuang/ui_wowhuangzhuangItem");
                    }
                }
                wowhuanzhuang.ui_wowhuangzhuangItemUI = ui_wowhuangzhuangItemUI;
                REG("ui.views.wowhuanzhuang.ui_wowhuangzhuangItemUI", ui_wowhuangzhuangItemUI);
                class ui_wowhuangzhuangItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wowhuanzhuang/ui_wowhuangzhuangItem1");
                    }
                }
                wowhuanzhuang.ui_wowhuangzhuangItem1UI = ui_wowhuangzhuangItem1UI;
                REG("ui.views.wowhuanzhuang.ui_wowhuangzhuangItem1UI", ui_wowhuangzhuangItem1UI);
                class ui_wowhuangzhuangItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wowhuanzhuang/ui_wowhuangzhuangItem2");
                    }
                }
                wowhuanzhuang.ui_wowhuangzhuangItem2UI = ui_wowhuangzhuangItem2UI;
                REG("ui.views.wowhuanzhuang.ui_wowhuangzhuangItem2UI", ui_wowhuangzhuangItem2UI);
                class ui_wowhuangzhuangViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wowhuanzhuang/ui_wowhuangzhuangView");
                    }
                }
                wowhuanzhuang.ui_wowhuangzhuangViewUI = ui_wowhuangzhuangViewUI;
                REG("ui.views.wowhuanzhuang.ui_wowhuangzhuangViewUI", ui_wowhuangzhuangViewUI);
                class ui_wowhuangzhuangView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wowhuanzhuang/ui_wowhuangzhuangView1");
                    }
                }
                wowhuanzhuang.ui_wowhuangzhuangView1UI = ui_wowhuangzhuangView1UI;
                REG("ui.views.wowhuanzhuang.ui_wowhuangzhuangView1UI", ui_wowhuangzhuangView1UI);
            })(wowhuanzhuang = views.wowhuanzhuang || (views.wowhuanzhuang = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var wushendian;
            (function (wushendian) {
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_tab");
                    }
                }
                wushendian.ui_tabUI = ui_tabUI;
                REG("ui.views.wushendian.ui_tabUI", ui_tabUI);
                class ui_wushendianAwardItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianAwardItem");
                    }
                }
                wushendian.ui_wushendianAwardItemUI = ui_wushendianAwardItemUI;
                REG("ui.views.wushendian.ui_wushendianAwardItemUI", ui_wushendianAwardItemUI);
                class ui_wushendianAwardViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianAwardView");
                    }
                }
                wushendian.ui_wushendianAwardViewUI = ui_wushendianAwardViewUI;
                REG("ui.views.wushendian.ui_wushendianAwardViewUI", ui_wushendianAwardViewUI);
                class ui_wushendianItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianItem");
                    }
                }
                wushendian.ui_wushendianItemUI = ui_wushendianItemUI;
                REG("ui.views.wushendian.ui_wushendianItemUI", ui_wushendianItemUI);
                class ui_wushendianRankItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianRankItem");
                    }
                }
                wushendian.ui_wushendianRankItemUI = ui_wushendianRankItemUI;
                REG("ui.views.wushendian.ui_wushendianRankItemUI", ui_wushendianRankItemUI);
                class ui_wushendianRankViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianRankView");
                    }
                }
                wushendian.ui_wushendianRankViewUI = ui_wushendianRankViewUI;
                REG("ui.views.wushendian.ui_wushendianRankViewUI", ui_wushendianRankViewUI);
                class ui_wushendianSHItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianSHItem1");
                    }
                }
                wushendian.ui_wushendianSHItem1UI = ui_wushendianSHItem1UI;
                REG("ui.views.wushendian.ui_wushendianSHItem1UI", ui_wushendianSHItem1UI);
                class ui_wushendianSHItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianSHItem2");
                    }
                }
                wushendian.ui_wushendianSHItem2UI = ui_wushendianSHItem2UI;
                REG("ui.views.wushendian.ui_wushendianSHItem2UI", ui_wushendianSHItem2UI);
                class ui_wushendianSHItem3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianSHItem3");
                    }
                }
                wushendian.ui_wushendianSHItem3UI = ui_wushendianSHItem3UI;
                REG("ui.views.wushendian.ui_wushendianSHItem3UI", ui_wushendianSHItem3UI);
                class ui_wushendianSHItem4UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianSHItem4");
                    }
                }
                wushendian.ui_wushendianSHItem4UI = ui_wushendianSHItem4UI;
                REG("ui.views.wushendian.ui_wushendianSHItem4UI", ui_wushendianSHItem4UI);
                class ui_wushendianSHLViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianSHLView");
                    }
                }
                wushendian.ui_wushendianSHLViewUI = ui_wushendianSHLViewUI;
                REG("ui.views.wushendian.ui_wushendianSHLViewUI", ui_wushendianSHLViewUI);
                class ui_wushendianShopItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianShopItem");
                    }
                }
                wushendian.ui_wushendianShopItemUI = ui_wushendianShopItemUI;
                REG("ui.views.wushendian.ui_wushendianShopItemUI", ui_wushendianShopItemUI);
                class ui_wushendianShopViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianShopView");
                    }
                }
                wushendian.ui_wushendianShopViewUI = ui_wushendianShopViewUI;
                REG("ui.views.wushendian.ui_wushendianShopViewUI", ui_wushendianShopViewUI);
                class ui_wushendianSHViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianSHView");
                    }
                }
                wushendian.ui_wushendianSHViewUI = ui_wushendianSHViewUI;
                REG("ui.views.wushendian.ui_wushendianSHViewUI", ui_wushendianSHViewUI);
                class ui_wushendianTJItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianTJItem");
                    }
                }
                wushendian.ui_wushendianTJItemUI = ui_wushendianTJItemUI;
                REG("ui.views.wushendian.ui_wushendianTJItemUI", ui_wushendianTJItemUI);
                class ui_wushendianTJViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianTJView");
                    }
                }
                wushendian.ui_wushendianTJViewUI = ui_wushendianTJViewUI;
                REG("ui.views.wushendian.ui_wushendianTJViewUI", ui_wushendianTJViewUI);
                class ui_wushendianViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/wushendian/ui_wushendianView");
                    }
                }
                wushendian.ui_wushendianViewUI = ui_wushendianViewUI;
                REG("ui.views.wushendian.ui_wushendianViewUI", ui_wushendianViewUI);
            })(wushendian = views.wushendian || (views.wushendian = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var xxzdz;
            (function (xxzdz) {
                class ui_xxzdzAwardViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzAwardView");
                    }
                }
                xxzdz.ui_xxzdzAwardViewUI = ui_xxzdzAwardViewUI;
                REG("ui.views.xxzdz.ui_xxzdzAwardViewUI", ui_xxzdzAwardViewUI);
                class ui_xxzdzGMViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzGMView");
                    }
                }
                xxzdz.ui_xxzdzGMViewUI = ui_xxzdzGMViewUI;
                REG("ui.views.xxzdz.ui_xxzdzGMViewUI", ui_xxzdzGMViewUI);
                class ui_xxzdzItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzItem");
                    }
                }
                xxzdz.ui_xxzdzItemUI = ui_xxzdzItemUI;
                REG("ui.views.xxzdz.ui_xxzdzItemUI", ui_xxzdzItemUI);
                class ui_xxzdzItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzItem1");
                    }
                }
                xxzdz.ui_xxzdzItem1UI = ui_xxzdzItem1UI;
                REG("ui.views.xxzdz.ui_xxzdzItem1UI", ui_xxzdzItem1UI);
                class ui_xxzdzItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzItem2");
                    }
                }
                xxzdz.ui_xxzdzItem2UI = ui_xxzdzItem2UI;
                REG("ui.views.xxzdz.ui_xxzdzItem2UI", ui_xxzdzItem2UI);
                class ui_xxzdzItem3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzItem3");
                    }
                }
                xxzdz.ui_xxzdzItem3UI = ui_xxzdzItem3UI;
                REG("ui.views.xxzdz.ui_xxzdzItem3UI", ui_xxzdzItem3UI);
                class ui_xxzdzItem4UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzItem4");
                    }
                }
                xxzdz.ui_xxzdzItem4UI = ui_xxzdzItem4UI;
                REG("ui.views.xxzdz.ui_xxzdzItem4UI", ui_xxzdzItem4UI);
                class ui_xxzdzItem5UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzItem5");
                    }
                }
                xxzdz.ui_xxzdzItem5UI = ui_xxzdzItem5UI;
                REG("ui.views.xxzdz.ui_xxzdzItem5UI", ui_xxzdzItem5UI);
                class ui_xxzdzItem6UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzItem6");
                    }
                }
                xxzdz.ui_xxzdzItem6UI = ui_xxzdzItem6UI;
                REG("ui.views.xxzdz.ui_xxzdzItem6UI", ui_xxzdzItem6UI);
                class ui_xxzdzItem7UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzItem7");
                    }
                }
                xxzdz.ui_xxzdzItem7UI = ui_xxzdzItem7UI;
                REG("ui.views.xxzdz.ui_xxzdzItem7UI", ui_xxzdzItem7UI);
                class ui_xxzdzMJViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzMJView");
                    }
                }
                xxzdz.ui_xxzdzMJViewUI = ui_xxzdzMJViewUI;
                REG("ui.views.xxzdz.ui_xxzdzMJViewUI", ui_xxzdzMJViewUI);
                class ui_xxzdzRankViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzRankView");
                    }
                }
                xxzdz.ui_xxzdzRankViewUI = ui_xxzdzRankViewUI;
                REG("ui.views.xxzdz.ui_xxzdzRankViewUI", ui_xxzdzRankViewUI);
                class ui_xxzdzRZViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzRZView");
                    }
                }
                xxzdz.ui_xxzdzRZViewUI = ui_xxzdzRZViewUI;
                REG("ui.views.xxzdz.ui_xxzdzRZViewUI", ui_xxzdzRZViewUI);
                class ui_xxzdzShopViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzShopView");
                    }
                }
                xxzdz.ui_xxzdzShopViewUI = ui_xxzdzShopViewUI;
                REG("ui.views.xxzdz.ui_xxzdzShopViewUI", ui_xxzdzShopViewUI);
                class ui_xxzdzTZViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzTZView");
                    }
                }
                xxzdz.ui_xxzdzTZViewUI = ui_xxzdzTZViewUI;
                REG("ui.views.xxzdz.ui_xxzdzTZViewUI", ui_xxzdzTZViewUI);
                class ui_xxzdzViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/xxzdz/ui_xxzdzView");
                    }
                }
                xxzdz.ui_xxzdzViewUI = ui_xxzdzViewUI;
                REG("ui.views.xxzdz.ui_xxzdzViewUI", ui_xxzdzViewUI);
            })(xxzdz = views.xxzdz || (views.xxzdz = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var yaoqing;
            (function (yaoqing) {
                class ui_yaoqingViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/yaoqing/ui_yaoqingView");
                    }
                }
                yaoqing.ui_yaoqingViewUI = ui_yaoqingViewUI;
                REG("ui.views.yaoqing.ui_yaoqingViewUI", ui_yaoqingViewUI);
                class ui_yaoqingView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/yaoqing/ui_yaoqingView1");
                    }
                }
                yaoqing.ui_yaoqingView1UI = ui_yaoqingView1UI;
                REG("ui.views.yaoqing.ui_yaoqingView1UI", ui_yaoqingView1UI);
                class ui_yqItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/yaoqing/ui_yqItem");
                    }
                }
                yaoqing.ui_yqItemUI = ui_yqItemUI;
                REG("ui.views.yaoqing.ui_yqItemUI", ui_yqItemUI);
                class ui_yqItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/yaoqing/ui_yqItem1");
                    }
                }
                yaoqing.ui_yqItem1UI = ui_yqItem1UI;
                REG("ui.views.yaoqing.ui_yqItem1UI", ui_yqItem1UI);
                class ui_yqItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/yaoqing/ui_yqItem2");
                    }
                }
                yaoqing.ui_yqItem2UI = ui_yqItem2UI;
                REG("ui.views.yaoqing.ui_yqItem2UI", ui_yqItem2UI);
                class ui_yqItem3UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/yaoqing/ui_yqItem3");
                    }
                }
                yaoqing.ui_yqItem3UI = ui_yqItem3UI;
                REG("ui.views.yaoqing.ui_yqItem3UI", ui_yqItem3UI);
            })(yaoqing = views.yaoqing || (views.yaoqing = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var yindao;
            (function (yindao) {
                class YinDaoViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/yindao/YinDaoView");
                    }
                }
                yindao.YinDaoViewUI = YinDaoViewUI;
                REG("ui.views.yindao.YinDaoViewUI", YinDaoViewUI);
                class YinDaoView1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/yindao/YinDaoView1");
                    }
                }
                yindao.YinDaoView1UI = YinDaoView1UI;
                REG("ui.views.yindao.YinDaoView1UI", YinDaoView1UI);
            })(yindao = views.yindao || (views.yindao = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var zhangzhan;
            (function (zhangzhan) {
                class ui_zhengzhan_avatarUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zhangzhan/ui_zhengzhan_avatar");
                    }
                }
                zhangzhan.ui_zhengzhan_avatarUI = ui_zhengzhan_avatarUI;
                REG("ui.views.zhangzhan.ui_zhengzhan_avatarUI", ui_zhengzhan_avatarUI);
                class ui_zhengzhan_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zhangzhan/ui_zhengzhan_main");
                    }
                }
                zhangzhan.ui_zhengzhan_mainUI = ui_zhengzhan_mainUI;
                REG("ui.views.zhangzhan.ui_zhengzhan_mainUI", ui_zhengzhan_mainUI);
            })(zhangzhan = views.zhangzhan || (views.zhangzhan = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var zhanling;
            (function (zhanling) {
                class ui_tabUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zhanling/ui_tab");
                    }
                }
                zhanling.ui_tabUI = ui_tabUI;
                REG("ui.views.zhanling.ui_tabUI", ui_tabUI);
                class ui_zhanLingIconItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zhanling/ui_zhanLingIconItem");
                    }
                }
                zhanling.ui_zhanLingIconItemUI = ui_zhanLingIconItemUI;
                REG("ui.views.zhanling.ui_zhanLingIconItemUI", ui_zhanLingIconItemUI);
                class ui_zhanLingIconItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zhanling/ui_zhanLingIconItem1");
                    }
                }
                zhanling.ui_zhanLingIconItem1UI = ui_zhanLingIconItem1UI;
                REG("ui.views.zhanling.ui_zhanLingIconItem1UI", ui_zhanLingIconItem1UI);
                class ui_zhanLingItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zhanling/ui_zhanLingItem");
                    }
                }
                zhanling.ui_zhanLingItemUI = ui_zhanLingItemUI;
                REG("ui.views.zhanling.ui_zhanLingItemUI", ui_zhanLingItemUI);
                class ui_zhanLingItem1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zhanling/ui_zhanLingItem1");
                    }
                }
                zhanling.ui_zhanLingItem1UI = ui_zhanLingItem1UI;
                REG("ui.views.zhanling.ui_zhanLingItem1UI", ui_zhanLingItem1UI);
                class ui_zhanLingItem2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zhanling/ui_zhanLingItem2");
                    }
                }
                zhanling.ui_zhanLingItem2UI = ui_zhanLingItem2UI;
                REG("ui.views.zhanling.ui_zhanLingItem2UI", ui_zhanLingItem2UI);
                class ui_zhanLingViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zhanling/ui_zhanLingView");
                    }
                }
                zhanling.ui_zhanLingViewUI = ui_zhanLingViewUI;
                REG("ui.views.zhanling.ui_zhanLingViewUI", ui_zhanLingViewUI);
            })(zhanling = views.zhanling || (views.zhanling = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var zhengtu;
            (function (zhengtu) {
                class ui_zhengtu_item_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zhengtu/ui_zhengtu_item_view");
                    }
                }
                zhengtu.ui_zhengtu_item_viewUI = ui_zhengtu_item_viewUI;
                REG("ui.views.zhengtu.ui_zhengtu_item_viewUI", ui_zhengtu_item_viewUI);
                class ui_zhengtu_slot_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zhengtu/ui_zhengtu_slot_item");
                    }
                }
                zhengtu.ui_zhengtu_slot_itemUI = ui_zhengtu_slot_itemUI;
                REG("ui.views.zhengtu.ui_zhengtu_slot_itemUI", ui_zhengtu_slot_itemUI);
                class ui_zhengtu_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zhengtu/ui_zhengtu_view");
                    }
                }
                zhengtu.ui_zhengtu_viewUI = ui_zhengtu_viewUI;
                REG("ui.views.zhengtu.ui_zhengtu_viewUI", ui_zhengtu_viewUI);
            })(zhengtu = views.zhengtu || (views.zhengtu = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));
    (function (ui) {
        var views;
        (function (views) {
            var zuoqi;
            (function (zuoqi) {
                class ui_zuoqiTJAttrItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqiTJAttrItem");
                    }
                }
                zuoqi.ui_zuoqiTJAttrItemUI = ui_zuoqiTJAttrItemUI;
                REG("ui.views.zuoqi.ui_zuoqiTJAttrItemUI", ui_zuoqiTJAttrItemUI);
                class ui_zuoqiTJItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqiTJItem");
                    }
                }
                zuoqi.ui_zuoqiTJItemUI = ui_zuoqiTJItemUI;
                REG("ui.views.zuoqi.ui_zuoqiTJItemUI", ui_zuoqiTJItemUI);
                class ui_zuoqiTJLabelUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqiTJLabel");
                    }
                }
                zuoqi.ui_zuoqiTJLabelUI = ui_zuoqiTJLabelUI;
                REG("ui.views.zuoqi.ui_zuoqiTJLabelUI", ui_zuoqiTJLabelUI);
                class ui_zuoqiTJViewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqiTJView");
                    }
                }
                zuoqi.ui_zuoqiTJViewUI = ui_zuoqiTJViewUI;
                REG("ui.views.zuoqi.ui_zuoqiTJViewUI", ui_zuoqiTJViewUI);
                class ui_zuoqi_attr_showUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_attr_show");
                    }
                }
                zuoqi.ui_zuoqi_attr_showUI = ui_zuoqi_attr_showUI;
                REG("ui.views.zuoqi.ui_zuoqi_attr_showUI", ui_zuoqi_attr_showUI);
                class ui_zuoqi_back_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_back_view");
                    }
                }
                zuoqi.ui_zuoqi_back_viewUI = ui_zuoqi_back_viewUI;
                REG("ui.views.zuoqi.ui_zuoqi_back_viewUI", ui_zuoqi_back_viewUI);
                class ui_zuoqi_chouquUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_chouqu");
                    }
                }
                zuoqi.ui_zuoqi_chouquUI = ui_zuoqi_chouquUI;
                REG("ui.views.zuoqi.ui_zuoqi_chouquUI", ui_zuoqi_chouquUI);
                class ui_zuoqi_fangpaiUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_fangpai");
                    }
                }
                zuoqi.ui_zuoqi_fangpaiUI = ui_zuoqi_fangpaiUI;
                REG("ui.views.zuoqi.ui_zuoqi_fangpaiUI", ui_zuoqi_fangpaiUI);
                class ui_zuoqi_mainUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_main");
                    }
                }
                zuoqi.ui_zuoqi_mainUI = ui_zuoqi_mainUI;
                REG("ui.views.zuoqi.ui_zuoqi_mainUI", ui_zuoqi_mainUI);
                class ui_zuoqi_main_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_main_attr");
                    }
                }
                zuoqi.ui_zuoqi_main_attrUI = ui_zuoqi_main_attrUI;
                REG("ui.views.zuoqi.ui_zuoqi_main_attrUI", ui_zuoqi_main_attrUI);
                class ui_zuoqi_paiitemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_paiitem");
                    }
                }
                zuoqi.ui_zuoqi_paiitemUI = ui_zuoqi_paiitemUI;
                REG("ui.views.zuoqi.ui_zuoqi_paiitemUI", ui_zuoqi_paiitemUI);
                class ui_zuoqi_spec_attr1UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_spec_attr1");
                    }
                }
                zuoqi.ui_zuoqi_spec_attr1UI = ui_zuoqi_spec_attr1UI;
                REG("ui.views.zuoqi.ui_zuoqi_spec_attr1UI", ui_zuoqi_spec_attr1UI);
                class ui_zuoqi_storgeUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_storge");
                    }
                }
                zuoqi.ui_zuoqi_storgeUI = ui_zuoqi_storgeUI;
                REG("ui.views.zuoqi.ui_zuoqi_storgeUI", ui_zuoqi_storgeUI);
                class ui_zuoqi_storge_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_storge_item");
                    }
                }
                zuoqi.ui_zuoqi_storge_itemUI = ui_zuoqi_storge_itemUI;
                REG("ui.views.zuoqi.ui_zuoqi_storge_itemUI", ui_zuoqi_storge_itemUI);
                class ui_zuoqi_tip2UI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_tip2");
                    }
                }
                zuoqi.ui_zuoqi_tip2UI = ui_zuoqi_tip2UI;
                REG("ui.views.zuoqi.ui_zuoqi_tip2UI", ui_zuoqi_tip2UI);
                class ui_zuoqi_tipsUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_tips");
                    }
                }
                zuoqi.ui_zuoqi_tipsUI = ui_zuoqi_tipsUI;
                REG("ui.views.zuoqi.ui_zuoqi_tipsUI", ui_zuoqi_tipsUI);
                class ui_zuoqi_wash_item_attrUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_wash_item_attr");
                    }
                }
                zuoqi.ui_zuoqi_wash_item_attrUI = ui_zuoqi_wash_item_attrUI;
                REG("ui.views.zuoqi.ui_zuoqi_wash_item_attrUI", ui_zuoqi_wash_item_attrUI);
                class ui_zuoqi_wash_viewUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_wash_view");
                    }
                }
                zuoqi.ui_zuoqi_wash_viewUI = ui_zuoqi_wash_viewUI;
                REG("ui.views.zuoqi.ui_zuoqi_wash_viewUI", ui_zuoqi_wash_viewUI);
                class ui_zuoqi_yunshuUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_yunshu");
                    }
                }
                zuoqi.ui_zuoqi_yunshuUI = ui_zuoqi_yunshuUI;
                REG("ui.views.zuoqi.ui_zuoqi_yunshuUI", ui_zuoqi_yunshuUI);
                class ui_zuoqi_yunshu_itemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_yunshu_item");
                    }
                }
                zuoqi.ui_zuoqi_yunshu_itemUI = ui_zuoqi_yunshu_itemUI;
                REG("ui.views.zuoqi.ui_zuoqi_yunshu_itemUI", ui_zuoqi_yunshu_itemUI);
                class ui_zuoqi_yunshu_selUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("views/zuoqi/ui_zuoqi_yunshu_sel");
                    }
                }
                zuoqi.ui_zuoqi_yunshu_selUI = ui_zuoqi_yunshu_selUI;
                REG("ui.views.zuoqi.ui_zuoqi_yunshu_selUI", ui_zuoqi_yunshu_selUI);
            })(zuoqi = views.zuoqi || (views.zuoqi = {}));
        })(views = ui.views || (ui.views = {}));
    })(exports.ui || (exports.ui = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_TeamFight_Reward extends BaseCfg {
        static get Ins() {
            if (!this._verList) {
                this._verList = [];
                this._verList.push(new t_TeamFight_RewardV0Proxy());
                this._verList.push(new t_TeamFight_RewardV1Proxy());
            }
            let temp = this._verList[0];
            for (let i = 0; i < this._verList.length; i++) {
                let proxy = this._verList[i];
                if (proxy.ver == MainModel.Ins.serverVer) {
                    temp = proxy;
                    break;
                }
            }
            return temp;
        }
        GetTabelName() {
            return "t_TeamFight_Reward";
        }
        get rewardList() {
            if (!this._rewardList) {
                this._rewardList = [];
                let l = this.List;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    if (cfg.f_RewardType == 1) {
                        this._rewardList.push(cfg);
                    }
                }
            }
            return this._rewardList;
        }
        get detailList() {
            if (!this._detailList) {
                this._detailList = [];
                let l = this.List;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    if (cfg.f_RewardType == 0) {
                        this._detailList.push(cfg);
                    }
                }
                this._detailList.reverse();
            }
            return this._detailList;
        }
        getCurFid(harm) {
            let _detailList = this.detailList;
            if (harm == 0) {
                return _detailList[_detailList.length - 1];
            }
            for (let i = _detailList.length; i > 0; i--) {
                let cur = _detailList[i - 1];
                let next = _detailList[i - 2];
                if (next && harm >= parseInt(cur.f_Stalls) && harm < parseInt(next.f_Stalls)) {
                    return cur;
                }
            }
            return _detailList[0];
        }
    }
    class t_TeamFight_RewardV0Proxy extends t_TeamFight_Reward {
        GetTabelName() {
            return "t_TeamFight_Reward";
        }
    }
    class t_TeamFight_RewardV1Proxy extends t_TeamFight_Reward {
        GetTabelName() {
            return "t_TeamFight_Reward_v1";
        }
    }
    class t_TeamFight_BossPokedex extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_TeamFight_BossPokedex();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_TeamFight_BossPokedex";
        }
        isPokedexOn(bossId) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_BossID == bossId && cfg.f_PokedexOn) {
                    return true;
                }
            }
        }
    }
    class t_TeamFight_BossAttribute extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_TeamFight_BossAttribute();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_TeamFight_BossAttribute";
        }
        getByBossId(bossId) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_BossID == bossId) {
                    return cfg;
                }
            }
        }
    }
    class t_TeamFight_BossSkill extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_TeamFight_BossSkill();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_TeamFight_BossSkill";
        }
        getSkillList(bossId) {
            let l = this.List;
            let result = [];
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_BossId == bossId) {
                    result.push(cfg);
                }
            }
            return result;
        }
    }
    class t_TeamFight_Config extends BaseCfg {
        GetTabelName() {
            return "t_TeamFight_Config";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_TeamFight_Config();
            }
            return this._ins;
        }
        get cfg() {
            if (!this._cfg) {
                this._cfg = this.GetDataById(1);
            }
            return this._cfg;
        }
    }

    exports.t_TeamFight_BossAttribute = t_TeamFight_BossAttribute;
    exports.t_TeamFight_BossPokedex = t_TeamFight_BossPokedex;
    exports.t_TeamFight_BossSkill = t_TeamFight_BossSkill;
    exports.t_TeamFight_Config = t_TeamFight_Config;
    exports.t_TeamFight_Reward = t_TeamFight_Reward;
    exports.t_TeamFight_RewardV0Proxy = t_TeamFight_RewardV0Proxy;
    exports.t_TeamFight_RewardV1Proxy = t_TeamFight_RewardV1Proxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ENodeType) {
        ENodeType[ENodeType["First"] = 0] = "First";
        ENodeType[ENodeType["Last"] = 1] = "Last";
        ENodeType[ENodeType["Mid"] = 2] = "Mid";
    })(exports.ENodeType || (exports.ENodeType = {}));
    class FighthardSlot extends ui.views.fighthard.ui_fighthard_slotUI {
        setData(data) {
            let _itemVo = ItemViewFactory.convertItem(data.preview);
            ItemViewFactory.refreshSlot(this.slot, _itemVo);
            this.maskbg.visible = false;
            this.gou1.visible = this.gouImg.visible = false;
            if (FightMonsterModel.Ins.harmIsLingQu(data.cfg.f_id)) {
                this.gou1.visible = this.gouImg.visible = true;
            }
        }
    }
    class FighthardDetailItemView extends ui.views.fighthard.ui_fighthard_detail_itemUI {
        constructor() {
            super();
            this.maskbg.mouseEnabled = false;
        }
        refresh(index) {
            this._isEnable = false;
            let _nodeType = exports.ENodeType.Mid;
            let l = t_TeamFight_Reward.Ins.detailList;
            this.top_bg1.visible = this.top_bg0.visible = true;
            this.bot_bg1.visible = this.bot_bg0.visible = true;
            if (index == 0) {
                this.top_bg1.visible = this.top_bg0.visible = false;
                _nodeType = exports.ENodeType.First;
            }
            else if (index == l.length - 1) {
                this.bot_bg1.visible = this.bot_bg0.visible = false;
                _nodeType = exports.ENodeType.Last;
            }
            let _curAccHarm = FightMonsterModel.Ins.accHarm;
            this._curAccHarm = _curAccHarm;
            this.cfg = this.dataSource;
            let val = parseInt(this.cfg.f_Stalls);
            this.countTf.text = FightMonsterModel.Ins.strConvert(val);
            let arr = this.cfg.f_preview.split("|");
            let itemlist = [];
            for (let i = 0; i < arr.length; i++) {
                let obj = {};
                obj.preview = arr[i];
                obj.cfg = this.cfg;
                itemlist.push(obj);
            }
            ItemViewFactory.renderItemSlots(this.rewardCon, itemlist, 10, 1, "right", FighthardSlot, "FighthardSlot");
            this.bg2.visible = false;
            switch (_nodeType) {
                case exports.ENodeType.Last:
                    let next = l[index - 1];
                    let nextVal1 = parseInt(next.f_Stalls);
                    let cfg = l[index];
                    let curVal = parseInt(cfg.f_Stalls);
                    this.updateValTop(curVal, curVal + (nextVal1 - curVal) / 2);
                    break;
                case exports.ENodeType.Mid:
                    let pre = l[index + 1];
                    let preVal = parseInt(pre.f_Stalls);
                    let cur = parseInt(l[index].f_Stalls);
                    this.updateBot(preVal + (cur - preVal) / 2, cur, _nodeType);
                    let next2 = l[index - 1];
                    let nextVal2 = parseInt(next2.f_Stalls);
                    this.updateValTop(cur, (nextVal2 - cur) / 2);
                    break;
                case exports.ENodeType.First:
                    let pre1 = l[index + 1];
                    let preVal1 = parseInt(pre1.f_Stalls);
                    let cur1 = parseInt(l[index].f_Stalls);
                    if (this.updateBot(preVal1 + (cur1 - preVal1) / 2, cur1, _nodeType)) {
                        this._isEnable = true;
                    }
                    break;
            }
            if (this._isEnable) {
                this.maskbg.visible = false;
            }
            else {
                this.maskbg.visible = true;
            }
        }
        updateBot(start, end, type) {
            if (this._curAccHarm >= start && this._curAccHarm < end) {
                this.bot_bg1.visible = true;
                let h = this.height / 2;
                let all = end - start;
                let val = this._curAccHarm - start;
                this.bot_bg1.width = h * val / all;
                this.bot_bg1.y = h + h - this.bot_bg1.width;
            }
            else if (this._curAccHarm < start) {
                this.bot_bg1.visible = false;
            }
            else {
                this.bg2.visible = true;
                this.bot_bg1.visible = true;
                this.bot_bg1.y = this.height / 2;
                this.bot_bg1.width = this.height / 2;
                return true;
            }
        }
        updateValTop(start, end) {
            if (this._curAccHarm < start) {
                this.top_bg1.visible = false;
            }
            else if (this._curAccHarm >= start && this._curAccHarm < end) {
                this.top_bg1.visible = true;
                let p = (this._curAccHarm - start) / (end - start);
                this.top_bg1.width = this.height / 2 * p;
            }
            else {
                this.bg2.visible = true;
                this._isEnable = true;
                this.top_bg1.visible = true;
                this.top_bg1.width = this.height / 2;
            }
        }
    }
    class FighthardDetailView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.model = FightMonsterModel.Ins;
                this.UI = this._ui = new ui.views.fighthard.ui_fighthard_detail_viewUI();
                this.bindClose(this._ui.close1);
                this.lingquCtl = ButtonCtl.CreateBtn(this._ui.lingquBtn, this, this.onLingquHandler);
                this._ui.list1.itemRender = FighthardDetailItemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onDetailHandler);
            }
        }
        onDetailHandler(item, index) {
            item.refresh(index);
        }
        onLingquHandler() {
            let req = new TeamFightHarmReward_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onDetailEvt() {
            let fid = t_TeamFight_Reward.Ins.getCurFid(this.model.data.accHarm).f_id;
            if (this.model.data.accHarm != 0 && this.model.data.harmRewardFid < fid) {
                this.lingquCtl.grayMouseDisable = false;
            }
            else {
                this.lingquCtl.grayMouseDisable = true;
            }
            this._ui.list1.refresh();
        }
        onInit() {
            let l = t_TeamFight_Reward.Ins.detailList;
            this._ui.list1.array = l;
            this._ui.list1.scrollTo(l.length - 1);
            this.model.on(FightMonsterModel.EVENT_DETAIL, this, this.onDetailEvt);
            this.onDetailEvt();
        }
    }

    exports.FighthardDetailView = FighthardDetailView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FontClipCtl {
        constructor(atlas) {
            this.l = [];
            this.key = "fontImage";
            this.mScale = 1;
            this.mWidth = 0;
            this.offsetX = 0;
            this.atlas = atlas;
        }
        setText(container, v) {
            this.mWidth = 0;
            while (this.l.length > 0) {
                let img = this.l.pop();
                img.removeSelf();
                Laya.Pool.recover(this.key, img);
            }
            let img = Laya.Pool.getItemByClass(this.key, Laya.Image);
            img.x = img.y = 0;
            img.skin = this.atlas + `${v}.png`;
            this.mWidth = img.width;
            container.addChild(img);
            this.l.push(img);
        }
        clear(container) {
            this.setValue(container, "");
        }
        setCn(container, v) {
            let arr = ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十'];
            let str = "";
            for (let i = 0; i < v.length; i++) {
                let index = arr.indexOf(v[i]);
                str += index.toString() + "";
            }
            this.setValue(container, str);
        }
        setValue(container, v, align = "left", offset = 0) {
            if (this.offsetX) {
                offset = this.offsetX;
            }
            container.scaleX = container.scaleY = this.mScale;
            while (this.l.length > 0) {
                let img = this.l.pop();
                img.removeSelf();
                Laya.Pool.recover(this.key, img);
            }
            this.mWidth = 0;
            let w = 0;
            let h = 0;
            for (let i = 0; i < v.length; i++) {
                let img = Laya.Pool.getItemByClass(this.key, Laya.Image);
                container.addChild(img);
                img.skin = this.atlas + `${v[i]}.png`;
                img.x = w;
                if (h < img.height) {
                    h = img.height;
                }
                w += (img.width + offset);
                this.l.push(img);
            }
            this.mWidth = w;
            let half = w / 2;
            for (let i = 0; i < this.l.length; i++) {
                let img = this.l[i];
                img.y = (h - img.height) / 2;
                if (align == "right") {
                    img.x -= w;
                }
                else if (align == "middle") {
                    img.x = img.x - half;
                }
            }
            if (E.Debug) {
                container.graphics.clear();
                container.graphics.drawRect(0, 0, this.mWidth, h, null, "#ff0000");
            }
        }
    }

    exports.FontClipCtl = FontClipCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PlusCtl extends FontClipCtl {
        constructor() {
            super(IconUtils.plusAtlasPrefix);
            this.mScale = 0.7;
            this.offsetX = -3;
        }
        setPlus(container, v) {
            let v1 = StringUtil.val2Atlas(v);
            this.setValue(container, v1);
        }
    }

    exports.PlusCtl = PlusCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChengHaoListProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new ChengHaoListProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Title_Lists";
        }
        getCfgByID(titleId) {
            return this.List.find(item => item.f_titleid == titleId);
        }
        getSmallIcon(titleId) {
            if (titleId == 0) {
                return "";
            }
            let str = this.getCfgByID(titleId).f_titlePic;
            let icon = `o/smalltitle/${str}`;
            if (str == "") {
                E.ViewMgr.ShowDebugError(`table t_Title_Lists titleId:${titleId} 's f_titlePic is empty!`);
            }
            if (str == "") {
                return "";
            }
            return icon;
        }
        getIcon(titleId) {
            if (titleId == 0) {
                return "";
            }
            return `o/title/${this.getCfgByID(titleId).f_titlePic}`;
        }
    }
    class ChengHaoTaskProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new ChengHaoTaskProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Title_Task";
        }
        getCfgByID(id) {
            return this.List.find(item => item.f_titleid == id);
        }
    }
    class ChengHaoTaskTypeProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new ChengHaoTaskTypeProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Title_Task_Type";
        }
        getCfgByID(id) {
            return this.List.find(item => item.f_typeid == id);
        }
    }

    exports.ChengHaoListProxy = ChengHaoListProxy;
    exports.ChengHaoTaskProxy = ChengHaoTaskProxy;
    exports.ChengHaoTaskTypeProxy = ChengHaoTaskTypeProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RankItem$1 extends ui.views.fighthard.ui_fighthard_rank_itemUI {
        constructor() {
            super();
            this._plusCtl = new PlusCtl();
        }
        refresh() {
            let _cellData = this.dataSource;
            if (_cellData.rank <= 3) {
                this.mingcitf.visible = false;
                this.paiming.skin = "remote/main/main/dfjjc_mc" + _cellData.rank + ".png";
            }
            else {
                this.paiming.skin = `remote/fighthard/dfjjc_mc.png`;
                this.mingcitf.visible = true;
                this.mingcitf.text = _cellData.rank + "";
            }
            this.head.titleIcon.visible = false;
            this.head.lvtf.text = 'Lv.' + _cellData.lv + "";
            MainModel.Ins.setTTHead(this.head.icon, MainModel.Ins.convertHead(_cellData.headUrl));
            this.nametf.text = _cellData.name;
            this.img_title.skin = ChengHaoListProxy.Ins.getIcon(_cellData.titleId);
            this._plusCtl.setPlus(this.toplug, _cellData.plus);
            this.countTf.text = _cellData.accHarm + "";
        }
    }
    class FighthardRankView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this._plusCtl = new PlusCtl();
        }
        onAddLoadRes() {
            this.addAtlas("jjc.atlas");
        }
        onExit() {
            this.model.off(FightMonsterModel.EVENT_RANK_LIST, this, this.onRankUpdate);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = FightMonsterModel.Ins;
                this.UI = this._ui = new ui.views.fighthard.ui_fighthard_rankUI();
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = RankItem$1;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRankItem);
                this._ui.list1.array = [];
                ButtonCtl.CreateBtn(this._ui.rewardBtn, this, this.onRewardHandler);
            }
        }
        onRankItem(item) {
            item.refresh();
        }
        onRewardHandler() {
            E.ViewMgr.Open(EViewType.FighthardReward);
        }
        updateSelf(item) {
            let rankVal = this.model.data.ranking;
            if (rankVal == 0) {
                item.mingcitf.visible = true;
                item.paiming.skin = "";
                item.mingcitf.text = E.getLang("fihthard04");
            }
            else {
                if (rankVal <= 3) {
                    item.mingcitf.visible = false;
                    item.paiming.skin = "remote/main/main/dfjjc_mc" + rankVal + ".png";
                }
                else {
                    item.mingcitf.text = rankVal + "";
                    item.paiming.skin = `remote/fighthard/dfjjc_mc.png`;
                    item.mingcitf.visible = true;
                    item.mingcitf.text = rankVal + "";
                }
            }
            item.head.titleIcon.visible = false;
            item.head.lvtf.text = 'Lv.' + MainModel.Ins.mRoleData.lv + "";
            MainModel.Ins.setTTHead(item.head.icon, MainModel.Ins.mRoleData.headUrl);
            item.nametf.text = MainModel.Ins.mRoleData.getName();
            item.img_title.skin = MainModel.Ins.getTitleImg();
            item.countTf.text = this.model.data.accHarm + "";
        }
        onInit() {
            this.updateSelf(this._ui.self);
            this.model.on(FightMonsterModel.EVENT_RANK_LIST, this, this.onRankUpdate);
            let req = new TeamFightRankList_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onRankUpdate() {
            this._ui.list1.array = this.model.rankList;
            this._ui.list1.scrollTo(0);
            this._plusCtl.setPlus(this._ui.self.toplug, this.model.plus);
        }
    }

    exports.FighthardRankView = FighthardRankView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ETimeShowStyle) {
        ETimeShowStyle[ETimeShowStyle["Chinese"] = 0] = "Chinese";
        ETimeShowStyle[ETimeShowStyle["Number"] = 1] = "Number";
        ETimeShowStyle[ETimeShowStyle["Second"] = 2] = "Second";
        ETimeShowStyle[ETimeShowStyle["HMS"] = 3] = "HMS";
    })(exports.ETimeShowStyle || (exports.ETimeShowStyle = {}));
    class TimeCtlV2 extends Laya.EventDispatcher {
        constructor(tf, format = "{0}", _offsetSec = 0, hasEvent = true) {
            super();
            this.subTime = 0;
            this.style = exports.ETimeShowStyle.Chinese;
            this.offsetSecond = 0;
            this.ticket = 0;
            this._isEnd = true;
            this.offsetSecond = _offsetSec;
            this.format = format;
            this.tf = tf;
            this.tf.text = "";
            if (hasEvent) {
                this.tf.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
            }
        }
        onUnDisplay() {
            this.stop();
        }
        setText(v) {
            this.subTime = v;
            let v1 = "";
            switch (this.style) {
                case exports.ETimeShowStyle.Number:
                    v1 = TimeUtil.timeFormatStr(v, true);
                    break;
                case exports.ETimeShowStyle.Chinese:
                    v1 = TimeUtil.subTime(v);
                    break;
                case exports.ETimeShowStyle.Second:
                    v1 = v.toString();
                    break;
                case exports.ETimeShowStyle.HMS:
                    v1 = TimeUtil.subTimeHMS(v);
                    break;
            }
            if (this.tf && !this.tf.destroyed) {
                this.tf.text = StringUtil.format(this.format, v1);
                this.event(Laya.Event.CHANGE);
            }
            else {
                LogSys.Warn("CHANGE tf is destroyed!");
                this.dispose();
            }
        }
        start(s) {
            this.ticket = s + this.offsetSecond;
            this.timeTick();
        }
        timeTick() {
            this.ticket--;
            if (this.ticket >= 0) {
                this._isEnd = false;
                this.setText(this.ticket - this.offsetSecond);
                Laya.timer.once(1000, this, this.timeTick);
            }
            else {
                this._isEnd = true;
                if (this.tf && !this.tf.destroyed) {
                    this.event(Laya.Event.COMPLETE);
                }
                else {
                    LogSys.Warn("COMPLETE tf is destroyed!");
                    this.dispose();
                }
            }
        }
        get isPlayingEnd() {
            return this._isEnd;
        }
        stop() {
            if (this.tf && !this.tf.destroyed) {
                this.tf.text = "";
            }
            this._isEnd = true;
            this.ticket = -1;
            Laya.timer.clear(this, this.timeTick);
            this.offAll(Laya.Event.COMPLETE);
            this.offAll(Laya.Event.CHANGE);
        }
        dispose() {
            this.stop();
            this.tf.off(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
    }

    exports.TimeCtlV2 = TimeCtlV2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RewardShowItemView extends ui.views.fighthard.ui_fighthard_reward_show_itemUI {
        constructor() {
            super();
        }
        refresh(index) {
            let cfg = this.dataSource;
            ItemViewFactory.renderItemSlots(this.rewardCon, cfg.f_preview, 10, 0.8, "right");
            let arr = cfg.f_Stalls.split("|");
            if (arr.length <= 1) {
                this.tf4.text = arr[0];
            }
            else {
                if (index + 1 == t_TeamFight_Reward.Ins.rewardList.length) {
                    this.tf4.text = arr[0] + "+";
                }
                else {
                    this.tf4.text = arr[0] + "-" + arr[1];
                }
            }
        }
    }
    class FighthardRewardView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
            this.model.off(FightMonsterModel.EVENT_REWARD_UPDATA, this, this.updateReward);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = FightMonsterModel.Ins;
                this.UI = this._ui = new ui.views.fighthard.ui_fighthard_reward_showUI();
                this._ui.list1.itemRender = RewardShowItemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRewardHandler);
                this.bindClose(this._ui.close1);
                this.lingquCtl = ButtonCtl.CreateBtn(this._ui.lingquBtn, this, this.onLingQu);
                this.timeCtl = new TimeCtlV2(this._ui.tf3, "{0}");
            }
        }
        onTimeEnd() {
            this.timeUpdate();
        }
        timeUpdate() {
            this.timeCtl.start(this.model.subTime);
            this.timeCtl.on(Laya.Event.COMPLETE, this, this.onTimeEnd);
        }
        onLingQu() {
            this.model.lingqu();
        }
        onRewardHandler(item, index) {
            item.refresh(index);
        }
        onInit() {
            this._ui.list1.array = t_TeamFight_Reward.Ins.rewardList;
            this._ui.list1.scrollTo(0);
            this.timeUpdate();
            let val = this.model.data.lastRanking;
            if (val == 0) {
                this._ui.tf4.text = E.getLang("fihthard04");
            }
            else {
                this._ui.tf4.text = E.getLang("fihthard03") + val;
            }
            this.model.on(FightMonsterModel.EVENT_REWARD_UPDATA, this, this.updateReward);
            this.updateReward();
        }
        updateReward() {
            switch (this.model.data.rankRewardState) {
                case 0:
                    this.lingquCtl.grayMouseDisable = true;
                    break;
                case 1:
                    this.lingquCtl.grayMouseDisable = false;
                    break;
                case 2:
                    this.lingquCtl.grayMouseDisable = true;
                    break;
            }
        }
    }

    exports.FighthardRewardView = FighthardRewardView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EAvatarAnim) {
        EAvatarAnim[EAvatarAnim["Invalid"] = -1] = "Invalid";
        EAvatarAnim[EAvatarAnim["Stop"] = 0] = "Stop";
        EAvatarAnim[EAvatarAnim["NormalStand"] = 1] = "NormalStand";
        EAvatarAnim[EAvatarAnim["Move"] = 2] = "Move";
        EAvatarAnim[EAvatarAnim["Attack"] = 3] = "Attack";
        EAvatarAnim[EAvatarAnim["Attack2"] = 4] = "Attack2";
        EAvatarAnim[EAvatarAnim["StrongAttack"] = 5] = "StrongAttack";
        EAvatarAnim[EAvatarAnim["StrongAttack2"] = 6] = "StrongAttack2";
        EAvatarAnim[EAvatarAnim["Hit"] = 7] = "Hit";
        EAvatarAnim[EAvatarAnim["Hit2"] = 8] = "Hit2";
        EAvatarAnim[EAvatarAnim["Dodge"] = 9] = "Dodge";
        EAvatarAnim[EAvatarAnim["Stunned"] = 10] = "Stunned";
        EAvatarAnim[EAvatarAnim["Die"] = 11] = "Die";
        EAvatarAnim[EAvatarAnim["Stand"] = 12] = "Stand";
        EAvatarAnim[EAvatarAnim["None"] = 13] = "None";
        EAvatarAnim[EAvatarAnim["WoodStand"] = 15] = "WoodStand";
        EAvatarAnim[EAvatarAnim["AssassinateReady"] = 23] = "AssassinateReady";
        EAvatarAnim[EAvatarAnim["Assassinate"] = 24] = "Assassinate";
        EAvatarAnim[EAvatarAnim["OnlyWing"] = 25] = "OnlyWing";
        EAvatarAnim[EAvatarAnim["InStunned"] = 26] = "InStunned";
        EAvatarAnim[EAvatarAnim["InAnim"] = 27] = "InAnim";
        EAvatarAnim[EAvatarAnim["ShootStart"] = 29] = "ShootStart";
        EAvatarAnim[EAvatarAnim["ShootRun"] = 30] = "ShootRun";
        EAvatarAnim[EAvatarAnim["HandBookStand"] = 31] = "HandBookStand";
        EAvatarAnim[EAvatarAnim["HandBookShow1"] = 32] = "HandBookShow1";
        EAvatarAnim[EAvatarAnim["HandBookShow2"] = 33] = "HandBookShow2";
        EAvatarAnim[EAvatarAnim["FightHit"] = 34] = "FightHit";
        EAvatarAnim[EAvatarAnim["FightAttack"] = 35] = "FightAttack";
        EAvatarAnim[EAvatarAnim["FightAttack2"] = 36] = "FightAttack2";
        EAvatarAnim[EAvatarAnim["FightLastAttck"] = 43] = "FightLastAttck";
        EAvatarAnim[EAvatarAnim["ShoveAside"] = 46] = "ShoveAside";
    })(exports.EAvatarAnim || (exports.EAvatarAnim = {}));
    (function (EAnimEvent) {
        EAnimEvent["Attack"] = "attack";
        EAnimEvent["HitAnim"] = "hitanim";
        EAnimEvent["Drum"] = "drum";
    })(exports.EAnimEvent || (exports.EAnimEvent = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FighthardAvatarItem$1 extends ui.views.fighthard.ui_fighthard_avatarUI {
        refresh() {
            this.cfg = this.dataSource;
            this.qua.skin = IconUtils.getQuaIcon(this.cfg.f_BossQuality);
            if (t_TeamFight_BossPokedex.Ins.isPokedexOn(this.cfg.f_BossID)) {
                this.icon.skin = `o/boss/${this.cfg.f_BossID}.png`;
            }
            else {
                this.icon.skin = `remote/main/main/weikaifang.png`;
            }
            this.tf1.text = this.cfg.f_BossName;
        }
    }
    class FighthardCirle$1 extends ui.views.fighthard.ui_fight_hard_cirleUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler(e) {
            e.stopPropagation();
            MainModel.Ins.showSmallTips(this.cfg.f_SkillName, this.cfg.f_SkillDes, this);
        }
        refresh() {
            let cfg = this.dataSource;
            this.cfg = cfg;
            this.tf.text = cfg.f_SkillName;
        }
    }
    class FighthardTujianView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
            this._ui.list1.selectedIndex = -1;
            this.disposeAvatar();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.fighthard.ui_fighthardtujianUI();
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = FighthardAvatarItem$1;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list1.selectEnable = true;
                this._ui.list1.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this._ui.list2.itemRender = FighthardCirle$1;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onList2Handler);
                this._ui.avatarCon.scaleX = this._ui.avatarCon.scaleY = 0.5;
            }
        }
        onList2Handler(item) {
            item.refresh();
        }
        disposeAvatar() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        onSelectHandler(index) {
            let _attrCfg = t_TeamFight_BossAttribute.Ins.List[index];
            if (!_attrCfg) {
                return;
            }
            if (!t_TeamFight_BossPokedex.Ins.isPokedexOn(_attrCfg.f_BossID)) {
                this._ui.list1.selectedIndex = this.oldIndex;
                E.ViewMgr.ShowMidError(E.getLang("please_wait"));
                return;
            }
            if (index >= 0) {
                this.oldIndex = index;
                let cfg = t_TeamFight_BossAttribute.Ins.List[index];
                if (this._avatar && this._avatar.vo == cfg) ;
                else {
                    this.disposeAvatar();
                    let key = cfg.f_Res;
                    this._avatar = AvatarFactory.createBossMonster(`o/spine/${key}/${key}`);
                    this._avatar.vo = cfg;
                    this._avatar.play(EAvatarAnim.NormalStand);
                    this._ui.avatarCon.addChild(this._avatar);
                    this._ui.tf3.text = cfg.f_BossChar;
                    this._ui.list2.array = t_TeamFight_BossSkill.Ins.getSkillList(cfg.f_BossID);
                    this._ui.nametf.text = cfg.f_BossName;
                }
            }
        }
        onItemRender(item, index) {
            item.refresh();
            if (this._ui.list1.selectedIndex == index) {
                item.sel.visible = true;
            }
            else {
                item.sel.visible = false;
            }
        }
        onInit() {
            let _openIndex = 0;
            let l = t_TeamFight_BossAttribute.Ins.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (t_TeamFight_BossPokedex.Ins.isPokedexOn(cfg.f_BossID)) {
                    _openIndex = i;
                    break;
                }
            }
            this.oldIndex = _openIndex;
            this._ui.list1.array = l;
            this._ui.list1.selectedIndex = _openIndex;
        }
    }

    exports.FighthardTujianView = FighthardTujianView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GuaJiModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new GuaJiModel();
            }
            return this._ins;
        }
        setInviteeData(value) {
            this.inviteeData = value;
        }
        setPackEndUnix(value) {
            this.packEndUnix = value;
        }
        isFree() {
            if (GuaJiModel.Ins.fastData.fastAfkBuyNum == 0) {
                return true;
            }
            return false;
        }
        getstAdCdByType(pos) {
            if (this.stAdCdList) {
                return this.stAdCdList.find(ele => ele.pos == pos);
            }
        }
    }
    GuaJiModel.CDEnmu = {
        BaoXiangLv: 1,
        GuaJi: 2,
        WuGuanSS: 3,
        GuangGao: 4,
        Boss: 5,
    };
    GuaJiModel.UPDATA_VIEW = "UPDATA_VIEW";
    GuaJiModel.UPDATA_KUAISUVIEW = "UPDATA_KUAISUVIEW";
    GuaJiModel.UPDATA_CD_TIME = "UPDATA_CD_TIME";

    exports.GuaJiModel = GuaJiModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Platform extends BaseCfg {
        constructor() {
            super(...arguments);
            this._isInit = false;
        }
        GetTabelName() {
            return "t_Platform";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Platform();
            }
            return this._ins;
        }
        init() {
            if (this._isInit) {
                return;
            }
            this._cfg = this.curCfg;
            this._isInit = true;
        }
        get curCfg() {
            if (this.isHasData) {
                if (!this._curCfg) {
                    let l = this.List;
                    let cell = l.find(o => o.f_clienttype == (initConfig.clienttype || 0) && o.f_platform == initConfig.platform);
                    this._curCfg = cell;
                }
                return this._curCfg;
            }
        }
        isClose(funcid) {
            this.init();
            if (this._cfg) {
                let arr = this._cfg.f_close_arr.split("|");
                return arr.indexOf(funcid.toString()) != -1;
            }
            return false;
        }
        get isADclose() {
            let cell = this.curCfg;
            return cell && cell.f_ad_close == 1;
        }
        get isOneLvUp() {
            return this.curCfg.f_one_lv == 1;
        }
        get isHideAdImg() {
            return this.isADclose || !this.curCfg.f_skipAD;
        }
        get isFeastUI() {
            let cell = this.curCfg;
            return cell && cell.f_feastUI == 1;
        }
        get IOS_recharge() {
            return this.curCfg.f_IOSRecharge == 1;
        }
    }

    exports.t_Platform = t_Platform;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FighthardItemView extends ui.views.fighthard.ui_fighthard_itemUI {
        constructor() {
            super();
            this.index = 0;
            this.isCanLingQu = false;
            this.model = FightMonsterModel.Ins;
            this.icon.on(Laya.Event.CLICK, this, this.onIconClick);
        }
        onIconClick() {
            if (this.isCanLingQu) {
                let req = new TeamFightHarmReward_req();
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        refresh(index) {
            this.cfg = this.dataSource;
            this.index = index;
            let nextcfg;
            let precfg;
            let _curAccHarm = FightMonsterModel.Ins.accHarm;
            this._curAccHarm = _curAccHarm;
            let l = E.ViewMgr.Get(EViewType.FightMonster).mainDetailList;
            this.enableIcon = false;
            this.jindu1.visible = this.jindubg1.visible = true;
            this.arrow.visible = false;
            let s1;
            let e1;
            let s2;
            let e2;
            this.bg2.visible = true;
            this.tf.visible = true;
            if (index == 0) {
                this.tf.visible = false;
                this.icon.visible = false;
                this.arrow.visible = true;
                this.jindu0.visible = this.jindubg0.visible = false;
                s1 = parseInt(this.cfg.f_Stalls);
                nextcfg = l[index + 1];
                e1 = s1 + (parseInt(nextcfg.f_Stalls) - s1) / 2;
                this.updateRight(s1, e1);
                this.bg2.visible = false;
            }
            else if (index == l.length - 1) {
                precfg = l[index - 1];
                let preVal = parseInt(precfg.f_Stalls);
                s1 = preVal + (parseInt(this.cfg.f_Stalls) - preVal) / 2;
                e1 = parseInt(this.cfg.f_Stalls);
                this.updateLeft(s1, e1);
                this.icon.visible = true;
                this.jindu1.visible = this.jindubg1.visible = false;
            }
            else {
                this.icon.visible = true;
                this.jindu0.visible = this.jindubg0.visible = true;
                precfg = l[index - 1];
                let preVal = parseInt(precfg.f_Stalls);
                s1 = preVal + (parseInt(this.cfg.f_Stalls) - preVal) / 2;
                e1 = parseInt(this.cfg.f_Stalls);
                this.updateLeft(s1, e1);
                nextcfg = l[index + 1];
                s2 = e1;
                e2 = s2 + (parseInt(nextcfg.f_Stalls) - s2) / 2;
                this.updateRight(s2, e2);
            }
            let val = parseInt(this.cfg.f_Stalls);
            this.tf.text = this.model.strConvert(val);
        }
        updateRight(start, end) {
            if (this._curAccHarm < start) {
                this.jindu1.visible = false;
            }
            else if (this._curAccHarm >= start && this._curAccHarm < end) {
                this.jindu1.visible = true;
                let p = (this._curAccHarm - start) / (end - start);
                this.jindu1.width = this.width / 2 * p;
            }
            else {
                this.enableIcon = true;
                this.bg2.visible = true;
                this.jindu1.visible = true;
                this.jindu1.width = this.width / 2;
            }
        }
        updateLeft(start, end) {
            if (this._curAccHarm < start) {
                this.jindu0.visible = false;
            }
            else if (this._curAccHarm >= start && this._curAccHarm < end) {
                this.jindu0.visible = true;
                let p = (this._curAccHarm - start) / (end - start);
                this.jindu0.width = this.width / 2 * p;
            }
            else {
                this.enableIcon = true;
                this.jindu0.visible = true;
                this.jindu0.width = this.width / 2;
            }
        }
        set enableIcon(v) {
            this.isCanLingQu = false;
            if (v) {
                this.bg1.visible = true;
                if (this.index == 0) ;
                else {
                    if (this.cfg.f_id <= this.model.data.harmRewardFid) {
                        this.icon.skin = `remote/fighthard/fj_bx_2.png`;
                    }
                    else {
                        this.icon.skin = `remote/fighthard/fj_bx_1.png`;
                        this.isCanLingQu = true;
                    }
                }
            }
            else {
                this.bg1.visible = false;
                this.icon.skin = `remote/fighthard/fj_bx.png`;
            }
        }
    }
    class FightMonsterView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("fighthard.atlas");
            this.addAtlas("zhengzhan.atlas");
        }
        onExit() {
            this.model.off(FightMonsterModel.EVENT_UPDATA, this, this.refreshEvt);
            this.disposeAvatar();
        }
        disposeAvatar() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = FightMonsterModel.Ins;
                this.UI = this._ui = new ui.views.fighthard.ui_fighthardbiewUI();
                this.timeCtl = new TimeCtlV2(this._ui.timeTf, "{0}");
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.tujianBtn, this, this.onhandbookHandler);
                ButtonCtl.CreateBtn(this._ui.help1, this, this.onHelpHandler);
                this.fightBtnCtl = ButtonCtl.CreateBtn(this._ui.fightBtn, this, this.onFightHandler);
                this.adFreeCtl = ButtonCtl.CreateBtn(this._ui.freeBtn, this, this.onAdFreeHandler);
                ButtonCtl.CreateBtn(this._ui.rankBtn, this, this.onRankHandler);
                ButtonCtl.CreateBtn(this._ui.rewardBtn, this, this.onRewardDetialHander);
                this._ui.list1.itemRender = FighthardItemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this.refreshList();
                if (t_Platform.Ins.isADclose) {
                    this._ui.tiaozhanCon.x = 189;
                    this._ui.freeCon.visible = false;
                }
            }
        }
        refreshList() {
            this.mainDetailList = [];
            let l = t_TeamFight_Reward.Ins.detailList;
            let _first = {};
            _first.f_Stalls = "0";
            _first.f_id = 0;
            this.mainDetailList.push(_first);
            for (let i = l.length; i > 0; i--) {
                let cfg = l[i - 1];
                this.mainDetailList.push(cfg);
            }
        }
        okHandler() {
            let req = new TeamFight_req();
            req.type = this.model.isFree() ? 1 : 2;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onFightHandler() {
            if (!this.model.isFree()) {
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.getLang("UseItem", this.model.needGold + "元宝"), new Laya.Handler(this, this.okHandler));
            }
            else {
                this.okHandler();
            }
        }
        onRenderHandler(item, index) {
            item.refresh(index);
        }
        onRewardDetialHander() {
            E.ViewMgr.Open(EViewType.FighthardDetail);
        }
        onRankHandler() {
            E.ViewMgr.Open(EViewType.FightHardRank);
        }
        onAdFreeHandler() {
            if (this.model.hasADtime) {
                E.sendTrack("ad_watch", { type: "aozhang" });
                E.sdk.lookVideo((type) => {
                    switch (type) {
                        case 0:
                            break;
                        case 1:
                            E.sendTrack("ad_finish", { type: "aozhang" });
                            let req = new AdWatchDone_req;
                            req.pos = GuaJiModel.CDEnmu.Boss;
                            SocketMgr.Ins.SendMessageBin(req);
                            break;
                    }
                });
            }
        }
        onHelpHandler() {
            E.ViewMgr.openHelpView("xiongshou01", "xiongshou02");
        }
        onTimeEnd() {
            this.timeUpdate();
        }
        onhandbookHandler() {
            E.ViewMgr.Open(EViewType.FighthardTuJian);
        }
        onTimeUpdate() {
            let w = this._ui.timeTf.textField.width + this._ui.tf1.textField.width;
            this._ui.timeTf.x = (this._ui.width - w) / 2;
            this._ui.tf1.x = this._ui.timeTf.x + this._ui.timeTf.textField.width;
        }
        timeUpdate() {
            let sub = this.model.subTime;
            if (sub <= 0) {
                this._ui.tf1.visible = false;
                this._ui.timeTf.visible = false;
            }
            else {
                this._ui.tf1.visible = true;
                this._ui.timeTf.visible = true;
                this.timeCtl.start(sub);
                this.timeCtl.on(Laya.Event.CHANGE, this, this.onTimeUpdate);
                this.timeCtl.on(Laya.Event.COMPLETE, this, this.onTimeEnd);
            }
        }
        get curIndex() {
            let accHarm = this.model.data.accHarm;
            let index = 0;
            let l = this.mainDetailList;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (parseInt(cfg.f_Stalls) <= accHarm) {
                    index = i;
                }
            }
            return index;
        }
        refreshEvt() {
            this.timeUpdate();
            this._ui.tf5.text = E.getLang("fihthard01") + ":" + StringUtil.val2m(this.model.accHarm);
            this._ui.nametf.text = t_TeamFight_BossAttribute.Ins.getByBossId(this.model.data.bossId).f_BossName;
            this.disposeAvatar();
            this._avatar = this.model.getBossMonster();
            this._avatar.play(EAvatarAnim.NormalStand);
            this._ui.avatarCon.addChild(this._avatar);
            this._ui.list1.array = this.mainDetailList;
            this._ui.list1.scrollTo(this.curIndex);
            this._ui.goldTf.visible = false;
            this._ui.goldImg.visible = false;
            this.fightBtnCtl.grayMouseDisable = false;
            if (this.model.isFree()) {
                this._ui.tf7.visible = true;
                this._ui.tf7.text = E.getLang("fihthard02") + ":" + this.model.freeCount;
            }
            else {
                this._ui.tf7.visible = false;
                if (this.model.data.buyNum >= this.model.cfg.f_MaxPurchase) {
                    this.fightBtnCtl.grayMouseDisable = true;
                }
                else {
                    this._ui.goldTf.visible = true;
                    this._ui.goldImg.visible = true;
                    this._ui.goldTf.text = this.model.needGold + "";
                }
            }
            if (this.model.hasADtime) {
                this.adFreeCtl.grayMouseDisable = false;
            }
            else {
                this.adFreeCtl.grayMouseDisable = true;
            }
            this._ui.freeCountTf.text = E.getLang("fihthard02") + ":" + this.model.adFreeCount;
        }
        onInit() {
            this.refreshList();
            this.model.on(FightMonsterModel.EVENT_UPDATA, this, this.refreshEvt);
            this.refreshEvt();
        }
    }

    exports.FightMonsterView = FightMonsterView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FightMonsterModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.plus = 0;
            this.totalHarm = 0;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FightMonsterModel();
            }
            return this._ins;
        }
        initMsg() {
            this.Reg(new FightMonsterView(EViewType.FightMonster));
            this.Reg(new FighthardRankView(EViewType.FightHardRank));
            this.Reg(new FighthardRewardView(EViewType.FighthardReward));
            this.Reg(new FighthardDetailView(EViewType.FighthardDetail));
            this.Reg(new FighthardTujianView(EViewType.FighthardTuJian));
            E.MsgMgr.AddMsg(MSGID.TeamFightInit, this.onTeamFightInit, this);
            E.MsgMgr.AddMsg(MSGID.TeamFight, this.onTeamFight, this);
            E.MsgMgr.AddMsg(MSGID.TeamFightRankList, this.onTeamFightRankListRevc, this);
            E.MsgMgr.AddMsg(MSGID.TeamFightRankReward, this.onTeamFightRankReward, this);
            E.MsgMgr.AddMsg(MSGID.TeamFightHarmReward, this.onTeamFightHarmReward, this);
        }
        onTeamFightHarmReward(revc) {
            this.data.harmRewardFid = revc.harmRewardFid;
            this.event(FightMonsterModel.EVENT_DETAIL);
            this.event(FightMonsterModel.EVENT_UPDATA);
        }
        harmIsLingQu(fid) {
            return fid <= this.data.harmRewardFid;
        }
        onTeamFightRankReward(revc) {
            this.data.rankRewardState = revc.rankRewardState;
            this.event(FightMonsterModel.EVENT_REWARD_UPDATA);
        }
        onTeamFightRankListRevc(revc) {
            this.rankList = revc.dataList.map(o => (Object.assign(Object.assign({}, o), { accHarm: o.accHarm.toNumber() })));
            this.plus = revc.plus;
            this.event(FightMonsterModel.EVENT_RANK_LIST);
        }
        onTeamFightInit(revc) {
            this.data = Object.assign(Object.assign({}, revc), { accHarm: revc.accHarm.toNumber() });
        }
        onTeamFight(revc) {
            this.data.freeNum = revc.freeNum;
            this.data.buyNum = revc.buyNum;
            this.data.adNum = revc.adNum;
            this.data.accHarm = revc.accHarm.toNumber();
            this.data.ranking = revc.ranking;
            this.totalHarm = revc.totalHarm;
            this.event(FightMonsterModel.EVENT_UPDATA);
        }
        onInitCallBack() {
            this.data = null;
            this.plus = 0;
        }
        get accHarm() {
            if (this.data) {
                return this.data.accHarm;
            }
        }
        isFree() {
            let cfg = this.cfg;
            if (this.data.freeNum < cfg.f_FreeMax) {
                return true;
            }
            return false;
        }
        get cfg() {
            return t_TeamFight_Config.Ins.cfg;
        }
        get needGold() {
            let cfg = this.cfg;
            let val = parseInt(cfg.f_PurchaseInitial.split("-")[1]);
            return val + this.data.buyNum * parseInt(cfg.f_PurchaseInc.split("-")[1]);
        }
        get freeCount() {
            return this.cfg.f_FreeMax - this.data.freeNum;
        }
        get adFreeCount() {
            return this.cfg.f_MaxAD - this.data.adNum;
        }
        get hasADtime() {
            let cfg = this.cfg;
            if (this.data.adNum < cfg.f_MaxAD) {
                return true;
            }
            return false;
        }
        getBossMonster(that, func) {
            let cfg = t_TeamFight_BossAttribute.Ins.getByBossId(this.data.bossId);
            let key = cfg.f_Res;
            let url = `o/spine/${key}/${key}`;
            let _avatar = AvatarFactory.createBossMonster(url, that, func);
            return _avatar;
        }
        get subTime() {
            let sub = this.data.closeUnix - TimeUtil.serverTime;
            return sub;
        }
        lingqu() {
            let req = new TeamFightRankReward_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        strConvert(val) {
            let _1y = 100000000;
            let checkVal = 1000000;
            if (val >= checkVal && val < _1y) {
                val = val / checkVal;
                return Math.floor(val * (checkVal / 10000)) + "万";
            }
            else if (val >= _1y) {
                val = val / _1y;
                return val.toFixed(1) + "亿";
            }
            return val.toString();
        }
    }
    FightMonsterModel.STATUS_NOT_GET = 1;
    FightMonsterModel.STATUS_IS_GET = 2;
    FightMonsterModel.EVENT_UPDATA = "EVENT_UPDATA";
    FightMonsterModel.EVENT_RANK_LIST = "EVENT_RANK_LIST";
    FightMonsterModel.EVENT_DETAIL = "EVENT_DETAIL";
    FightMonsterModel.EVENT_REWARD_UPDATA = "";

    exports.FightMonsterModel = FightMonsterModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChengHaoModel extends Laya.EventDispatcher {
        constructor() {
            super(...arguments);
            this.newTitleList = [];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ChengHaoModel();
            }
            return this._ins;
        }
        isRedTip() {
            if (this.isAwardRedTip() || this.isNewCHRedTip()) {
                return true;
            }
            return false;
        }
        isAwardRedTip() {
            if (this.state) {
                return true;
            }
            return false;
        }
        isNewCHRedTip() {
            for (let i = 0; i < this.newTitleList.length; i++) {
                if (this.newTitleList[i].isSelect == false) {
                    return true;
                }
            }
            return false;
        }
        getTitleImg(id) {
            let cfg = ChengHaoListProxy.Ins.getCfgByID(id);
            if (cfg) {
                return "o/title/" + cfg.f_titlePic;
            }
            return "";
        }
    }
    ChengHaoModel.UPDATA_CHENGHAO = "UPDATA_CHENGHAO";
    ChengHaoModel.UPDATA_VIEW = "UPDATA_VIEW";
    ChengHaoModel.SELECT_CH = "SELECT_CH";
    ChengHaoModel.UPDATA_VIEW_AWARD = "UPDATA_VIEW_AWARD";

    exports.ChengHaoModel = ChengHaoModel;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class JjcEvent {
	}
	JjcEvent.UpdatePlayerList = "UpdatePlayerList";
	JjcEvent.FightPlayerList = "FightPlayerList";
	JjcEvent.MoneyVal = "MoneyVal";
	JjcEvent.BuyFightCntUpdate = "BuyFightCntUpdate";
	JjcEvent.LogEvent = "LogEvent";
	JjcEvent.LingQuUpdate = "LingQuUpdate";
	JjcEvent.SurplusRefreshCount = "SurplusRefreshCount";
	JjcEvent.TodayRankValUpdate = "TodayRankValUpdate";
	JjcEvent.JjcWeekInfoUpdate = "JjcWeekInfoUpdate";
	JjcEvent.WeekTime = "WeekTime";
	JjcEvent.RedUpdate = "RedUpdate";
	JjcEvent.RankShowAvatar = "RankShowAvatar";
	JjcEvent.DailyDayTime = "DailyDayTime";
	JjcEvent.SelfScore = "SelfScore";

	exports.JjcEvent = JjcEvent;

	return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EJjcRewadShow) {
        EJjcRewadShow[EJjcRewadShow["Day"] = 0] = "Day";
        EJjcRewadShow[EJjcRewadShow["Week"] = 1] = "Week";
    })(exports.EJjcRewadShow || (exports.EJjcRewadShow = {}));
    (function (EJjcRewadShowStatus) {
        EJjcRewadShowStatus[EJjcRewadShowStatus["Cant"] = 0] = "Cant";
        EJjcRewadShowStatus[EJjcRewadShowStatus["CanLingqu"] = 1] = "CanLingqu";
        EJjcRewadShowStatus[EJjcRewadShowStatus["Nothing"] = 2] = "Nothing";
    })(exports.EJjcRewadShowStatus || (exports.EJjcRewadShowStatus = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JJC_BaseModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.tempPlayerId = 0;
            this.mDropRed = false;
            this.preRewardList = [];
            this.selfScore = 0;
        }
        initMsg() {
        }
        get mRed() {
            if (TaskModel.Ins.isFuncOpen(this.funcId)) {
                return this.getRedByType(EJjcRewadShow.Day) ||
                    this.getRedByType(EJjcRewadShow.Week) ||
                    this.mFightRed ||
                    this.mDropRed;
            }
        }
        onInitCallBack() {
            this.preRewardList = [];
            this._ownerPlayer = null;
            this.selfScore = 0;
        }
        onJjcBuyFightCntRevc(revc) {
            this.fightBuyRevc = revc;
            this.event(JjcEvent.BuyFightCntUpdate);
            if (this.tempPlayerId != 0) {
                this.fight(this.tempPlayerId);
                this.tempPlayerId = 0;
            }
        }
        fight(id) {
        }
        get plus() {
            return MainModel.Ins.mRoleData.plus;
        }
        updateRed() {
            this.event(JjcEvent.RedUpdate);
            MainModel.Ins.updateJJC_Red();
        }
        get hasScore() {
            return MainModel.Ins.getIsShowScore(this.funcId);
        }
    }

    exports.JJC_BaseModel = JJC_BaseModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MountConfigProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new MountConfigProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Mount_Config";
        }
        getByQualityID(qua) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_QualityID == qua) {
                    return cfg;
                }
            }
        }
    }
    class Mount_ValueProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new Mount_ValueProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Mount_Value";
        }
        getAttrList() {
            let rs = [];
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                rs.push(cfg.f_attr_id);
            }
            return rs;
        }
    }
    class Mount_MissionProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new Mount_MissionProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Mount_Mission";
        }
    }
    class Mount_GachaProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new Mount_GachaProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Mount_Gacha";
        }
        getCfg(id) {
            let cfg = this.GetDataById(id);
            return cfg;
        }
    }
    class Mount_StrogeProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new Mount_StrogeProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Mount_Stroge";
        }
        getCfg(id) {
            let cfg = this.GetDataById(id);
            return cfg;
        }
    }
    class Mount_ListProxy extends BaseCfg {
        constructor() {
            super(...arguments);
            this.maxAttrCount = 5;
            this.wakeStar = 6;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new Mount_ListProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Mount_List";
        }
        getMaxQua() {
            let qua = 0;
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_Quality > qua) {
                    qua = cfg.f_Quality;
                }
            }
            return qua;
        }
        get maxQua() {
            if (!this._maxQua) {
                this._maxQua = this.getMaxQua();
            }
            return this._maxQua;
        }
        getCfg(id) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_MountID == id) {
                    return cfg;
                }
            }
        }
        getUnLockStar(id, index) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_MountID == id) {
                    for (let i = 0; i < this.maxAttrCount; i++) {
                        if (index == i) {
                            let id = i + 1;
                            return parseInt(cfg[`f_UnlockVal${id}`]);
                        }
                    }
                }
            }
            return 0;
        }
        getRideSpeclAttr(rideId, rideStar) {
            let l = this.List;
            let result = [];
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_MountID == rideId) {
                    for (let i = 0; i < this.maxAttrCount; i++) {
                        let id = i + 1;
                        if (cfg[`f_Skill${id}`]) {
                            let _star = parseInt(cfg[`f_UnlockVal${id}`]);
                            if (rideStar >= _star) {
                                let _cell = new RideAttr();
                                _cell.f_UnlockVal = _star;
                                _cell.id = parseInt(cfg[`f_Skill${id}`]);
                                _cell.value = parseInt(cfg[`f_Skill${id}Value`]);
                                result.push(_cell);
                            }
                        }
                    }
                }
            }
            return result;
        }
        getSpeaicelAttr(id) {
            let cfg = this.getCfg(id);
            let l = [];
            if (cfg) {
                const _max = this.maxAttrCount;
                for (let i = 0; i < _max; i++) {
                    let key = i + 1;
                    let attrId = cfg["f_Skill" + key];
                    if (attrId) {
                        let cell = new stEquipAttr();
                        cell.id = attrId;
                        let k2 = cfg[`f_Skill${key}Value`];
                        if (k2) {
                            cell.value = k2;
                        }
                        l.push(cell);
                    }
                }
            }
            return l;
        }
    }
    class RideAttr {
    }

    exports.MountConfigProxy = MountConfigProxy;
    exports.Mount_GachaProxy = Mount_GachaProxy;
    exports.Mount_ListProxy = Mount_ListProxy;
    exports.Mount_MissionProxy = Mount_MissionProxy;
    exports.Mount_StrogeProxy = Mount_StrogeProxy;
    exports.Mount_ValueProxy = Mount_ValueProxy;
    exports.RideAttr = RideAttr;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangStarCtl {
        constructor(skin) {
            this.MAX_STAR = 5;
            this._ui = skin;
            this._ui.on(Laya.Event.DISPLAY, this, this.onAdd);
            this._ui.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
        }
        onRemove() {
        }
        setStar(lv) {
            this.starNum = 0;
            this.curW = 0;
            let skin = Math.ceil(lv / 5);
            let v = lv % this.MAX_STAR;
            if (v == 0 && lv > 0) {
                v = this.MAX_STAR;
            }
            for (let i = 1; i < this.MAX_STAR + 1; i++) {
                let starSkin = this._ui["img" + i];
                if (v >= i) {
                    starSkin.visible = true;
                    starSkin.skin = `remote/common/base/start${skin}.png`;
                    this.starNum++;
                    this.curW = starSkin.x + starSkin.width;
                }
                else {
                    starSkin.visible = false;
                }
            }
        }
        centerX(offsetX = 0) {
            this._ui.x = offsetX - (this._ui.width / this.MAX_STAR) * this.starNum / 2;
        }
        centerX2() {
            this._ui.x = this._ui.parent.width / 2 - this.curW / 2 * this._ui.scaleX;
        }
    }

    exports.FuJiangStarCtl = FuJiangStarCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BloodCtl {
        constructor(skin) {
            this._val = 1;
            this._yellowval = 1;
            this._yellowMask = new Laya.Sprite();
            this.playTime = 250;
            this.skin = skin;
            let mask1 = new Laya.Sprite();
            skin.b1.mask = mask1;
            this.mask1 = mask1;
            skin.b2.mask = this._yellowMask;
            this.playTime /= AnimConfig.AnimScale;
            BloodCtl.UseTime = 1.5 * this.playTime;
        }
        set visible(v) {
            this.skin.visible = v;
        }
        get visible() {
            return this.skin && this.skin.visible;
        }
        set yellowval(val) {
            this._yellowval = val;
            let mask1 = this._yellowMask;
            let skin = this.skin;
            mask1.graphics.clear();
            let w = skin.b2.width * val;
            if (w <= 0) {
                w = 1;
            }
            mask1.graphics.drawRect(0, 0, w, skin.b2.height, "#00ff00");
        }
        set val(val) {
            this._val = val;
            let mask1 = this.mask1;
            let skin = this.skin;
            mask1.graphics.clear();
            let w = skin.b1.width * val;
            if (w <= 0) {
                w = 1;
            }
            mask1.graphics.drawRect(0, 0, w, skin.b1.height, "#00ff00");
        }
        get val() {
            return this._val;
        }
        get yellowval() {
            return this._yellowval;
        }
        setValue(v) {
            if (v < 0.01) {
                if (v > 0) {
                    v = 0.01;
                }
                else {
                    v = 0;
                }
            }
            if (v > 0 && !this.visible) {
                this.visible = true;
                if (E.Debug) {
                    console.log("===============>隐藏转显示");
                }
            }
            this.val = v;
            Laya.timer.once(this.playTime / 2, this, this.delayTime, [v]);
        }
        delayTime(v) {
            if (!this.yellowTween) {
                this.yellowTween = new Laya.Tween();
            }
            this.yellowTween.clear();
            this.yellowTween.to(this, { yellowval: v }, this.playTime, null, new Laya.Handler(this, this.onComplete));
        }
        onComplete() {
            if (this._val <= 0) {
                this.visible = false;
                LogSys$1.Log("end ==== >" + this._val + " 隐藏血条");
            }
        }
        initVal(v) {
            this.visible = true;
            this.val = v;
            this.yellowval = v;
        }
    }
    BloodCtl.UseTime = 0;

    exports.BloodCtl = BloodCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AvatarBloodSpine extends ui.views.maoxian.ui_blood_viewUI {
        constructor() {
            super();
            this._bloodVal = 0;
            this.curBlood = 0;
            this._skillTween = new Laya.Tween();
            this._bloodCtl = new BloodCtl(this);
            this.skillTf.visible = false;
            this.starCtl = new FuJiangStarCtl(this.starItem);
            this.con1.visible = false;
        }
        get isShow() {
            return this._bloodCtl && this._bloodCtl.visible;
        }
        setInit(cur, max) {
            this.curBlood = cur;
            this._bloodVal = max;
            this.setValue(cur / max);
        }
        dispose() {
            this.removeSelf();
            this.destroy();
        }
        get curBloodVal() {
            return this.curBlood;
        }
        playSkillTxt(f_SkillType, f_SkillName) {
            if (f_SkillType == 1) {
                this.skillTf.color = "#FFFF99";
                this.skillTf.strokeColor = "#9F540C";
            }
            else if (f_SkillType == 2) {
                this.skillTf.color = "#996AD8";
                this.skillTf.strokeColor = "#460548";
            }
            this.skillTf.visible = true;
            this.skillTf.alpha = 0.5;
            this.skillTf.y = 100;
            this.skillTf.text = f_SkillName;
            this._skillTween.clear();
            this._skillTween.to(this.skillTf, { scaleX: 1, scaleY: 1, alpha: 1.0, y: 0 }, 2000 / AnimConfig.AnimScale, null, new Laya.Handler(this, this.skillTxtEnd));
        }
        skillTxtEnd() {
            this.skillTf.visible = false;
        }
        reverse() {
            this.p1.scaleX = -this.p1.scaleX;
        }
        setHeadTxt(vo) {
            if (StringUtil.IsNullOrEmpty(vo.name)) {
                this.con1.visible = false;
            }
            else {
                this.con1.visible = true;
                this.nameTf.text = `Lv.${vo.level} ${vo.name}`;
                this.starCtl.setStar(vo.star);
                this.starCtl.centerX();
            }
        }
        set bgVisible(v) {
            this.p1.visible = v;
        }
        reset() {
            this._bloodCtl.initVal(1);
            this.bgVisible = true;
        }
        setValue(v) {
            this._bloodCtl.setValue(v);
        }
        get percent() {
            return this._bloodCtl.val;
        }
        flyTxt(v) {
            this.curBlood = this.curBlood + v;
            if (this.curBlood < 0) ;
            else if (this.curBlood > this._bloodVal) {
                this.curBlood = this._bloodVal;
            }
            this.setValue(this.curBlood / this._bloodVal);
            if (E.Debug) {
                if (!this.tf) {
                    this.tf = new Laya.Label();
                    this.addChild(this.tf);
                    this.tf.color = "#ffffff";
                    this.tf.stroke = 2;
                    this.tf.strokeColor = "#000000";
                    this.tf.fontSize = 22;
                    this._testStr = "[" + this._bloodVal + "]\n";
                }
                this.tf.x = -this.p1.scaleX * this.width;
            }
        }
    }

    exports.AvatarBloodSpine = AvatarBloodSpine;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_BufferEffect extends BaseCfg {
        GetTabelName() {
            return "t_BufferEffect";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_BufferEffect();
            }
            return this._ins;
        }
    }
    class AvatarBuffer {
        constructor() {
            this.efflist = [];
        }
        getURL(id) {
            let l = t_BufferEffect.Ins.List;
            let cfg = l.find(cell => cell.f_id == id);
            let urlKey = cfg.f_res;
            let url = `o/spine/${urlKey}/${urlKey}`;
            return url;
        }
        play(id) {
            let url = this.getURL(id);
            let eff1 = this.efflist.find(cell => cell.mUrl == url);
            let eff;
            if (eff1) {
                eff = eff1;
            }
            else {
                eff = new SimpleEffect(this.con, url);
                this.efflist.push(eff);
            }
            eff.play(0, true);
        }
        stop(id) {
            let url = this.getURL(id);
            let eff1 = this.efflist.find(cell => cell.mUrl == url);
            if (eff1) {
                eff1.stop();
            }
        }
        dispose() {
            while (this.efflist.length) {
                let eff = this.efflist.shift();
                eff.dispose();
            }
        }
    }

    exports.AvatarBuffer = AvatarBuffer;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class AvatarEvent {
	}
	AvatarEvent.RES_COMPLETE = "RES_COMPLETE";
	AvatarEvent.UPDATA_BLOOD = "UPDATA_BLOOD";

	exports.AvatarEvent = AvatarEvent;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class FashionModel {
        constructor() {
            this.spineTemplateMap = [];
            this.templateList = [];
            this.equips = AtlasParser.Start(Laya.Loader.getRes(ResPath.Avatar.equipAtlas));
            this.main = AtlasParser.Start(Laya.Loader.getRes(ResPath.Avatar.baseAtlas));
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FashionModel();
            }
            return this._ins;
        }
        getPartEquipKey(type) {
            switch (type) {
                case EEquipType.Barde:
                    return "body";
                case EEquipType.Shoe:
                    return "foot";
                case EEquipType.Casque:
                    return "head";
                case EEquipType.Weapon:
                    return "weapon";
                case EEquipType.Shield:
                    return "shield";
                case EEquipType.Wing:
                    return "wing";
            }
        }
        loadSpineTemp(arr, end) {
            this.templateList = arr;
            this.tempLateCallBack = end;
            this.startLoadTemplate();
        }
        getTemplatePool(url) {
            for (let i = 0; i < this.spineTemplateMap.length; i++) {
                let templet = this.spineTemplateMap[i];
                if (!templet.used && templet.mUrl == url) {
                    templet.used = true;
                    return templet;
                }
            }
            E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, 'getTemplatePool' + "," + url);
        }
        recoverTemplate(_template, url) {
            for (let i = 0; i < this.spineTemplateMap.length; i++) {
                let templet = this.spineTemplateMap[i];
                if (templet == _template && templet.mUrl == url) {
                    templet.used = false;
                    break;
                }
            }
        }
        startLoadTemplate() {
            if (this.templateList.length > 0) {
                let url = this.templateList.shift();
                let templet = new SpineTemplet_3_8_v1();
                templet.loadAni(url);
                templet.once(Laya.Event.COMPLETE, this, this.parseComplete);
                templet.once(Laya.Event.ERROR, this, this.onError);
                this.spineTemplateMap.push(templet);
            }
            else {
                this.tempLateCallBack.run();
            }
        }
        onError() {
            console.log("SpineTemplet_3_8_v1 parse error");
        }
        parseComplete() {
            this.startLoadTemplate();
        }
    }

    exports.FashionModel = FashionModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function getAtlasNameBySlot(id) {
        switch (id) {
            case exports.ESpineSlotId.HFOOT1_2:
                return "hfoot1";
            case exports.ESpineSlotId.HFOOT2_2:
                return "hfoot1";
            case exports.ESpineSlotId.WING1:
            case exports.ESpineSlotId.WING2:
                return "wing";
        }
        return id;
    }
    class SpineSubSkin {
        load() {
            Laya.loader.load(this.url, new Laya.Handler(this, this.pngComplete));
        }
        isAttachmentNull(skel, slotName) {
            if (skel) {
                let slot;
                if (skel['skeleton']) {
                    slot = skel.getSlotByName(slotName);
                    if (!slot) {
                        LogSys.Warn(`未找到插槽 slot:${slotName}`);
                        return;
                    }
                    let attachment = slot.getAttachment();
                    if (!attachment) {
                        return true;
                    }
                }
            }
        }
        pngComplete() {
            if (this.isAttachmentNull(this.skel, this.slotName)) ;
            else {
                if (this.pngCallBack) {
                    this.pngCallBack.runWith([this.skel, this.url, this.slotName, this.skelurl]);
                }
                else {
                    SpineUtil.drawSkel(this.skel, this.url, this.slotName, this.skelurl);
                }
            }
            this.callBack.run();
        }
    }
    class SpineLoadCell {
        toString() {
            return `SpineLoadCell:: ${this.url} ${this.slotName}`;
        }
    }
    class SpineLoadManager {
        constructor() {
            this._cacheList = [];
            this.waitLoadList = [];
        }
        pushSkin(slotName, url) {
            let vo = new SpineLoadCell();
            vo.slotName = slotName;
            vo.url = url;
            this.waitLoadList.push(vo);
        }
        end() {
            this.load();
            while (this._cacheList.length > 0) {
                let _node = this._cacheList.shift();
                _node.run();
            }
        }
        load(_callBack = null) {
            if (!this.skel) {
                let index = this._cacheList.indexOf(_callBack);
                if (index == -1) {
                    if (_callBack != null) {
                        this._cacheList.push(_callBack);
                    }
                }
                return;
            }
            this.callBack = _callBack;
            this.checkLoad();
        }
        checkLoad() {
            if (this.waitLoadList.length > 0) {
                let cell = this.waitLoadList.shift();
                let sk1 = new SpineSubSkin();
                sk1.pngCallBack = this.pngCallBack;
                sk1.skel = this.skel;
                sk1.skelurl = this.skelurl;
                sk1.slotName = cell.slotName;
                sk1.url = cell.url;
                sk1.callBack = new Laya.Handler(this, this.checkLoad);
                sk1.load();
            }
            else {
                if (this.callBack) {
                    this.callBack.run();
                    this.callBack = null;
                }
            }
        }
    }
    class IUvResult {
    }
    class TextureAtlasReader {
        constructor(text) {
            this.index = 0;
            this.index = 0;
            this.lines = text.split(/\r\n|\r|\n/);
        }
        readLine() {
            if (this.index >= this.lines.length)
                return null;
            return this.lines[this.index++];
        }
        readValue() {
            let line = this.readLine();
            let colon = line.indexOf(":");
            if (colon == -1)
                throw new Error("Invalid line: " + line);
            return line.substring(colon + 1).trim();
        }
        readTuple(tuple) {
            let line = this.readLine();
            let colon = line.indexOf(":");
            if (colon == -1)
                throw new Error("Invalid line: " + line);
            let i = 0, lastMatch = colon + 1;
            for (; i < 3; i++) {
                let comma = line.indexOf(",", lastMatch);
                if (comma == -1)
                    break;
                tuple[i] = line.substr(lastMatch, comma - lastMatch).trim();
                lastMatch = comma + 1;
            }
            tuple[i] = line.substring(lastMatch).trim();
            return i + 1;
        }
    }
    class AtlasPage {
        getUV(slotName) {
            let l = this.regions;
            let w = this.w;
            let h = this.h;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.name == slotName) {
                    let uv = new IUvResult;
                    uv.u = cell.x / w;
                    uv.u2 = (cell.x + cell.width) / w;
                    uv.v = cell.y / h;
                    uv.v2 = (cell.y + cell.height) / h;
                    uv.w = cell.width;
                    uv.h = cell.height;
                    return uv;
                }
            }
            return;
        }
    }
    class TextureAtlasPage {
    }
    class AtlasParserV {
        static parse(atlasText) {
            let result = new AtlasPage();
            let reader = new TextureAtlasReader(atlasText);
            let tuple = new Array(4);
            let page = null;
            let regList = [];
            while (true) {
                let line = reader.readLine();
                if (line == null)
                    break;
                line = line.trim();
                if (line.length == 0)
                    page = null;
                else if (!page) {
                    page = new TextureAtlasPage();
                    page.name = line;
                    if (reader.readTuple(tuple) == 2) {
                        page.width = parseInt(tuple[0]);
                        page.height = parseInt(tuple[1]);
                        result.w = page.width;
                        result.h = page.height;
                        reader.readTuple(tuple);
                    }
                    reader.readTuple(tuple);
                    let direction = reader.readValue();
                }
                else {
                    let rotateValue = reader.readValue();
                    reader.readTuple(tuple);
                    let x = parseInt(tuple[0]);
                    let y = parseInt(tuple[1]);
                    reader.readTuple(tuple);
                    let width = parseInt(tuple[0]);
                    let height = parseInt(tuple[1]);
                    if (reader.readTuple(tuple) == 4) {
                        if (reader.readTuple(tuple) == 4) {
                            reader.readTuple(tuple);
                        }
                    }
                    reader.readTuple(tuple);
                    let index = parseInt(reader.readValue());
                    let reg = {};
                    reg.name = line;
                    reg.x = x;
                    reg.y = y;
                    reg.width = width;
                    reg.height = height;
                    regList.push(reg);
                }
            }
            result.regions = regList;
            return result;
        }
    }
    class SpineUtil {
        static f_setSlotUV(_baseSkel, url, slotName, _uv) {
            return this.f_setSlot(_baseSkel, url, slotName, _uv.u, _uv.v, _uv.u2, _uv.v2, _uv.w, _uv.h);
        }
        static forEachSlot(skel) {
            if (debug) {
                let slots = skel.skeleton.slots;
                let str = "";
                for (let i = 0; i < slots.length; i++) {
                    let slot = slots[i];
                    str += (`${slot.data.name.toUpperCase()} = "${slot.data.name}",\n`);
                }
                console.log("插槽\n===========================\n" + str + "===========================");
            }
        }
        static drawSkel(_baseSkel, url, slotName, drawSkel) {
            let _uv;
            if (slotName == exports.ESpineSlotId.WEAPON ||
                slotName == exports.ESpineSlotId.SHIELD ||
                slotName == exports.ESpineSlotId.WING1 ||
                slotName == exports.ESpineSlotId.WING2) {
                let tex = Laya.loader.getRes(url);
                _uv = SpineUtil.createSize(tex.width, tex.height);
            }
            let str = getAtlasNameBySlot(slotName);
            if (!_uv) {
                _uv = this._equipAtlas.getUV(str);
                if (!_uv) {
                    let atlas = this.getAtlas(drawSkel);
                    _uv = atlas.getUV(str);
                }
            }
            if (_uv) {
                this.f_setSlot(_baseSkel, url, slotName, _uv.u, _uv.v, _uv.u2, _uv.v2, _uv.w, _uv.h);
            }
        }
        static getAtlas(url) {
            let key = url.replace(".skel", ".atlas");
            if (!this._atlasMap[key]) {
                let res = Laya.loader.getRes(key);
                this._atlasMap[key] = AtlasParserV.parse(res);
            }
            return this._atlasMap[key];
        }
        static init(callBack) {
            let _equipAtlasURL = "o/equip/equip.atlas";
            let _fightEffectUrl = "o/spine/effect2/effect2.atlas";
            let _sell2Url = "o/spine/sell2/sell2.atlas";
            Laya.loader.load([
                { url: _equipAtlasURL, type: Laya.Loader.TEXT },
                { url: _fightEffectUrl, type: Laya.Loader.TEXT },
                { url: _sell2Url, type: Laya.Loader.TEXT },
            ], new Laya.Handler(this, () => {
                this._equipAtlas = AtlasParserV.parse(Laya.loader.getRes(_equipAtlasURL));
                this.fightEffectAtlas = AtlasParserV.parse(Laya.Loader.getRes(_fightEffectUrl));
                this.sell2Atlas = AtlasParserV.parse(Laya.Loader.getRes(_sell2Url));
                callBack.run();
            }));
        }
        static f_setSlot(skel, texName, slotName, u, v, u2, v2, sizeW, sizeH) {
            if (!skel) {
                return;
            }
            let slot;
            if (skel['skeleton']) {
                slot = skel.getSlotByName(slotName);
            }
            if (!slot) {
                LogSys.Warn(`未找到插槽 slot:${slot} ,slotName:${slotName}`);
                return;
            }
            let attachment = slot.getAttachment();
            const region = new spine.TextureAtlasRegion();
            region.width = sizeW;
            region.height = sizeH;
            region.originalWidth = sizeW;
            region.originalHeight = sizeH;
            region.rotate = false;
            region.u = u;
            region.v = v;
            region.u2 = u2;
            region.v2 = v2;
            region["texName"] = texName;
            region.renderObject = region;
            if (!attachment) {
                return;
            }
            attachment.region = region;
            attachment.width = sizeW;
            attachment.height = sizeH;
            if (attachment instanceof spine.MeshAttachment) {
                if (!attachment.region['texture']) {
                    LogSys.Warn("txtName:" + texName + " slotName:" + slotName + " `s texture is null");
                }
                else {
                    attachment.updateUVs();
                }
            }
            else {
                attachment.setRegion(region);
                attachment.updateOffset();
            }
            return true;
        }
        static createSize(w, h) {
            let uv = new IUvResult();
            uv.w = w;
            uv.h = h;
            uv.u = 0;
            uv.v = 0;
            uv.u2 = 1;
            uv.v2 = 1;
            return uv;
        }
    }
    SpineUtil._atlasMap = {};
    (function (ESpineSlotId) {
        ESpineSlotId["WOODMAN"] = "woodman";
        ESpineSlotId["YING"] = "ying";
        ESpineSlotId["WING2"] = "wing2";
        ESpineSlotId["WING1"] = "wing1";
        ESpineSlotId["WEAPON"] = "weapon";
        ESpineSlotId["FOOT1"] = "foot1";
        ESpineSlotId["FOOT2"] = "foot2";
        ESpineSlotId["BODY"] = "body";
        ESpineSlotId["HEAD"] = "head";
        ESpineSlotId["SHIELD"] = "shield";
        ESpineSlotId["DAOGUANG"] = "daoguang";
        ESpineSlotId["XINXIN"] = "xinxin";
        ESpineSlotId["XINXIN2"] = "xinxin2";
        ESpineSlotId["XINXIN3"] = "xinxin3";
        ESpineSlotId["XINXIN4"] = "xinxin4";
        ESpineSlotId["HFOOT1_2"] = "hfoot1_2";
        ESpineSlotId["HFOOT2_2"] = "hfoot2_2";
        ESpineSlotId["HTAIL"] = "htail";
        ESpineSlotId["FOOT_M"] = "foot_m";
        ESpineSlotId["HBODY"] = "hbody";
        ESpineSlotId["HNECK"] = "hneck";
        ESpineSlotId["HFOOT2"] = "hfoot2";
        ESpineSlotId["HFOOT1"] = "hfoot1";
        ESpineSlotId["HHEAD"] = "hhead";
        ESpineSlotId["DAOGUANG2"] = "daoguang2";
        ESpineSlotId["QUAN1"] = "quan1";
        ESpineSlotId["QUAN2"] = "quan2";
        ESpineSlotId["QUAN3"] = "quan3";
        ESpineSlotId["QUAN4"] = "quan4";
        ESpineSlotId["HIT1"] = "hit1";
        ESpineSlotId["HIT2"] = "hit2";
        ESpineSlotId["TEA"] = "tea";
    })(exports.ESpineSlotId || (exports.ESpineSlotId = {}));

    exports.AtlasPage = AtlasPage;
    exports.AtlasParserV = AtlasParserV;
    exports.IUvResult = IUvResult;
    exports.SpineLoadManager = SpineLoadManager;
    exports.SpineUtil = SpineUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaseSpineCoreSkel extends Laya.EventDispatcher {
        constructor() {
            super();
            this.destroyed = false;
            this.needDel = false;
            this.anim = EAvatarAnim.NormalStand;
            this.useCache = GameConfig.spineCache;
            this._currentTime = 0;
            this._once = false;
            this._initStop = false;
            this.isLoading = false;
            this.loadProxy = new SpineLoadManager();
        }
        get duration() {
            if (this.skeleton) {
                return this.skeleton['_duration'];
            }
            return 0;
        }
        set currentTime(v) {
            if (this.skeleton) {
                this.skeleton.currentTime = v * 1000;
            }
            this._currentTime = v;
        }
        get currentPlayTime() {
            return this.skeleton["currentPlayTime"];
        }
        start() {
        }
        newTemplate() {
            return new Laya.SpineTemplet(Laya.SpineVersion.v3_8);
        }
        load(url) {
            if (this.isLoading) {
                return;
            }
            this.url = url;
            this.isLoading = true;
            this.loadProxy.skelurl = url;
            if (this.useCache) {
                SpineTemplateCache.Ins.getTemp(url, this, this.onLoadFinish, ESpineTemplateType.Normal);
            }
            else {
                let _templet = this.newTemplate();
                this.templet = _templet;
                _templet.once(Laya.Event.COMPLETE, this, this.onTemplateComplete);
                _templet.loadAni(url);
            }
        }
        playbackRate(v) {
            this.skeleton.playbackRate(v);
        }
        free() {
        }
        dispose() {
            this.destroyed = true;
            this.free();
            this.isLoading = false;
            this.stop();
            if (this.useCache) {
                if (this.skeleton) {
                    spineRes.free(this.skeleton);
                }
            }
            else {
                if (this.templet) {
                    this.templet.destroy();
                }
                if (this.skeleton) {
                    this.skeleton.destroy();
                }
            }
            if (!this.skeleton) {
                this.needDel = true;
            }
            this.templet = null;
            this.skeleton = null;
        }
        stop() {
            if (this.skeleton) {
                this.skeleton.stop();
            }
            this._initStop = true;
        }
        onLoadFinish(cache) {
            let skel;
            if (cache) {
                skel = cache.skel;
                this.templet = cache.temp;
            }
            else {
                if (this.templet) {
                    skel = this.templet.buildArmature();
                }
            }
            if (!this.templet) {
                return;
            }
            this.skeleton = skel;
            this.skeleton.pos(0, 0);
            this.skeleton.playbackRate(AnimConfig.AnimScale);
            if (this._initStop) {
                this.stop();
            }
            else {
                this.play(this.anim, this.target, this.callBack, this.args, this._once);
            }
            if (this._dir) {
                this.dir = this._dir;
            }
            this.currentTime = this._currentTime;
            this.loadProxy.skel = skel;
            this.loadProxy.end();
            this.event(Laya.Event.COMPLETE);
            if (this.needDel) {
                this.dispose();
            }
            DebugUtil.draw(this.skeleton, "#ff0000");
        }
        onTemplateComplete() {
            Laya.timer.callLater(this, this.onLoadFinish);
        }
        set dir(v) {
            if (this.skeleton) {
                if (this.skeleton.getStyle()) {
                    this.skeleton.scaleX = v || EAvatarDir.Left;
                }
                else {
                    LogSys.Error(this.url + " style is null");
                }
            }
            this._dir = v;
        }
        getDurationByAnimIndex(index) {
            if (this.skeleton) {
                let aniName = this.skeleton.getAniNameByIndex(index);
                if (aniName) {
                    let anim = this.skeleton['state'].data.skeletonData.findAnimation(aniName);
                    if (anim) {
                        return anim.duration;
                    }
                }
            }
            return 0;
        }
        play(anim, target, callBack, args, _once = false, isForce = false, isLoop = false) {
            if (args && !Array.isArray(args)) {
                LogSys.Error(`args type is err ` + this.url);
            }
            if (anim == EAvatarAnim.Invalid) {
                LogSys.Warn(this.url + " Invalid anim");
                return;
            }
            if (this.skeleton) {
                if (anim + 1 > this.skeleton.getAnimNum()) {
                    LogSys.Error("动作没有" + anim + "," + this.skeleton.getAnimNum());
                    return;
                }
            }
            let force = isForce;
            this.anim = anim;
            this.target = target;
            this.callBack = callBack;
            this.args = args;
            this._once = _once;
            if (this.skeleton) {
                let _start = 0;
                if (_once) {
                    this.runOnce(target, callBack, args);
                    this.skeleton.play(this.anim, isLoop, force, _start);
                }
                else {
                    if (target) {
                        this.runOnce(target, callBack, args);
                        this.skeleton.play(anim, false, force, _start);
                    }
                    else {
                        this.skeleton.play(anim, true, force, _start);
                    }
                }
                return this.duration;
            }
            return 0;
        }
        runOnce(target, callBack, args) {
            this.skeleton.once(Laya.Event.STOPPED, this, this.onPlayEnd, [target, callBack, args]);
        }
        onPlayEnd(target, callBack, args) {
            if (!this.destroyed && callBack) {
                callBack.apply(target, args);
            }
        }
        setSlotSkin(slot, url) {
            this.loadProxy.pushSkin(slot, url);
            this.loadProxy.load();
        }
    }
    BaseSpineCoreSkel.PLAY_END = "PLAY_END";

    exports.BaseSpineCoreSkel = BaseSpineCoreSkel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function getSlotID(type) {
        switch (type) {
            case EEquipType.Barde:
                return ESpineSlotId.BODY;
            case EEquipType.Casque:
                return ESpineSlotId.HEAD;
            case EEquipType.Weapon:
                return ESpineSlotId.WEAPON;
            case EEquipType.Shield:
                return ESpineSlotId.SHIELD;
            case EEquipType.Shoe:
                return ESpineSlotId.FOOT1;
            case EEquipType.Wing:
                return ESpineSlotId.WING1;
        }
    }
    class SpineCoreSkel extends BaseSpineCoreSkel {
        setSlot(type, val) {
            let slot = getSlotID(type);
            if (!slot) ;
            else {
                let url = "";
                if (slot == ESpineSlotId.SHIELD || slot == ESpineSlotId.WEAPON) {
                    url = `o/item/${type}_${val}.png`;
                }
                else {
                    url = `o/equip/hero_${val}.png`;
                }
                this.loadProxy.pushSkin(slot, url);
                this.loadProxy.load();
            }
        }
        setHorseSkin(rideId) {
            let slotList = [
                ESpineSlotId.HTAIL,
                ESpineSlotId.HBODY,
                ESpineSlotId.HNECK,
                ESpineSlotId.HFOOT2,
                ESpineSlotId.HFOOT1,
                ESpineSlotId.HHEAD,
                ESpineSlotId.HFOOT2_2,
                ESpineSlotId.HFOOT1_2,
            ];
            let url = `o/horse_spine/horse_${rideId}.png`;
            for (let i = 0; i < slotList.length; i++) {
                this.loadProxy.pushSkin(slotList[i], url);
            }
            this.loadProxy.load();
        }
        setWingSkin(wing) {
            this.loadProxy.pushSkin(ESpineSlotId.WING1, `o/item/13_${wing}.png`);
            this.loadProxy.pushSkin(ESpineSlotId.WING2, `o/item/13_${wing}.png`);
            this.loadProxy.load();
        }
    }

    exports.SpineCoreSkel = SpineCoreSkel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EAvatarDir) {
        EAvatarDir[EAvatarDir["Left"] = 1] = "Left";
        EAvatarDir[EAvatarDir["Right"] = -1] = "Right";
    })(exports.EAvatarDir || (exports.EAvatarDir = {}));
    (function (EBloodParent) {
        EBloodParent[EBloodParent["Self"] = 1] = "Self";
        EBloodParent[EBloodParent["Parent"] = 2] = "Parent";
    })(exports.EBloodParent || (exports.EBloodParent = {}));
    (function (EAvatarEffectAnim) {
        EAvatarEffectAnim[EAvatarEffectAnim["NormalAtk"] = 0] = "NormalAtk";
        EAvatarEffectAnim[EAvatarEffectAnim["CsAtk"] = 1] = "CsAtk";
        EAvatarEffectAnim[EAvatarEffectAnim["HuiFuBlood"] = 2] = "HuiFuBlood";
        EAvatarEffectAnim[EAvatarEffectAnim["AddBlood"] = 3] = "AddBlood";
        EAvatarEffectAnim[EAvatarEffectAnim["NormalBloodTxt"] = 4] = "NormalBloodTxt";
        EAvatarEffectAnim[EAvatarEffectAnim["CsBloodTxt"] = 5] = "CsBloodTxt";
        EAvatarEffectAnim[EAvatarEffectAnim["HuiFuBloodTxt"] = 6] = "HuiFuBloodTxt";
        EAvatarEffectAnim[EAvatarEffectAnim["SuckBloodTxt"] = 7] = "SuckBloodTxt";
        EAvatarEffectAnim[EAvatarEffectAnim["Cs"] = 8] = "Cs";
        EAvatarEffectAnim[EAvatarEffectAnim["StrikeBackTxt"] = 9] = "StrikeBackTxt";
        EAvatarEffectAnim[EAvatarEffectAnim["Lianji"] = 10] = "Lianji";
        EAvatarEffectAnim[EAvatarEffectAnim["Dodge"] = 11] = "Dodge";
        EAvatarEffectAnim[EAvatarEffectAnim["JiYunTxt"] = 12] = "JiYunTxt";
        EAvatarEffectAnim[EAvatarEffectAnim["AddEffect"] = 16] = "AddEffect";
        EAvatarEffectAnim[EAvatarEffectAnim["SubEffect"] = 17] = "SubEffect";
        EAvatarEffectAnim[EAvatarEffectAnim["ShoveAside"] = 20] = "ShoveAside";
    })(exports.EAvatarEffectAnim || (exports.EAvatarEffectAnim = {}));
    (function (ESkillActionAnim) {
        ESkillActionAnim[ESkillActionAnim["NormalAtk"] = 0] = "NormalAtk";
        ESkillActionAnim[ESkillActionAnim["CsAtk"] = 1] = "CsAtk";
        ESkillActionAnim[ESkillActionAnim["Vertigo"] = 2] = "Vertigo";
    })(exports.ESkillActionAnim || (exports.ESkillActionAnim = {}));
    class AvatarView extends Laya.Sprite {
        constructor() {
            super();
            this.bloodParentType = exports.EBloodParent.Parent;
            this.isMoving = false;
            this.buffer = new AvatarBuffer();
            this._ctlList = [];
            this.isBoss = false;
            this.die = false;
            this.rideId = 0;
            this.wingId = 0;
            this.useFightSkin = false;
            this.offsetX = 0;
            this.offsetY = 0;
            this._showBlood = false;
            this._allEffect = [];
            DebugUtil.drawCross(this, 0, 0, 20, "#ff00ff");
            this.buffer.con = this;
            this.initMoveTween();
            this.fashion = FashionModel.Ins;
            this.coreSpine = new SpineCoreSkel();
            this.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        debugTxt(v, y = 0) {
            if (!this._tf) {
                this._tf = new Laya.Label();
                this._tf.wordWrap = true;
                this._tf.width = 135;
                this._tf.height = 600;
                this._tf.fontSize = 24;
                this.addChild(this._tf);
            }
            this._tf.text = v;
            this._tf.y = y;
        }
        get duration() {
            if (this.coreSpine) {
                return this.coreSpine.duration;
            }
            return 0;
        }
        get spineLoaded() {
            return this.coreSpine.skeleton;
        }
        pushCtl(ctl) {
            this._ctlList.push(ctl);
        }
        spineload(that, func) {
            if (this.spineLoaded) {
                func.call(that);
            }
            else {
                this.once(Laya.Event.COMPLETE, that, func);
            }
        }
        initFightRes() {
            this.blood = new AvatarBloodSpine();
        }
        csPlay(anim) {
            AvatarFactory.getEffect(this).poolPlay(anim);
        }
        csPlay2(anim) {
            AvatarFactory.getEffect(this).poolPlay(anim);
        }
        loadByImageID(id) {
            let prefix = `o/Image_Character/a${id}/a${id}`;
            let atlas = `${prefix}.atlas`;
            Laya.loader.load(atlas, new Laya.Handler(this, () => {
                this.main = AtlasParser.Start(Laya.Loader.getRes(atlas));
            }), null, Laya.Loader.TEXT);
            this.baseImg = `${prefix}.png`;
            this.load(`${prefix}.skel`);
        }
        initRes() {
            if (this.imageID) {
                this.loadByImageID(this.imageID);
                return;
            }
            let id = this.rideId;
            if (id > 0) {
                let _mountCfg = Mount_ListProxy.Ins.getCfg(id);
                let a = _mountCfg.f_skel == 0 ? "" : _mountCfg.f_skel + "";
                let horseRes = `horse${a}/horse${a}`;
                this.main = AtlasParser.Start(Laya.Loader.getRes(`o/avatar/${horseRes}.atlas`));
                this.baseImg = `o/horse_spine/horse_${id}.png`;
                this.load(`o/avatar/${horseRes}.skel`);
            }
            else {
                this.main = AtlasParser.Start(Laya.Loader.getRes(ResPath.Avatar.baseAtlas));
                this.baseImg = ResPath.Avatar.baseImg;
                this.load(ResPath.Avatar.baseSkel);
            }
        }
        getName(str) {
            let arr = str.split("/");
            return arr[arr.length - 1];
        }
        getPath(str) {
            let arr = str.split("/");
            let s = "";
            for (let i = 0; i < arr.length - 1; i++) {
                s += arr[i] + "/";
            }
            return s;
        }
        setSkel(val) {
            let _name = this.getName(val);
            let _path = this.getPath(val);
            this.main = AtlasParser.Start(Laya.Loader.getRes(`${_path}${_name}.atlas`));
            this.baseImg = `${_path}${_name}.png`;
            this.load(`${_path}${_name}.skel`);
        }
        setRes(resKey) {
            let path = `${resKey}/${resKey}`;
            this.main = AtlasParser.Start(Laya.Loader.getRes(`o/avatar/${path}.atlas`));
            this.baseImg = `o/avatar/${path}.png`;
            this.load(`o/avatar/${path}.skel`);
        }
        get bHorseSkel() {
            return this.baseImg.indexOf(`o/horse_spine/`) != -1;
        }
        hasHorse() {
            let _l = this.main;
            if (_l) {
                for (let i = 0; i < _l.length; i++) {
                    let cell = _l[i];
                    if (cell.name == "hhead") {
                        return true;
                    }
                }
            }
        }
        onDisplay() {
            this.layout();
            Laya.timer.frameLoop(1, this, this.onFrameLoop);
        }
        layout() {
            if (this._showBlood && this.blood) {
                this.bloodParent.addChild(this.blood);
            }
        }
        get bloodParent() {
            return this.bloodParentType == exports.EBloodParent.Parent ? this.parent : this;
        }
        get refX() {
            if (this.blood && this.blood.parent == this) {
                return 0;
            }
            return this.x;
        }
        get refY() {
            if (this.blood && this.blood.parent == this) {
                return 0;
            }
            return this.y;
        }
        updateBloodPos() {
            let x = this.refX - this.blood.width / 2;
            let offsetY = AvatarView.normalHeight;
            if (this.hasHorse()) {
                offsetY = AvatarView.hasHorseHeight;
            }
            let y = this.refY - offsetY;
            this.blood.x = x;
            this.blood.y = y;
        }
        onFrameLoop() {
            if (this.blood && this.blood.parent) {
                this.updateBloodPos();
            }
        }
        onUnDisplay() {
            Laya.timer.clear(this, this.onFrameLoop);
        }
        refreshSkin() {
        }
        initBlood() {
            this._showBlood = true;
        }
        hideBlood() {
            if (this.blood) {
                this.blood.removeSelf();
            }
            this._showBlood = false;
        }
        playBlood(v, criticalStrike = false, anim = exports.EAvatarEffectAnim.SuckBloodTxt) {
            if (this.blood) {
                this.blood.flyTxt(v);
            }
            let cell = AvatarFactory.getEffect(this);
            cell.flyBlood(v, criticalStrike, anim);
        }
        load(url) {
            this._skelUrl = url;
        }
        onSpine1Complete() {
            if (!DrawCallConfig.disable_spine) {
                this.addChildAt(this.coreSpine.skeleton, 0);
            }
            this.coreSpine.skeleton.pos(this.offsetX, this.offsetY);
            this.coreSpine.skeleton.on(Laya.Event.LABEL, this, this.onLabelEvt);
            this.dir = this._curDir;
            Laya.timer.callLater(this, this.callBackComplete);
        }
        callBackComplete() {
            if (this.hasListener(Laya.Event.COMPLETE)) ;
            this.event(Laya.Event.COMPLETE);
        }
        onLabelEvt(e) {
            this.event(Laya.Event.LABEL, e);
        }
        set dir(v) {
            this._curDir = v;
            this.coreSpine.dir = v;
        }
        get dir() {
            return this.coreSpine.dir;
        }
        moveX(offsex, time, _moveHandler, animType) {
            this.isMoving = true;
            this._moveHandler = _moveHandler;
            if (animType) {
                this.play(EAvatarAnim.Move);
            }
            this._moveTween.to(this, { x: offsex, update: new Laya.Handler(this, this.onUpdate) }, time, null, new Laya.Handler(this, this.onMoveEnd));
        }
        move(ox, oy, time, _moveHandler) {
            this._moveHandler = _moveHandler;
            this._moveTween.to(this, { x: ox, y: oy, update: new Laya.Handler(this, this.onUpdate) }, time, null, new Laya.Handler(this, this.onMoveEnd));
        }
        onUpdate() {
            this.onFrameLoop();
        }
        initMoveTween() {
            if (this._moveTween) {
                this._moveTween.clear();
            }
            else {
                this._moveTween = new Laya.Tween();
            }
        }
        play(anim, target, callBack, args, _once) {
            return this.coreSpine.play(anim, target, callBack, args, _once);
        }
        playStunned() {
            this.play(EAvatarAnim.InStunned, this, this.onStunedEnd);
        }
        onStunedEnd() {
            this.play(EAvatarAnim.Stunned);
        }
        get curAnim() {
            return this.coreSpine.anim;
        }
        playOnce(anim, target, callBack, args) {
            return this.coreSpine.play(anim, target, callBack, args, true);
        }
        stop() {
            this.coreSpine.stop();
            this.removeAllLis();
        }
        start() {
            this.loadSkel();
        }
        loadSkel() {
            this.coreSpine.once(Laya.Event.COMPLETE, this, this.onSpine1Complete);
            this.coreSpine.load(this._skelUrl);
        }
        alphaToZero(end = null, useTime = 1000) {
            this._moveTween.to(this, { alpha: 0.0 }, useTime, null, end);
        }
        reset(x = 0, y = 0) {
            this.isBoss = false;
            this.standPos = -1;
            if (this.blood) {
                this.blood.reset();
            }
            for (let i = 0; i < this._allEffect.length; i++) {
                this._allEffect[i].stop();
            }
            if (this._moveTween) {
                this._moveTween.clear();
            }
            if (!this.destroyed) {
                this.alpha = 1.0;
            }
            this.setPos(x, y);
            this.offAll(AvatarEvent.UPDATA_BLOOD);
        }
        onMoveEnd() {
            this.isMoving = false;
            if (this._moveHandler) {
                this._moveHandler.run();
            }
        }
        setPos(x, y) {
            this.x = x;
            this.y = y;
        }
        removeAllLis() {
        }
        dispose() {
            this.removeAllLis();
            this.isMoving = false;
            this.buffer.dispose();
            while (this._ctlList.length) {
                let ctl = this._ctlList.shift();
                ctl.dispose();
            }
            this.reset();
            this.onUnDisplay();
            this.off(Laya.Event.DISPLAY, this, this.onDisplay);
            this.off(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
            for (let i = 0; i < this._allEffect.length; i++) {
                let cell = this._allEffect[i];
                cell.dispose();
            }
            if (this.blood) {
                this.blood.dispose();
            }
            if (this._moveTween) {
                this._moveTween.clear();
            }
            this.disposeCoreSpine();
            this.removeSelf();
            this.vo = null;
            this.imageID = null;
            this.destroy();
        }
        disposeCoreSpine() {
            if (this.coreSpine) {
                this.coreSpine.stop();
                this.coreSpine.off(Laya.Event.COMPLETE, this, this.onSpine1Complete);
                if (this.coreSpine.skeleton) {
                    this.coreSpine.skeleton.off(Laya.Event.LABEL, this, this.onLabelEvt);
                }
                this.coreSpine.dispose();
            }
        }
        getAnimName(anim) {
            switch (anim) {
                case EAvatarAnim.Stop:
                    return "Stop";
                case EAvatarAnim.Stand:
                    return "Stand";
                case EAvatarAnim.Move:
                    return "Move";
                case EAvatarAnim.Attack:
                    return "Attack";
                case EAvatarAnim.Attack2:
                    return "Attack2";
                case EAvatarAnim.StrongAttack:
                    return "StrongAttack";
                case EAvatarAnim.StrongAttack2:
                    return "StrongAttack2";
                case EAvatarAnim.Hit:
                    return "Hit";
                case EAvatarAnim.Hit2:
                    return "Hit2";
                case EAvatarAnim.Dodge:
                    return "Dodge";
                case EAvatarAnim.Stunned:
                    return "Stunned";
                case EAvatarAnim.Die:
                    return "Die";
                case EAvatarAnim.AssassinateReady:
                    return "AssassinateReady";
                case EAvatarAnim.Assassinate:
                    return "Assassinate";
            }
        }
    }
    AvatarView.normalHeight = 135;
    AvatarView.hasHorseHeight = 170;

    exports.AvatarView = AvatarView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FontCtlFactory {
        static createMainPlus() {
            let ctl = new FontClipCtl(IconUtils.plusAtlasPrefix);
            ctl.offsetX = -3;
            ctl.mScale = 0.75;
            return ctl;
        }
        static createPlus() {
            let ctl = new FontClipCtl(IconUtils.plusAtlasPrefix);
            ctl.offsetX = -3;
            ctl.mScale = 0.7;
            return ctl;
        }
    }

    exports.FontCtlFactory = FontCtlFactory;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TaskBaseProxy extends BaseCfg {
        GetTabelName() {
            return "";
        }
        getCfg(id) {
            let _l = this.List;
            for (let i = 0; i < _l.length; i++) {
                let cfg = _l[i];
                if (cfg.f_TaskID == id) {
                    return cfg;
                }
            }
        }
        get taskList() {
            if (!this._taskList) {
                this._taskList = [];
                let _l = this.List;
                this._taskList.push(_l[0].f_TaskID);
                for (let i = 0; i < _l.length; i++) {
                    let cfg = _l[i];
                    if (cfg.f_BackValue != 0) {
                        this._taskList.push(cfg.f_BackValue);
                    }
                }
            }
            return this._taskList;
        }
        isTaskComplete(taskId, serverTaskId) {
            let _taskList = this.taskList;
            let index = _taskList.indexOf(taskId);
            let serverIndex = _taskList.indexOf(serverTaskId);
            return serverIndex >= index;
        }
        getTaskType(task) {
            return task.f_TaskType;
        }
        getTaskConditions(task) {
            return task.f_RewardsType.split("|");
        }
        getTaskRewardItemList(taskId) {
            let taskData = this.getCfg(taskId);
            let item = taskData.f_Rewards;
            return ItemViewFactory.convertItemList(item);
        }
        getTaskIdList() {
            const taskArr = this.List;
            const taskList = [];
            const tmpArr = [];
            const findNext = (id) => {
                if (tmpArr.indexOf(id) !== -1) {
                    console.log(taskList);
                    throw new Error(`Tasks表任务id#${id}配置有错误`);
                }
                tmpArr.push(id);
                const task = taskArr.find(o => o.f_TaskID === id);
                if (task && task.f_TaskID) {
                    taskList.push(task.f_TaskID);
                    if (task.f_BackValue) {
                        findNext(task.f_BackValue);
                    }
                }
            };
            const startTask = taskArr.find(o => o.f_ContentValue === 0);
            const startId = startTask && startTask.f_TaskID;
            if (startId) {
                findNext(startId);
            }
            return taskList;
        }
    }
    class TaskTrunkProxy extends TaskBaseProxy {
        static get Ins() {
            if (!this._ins) {
                this._ins = new TaskTrunkProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Tasks";
        }
    }
    class TaskV1Proxy extends TaskBaseProxy {
        GetTabelName() {
            return "t_Tasks_v1";
        }
    }
    class TaskProxy {
        static get Ins() {
            if (!this._verList) {
                this._verList = [];
                this._verList.push(new TaskTrunkProxy());
                this._verList.push(new TaskV1Proxy());
            }
            let temp = this._verList[0];
            for (let i = 0; i < this._verList.length; i++) {
                let proxy = this._verList[i];
                if (proxy.ver == MainModel.Ins.serverVer) {
                    temp = proxy;
                    break;
                }
            }
            return temp;
        }
    }
    class TaskTypeProxy extends BaseCfg {
        GetTabelName() {
            return "t_Tasks_Type";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new TaskTypeProxy();
            }
            return this._ins;
        }
        getCfg(taskTypeId) {
            let _l = this.List;
            for (let i = 0; i < _l.length; i++) {
                let cfg = _l[i];
                if (cfg.f_TaskID == taskTypeId) {
                    return cfg;
                }
            }
        }
        getTaskContent(taskTypeId) {
            let taskTypeData = this.getCfg(taskTypeId);
            return t_Txt_Config.Ins.replace(taskTypeData.f_TaskContent);
        }
    }

    exports.TaskBaseProxy = TaskBaseProxy;
    exports.TaskProxy = TaskProxy;
    exports.TaskTrunkProxy = TaskTrunkProxy;
    exports.TaskTypeProxy = TaskTypeProxy;
    exports.TaskV1Proxy = TaskV1Proxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuncProxy extends BaseCfg {
        GetTabelName() {
            return "t_Func";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuncProxy();
            }
            return this._ins;
        }
        getCfgByFid(fid) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_FunctionID == fid) {
                    return cfg;
                }
            }
        }
        getCfgListByTaskId(id) {
            let l = this.List;
            let arr = [];
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (this.getTaskCfg(cfg) == id) {
                    arr.push(cfg);
                }
            }
            return arr;
        }
        getTaskCfg(cfg) {
            let v = cfg[`f_task${MainModel.Ins.tabelSuffix}`];
            return v;
        }
        getFuncList(taskId) {
            const taskIdList = TaskProxy.Ins.getTaskIdList();
            const funcInfos = this.List;
            const playerTaskIndex = taskIdList.findIndex(id => id === taskId);
            const funcTaskIndexs = funcInfos.map(o => {
                if (o.f_task != 0) {
                    const index = taskIdList.findIndex(tid => tid === o.f_task);
                    if (index === -1) {
                        throw new Error(`Func表配置错误，缺少功能#${o.funcId}对应的taskId#${o.taskId}`);
                    }
                    return index;
                }
            });
            if (playerTaskIndex === -1) {
                throw new Error(`Tasks表配置错误，缺少任务#${taskId}`);
            }
            return funcInfos.filter((o, index) => (funcTaskIndexs[index] <= playerTaskIndex) && !o.close).map(o => o.f_FunctionID);
        }
        checkFunc(taskId, funcId) {
            const _l = this.List;
            const cfg = _l.find(o => o.f_FunctionID === funcId);
            return TaskProxy.Ins.isTaskComplete(FuncProxy.Ins.getTaskCfg(cfg), taskId);
        }
        getFuncNameByFuncId(funcId) {
            const _l = this.List;
            const cfg = _l.find(o => o.f_FunctionID === funcId);
            if (!cfg)
                throw new Error(`t_Func缺少f_FunctionID#${funcId}的配置`);
            return cfg.f_name;
        }
        f_info(cfg) {
            let v = cfg[`f_info${this.suffix}`];
            if (debug) {
                v += "\ntask:" + this.f_task(cfg);
            }
            return v;
        }
        f_close(cfg) {
            if (Laya.Utils.getQueryString("openall")) {
                return;
            }
            let v = cfg[`f_close${this.suffix}`];
            return v == 1;
        }
        isClose(funcid) {
            let cfg = this.getCfgByFuncId(funcid);
            return this.f_close(cfg);
        }
        f_task(cfg) {
            let v = cfg[`f_task${this.suffix}`];
            return v;
        }
        getCfgByFuncId(funcId) {
            return this.List.find(o => o.f_FunctionID === funcId);
        }
    }
    class MainIconProxy extends BaseCfg {
        constructor() {
            super(...arguments);
            this.bottomMaxPos = 5;
        }
        GetTabelName() {
            return "t_MainIcon";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new MainIconProxy();
            }
            return this._ins;
        }
        getCfgByPosition(pos) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_pos == pos) {
                    return cfg;
                }
            }
        }
        getCfgByFuncid(funcId) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_funid == funcId.toString()) {
                    return cfg;
                }
            }
        }
        getCfgByF_ui_id(f_ui_id) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_ui_id == f_ui_id) {
                    return cfg;
                }
            }
        }
        getFuncListByF_ui_id(f_ui_id) {
            let rl = [];
            if (f_ui_id != 0) {
                let l = this.List;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    if (cfg.f_Uiexpand == f_ui_id) {
                        rl.push(parseInt(cfg.f_funid));
                    }
                }
            }
            return rl;
        }
        getFuncPosByFuncId(funcId) {
            const cfg = this.List.find(o => Number(o.f_funid) === funcId);
            if (!cfg) {
                return -1;
            }
            return cfg.f_pos;
        }
    }
    class BoxExtraItemProxy extends BaseCfg {
        GetTabelName() {
            return "t_Box_ExtraItem";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new BoxExtraItemProxy();
            }
            return this._ins;
        }
        getConfByFid(fid) {
            return this.List.find(o => o.f_id === fid);
        }
    }

    exports.BoxExtraItemProxy = BoxExtraItemProxy;
    exports.FuncProxy = FuncProxy;
    exports.MainIconProxy = MainIconProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DotManager {
        static addDot(sp, x = 0, y = 0) {
            let imgS = sp.getChildByName("dot");
            if (imgS) {
                return;
            }
            var img = Laya.Pool.getItemByClass("DotManager", Laya.Image);
            img.skin = "remote/main/main/reddot.png";
            img.name = "dot";
            img.x = sp.width + x - 35;
            img.y = y;
            sp.addChild(img);
        }
        static removeDot(sp) {
            let img = sp.getChildByName("dot");
            if (img) {
                img.removeSelf();
            }
        }
        static setRed(str, v) {
            let len = 4;
            let funcid = 0;
            if (str.substr(0, len) == "icon") {
                let id = parseInt(str.substr(len, str.length - len));
                let l = MainIconProxy.Ins.List;
                let cfg = l.find(cell => cell.f_mid_name == str);
                if (cfg) {
                    funcid = parseInt(cfg.f_funid);
                }
            }
            else {
                let s = MainModel.Ins.redNameKeyList.find(o => o.name == str);
                if (s) {
                    funcid = s.func_id;
                }
            }
            if (funcid) {
                MainModel.Ins.funcSetRed(funcid, v);
            }
            else {
                LogSys$1.Warn("not find:" + str);
            }
        }
        static addMainDot(str, x = 0, y = 0) {
            this.setRed(str, true);
        }
        static remMainDot(str) {
            this.setRed(str, false);
        }
    }

    exports.DotManager = DotManager;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EJjcType {
    }
    EJjcType.JJC = 0;
    EJjcType.Peak = 1;
    function getJjcModel(type) {
        return type == EServerFightType.JJC || type == EServerFightType.XXZDZ || type == EServerFightType.ScoreJJC ? JjcModel.Ins : PeakJjcModel.Ins;
    }

    exports.EJjcType = EJjcType;
    exports.getJjcModel = getJjcModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Arena_RankReward_Daily extends BaseCfg {
        GetTabelName() {
            return "t_Arena_RankReward_Daily";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new Arena_RankReward_Daily();
            }
            return this._ins;
        }
    }
    class Arena_RankReward_Weekly extends BaseCfg {
        GetTabelName() {
            return "t_Arena_RankReward_Weekly";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new Arena_RankReward_Weekly();
            }
            return this._ins;
        }
    }
    class Arena_config extends BaseCfg {
        GetTabelName() {
            return "t_Arena_config";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new Arena_config();
            }
            return this._ins;
        }
    }
    class Arena_BuyTicket extends BaseCfg {
        GetTabelName() {
            return "t_Arena_BuyTicket";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new Arena_BuyTicket();
            }
            return this._ins;
        }
        getCfgByTime(time) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let _cfg = l[i];
                if (_cfg.f_BuyTimes == time) {
                    return _cfg;
                }
            }
            let _cfg = l[l.length - 1];
            return _cfg;
        }
    }

    exports.Arena_BuyTicket = Arena_BuyTicket;
    exports.Arena_RankReward_Daily = Arena_RankReward_Daily;
    exports.Arena_RankReward_Weekly = Arena_RankReward_Weekly;
    exports.Arena_config = Arena_config;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcModel extends JJC_BaseModel {
        constructor() {
            super(...arguments);
            this.redId = RedEnum.JJC_FIGHT;
            this.playerList = [];
            this.fightPlayers = [];
            this.loglist = [];
            this.isEnable = false;
            this.todayRank = 0;
            this.succeedRewardList = [];
            this.surplusRefreshCount = 0;
            this.curWeekRank = 0;
            this.weekRewardStatus = EGetStatus.CanNotGet;
            this.weekRefreshTime = 0;
            this.dailyDayTime = 0;
            this.funcId = EFuncDef.Jjc;
        }
        get realPrice() {
            let cfg = Arena_BuyTicket.Ins.getCfgByTime(this.hasAlreadyBuyCnt + 1);
            return cfg.f_Price;
        }
        get isTimeOpen() {
            return true;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new JjcModel();
            }
            return this._ins;
        }
        initMsg() {
            E.MsgMgr.AddMsg(MSGID.JjcInfo, this.onJjcInfo, this);
            E.MsgMgr.AddMsg(MSGID.JjcListRevc, this.onJjcListRevc, this);
            E.MsgMgr.AddMsg(MSGID.JjcRefreshListRevc, this.onJjcFightListRevc, this);
            E.MsgMgr.AddMsg(MSGID.JjcFightLogRevc, this.onJjcFightLogRevc, this);
            E.MsgMgr.AddMsg(MSGID.JjcMoneyUpdateRevc, this.onJjcMoneyUpdateRevc, this);
            E.MsgMgr.AddMsg(MSGID.JjcBuyFightCntRevc, this.onJjcBuyFightCntRevc, this);
            E.MsgMgr.AddMsg(MSGID.JjcOpenRevc, this.onJjcOpenRevc, this);
            E.MsgMgr.AddMsg(MSGID.JjcRankChangeRevc, this.onJjcRankChangeRevc, this);
            E.MsgMgr.AddMsg(MSGID.JjcFightRevc, this.onJjcFightRevc, this);
            E.MsgMgr.AddMsg(MSGID.JjcRewardGainRevc, this.onJjcRewardGainRevc, this);
            E.MsgMgr.AddMsg(MSGID.JjcSucceedRewardRevc, this.onJjcSucceedReward, this);
            E.MsgMgr.AddMsg(MSGID.JjcSurplusRefreshCountRevc, this.onJjcSurplusRefreshCountRevc, this);
            E.MsgMgr.AddMsg(MSGID.JjcWeekInfoRevc, this.onJjcWeekInfoRevc, this);
            E.MsgMgr.AddMsg(MSGID.WeeklyReward, this.onWeeklyReward, this);
            E.MsgMgr.AddMsg(MSGID.DailyReward, this.onDailyReward, this);
            E.MsgMgr.AddMsg(MSGID.JjcScoreUpdate, this.onJjcScoreUpdate, this);
            RedUpdateModel.Ins.on(RedUpdateModel.UPDATA, this, this.updateRed);
        }
        onJjcScoreUpdate(revc) {
            this.selfScore = revc.val;
            this.event(JjcEvent.SelfScore);
        }
        onDailyReward(revc) {
            this.dailyDayTime = revc.time;
            this.event(JjcEvent.DailyDayTime);
        }
        onWeeklyReward(revc) {
            this.weekRefreshTime = revc.time;
            this.event(JjcEvent.WeekTime);
        }
        onJjcWeekInfoRevc(revc) {
            if (revc.rank != -1) {
                this.curWeekRank = revc.rank;
            }
            this.weekRewardStatus = revc.rewardStatus;
            this.event(JjcEvent.JjcWeekInfoUpdate);
            this.updateRed();
        }
        onJjcSurplusRefreshCountRevc(revc) {
            this.surplusRefreshCount = revc.val;
            this.event(JjcEvent.SurplusRefreshCount);
        }
        onJjcSucceedReward(revc) {
            this.succeedRewardList = revc.succeedRewardList;
        }
        onJjcRewardGainRevc(revc) {
            this.dayStatus = revc.day;
            this.event(JjcEvent.LingQuUpdate);
            this.updateRed();
        }
        onJjcFightRevc(revc) {
            if (E.Debug) {
                if (HrefUtils.getVal("nofightlog") || initConfig.nofightlog) ;
                else {
                    let str = JSON.stringify(revc);
                    MainModel.Ins.fightCMD = str;
                    console.log(str);
                }
            }
            let type = 0;
            if (revc.type == EServerFightType.JJC || revc.type == EServerFightType.DF_JJC || revc.type == EServerFightType.ScoreJJC) {
                type = EFightType.Jjc;
            }
            else if (revc.type == 2) {
                type = EFightType.XXZDZ;
            }
            MainModel.Ins.fight({ fightVo: revc.fightVo, type: type, extData: revc });
        }
        onJjcFightListRevc(revc) {
            this.fightPlayers = revc.playerList;
            this.event(JjcEvent.FightPlayerList);
        }
        onJjcListRevc(revc) {
            this.playerList = revc.playerList;
            this.event(JjcEvent.UpdatePlayerList);
        }
        onJjcRankChangeRevc(revc) {
            this.todayRank = revc.rank;
            this.event(JjcEvent.TodayRankValUpdate);
        }
        onJjcOpenRevc(revc) {
            this.isEnable = revc.open == 1;
        }
        onJjcFightLogRevc(revc) {
            this.loglist = revc.loglist;
            this.event(JjcEvent.LogEvent);
        }
        onJjcMoneyUpdateRevc(revc) {
            this.moneyDataRevc = revc;
            this.event(JjcEvent.MoneyVal);
        }
        onJjcInfo(revc) {
            this.baseInfo = revc;
        }
        get ownerPlayer() {
            if (!this._ownerPlayer) {
                let _player = new stJjcPlayer();
                let info = MainModel.Ins.mRoleData.mPlayer;
                _player.name = MainModel.Ins.mRoleData.getName();
                _player.accountId = info.AccountId;
                _player.headUrl = MainModel.Ins.convertHead(info.HeadUrl);
                this._ownerPlayer = _player;
            }
            let _player = this._ownerPlayer;
            _player.score = this.selfScore;
            _player.lv = MainModel.Ins.mRoleData.lv;
            _player.plus = this.plus;
            _player.rank = this.todayRank;
            _player.titleId = ChengHaoModel.Ins.wearedTitleId;
            return _player;
        }
        get curCfg() {
            let day = TimeUtil.getDay();
            if (day == 0) {
                day = 7;
            }
            let cfg = Arena_config.Ins.GetDataById(day);
            return cfg;
        }
        get refreshTotalCnt() {
            return this.curCfg.f_FreeChance;
        }
        get cfgFightRefreshMax() {
            return this.curCfg.f_RefreshChance;
        }
        get f_MoneyMaximum() {
            let cfg = this.curCfg;
            return cfg.f_MoneyMaximum;
        }
        get fightTotalCnt() {
            if (this.fightBuyRevc) {
                return this.fightBuyRevc.totalCnt;
            }
            return 0;
        }
        getRefreshPrice(refreshCount) {
            let cfg = this.curCfg;
            let [itemId, count] = cfg.f_refreshprice.split('-').map(Number);
            const [, icr] = cfg.f_refreshpriceincs.split('-').map(Number);
            const [, total] = cfg.f_refreshpricemax.split('-').map(Number);
            if (refreshCount > 0) {
                count += icr * refreshCount;
                count = Math.min(count, total);
            }
            return { itemId, count };
        }
        buyFightTime(playerId) {
            this.tempPlayerId = playerId;
            let req = new JjcBuyFightCnt_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        get freefightCnt() {
            return this.fightBuyRevc.freeCnt;
        }
        get hasAlreadyBuyCnt() {
            if (this.fightBuyRevc) {
                return this.fightBuyRevc.buyCnt;
            }
            return -1;
        }
        get dayMoneyVal() {
            if (this.moneyDataRevc) {
                return this.moneyDataRevc.moneyVal;
            }
            return -1;
        }
        strToSecond(str, offsetTime) {
            let _endTime = str;
            let _sec = TimeUtil.toSecond(_endTime);
            let curtime = TimeUtil.curZeroTime + _sec;
            let sub = curtime - TimeUtil.serverTime;
            if (sub < 0) {
                sub += offsetTime;
            }
            return sub + TimeUtil.serverTime;
        }
        get endTime() {
            return this.strToSecond(this.curCfg.f_ArenaCloseTime.split("|")[0], 3600 * 24);
        }
        getWeekRewardEndTime() {
            return this.weekRefreshTime;
        }
        getDayRewardEndTime() {
            let time = this.dailyDayTime;
            return time;
        }
        refreshPlayerList() {
            let req = new JjcActiveRefresh_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        getRedByType(type) {
            let _gray = false;
            if (type == EJjcRewadShow.Day) {
                if (this.dayStatus == EJjcRewadShowStatus.CanLingqu) ;
                else {
                    _gray = true;
                }
            }
            else {
                if (this.weekRewardStatus == EGetStatus.CanNotGet || this.weekRewardStatus == EGetStatus.IsAlreadyGet) {
                    _gray = true;
                }
            }
            return !_gray;
        }
        get mFightRed() {
            const count = MainModel.Ins.mRoleData.getVal(ECellType.JjcTicket);
            if (count > 0) {
                return true;
            }
            return false;
        }
        get mRed() {
            if (TaskModel.Ins.isFuncOpen(this.funcId)) {
                return this.getRedByType(EJjcRewadShow.Day) ||
                    this.getRedByType(EJjcRewadShow.Week) ||
                    this.mFightRed ||
                    this.mDropRed;
            }
        }
        reqJjcList() {
            let req = new JjcList_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        reqRefreshList() {
            let req = new JjcRefreshList_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        fight(id) {
            let req = new JjcFight_req();
            req.playerId = id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        reqlog() {
            let req = new JjcFightLog_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        reqGain(type) {
            let req = new JjcRewardGain_req();
            req.type = type;
            SocketMgr.Ins.SendMessageBin(req);
        }
        reqWeekInfo() {
            let req = new JjcWeekInfo_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        getRewardCfgList(type) {
            return type == EJjcRewadShow.Day ? Arena_RankReward_Daily.Ins.List : Arena_RankReward_Weekly.Ins.List;
        }
        getType() {
            return EJjcType.JJC;
        }
    }

    exports.JjcModel = JjcModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcLogBtnCtl extends ButtonCtl {
        constructor(skin, model) {
            super(skin);
            this.handler = new Laya.Handler(this, this.onClickHandler);
            this.model = model;
            this.clickHandler = this.handler;
            skin.on(Laya.Event.DISPLAY, this, this.onDisplay);
            skin.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        onDisplay() {
            this.model.on(JjcEvent.RedUpdate, this, this.onRedHandler);
            this.onRedHandler();
        }
        onUnDisplay() {
            this.model.off(JjcEvent.RedUpdate, this, this.onRedHandler);
        }
        onRedHandler() {
            if (this.model.mDropRed) {
                DotManager.addDot(this.skin);
            }
            else {
                DotManager.removeDot(this.skin);
            }
        }
        onClickHandler() {
            E.ViewMgr.Open(EViewType.jjcLog, null, this.model);
            this.model.mDropRed = false;
            this.model.updateRed();
        }
    }

    exports.JjcLogBtnCtl = JjcLogBtnCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GeometryUtil {
        static GetCross(p1, p2, p) {
            return (p2.x - p1.x) * (p.y - p1.y) - (p.x - p1.x) * (p2.y - p1.y);
        }
        static isPointInRect(p1, p2, p3, p4, p) {
            let isPointIn = this.GetCross(p1, p2, p) * this.GetCross(p3, p4, p) >= 0 && this.GetCross(p2, p3, p) * this.GetCross(p4, p1, p) >= 0;
            return isPointIn;
        }
        static drawRoundRect(graghics, x, y, width, height, roundRadius, fillColor, borderColor = null, borderWidth = 0) {
            var paths = [];
            paths.push(["moveTo", roundRadius, 0]);
            paths.push(["lineTo", width - roundRadius, 0]);
            paths.push(["arcTo", width, 0, width, roundRadius, roundRadius]);
            paths.push(["lineTo", width, height - roundRadius]);
            paths.push(["arcTo", width, height, width - roundRadius, height, roundRadius]);
            paths.push(["lineTo", roundRadius, height]);
            paths.push(["arcTo", 0, height, 0, height - roundRadius, roundRadius]);
            paths.push(["lineTo", 0, roundRadius]);
            paths.push(["arcTo", 0, 0, roundRadius, 0, roundRadius]);
            paths.push(["closePath"]);
            var brush = { fillStyle: fillColor };
            var pen = { strokeStyle: borderColor, lineWidth: borderWidth };
            return graghics.drawPath(x, y, paths, brush, pen);
        }
    }

    exports.GeometryUtil = GeometryUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (WarStatus) {
        WarStatus[WarStatus["Close"] = 0] = "Close";
        WarStatus[WarStatus["Enroll"] = 1] = "Enroll";
        WarStatus[WarStatus["EnrollEnd"] = 2] = "EnrollEnd";
        WarStatus[WarStatus["Fight"] = 3] = "Fight";
        WarStatus[WarStatus["FightEnd"] = 4] = "FightEnd";
        WarStatus[WarStatus["Reward"] = 5] = "Reward";
        WarStatus[WarStatus["RewardEnd"] = 6] = "RewardEnd";
    })(exports.WarStatus || (exports.WarStatus = {}));
    class AllianceFightModel extends Laya.EventDispatcher {
        constructor() {
            super(...arguments);
            this.timeList = [];
            this.isEnrolled = false;
            this.psCount = 0;
            this.psUnix = 0;
            this.bossLifeList = [];
            this.bossHarmList = [];
            this.allianceRankList = [];
            this.innerRankList = [];
            this.rewardRankList = [];
            this.myAllianceRewardState = 0;
            this.myInnerRewardState = 0;
            this.totalHarm = 0;
            this.totalHarmPercent = 0;
            this.entered = false;
            this.warStatus = exports.WarStatus.Close;
            this.playerList = [];
            this.selectedAlliance = null;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceFightModel();
            }
            return this._ins;
        }
        updateTimeList(times) {
            for (const time of times) {
                let index = AllianceFightModel.Ins.timeList.findIndex(o => o.type === time.type);
                if (index === -1) {
                    AllianceFightModel.Ins.timeList.push(time);
                }
                else {
                    AllianceFightModel.Ins.timeList[index] = time;
                }
            }
            let warStatus = this.warStatus;
            if (warStatus == exports.WarStatus.Reward) {
                let req = new AllianceWarRank_req;
                SocketMgr.Ins.SendMessageBin(req);
                let reqq = new AllianceWarGetRankRewardState_req;
                SocketMgr.Ins.SendMessageBin(reqq);
            }
        }
        get passLevel1() {
            return AllianceFightModel.Ins.bossLifeList.every(o => o.life <= 0);
        }
        showMainPage() {
            E.ViewMgr.Open(EViewType.AllianceFightEnrollView);
        }
        get showRewardChapter() {
            if (this.rank > 0 && this.rank < 4) {
                return true;
            }
            return false;
        }
        get enrollSubTime() {
            const time = AllianceFightModel.Ins.getWarStatusUnix(exports.WarStatus.Enroll, 'End');
            let sub = time - TimeUtil.serverTime;
            return sub;
        }
        get rewardSubTime() {
            const time = AllianceFightModel.Ins.getWarStatusUnix(exports.WarStatus.Reward, 'End');
            let sub = time - TimeUtil.serverTime;
            return sub;
        }
        get fightSubTime() {
            let time = AllianceFightModel.Ins.getWarStatusUnix(exports.WarStatus.Fight, 'Begin');
            if (time < TimeUtil.serverTime) {
                time += 86400 * 7;
            }
            let sub = time - TimeUtil.serverTime;
            return sub;
        }
        getWarStatusUnix(warStatus, type) {
            var _a;
            const timeList = AllianceFightModel.Ins.timeList;
            const m = new Map([
                [exports.WarStatus.Enroll, 1],
                [exports.WarStatus.Fight, 2],
                [exports.WarStatus.Reward, 3],
            ]);
            return ((_a = timeList.find(o => o.type === m.get(warStatus))) === null || _a === void 0 ? void 0 : _a[type === 'Begin' ? 'beginUnix' : 'endUnix']) || 0;
        }
        parseAttrList(equipAttrValue) {
            if (!equipAttrValue) {
                return [];
            }
            const arr = equipAttrValue.split('|');
            return arr.map(o => {
                const [equipAttrId, attrValue] = o.split(':');
                return { equipAttrId: Number(equipAttrId) || 0, attrValue: Number(attrValue) || 0 };
            });
        }
        get gctzSubTime() {
            const time = AllianceFightModel.Ins.getWarStatusUnix(exports.WarStatus.Fight, 'End');
            let sub = time - TimeUtil.serverTime;
            return sub;
        }
    }
    AllianceFightModel.UPDATA_AWCP_VIEW = "UPDATA_AWCP_VIEW";
    AllianceFightModel.UPDATA_AWCC_VIEW = "UPDATA_AWCC_VIEW";
    AllianceFightModel.UPDATE_ENROLL = 'UPDATE_ENROLL';
    AllianceFightModel.UPDATE_PS = 'UPDATE_PS';
    AllianceFightModel.UPDATE_BOSS_LIFE = 'UPDATE_BOSS_LIFE';
    AllianceFightModel.UPDATE_BOSS_HARM_DETAIL = 'UPDATE_BOSS_HARM_DETAIL';
    AllianceFightModel.UPDATE_ALLIANCE_RANK = 'UPDATE_ALLIANCE_RANK';
    AllianceFightModel.UPDATE_INNER_RANK = 'UPDATE_INNER_RANK';
    AllianceFightModel.UPDATE_REWARD_RANK = 'UPDATE_REWARD_RANK';
    AllianceFightModel.UPDATE_REWARD_STATE = 'UPDATE_REWARD_STATE';
    AllianceFightModel.UPDATE_LOG = 'UPDATE_LOG';
    AllianceFightModel.UPDATE_SKIN = 'UPDATE_SKIN';
    AllianceFightModel.UPDATE_RANK = 'UPDATE_RANK';
    AllianceFightModel.UPDATE_PLAYER_LIST = 'UPDATE_PLAYER_LIST';

    exports.AllianceFightModel = AllianceFightModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AdventureChapterCfg {
        constructor() {
            this.cfgList = [];
        }
    }
    class AdventureLevelCfg {
        constructor() {
            this.dataList = [];
        }
        addChapter(chapterID, cfg) {
            let cell = this.dataList.find(item => item.chapterID == chapterID);
            if (!cell) {
                cell = new AdventureChapterCfg();
                cell.chapterID = chapterID;
                this.dataList.push(cell);
            }
            this.dataList[this.dataList.length - 1].cfgList.push(cfg);
        }
        get pageLabel() {
            let start = this.dataList[0];
            let end = this.dataList[this.dataList.length - 1];
            return `${start.chapterID}-${end.chapterID}`;
        }
        get mRed() {
            return NewAdventureModel.Ins.hasTabPageRed(this);
        }
    }
    class AdventureLevelProxy extends BaseCfg {
        GetTabelName() {
            return "t_Adventure_Level";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new AdventureLevelProxy();
            }
            return this._ins;
        }
        getNearHasHero(fid) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_id >= fid && cfg.f_unlockhero != 0) {
                    return cfg.f_unlockhero;
                }
            }
        }
        getAdventureTaskName(id) {
            let l = this.List;
            const cfg = l.find((o) => o.f_Levelid === id);
            if (!cfg) {
                throw new Error(`t_Adventure_Level缺少关卡#${id}的配置`);
            }
            return `${cfg.f_ChapterID}-${cfg.f_unitid}`;
        }
        getByLevelId(lv) {
            let l = this.List;
            let cell = l.find(item => item.f_Levelid == lv);
            return cell;
        }
        getPreCfg(lv) {
            let cfg = this.getByLevelId(lv);
            let index = this.List.indexOf(cfg);
            return this.List[index - 1];
        }
        getNextCfg(lv) {
            let cfg = this.getByLevelId(lv);
            let index = this.List.indexOf(cfg);
            return this.List[index + 1];
        }
        getChapterName(cfg) {
            return cfg.f_Chapter + cfg.f_ChapterID + "-" + cfg.f_unitid;
        }
        get pageList() {
            if (!this._pageList) {
                this._pageList = [];
                let l = this.List;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    let cell = this._pageList.find(item => item.page == cfg.f_Page);
                    if (!cell) {
                        let _cur = new AdventureLevelCfg();
                        _cur.page = cfg.f_Page;
                        this._pageList.push(_cur);
                    }
                    let curPage = this._pageList[this._pageList.length - 1];
                    curPage.addChapter(cfg.f_ChapterID, cfg);
                }
            }
            return this._pageList;
        }
        getCurTabIndex(lv) {
            let cfg = this.getByLevelId(lv);
            let f_ChapterID = cfg.f_ChapterID;
            let l = this.pageList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let vo = cell.dataList.find(item => item.chapterID == f_ChapterID);
                if (vo) {
                    return i;
                }
            }
        }
        getChapterMax(page, chapterID) {
            let cell = this.pageList.find(item => item.page == page);
            if (cell) {
                let b = cell.dataList.find(a => a.chapterID == chapterID);
                if (b) {
                    let cfg = b.cfgList[b.cfgList.length - 1];
                    return cfg.f_unitid;
                }
            }
            return 0;
        }
        getChapterRange(page, chapterID) {
            let cell = this.pageList.find(item => item.page == page);
            if (cell) {
                let b = cell.dataList.find(a => a.chapterID == chapterID);
                if (b) {
                    let minCfg = b.cfgList[0];
                    let maxCfg = b.cfgList[b.cfgList.length - 1];
                    let unit = {};
                    unit.minLvId = minCfg.f_Levelid;
                    unit.maxLvId = maxCfg.f_Levelid;
                    return unit;
                }
            }
            return;
        }
        isLastChapterID(chapterId) {
            let cfg = this.List[this.List.length - 1];
            if (cfg.f_ChapterID == chapterId) {
                return true;
            }
        }
    }

    exports.AdventureChapterCfg = AdventureChapterCfg;
    exports.AdventureLevelCfg = AdventureLevelCfg;
    exports.AdventureLevelProxy = AdventureLevelProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EquipmentQualityProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new EquipmentQualityProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_EquipmentQuality";
        }
        getByQua(qua) {
            return this.GetDataById(qua);
        }
        getByQuaDefault(defaultColor, qua) {
            if (!qua) {
                return defaultColor;
            }
            return `#${this.getByQua(qua).f_Color}`;
        }
    }
    class EquipmentIDProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new EquipmentIDProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_EquipmentID";
        }
    }
    class EffectValueProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new EffectValueProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_EffectValue";
        }
    }
    class EquipmentValueProxy extends BaseCfg {
        constructor() {
            super(...arguments);
            this.MaxAttrID = 10005;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new EquipmentValueProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_EquipmentValue";
        }
    }
    class GameconfigProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new GameconfigProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_gameconfig";
        }
        onSortHandler(a, b) {
            if (a.f_sort < b.f_sort) {
                return 1;
            }
            else if (a.f_sort > b.f_sort) {
                return -1;
            }
            return 0;
        }
        get gainList() {
            let l = this.List;
            let r = [];
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_id > EquipmentValueProxy.Ins.MaxAttrID && cfg.f_isenable) {
                    r.push(cfg.f_id);
                }
            }
            r = r.sort(this.onSortHandler);
            return r;
        }
        get allAttrTypes() {
            return this.GetAllFids();
        }
        getJjcList() {
            let l = this.List;
            let r = [];
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_id < 10018) {
                    r.push(cfg.f_id);
                }
            }
            return r;
        }
    }
    class Equipment_DIY_Proxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new Equipment_DIY_Proxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Equipment_DIY";
        }
        createByFid(fid) {
            let cfg = this.GetDataById(fid);
            let _equipItemVo = new stEquipItem();
            _equipItemVo.type = cfg.f_AssetID;
            _equipItemVo.uid = new uint64();
            _equipItemVo.level = cfg.f_Level;
            _equipItemVo.quality = cfg.f_Quality;
            _equipItemVo.wearable = EWearableType.Not;
            _equipItemVo.plus = cfg.f_plus;
            _equipItemVo.equipStyle = cfg.f_StyleID;
            let ls = [];
            let attrs = GameconfigProxy.Ins.allAttrTypes;
            for (let i = 0; i < attrs.length; i++) {
                let id = attrs[i];
                let val = cfg["f_" + id];
                if (val) {
                    let _attrVo = new stEquipAttr();
                    _attrVo.id = id;
                    _attrVo.value = parseInt(val);
                    ls.push(_attrVo);
                }
            }
            _equipItemVo.attrList = ls;
            _equipItemVo.attrList1 = [];
            return _equipItemVo;
        }
    }

    exports.EffectValueProxy = EffectValueProxy;
    exports.EquipmentIDProxy = EquipmentIDProxy;
    exports.EquipmentQualityProxy = EquipmentQualityProxy;
    exports.EquipmentValueProxy = EquipmentValueProxy;
    exports.Equipment_DIY_Proxy = Equipment_DIY_Proxy;
    exports.GameconfigProxy = GameconfigProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Gym_Shop extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Shop();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gym_Shop";
        }
        getListByType(type) {
            let res = [];
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_PageID == type) {
                    res.push(cfg);
                }
            }
            return res;
        }
    }
    class t_Gym_Mission_List extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Mission_List();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gym_Mission_List";
        }
    }
    class t_Gym_Mission_Type extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Mission_Type();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gym_Mission_Type";
        }
    }
    class t_Gym_Mission_Quality extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Mission_Quality();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gym_Mission_Quality";
        }
        getByMissionStarId(f_Star) {
            let l = this.List;
            return l.find(item => item.f_Star == f_Star);
        }
    }
    class t_Gym_Config extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Config();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gym_Config";
        }
        get cfg() {
            if (!this._cfg) {
                this._cfg = this.GetDataById(1);
            }
            return this._cfg;
        }
    }
    class t_Gym_NPC_List extends BaseCfg {
        GetTabelName() {
            return "t_Gym_NPC_List";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_NPC_List();
            }
            return this._ins;
        }
        getByHeroID(heroId) {
            let l = this.List;
            let cell = l.find(item => item.f_HeroID == heroId);
            return cell;
        }
    }
    class t_Gym_NPC_Type extends BaseCfg {
        GetTabelName() {
            return "t_Gym_NPC_Type";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_NPC_Type();
            }
            return this._ins;
        }
        getByType(type) {
            let cell = this.List.find(item => item.f_TypeID == type);
            return cell;
        }
    }
    class t_Gym_NPC_InnerRoom extends BaseCfg {
        GetTabelName() {
            return "t_Gym_NPC_InnerRoom";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_NPC_InnerRoom();
            }
            return this._ins;
        }
        getByLv(lv) {
            return this.List.find(item => item.f_RoomLevel == lv);
        }
        get maxLevel() {
            if (this._maxLv == undefined) {
                let l = this.List;
                this._maxLv = l[l.length - 1].f_RoomLevel;
            }
            return this._maxLv;
        }
    }
    class t_Gym_Facility_List extends BaseCfg {
        GetTabelName() {
            return "t_Gym_Facility_List";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Facility_List();
            }
            return this._ins;
        }
        getByFacilityId(f_FacilityId) {
            return this.List.find(item => item.f_FacilityId == f_FacilityId);
        }
    }
    class t_Gym_Map extends BaseCfg {
        GetTabelName() {
            return "t_Gym_Map";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Map();
            }
            return this._ins;
        }
    }
    class t_Gym_Facility_Platform extends BaseCfg {
        GetTabelName() {
            return "t_Gym_Facility_Platform";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Facility_Platform();
            }
            return this._ins;
        }
        findByRank(f_FacilityRank) {
            let l = this.List;
            return l.find(item => item.f_FacilityRank == f_FacilityRank);
        }
    }
    class t_Gym_NPC_Quality extends BaseCfg {
        GetTabelName() {
            return "t_Gym_NPC_Quality";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_NPC_Quality();
            }
            return this._ins;
        }
        getByQua(qua) {
            return this.GetDataById(qua);
        }
    }
    class t_Gym_Facility_Drum extends BaseCfg {
        GetTabelName() {
            return "t_Gym_Facility_Drum";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Facility_Drum();
            }
            return this._ins;
        }
    }
    class t_Gym_Facility_Tea extends BaseCfg {
        GetTabelName() {
            return "t_Gym_Facility_Tea";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Facility_Tea();
            }
            return this._ins;
        }
    }
    class t_Gym_Facility_lantern extends BaseCfg {
        GetTabelName() {
            return "t_Gym_Facility_lantern";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Facility_lantern();
            }
            return this._ins;
        }
    }
    class t_Gym_Facility_Dummy extends BaseCfg {
        GetTabelName() {
            return "t_Gym_Facility_Dummy";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Facility_Dummy();
            }
            return this._ins;
        }
    }
    class t_Gym_refinement_Config extends BaseCfg {
        GetTabelName() {
            return "t_Gym_refinement_Config";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_refinement_Config();
            }
            return this._ins;
        }
    }
    class t_Gym_Mission_Config extends BaseCfg {
        GetTabelName() {
            return "t_Gym_Mission_Config";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_Mission_Config();
            }
            return this._ins;
        }
    }
    class t_Gym_NPC_Bond extends BaseCfg {
        GetTabelName() {
            return "t_Gym_NPC_Bond";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_NPC_Bond();
            }
            return this._ins;
        }
        get quaList() {
            if (!this._quaList) {
                this._quaList = [];
                let l = this.List;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    if (this._quaList.indexOf(cfg.f_BondQuality) == -1) {
                        this._quaList.push(cfg.f_BondQuality);
                    }
                }
                this._quaList.sort((a, b) => {
                    if (a > b) {
                        return 1;
                    }
                    else if (a < b) {
                        return -1;
                    }
                    return 0;
                });
            }
            return this._quaList;
        }
        getListByQua(qua) {
            let l = this.List;
            let _resultList = [];
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_BondQuality == qua) {
                    _resultList.push(cfg);
                }
            }
            return _resultList;
        }
    }
    class t_Gym_NPC_Image extends BaseCfg {
        GetTabelName() {
            return "t_Gym_NPC_Image";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_NPC_Image();
            }
            return this._ins;
        }
        getStSkin(cfg) {
            let cell = new stSkin();
            cell.f_HeadID = cfg.f_HeadID;
            cell.f_WeaponID = cfg.f_WeaponID;
            cell.f_ShieldID = cfg.f_ShieldID;
            cell.f_BodyID = cfg.f_BodyID;
            cell.f_WingID = 0;
            cell.f_MountID = 0;
            return cell;
        }
        getCfgByTypeID(typeId) {
            let l = this.List;
            let cell = l.find(item => item.f_TypeID == typeId);
            return cell;
        }
    }
    class t_Gym_NPC_Anim extends BaseCfg {
        GetTabelName() {
            return "t_Gym_NPC_Anim";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_NPC_Anim();
            }
            return this._ins;
        }
    }
    class t_Gym_NPC_MiscList extends BaseCfg {
        GetTabelName() {
            return "t_Gym_NPC_MiscList";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_NPC_MiscList();
            }
            return this._ins;
        }
    }
    class t_Gym_NPC_Talk extends BaseCfg {
        GetTabelName() {
            return "t_Gym_NPC_Talk";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_NPC_Talk();
            }
            return this._ins;
        }
    }
    class t_Pack_Gym extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Gym";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_Gym();
            }
            return this._ins;
        }
    }
    class t_Gym_refinement_AttributeRange extends BaseCfg {
        GetTabelName() {
            return "t_Gym_refinement_AttributeRange";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gym_refinement_AttributeRange();
            }
            return this._ins;
        }
        getQua(attrId, val) {
            let cfg = this.List.find(item => item.f_Attributeid == attrId);
            let qua = 1;
            if (cfg) {
                let rate = cfg.f_Rate.split("|");
                for (let i = 0; i < rate.length; i++) {
                    let arr = rate[i].split("-");
                    let _qua = parseInt(arr[0]);
                    let _start = parseInt(arr[1]);
                    let _end = parseInt(arr[2]);
                    if (val >= _start && val <= _end) {
                        qua = _qua;
                        break;
                    }
                }
            }
            return qua;
        }
        getColor(attrId, val) {
            let qua = this.getQua(attrId, val);
            let color = EquipmentQualityProxy.Ins.getByQua(qua).f_Color;
            return "#" + color;
        }
    }
    class t_Spirit_Quality extends BaseCfg {
        GetTabelName() {
            return "t_Spirit_Quality";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Spirit_Quality();
            }
            return this._ins;
        }
        getCfgByQua(qua) {
            let l = this.List;
            return l.find(item => item.f_QualityID == qua);
        }
    }
    class t_Spirit_Config extends BaseCfg {
        GetTabelName() {
            return "t_Spirit_Config";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Spirit_Config();
            }
            return this._ins;
        }
        getRandomCount(lv) {
            let cfg = this.GetDataById(1);
            return Math.floor(lv / cfg.f_LevelGet);
        }
    }
    class t_Spirit_ExpCost extends BaseCfg {
        GetTabelName() {
            return "t_Spirit_ExpCost";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Spirit_ExpCost();
            }
            return this._ins;
        }
        getByQua(qua) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_QualityID == qua) {
                    return cfg;
                }
            }
        }
    }

    exports.t_Gym_Config = t_Gym_Config;
    exports.t_Gym_Facility_Drum = t_Gym_Facility_Drum;
    exports.t_Gym_Facility_Dummy = t_Gym_Facility_Dummy;
    exports.t_Gym_Facility_List = t_Gym_Facility_List;
    exports.t_Gym_Facility_Platform = t_Gym_Facility_Platform;
    exports.t_Gym_Facility_Tea = t_Gym_Facility_Tea;
    exports.t_Gym_Facility_lantern = t_Gym_Facility_lantern;
    exports.t_Gym_Map = t_Gym_Map;
    exports.t_Gym_Mission_Config = t_Gym_Mission_Config;
    exports.t_Gym_Mission_List = t_Gym_Mission_List;
    exports.t_Gym_Mission_Quality = t_Gym_Mission_Quality;
    exports.t_Gym_Mission_Type = t_Gym_Mission_Type;
    exports.t_Gym_NPC_Anim = t_Gym_NPC_Anim;
    exports.t_Gym_NPC_Bond = t_Gym_NPC_Bond;
    exports.t_Gym_NPC_Image = t_Gym_NPC_Image;
    exports.t_Gym_NPC_InnerRoom = t_Gym_NPC_InnerRoom;
    exports.t_Gym_NPC_List = t_Gym_NPC_List;
    exports.t_Gym_NPC_MiscList = t_Gym_NPC_MiscList;
    exports.t_Gym_NPC_Quality = t_Gym_NPC_Quality;
    exports.t_Gym_NPC_Talk = t_Gym_NPC_Talk;
    exports.t_Gym_NPC_Type = t_Gym_NPC_Type;
    exports.t_Gym_Shop = t_Gym_Shop;
    exports.t_Gym_refinement_AttributeRange = t_Gym_refinement_AttributeRange;
    exports.t_Gym_refinement_Config = t_Gym_refinement_Config;
    exports.t_Pack_Gym = t_Pack_Gym;
    exports.t_Spirit_Config = t_Spirit_Config;
    exports.t_Spirit_ExpCost = t_Spirit_ExpCost;
    exports.t_Spirit_Quality = t_Spirit_Quality;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class CleanUpVo {
        constructor() {
            this.alreadyCount = 0;
        }
        get cfg() {
            if (!this._cfg) {
                this._cfg = t_Spirit_Config.Ins.GetDataById(1);
            }
            return this._cfg;
        }
        get needCfg() {
            if (!this._needCfg) {
                this._needCfg = ItemViewFactory.parseItem(this.cfg.f_BuyTimesCost);
            }
            return this._needCfg;
        }
        get needStr() {
            return `${this.needCfg.id}-${this.needCfg.count}`;
        }
        get subCount() {
            return this.cfg.f_BuyTimes + this.cfg.f_EnergyMax - this.alreadyCount;
        }
        get mFree() {
            return this.alreadyCount == 0;
        }
        get needMoneyVal() {
            let val = parseInt(this.cfg.f_BuyTimesCostGrow.split("-")[1]);
            let v = this._needCfg.count + (this.alreadyCount - 1) * val;
            return v;
        }
        get needItemCfgId() {
            return this.needCfg.id;
        }
        get storageMax() {
            return this.cfg.f_StorageMax;
        }
    }

    exports.CleanUpVo = CleanUpVo;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class NewAdventureEvent {
	}
	NewAdventureEvent.DisposeAvatar = "DisposeAvatar";
	NewAdventureEvent.RewardUpdate = "RewardUpdate";

	exports.NewAdventureEvent = NewAdventureEvent;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class BaseSlotItemView extends Laya.Sprite {
        setData(data) {
        }
    }
    class ItemSlotCtl extends Laya.EventDispatcher {
        constructor(skin) {
            super();
            skin.on(Laya.Event.CLICK, this, this.onClickHandler);
            this.skin = skin;
        }
        onClickHandler(e) {
            e.stopPropagation();
            this.event(Laya.Event.CLICK);
            if (!this._vo) {
                return;
            }
            MainModel.Ins.showSmallTips(this._vo.getName(), this._vo.getDesc(), this.skin);
        }
        setData(_vo) {
            this._vo = _vo;
            if (!this._vo) {
                return;
            }
            if (this.skin.quality) {
                this.skin.quality.skin = _vo.quaIcon();
            }
            this.skin.icon.skin = _vo.getIcon();
            this.skin.tf1.text = _vo.count.toString();
        }
    }
    class SoltItemView extends ui.views.main.ui_slot_itemUI {
        constructor() {
            super();
            this.ctl = new ItemSlotCtl(this);
        }
        setData(_vo) {
            this.ctl.setData(_vo);
        }
    }
    class SoltItemView3 extends ui.views.main.ui_slot_item3UI {
        constructor() {
            super();
            this.ctl = new ItemSlotCtl(this);
        }
        setData(_vo) {
            this.ctl.setData(_vo);
            this.nameTf.text = _vo.getName();
        }
    }
    class SoltItemView2 extends ui.views.main.ui_slot_item2UI {
        constructor() {
            super();
            this.ctl = new ItemSlotCtl(this);
        }
        setData(_vo) {
            this.ctl.setData(_vo);
        }
    }

    exports.BaseSlotItemView = BaseSlotItemView;
    exports.ItemSlotCtl = ItemSlotCtl;
    exports.SoltItemView = SoltItemView;
    exports.SoltItemView2 = SoltItemView2;
    exports.SoltItemView3 = SoltItemView3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HuYouCfgProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new HuYouCfgProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Blessing_Config";
        }
    }
    class HuYouGetStageProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new HuYouGetStageProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Blessing_GetStage";
        }
        getListByType(type) {
            let list = [];
            for (let ele of this.List) {
                if (ele.f_StageType == type) {
                    list.push(ele);
                }
            }
            return list;
        }
    }
    class HuYouQualityProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new HuYouQualityProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Blessing_Soul_Quality";
        }
        getListByType(type) {
            let list = [];
            for (let ele of this.List) {
                if (ele.f_Enable == type) {
                    list.push(ele);
                }
            }
            return list;
        }
        getListQuaByType(type) {
            let list = [];
            for (let ele of this.List) {
                if (ele.f_Enable == type && ele.f_QualityID <= 5) {
                    list.push(ele);
                }
            }
            return list;
        }
        getCfgByItemID(itemID) {
            let l = this.List;
            return l.find(item => item.f_itemId == itemID);
        }
        getCfgByQua(qua) {
            let l = this.List;
            return l.find(item => item.f_QualityID == qua);
        }
    }
    class HuYouIconProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let idd = this.List[i].f_ItemID;
                if (!this._map[idd]) {
                    this._map[idd] = {};
                }
                let attrr = this.List[i].f_SoulAttribute;
                this._map[idd][attrr] = this.List[i];
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new HuYouIconProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Blessing_Soul_Icon";
        }
        getCfgByIdAndAttr(id, attr) {
            return this._map[id][attr];
        }
    }
    class HuYouSoulExpProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new HuYouSoulExpProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Blessing_Soul_Exp";
        }
        getCfgByLv(level) {
            let l = this.List;
            return l.find(item => item.f_SoulLevel == level);
        }
    }
    class HuYouSlotProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new HuYouSlotProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Blessing_SlotOpen";
        }
        getSlotNum() {
            let lv = MainModel.Ins.mRoleData.lv;
            let num = 0;
            for (let i = 0; i < this.List.length; i++) {
                if (lv >= this.List[i].f_PlayerLevel) {
                    num = this.List[i].f_Slot;
                }
            }
            return num;
        }
        getCfgByCount(count) {
            let l = this.List;
            return l.find(item => item.f_Slot == count);
        }
    }
    class HuYouShopProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new HuYouShopProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Blessing_Shop";
        }
    }
    class HuYouAttrNameProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new HuYouAttrNameProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Blessing_Attribute_Name";
        }
    }

    exports.HuYouAttrNameProxy = HuYouAttrNameProxy;
    exports.HuYouCfgProxy = HuYouCfgProxy;
    exports.HuYouGetStageProxy = HuYouGetStageProxy;
    exports.HuYouIconProxy = HuYouIconProxy;
    exports.HuYouQualityProxy = HuYouQualityProxy;
    exports.HuYouShopProxy = HuYouShopProxy;
    exports.HuYouSlotProxy = HuYouSlotProxy;
    exports.HuYouSoulExpProxy = HuYouSoulExpProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Spirit_Position extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Spirit_Position();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Spirit_Position";
        }
        getByPos(pos) {
            return this.List.find(item => item.f_Position == pos);
        }
    }
    class t_Spirit_Attribute_Fixed extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Spirit_Attribute_Fixed();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Spirit_Attribute_Fixed";
        }
        getCfgBySpiritID(f_SpiritID) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_SpiritID == f_SpiritID) {
                    return cfg;
                }
            }
        }
    }
    class t_Spirit_ExpUpgrade extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Spirit_ExpUpgrade();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Spirit_ExpUpgrade";
        }
        getCfgByLv(lv) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_SpiritID == lv) {
                    return cfg;
                }
            }
        }
        isFull(lv, qua) {
            let cfg = this.getCfgByLv(lv);
            return cfg[`f_Quality${qua}`] == 0;
        }
        getMaxExp(lv, qua) {
            let l = this.List;
            let val = 0;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_SpiritID <= lv) {
                    val += cfg[`f_Quality${qua}`];
                }
                else {
                    break;
                }
            }
            return val;
        }
        getMinExp(lv, qua) {
            let l = this.List;
            let val = 0;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_SpiritID < lv) {
                    val += cfg[`f_Quality${qua}`];
                }
                else {
                    break;
                }
            }
            return val;
        }
        getMaxByQua(qua) {
            let l = this.List;
            let val = 0;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                let quaVal = parseInt(cfg[`f_Quality${qua}`]);
                val += quaVal;
            }
            return val;
        }
        getLvByExp(qua, exp) {
            let l = this.List;
            let v = 0;
            let lv = 0;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                let addExp = parseInt(cfg[`f_Quality${qua}`]);
                if (addExp) {
                    if (exp >= v && exp < v + addExp) {
                        return cfg.f_SpiritID;
                    }
                    v += addExp;
                    lv = cfg.f_SpiritID;
                }
            }
            return lv + 1;
        }
    }
    class t_Spirit_Attribute_Random extends BaseCfg {
        GetTabelName() {
            return "t_Spirit_Attribute_Random";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Spirit_Attribute_Random();
            }
            return this._ins;
        }
        isRandomAttrId(_attrId) {
            if (!this._randomList) {
                this._randomList = [];
                let l = this.List;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    if (cfg.f_RandomEnable == 0) {
                        this._randomList.push(cfg.f_SpiritID);
                    }
                }
            }
            return this._randomList.indexOf(_attrId) != -1;
        }
    }
    class t_Spirit_Attribute_Bond extends BaseCfg {
        GetTabelName() {
            return "t_Spirit_Attribute_Bond";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Spirit_Attribute_Bond();
            }
            return this._ins;
        }
        getBySpiritID(id) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_SpiritID == id) {
                    return cfg;
                }
            }
        }
    }

    exports.t_Spirit_Attribute_Bond = t_Spirit_Attribute_Bond;
    exports.t_Spirit_Attribute_Fixed = t_Spirit_Attribute_Fixed;
    exports.t_Spirit_Attribute_Random = t_Spirit_Attribute_Random;
    exports.t_Spirit_ExpUpgrade = t_Spirit_ExpUpgrade;
    exports.t_Spirit_Position = t_Spirit_Position;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ESoulFunc) {
        ESoulFunc[ESoulFunc["Equip"] = 1] = "Equip";
        ESoulFunc[ESoulFunc["Unload"] = 2] = "Unload";
        ESoulFunc[ESoulFunc["Swicth"] = 3] = "Swicth";
        ESoulFunc[ESoulFunc["Intensify"] = 4] = "Intensify";
    })(exports.ESoulFunc || (exports.ESoulFunc = {}));
    class SoulTipVo {
        constructor() {
            this.enableHold = true;
            this.type = [];
        }
        equip() {
            let model = SoulModel.Ins;
            let cell = model.getWearableByPos(this.vo.pos);
            let uid = 0;
            if (cell && cell.vo) {
                uid = cell.vo.uid;
            }
            let req = new SpiritWear_req();
            req.oldUid = uid;
            req.newUid = this.vo.uid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        intensify() {
            E.ViewMgr.Open(EViewType.SoulUpgrade, null, this.vo.uid);
        }
        unload() {
            let req = new SpiritUnwear_req();
            req.uid = this.vo.uid;
            SocketMgr.Ins.SendMessageBin(req);
        }
    }

    exports.SoulTipVo = SoulTipVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Power_level extends BaseCfg {
        GetTabelName() {
            return "t_Power_level";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Power_level();
            }
            return this._ins;
        }
        find(l, id) {
            for (let i = 0; i < l.length; i++) {
                let o = l[i];
                if (o.id == id) {
                    return o.value;
                }
            }
            return 0;
        }
        calculatePlus(l) {
            let cfgList = this.List;
            let plus = 0;
            for (let i = 0; i < cfgList.length; i++) {
                let cfg = cfgList[i];
                let val = this.find(l, cfg.f_id);
                if (val) {
                    plus = parseInt(cfg.f_val) * val;
                }
            }
            return plus;
        }
    }

    exports.t_Power_level = t_Power_level;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SoulTopItemCtl {
        constructor(skin, pos = 0, flag = true) {
            this.skin = skin;
            this.pos = pos;
            if (pos && flag) {
                this.skin.on(Laya.Event.CLICK, this, this.onClickHandler);
            }
        }
        onClickHandler() {
            if (this.vo) {
                let cell = new SoulTipVo();
                cell.type.push(ESoulFunc.Unload, ESoulFunc.Intensify);
                cell.vo = this.vo;
                E.ViewMgr.Open(EViewType.SoulTips, null, cell);
            }
        }
        refreshView(flag = true) {
            let cell = SoulModel.Ins.getWearableByPos(this.pos);
            this.updateView(cell ? cell.vo : null, flag);
        }
        updateView(vo, flag = true) {
            this.vo = vo;
            let _iconPos = 0;
            let _qua = 0;
            DotManager.removeDot(this.skin);
            if (vo) {
                this.skin.tf1.visible = false;
                this.skin.icon.visible = true;
                f_headViewUpdate(this.skin.icon, t_Spirit_Attribute_Fixed.Ins.getCfgBySpiritID(vo.spiritId).f_SpiritIconID);
                this.skin.lvTf.visible = true;
                if (vo.level > 0) {
                    this.skin.lvTf.text = "+" + vo.level.toString();
                }
                else {
                    this.skin.lvTf.text = "";
                }
                _iconPos = vo.pos;
                _qua = vo.qualityId;
            }
            else {
                let posCfg = t_Spirit_Position.Ins.getByPos(this.pos);
                this.skin.icon.visible = false;
                this.skin.tf1.visible = true;
                this.skin.tf1.text = posCfg.f_PositionName;
                this.skin.lvTf.visible = false;
                _iconPos = this.pos;
                if (SoulModel.Ins.getHasCanWear(this.pos) && flag) {
                    DotManager.addDot(this.skin);
                }
            }
            this.skin.bgicon.rotation = SoulModel.Ins.getRot(_iconPos);
            this.skin.bgicon.skin = SoulModel.Ins.getIcon(_qua);
        }
    }

    exports.SoulTopItemCtl = SoulTopItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ProgressCtl {
        constructor(skin) {
            this.skin = skin;
            this.initW = this.skin.bg.width;
        }
        set value(v) {
            if (v < 0) {
                this.skin.bg.visible = false;
            }
            else {
                this.skin.bg.visible = true;
                if (v > 1) {
                    this.skin.bg.width = this.initW;
                }
                else {
                    this.skin.bg.width = v * this.initW;
                }
            }
        }
        dispose() {
            this.skin.bg = null;
        }
    }

    exports.ProgressCtl = ProgressCtl;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class EquipBaseVo {
	}

	exports.EquipBaseVo = EquipBaseVo;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class QualityUtils {
        static getQuaColor(qua) {
            let quacfg = EquipmentQualityProxy.Ins.GetDataById(qua);
            if (quacfg)
                return "#" + quacfg.f_Color;
            else {
                if (E.Debug) {
                    E.ViewMgr.ShowMidError("qua = 0");
                }
                return "#ffffff";
            }
        }
    }
    QualityUtils.defaultColor = "#6E6E6E";

    exports.QualityUtils = QualityUtils;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EquipItemVo extends EquipBaseVo {
        getUid() {
            return this.equipVo.uid;
        }
        get quality() {
            if (this.equipVo) {
                return this.equipVo.quality;
            }
            return 0;
        }
        static getVal(attrList, id) {
            for (let i = 0; i < attrList.length; i++) {
                let cell = attrList[i];
                if (cell.id == id) {
                    return cell.value;
                }
            }
            return 0;
        }
        static diffCheck(a0, a1) {
            let attr0 = a0.equipVo.attrList;
            let attr1 = a1.equipVo.attrList;
            if (attr0.length != attr1.length) {
                return true;
            }
            for (let i = 0; i < attr0.length; i++) {
                let cell = attr0[i];
                let v = this.getVal(attr1, cell.id);
                if (cell.value != v) {
                    return true;
                }
            }
            return false;
        }
        getQualityIcon() {
            return IconUtils.getQuaIcon(this.quality);
        }
        getQuaText() {
            let cfg = EquipmentQualityProxy.Ins.GetDataById(this.quality);
            if (cfg) {
                return cfg.f_EquipmentLevel;
            }
            return "";
        }
        getPartName() {
            if (this.equipVo) {
                let cfg = EquipmentIDProxy.Ins.GetDataById(this.equipVo.type);
                return cfg.f_name;
            }
            return "";
        }
        getName() {
            return `${this.getQuaText()}${E.LangMgr.getLang("De")}${this.getPartName()}`;
        }
        getQuaColor() {
            if (this.equipVo) {
                let qua = this.equipVo.quality;
                return QualityUtils.getQuaColor(qua);
            }
            return QualityUtils.defaultColor;
        }
        getIcon() {
            return ItemViewFactory.getIcon(this.equipVo);
        }
        get plus() {
            if (this.equipVo) {
                return this.equipVo.plus;
            }
            return 0;
        }
        constructor() {
            super();
        }
    }

    exports.EquipItemVo = EquipItemVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ItemProxy extends BaseCfg {
        GetTabelName() {
            return "t_Item";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ItemProxy();
            }
            return this._ins;
        }
        getCfg(itemId) {
            let _l = this.List;
            for (let i = 0; i < _l.length; i++) {
                let cfg = _l[i];
                if (cfg.f_itemid == itemId) {
                    return cfg;
                }
            }
        }
        getSubTypeList(subType) {
            let itemIdList = [];
            let _l = this.List;
            _l.forEach(cfg => {
                if (cfg.f_sub_type == subType) {
                    itemIdList.push(cfg.f_itemid);
                }
            });
            return itemIdList;
        }
    }

    exports.ItemProxy = ItemProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ESub_type) {
        ESub_type[ESub_type["EquipSwitch"] = 11] = "EquipSwitch";
        ESub_type[ESub_type["RandomGemBox"] = 13] = "RandomGemBox";
        ESub_type[ESub_type["Pet"] = 15] = "Pet";
        ESub_type[ESub_type["ClientEffect"] = 16] = "ClientEffect";
    })(exports.ESub_type || (exports.ESub_type = {}));
    class ItemVo {
        constructor() {
            this._cfgId = 0;
        }
        toString() {
            return `${this.cfgId}-${this.count}`;
        }
        get cntName() {
            return `${this.count}${this.getName()}`;
        }
        get cfg() {
            if (!this._cfg) {
                this._cfg = ItemProxy.Ins.getCfg(this._cfgId);
                if (!this._cfg) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, "t_Item配置不存在id:" + this._cfgId);
                }
            }
            return this._cfg;
        }
        set cfgId(id) {
            this._cfgId = id;
        }
        get cfgId() {
            return this._cfgId;
        }
        getIcon() {
            let _cfg = this.cfg;
            if (!_cfg) {
                return "";
            }
            let icon = IconUtils.convert(_cfg);
            if (icon) {
                return icon;
            }
            if (_cfg.f_icon == "") {
                E.ViewMgr.ShowDebugError(`table t_Item f_itemid:${this._cfgId} 's f_icon is empty!`);
            }
            if (_cfg.f_icon == "") {
                return "";
            }
            return IconUtils.getIcon(_cfg.f_icon);
        }
        getDesc() {
            return main.itemName(this.cfg.f_info);
        }
        getName() {
            return main.itemName(this.cfg.f_name);
        }
        quaIcon() {
            if (!this.cfg) {
                return IconUtils.DefaultEmpty;
            }
            if (this._cfg.f_sub_type == exports.ESub_type.Pet) {
                let petcfg = PetListProxy.Ins.getCfgById(parseInt(this._cfg.f_p1));
                IconUtils.getQuaIcon(petcfg.f_petquality);
            }
            return IconUtils.getQuaIcon(this.cfg.f_qua);
        }
    }

    exports.ItemVo = ItemVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DateFactory {
        static createItemList(l) {
            let _rl = [];
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let item = new ItemVo();
                item.cfgId = cell.id;
                item.count = cell.count;
                _rl.push(item);
            }
            return _rl;
        }
        static createEquip(type, wearable = EWearableType.Not, lv = 1, qua = 1, plus = 1000) {
            let cell = new stEquipItem();
            cell.type = type;
            cell.uid = new uint64(Math.ceil(Math.random() * 1024), 0);
            cell.level = lv;
            cell.quality = qua;
            cell.wearable = wearable;
            cell.plus = plus;
            cell.attrList = [];
            return cell;
        }
        static createEquipItemVo(cell) {
            let vo = new EquipItemVo();
            vo.equipVo = cell;
            return vo;
        }
        static createOwnerEquipVo(cell) {
            let vo = this.createEquipItemVo(cell);
            return vo;
        }
        static createEquipList(_equipItems) {
            let _resList = [];
            for (let i = 0; i < _equipItems.length; i++) {
                let _cellVo = _equipItems[i];
                let _vo = DateFactory.createEquipItemVo(_cellVo);
                _resList.push(_vo);
            }
            return _resList;
        }
        static createCellValue(id, val) {
            let cell = new stCellValue();
            cell.id = id;
            cell.count = val;
            return cell;
        }
        static Copy(vo) {
            let cell = new stEquipItem();
            cell.type = vo.type;
            cell.uid = vo.uid;
            cell.level = vo.level;
            cell.quality = vo.quality;
            cell.wearable = vo.wearable;
            cell.plus = vo.plus;
            cell.attrList = vo.attrList;
            return cell;
        }
    }

    exports.DateFactory = DateFactory;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DataFactoryTest extends DateFactory {
        static createExchangeEquipTest() {
            let data = new ExchangeEquip_revc();
            data.errorID = 0;
            data.equipItemList = [];
            let cell = this.createEquip(EEquipType.Shoulder, EWearableType.Not, Math.floor(100 * Math.random()));
            cell.plus = Math.floor(500 * Math.random());
            cell.attrList.push(this.createAttrVo(10002, Math.floor(200 * Math.random())), this.createAttrVo(10003, Math.floor(45 * Math.random())), this.createAttrVo(10004, Math.floor(7000 * Math.random())));
            data.equipItemList.push(cell);
            return data;
        }
        static createRandomEquip(type, wearable = EWearableType.Not, uid) {
            let item = this.createEquip(type, wearable);
            if (uid) {
                item.uid = uid;
            }
            item.plus = Math.floor(1500 * Math.random());
            let vo = this.createEquipItemVo(item);
            item.attrList.push(this.createAttrVo(10002, Math.floor(2 * Math.random())), this.createAttrVo(10003, Math.floor(10 * Math.random())), this.createAttrVo(10004, Math.floor(30 * Math.random())));
            return vo;
        }
        static createAttrVo(id, val) {
            let attr = new stEquipAttr();
            attr.value = val;
            attr.id = id;
            return attr;
        }
        static createTestValChanel() {
            let data = new ValChanel_revc();
            data.itemList = [];
            data.itemList.push(this.createCellValue(1, Math.floor(100 * Math.random())), this.createCellValue(5, Math.floor(20000 * Math.random())), this.createCellValue(ECellType.EXP, Math.floor(500 * Math.random())));
            return data;
        }
        static createTestInitCellValue() {
            let l = [];
            l.push(this.createCellValue(ECellType.COPPER_MONEY, 100), this.createCellValue(ECellType.BATTLE, 200), this.createCellValue(ECellType.EXP, 20));
            return l;
        }
        static createTestChestData(lv, pos, time) {
            let _data = new ChestInfoUpdate_revc();
            _data.boxlv = lv;
            _data.pos = pos;
            _data.time = time;
            return _data;
        }
    }

    exports.DataFactoryTest = DataFactoryTest;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class MainBaseVo {
	}

	exports.MainBaseVo = MainBaseVo;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class PlayerVoFactory {
        static getEquipVoByType(equipList, type) {
            for (let i = 0; i < equipList.length; i++) {
                let vo = equipList[i];
                if (vo.equipVo && vo.equipVo.type == type && vo.equipVo.wearable == EWearableType.Wearable) {
                    return vo;
                }
            }
        }
        static getVal(moneyInfo, type) {
            if (moneyInfo) {
                let moneyList = moneyInfo;
                for (let i = 0; i < moneyList.length; i++) {
                    let money = moneyList[i];
                    if (money.id == type) {
                        return money.count;
                    }
                }
            }
            return 0;
        }
        static getEquipVal(moneyInfo, type) {
            if (moneyInfo) {
                let moneyList = moneyInfo;
                for (let i = 0; i < moneyList.length; i++) {
                    let money = moneyList[i];
                    if (money.id == type) {
                        return money.value;
                    }
                }
            }
            return 0;
        }
        static initShowAttr() {
            let showAttrType = [];
            let _list = GameconfigProxy.Ins.List;
            for (let i = 0; i < _list.length; i++) {
                let _cfg = _list[i];
                if (_cfg.f_showattr) {
                    showAttrType.push(_cfg.f_id);
                }
            }
            return showAttrType;
        }
        static fillAttrView(l, filter) {
            let showAttrType = MainModel.Ins.showAttrType;
            for (let i = 0; i < l.length; i++) {
                let item = l[i];
                if (item) {
                    let type = showAttrType[i];
                    item.tf1.text = MainModel.Ins.getAttrNameIdByID(type);
                    item.valTf.text = filter.runWith(type);
                    item.valTf.x = item.width - item.valTf.textField.displayWidth;
                    if (item.upimg) {
                        item.upimg.visible = false;
                    }
                }
            }
        }
        static getValString(moneyList, type) {
            if (moneyList) {
                for (let i = 0; i < moneyList.length; i++) {
                    let money = moneyList[i];
                    if (money.id == type) {
                        return attrConvert(money.id, money.count);
                    }
                }
            }
            let cfg = GameconfigProxy.Ins.GetDataById(type);
            if (cfg.f_per == 1) {
                return "0.00%";
            }
            return "0";
        }
        static mergeAttr(arr) {
            if (typeof arr == "string") {
                if (arr.length > 0 && arr.substr(arr.length - 1, 1) == "|") {
                    arr = arr.substr(0, arr.length - 1);
                }
                arr = [arr];
            }
            let _attrMaps = {};
            for (let i = 0; i < arr.length; i++) {
                let s = arr[i];
                if (s.length > 0) {
                    let a = s.split("|");
                    for (let n = 0; n < a.length; n++) {
                        let s1 = a[n].split(":");
                        let id = parseInt(s1[0]);
                        let val = parseInt(s1[1]);
                        if (!_attrMaps[id]) {
                            _attrMaps[id] = 0;
                        }
                        _attrMaps[id] += val;
                    }
                }
            }
            let str = "";
            for (let n in _attrMaps) {
                str += n + ":" + _attrMaps[n] + "|";
                delete _attrMaps[n];
            }
            if (str.length > 0) {
                str = str.substr(0, str.length - 1);
            }
            if (str.length > 0) {
                return str.split("|");
            }
            return [];
        }
        static mergeAttrSt(arr) {
            let result = [];
            let _attrMaps = {};
            for (let i = 0; i < arr.length; i++) {
                let cell = arr[i];
                let id = cell.id;
                let val = cell.value;
                if (!_attrMaps[id]) {
                    _attrMaps[id] = 0;
                }
                _attrMaps[id] += val;
            }
            for (let n in _attrMaps) {
                let cell = new stEquipAttr();
                cell.id = parseInt(n);
                cell.value = _attrMaps[n];
                result.push(cell);
            }
            return result;
        }
    }
    class PlayerVoCtl {
        get plus() {
            return PlayerVoFactory.getVal(this.moneyInfo, ECellType.BATTLE);
        }
    }

    exports.PlayerVoCtl = PlayerVoCtl;
    exports.PlayerVoFactory = PlayerVoFactory;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function attrConvert(id, count) {
        let proxy = GameconfigProxy.Ins;
        let cfg = proxy.GetDataById(id);
        if (cfg) {
            if (cfg.f_per == 1) {
                return (count / 100).toFixed(2) + "%";
            }
            return count.toString();
        }
        return count.toString();
    }
    class MainRoleVo extends MainBaseVo {
        get headUrl() {
            return MainModel.Ins.convertHead(this.mPlayer.HeadUrl);
        }
        getChestCDTime() {
            if (this.mBaseInfo) {
                return this.mBaseInfo.boxCdTime;
            }
            return 0;
        }
        getVal(type) {
            return PlayerVoFactory.getVal(this.moneyInfo, type);
        }
        get plus() {
            return this.getVal(ECellType.BATTLE);
        }
        get boxCnt() {
            return this.getVal(ECellType.BOX);
        }
        get copper() {
            return this.getVal(ECellType.COPPER_MONEY);
        }
        get gold() {
            return this.getVal(ECellType.GOLD);
        }
        get inviteCount() {
            return this.getVal(ECellType.HeroInvite) + this.getVal(ECellType.HighHeroInvite);
        }
        get lv() {
            return MainModel.Ins.lv;
        }
        get moneyInfo() {
            return this.mBaseInfo && this.mBaseInfo.moneyInfo;
        }
        setAttr(type, val) {
            let mBaseInfo = this.mBaseInfo;
            if (mBaseInfo) {
                let moneyList = mBaseInfo.moneyInfo;
                if (moneyList) {
                    let b = false;
                    for (let i = 0; i < moneyList.length; i++) {
                        let _cell = moneyList[i];
                        if (_cell.id == type) {
                            _cell.count = val;
                            b = true;
                            break;
                        }
                    }
                    if (!b) {
                        let cellVo = new stCellValue();
                        cellVo.id = type;
                        cellVo.count = val;
                        moneyList.push(cellVo);
                    }
                }
            }
        }
        getBattleValue() {
            return this.getVal(ECellType.BATTLE);
        }
        getName() {
            if (this.mPlayer) {
                return StringUtil.convertName(this.mPlayer.NickName);
            }
            return "";
        }
        getChestData() {
            if (!this.chestData) {
                return DataFactoryTest.createTestChestData(1, 41, 0);
            }
            return this.chestData;
        }
        get boxlv() {
            return this.getChestData().boxlv;
        }
        setChestData(v) {
            this.chestData = v;
        }
        getItemVoListBySubtype(subType) {
            let l = [];
            let itemIdList = ItemProxy.Ins.getSubTypeList(subType);
            for (let i = 0; i < itemIdList.length; i++) {
                let id = itemIdList[i];
                let count = this.getVal(id);
                if (count > 0) {
                    let itemVo = new ItemVo();
                    itemVo.cfgId = id;
                    itemVo.count = count;
                    l.push(itemVo);
                }
            }
            return l;
        }
    }

    exports.MainRoleVo = MainRoleVo;
    exports.attrConvert = attrConvert;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class SoulEvent {
	}
	SoulEvent.UpdateData = "UpdateData";

	exports.SoulEvent = SoulEvent;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class SoulSelUpgradeVo {
        computeExp() {
            let cell = this.data.vo;
            let f_SpiritUpgradeLost = t_Spirit_Config.Ins.GetDataById(1).f_SpiritUpgradeLost;
            let f_SpiritExp = t_Spirit_ExpCost.Ins.getByQua(cell.qualityId).f_SpiritExp;
            return Math.floor(this.data.totalExp * (f_SpiritUpgradeLost / 100) + f_SpiritExp);
        }
    }
    class SoulUpgradeItem extends ui.views.soul.ui_soul_iconUI {
        constructor() {
            super();
            this.ctl = new SoulIconItemCtl(this);
            this.ctl.clickHandler = new Laya.Handler(this, this.onClickHandler);
        }
        onClickHandler() {
            let view = E.ViewMgr.Get(EViewType.SoulUpgrade);
            if (view.canSwallow(this.curData)) {
                view.selectSoulItem(this.curData.data.vo.uid);
            }
        }
        refreshView() {
            this.curData = this.dataSource;
            this.vo = this.curData.data;
            this.ctl.updateCell(this.vo.vo);
            this.jiao.visible = this.curData.sel;
        }
    }

    exports.SoulSelUpgradeVo = SoulSelUpgradeVo;
    exports.SoulUpgradeItem = SoulUpgradeItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SoulRandomVo {
    }
    class SoulAttrCtl {
        constructor(con) {
            this.mLeft = false;
            this.attrList = [];
            for (let i = 0; i < con.numChildren; i++) {
                this.attrList.push(con.getChildAt(i));
            }
        }
        setRandomVis(cell, vis) {
            if (cell.randomTf) {
                cell.randomTf.visible = vis;
            }
        }
        set attr(l) {
            for (let i = 0; i < this.attrList.length; i++) {
                let cell = this.attrList[i];
                let v = l[i];
                this.setRandomVis(cell, false);
                if (v) {
                    cell.visible = true;
                    if (v instanceof stEquipAttr) {
                        cell.attrtf.text = MainModel.Ins.getAttrNameIdByID(v.id);
                        cell.valtf.text = attrConvert(v.id, v.value);
                        if (this.view) {
                            if (this.view.curLv == this.view.newLv) {
                                cell.valtf.right = 0;
                                cell.addtf.text = "";
                            }
                            else {
                                if (this.mLeft) {
                                    cell.addtf.text = "   (+" + this.view.attrAddMap[v.id] + ")";
                                }
                                else {
                                    cell.addtf.text = "";
                                }
                                cell.valtf.right = cell.addtf.textField.width;
                            }
                        }
                    }
                    else if (v instanceof SoulRandomVo) {
                        cell.attrtf.text = "";
                        cell.valtf.text = "";
                        cell.addtf.text = "";
                        this.setRandomVis(cell, true);
                    }
                }
                else {
                    cell.visible = false;
                }
            }
        }
    }
    class SoulUpgradeView extends ViewBase {
        constructor() {
            super(...arguments);
            this.attrAddMap = {};
            this.maxVal = 0;
            this.quaMaxId = 3;
            this.dataList = [];
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
            SoulModel.Ins.off(SoulEvent.UpdateData, this, this.refreshView);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.soul.ui_soul_qianghuaUI();
                this.bindClose(this._ui.close1);
                this._ui.list2.itemRender = SoulUpgradeItem;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onItemHandler);
                ButtonCtl.CreateBtn(this._ui.okbtn, this, this.onQianHua);
                ButtonCtl.CreateBtn(this._ui.yijianzhuanbei, this, this.yijianHandler);
                this._plusCtl = FontCtlFactory.createPlus();
                this._plusCtl2 = FontCtlFactory.createPlus();
                let checkCtl = new CheckBox2Ctl(this._ui.checkbox01, E.getLang("soul2"));
                checkCtl.selectHander = new Laya.Handler(this, this.onSelectHandler);
                this.checkCtl = checkCtl;
                this.iconCtl = new SoulIconItemCtl(this._ui.item);
                this.iconCtl.levelTfVisible = false;
                this.progressCtl = new ProgressCtl({ bg: this._ui.progressBg });
                this.leftCtl = new SoulAttrCtl(this._ui.left1);
                this.leftCtl.view = this;
                this.leftCtl.mLeft = true;
                this.rightCtl = new SoulAttrCtl(this._ui.right1);
                this.rightCtl.view = this;
                this._ui.tf5.text = E.getLang("soul6");
            }
        }
        canSwallow(curData) {
            let afterExp = 0;
            if (!curData.sel) {
                let maxVal = this.maxVal;
                if (afterExp >= maxVal) {
                    return;
                }
                else {
                    let allexp = this.computeExp() + this.curVo.exp;
                    let cellExpVal = curData.computeExp();
                    afterExp = cellExpVal + allexp;
                    if (allexp < maxVal) ;
                    else {
                        if (afterExp >= maxVal) {
                            return;
                        }
                    }
                }
            }
            return true;
        }
        onSelectHandler() {
        }
        onItemHandler(item) {
            item.refreshView();
        }
        onQianHua() {
            let _upgradeList = [];
            for (let i = 0; i < this.dataList.length; i++) {
                let cell = this.dataList[i];
                if (cell.sel) {
                    _upgradeList.push(cell.data.vo.uid);
                }
            }
            this.intensify(_upgradeList);
        }
        computeExp() {
            let maxVal = this.maxVal;
            let curVal = 0;
            for (let i = 0; i < this.dataList.length; i++) {
                let cell = this.dataList[i];
                if (cell.sel) {
                    curVal += cell.computeExp();
                }
            }
            LogSys$1.Log("maxExp:" + maxVal + " exp:" + curVal);
            return curVal;
        }
        intensify(_upgradeList) {
            let _vo = SoulModel.Ins.getByUid(this.uid);
            if (SoulModel.Ins.isLvFull(_vo)) {
                E.ViewMgr.ShowMidError(E.getLang("soul5"));
                return;
            }
            if (_upgradeList.length > 0) {
                let req = new SpiritUpgrade_req();
                req.datalist = _upgradeList;
                req.uid = this.uid;
                SocketMgr.Ins.SendMessageBin(req);
            }
            if (_upgradeList.length == 0) {
                E.ViewMgr.ShowMidError(E.getLang("soul4"));
            }
        }
        selectSoulItem(uid) {
            for (let i = 0; i < this.dataList.length; i++) {
                let cell = this.dataList[i];
                if (cell.data.vo.uid == uid) {
                    cell.sel = !cell.sel;
                }
            }
            this.updateList();
        }
        updateList() {
            this._ui.list2.refresh();
            this.computeExp();
            let _vo = this.curVo;
            LogSys$1.Log(">>lv:" + t_Spirit_ExpUpgrade.Ins.getLvByExp(_vo.qualityId, _vo.exp) + ",exp:" + _vo.exp);
            this.updateViewList();
        }
        yijianHandler() {
            let quaCfg = t_Spirit_Quality.Ins.GetDataById(this.quaMaxId);
            for (let i = 0; i < this.dataList.length; i++) {
                let cell = this.dataList[i];
                cell.sel = false;
            }
            for (let i = 0; i < this.dataList.length; i++) {
                let cell = this.dataList[i];
                let _canPush = false;
                if (this.checkCtl.selected) {
                    if (cell.data.vo.qualityId < quaCfg.f_QualityID) {
                        _canPush = true;
                    }
                }
                else {
                    _canPush = true;
                }
                if (_canPush && this.canSwallow(cell)) {
                    cell.sel = true;
                }
            }
            this.updateList();
        }
        updateViewList() {
            let cell = SoulModel.Ins.getSoulByUid(this.uid);
            let _vo = cell.vo;
            let _addExp = this.computeExp();
            let _nowExp = _addExp + _vo.exp;
            let lv = t_Spirit_ExpUpgrade.Ins.getLvByExp(_vo.qualityId, _nowExp);
            this.newLv = lv;
            this.curLv = t_Spirit_ExpUpgrade.Ins.getLvByExp(_vo.qualityId, _vo.exp);
            if (this.newLv > this.curLv) {
                this._ui.bg11.visible = true;
                this._ui.addTf.text = "Lv." + this.newLv;
                this._ui.img5.visible = true;
                this._ui.img4.visible = true;
            }
            else {
                this._ui.bg11.visible = false;
                this._ui.addTf.text = "";
                this._ui.img5.visible = false;
                this._ui.img4.visible = false;
            }
            this.curVo = _vo;
            this.attrAddMap = cell.getOffsetVal(this.newLv);
            let maxVal = t_Spirit_ExpUpgrade.Ins.getMaxByQua(_vo.qualityId);
            this.maxVal = maxVal;
            this.iconCtl.updateCell(_vo);
            this._ui.lvtf.text = "Lv." + this.curLv;
            let cfg = (t_Spirit_Attribute_Fixed.Ins.getCfgBySpiritID(_vo.spiritId));
            this._ui.namftf.text = cfg.f_SpiritName;
            if (_nowExp >= maxVal) {
                this._ui.progressTf.text = E.getLang("FullLv");
                this.progressCtl.value = 1;
            }
            else {
                let maxVal = t_Spirit_ExpUpgrade.Ins.getMaxExp(lv, _vo.qualityId);
                this._ui.progressTf.text = `${_nowExp}/${maxVal}`;
                this.progressCtl.value = _nowExp / maxVal;
            }
            let attrList = SoulModel.Ins.getSoulByUid(_vo.uid).baseAttr;
            let count = t_Spirit_Config.Ins.getRandomCount(this.newLv);
            let textList = [];
            if (_vo.exp >= maxVal) ;
            else {
                if (this.curLv >= 9) ;
                else {
                    for (let i = _vo.attrList.length; i < count; i++) {
                        if (textList.length < 3) {
                            textList.push(new SoulRandomVo());
                        }
                    }
                }
            }
            let newList = [];
            newList = newList.concat(_vo.attrList);
            newList = newList.concat(textList);
            this.rightCtl.attr = newList;
            this.leftCtl.attr = attrList;
            let plusVal = t_Power_level.Ins.calculatePlus(attrList);
            this._plusCtl.setValue(this._ui.plusCon1, StringUtil.val2Atlas(plusVal));
            let plusVal2 = this.newPlus(attrList);
            this._plusCtl2.setValue(this._ui.plusCon2, StringUtil.val2Atlas(plusVal2));
        }
        newPlus(attrList) {
            let l = [];
            for (let i = 0; i < attrList.length; i++) {
                let o = attrList[i];
                let curVal = this.attrAddMap[o.id];
                if (curVal) {
                    let cell = new stEquipAttr();
                    cell.id = o.id;
                    cell.value = o.value + curVal;
                    l.push(cell);
                }
            }
            let plus = t_Power_level.Ins.calculatePlus(l);
            return plus;
        }
        refreshView() {
            let l = SoulModel.Ins.getNotExcludeWearList(this.uid);
            let result = [];
            for (let i = 0; i < l.length; i++) {
                let cell = new SoulSelUpgradeVo();
                cell.data = l[i];
                cell.sel = false;
                result.push(cell);
            }
            this.dataList = result;
            this._ui.list2.array = result;
            this._ui.list2.scrollTo(0);
            this.updateViewList();
        }
        onInit() {
            this.maxVal = 0;
            this.uid = this.Data;
            SoulModel.Ins.on(SoulEvent.UpdateData, this, this.refreshView);
            this.refreshView();
        }
    }

    exports.SoulAttrCtl = SoulAttrCtl;
    exports.SoulUpgradeView = SoulUpgradeView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SoulTipsCtl {
        constructor(skin, type) {
            this.type = type;
            this._ui = skin;
            this._attr2 = this._ui.cellAttr2;
            this._attr4 = this._ui.cellAttr4;
            this._plusCtl = FontCtlFactory.createPlus();
            this.equipBtnCtl = ButtonCtl.CreateBtn(this._ui.equipBtn, this, this.equipBtnHandler);
            this.qianhuaBtnCtl = ButtonCtl.CreateBtn(this._ui.qianhuaBtn, this, this.qianhuanHandler);
            this.unloadBtnCtl = ButtonCtl.CreateBtn(this._ui.uploadBtn, this, this.unloadHandler);
            this.switchBtnCtl = ButtonCtl.CreateBtn(this._ui.switchBtn, this, this.onSwitchHandler);
            this.topCtl = new SoulTopItemCtl(this._ui.item);
            this.normalCtl = new SoulAttrCtl(this._ui.attr0);
            this.randomCtl = new SoulAttrCtl(this._ui.attr1);
        }
        Close() {
            E.ViewMgr.Close(this.type);
        }
        onSwitchHandler() {
            this.equipBtnHandler();
        }
        equipBtnHandler() {
            this.cell.equip();
            this.Close();
        }
        qianhuanHandler() {
            this.cell.intensify();
            this.Close();
        }
        unloadHandler() {
            this.cell.unload();
            this.Close();
        }
        refreshView(_cell) {
            this.cell = _cell;
            this.equipBtnCtl.visible = false;
            this.switchBtnCtl.visible = false;
            this.unloadBtnCtl.visible = false;
            this.qianhuaBtnCtl.visible = false;
            this._ui.curTxt.visible = false;
            let type = _cell.type;
            for (let i = 0; i < type.length; i++) {
                let _type = type[i];
                switch (_type) {
                    case ESoulFunc.Equip:
                        this.equipBtnCtl.visible = true;
                        break;
                    case ESoulFunc.Unload:
                        this.unloadBtnCtl.visible = true;
                        break;
                    case ESoulFunc.Swicth:
                        this.switchBtnCtl.visible = true;
                        break;
                    case ESoulFunc.Intensify:
                        this.qianhuaBtnCtl.visible = true;
                        break;
                }
            }
            if (type.length > 0) {
                this._ui.close1.visible = true;
            }
            else {
                this._ui.curTxt.visible = true;
                this._ui.close1.visible = false;
            }
            let cfg = (t_Spirit_Attribute_Fixed.Ins.getCfgBySpiritID(_cell.vo.spiritId));
            this._ui.nameTf.text = cfg.f_SpiritName;
            let cfgQua = t_Spirit_Quality.Ins.getCfgByQua(cfg.f_SpiritQuality);
            this._ui.nameTf.color = "#" + cfgQua.f_SpiritColor;
            this.randomCtl.attr = _cell.vo.attrList;
            let baseAttr = SoulModel.Ins.getSoulByUid(_cell.vo.uid).baseAttr;
            this.normalCtl.attr = baseAttr;
            let plusVal = t_Power_level.Ins.calculatePlus(baseAttr);
            this._plusCtl.setValue(this._ui.plusCon, StringUtil.val2Atlas(plusVal));
            this.topCtl.updateView(_cell.vo);
            let posCfg = t_Spirit_Position.Ins.getByPos(_cell.vo.pos);
            this._ui.tf1.text = posCfg.f_PositionName;
            let bondCfg = t_Spirit_Attribute_Bond.Ins.getBySpiritID(_cell.vo.spiritId);
            SoulModel.Ins.updateAttr(this._attr2, bondCfg.f_TwoPiece);
            SoulModel.Ins.updateAttr(this._attr4, bondCfg.f_FourPiece);
            if (_cell.enableHold) {
                let unlockCount = SoulModel.Ins.getUnlockCountBySpiritId(_cell.vo.spiritId);
                this._ui.kong2.visible = unlockCount >= 2;
                this._ui.kong4.visible = unlockCount >= 4;
            }
            else {
                this._ui.kong2.visible = false;
                this._ui.kong4.visible = false;
            }
        }
    }

    exports.SoulTipsCtl = SoulTipsCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SoulCompareVo {
    }
    class SoulCompareTipsView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.soul.ui_soulcompare_viewUI();
                this.leftCtl = new SoulTipsCtl(this._ui.leftitem, this.ViewType);
                this.rightCtl = new SoulTipsCtl(this._ui.rightitem, this.ViewType);
                this.bindClose(this._ui.rightitem.close1);
            }
        }
        onInit() {
            let cell = this.Data;
            this.leftCtl.refreshView(cell.leftVo);
            this.rightCtl.refreshView(cell.rightVo);
        }
    }

    exports.SoulCompareTipsView = SoulCompareTipsView;
    exports.SoulCompareVo = SoulCompareVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function f_headViewUpdate(skin, id) {
        skin.icon.skin = id == 0 ? "" : `o/equip/hero_${id}.png`;
        if (!skin.icon.mask) {
            let spr = new Laya.Sprite();
            spr.graphics.drawCircle(64, 62, 46, "#ff0000");
            skin.icon.mask = spr;
        }
    }
    class SoulIconItem extends ui.views.soul.ui_soul_iconUI {
        constructor() {
            super();
            this.ctl = new SoulIconItemCtl(this);
            this.ctl.clickHandler = new Laya.Handler(this, this.onClickHandler);
        }
        refreshView(index) {
            let _cell = this.dataSource;
            this._cell = _cell;
            if (_cell.isEmpty) {
                f_headViewUpdate(this.headPortrait, 0);
                this.lvTf.text = "";
                this.bgicon.visible = false;
            }
            else {
                this.ctl.updateCell(this._cell.vo);
            }
        }
        onClickHandler() {
            if (this._cell.isEmpty) {
                return;
            }
            let wearVo = SoulModel.Ins.getWear(this._cell.vo.pos);
            if (wearVo) {
                let cell = new SoulCompareVo();
                cell.leftVo = new SoulTipVo();
                cell.leftVo.type = [];
                cell.leftVo.vo = wearVo;
                cell.rightVo = new SoulTipVo();
                cell.rightVo.enableHold = false;
                cell.rightVo.type.push(ESoulFunc.Swicth, ESoulFunc.Intensify);
                cell.rightVo.vo = this._cell.vo;
                E.ViewMgr.Open(EViewType.SoulCompareTip, null, cell);
            }
            else {
                let cell = new SoulTipVo();
                cell.type.push(ESoulFunc.Equip, ESoulFunc.Intensify);
                cell.vo = this._cell.vo;
                E.ViewMgr.Open(EViewType.SoulTips, null, cell);
            }
        }
    }
    class SoulIconItemCtl {
        constructor(skin) {
            this.skin = skin;
            this.skin.jiao.visible = false;
            this.skin.maskArea.visible = false;
            this.skin.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            if (this.clickHandler) {
                this.clickHandler.run();
            }
        }
        updateCell(vo) {
            this.vo = vo;
            f_headViewUpdate(this.skin.headPortrait, t_Spirit_Attribute_Fixed.Ins.getCfgBySpiritID(this.vo.spiritId).f_SpiritIconID);
            if (this.skin.lvTf.visible) {
                if (this.vo.level > 0) {
                    this.skin.lvTf.text = "+" + this.vo.level.toString();
                }
                else {
                    this.skin.lvTf.text = "";
                }
            }
            this.skin.bgicon.visible = true;
            this.skin.bgicon.skin = SoulModel.Ins.getIcon(vo.qualityId);
            this.skin.bgicon.rotation = SoulModel.Ins.getRot(vo.pos);
        }
        set levelTfVisible(v) {
            this.skin.lvTf.visible = v;
        }
    }

    exports.SoulIconItem = SoulIconItem;
    exports.SoulIconItemCtl = SoulIconItemCtl;
    exports.f_headViewUpdate = f_headViewUpdate;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ERewardShowVoType) {
        ERewardShowVoType[ERewardShowVoType["Item"] = 0] = "Item";
        ERewardShowVoType[ERewardShowVoType["Euqip"] = 1] = "Euqip";
        ERewardShowVoType[ERewardShowVoType["FuYuan"] = 2] = "FuYuan";
        ERewardShowVoType[ERewardShowVoType["Soul"] = 3] = "Soul";
        ERewardShowVoType[ERewardShowVoType["HeroStyle"] = 4] = "HeroStyle";
        ERewardShowVoType[ERewardShowVoType["UseItem"] = 5] = "UseItem";
    })(exports.ERewardShowVoType || (exports.ERewardShowVoType = {}));
    class RewardShowVo {
    }
    class RewardItemGetViewCtl {
        static slotClick(cell, skin) {
            switch (cell.type) {
                case exports.ERewardShowVoType.Item:
                case exports.ERewardShowVoType.UseItem:
                    let _vo = DateFactory.createItemList([cell.data])[0];
                    MainModel.Ins.showSmallTips(_vo.getName(), _vo.getDesc(), skin);
                    break;
                case exports.ERewardShowVoType.Euqip:
                    let _evo = cell.data;
                    let _cVo = DateFactory.createEquipItemVo(_evo);
                    E.ViewMgr.Open(EViewType.EquipTips, null, _cVo);
                    break;
                case exports.ERewardShowVoType.FuYuan:
                    let cfg = ItemProxy.Ins.getCfg(cell.data.itemId);
                    MainModel.Ins.showSmallTips(main.itemName(cfg.f_name), main.itemName(cfg.f_info), skin);
                    break;
                case exports.ERewardShowVoType.HeroStyle:
                    break;
            }
        }
        static onSlotClickHandler(cell, skin, e) {
            e.stopPropagation();
            this.slotClick(cell, skin);
        }
        static refresh(skin, cell, flag) {
            skin.on(Laya.Event.CLICK, this, this.onSlotClickHandler, [cell, skin]);
            if (skin.bigicon) {
                skin.bigicon.skin = "";
            }
            skin.quality.skin = "";
            skin.icon.skin = "";
            if (skin.soulIcon) {
                skin.soulIcon.visible = false;
            }
            skin.tf1.text = "";
            if (skin.centerTf) {
                skin.centerTf.text = "";
            }
            if (skin.lab_name) {
                skin.lab_name.text = "";
                skin.lab_name.visible = flag;
            }
            switch (cell.type) {
                case exports.ERewardShowVoType.Item:
                case exports.ERewardShowVoType.UseItem:
                    let vo = DateFactory.createItemList([cell.data])[0];
                    skin.icon.skin = vo.getIcon();
                    skin.tf1.text = vo.count.toString();
                    skin.quality.skin = vo.quaIcon();
                    if (flag && skin.lab_name)
                        skin.lab_name.text = vo.getName();
                    break;
                case exports.ERewardShowVoType.Euqip:
                    let _evo = cell.data;
                    let _cVo = DateFactory.createEquipItemVo(_evo);
                    skin.tf1.text = IconUtils.str2Lv(_cVo.equipVo.level);
                    skin.quality.skin = _cVo.getQualityIcon();
                    skin.icon.skin = _cVo.getIcon();
                    if (flag && skin.lab_name)
                        skin.lab_name.text = _cVo.getName();
                    break;
                case exports.ERewardShowVoType.FuYuan:
                    let cfg = HuYouIconProxy.Ins.getCfgByIdAndAttr(cell.data.itemId, cell.data.data.attrList[0].id);
                    skin.icon.skin = `o/bless/${cfg.f_icon}`;
                    skin.tf1.text = "1";
                    skin.quality.skin = `remote/common/base/jiangli.png`;
                    break;
                case exports.ERewardShowVoType.Soul:
                    let _cell = cell.data;
                    skin.bigicon.skin = SoulModel.Ins.getIcon(_cell.qualityId);
                    skin.bigicon.rotation = SoulModel.Ins.getRot(_cell.pos);
                    skin.quality.skin = "";
                    skin.centerTf.text = "+" + _cell.level;
                    skin.soulIcon.visible = true;
                    let sCfg = t_Spirit_Attribute_Fixed.Ins.getCfgBySpiritID(_cell.spiritId);
                    f_headViewUpdate(skin.soulIcon, sCfg.f_SpiritIconID);
                    if (flag && skin.lab_name)
                        skin.lab_name.text = sCfg.f_SpiritName;
                    break;
                case exports.ERewardShowVoType.HeroStyle:
                    let _data = cell.data;
                    let part = _data.part;
                    let style = _data.style;
                    let qua = _data.qua || 0;
                    skin.icon.skin = ItemViewFactory.getEquipIcon(part, style);
                    skin.tf1.text = "";
                    let quaSkin = IconUtils.getQuaIcon(qua);
                    skin.quality.skin = quaSkin;
                    break;
                default:
                    LogSys.Error("not find..." + cell.type);
                    break;
            }
        }
    }
    class RewardItemGetView extends ui.views.main.ui_slot_item_rewardUI {
        constructor() {
            super();
        }
        refreshView(flag = true) {
            RewardItemGetViewCtl.refresh(this, this.dataSource, flag);
        }
    }
    class RewardCtl {
        constructor(list1) {
            this.list1 = list1;
            this.oldHeight = list1.height;
            this.list1.itemRender = RewardItemGetView;
            this.list1.renderHandler = new Laya.Handler(this, this.onItemHandler);
        }
        get cellW() {
            if (!this._cellW) {
                let skin = new RewardItemGetView();
                this._cellW = skin.width;
                skin.destroy();
            }
            return this._cellW;
        }
        onItemHandler(item) {
            item.refreshView();
        }
        setData(_datalist, maxCount) {
            this.list1.array = _datalist;
            let sp = this.list1.spaceX;
            let _rowCount = maxCount;
            let w = this.cellW;
            let oneW = w + sp;
            let len = _datalist.length;
            if (len <= _rowCount) {
                this.list1.width = len * oneW - sp;
                this.list1.height = w + w / 2;
            }
            else if (len > _rowCount && len <= _rowCount * 2) {
                this.list1.width = oneW * _rowCount - sp;
                this.list1.height = (w + this.list1.spaceX) * 2 - this.list1.spaceY + w / 2;
            }
            else {
                this.list1.width = oneW * _rowCount - sp;
                this.list1.height = this.oldHeight;
            }
            this.list1.scrollTo(0);
        }
    }
    class RewardFactory {
        static createBy_Reward_revc(_curData) {
            let _datalist = [];
            for (let i = 0; i < _curData.rewardList.length; i++) {
                let _vo = new RewardShowVo();
                _vo.data = _curData.rewardList[i];
                _vo.type = exports.ERewardShowVoType.Item;
                _datalist.push(_vo);
            }
            for (let i = 0; i < _curData.equipList.length; i++) {
                let _vo = new RewardShowVo();
                _vo.data = _curData.equipList[i];
                _vo.type = exports.ERewardShowVoType.Euqip;
                _datalist.push(_vo);
            }
            for (let i = 0; i < _curData.partList.length; i++) {
                let _vo = new RewardShowVo();
                _vo.data = _curData.partList[i];
                _vo.type = exports.ERewardShowVoType.HeroStyle;
                _datalist.push(_vo);
            }
            return _datalist;
        }
        static createBy_newPlayerCfg(cfg) {
            let _datalist = [];
            let items = ItemViewFactory.convertCellList(cfg.f_Item);
            for (let i = 0; i < items.length; i++) {
                let _vo = new RewardShowVo();
                _vo.data = items[i];
                _vo.type = exports.ERewardShowVoType.Item;
                _datalist.push(_vo);
            }
            let l = [];
            l.push(Equipment_DIY_Proxy.Ins.createByFid(cfg.f_EquipmentDIY));
            for (let i = 0; i < l.length; i++) {
                let _vo = new RewardShowVo();
                _vo.data = l[i];
                _vo.type = exports.ERewardShowVoType.Euqip;
                _datalist.push(_vo);
            }
            return _datalist;
        }
    }

    exports.RewardCtl = RewardCtl;
    exports.RewardFactory = RewardFactory;
    exports.RewardItemGetView = RewardItemGetView;
    exports.RewardItemGetViewCtl = RewardItemGetViewCtl;
    exports.RewardShowVo = RewardShowVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TriangleHideCtl {
        constructor() {
            this.oneRow = 1;
            this.hScrollBar = false;
        }
        bind(_list, img, hScrollBar = false) {
            this._list = _list;
            this._img = img;
            this.hScrollBar = hScrollBar;
            _list.scrollBar.elasticBackTime = 0;
            _list.elasticEnabled = false;
            _list.scrollBar.on(Laya.Event.CHANGE, this, this.onChangeEvt);
        }
        dispose() {
            this._list.scrollBar.off(Laya.Event.CHANGE, this, this.onChangeEvt);
        }
        onChangeEvt() {
            let gap = 0;
            if (this._list.array) {
                let cVal;
                if (this.hScrollBar) {
                    cVal = this._list.width;
                    gap = this._list.spaceX;
                }
                else {
                    cVal = this._list.height;
                    gap = this._list.spaceY;
                }
                let h = this.cellSize * Math.ceil(this._list.array.length / this.oneRow) - gap;
                if (h - this._list.scrollBar.value <= cVal) {
                    this._img.visible = false;
                }
                else {
                    this._img.visible = true;
                }
            }
            else {
                this._img.visible = false;
            }
        }
        get cellSize() {
            return this._list['_cellSize'] || 0;
        }
    }

    exports.TriangleHideCtl = TriangleHideCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RewardGetData {
    }
    class RewardUseItem {
    }
    class RewardGetView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.rowCount = 5;
            this.PageType = EPageType.None;
            this.cacheList = [];
        }
        onExit() {
            this._timeCtl.stop();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_reward_getUI();
                this._ui.diban.on(Laya.Event.CLICK, this, this.onSkipHandler);
                this._rewardCtl = new RewardCtl(this._ui.list1);
                let tri = new TriangleHideCtl();
                tri.oneRow = this.rowCount;
                tri.bind(this._ui.list1, this._ui.sanjiao);
                this.tri = tri;
                this._timeCtl = new TimeCtlV2(this._ui.timetf1, "{0}秒后自动关闭");
                this._timeCtl.style = ETimeShowStyle.Second;
                this.useBtnCtl = ButtonCtl.CreateBtn(this._ui.useBtn, this, this.onUseHandler);
                this.useBtnCtl.visible = false;
                this._ui.skinTf.visible = false;
            }
        }
        onUseHandler() {
            this.onSkipHandler();
        }
        onSkipHandler() {
            if (this._curData instanceof RewardUseItem) {
                let req = new UseItem_req();
                req.itemlist = this._curData.itemList;
                req.type = 0;
                SocketMgr.Ins.SendMessageBin(req);
            }
            if (this.cacheList.length > 0) {
                let o = this.cacheList.shift();
                this.setData(o);
            }
            else {
                this.Close();
            }
        }
        SetCenter() {
            super.SetCenter();
            let pos = this._ui.parent.localToGlobal(new Laya.Point(this._ui.x, this._ui.y));
            this._ui.hitArea = new Laya.Rectangle(-pos.x + this._ui.width / 2, -pos.y + this._ui.height / 2, Laya.stage.width, Laya.stage.height);
            this._ui.diban.hitArea = this._ui.hitArea;
            this._ui.bg1.height = Laya.stage.height;
            DebugUtil.draw(this._ui.diban, "#00ff00");
            DebugUtil.draw(this._ui, "#ff0000", Laya.stage.width + this._ui.width / 2, Laya.stage.height + this._ui.height / 2, -pos.x, -pos.y);
        }
        onAddLoadRes() {
            this.addAtlas("main/getreward.atlas");
        }
        startTicket() {
            this._timeCtl.once(Laya.Event.COMPLETE, this, this.onSkipHandler);
            this._timeCtl.start(5);
        }
        setData(_data) {
            let _curData = _data;
            this.useBtnCtl.visible = false;
            this._ui.skinTf.visible = false;
            if (!_curData) {
                return;
            }
            this._curData = _curData;
            this._timeCtl.stop();
            let _datalist;
            if (_curData instanceof Reward_revc) {
                this._ui.skinTf.visible = true;
                _datalist = RewardFactory.createBy_Reward_revc(_curData);
                let _cellReward = _curData;
                if (_cellReward.type == ERewardType.Ticket) {
                    this.startTicket();
                }
            }
            else if (_curData instanceof BlessingMaxLevelRewards_revc) {
                this._ui.skinTf.visible = true;
                _datalist = [];
                for (let i = 0; i < _curData.rewards.length; i++) {
                    let _vo = new RewardShowVo();
                    _vo.data = { data: _curData.rewards[i], itemId: _curData.id, level: _curData.level };
                    _vo.type = ERewardShowVoType.FuYuan;
                    _datalist.push(_vo);
                }
            }
            else if (_curData instanceof RewardGetData) {
                _datalist = [];
                let type = _curData.type;
                let l = _curData.dataList;
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    let _vo = new RewardShowVo();
                    _vo.data = cell;
                    _vo.type = type;
                    _datalist.push(_vo);
                }
            }
            else if (_curData instanceof RewardUseItem) {
                _datalist = [];
                let l = _curData.itemList;
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    let _vo = new RewardShowVo();
                    _vo.data = cell;
                    _vo.type = ERewardShowVoType.UseItem;
                    _datalist.push(_vo);
                }
                this.useBtnCtl.visible = true;
            }
            this._rewardCtl.setData(_datalist, this.rowCount);
            this.tri.onChangeEvt();
        }
        onInit() {
            this.setData(this.Data);
        }
    }

    exports.RewardGetData = RewardGetData;
    exports.RewardGetView = RewardGetView;
    exports.RewardUseItem = RewardUseItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TabControl {
        constructor() {
            this._selectIndex = -1;
        }
        f_defaultItemHandler(curSkin, index, sel) {
            let skin = curSkin;
            skin.tf.text = this.dataArr[index];
            if (sel) {
                skin.img.skin = "remote/main/main/anniu_2.png";
            }
            else {
                skin.img.skin = "remote/main/main/anniu_1.png";
            }
        }
        static Create(target, selHandler, itemHandler) {
            let _tab = new TabControl();
            _tab.selHandler = new Laya.Handler(target, selHandler);
            _tab.itemHandler = new Laya.Handler(target, itemHandler);
            return _tab;
        }
        set visible(v) {
            for (let i = 0; i < this.items.length; i++) {
                this.items[i].visible = v;
            }
        }
        init(items, selHandler, itemHandler) {
            this.items = items;
            if (itemHandler) {
                this.itemHandler = itemHandler;
            }
            else {
                this.itemHandler = new Laya.Handler(this, this.f_defaultItemHandler);
            }
            this.selHandler = selHandler;
            let _dataList = [];
            for (let i = 0; i < items.length; i++) {
                let cell = items[i];
                cell.on(Laya.Event.CLICK, this, this.onItemClick, [i]);
                DebugUtil.draw(cell);
                _dataList.push(i);
            }
            this.setData(_dataList);
        }
        get curDataArr() {
            return this.dataArr;
        }
        get selectItemData() {
            return this.dataArr[this.selectIndex];
        }
        onItemClick(i) {
            this.selectIndex = i;
        }
        dispose() {
            while (this.items.length > 0) {
                let item = this.items.pop();
                item.off(Laya.Event.CLICK, this, this.onItemClick);
            }
            this.items = null;
            this.itemHandler = null;
            this.selHandler = null;
        }
        setData(data) {
            this.dataArr = data;
            let len = data.length;
            if (len > this.items.length) {
                LogSys.Warn('TabControl ,please add much more items');
            }
            for (let i = 0; i < this.items.length; i++) {
                let cell = this.items[i];
                if (i < len) {
                    cell.visible = true;
                }
                else {
                    cell.visible = false;
                }
                this.itemHandler.runWith([cell, i, this._selectIndex == i, this.dataArr[i]]);
            }
        }
        get selectIndex() {
            return this._selectIndex;
        }
        set selectIndex(v) {
            if (this.checkHandler && !this.checkHandler.runWith(v)) {
                return;
            }
            if (this._selectIndex == v) {
                return;
            }
            if (v + 1 > this.items.length) {
                return;
            }
            for (let i = 0; i < this.dataArr.length; i++) {
                let item = this.items[i];
                this.itemHandler.runWith([item, i, v == i, this.dataArr[i]]);
            }
            this._selectIndex = v;
            this.selHandler.runWith(v);
        }
        refreshTabsView() {
            let v = this._selectIndex;
            for (let i = 0; i < this.dataArr.length; i++) {
                let item = this.items[i];
                this.itemHandler.runWith([item, i, v == i, this.dataArr[i]]);
            }
        }
        forceSelectIndex(v) {
            this._selectIndex = -1;
            this.selectIndex = v;
        }
    }

    exports.TabControl = TabControl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TabSkinCtl {
        constructor() {
            this.gap = 0;
            this.itemList = [];
            this.maxCount = 0;
        }
        refresh() {
            this.getItemList(this.tabCtl, this.dataList, this.tabCtl.selectIndex);
        }
        updateTabsView() {
            this.updateTabs(this.tabCtl, this.dataList);
        }
        updateTabs(tabCtl, dataList) {
            this.tabCtl = tabCtl;
            this.dataList = dataList;
            if (!this.con) {
                return;
            }
            while (this.con.numChildren) {
                if (this.skinKey) {
                    Laya.Pool.recover(this.skinKey, this.con.getChildAt(0));
                }
                this.con.getChildAt(0).removeSelf();
            }
            while (this.itemList.length) {
                this.itemList.pop();
            }
            let index = 0;
            let line = -1;
            for (let i = 0; i < dataList.length; i++) {
                let itemSkin;
                if (this.skinCls && this.skinKey) {
                    itemSkin = Laya.Pool.getItemByClass(this.skinKey, this.skinCls);
                }
                else {
                    itemSkin = this.skinList[i];
                }
                let _item = itemSkin;
                this.con.addChild(_item);
                if (this.maxCount != 0) {
                    if (i % this.maxCount == 0) {
                        index = 0;
                        line++;
                    }
                }
                else {
                    line = 0;
                }
                _item.x = index * (_item.width + this.gap);
                _item.y = line * _item.height;
                index++;
                _item.on(Laya.Event.CLICK, tabCtl, tabCtl.onItemClick, [i]);
                this.itemList.push(_item);
            }
            tabCtl.items = this.itemList;
            tabCtl.setData(dataList);
        }
        getItemList(tabCtl, dataList, selIndex) {
            this.updateTabs(tabCtl, dataList);
            tabCtl.forceSelectIndex(selIndex);
        }
        static Create(skinCls, skinKey, _con, gap = 10) {
            if (skinKey) {
                for (let o in this.skinkey) {
                    if (this.skinkey[o] == skinCls) ;
                }
            }
            let _skinList;
            if (!skinCls) {
                _skinList = [];
                for (let i = 0; i < _con.numChildren; i++) {
                    _skinList.push(_con.getChildAt(i));
                }
            }
            let ctl = new TabSkinCtl();
            ctl.skinList = _skinList;
            ctl.con = _con;
            ctl.gap = gap;
            ctl.skinCls = skinCls;
            ctl.skinKey = skinKey;
            return ctl;
        }
    }
    TabSkinCtl.skinkey = {};

    exports.TabSkinCtl = TabSkinCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TabCommonCtl {
        constructor() {
            this.tabsCtl = new TabControl();
            this.horizontalMax = 0;
        }
        init(cls, tabCon, key, that, onSelectHandler, itemTabHandler) {
            this._tabSkinCtl = TabSkinCtl.Create(cls, key, tabCon);
            this._tabSkinCtl.maxCount = this.horizontalMax;
            this.tabsCtl = TabControl.Create(that, onSelectHandler, itemTabHandler);
        }
        refresh(dataList, selectIndex) {
            this._tabSkinCtl.getItemList(this.tabsCtl, dataList, selectIndex);
        }
        get selectIndex() {
            return this.tabsCtl.selectIndex;
        }
        udpateView() {
            this._tabSkinCtl.updateTabsView();
        }
    }
    class NoTabClassCommonCtl extends TabCommonCtl {
        init2(tabCon, that, onSelectHandler, itemTabHandler, gap = 0) {
            this._tabSkinCtl = TabSkinCtl.Create(null, null, tabCon, gap);
            this._tabSkinCtl.maxCount = this.horizontalMax;
            this.tabsCtl = TabControl.Create(that, onSelectHandler, itemTabHandler);
        }
    }

    exports.NoTabClassCommonCtl = NoTabClassCommonCtl;
    exports.TabCommonCtl = TabCommonCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SoulVo {
        constructor() {
            this.isEmpty = false;
        }
        parse() {
            this.baseAttr = SoulModel.Ins.getBaseAttr(this.vo.spiritId, this.vo.level);
        }
        get totalExp() {
            let _vo = this.vo;
            return _vo.exp;
        }
        getOffsetVal(lv) {
            let attrMap = {};
            let sub = lv - this.vo.level;
            if (sub > 0) {
                let cfg = (t_Spirit_Attribute_Fixed.Ins.getCfgBySpiritID(this.vo.spiritId));
                let arr = cfg.f_PerksNumber.split("|");
                for (let i = 0; i < arr.length; i++) {
                    let s = arr[i].split(":");
                    let attrID = parseInt(s[0]);
                    let val = parseInt(s[1]);
                    attrMap[attrID] = val * sub;
                }
            }
            return attrMap;
        }
    }

    exports.SoulVo = SoulVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SoulSuitView extends ui.views.soul.ui_soul_suit_itemUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            E.ViewMgr.Open(EViewType.SoulSuitTips, null, this.id);
        }
        refreshView() {
            let id = this.dataSource;
            this.id = id;
            this.cfg = t_Spirit_Attribute_Bond.Ins.getBySpiritID(id);
            f_headViewUpdate(this.headPortrait, t_Spirit_Attribute_Fixed.Ins.getCfgBySpiritID(this.cfg.f_SpiritID).f_SpiritIconID);
            this.tf5.text = this.cfg.f_SpiritName;
            let count = SoulModel.Ins.getUnlockCountBySpiritId(id);
            this.enableBtn(this.btn1, count >= 2);
            this.enableBtn(this.btn2, count >= 4);
        }
        enableBtn(img, v) {
            if (v) {
                img.skin = "remote/main/main/anniu_2.png";
            }
            else {
                img.skin = "remote/main/main/anniu_1.png";
            }
        }
    }
    class SoulSuitTipsView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.soul.ui_soul_sult_viewUI();
                this.setMouseBg(this._ui.bg);
            }
        }
        onInit() {
            let id = this.Data;
            this.cfg = t_Spirit_Attribute_Bond.Ins.getBySpiritID(id);
            this._ui.nametf.text = this.cfg.f_SpiritName;
            f_headViewUpdate(this._ui.headPortrait, t_Spirit_Attribute_Fixed.Ins.getCfgBySpiritID(this.cfg.f_SpiritID).f_SpiritIconID);
            let unlock = SoulModel.Ins.getUnlockCountBySpiritId(id);
            this._ui.kong2.visible = unlock >= 2;
            this._ui.kong4.visible = unlock >= 4;
            let bondCfg = t_Spirit_Attribute_Bond.Ins.getBySpiritID(id);
            SoulModel.Ins.updateAttr(this._ui.cellAttr2, bondCfg.f_TwoPiece);
            SoulModel.Ins.updateAttr(this._ui.cellAttr4, bondCfg.f_FourPiece);
        }
    }

    exports.SoulSuitTipsView = SoulSuitTipsView;
    exports.SoulSuitView = SoulSuitView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SoulMainView extends ViewBase {
        constructor() {
            super(...arguments);
            this._tabCtl = new TabCommonCtl();
            this.mMask = true;
            this.autoFree = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("soul.atlas");
            if (initConfig.platform == PlatformConfig.War3) {
                this.addAtlas("wowhuanzhuang.atlas");
            }
        }
        onExit() {
            SoulModel.Ins.off(SoulEvent.UpdateData, this, this.onUpdateDataView);
            this.rightCtl.dispose();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.soul.ui_soul_viewUI();
                this.bindClose(this._ui.close1);
                this._tabCtl.init(ui.views.soul.ui_soul_tab_itemUI, this._ui.tabCon, 'ui_soul_tab_itemUI', this, this.onSelectHandler, this.itemTabHandler);
                this.onekeyCtl = ButtonCtl.CreateBtn(this._ui.yijianzhuanbei, this, this.onOneKey);
                this.uploadCtl = ButtonCtl.CreateBtn(this._ui.yijianxiexia, this, this.onUpload);
                this.btnList.push(this.onekeyCtl, this.uploadCtl);
                let itemlist = [];
                for (let i = 0; i < 4; i++) {
                    itemlist.push(new SoulTopItemCtl(this._ui['item' + i], i + 1));
                }
                this.topItemlist = itemlist;
                this._ui.list4.itemRender = SoulIconItem;
                this._ui.list4.renderHandler = new Laya.Handler(this, this.onSoulItemHandler);
                this._ui.list1.itemRender = ui.views.soul.ui_soul_attr_itemUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderAttrHandler);
                this._ui.list2.itemRender = ui.views.soul.ui_soul_attr_itemUI;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onRenderAttrHandler);
                this._ui.list3.itemRender = SoulSuitView;
                this._ui.list3.renderHandler = new Laya.Handler(this, this.onSuitRender);
                let rightCtl = new TriangleHideCtl();
                this.rightCtl = rightCtl;
                rightCtl.bind(this._ui.list2, this._ui.downIcon);
            }
        }
        onSuitRender(item) {
            item.refreshView();
        }
        onRenderAttrHandler(skin) {
            let cell = skin.dataSource;
            skin.attrtf.text = MainModel.Ins.getAttrNameIdByID(cell.id);
            skin.valtf.text = attrConvert(cell.id, cell.value);
        }
        onSoulItemHandler(cell, index) {
            cell.refreshView(index);
        }
        onOneKey() {
            let req = new SpiritQuickWear_req();
            req.type = 1;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onUpload() {
            if (SoulModel.Ins.isPackageFullCanUpload()) {
                E.ViewMgr.ShowMidLabel(E.getLang("saodanFull"));
                return;
            }
            let req = new SpiritQuickWear_req();
            req.type = 0;
            SocketMgr.Ins.SendMessageBin(req);
        }
        itemTabHandler(tabSkin, index, sel, data) {
            tabSkin.tf1.text = data.f_PositionName;
            if (sel) {
                tabSkin.tf1.color = `#90501F`;
                tabSkin.bg1.visible = true;
                tabSkin.bg2.visible = false;
            }
            else {
                tabSkin.tf1.color = `#FCEABE`;
                tabSkin.bg1.visible = false;
                tabSkin.bg2.visible = true;
            }
        }
        updateSelectView() {
            let cfg = t_Spirit_Position.Ins.List[this._tabCtl.selectIndex];
            let dataList = SoulModel.Ins.getListByPos(cfg.f_Position);
            let max = NewAdventureModel.Ins.cleanUpVo.storageMax;
            let sub = max - dataList.length;
            for (let i = 0; i < sub; i++) {
                let empty = new SoulVo();
                empty.isEmpty = true;
                dataList.push(empty);
            }
            this._ui.list4.array = dataList;
        }
        onSelectHandler(index) {
            this._ui.countTf.visible = index == 0;
            this.updateSelectView();
            this._ui.list4.scrollTo(0);
        }
        updateView() {
            for (let i = 0; i < this.topItemlist.length; i++) {
                this.topItemlist[i].refreshView();
            }
            this.updateSelectView();
            this._ui.countTf.text = `${SoulModel.Ins.getNotExcludeWears().length}/${NewAdventureModel.Ins.cleanUpVo.storageMax}`;
            this._ui.list1.array = SoulModel.Ins.getAllBaseAttr();
            let randomList = SoulModel.Ins.getAllRandomAttr();
            this._ui.list2.array = randomList;
            this._ui.list2.scrollTo(0);
            this.rightCtl.onChangeEvt();
            let dataList = SoulModel.Ins.getWeardIds();
            this._ui.list3.array = dataList;
            this._ui.list3.scrollTo(0);
            if (dataList.length > 0) {
                this._ui.midcon.visible = true;
                this._ui.botcon.y = 750;
                this._ui.list4.height = 209;
                this._ui.bg11.height = 304;
                if (this._ui['bg12']) {
                    this._ui['bg12'].height = 305;
                }
            }
            else {
                this._ui.midcon.visible = false;
                this._ui.botcon.y = 465;
                this._ui.list4.height = 489;
                this._ui.bg11.height = 593;
                if (this._ui['bg12']) {
                    this._ui['bg12'].height = 601;
                }
            }
        }
        onInit() {
            SoulModel.Ins.on(SoulEvent.UpdateData, this, this.onUpdateDataView);
            this._tabCtl.refresh(t_Spirit_Position.Ins.List, 0);
            this.updateView();
        }
        onUpdateDataView() {
            this.updateView();
        }
    }

    exports.SoulMainView = SoulMainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SoulTipsView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.soul.ui_soul_tips_itemUI();
                this.ctl = new SoulTipsCtl(this._ui, this.ViewType);
                this.bindClose(this._ui.close1);
            }
        }
        onInit() {
            this.ctl.refreshView(this.Data);
        }
    }

    exports.SoulTipsView = SoulTipsView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SoulModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.soulVoList = [];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new SoulModel();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            this.Reg(new SoulMainView(EViewType.Soul));
            this.Reg(new SoulTipsView(EViewType.SoulTips));
            this.Reg(new SoulUpgradeView(EViewType.SoulUpgrade));
            this.Reg(new SoulCompareTipsView(EViewType.SoulCompareTip));
            this.Reg(new SoulSuitTipsView(EViewType.SoulSuitTips));
            E.MsgMgr.AddMsg(MSGID.SpiritList, this.onSpiritList, this);
            E.MsgMgr.AddMsg(MSGID.SpiritListUpdate, this.onSpiritListUpdate, this);
            E.MsgMgr.AddMsg(MSGID.SpiritListDel, this.onSpiritListDel, this);
        }
        getByUid(uid) {
            let cell = this.getSoulByUid(uid);
            if (cell) {
                return cell.vo;
            }
        }
        isLvFull(_vo) {
            return t_Spirit_ExpUpgrade.Ins.isFull(_vo.level, _vo.qualityId);
        }
        onSpiritList(revc) {
            this.soulVoList = [];
            let spiritList = revc.spiritList;
            for (let i = 0; i < spiritList.length; i++) {
                let vo = new SoulVo();
                let cell = spiritList[i];
                vo.vo = cell;
                vo.parse();
                this.soulVoList.push(vo);
            }
        }
        getWear(pos) {
            let l = this.soulVoList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.vo.pos == pos && cell.vo.wearable == EWearableType.Wearable) {
                    return cell.vo;
                }
            }
        }
        getWearableByPos(pos) {
            let l = this.soulVoList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.vo.pos == pos && cell.vo.wearable == EWearableType.Wearable) {
                    return cell;
                }
            }
        }
        getNotExcludeWearList(uid) {
            let l = this.soulVoList;
            let _result = [];
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.vo.wearable != EWearableType.Wearable && uid != cell.vo.uid) {
                    _result.push(cell);
                }
            }
            return _result;
        }
        getNotExcludeWears() {
            let l = this.soulVoList;
            let _result = [];
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.vo.wearable != EWearableType.Wearable) {
                    _result.push(cell);
                }
            }
            return _result;
        }
        isPackageFullCanUpload() {
            let l = this.soulVoList;
            return l.length > NewAdventureModel.Ins.cleanUpVo.storageMax;
        }
        getListByPos(pos) {
            let l = [];
            for (let i = 0; i < this.soulVoList.length; i++) {
                let cell = this.soulVoList[i];
                if (cell.vo.wearable == EWearableType.Not) {
                    if (cell.vo.pos == pos || pos == 0) {
                        l.push(cell);
                    }
                }
            }
            return l;
        }
        getHasCanWear(pos) {
            for (let i = 0; i < this.soulVoList.length; i++) {
                let cell = this.soulVoList[i];
                if (cell.vo.wearable == EWearableType.Not) {
                    if (cell.vo.pos == pos) {
                        return true;
                    }
                }
            }
            return false;
        }
        get hasRed() {
            for (let i = 0; i < 4; i++) {
                let pos = i + 1;
                if (this.getWearableByPos(pos)) ;
                else {
                    if (this.getHasCanWear(pos)) {
                        return true;
                    }
                }
            }
            return false;
        }
        updateRed() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.Soul)) {
                if (this.hasRed) {
                    DotManager.addMainDot("icon1", -20, -5);
                }
                else {
                    DotManager.remMainDot("icon1");
                }
            }
        }
        onSpiritListUpdate(revc) {
            let _newList = [];
            for (let n = 0; n < revc.spiritList.length; n++) {
                let item = revc.spiritList[n];
                let find = false;
                for (let i = 0; i < this.soulVoList.length; i++) {
                    let cell = this.soulVoList[i];
                    if (cell.vo.uid == item.uid) {
                        this.soulVoList[i].vo = item;
                        find = true;
                        this.soulVoList[i].parse();
                    }
                }
                if (!find) {
                    _newList.push(item);
                    let _curVo = new SoulVo();
                    _curVo.vo = item;
                    _curVo.parse();
                    this.soulVoList.push(_curVo);
                }
            }
            if (_newList.length > 0) {
                let rewardVo = new RewardGetData();
                rewardVo.dataList = _newList;
                rewardVo.type = ERewardShowVoType.Soul;
                E.ViewMgr.openReward(rewardVo);
            }
            this.event(SoulEvent.UpdateData);
            this.updateRed();
        }
        getSoulByUid(uid) {
            let l = this.soulVoList;
            for (let i = 0; i < l.length; i++) {
                if (l[i].vo.uid == uid) {
                    return l[i];
                }
            }
        }
        onSpiritListDel(revc) {
            let l = revc.datalist;
            for (let i = 0; i < l.length; i++) {
                let delUid = l[i];
                this.del(delUid);
            }
            this.event(SoulEvent.UpdateData);
            this.updateRed();
        }
        del(uid) {
            let cell2 = this.getSoulByUid(uid);
            if (cell2) {
                let index = this.soulVoList.indexOf(cell2);
                this.soulVoList.splice(index, 1);
            }
        }
        getUnlockCountBySpiritId(spiritId) {
            let l = this.soulVoList;
            let count = 0;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.vo.spiritId == spiritId && cell.vo.wearable == EWearableType.Wearable) {
                    count++;
                }
            }
            return count;
        }
        getBaseAttr(spiritId, lv) {
            let cfg = t_Spirit_Attribute_Fixed.Ins.getCfgBySpiritID(spiritId);
            let index = lv - 1;
            let attr = [];
            let lineArr = cfg.f_PerksNumber.split("|");
            let quaArr = cfg.f_QualityName.split("|");
            for (let i = 0; i < quaArr.length; i++) {
                let val = 0;
                if (index >= 0) {
                    val = parseInt(lineArr[i].split(":")[1]);
                }
                let a = quaArr[i].split(":");
                let id = parseInt(a[0]);
                let curVal = parseInt(a[1]) + val * (index < 0 ? 0 : index);
                let vAttr = new stEquipAttr();
                vAttr.id = id;
                vAttr.value = curVal;
                attr.push(vAttr);
            }
            return attr;
        }
        getAllBaseAttr() {
            let l = this.soulVoList;
            let r = [];
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.vo.wearable == EWearableType.Wearable) {
                    r = r.concat(cell.baseAttr);
                }
            }
            r = PlayerVoFactory.mergeAttrSt(r);
            return r;
        }
        getAllRandomAttr() {
            let l = this.soulVoList;
            let r = [];
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.vo.wearable == EWearableType.Wearable) {
                    r = r.concat(cell.vo.attrList);
                }
            }
            r = PlayerVoFactory.mergeAttrSt(r);
            return r;
        }
        updateAttr(skin, str) {
            let arr = str.split(":");
            let id = parseInt(arr[0]);
            let val = parseInt(arr[1]);
            skin.attrtf.text = MainModel.Ins.getAttrNameIdByID(id);
            skin.valtf.text = attrConvert(id, val);
        }
        getWeardIds() {
            let spiritIds = [];
            let l = this.soulVoList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.vo.wearable == EWearableType.Wearable) {
                    if (spiritIds.indexOf(cell.vo.spiritId) == -1) {
                        spiritIds.push(cell.vo.spiritId);
                    }
                }
            }
            return spiritIds;
        }
        getRot(pos) {
            let r = 0;
            switch (pos) {
                case 1:
                    r = 46;
                    break;
                case 2:
                    r = 134;
                    break;
                case 3:
                    r = 313;
                    break;
                case 4:
                    r = 226;
                    break;
            }
            return r;
        }
        getIcon(qua) {
            let arr = ["zhk", "zhdj_l", "zhdj_z", "zhdj_j"];
            let icon = arr[qua];
            return `remote/main/main/${icon}.png`;
        }
    }

    exports.SoulModel = SoulModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ENewAdventure) {
        ENewAdventure[ENewAdventure["Fight"] = 1] = "Fight";
        ENewAdventure[ENewAdventure["CleanUp"] = 2] = "CleanUp";
        ENewAdventure[ENewAdventure["Get"] = 3] = "Get";
    })(exports.ENewAdventure || (exports.ENewAdventure = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RowMoveBaseNode {
        constructor() {
            this._jList = [];
            this.isInRect = false;
            this.check = false;
            this.showStatus = false;
            this.check = false;
            this._jList = [];
            this.isInRect = false;
            this.showStatus = false;
        }
        get curClsKey() {
            return this.clsKey;
        }
        isCanDraw(cur_y, h) {
            let _canAdd = false;
            if (this.y + this.height >= cur_y && this.y < cur_y + h) {
                this.isInRect = true;
            }
            else {
                this.isInRect = false;
            }
            if (this.isInRect) {
                if (!this.showStatus) {
                    this.clear();
                    _canAdd = true;
                    this.showStatus = true;
                }
            }
            else {
                this.clear();
                this.showStatus = false;
            }
            return _canAdd;
        }
        free() {
            this.showStatus = false;
            this.clear();
        }
        clear() {
            while (this._jList.length) {
                let _gridItem = this._jList.pop();
                _gridItem.removeSelf();
                Laya.Pool.recover(this.clsKey, _gridItem);
            }
        }
        draw(_panel) {
            if (_panel.destroyed) {
                return;
            }
            for (let i = 0; i < this.list.length; i++) {
                let itemView = this.createNode(i);
                _panel.addChild(itemView);
                this._jList.push(itemView);
            }
        }
    }
    class ScrollPanelControl extends Laya.EventDispatcher {
        constructor() {
            super();
            this.rwlist = [];
            this.isComplete = false;
            this.rwlist = [];
            this.isComplete = false;
            this._panelBG = new Laya.Sprite();
        }
        get renderList() {
            return this.rwlist;
        }
        getAllHeight() {
            return this._allHeight;
        }
        getPanel() {
            return this.panel;
        }
        isLastDraw() {
            if (this.rwlist.length > 0) {
                let _rn = this.rwlist[this.rwlist.length - 1];
                if (_rn.isInRect) {
                    return true;
                }
                else {
                    return false;
                }
            }
            return true;
        }
        ;
        offsetHeight(y) {
            this._allHeight += y;
        }
        ;
        init(panel) {
            if (!this.panel) {
                this.panel = panel;
                this.panel.dataSource = this;
                this.panel.on(Laya.Event.DISPLAY, this, this.onDisplay);
                this.panel.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
                if (!this.panel.vScrollBar) {
                    this.panel.vScrollBarSkin = "";
                }
                this.panel.vScrollBar.elasticBackTime = 0;
                this.panel.vScrollBar.on(Laya.Event.CHANGE, this, this.onScrollBarChange);
                this.panel.elasticEnabled = false;
            }
        }
        ;
        getItemView(handler) {
            if (this.isComplete) {
                for (let i = 0; i < this.rwlist.length; i++) {
                    let item = this.rwlist[i];
                    if (item.list && item.check) {
                        for (let n = 0; n < item.list.length; n++) {
                            let status_1 = handler.runWith(item.list[n]);
                            if (status_1) {
                                this.scrollToNode(item);
                                return item._jList[n];
                            }
                        }
                    }
                }
            }
            return null;
        }
        ;
        getRowCol(row, col) {
            if (this.isComplete) {
                for (let i = 0; i < this.rwlist.length; i++) {
                    let item = this.rwlist[i];
                    if (i == row && item._jList[col]) {
                        return item._jList[col];
                    }
                }
            }
            return null;
        }
        ;
        onScrollBarChange() {
            this.refresh();
        }
        ;
        end(y = undefined) {
            if (y == undefined) {
                y = 0;
            }
            this.rebuildScrollHeight(this._allHeight);
            this.refresh(true);
            this.once(ScrollPanelControl.EVENT_END, this, this.endEvt, [y]);
        }
        ;
        rebuildScrollHeight(_newHeight) {
            let _allHeight = this._allHeight = _newHeight;
            this._panelBG.graphics.drawRect(0, 0, this.panel.width, _allHeight, "#ff0000");
            this._panelBG.alpha = 0.0;
            this._panelBG.width = this.panel.width;
            this._panelBG.height = _allHeight;
            this.panel.addChild(this._panelBG);
            this.panel.scrollRect = new Laya.Rectangle(0, 0, this.panel.width, _allHeight);
            if (this.panel.vScrollBar['cancelDragOp']) {
                this.panel.vScrollBar['cancelDragOp']();
            }
        }
        onDisplay() {
            Laya.stage.on(Laya.Event.MOUSE_UP, this, this.onStageUp);
        }
        onUnDisplay() {
            Laya.stage.off(Laya.Event.MOUSE_UP, this, this.onStageUp);
        }
        onStageUp() {
        }
        endLast() {
            let targetY = 0;
            if (this.rwlist.length > 0) {
                targetY = this.last.y;
            }
            this.end(targetY);
        }
        endEvt(y) {
            this.panel.scrollTo(0, y);
        }
        getScrollValue() {
            return this.panel.vScrollBar.value;
        }
        ;
        scrollToNode(node) {
            this.panel.scrollTo(0, node.y);
        }
        ;
        onCallLayer(drawlist) {
            let len = drawlist.length;
            while (drawlist.length > 0) {
                let vo = drawlist.shift();
                vo.draw(this.panel);
            }
            this.isComplete = true;
            Laya.timer.callLater(this, this.dispathEnd);
        }
        ;
        dispathEnd() {
            this.event(ScrollPanelControl.EVENT_END);
        }
        refresh(isLater = false) {
            if (isLater == undefined) {
                isLater = false;
            }
            this.isComplete = false;
            let drawlist = [];
            let y = this.panel.vScrollBar.value;
            for (let i = 0; i < this.rwlist.length; i++) {
                let _rn = this.rwlist[i];
                if (_rn.isCanDraw(y, this.panel.height)) {
                    drawlist.push(_rn);
                }
            }
            if (isLater) {
                Laya.timer.callLater(this, this.onCallLayer, [drawlist]);
            }
            else {
                this.onCallLayer(drawlist);
            }
        }
        ;
        setData(data, cls, itemHeight) {
            this.split([data], cls, itemHeight);
        }
        split(listData, cls, itemHeight, gap = undefined, maxRow = undefined) {
            if (gap == undefined) {
                gap = 0;
            }
            if (maxRow == undefined) {
                maxRow = 1;
            }
            let cur = 0;
            for (let i = 0; i < listData.length; i++) {
                if (cur == 0) {
                    let row = new cls();
                    row.height = itemHeight + gap;
                    row.list = [];
                    row.y = this._allHeight + gap;
                    this._allHeight += row.height;
                    this.add(row);
                }
                let last = this.last;
                last.list.push(listData[i]);
                cur++;
                if (cur >= maxRow) {
                    cur = 0;
                }
            }
        }
        ;
        clear() {
            this._allHeight = 0;
            Laya.timer.clear(this, this.onCallLayer);
            if (this._panelBG) {
                this._panelBG.graphics.clear();
                this._panelBG.removeSelf();
            }
            if (this.rwlist) {
                while (this.rwlist.length) {
                    let _rn = this.rwlist.pop();
                    _rn.free();
                }
            }
            while (this.panel.numChildren) {
                let node = this.panel.getChildAt(0);
                if (typeof node['clsKey'] == "string") {
                    Laya.Pool.recover(node['clsKey'], node);
                }
                node.removeSelf();
            }
        }
        ;
        add(node) {
            this.rwlist.push(node);
        }
        ;
        get last() {
            if (this.rwlist.length > 0) {
                return this.rwlist[this.rwlist.length - 1];
            }
        }
    }
    ScrollPanelControl.EVENT_END = "EVENT_END";

    exports.RowMoveBaseNode = RowMoveBaseNode;
    exports.ScrollPanelControl = ScrollPanelControl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Enemy_ImageProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new Enemy_ImageProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Enemy_Image";
        }
        getCfg(id) {
            let _l = this.List;
            for (let i = 0; i < _l.length; i++) {
                let cfg = _l[i];
                if (cfg.f_EnemyID == id) {
                    return cfg;
                }
            }
        }
        toTSkin(cfg) {
            let skin = new stSkin();
            skin.f_HeadID = cfg.f_HeadID;
            skin.f_WeaponID = cfg.f_WeaponID;
            skin.f_ShieldID = cfg.f_ShieldID;
            skin.f_WingID = cfg.f_WingID;
            skin.f_MountID = cfg.f_MountID;
            skin.f_BodyID = cfg.f_BodyID;
            return skin;
        }
    }

    exports.Enemy_ImageProxy = Enemy_ImageProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EAdventureItemType) {
        EAdventureItemType[EAdventureItemType["Clearance"] = -1] = "Clearance";
        EAdventureItemType[EAdventureItemType["Pre"] = 0] = "Pre";
        EAdventureItemType[EAdventureItemType["Cur"] = 1] = "Cur";
        EAdventureItemType[EAdventureItemType["Next"] = 2] = "Next";
    })(exports.EAdventureItemType || (exports.EAdventureItemType = {}));
    class AdventureItemVo {
        get cfg() {
            if (!this._cfg) {
                this._cfg = AdventureLevelProxy.Ins.getByLevelId(this.levelId);
            }
            return this._cfg;
        }
        get bClearance() {
            let cfg = AdventureLevelProxy.Ins.getByLevelId(this.range.maxLvId);
            if (cfg.f_ChapterID + 1 < NewAdventureModel.Ins.curCfg.f_ChapterID) {
                if (NewAdventureModel.Ins.isLinqguEnd(this.range.maxLvId)) {
                    return true;
                }
            }
        }
        get clearanceDesc() {
            let maxCfg = AdventureLevelProxy.Ins.getByLevelId(this.range.maxLvId);
            let desc = `${this._cfg.f_ChapterID}-${maxCfg.f_unitid}`;
            return E.getLang("maoxian2_text1", desc);
        }
        get heroName() {
            let heroId = this.cfg.f_unlockhero;
            if (!heroId) {
                heroId = AdventureLevelProxy.Ins.getNearHasHero(this.cfg.f_id);
            }
            let imgCfg = Enemy_ImageProxy.Ins.getCfg(heroId);
            return imgCfg ? imgCfg.f_Name : "";
        }
        get titleName() {
            return `${this.cfg.f_Chapter} ${this.cfg.f_ChapterID}-${this.cfg.f_unitid}`;
        }
        get chapterName() {
            return this.cfg.f_Unit;
        }
        get chapterId() {
            return this.cfg.f_ChapterID;
        }
        isPreChapterClear() {
            let cur = AdventureLevelProxy.Ins.getByLevelId(NewAdventureModel.Ins.curCfg.f_Levelid);
            if (cur) {
                let _prePage = cur.f_Page - 1;
                if (this.cfg.f_Page == _prePage && this.isLastPage) {
                    return true;
                }
            }
        }
        get mCompleteCheck() {
            let status = NewAdventureModel.Ins.isCompleteAll &&
                !this.isPreChapterClear()
                && !AdventureLevelProxy.Ins.isLastChapterID(this.chapterId);
            return status;
        }
        get isLastPage() {
            let cfg = AdventureLevelProxy.Ins.getByLevelId(this.levelId + 1);
            if (cfg) {
                if (cfg.f_Page > this.cfg.f_Page) {
                    return true;
                }
            }
        }
        get bCleanUp() {
            if (this.type == exports.EAdventureItemType.Pre) {
                let islingqu = NewAdventureModel.Ins.isLinqguEnd(this.range.maxLvId);
                if (islingqu) {
                    return true;
                }
                if (islingqu && this.isPreChapterClear()) {
                    return true;
                }
            }
            return false;
        }
        isCanLingqu() {
            if (this.type == exports.EAdventureItemType.Pre) {
                if (this.bCleanUp) ;
                else {
                    return true;
                }
            }
        }
        get mRed() {
            let _b = this.isCanLingqu();
            if (_b) {
                return _b;
            }
            return false;
        }
        get quaShow() {
            let l = [];
            let arr = this.cfg.f_quashow.split("-");
            for (let i = 0; i < arr.length; i++) {
                l.push(arr[i]);
            }
            return l;
        }
    }
    class NewAdventureMainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.typeMapH = {};
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas("maoxian2.atlas");
        }
        onExit() {
            this._panelCtl.clear();
            NewAdventureModel.Ins.event(NewAdventureEvent.DisposeAvatar);
            NewAdventureModel.Ins.off(NewAdventureEvent.RewardUpdate, this, this.onRewardUpdate);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.maoxian2.ui_maoxian2_mainUI();
                this.bindClose(this._ui.close1);
                this._tabCtl = new TabCommonCtl();
                this._panelCtl = new ScrollPanelControl();
                this._panelCtl.init(this._ui.panel1);
                this._tabCtl.horizontalMax = 4;
                this._tabCtl.init(ui.views.maoxian2.ui_maoxian2_tab_itemUI, this._ui.tabCon, "ui_maoxian2_tab_itemUI", this, this.onSelectHandler, this.itemTabHandler);
                this.initHeightCfg();
            }
        }
        onInit() {
            let selIndex = AdventureLevelProxy.Ins.getCurTabIndex(NewAdventureModel.Ins.curCfg.f_Levelid);
            this._tabCtl.refresh(AdventureLevelProxy.Ins.pageList, selIndex);
            NewAdventureModel.Ins.on(NewAdventureEvent.RewardUpdate, this, this.onRewardUpdate);
            this.onCallLaterHandler();
        }
        onCallLaterHandler() {
            let l1 = this._panelCtl.renderList;
            for (let i = 0; i < l1.length; i++) {
                let node = l1[i];
                if (node && node.curClsKey == CurNewAdventureItemView.SignKey) {
                    this._panelCtl.end(node.y);
                    return;
                }
            }
            for (let i = 0; i < l1.length; i++) {
                let node = l1[i];
                if (node && node.list && node.list.length > 0) {
                    let cellVo = node.list[0];
                    if (cellVo.bCleanUp && !cellVo.mCompleteCheck) {
                        this._panelCtl.end(node.y);
                        return;
                    }
                }
            }
        }
        onRewardUpdate() {
            this.refreshView();
        }
        refresh() {
            this._tabCtl.refresh(AdventureLevelProxy.Ins.pageList, this._tabCtl.tabsCtl.selectIndex);
        }
        onSelectHandler(index) {
            this.refreshView();
        }
        itemTabHandler(tabSkin, index, sel, data) {
            if (sel) {
                tabSkin.bg.skin = 'remote/maoxian2/gqbj_1.png';
                tabSkin.tf.color = "#F1E1C2";
            }
            else {
                tabSkin.bg.skin = 'remote/maoxian2/gqbj.png';
                tabSkin.tf.color = "#AE6C39";
            }
            if (data.mRed) {
                DotManager.addDot(tabSkin);
            }
            else {
                DotManager.removeDot(tabSkin);
            }
            tabSkin.tf.text = data.pageLabel;
        }
        getHeightBytype(type) {
            let cls;
            switch (type) {
                case exports.EAdventureItemType.Clearance:
                case exports.EAdventureItemType.Pre:
                    cls = NewAdventureItemView;
                    break;
                case exports.EAdventureItemType.Cur:
                    cls = CurNewAdventureItemView;
                    break;
                case exports.EAdventureItemType.Next:
                    cls = LockNewAdventureItemView;
                    break;
            }
            let cell = {};
            cell.height = cls.getFromPool().height;
            cell.cls = cls;
            this.typeMapH[type] = cell;
        }
        initHeightCfg() {
            let arr = [exports.EAdventureItemType.Pre, exports.EAdventureItemType.Cur, exports.EAdventureItemType.Clearance, exports.EAdventureItemType.Next];
            for (let i = 0; i < arr.length; i++) {
                this.getHeightBytype(arr[i]);
            }
        }
        refreshView(y = 0) {
            let index = this._tabCtl.tabsCtl.selectIndex;
            let cfg = AdventureLevelProxy.Ins.pageList[index];
            let l = cfg.dataList;
            let dl = [];
            let curLv = NewAdventureModel.Ins.curCfg.f_Levelid;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let _chapterVo = new AdventureItemVo();
                let unit = AdventureLevelProxy.Ins.getChapterRange(cfg.page, cell.chapterID);
                _chapterVo.range = unit;
                if (curLv >= unit.minLvId && curLv <= unit.maxLvId) {
                    _chapterVo.levelId = curLv;
                    if (NewAdventureModel.Ins.isCompleteAll && AdventureLevelProxy.Ins.isLastChapterID(cell.chapterID)) {
                        _chapterVo.type = exports.EAdventureItemType.Pre;
                    }
                    else {
                        _chapterVo.type = exports.EAdventureItemType.Cur;
                    }
                }
                else if (curLv > unit.maxLvId) {
                    _chapterVo.levelId = unit.maxLvId;
                    if (_chapterVo.bClearance) {
                        if (_chapterVo.isPreChapterClear()) {
                            _chapterVo.type = exports.EAdventureItemType.Pre;
                        }
                        else {
                            _chapterVo.type = exports.EAdventureItemType.Clearance;
                        }
                    }
                    else {
                        _chapterVo.type = exports.EAdventureItemType.Pre;
                    }
                }
                else if (curLv < unit.minLvId) {
                    _chapterVo.levelId = unit.minLvId;
                    _chapterVo.type = exports.EAdventureItemType.Next;
                }
                dl.push(_chapterVo);
            }
            this.curChapterList = dl;
            this._panelCtl.clear();
            let list1 = this.curChapterList;
            for (let i = 0; i < list1.length; i++) {
                let cell = list1[i];
                let _item = this.typeMapH[cell.type];
                this._panelCtl.split([cell], _item.cls, _item.height);
            }
            this._panelCtl.end(y);
            this.onCallLaterHandler();
        }
    }

    exports.AdventureItemVo = AdventureItemVo;
    exports.NewAdventureMainView = NewAdventureMainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class NewAdverntRewardSmallIcon extends ui.views.main.ui_slot_item2UI {
        constructor() {
            super();
            this.tf1.text = "";
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler(e) {
            e.stopPropagation();
            let cfg = t_Spirit_Quality.Ins.GetDataById(this._curQua);
            MainModel.Ins.showSmallTips(cfg.f_QualityName, cfg.f_desc, this);
        }
        setData(_curQua) {
            this._curQua = _curQua;
            let cfg = t_Spirit_Quality.Ins.GetDataById(_curQua);
            let _imgSt = `o/spirits/${cfg.f_IconAdress}`;
            this.icon.skin = _imgSt;
        }
    }
    NewAdverntRewardSmallIcon.Sign = "NewAdverntRewardSmallIcon";
    class NewAdventureItemView0 extends ui.views.maoxian2.ui_maoxian2_item0UI {
        constructor() {
            super();
            this.init();
        }
        init() {
            this.lingquCtl = ButtonCtl.CreateBtn(this.lingquBtn, this, this.onLingQu);
            this.saodanbtnCtl = ButtonCtl.CreateBtn(this.saodanbtn, this, this.onSaoDan);
            DotManager.addDot(this.lingquBtn);
            this.yitongguan.visible = false;
        }
        updateClearBtn() {
        }
        onSaoDan() {
            E.ViewMgr.Open(EViewType.NewAdventureCleanUp, null, this._clearVo);
        }
        onLingQu() {
            let req = new NewAdventureFight_req();
            req.type = ENewAdventure.Get;
            req.adventureId = this.vo.levelId;
            SocketMgr.Ins.SendMessageBin(req);
        }
        clear() {
            ItemViewFactory.clear(this.rewardCon2, NewAdverntRewardSmallIcon.Sign);
            ItemViewFactory.clear(this.rewardCon, "SoltItemView2");
        }
        refreshView() {
            let _clearVo = {};
            this._clearVo = _clearVo;
            _clearVo.levelId = this.vo.levelId;
            this.updateClearBtn();
            this.nametf.text = this.vo.chapterName;
            f_headViewUpdate(this.icon, this.vo.cfg.f_headIcon);
            this.littleCon.visible = false;
            this.saodanbtnCtl.visible = false;
            this.lingquCtl.visible = false;
            this.clear();
            let isSweep = false;
            if (this.vo.type == EAdventureItemType.Clearance) {
                isSweep = true;
            }
            else if (this.vo.type == EAdventureItemType.Pre) {
                if (this.vo.bCleanUp) {
                    isSweep = true;
                }
                else {
                    _clearVo.rewardStr = this.vo.cfg.f_ChapterReward;
                    ItemViewFactory.renderItemSlots(this.rewardCon, this.vo.cfg.f_ChapterReward, 0, 1, "left", SoltItemView2, "SoltItemView2");
                    this.lingquCtl.visible = true;
                }
            }
            if (isSweep) {
                this._clearVo.adverntRewardQuas = this.vo.quaShow;
                this.yitongguan.visible = false;
                this.saodanbtnCtl.visible = true;
                ItemViewFactory.renderItemSlots(this.rewardCon2, this.vo.quaShow, 0, 1, "left", NewAdverntRewardSmallIcon, NewAdverntRewardSmallIcon.Sign);
            }
        }
    }
    class NewAdventureItemView extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "NewAdventureItemView0";
        }
        static getFromPool() {
            let skin = Laya.Pool.getItemByClass("NewAdventureItemView0", NewAdventureItemView0);
            return skin;
        }
        createNode(index) {
            let skin = Laya.Pool.getItemByClass(this.clsKey, NewAdventureItemView0);
            this.skin = skin;
            skin.vo = this.list[index];
            skin.refreshView();
            DebugUtil.drawTF(this.skin, skin.vo.levelId.toString());
            skin.y = this.y;
            return skin;
        }
        clear() {
            super.clear();
            if (this.skin) {
                this.skin.clear();
            }
        }
    }
    class CurNewAdventureItemViewSkin extends ui.views.maoxian2.ui_maoxian2_item1UI {
        constructor() {
            super();
            this._plusCtl = new PlusCtl();
            this.init();
        }
        init() {
            if (!this.tiaozhanBtnCtl) {
                this.tiaozhanBtnCtl = ButtonCtl.CreateBtn(this.tiaozhanBtn, this, this.onFightHandler);
                this.on(Laya.Event.DISPLAY, this, this.onDisplay);
                this.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
                NewAdventureModel.Ins.on(NewAdventureEvent.DisposeAvatar, this, this.disposeAvatar);
            }
        }
        onDisplay() {
            if (this.monsterView) {
                this.monsterView.play(EAvatarAnim.NormalStand);
            }
        }
        onUnDisplay() {
            if (this.monsterView) {
                this.monsterView.stop();
            }
        }
        disposeAvatar() {
            if (this.monsterView) {
                this.monsterView.dispose();
                this.monsterView = null;
            }
        }
        onFightHandler() {
            NewAdventureModel.Ins.adventureId = this.vo.levelId;
            MainModel.Ins.fightAdventure(this.vo.levelId);
        }
        refreshView() {
            this.titleTf.text = this.vo.titleName;
            this.tf1.text = this.vo.clearanceDesc;
            this.tf2.text = this.vo.heroName;
            this.tf3.text = E.getLang("maoxian2_text2");
            ItemViewFactory.LayoutLabels(this.desctf);
            ItemViewFactory.renderItemSlots(this.rewardCon, this.vo.cfg.f_LevelReward1, 10, 1, "left", SoltItemView, "SoltItemView");
            let _imgcfg = Enemy_ImageProxy.Ins.getCfg(this.vo.cfg.f_EnamyImage);
            this.createMonster(_imgcfg);
            this._plusCtl.setPlus(this.toplug, NewAdventureModel.Ins.adventureData.plus);
        }
        createMonster(_imgcfg) {
            this.disposeAvatar();
            this.monsterView = AvatarFactory.createFightMonsterAvatar(EAvatarDir.Left, _imgcfg.f_MountID, _imgcfg.f_WingID, false, _imgcfg.f_ImageID);
            this.heroCon.addChild(this.monsterView);
            this.monsterView.start();
            this.monsterView.play(EAvatarAnim.NormalStand);
            let monsterSkin = Enemy_ImageProxy.Ins.toTSkin(_imgcfg);
            this.monsterView.mSkin = monsterSkin;
        }
    }
    class CurNewAdventureItemView extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = CurNewAdventureItemView.SignKey;
        }
        static getFromPool() {
            let skin = Laya.Pool.getItemByClass(CurNewAdventureItemView.SignKey, CurNewAdventureItemViewSkin);
            return skin;
        }
        createNode(index) {
            let skin = Laya.Pool.getItemByClass(this.clsKey, CurNewAdventureItemViewSkin);
            this.skin = skin;
            this.skin.vo = this.list[index];
            this.skin.refreshView();
            skin.y = this.y;
            return skin;
        }
    }
    CurNewAdventureItemView.SignKey = "CurNewAdventureItemView";
    class LockNewAdventureItemViewSkin extends ui.views.maoxian2.ui_maoxian2_item2UI {
        constructor() {
            super();
        }
        refershView() {
            f_headViewUpdate(this.icon, this.vo.cfg.f_headIcon);
            if (this.vo.type == EAdventureItemType.Next) {
                this.lock.visible = true;
                this.unlock.visible = false;
                this.tf1.text = this.vo.chapterName;
            }
        }
    }
    class LockNewAdventureItemView extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "LockNewAdventureItemView";
        }
        static getFromPool() {
            let skin = Laya.Pool.getItemByClass("LockNewAdventureItemView", LockNewAdventureItemViewSkin);
            return skin;
        }
        createNode(index) {
            let skin = Laya.Pool.getItemByClass(this.clsKey, LockNewAdventureItemViewSkin);
            this.skin = skin;
            skin.y = this.y;
            this.skin.vo = this.list[index];
            this.skin.refershView();
            return skin;
        }
    }

    exports.CurNewAdventureItemView = CurNewAdventureItemView;
    exports.LockNewAdventureItemView = LockNewAdventureItemView;
    exports.NewAdventureItemView = NewAdventureItemView;
    exports.NewAdventureItemView0 = NewAdventureItemView0;
    exports.NewAdverntRewardSmallIcon = NewAdverntRewardSmallIcon;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class NewAdventureCleanUpView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
        }
        onAddLoadRes() {
        }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.maoxian2.ui_maoxian2_saodan_viewUI();
                this.setMouseBg(this._ui.bg1);
                this.bindClose(this._ui.close1);
                this.saodanBtnCtl = ButtonCtl.CreateBtn(this._ui.saodanBtn, this, this.onSaoDan);
                this.btnList.push(ButtonCtl.CreateBtn(this._ui.freeBtn, this, this.onFreeHandler));
            }
        }
        onFreeHandler() {
            this.onSaoDan();
        }
        onSaoDan() {
            if (SoulModel.Ins.getNotExcludeWears().length >= NewAdventureModel.Ins.cleanUpVo.storageMax) {
                E.ViewMgr.ShowMidLabel(E.getLang("saodanFull"));
                return;
            }
            if (!this.cleanUpVo.mFree && !MainModel.Ins.isItemEnoughSt(this.cleanUpVo.needStr, true)) {
                return;
            }
            let req = new NewAdventureFight_req();
            req.type = ENewAdventure.CleanUp;
            req.adventureId = this.levelId;
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        onInit() {
            let _clearVo = this.Data;
            let levelId = _clearVo.levelId || 5;
            this.levelId = levelId;
            let cleanUpVo = NewAdventureModel.Ins.cleanUpVo;
            this.cleanUpVo = cleanUpVo;
            this.cfg = AdventureLevelProxy.Ins.getByLevelId(levelId);
            ItemViewFactory.clear(this._ui.imgCon, NewAdverntRewardSmallIcon.Sign);
            ItemViewFactory.clear(this._ui.rewardCon, "SoltItemView");
            if (_clearVo.rewardStr) {
                ItemViewFactory.renderItemSlots(this._ui.rewardCon, this.cfg.f_ChapterReward, null, 1.0, "center", SoltItemView, "SoltItemView");
            }
            else if (_clearVo.adverntRewardQuas) {
                ItemViewFactory.renderItemSlots(this._ui.imgCon, _clearVo.adverntRewardQuas, null, 1.0, "center", NewAdverntRewardSmallIcon, NewAdverntRewardSmallIcon.Sign);
            }
            let sub = cleanUpVo.subCount;
            this._ui.tf6.text = `今日剩余${sub}次 (明日刷新)`;
            if (cleanUpVo.mFree) {
                this._ui.freeCon.visible = true;
                this._ui.saodan.visible = false;
            }
            else {
                this._ui.freeCon.visible = false;
                this._ui.saodan.visible = true;
                this._ui.moneyIcon.skin = IconUtils.getIconByCfgId(cleanUpVo.needItemCfgId);
                this._ui.moneyTf.text = cleanUpVo.needMoneyVal + '';
            }
            if (sub <= 0) {
                this.saodanBtnCtl.grayMouseDisable = true;
            }
            else {
                this.saodanBtnCtl.grayMouseDisable = false;
            }
        }
    }

    exports.NewAdventureCleanUpView = NewAdventureCleanUpView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class NewAdventureModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.isCompleteAll = false;
            this.cleanUpVo = new CleanUpVo();
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new NewAdventureModel();
            }
            return this._ins;
        }
        onInitCallBack() {
            this.isCompleteAll = false;
        }
        isLinqguEnd(maxlv) {
            let ids = this.adventureData.rewardAdventureIds;
            return ids.indexOf(maxlv) != -1;
        }
        initMsg() {
            this.Reg(new NewAdventureMainView(EViewType.NewAdventureMain));
            this.Reg(new NewAdventureCleanUpView(EViewType.NewAdventureCleanUp));
            E.MsgMgr.AddMsg(MSGID.NewAdventureInit, this.onNewAdventureInit, this);
            E.MsgMgr.AddMsg(MSGID.NewAdventureUpdate, this.onNewAdventureUpdate, this);
            E.MsgMgr.AddMsg(MSGID.NewAdventureCtnUpdate, this.onNewAdventureCtnUpdate, this);
            E.MsgMgr.AddMsg(MSGID.NewAdventureRewardUpdate, this.onNewAdventureRewardUpdate, this);
        }
        onNewAdventureRewardUpdate(revc) {
            this.adventureData.rewardAdventureIds = revc.rewardAdventureIds;
            this.event(NewAdventureEvent.RewardUpdate);
            this.updateView();
        }
        isLingqu(lvid) {
            return this.adventureData.rewardAdventureIds.indexOf(lvid) != -1;
        }
        onNewAdventureInit(revc) {
            this.adventureData = revc.adventureData;
            this.cleanUpVo.alreadyCount = revc.cnt;
            this.updateAdvent();
        }
        updateAdvent() {
            if (this.adventureData.adventureId == 0) {
                this.isCompleteAll = true;
                this.curCfg = AdventureLevelProxy.Ins.List[AdventureLevelProxy.Ins.List.length - 1];
            }
            else {
                this.isCompleteAll = false;
                this.curCfg = AdventureLevelProxy.Ins.getByLevelId(this.adventureData.adventureId);
            }
        }
        onNewAdventureUpdate(revc) {
            this.adventureData = revc.adventureData;
            this.updateAdvent();
            this.updateView();
        }
        updateView() {
            if (E.ViewMgr.IsOpen(EViewType.NewAdventureMain)) {
                let view = E.ViewMgr.Get(EViewType.NewAdventureMain);
                view.refresh();
            }
            this.refreshRed();
        }
        onNewAdventureCtnUpdate(revc) {
            this.cleanUpVo.alreadyCount = revc.cnt;
            this.updateView();
        }
        hasRed() {
            let l2 = AdventureLevelProxy.Ins.pageList;
            for (let i = 0; i < l2.length; i++) {
                let cfg = l2[i];
                if (this.hasTabPageRed(cfg)) {
                    return true;
                }
            }
            return false;
        }
        hasTabPageRed(cfg) {
            let l = cfg.dataList;
            let curLv = NewAdventureModel.Ins.curCfg.f_Levelid;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let _chapterVo = new AdventureItemVo();
                let unit = AdventureLevelProxy.Ins.getChapterRange(cfg.page, cell.chapterID);
                _chapterVo.range = unit;
                if (curLv >= unit.minLvId && curLv <= unit.maxLvId) {
                    _chapterVo.levelId = curLv;
                    _chapterVo.type = EAdventureItemType.Cur;
                }
                else if (curLv > unit.maxLvId) {
                    _chapterVo.levelId = unit.maxLvId;
                    if (_chapterVo.bClearance) {
                        if (_chapterVo.isPreChapterClear()) {
                            _chapterVo.type = EAdventureItemType.Pre;
                        }
                        else {
                            _chapterVo.type = EAdventureItemType.Clearance;
                        }
                    }
                    else {
                        _chapterVo.type = EAdventureItemType.Pre;
                    }
                }
                else if (curLv < unit.minLvId) {
                    _chapterVo.levelId = unit.minLvId;
                    _chapterVo.type = EAdventureItemType.Next;
                }
                if (_chapterVo.mRed) {
                    return true;
                }
            }
        }
        refreshRed() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.Adventure)) {
                let v = false;
                if (this.hasRed()) {
                    v = true;
                }
                MainModel.Ins.funcSetRed(EFuncDef.Adventure, v);
            }
        }
        updateRed() {
            this.refreshRed();
        }
    }

    exports.NewAdventureModel = NewAdventureModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class StarConfigProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new StarConfigProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Star_Config";
        }
    }
    class StarPocketTipsProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new StarPocketTipsProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Star_PocketTips";
        }
    }
    class StarShopProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new StarShopProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Star_Shop";
        }
    }
    class StarAwardProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new StarAwardProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Star_RankReward";
        }
    }
    class StarWheelProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new StarWheelProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Star_Wheel";
        }
    }

    exports.StarAwardProxy = StarAwardProxy;
    exports.StarConfigProxy = StarConfigProxy;
    exports.StarPocketTipsProxy = StarPocketTipsProxy;
    exports.StarShopProxy = StarShopProxy;
    exports.StarWheelProxy = StarWheelProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class XXZDZModel extends Laya.EventDispatcher {
        constructor() {
            super(...arguments);
            this.isFight = false;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new XXZDZModel();
            }
            return this._ins;
        }
        isRedTip() {
            if (!TaskModel.Ins.isFuncOpen(EFuncDef.XXZDZ)) {
                return false;
            }
            if (this.isRankAwardRedTip() || this.isAwardRedTip() || this.isZhuanPanRedTip()) {
                return true;
            }
            return false;
        }
        isRankAwardRedTip() {
            if (this.rankRewardState) {
                return true;
            }
            return false;
        }
        isAwardRedTip() {
            if (this.rewardList && this.rewardList.length) {
                return true;
            }
            return false;
        }
        isZhuanPanRedTip() {
            let val = MainModel.Ins.mRoleData.getVal(ECellType.JGYS);
            let max = StarConfigProxy.Ins.GetDataById(1).f_keymax;
            if (val >= max) {
                return true;
            }
            return false;
        }
    }
    XXZDZModel.UPDATA_VIEW = "UPDATA_VIEW";
    XXZDZModel.UPDATA_ZHUANPAN_VIEW = "UPDATA_ZHUANPAN_VIEW";
    XXZDZModel.UPDATA_TIAOZHAN_VIEW = "UPDATA_TIAOZHAN_VIEW";
    XXZDZModel.UPDATA_RIZHI_VIEW = "UPDATA_RIZHI_VIEW";
    XXZDZModel.UPDATA_RANK_VIEW = "UPDATA_RANK_VIEW";
    XXZDZModel.UPDATA_RANKAWARD_VIEW = "UPDATA_RANKAWARD_VIEW";
    XXZDZModel.UPDATA_SHOP_VIEW = "UPDATA_SHOP_VIEW";
    XXZDZModel.RED_TIP = "RED_TIP";

    exports.XXZDZModel = XXZDZModel;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class ZuoQiEvent {
	}
	ZuoQiEvent.UpdateInfoEvt = "UpdateInfoEvt";
	ZuoQiEvent.RideOwnerInfoUpdate = "RideOwnerInfoUpdate";
	ZuoQiEvent.TimeChange = "TimeChange";
	ZuoQiEvent.StorgeUpdate = "StorgeUpdate";
	ZuoQiEvent.DispathMission = "DispathMission";
	ZuoQiEvent.InitRide = "InitRide";
	ZuoQiEvent.RedUpdate = "RedUpdate";
	ZuoQiEvent.TJSELECT = "TJSELECT";
	ZuoQiEvent.ReturnPreView = "ReturnPreView";
	ZuoQiEvent.ReturnMountSucceed = "ReturnMountSucceed";
	ZuoQiEvent.MountRefinement = "MountRefinement";

	exports.ZuoQiEvent = ZuoQiEvent;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoQiTJItemCtl {
        constructor(skin) {
            this.skin = skin;
            this.skin.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            this.skin.on(Laya.Event.CLICK, this, this.onClick);
        }
        onClick() {
            ZuoQiModel.Ins.tjSelectId = this._data;
            ZuoQiModel.Ins.event(ZuoQiEvent.TJSELECT);
        }
        onAdd() {
            ZuoQiModel.Ins.on(ZuoQiEvent.TJSELECT, this, this.onSelect);
        }
        onRemove() {
            ZuoQiModel.Ins.off(ZuoQiEvent.TJSELECT, this, this.onSelect);
        }
        onSelect() {
            if (this._flag) {
                this.skin.sel.visible = false;
            }
            else {
                if (this._data == ZuoQiModel.Ins.tjSelectId) {
                    this.skin.sel.visible = true;
                }
                else {
                    this.skin.sel.visible = false;
                }
            }
        }
        setData(id, flag = false) {
            this._data = id;
            this._flag = flag;
            let cfg = Mount_ListProxy.Ins.getCfg(id);
            this.skin.qua.skin = IconUtils.getQuaIcon(cfg.f_Quality);
            this.skin.icon.skin = IconUtils.getHorseIcon(cfg.f_MountID);
            let qcfg = MountConfigProxy.Ins.getByQualityID(cfg.f_Quality);
            this.skin.tf1.text = IconUtils.str2Lv(qcfg.f_MaxLevel);
            let _statVal = qcfg.f_MaxStar;
            ItemViewFactory.setStar(this.skin.stars, _statVal, _statVal);
            if (this._flag) {
                this.skin.sel.visible = false;
            }
            else {
                if (cfg.f_MountID == ZuoQiModel.Ins.tjSelectId) {
                    this.skin.sel.visible = true;
                }
                else {
                    this.skin.sel.visible = false;
                }
            }
        }
    }

    exports.ZuoQiTJItemCtl = ZuoQiTJItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoQiTJItem extends ui.views.zuoqi.ui_zuoqiTJItemUI {
        constructor() {
            super();
            this.ctl = new ZuoQiTJItemCtl(this);
        }
    }

    exports.ZuoQiTJItem = ZuoQiTJItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoqiTJLabel extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "ZuoqiTJLabel";
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ui.views.zuoqi.ui_zuoqiTJLabelUI);
            let vo = this.list[index];
            let ecfg = EquipmentQualityProxy.Ins.GetDataById(vo);
            let qcfg = MountConfigProxy.Ins.getByQualityID(vo);
            _skin.lab.text = "[" + ecfg.f_EquipmentLevel + "坐骑]";
            _skin.y = this.y;
            return _skin;
        }
    }
    class ZuoqiTJItem extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "ZuoqiTJItem";
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ZuoQiTJItem);
            _skin.ctl.setData(this.list[index].f_MountID);
            _skin.x = index * _skin.width;
            _skin.y = this.y;
            return _skin;
        }
    }
    class ZuoQiTJView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this._panelCtl = new ScrollPanelControl();
        }
        onAddLoadRes() {
            this.addAtlas('zuoqi.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.zuoqi.ui_zuoqiTJViewUI;
                this.bindClose(this._ui.close1);
                this.itemCtl = new ZuoQiTJItemCtl(this._ui.item);
                this._panelCtl.init(this._ui.panel);
                this._plusCtl = FontCtlFactory.createPlus();
                this._ui.list.itemRender = ui.views.zuoqi.ui_zuoqiTJAttrItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRendler);
                this._ui.list1.itemRender = ui.views.zuoqi.ui_zuoqiTJAttrItemUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRendler1);
                this._ui.btn_tip.on(Laya.Event.CLICK, this, this.onTipClick);
            }
        }
        onTipClick(e) {
            e.stopPropagation();
            let arr = this._cfg.f_7StarSkill.split(";");
            let name = arr[1].split("|")[0];
            let dec = arr[1].split("|")[1];
            MainModel.Ins.showSmallTips(name, dec, this._ui.btn_tip);
        }
        onInit() {
            ZuoQiModel.Ins.on(ZuoQiEvent.TJSELECT, this, this.onSelect);
            ZuoQiModel.Ins.tjSelectId = 27;
            this.updataView();
            this.refreshPanel();
        }
        onExit() {
            ZuoQiModel.Ins.off(ZuoQiEvent.TJSELECT, this, this.onSelect);
        }
        onSelect() {
            this.updataView();
        }
        onItemRendler(item) {
            item.tf1.text = item.dataSource.name;
            item.valTf.text = item.dataSource.value;
        }
        onItemRendler1(item) {
            item.tf1.text = item.dataSource.name;
            item.tf1.color = "#CF47CA";
            item.valTf.text = item.dataSource.value;
            item.valTf.color = "#CF47CA";
        }
        updataView() {
            this.itemCtl.setData(ZuoQiModel.Ins.tjSelectId, true);
            this._cfg = Mount_ListProxy.Ins.getCfg(ZuoQiModel.Ins.tjSelectId);
            let ecfg = EquipmentQualityProxy.Ins.GetDataById(this._cfg.f_Quality);
            let qcfg = MountConfigProxy.Ins.getByQualityID(this._cfg.f_Quality);
            let color = QualityUtils.getQuaColor(this._cfg.f_Quality);
            if (this._cfg.f_Quality >= 11) {
                this._ui.lab_1.visible = this._ui.lab_2.visible = this._ui.btn_tip.visible = true;
                this._ui.lab_2.text = this._cfg.f_SkillName;
            }
            else {
                this._ui.lab_1.visible = this._ui.lab_2.visible = this._ui.btn_tip.visible = false;
            }
            this._ui.nameTf.text = this._cfg.f_MountName;
            this._ui.quaTf.text = ecfg.f_EquipmentLevel;
            this._ui.nameTf.color = color;
            this._ui.quaTf.color = color;
            this._ui.lab_lv.text = "等级上限" + qcfg.f_MaxLevel + "级";
            let array = [];
            let num = 0;
            for (let i = 0; i < Mount_ValueProxy.Ins.List.length; i++) {
                let data = Mount_ValueProxy.Ins.List[i];
                if (this._cfg.f_Quality >= 11) {
                    if (!data.f_isQuality) {
                        continue;
                    }
                }
                else {
                    if (data.f_isQuality) {
                        continue;
                    }
                }
                let obj = {};
                let starweight = data.f_starweight / 10000;
                obj.name = MainModel.Ins.getAttrNameIdByID(data.f_attr_id) + ":";
                let value = (qcfg.f_MaxLevel * data.f_levelweight + this._cfg.f_Quality * data.f_quaweight) * (4 * (1 + ((qcfg.f_MaxStar - 1) * starweight)));
                value = value + qcfg.f_MaxLevel * this._cfg.f_Quality * data.f_adjustweight;
                value = Math.ceil(value);
                obj.value = attrConvert(data.f_attr_id, value) + "";
                array.push(obj);
                if (data.f_attr_id == 10003) {
                    num += value * 0.5;
                }
                else if (data.f_attr_id == 10004) {
                    num += value * 2;
                }
                else if (data.f_attr_id == 10005) {
                    num += value * 6;
                }
            }
            this._ui.list.array = array;
            this._plusCtl.setValue(this._ui.plusCon, StringUtil.val2Atlas(num));
            let arr = [];
            if (this._cfg.f_Skill1) {
                let obj = {};
                obj.name = MainModel.Ins.getAttrNameIdByID(this._cfg.f_Skill1) + ":";
                obj.value = attrConvert(this._cfg.f_Skill1, this._cfg.f_Skill1Value) + "";
                arr.push(obj);
            }
            if (this._cfg.f_Skill2) {
                let obj = {};
                obj.name = MainModel.Ins.getAttrNameIdByID(this._cfg.f_Skill2) + ":";
                obj.value = attrConvert(this._cfg.f_Skill2, this._cfg.f_Skill2Value) + "";
                arr.push(obj);
            }
            if (this._cfg.f_Skill3) {
                let obj = {};
                obj.name = MainModel.Ins.getAttrNameIdByID(this._cfg.f_Skill3) + ":";
                obj.value = attrConvert(this._cfg.f_Skill3, this._cfg.f_Skill3Value) + "";
                arr.push(obj);
            }
            if (this._cfg.f_Skill4) {
                let obj = {};
                obj.name = MainModel.Ins.getAttrNameIdByID(this._cfg.f_Skill4) + ":";
                obj.value = attrConvert(this._cfg.f_Skill4, this._cfg.f_Skill4Value) + "";
                arr.push(obj);
            }
            if (this._cfg.f_Skill5) {
                let obj = {};
                obj.name = MainModel.Ins.getAttrNameIdByID(this._cfg.f_Skill5) + ":";
                obj.value = attrConvert(this._cfg.f_Skill5, this._cfg.f_Skill5Value) + "";
                arr.push(obj);
            }
            this._ui.list1.array = arr;
            this._ui.lab_tj.text = "通过" + this._cfg.f_getmethodinfo;
        }
        refreshPanel() {
            let arr = this.getDataList();
            this._panelCtl.clear();
            for (let i = 0; i < arr.length; i++) {
                if (arr[i].qua != "") {
                    this._panelCtl.split([arr[i].qua], ZuoqiTJLabel, 28);
                }
                else {
                    this._panelCtl.split(arr[i].list, ZuoqiTJItem, 120, 0, 5);
                }
            }
            this._panelCtl.end();
        }
        getDataList() {
            let fzmap = {};
            let array = [];
            let arr = Mount_ListProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                if (!fzmap[arr[i].f_Quality]) {
                    fzmap[arr[i].f_Quality] = [];
                }
                fzmap[arr[i].f_Quality].push(arr[i]);
            }
            for (let ele in fzmap) {
                let voo = {};
                voo.qua = "";
                voo.list = fzmap[ele];
                array.unshift(voo);
                let vo = {};
                vo.qua = parseInt(ele);
                vo.list = [];
                array.unshift(vo);
            }
            return array;
        }
    }

    exports.ZuoQiTJView = ZuoQiTJView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function f_setStar(headSkin, v) {
        ItemViewFactory.setStar(headSkin.stars, v, v);
        if (v > 0) {
            headSkin.starbg.visible = true;
        }
        else {
            headSkin.starbg.visible = false;
        }
    }
    class ZuoQiSlotCtl {
        constructor(skin, _mouseClick = false) {
            this._mSelected = true;
            this._mCk = true;
            this.skin = skin;
            this.mSelected = false;
            this.mCkSelected = false;
            if (_mouseClick) {
                this.skin.on(Laya.Event.CLICK, this, this.onClickHandler);
            }
        }
        get vo() {
            return this.mData;
        }
        set star(v) {
            f_setStar(this.skin, v);
        }
        onClickHandler() {
            if (this.clickHandler) {
                this.clickHandler.runWith(this.vo);
            }
        }
        set mCkSelected(v) {
            if (this._mCk != v) {
                this.skin.ck.visible = v;
                this._mCk = v;
            }
        }
        set mSelected(v) {
            if (this._mSelected != v) {
                this.skin.sel.visible = v;
                this._mSelected = v;
            }
        }
        empty() {
            this.skin.typename.text = "";
            this.skin.icon.skin = "";
            this.skin.tf1.text = "";
            this.skin.qua.skin = "";
            this.star = 0;
            this.skin.bg.visible = true;
        }
        refresh() {
            this.skin.icon.skin = "";
            this.skin.tf1.text = "";
            this.skin.starbg.visible = false;
            this.skin.bg.visible = false;
            if (!this.vo || this.vo && this.vo.isEmpty) {
                this.star = 0;
                this.skin.qua.skin = IconUtils.Bg;
                let cfg = EquipmentIDProxy.Ins.GetDataById(EEquipType.ZuoQi);
                if (cfg) {
                    this.skin.typename.text = cfg.f_name;
                }
            }
            else {
                let str = "";
                this.skin.typename.text = "";
                let _icon;
                _icon = this.vo.getIcon();
                this.skin.icon.skin = _icon;
                this.skin.tf1.text = IconUtils.str2Lv(this.vo.lv) + str;
                this.skin.qua.skin = this.vo.getQualityIcon();
                this.star = this.vo.starLv;
            }
        }
    }

    exports.ZuoQiSlotCtl = ZuoQiSlotCtl;
    exports.f_setStar = f_setStar;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoQiSlotView {
        constructor(skin) {
            this.ctl = new ZuoQiSlotCtl(skin);
        }
        setData(_vo) {
            this.ctl.mData = _vo;
            this.ctl.refresh();
        }
    }

    exports.ZuoQiSlotView = ZuoQiSlotView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoqiBackView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("zuoqi.atlas");
        }
        onExit() { }
        onFirstInit() {
            if (!this._ui) {
                this.model = ZuoQiModel.Ins;
                this.UI = this._ui = new ui.views.zuoqi.ui_zuoqi_back_viewUI();
                this.bindClose(this._ui.close1);
                this.slotView = new ZuoQiSlotView(this._ui.slot0);
                ButtonCtl.CreateBtn(this._ui.washBtn, this, this.onWashHandler);
                ButtonCtl.CreateBtn(this._ui.canelBtn, this, this.Close);
            }
        }
        onWashHandler() {
            if (this.cfg) {
                if (MainModel.Ins.isItemEnoughSt(this.cfg.f_Ruturn, true)) {
                    this.model.once(ZuoQiEvent.ReturnMountSucceed, this, this.Close);
                    let req = new MountReturn_req();
                    req.id = this._zqVo.rideId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        onInit() {
            this._zqVo = this.Data;
            this.slotView.setData(this._zqVo);
            this._ui.nameTf.text = this._zqVo.getName();
            this._ui.nameTf.color = this._zqVo.getQuaColor();
            let qua = this._zqVo.quality;
            let cfg = MountConfigProxy.Ins.getByQualityID(qua);
            this.cfg = cfg;
            if (cfg) {
                let _itemVo = ItemViewFactory.convertItem(cfg.f_Ruturn);
                this._ui.goldicon.skin = _itemVo.getIcon();
                this._ui.goldTf.text = StringUtil.val2m(_itemVo.count);
            }
            this.model.once(ZuoQiEvent.ReturnPreView, this, this.showAttr);
            let req = new MountReturnPreView_req();
            req.id = this._zqVo.rideId;
            SocketMgr.Ins.SendMessageBin(req);
        }
        showAttr() {
            let _list1 = this.model.preRewardList;
            this._ui.icon2.visible = false;
            this._ui.tf2.visible = false;
            this._ui.icon4.visible = this._ui.tf4.visible = false;
            this._ui.icon1.skin = IconUtils.getIconByCfgId(_list1[0].id);
            this._ui.tf1.text = StringUtil.val2m(_list1[0].count);
            if (_list1.length > 1) {
                this._ui.icon2.visible = true;
                this._ui.tf2.visible = true;
                this._ui.icon2.skin = IconUtils.getIconByCfgId(_list1[1].id);
                this._ui.tf2.text = StringUtil.val2m(_list1[1].count);
                let _item2 = _list1[2];
                if (_item2) {
                    this._ui.icon4.visible = this._ui.tf4.visible = true;
                    this._ui.icon4.skin = IconUtils.getIconByCfgId(_item2.id);
                    this._ui.tf4.text = StringUtil.val2m(_item2.count);
                }
            }
            this.layoutView(_list1.length);
        }
        layoutView(itemCount) {
            let w = this._ui.icon1.width + this._ui.tf1.textField.width + this._ui.tf0.textField.width;
            if (itemCount > 1) {
                w += this._ui.icon2.width + this._ui.tf2.textField.width;
            }
            if (this._ui.icon4.visible) {
                w += this._ui.tf4.textField.width + this._ui.icon4.width;
            }
            let ox = (this._ui.width - w) / 2;
            this._ui.tf0.x = ox;
            this._ui.icon1.x = this._ui.tf0.x + this._ui.tf0.textField.width;
            this._ui.tf1.x = this._ui.icon1.x + this._ui.icon1.width;
            this._ui.icon2.x = this._ui.tf1.x + this._ui.tf1.textField.width;
            this._ui.tf2.x = this._ui.icon2.x + this._ui.icon2.width;
            this._ui.icon4.x = this._ui.tf2.x + this._ui.tf2.textField.width;
            this._ui.tf4.x = this._ui.icon4.x + this._ui.icon4.width;
        }
    }

    exports.ZuoqiBackView = ZuoqiBackView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoQiWashItemView extends ui.views.zuoqi.ui_zuoqi_wash_item_attrUI {
        constructor() {
            super();
            this.isOld = true;
            this.defaultColor = this.valTf.color;
            this.lockedCtl = ButtonCtl.CreateBtn(this.locked, this, this.onLockHandler);
            this.lockedCtl.visible = false;
        }
        get curData() {
            return this._data;
        }
        onLockHandler() {
        }
        refresh(vo) {
            this._data = this.dataSource;
            this.mColor = EquipmentQualityProxy.Ins.getByQuaDefault(this.defaultColor, this._data.quality);
            this.nametf.text = MainModel.Ins.getAttrNameIdByID(this._data.id);
            let ext = attrConvert(this._data.id, this._data.valueExtra);
            this.valTf.text = `${attrConvert(this._data.id, this._data.value)} (+${ext})`;
        }
        set mColor(v) {
            this.valTf.color = v;
            this.nametf.color = v;
        }
    }
    class ZuoQiWashLeftItemView extends ZuoQiWashItemView {
        constructor() {
            super();
            this.washView = E.ViewMgr.Get(EViewType.MountWash);
            this.lockStyle = true;
        }
        refresh(vo) {
            super.refresh(vo);
            this.lockedCtl.visible = false;
            this.rideVo = vo;
            if (this.isOld) {
                if (this.rideVo.mWashLock) {
                    this.lockedCtl.visible = true;
                }
            }
        }
        set lockStyle(v) {
            if (v) {
                this.locked.skin = "remote/zuoqi/zqyh_lock_1.png";
            }
            else {
                this.locked.skin = "remote/zuoqi/zqyh_lock.png";
            }
        }
        get isLocked() {
            return this.locked.skin == "remote/zuoqi/zqyh_lock.png";
        }
        onLockHandler() {
            if (this.washView.hasCancel) {
                return;
            }
            if (this.rideVo.mWashLock) {
                if (!this.isLocked && this.washView.isCanLock ||
                    this.isLocked) {
                    this.lockStyle = this.isLocked;
                    this.washView.onRefreshEvt();
                }
                else {
                    E.ViewMgr.ShowMidError(E.getLang("mount_3"));
                }
            }
        }
    }
    class ZuoQiWashRightItemView extends ZuoQiWashLeftItemView {
        constructor() {
            super(...arguments);
            this.isOld = false;
        }
    }

    exports.ZuoQiWashLeftItemView = ZuoQiWashLeftItemView;
    exports.ZuoQiWashRightItemView = ZuoQiWashRightItemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Mount_Refinement_AttributeQuality extends BaseCfg {
        GetTabelName() {
            return "t_Mount_Refinement_AttributeQuality";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Mount_Refinement_AttributeQuality();
            }
            return this._ins;
        }
    }
    class ZuoqiWashView extends ViewBase {
        constructor() {
            super(...arguments);
            this.maxQua = 7;
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("zuoqi.atlas");
        }
        onExit() {
            for (let i = 0; i < this._ui.list1.length; i++) {
                let cell = this._ui.list1.getCell(i);
                if (cell.curData && cell.isLocked) {
                    cell.lockStyle = true;
                }
            }
            this.model.off(ZuoQiEvent.MountRefinement, this, this.onRefreshEvt);
            MainModel.Ins.off(MainEvent.ValChange, this, this.onValChange);
        }
        onFirstInit() {
            if (!this._ui) {
                this.model = ZuoQiModel.Ins;
                this.UI = this._ui = new ui.views.zuoqi.ui_zuoqi_wash_viewUI();
                this.bindClose(this._ui.close1);
                this.slotView = new ZuoQiSlotView(this._ui.slot0);
                ButtonCtl.CreateBtn(this._ui.switchBtn, this, this.onSwitchHandler);
                ButtonCtl.CreateBtn(this._ui.washBtn, this, this.onWashHandler);
                this._plusCtl = FontCtlFactory.createPlus();
                this._ui.list1.itemRender = ZuoQiWashLeftItemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list2.itemRender = ZuoQiWashRightItemView;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.showDeccList.itemRender = ui.views.zuoqi.ui_zuoqi_attr_showUI;
                this._ui.showDeccList.renderHandler = new Laya.Handler(this, this.onAttrShow);
                this._ui.showDeccList.array = t_Mount_Refinement_AttributeQuality.Ins.List;
                ButtonCtl.CreateBtn(this._ui.helpbtn, this, this.onHelpEvt);
            }
        }
        onAttrShow(item) {
            let cfg = item.dataSource;
            let arr = cfg.f_QualityShow.split("|");
            item.valTf.text = `${StringUtil.toPercent(arr[0])}~${StringUtil.toPercent(arr[1])}`;
            item.valTf.color = "#" + EquipmentQualityProxy.Ins.getByQua(cfg.f_QualityID).f_Color;
        }
        onHelpEvt() {
            E.ViewMgr.openHelpView("mount_6", "mount_5");
        }
        onItemRender(item, index) {
            item.refresh(this._zqVo);
            if (item instanceof ZuoQiWashRightItemView) {
                let vo = item.dataSource;
                let leftData = this._zqVo.equipVo.mountAttrList[index];
                if (leftData && vo && vo.id == leftData.id && vo.value == leftData.value) {
                    item.visible = false;
                }
                else {
                    item.visible = true;
                }
            }
        }
        onSwitchHandler() {
            let tips;
            for (let i = 0; i < this._zqVo.equipVo.mountAttrList.length; i++) {
                let cell = this._zqVo.equipVo.mountAttrList[i];
                if (!this.isLocked(cell.id) && cell.quality >= this.maxQua) {
                    tips = true;
                }
            }
            if (tips) {
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.getLang("mount_8"), new Laya.Handler(this, this.onSwitch));
            }
            else {
                this.onSwitch();
            }
        }
        onSwitch() {
            let req = new MountRefinementReplace_req();
            req.status = 0;
            req.id = this._zqVo.rideId;
            SocketMgr.Ins.SendMessageBin(req);
        }
        isNeedTips() {
            for (let i = 0; i < this._zqVo.washList.length; i++) {
                let cell = this._zqVo.washList[i];
                if (cell.quality >= this.maxQua && !this.isLocked(cell.id)) {
                    return true;
                }
            }
        }
        onWashHandler() {
            if (this.hasCancel) {
                let req = new MountRefinementReplace_req();
                req.id = this._zqVo.rideId;
                req.status = 1;
                SocketMgr.Ins.SendMessageBin(req);
            }
            else {
                if (this.isNeedTips()) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.getLang("mount_7"), new Laya.Handler(this, this.okWash));
                }
                else {
                    this.okWash();
                }
            }
        }
        get fixedIds() {
            let len = this._ui.list1.length;
            let ids = [];
            for (let i = 0; i < len; i++) {
                let cell = this._ui.list1.getCell(i);
                if (cell.curData && cell.isLocked) {
                    ids.push(cell.curData.id);
                }
            }
            return ids;
        }
        okWash() {
            let req = new MountRefinement_req();
            req.id = this._zqVo.rideId;
            req.fixedIds = this.fixedIds;
            req.refinementItem = this.result.refinementItem;
            SocketMgr.Ins.SendMessageBin(req);
        }
        find(washList, id) {
            for (let i = 0; i < washList.length; i++) {
                if (washList[i].id == id) {
                    return washList[i];
                }
            }
        }
        isLocked(id) {
            let len = this._ui.list1.length;
            for (let i = 0; i < len; i++) {
                let cell = this._ui.list1.getCell(i);
                if (cell.curData && cell.curData.id == id && cell.isLocked) {
                    return true;
                }
            }
        }
        buildAttr(mountAttrList, washList) {
            for (let i = 0; i < mountAttrList.length; i++) {
                let cell = mountAttrList[i];
                if (this.isLocked(cell.id)) {
                    let f = this.find(washList, cell.id);
                    if (f) {
                        let fIndex = washList.indexOf(f);
                        if (fIndex != i) {
                            let temp = f;
                            let a = washList[i];
                            washList[i] = temp;
                            washList[fIndex] = a;
                        }
                    }
                }
            }
            return washList;
        }
        get lockedCount() {
            let len = this._ui.list1.length;
            let lockedCount = 0;
            for (let i = 0; i < len; i++) {
                let cell = this._ui.list1.getCell(i);
                if (cell.isLocked) {
                    lockedCount++;
                }
            }
            return lockedCount;
        }
        get isCanLock() {
            if (this.lockedCount + 1 == this._ui.list1.length) {
                return false;
            }
            else {
                return true;
            }
        }
        get hasCancel() {
            return this._zqVo && this._zqVo.washList.length > 0;
        }
        onRefreshEvt() {
            this._zqVo = this.model.getMountVoById(this.Data);
            this.slotView.setData(this._zqVo);
            let _zqVo = this._zqVo;
            let color = _zqVo.getQuaColor();
            this._ui.nameTf.text = _zqVo.getName();
            this._ui.quaTf.text = _zqVo.getQuaText();
            this._ui.nameTf.color = color;
            this._ui.quaTf.color = color;
            this._plusCtl.setValue(this._ui.plusCon, StringUtil.val2Atlas(_zqVo.plus || 0));
            let l1 = _zqVo.equipVo.mountAttrList;
            this._ui.list1.array = l1;
            let rightWashs = this.buildAttr(l1, _zqVo.washList);
            this._ui.list2.array = rightWashs;
            if (this.hasCancel) {
                this._ui.tipsTf.visible = false;
                this._ui.switchBtn.visible = true;
                this._ui.washCon.x = 369;
                this._ui.valTf.text = E.getLang("Cancel");
                this._ui.goldicon.visible = this._ui.goldTf.visible = false;
            }
            else {
                this._ui.valTf.text = E.getLang("mount_6");
                this._ui.goldicon.visible = this._ui.goldTf.visible = true;
                this._ui.tipsTf.visible = true;
                this._ui.switchBtn.visible = false;
                this._ui.washCon.x = 215;
            }
            this.result = this.model.getWashNeedItemId(this._zqVo.quality, this.lockedCount);
            let _needItem = this.result.itemVo;
            this._ui.goldicon.skin = _needItem.getIcon();
            this._ui.goldTf.text = _needItem.count.toString();
            this.onValChange();
        }
        onInit() {
            this._zqVo = this.model.getMountVoById(this.Data);
            this.model.on(ZuoQiEvent.MountRefinement, this, this.onRefreshEvt);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onValChange);
            this.onRefreshEvt();
        }
        onValChange() {
            let qua = this._zqVo.quality;
            let cfg = MountConfigProxy.Ins.getByQualityID(qua);
            let arr = cfg.f_Refinement.split(";");
            let itemid = parseInt(arr[0].split("-")[0]);
            let goldId = parseInt(arr[1].split("-")[0]);
            MainModel.Ins.setItem(this._ui.yuanbaoIcon, this._ui.yuanbaoTf, itemid);
            MainModel.Ins.setItem(this._ui.needItemIcon, this._ui.needitemTf, goldId);
        }
    }

    exports.ZuoqiWashView = ZuoqiWashView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EFeastType) {
        EFeastType[EFeastType["Ride"] = 1] = "Ride";
        EFeastType[EFeastType["Gem"] = 2] = "Gem";
        EFeastType[EFeastType["FuJiang"] = 3] = "FuJiang";
        EFeastType[EFeastType["Pet"] = 4] = "Pet";
        EFeastType[EFeastType["ShenBin"] = 5] = "ShenBin";
    })(exports.EFeastType || (exports.EFeastType = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BaoShiCfgProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let type = this.List[i].f_GemColor;
                if (!this._map[type]) {
                    this._map[type] = [];
                }
                this._map[type].push(this.List[i].f_GemAttrid);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new BaoShiCfgProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gem_List";
        }
        getAttrArrByType(type) {
            return this._map[type];
        }
        getCfgById(gemId) {
            return this.List.find(item => item.f_Gemid == gemId);
        }
        getBaoShiIcon(skin) {
            return `o/gem/${skin}`;
        }
        getNameByType(type) {
            let st = "";
            switch (type) {
                case 1:
                    st = "力量";
                    break;
                case 2:
                    st = "敏捷";
                    break;
                case 3:
                    st = "智力";
                    break;
                case 4:
                    st = "铁壁";
            }
            return st;
        }
    }
    class BaoShiShopProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new BaoShiShopProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gem_Shop";
        }
    }
    class BaoShiSelProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new BaoShiSelProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gem_Config";
        }
    }
    class FaZhengListProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new FaZhengListProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gem_Formation_List";
        }
        getCfgById(fzId) {
            return this.List.find(item => item.f_Formationid == fzId);
        }
    }
    class BaoShiLvProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let id = this.List[i].f_Gemid;
                if (!this._map[id]) {
                    this._map[id] = {};
                }
                this.maxLv = 0;
                let lv = this.List[i].f_GemLevel;
                this._map[id][lv] = this.List[i];
                this.maxLv = Math.max(lv, this.maxLv);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new BaoShiLvProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gem_Attribute";
        }
        getCfgByIdAndLv(id, lv) {
            return this._map[id][lv];
        }
    }
    class FaZhengProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let id = this.List[i].f_Formationid;
                if (!this._map[id]) {
                    this._map[id] = [];
                }
                this._map[id].push(this.List[i]);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FaZhengProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gem_Formation";
        }
        getCfgById(id) {
            return this._map[id];
        }
    }
    class BaoShiTransformProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new BaoShiTransformProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gem_Transform";
        }
        getCfgByLv(lv) {
            return this.List.find(item => item.f_GemLevel == lv);
        }
    }
    class BaoShiResonanceProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new BaoShiResonanceProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gem_Attribute_Resonance";
        }
    }
    class BaoShiLifeLineProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new BaoShiLifeLineProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gem_Attribute_LifeLine";
        }
    }

    exports.BaoShiCfgProxy = BaoShiCfgProxy;
    exports.BaoShiLifeLineProxy = BaoShiLifeLineProxy;
    exports.BaoShiLvProxy = BaoShiLvProxy;
    exports.BaoShiResonanceProxy = BaoShiResonanceProxy;
    exports.BaoShiSelProxy = BaoShiSelProxy;
    exports.BaoShiShopProxy = BaoShiShopProxy;
    exports.BaoShiTransformProxy = BaoShiTransformProxy;
    exports.FaZhengListProxy = FaZhengListProxy;
    exports.FaZhengProxy = FaZhengProxy;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class DuanWuEvent {
	}
	DuanWuEvent.MoneyUpdate = "MoneyUpdate";
	DuanWuEvent.MSGUpdate = "MSG_Update";
	DuanWuEvent.RankUpdate = "RankUpdate";

	exports.DuanWuEvent = DuanWuEvent;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Alternation_Recharge extends BaseCfg {
        GetTabelName() {
            return "t_Alternation_Recharge";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Alternation_Recharge();
            }
            return this._ins;
        }
        titleId(type) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_RewardTitle && cfg.f_ActivityType == type) {
                    return cfg.f_RewardTitle;
                }
            }
        }
        getListByType(type) {
            let l = this.List;
            let out = [];
            for (let i = 0; i < l.length; i++) {
                let o = l[i];
                if (o.f_ActivityType == type) {
                    out.push(o);
                }
            }
            return out;
        }
    }
    class t_Alternation_MountPack extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Alternation_MountPack();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alternation_MountPack";
        }
        getListByType(type) {
            let l = this.List;
            let out = [];
            for (let i = 0; i < l.length; i++) {
                let o = l[i];
                if (o.f_PackType == type) {
                    out.push(o);
                }
            }
            return out;
        }
    }
    class t_Alternation_Rank extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Alternation_Rank();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alternation_Rank";
        }
        getListByType(type) {
            let l = this.List;
            let out = [];
            for (let i = 0; i < l.length; i++) {
                let o = l[i];
                if (o.f_ActivityType == type) {
                    out.push(o);
                }
            }
            return out;
        }
        getFreeByType(type) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let o = l[i];
                if (o.f_ActivityType == type && o.f_RewardTitle) {
                    return o;
                }
            }
        }
    }
    class t_Gem_Shop_Activity extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Gem_Shop_Activity();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Gem_Shop_Activity";
        }
    }
    class t_Alternation_GemScore extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Alternation_GemScore();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alternation_GemScore";
        }
        getByLevel(lv) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_GemLevel == lv) {
                    return cfg;
                }
            }
        }
    }
    class t_Alternation_Gem_Config extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Alternation_Gem_Config();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alternation_Gem_Config";
        }
    }
    class t_Alternation_Rookie_Rank extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Alternation_Rookie_Rank();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alternation_Rookie_Rank";
        }
        getListByType(type) {
            let l = this.List;
            let out = [];
            for (let i = 0; i < l.length; i++) {
                let o = l[i];
                if (o.f_PackType == type) {
                    out.push(o);
                }
            }
            return out;
        }
        getFreeByType(type) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let o = l[i];
                if (o.f_PackType == type) {
                    return o;
                }
            }
        }
    }

    exports.t_Alternation_GemScore = t_Alternation_GemScore;
    exports.t_Alternation_Gem_Config = t_Alternation_Gem_Config;
    exports.t_Alternation_MountPack = t_Alternation_MountPack;
    exports.t_Alternation_Rank = t_Alternation_Rank;
    exports.t_Alternation_Recharge = t_Alternation_Recharge;
    exports.t_Alternation_Rookie_Rank = t_Alternation_Rookie_Rank;
    exports.t_Gem_Shop_Activity = t_Gem_Shop_Activity;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DuanwuSlotVo {
    }
    class DuanWuLeichongSlotItemView extends ui.views.main.ui_slot_itemUI {
        constructor() {
            super();
            this.ctl = new ItemSlotCtl(this);
        }
        setData(vo) {
            this.vo = vo;
            this.ctl.offAll(Laya.Event.CLICK);
            this.ctl.setData(vo.itemVo);
            if (vo.titleId) {
                this.icon.skin = ChengHaoListProxy.Ins.getSmallIcon(vo.titleId);
                this.tf1.text = "";
                this.quality.skin = IconUtils.getQuaIcon(5);
                this.ctl.on(Laya.Event.CLICK, this, this.onTipsHandler);
            }
        }
        onTipsHandler() {
            let cfg = ChengHaoListProxy.Ins.getCfgByID(this.vo.titleId);
            MainModel.Ins.showSmallTips(cfg.f_TitleName, cfg.f_titleDec, this);
        }
    }
    class DuanWuLeichongItemView extends ui.views.duanwu.ui_duanwu_leichong_itemUI {
        constructor() {
            super();
            this.lingquCtl = ButtonCtl.CreateBtn(this.lingquBtn, this, this.onLingQu);
            this.zhekouimg.visible = false;
            this.chongzhiBtn.visible = false;
        }
        onLingQu() {
            if (this.status == EDuanWuLingquStatus.CanLingQu) {
                this.model.requstLeiChong(this.cfg.f_id);
            }
        }
        refresh(model) {
            this.model = model;
            this.lingquCtl.visible = false;
            this.lingquCtl.grayMouseDisable = true;
            this.redimg.visible = false;
            this.cfg = this.dataSource;
            this.status = this.model.getLeiChongStatus(this.cfg);
            if (t_Platform.Ins.isFeastUI) {
                this.tf01.text = E.getLang("leiji2", StringUtil.moneyCv(this.cfg.f_PackName));
            }
            else {
                this.tf01.text = E.getLang("leiji", StringUtil.moneyCv(this.cfg.f_PackName));
            }
            let itemList = ItemViewFactory.convertItemList(this.cfg.f_Rewarditem);
            let dataList = [];
            for (let i = 0; i < itemList.length; i++) {
                let vo = new DuanwuSlotVo();
                vo.itemVo = itemList[i];
                dataList.push(vo);
            }
            if (this.cfg.f_RewardTitle) {
                let vo = new DuanwuSlotVo();
                vo.titleId = this.cfg.f_RewardTitle;
                dataList.push(vo);
            }
            ItemViewFactory.renderItemSlots(this.rewardCon, dataList, 10, 0.8, "left", DuanWuLeichongSlotItemView, "DuanWuLeichongSlotItemView");
            this.tf02.text = `(${StringUtil.moneyCv(this.model.data.totalCnt)}/${StringUtil.moneyCv(this.cfg.f_PackName)})`;
            switch (this.status) {
                case EDuanWuLingquStatus.CanLingQu:
                    this.tf03.text = E.getLang("LingQu");
                    this.lingquCtl.visible = true;
                    this.lingquCtl.grayMouseDisable = false;
                    this.redimg.visible = true;
                    break;
                case EDuanWuLingquStatus.IsLingQued:
                    this.tf03.text = E.getLang("LingQu2");
                    this.lingquCtl.visible = true;
                    this.lingquCtl.grayMouseDisable = true;
                    break;
                case EDuanWuLingquStatus.Not:
                    this.tf03.text = E.getLang("LingQu");
                    this.lingquCtl.visible = true;
                    this.lingquCtl.grayMouseDisable = true;
                    break;
            }
        }
    }

    exports.DuanWuLeichongItemView = DuanWuLeichongItemView;
    exports.DuanWuLeichongSlotItemView = DuanWuLeichongSlotItemView;
    exports.DuanwuSlotVo = DuanwuSlotVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DuanWuLogMsgVo {
        constructor() {
            this.msgs = [];
        }
    }

    exports.DuanWuLogMsgVo = DuanWuLogMsgVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangModel extends Laya.EventDispatcher {
        constructor() {
            super(...arguments);
            this.fujiangSelectIndex = 0;
            this.mountRelationList = [];
            this.quaList = [1, 4, 5, 6, 8, 9];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangModel();
            }
            return this._ins;
        }
        getSZList() {
            let arr = [];
            for (let i = 0; i < this.fujiangList.length; i++) {
                if (this.fujiangList[i].pos) {
                    arr.push(this.fujiangList[i]);
                }
            }
            return arr;
        }
        getSZNoList() {
            let arr = [];
            for (let i = 0; i < this.fujiangList.length; i++) {
                if (this.fujiangList[i].isChief == 1) {
                    if (this.fujiangList[i].pos) {
                        arr.push(this.fujiangList[i]);
                    }
                }
            }
            arr.sort((a, b) => {
                return a.pos - b.pos;
            });
            return arr;
        }
        getSZPos() {
            let lv = MainModel.Ins.mRoleData.lv;
            let lvv;
            for (let i = 1; i < 7; i++) {
                let cfg = FuJiangSlotProxy.Ins.getCfgById(i);
                if (cfg.f_pos_available) {
                    if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                        lvv = cfg.f_unlocklevel_v1;
                    }
                    else {
                        if (this.isNewServer) {
                            lvv = cfg.f_unlocklevelnew;
                        }
                        else {
                            lvv = cfg.f_unlocklevel;
                        }
                    }
                    if (lv >= lvv) {
                        let data = this.getFuJiangCfgByPos(i);
                        if (!data) {
                            return i;
                        }
                    }
                }
            }
            return 0;
        }
        getFuJiangCfgById(id) {
            for (let i = 0; i < this.fujiangList.length; i++) {
                if (this.fujiangList[i].cheifId == id) {
                    return this.fujiangList[i];
                }
            }
            return null;
        }
        getFuJiangCfgByPos(pos) {
            for (let i = 0; i < this.fujiangList.length; i++) {
                if (this.fujiangList[i].pos && this.fujiangList[i].pos == pos) {
                    return this.fujiangList[i];
                }
            }
            return null;
        }
        getFuJiangSkin(id, skinId = 0) {
            let skinID;
            if (skinId > 0) {
                skinID = skinId;
            }
            else {
                let cfg = this.getFuJiangCfgById(id);
                if (cfg) {
                    skinID = cfg.skinId;
                }
                else {
                    let cCfg = FuJiangListProxy.Ins.getCfgById(id);
                    skinID = cCfg.f_equipId;
                }
            }
            let sCfg = FuJiangSkinProxy.Ins.getCfgById(skinID);
            let skin = new stSkin();
            skin.f_HeadID = sCfg.f_equipmentid;
            skin.f_WeaponID = sCfg.f_equipmentid;
            skin.f_ShieldID = sCfg.f_equipmentid;
            skin.f_BodyID = sCfg.f_equipmentid;
            return skin;
        }
        getFuJiangList(type = 0) {
            let arr = [];
            let i;
            for (i = 0; i < this.fujiangList.length; i++) {
                if (this.fujiangList[i].isChief == 1) {
                    let cfg = FuJiangListProxy.Ins.getCfgById(this.fujiangList[i].cheifId);
                    if (type == 0 || type == cfg.f_country) {
                        arr.push(this.fujiangList[i]);
                    }
                }
            }
            arr.sort(this.onSort);
            return arr;
        }
        onSort(a, b) {
            let aCfg = FuJiangListProxy.Ins.getCfgById(a.cheifId);
            let bCfg = FuJiangListProxy.Ins.getCfgById(b.cheifId);
            if (aCfg.f_cheifQuality > bCfg.f_cheifQuality) {
                return -1;
            }
            else if (aCfg.f_cheifQuality < bCfg.f_cheifQuality) {
                return 1;
            }
            else {
                if (aCfg.f_id > bCfg.f_id) {
                    return 1;
                }
                else if (aCfg.f_id < bCfg.f_id) {
                    return -1;
                }
                else {
                    return 0;
                }
            }
        }
        getFightNum() {
            let num = 0;
            if (this.fujiangList) {
                for (let i = 0; i < this.fujiangList.length; i++) {
                    if (this.fujiangList[i].isChief == 1) {
                        if (this.fujiangList[i].pos) {
                            num += this.fujiangList[i].cheifFight;
                        }
                    }
                }
            }
            return num + MainModel.Ins.mRoleData.getBattleValue();
        }
        getShowLv(lv) {
            if (MainModel.Ins.mRoleData.lv - lv < 10) {
                return 0;
            }
            let num = 0;
            let num1 = 0;
            let val = MainModel.Ins.mRoleData.getVal(ECellType.FuJiangLv);
            for (let i = 0; i < 10; i++) {
                let cc = FuJiangLvProxy.Ins.getCfgByLv(lv + i);
                if (cc) {
                    num += parseInt(cc.f_upgradecost.split("-")[1]);
                    if (val >= num) {
                        num1++;
                    }
                }
            }
            if (num1 >= 10) {
                return num;
            }
            return 0;
        }
        getAllStarNum() {
            let num = 0;
            for (let i = 0; i < this.fujiangList.length; i++) {
                num += this.fujiangList[i].star;
            }
            return num;
        }
        getStarAttr(cheifId, arrId, lv, starLv) {
            let cfg = FuJiangListProxy.Ins.getCfgById(cheifId);
            let attCfg = FuJiangStarValueProxy.Ins.getCfgByAttid(arrId);
            let starweight = attCfg.f_starweight / 10000;
            let equipweight = attCfg.f_equipweight / 10000;
            let zy = parseInt(attCfg["f_" + cfg.f_cheifClass]) / 10000;
            let val = (lv * attCfg.f_levelweight + cfg.f_cheifQuality * attCfg.f_quaweight) *
                (cfg.f_cheifQuality * equipweight) * (1 + (starLv * starweight)) * (1 + zy);
            return val = Math.ceil(val);
        }
        getMountDataByCheifId(cheifId) {
            return this.mountRelationList.find(ele => ele.cheifId == cheifId);
        }
        getMountDataByMountId(mountId) {
            return this.mountRelationList.find(ele => ele.mountId == mountId);
        }
        isZeroMount() {
            for (let i = 0; i < this.mountRelationList.length; i++) {
                if (this.mountRelationList[i].cheifId == -1) {
                    return true;
                }
            }
            return false;
        }
        getEquipShowLv(equipStar, equipLevel) {
            let numm = FuJiangEquipAttrProxy.Ins.getListByStar(equipStar).length;
            if (numm - equipLevel < 10) {
                return 0;
            }
            let num = 0;
            let num1 = 0;
            let val = MainModel.Ins.mRoleData.getVal(ECellType.FuJiangEquipLv);
            for (let i = 0; i < 10; i++) {
                let cc = FuJiangEquipAttrProxy.Ins.getCfgByStarAndLv(equipStar, equipLevel + i);
                if (cc) {
                    num += parseInt(cc.f_upgradecost.split("-")[1]);
                    if (val >= num) {
                        num1++;
                    }
                }
            }
            if (num1 >= 10) {
                return num;
            }
            return 0;
        }
        getIndexEff() {
            let indexEff = 0;
            let qua = 0;
            for (let i = 0; i < FuJiangModel.Ins.recruitChief.length; i++) {
                if (FuJiangModel.Ins.recruitChief[i].cheifId) {
                    let cfg = FuJiangListProxy.Ins.getCfgById(FuJiangModel.Ins.recruitChief[i].cheifId);
                    qua = Math.max(qua, cfg.f_cheifQuality);
                }
            }
            if (qua) {
                let index = FuJiangModel.Ins.quaList.findIndex(ele => ele == qua) + 1;
                if (index == 6) {
                    let ran = MathUtil.RangeInt(0, 1);
                    if (ran == 0) {
                        indexEff = 6;
                    }
                    else {
                        indexEff = 7;
                    }
                }
                else {
                    indexEff = index;
                }
            }
            else {
                indexEff = 1;
            }
            return indexEff;
        }
        isFJJBJH(cfg) {
            let fjArr = cfg.f_ChiefID.split("|");
            let num = 0;
            for (let j = 0; j < fjArr.length; j++) {
                let fjCfg = FuJiangModel.Ins.getFuJiangCfgById(parseInt(fjArr[j]));
                if (fjCfg) {
                    num += 1;
                }
            }
            if (num >= fjArr.length) {
                return true;
            }
            return false;
        }
        getZJFJData() {
            if (this.fujiangList) {
                for (let i = 0; i < this.fujiangList.length; i++) {
                    if (this.fujiangList[i].isChief == 1) {
                        if (this.fujiangList[i].pos) {
                            return this.fujiangList[i];
                        }
                    }
                }
            }
            return null;
        }
        getFZFJArr() {
            let arr = [];
            if (this.fujiangList) {
                for (let i = 0; i < this.fujiangList.length; i++) {
                    if (this.fujiangList[i].isChief == 1) {
                        if (this.fujiangList[i].assistId) {
                            arr.push(this.fujiangList[i]);
                        }
                    }
                }
            }
            return arr;
        }
        getFuJiangByAssid(assid) {
            return this.fujiangList.find(ele => ele.assistId == assid);
        }
        getFZFJJCAttr(id) {
            let num = 0;
            let arr = FuJiangSupportInheritProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                let data = this.getFuJiangByAssid(arr[i].f_id);
                if (data) {
                    let cCfg = FuJiangListProxy.Ins.getCfgById(data.cheifId);
                    let attrArr = cCfg.f_inherit.split("|");
                    for (let j = 0; j < attrArr.length; j++) {
                        let idd = parseInt(attrArr[j].split(":")[0]);
                        let val = parseInt(attrArr[j].split(":")[1]);
                        if (id == idd) {
                            num += val * (arr[i].f_support / 10000);
                        }
                    }
                }
            }
            return num;
        }
        getFZFJTXAttrArr() {
            let array = [];
            let arr = FuJiangSupportInheritProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                let data = this.getFuJiangByAssid(arr[i].f_id);
                if (data) {
                    let cCfg = FuJiangListProxy.Ins.getCfgById(data.cheifId);
                    let attrArr = cCfg.f_specialattrinit.split("|");
                    let starArr = cCfg.f_specialunlock.split("|");
                    for (let j = 0; j < attrArr.length; j++) {
                        if (data.star >= parseInt(starArr[j])) {
                            let id = parseInt(attrArr[j].split(":")[0]);
                            let val = parseInt(attrArr[j].split(":")[1]);
                            let lvSt = cCfg.f_specialupgrade.split("|")[j];
                            let starSt = cCfg.f_specialupstar.split("|")[j];
                            let lvNum = parseInt(lvSt.split(":")[1]) * (data.level - 1);
                            let starNum = parseInt(starSt.split(":")[1]) * (data.star - 1);
                            val = val + lvNum + starNum;
                            val = val * (arr[i].f_support / 10000);
                            let cell = new stEquipAttr();
                            cell.id = id;
                            cell.value = val;
                            array.push(cell);
                        }
                    }
                }
            }
            return array;
        }
        isFuJiangRedTip() {
            if (!TaskModel.Ins.isFuncOpen(EFuncDef.FuJiang)) {
                return false;
            }
            if (!this.fujiangList) {
                return false;
            }
            if (this.tab1RedTip() || this.tab2RedTip() || this.tab3RedTip() ||
                this.tab4RedTip() || this.tab5RedTip() || this.tab6RedTip()) {
                return true;
            }
            return false;
        }
        tab1RedTip() {
            return false;
        }
        isFreeRed() {
            return false;
        }
        tab2RedTip() {
            if (this.isLvRedTip() || this.isLvStarRedTip()) {
                return true;
            }
            return false;
        }
        isLvRedTip() {
            let arr = this.getSZNoList();
            for (let i = 0; i < arr.length; i++) {
                let n = FuJiangModel.Ins.getShowLv(arr[i].level);
                if (n) {
                    return true;
                }
            }
            return false;
        }
        isLvStarRedTip() {
            let arr = this.getSZNoList();
            arr = arr.concat(this.getFZFJArr());
            for (let i = 0; i < arr.length; i++) {
                if (this.isStarRedTip(arr[i].cheifId, arr[i].star)) {
                    return true;
                }
            }
            return false;
        }
        isStarRedTip(cheifId, star) {
            let nStarCfg = FuJiangStarProxy.Ins.getCfgByStar(star + 1);
            if (nStarCfg) {
                let cfg = FuJiangListProxy.Ins.getCfgById(cheifId);
                let starCfg = FuJiangStarProxy.Ins.getCfgByStar(star);
                if (MainModel.Ins.isItemEnough(cfg.f_piecesid, starCfg.f_upstarcost_new)) {
                    return true;
                }
            }
            return false;
        }
        tab3RedTip() {
            if (this.isZQLVRedTip()) {
                return true;
            }
            return false;
        }
        isZQLVRedTip() {
            let uCfg = FuJiangFlagUpgradeProxy.Ins.getCfgById(this.flagSerial);
            let nextUCfg = FuJiangFlagUpgradeProxy.Ins.getCfgById(this.flagSerial + 1);
            if (nextUCfg) {
                if (MainModel.Ins.isItemEnoughSt(uCfg.f_flag_upgrade, false)) {
                    return true;
                }
            }
            return false;
        }
        isEquipLvRedTipAll() {
            return false;
        }
        isEquipLvRedTipOne(cheifId) {
            return false;
        }
        isEquipLvRedTip(equipStar, equipLevel, partId) {
            return false;
        }
        tab4RedTip() {
            if (this.isMountRedTipAll()) {
                return true;
            }
            return false;
        }
        isMountRedTipAll() {
            let arr = this.getSZNoList();
            for (let i = 0; i < arr.length; i++) {
                if (this.isMountRedTip(arr[i].cheifId)) {
                    return true;
                }
            }
            return false;
        }
        isMountRedTip(cheifId) {
            let vo = this.getMountDataByCheifId(cheifId);
            if (!vo) {
                if (this.isZeroMount()) {
                    return true;
                }
            }
            return false;
        }
        tab5RedTip() {
            return false;
        }
        isDotEquipAll() {
            return false;
        }
        isDotEquipOne(cheifId) {
            return false;
        }
        isDotEquip(index, cheifId) {
            return false;
        }
        tab6RedTip() {
            if (this.isAwardRedTip() || this.isTJStarRedTip() || this.isFJJBRedTip()) {
                return true;
            }
            return false;
        }
        isAwardRedTip() {
            let num = FuJiangCollConProxy.Ins.GetDataById(1).f_starlevel;
            if (this.moraleRewardNum >= num) {
                return true;
            }
            return false;
        }
        isTJStarRedTip(v = 0) {
            for (let i = 0; i < FuJiangListProxy.Ins.List.length; i++) {
                let cfg = FuJiangListProxy.Ins.List[i];
                if (v == 0 || cfg.f_country == v) {
                    let nowNum = 0;
                    let data = FuJiangModel.Ins.getFuJiangCfgById(cfg.f_cheifid);
                    if (data) {
                        nowNum = data.star;
                    }
                    else {
                        nowNum = 0;
                    }
                    if (nowNum >= FuJiangStarProxy.Ins.maxLv) {
                        continue;
                    }
                    let lvNum = -1;
                    let num = 0;
                    let val = MainModel.Ins.mRoleData.getVal(cfg.f_piecesid);
                    let starArr = FuJiangStarProxy.Ins.List;
                    for (let j = nowNum; j < starArr.length; j++) {
                        num += starArr[j].f_upstarcost_new;
                        if (val < num) {
                            lvNum = j;
                            break;
                        }
                    }
                    if (lvNum == -1) {
                        lvNum = FuJiangStarProxy.Ins.maxLv;
                    }
                    if (lvNum - nowNum > 0) {
                        return true;
                    }
                }
            }
            return false;
        }
        isFJJBRedTip() {
            if (!TaskModel.Ins.isFuncOpen(EFuncDef.FuJiangJB)) {
                return false;
            }
            if (!FuJiangModel.Ins.jbDataList) {
                return false;
            }
            let flag = false;
            for (let i = 0; i < FuJiangModel.Ins.jbDataList.length; i++) {
                let vo = FuJiangModel.Ins.jbDataList[i];
                if (vo.state && vo.id == 0) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                return false;
            }
            let arr = FuJiangTrammelsChiefProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                if (this.isFJJBJH(arr[i])) {
                    let vo = FuJiangModel.Ins.jbDataList.find(ele => ele.id == arr[i].f_id);
                    if (!vo) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    FuJiangModel.fjXY = [{ x: 533, y: 40 }, { x: 432, y: 286 }, { x: 297, y: 400 },
        { x: 282, y: 40 }, { x: 161, y: 286 }, { x: 39, y: 400 }];
    FuJiangModel.fjZorder = [40, 50, 60, 10, 20, 30];
    FuJiangModel.FUJIANG_UPDATA = "FUJIANG_UPDATA";
    FuJiangModel.FUJIANG_ZHAOMU_UPDATA = "FUJIANG_ZHAOMU_UPDATA";
    FuJiangModel.SELECT_FUJIANG = "SELECT_FUJIANG";
    FuJiangModel.FUJIANG_SHIQI_UPDATA = "FUJIANG_SHIQI_UPDATA";
    FuJiangModel.FUJIANG_MOUNT_UPDATA = "FUJIANG_MOUNT_UPDATA";
    FuJiangModel.FUJIANG_ZM_DH = "FUJIANG_ZM_DH";
    FuJiangModel.FUJIANG_ZM_DH_OK = "FUJIANG_ZM_DH_OK";
    FuJiangModel.FUJIANG_STAR = "FUJIANG_STAR";
    FuJiangModel.FUJIANG_JIBAN = "FUJIANG_JIBAN";
    FuJiangModel.SELECT_JB_POS = "SELECT_JB_POS";
    FuJiangModel.FLAG_LIST = "FLAG_LIST";
    FuJiangModel.FLAG_ID = "FLAG_ID";
    FuJiangModel.FLAG_LEVEL = "FLAG_LEVEL";
    FuJiangModel.CHOUKA_LEVEL = "CHOUKA_LEVEL";

    exports.FuJiangModel = FuJiangModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangConfigProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangConfigProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_draw_config";
        }
    }
    class FuJiangListProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangListProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_List";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_cheifid == id);
        }
        getQuaSkin(qua) {
            return `remote/fujiang/fj_pj_${qua}.png`;
        }
        getQuaSkin1(qua) {
            return `remote/fujiang/fj_sp_${qua}.png`;
        }
        getProfessionSkin(profession) {
            return `remote/fujiang/fj_zy_${profession}.png`;
        }
        getFuJiangSkin(id) {
            let skinID;
            let cfg = FuJiangModel.Ins.getFuJiangCfgById(id);
            if (cfg) {
                skinID = cfg.skinId;
            }
            else {
                let cCfg = FuJiangListProxy.Ins.getCfgById(id);
                skinID = cCfg.f_equipId;
            }
            let sCfg = FuJiangSkinProxy.Ins.getCfgById(skinID);
            return "o/chief/" + sCfg.f_skinicon;
        }
        getFuJiangEquipSkin(part, id) {
            return "o/item/" + part + "_" + id + ".png";
        }
    }
    class FuJiangLvProxy extends BaseCfg {
        constructor() {
            super();
            this.maxLv = 0;
            this._cfgLv = {};
            for (let i = 0; i < this.List.length; i++) {
                this.maxLv = Math.max(this.List[i].f_chieflevel, this.maxLv);
                this._cfgLv[this.List[i].f_chieflevel] = this.List[i];
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangLvProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_upgrade";
        }
        getCfgByLv(lv) {
            return this._cfgLv[lv];
        }
    }
    class FuJiangClasProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangClasProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Class";
        }
        getCfgByPre(pre) {
            return this.List.find(item => item.f_classid == pre);
        }
    }
    class FuJiangEquipSortProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangEquipSortProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Equipment_Sort";
        }
    }
    class FuJiangEquipStarProxy extends BaseCfg {
        constructor() {
            super();
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangEquipStarProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Equipment_Star";
        }
        getCfgByStar(star) {
            return this.List.find(item => item.f_starid == star);
        }
    }
    class FuJiangEquipAttrProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            this._arr = {};
            this._cfg = {};
            for (let i = 0; i < this.List.length; i++) {
                let star = this.List[i].f_star;
                if (!this._map[star]) {
                    this._map[star] = {};
                    this._arr[star] = [];
                }
                let lv = this.List[i].f_equiplevel;
                this._map[star][lv] = this.List[i];
                this._arr[star].push(this.List[i]);
                this._cfg[this.List[i].f_id] = this.List[i];
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangEquipAttrProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Equipment_Attribute";
        }
        getCfgByStarAndLv(star, lv) {
            return this._map[star][lv];
        }
        getListByStar(star) {
            return this._arr[star];
        }
        getCfgByID(fid) {
            return this._cfg[fid];
        }
    }
    class FuJiangStarProxy extends BaseCfg {
        constructor() {
            super();
            this.maxLv = 0;
            for (let i = 0; i < this.List.length; i++) {
                this.maxLv = Math.max(this.List[i].f_starid, this.maxLv);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangStarProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_star";
        }
        getCfgByStar(star) {
            return this.List.find(item => item.f_starid == star);
        }
    }
    class FuJiangStarValueProxy extends BaseCfg {
        constructor() {
            super();
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangStarValueProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Value";
        }
        getCfgByAttid(attid) {
            return this.List.find(item => item.f_attrid == attid);
        }
    }
    class FuJiangCMoraleProxy extends BaseCfg {
        constructor() {
            super();
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangCMoraleProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Collection_Morale";
        }
        getCfgByStar(star) {
            return this.List.find(item => item.f_starlevel == star);
        }
    }
    class FuJiangCollConProxy extends BaseCfg {
        constructor() {
            super();
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangCollConProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Collection_config";
        }
    }
    class FuJiangSkillProxy extends BaseCfg {
        constructor() {
            super();
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangSkillProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Skill";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_cheifid == id);
        }
    }
    class FuJiangSkillClientProxy extends BaseCfg {
        constructor() {
            super();
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangSkillClientProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Skill_Client";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_clientskillid == id);
        }
    }
    class FuJiangSkillLvProxy extends BaseCfg {
        constructor() {
            super();
            this.maxLv = 0;
            this._cfgLv = {};
            for (let i = 0; i < this.List.length; i++) {
                this.maxLv = Math.max(this.List[i].f_skilllevel, this.maxLv);
                this._cfgLv[this.List[i].f_skilllevel] = this.List[i];
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangSkillLvProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_chief_skill_upgrade";
        }
        getCfgByLv(lv) {
            return this._cfgLv[lv];
        }
    }
    class FuJiangSkinProxy extends BaseCfg {
        constructor() {
            super();
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangSkinProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Skin_List";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_skinid == id);
        }
    }
    class FuJiangSlotProxy extends BaseCfg {
        constructor() {
            super();
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangSlotProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Slot";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_slotid == id);
        }
    }
    class FuJiangFYSlotProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangFYSlotProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Blessing";
        }
        getSlotNum(cheifId) {
            let lv = 1;
            let cfg = FuJiangModel.Ins.getFuJiangCfgById(cheifId);
            if (cfg) {
                lv = cfg.level;
            }
            let num = 0;
            let lvv;
            for (let i = 0; i < this.List.length; i++) {
                if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                    lvv = this.List[i].f_unlocklevel_v1;
                }
                else {
                    if (FuJiangModel.Ins.isNewServer) {
                        lvv = this.List[i].f_unlocklevelnew;
                    }
                    else {
                        lvv = this.List[i].f_unlocklevelold;
                    }
                }
                if (lv >= lvv) {
                    num = this.List[i].f_slotid;
                }
            }
            return num;
        }
        getCfgByCount(count) {
            let l = this.List;
            let vo = l.find(item => item.f_slotid == count);
            let lvv;
            if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                lvv = vo.f_unlocklevel_v1;
            }
            else {
                if (FuJiangModel.Ins.isNewServer) {
                    lvv = vo.f_unlocklevelnew;
                }
                else {
                    lvv = vo.f_unlocklevelold;
                }
            }
            return lvv;
        }
    }
    class FuJiangTrammelsStageProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangTrammelsStageProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Trammels_Stage";
        }
        getCfgByLv(lv) {
            for (let i = 0; i < this.List.length; i++) {
                let arr = this.List[i].f_LevelRange.split("|");
                if (lv >= parseInt(arr[0]) && lv <= parseInt(arr[1])) {
                    return i;
                }
            }
            return -1;
        }
    }
    class FuJiangTrammelsChiefProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangTrammelsChiefProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Trammels_Chief";
        }
    }
    class FuJiangSupportInheritProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangSupportInheritProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Support_Inherit";
        }
    }
    class FuJiangFlagListProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangFlagListProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Flag_List";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_id == id);
        }
        getFlagIcon(id) {
            let cfg = this.getCfgById(id);
            return "o/flag/" + cfg.f_flag_icon;
        }
        getFlagBIcon(id) {
            let cfg = this.getCfgById(id);
            return "o/flag/" + cfg.f_flag_inbattle;
        }
    }
    class FuJiangFlagUpgradeProxy extends BaseCfg {
        constructor() {
            super();
            this._arr = {};
            for (let i = 0; i < this.List.length; i++) {
                let jj = this.List[i].f_flagstage;
                if (!this._arr[jj]) {
                    this._arr[jj] = [];
                }
                this._arr[jj].push(this.List[i]);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangFlagUpgradeProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Flag_Upgrade";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_id == id);
        }
        getListByJJ(jj) {
            return this._arr[jj];
        }
    }
    class FuJiangDrawExpProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangDrawExpProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_Draw_Exp";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_drawlevel == id);
        }
    }
    class FuJiangDrawRateProxy extends BaseCfg {
        constructor() {
            super();
            this._arr = {};
            for (let i = 0; i < this.List.length; i++) {
                let lv = this.List[i].f_drawlevel;
                if (!this._arr[lv]) {
                    this._arr[lv] = [];
                }
                this._arr[lv].push(this.List[i]);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new FuJiangDrawRateProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Chief_draw_Rate";
        }
        getListByLv(lv) {
            return this._arr[lv];
        }
    }

    exports.FuJiangCMoraleProxy = FuJiangCMoraleProxy;
    exports.FuJiangClasProxy = FuJiangClasProxy;
    exports.FuJiangCollConProxy = FuJiangCollConProxy;
    exports.FuJiangConfigProxy = FuJiangConfigProxy;
    exports.FuJiangDrawExpProxy = FuJiangDrawExpProxy;
    exports.FuJiangDrawRateProxy = FuJiangDrawRateProxy;
    exports.FuJiangEquipAttrProxy = FuJiangEquipAttrProxy;
    exports.FuJiangEquipSortProxy = FuJiangEquipSortProxy;
    exports.FuJiangEquipStarProxy = FuJiangEquipStarProxy;
    exports.FuJiangFYSlotProxy = FuJiangFYSlotProxy;
    exports.FuJiangFlagListProxy = FuJiangFlagListProxy;
    exports.FuJiangFlagUpgradeProxy = FuJiangFlagUpgradeProxy;
    exports.FuJiangListProxy = FuJiangListProxy;
    exports.FuJiangLvProxy = FuJiangLvProxy;
    exports.FuJiangSkillClientProxy = FuJiangSkillClientProxy;
    exports.FuJiangSkillLvProxy = FuJiangSkillLvProxy;
    exports.FuJiangSkillProxy = FuJiangSkillProxy;
    exports.FuJiangSkinProxy = FuJiangSkinProxy;
    exports.FuJiangSlotProxy = FuJiangSlotProxy;
    exports.FuJiangStarProxy = FuJiangStarProxy;
    exports.FuJiangStarValueProxy = FuJiangStarValueProxy;
    exports.FuJiangSupportInheritProxy = FuJiangSupportInheritProxy;
    exports.FuJiangTrammelsChiefProxy = FuJiangTrammelsChiefProxy;
    exports.FuJiangTrammelsStageProxy = FuJiangTrammelsStageProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EActivityType) {
        EActivityType[EActivityType["SignIn"] = 1] = "SignIn";
        EActivityType[EActivityType["KaiXaingDaji"] = 2] = "KaiXaingDaji";
        EActivityType[EActivityType["RoleBorn"] = 3] = "RoleBorn";
        EActivityType[EActivityType["EveryDayBorn"] = 4] = "EveryDayBorn";
        EActivityType[EActivityType["t_Pack_MonthAndYear_Card"] = 6] = "t_Pack_MonthAndYear_Card";
        EActivityType[EActivityType["t_Pack_NewPlayer"] = 48] = "t_Pack_NewPlayer";
        EActivityType[EActivityType["Pack_Shop_Mart"] = 8] = "Pack_Shop_Mart";
        EActivityType[EActivityType["SanGuo"] = 9] = "SanGuo";
        EActivityType[EActivityType["Pack_Supply"] = 10] = "Pack_Supply";
        EActivityType[EActivityType["TeHuiLiBao"] = 11] = "TeHuiLiBao";
        EActivityType[EActivityType["BoxBorn"] = 12] = "BoxBorn";
        EActivityType[EActivityType["PopWinEject"] = 13] = "PopWinEject";
        EActivityType[EActivityType["Laborday"] = 18] = "Laborday";
        EActivityType[EActivityType["ShenBinPackage"] = 19] = "ShenBinPackage";
        EActivityType[EActivityType["DuanWu"] = 21] = "DuanWu";
        EActivityType[EActivityType["JJZML"] = 27] = "JJZML";
        EActivityType[EActivityType["DayZhuanPan"] = 28] = "DayZhuanPan";
        EActivityType[EActivityType["OpenServerJiShaoChengDuo"] = 30] = "OpenServerJiShaoChengDuo";
        EActivityType[EActivityType["OpenServerLeiChong"] = 31] = "OpenServerLeiChong";
        EActivityType[EActivityType["OpenServerLianChong"] = 32] = "OpenServerLianChong";
        EActivityType[EActivityType["KaiFuChongBang"] = 33] = "KaiFuChongBang";
        EActivityType[EActivityType["TeQuanKa"] = 34] = "TeQuanKa";
        EActivityType[EActivityType["JieDongFeng"] = 35] = "JieDongFeng";
        EActivityType[EActivityType["NewPlayerFeast"] = 36] = "NewPlayerFeast";
        EActivityType[EActivityType["ZKShop"] = 37] = "ZKShop";
        EActivityType[EActivityType["ZuoqiChengZhang"] = 38] = "ZuoqiChengZhang";
        EActivityType[EActivityType["LingchongChengZhang"] = 39] = "LingchongChengZhang";
        EActivityType[EActivityType["BaoshiChengZhang"] = 40] = "BaoshiChengZhang";
        EActivityType[EActivityType["ServerTask"] = 42] = "ServerTask";
        EActivityType[EActivityType["SkinLiBao"] = 48] = "SkinLiBao";
        EActivityType[EActivityType["ZKShopWeek"] = 44] = "ZKShopWeek";
        EActivityType[EActivityType["WanShengJie"] = 45] = "WanShengJie";
        EActivityType[EActivityType["SignInNew"] = 46] = "SignInNew";
        EActivityType[EActivityType["ZhanLing"] = 49] = "ZhanLing";
        EActivityType[EActivityType["Monopoly"] = 50] = "Monopoly";
        EActivityType[EActivityType["DrawEvent"] = 51] = "DrawEvent";
        EActivityType[EActivityType["Voucher"] = 52] = "Voucher";
        EActivityType[EActivityType["Combopack"] = 54] = "Combopack";
        EActivityType[EActivityType["OnePushPackage"] = 55] = "OnePushPackage";
        EActivityType[EActivityType["SpringFestival"] = 53] = "SpringFestival";
    })(exports.EActivityType || (exports.EActivityType = {}));
    (function (EActivityLingQu) {
        EActivityLingQu[EActivityLingQu["Nothing"] = 0] = "Nothing";
        EActivityLingQu[EActivityLingQu["YiLingQu"] = 1] = "YiLingQu";
        EActivityLingQu[EActivityLingQu["KeLingQu"] = 2] = "KeLingQu";
        EActivityLingQu[EActivityLingQu["ChongZhiYiLingQu"] = 3] = "ChongZhiYiLingQu";
        EActivityLingQu[EActivityLingQu["ChongZhiWeiLingQu"] = 4] = "ChongZhiWeiLingQu";
        EActivityLingQu[EActivityLingQu["ChongZhiAllNotLing"] = 5] = "ChongZhiAllNotLing";
    })(exports.EActivityLingQu || (exports.EActivityLingQu = {}));
    (function (ELingQuStatus) {
        ELingQuStatus[ELingQuStatus["NotCanLingQu"] = 0] = "NotCanLingQu";
        ELingQuStatus[ELingQuStatus["CanLLingQu"] = 1] = "CanLLingQu";
        ELingQuStatus[ELingQuStatus["IsLingQu"] = 2] = "IsLingQu";
    })(exports.ELingQuStatus || (exports.ELingQuStatus = {}));
    (function (EPopWinID) {
        EPopWinID[EPopWinID["GOLD"] = 1] = "GOLD";
        EPopWinID[EPopWinID["WhitePlume"] = 2] = "WhitePlume";
        EPopWinID[EPopWinID["TXZ"] = 3] = "TXZ";
        EPopWinID[EPopWinID["Money"] = 4] = "Money";
        EPopWinID[EPopWinID["HorseFood"] = 5] = "HorseFood";
        EPopWinID[EPopWinID["QFHY"] = 6] = "QFHY";
        EPopWinID[EPopWinID["FYSP"] = 7] = "FYSP";
    })(exports.EPopWinID || (exports.EPopWinID = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TimeCtl {
        constructor(tf) {
            this.destroyed = false;
            this.ticket = 0;
            this.tf = tf;
        }
        setText(v) {
            if (this.destroyed) ;
            else {
                this.tf.text = v;
            }
        }
        start(s, update = null, end = null) {
            this.end = end;
            this.updateHandler = update;
            this.ticket = s;
            this.timeTick();
        }
        get tickVal() {
            return this.ticket;
        }
        timeTick() {
            if (this.ticket > 0) {
                if (this.updateHandler != null) {
                    this.updateHandler.runWith(this.ticket);
                }
                else {
                    this.setText(this.ticket.toString());
                }
                Laya.timer.once(1000, this, this.timeTick);
            }
            else {
                Laya.timer.clear(this, this.timeTick);
                if (this.end != null) {
                    this.end.run();
                }
            }
            this.subTicket();
        }
        subTicket() {
            this.ticket--;
        }
        stop() {
            this.ticket = -1;
            Laya.timer.clear(this, this.timeTick);
        }
        dispose() {
            this.stop();
            this.tf = null;
            this.destroyed = true;
        }
    }

    exports.TimeCtl = TimeCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TabCtl {
        constructor(_cls, _signKey, con, that, gap, itemRenderCallBack, _selCallBack) {
            this._selectIndex = 0;
            this._cls = _cls;
            this._signKey = _signKey;
            this._con = con;
            this._that = that;
            this.gap = gap;
            this._selCallBack = _selCallBack;
            this.itemRenderCallBack = itemRenderCallBack;
        }
        dispose() {
            this._selCallBack = null;
            this.itemRenderCallBack = null;
        }
        set selectIndex(index) {
            for (let i = 0; i < this._con.numChildren; i++) {
                let cell = this._con.getChildAt(i);
                if (index == i) {
                    this.onSelClick(cell);
                }
            }
        }
        get selectIndex() {
            return this._selectIndex;
        }
        get curData() {
            return this.dataList[this.selectIndex];
        }
        refresh(dataList) {
            this.dataList = dataList;
            this.itemList = [];
            let con = this._con;
            let gap = this.gap;
            let that = this._that;
            while (con.numChildren > 0) {
                let cell = con.getChildAt(0);
                Laya.Pool.recover(this._signKey, cell);
                cell.removeSelf();
            }
            let cellW;
            for (let i = 0; i < dataList.length; i++) {
                let data = dataList[i];
                let item = Laya.Pool.getItemByClass(this._signKey, this._cls);
                item.dataSource = data;
                item.on(Laya.Event.CLICK, this, this.onSelClick, [item]);
                if (this.itemRenderCallBack) {
                    this.itemRenderCallBack.call(that, item);
                }
                this.itemList.push(item);
                con.addChild(item);
                cellW = item.width + gap;
                item.x = i * cellW;
            }
            this.width = dataList.length * cellW - gap;
            if (this.width < 0) {
                this.width = 0;
            }
            con.x = (con.parent.width - this.width) >> 1;
        }
        onSelClick(view) {
            for (let i = 0; i < this._con.numChildren; i++) {
                let cell = this._con.getChildAt(i);
                let sel = cell == view;
                if (this._selCallBack) {
                    this._selCallBack.call(this._that, cell, sel);
                }
                if (sel) {
                    this._selectIndex = i;
                }
            }
        }
    }

    exports.TabCtl = TabCtl;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class ActivityEvent {
	}
	ActivityEvent.UpdateData = "UpdateData";
	ActivityEvent.OpenCloseStatusUpdate = "OpenCloseStatusUpdate";
	ActivityEvent.RechargeBillUpdate = "RechargeBillUpdate";
	ActivityEvent.PopWinUpdate = "PopWinUpdate";

	exports.ActivityEvent = ActivityEvent;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class Jscd_itemView extends ui.views.jscd.ui_jscd_itemUI {
        constructor() {
            super();
            this.model = JiShaoChengDuoModel.Ins;
            this.chongzhiCtl = ButtonCtl.CreateBtn(this.chongzhiBtn, this, this.onChongZhi);
            this.lingquCtl = ButtonCtl.CreateBtn(this.lingquBtn, this, this.onLingQu);
        }
        onChongZhi() {
            ActivityModel.Ins.openFunc(EActivityType.EveryDayBorn, EViewType.MeiRiLiBao, "nothing");
        }
        onLingQu() {
            if (this.vo) {
                ActivityModel.Ins.lingQu(this.vo.uid, this.data.f_id);
            }
        }
        refresh() {
            let data = this.dataSource;
            this.data = data;
            this.goldIcon.visible = false;
            this.tf4.visible = false;
            this.chongzhiCtl.visible = false;
            this.lingquCtl.visible = false;
            this.redimg.visible = false;
            let vo = ActivityModel.Ins.getVo(data.f_packid);
            this.vo = vo;
            if (data.f_packid == EActivityType.OpenServerJiShaoChengDuo) {
                let cfg = data;
                let val = StringUtil.toChinesNum(cfg.f_Date);
                let money = StringUtil.moneyCv(cfg.f_ChargeCost);
                this.tf1.text = E.getLang("jscd01", money) + E.getLang("jscd06", val);
                this.countTf.text = "";
            }
            else if (data.f_packid == EActivityType.OpenServerLeiChong) {
                let cfg = data;
                this.tf1.text = E.getLang("jscd02") + StringUtil.moneyCv(cfg.f_LevelConsume) + StringUtil.getCnMoney(0);
                this.countTf.text = `${StringUtil.moneyCv(this.model.accPaid)}/${StringUtil.moneyCv(cfg.f_LevelConsume)}`;
            }
            else if (data.f_packid == EActivityType.OpenServerLianChong) {
                let cfg = data;
                this.tf1.text = E.getLang("jscd04", cfg.f_Date);
                let view = E.ViewMgr.Get(EViewType.JiShaoChengDuo);
                let pay = view.everyDay.tabCtl.curData;
                this.countTf.text = E.getLang("jscd05", pay.everyDayCount + '/' + cfg.f_Date);
            }
            ItemViewFactory.renderItemSlots(this.rewardCon, this.data.f_Reward, undefined, 0.8, "left");
            let _status = EActivityLingQu.Nothing;
            if (vo) {
                _status = vo.getParam1(this.data.f_id);
            }
            switch (_status) {
                case EActivityLingQu.Nothing:
                    this.chongzhiCtl.visible = true;
                    break;
                case EActivityLingQu.YiLingQu:
                    this.lingquCtl.visible = true;
                    this.lingquCtl.grayMouseDisable = true;
                    this.tf3.text = E.getLang("LingQu2");
                    break;
                case EActivityLingQu.KeLingQu:
                    this.redimg.visible = true;
                    this.lingquCtl.visible = true;
                    this.lingquCtl.grayMouseDisable = false;
                    this.tf3.text = E.getLang("LingQu");
                    break;
            }
        }
    }
    class EveryDayMainTab {
        constructor(_ui) {
            this._ui = _ui;
            this.tabCtl = new TabCtl(ui.views.jscd.ui_jscd_small_tab_itemUI, "ui_jscd_small_tab_itemUI", this._ui.everyDay, this, 13, this.onTabRender, this.onTabSelClickHandler);
        }
        onTabRender(item) {
            let vo = item.dataSource;
            item.tf.text = vo.label;
        }
        onTabSelClickHandler(item, val, isRefresh) {
            let vo = item.dataSource;
            item.redimg.visible = vo.hasred;
            if (val) {
                item.bgsel.skin = `remote/jscd/jthl_an_2.png`;
                this._ui.list2.array = vo.cfgList;
                this._ui.list2.scrollTo(vo.canLingQuIndex);
            }
            else {
                item.bgsel.skin = `remote/jscd/jthl_an_3.png`;
            }
        }
        dispose() {
        }
        init() {
            this.tabCtl.refresh(t_OpenServerActivity_DailyPayment.Ins.tabList);
            this.tabCtl.selectIndex = 0;
        }
        refresh() {
            let curItem = this.tabCtl.itemList[this.tabCtl.selectIndex];
            if (curItem) {
                this.onTabSelClickHandler(curItem, true, true);
            }
        }
    }
    class JiShaoChengDuoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("jscd.atlas");
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.onRefreshEvt);
            this.everyDay.dispose();
            this._tabCtl.dispose();
            this.timeCtl.stop();
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = JiShaoChengDuoModel.Ins;
                this.UI = this._ui = new ui.views.jscd.ui_jscd_viewUI();
                this.mMask = true;
                this._tabCtl = new TabCtl(ui.views.jscd.ui_jscd_tab_itemUI, "ui_jscd_tab_itemUI", this._ui.con1, this, 13, this.onTabRender, this.onTabSelClickHandler);
                this.bindClose(this._ui.close1);
                this.btnList.push(new ButtonCtl(this._ui.wenhao, new Laya.Handler(this, this.wenhaoHandler)));
                this._ui.list0.itemRender = Jscd_itemView;
                this._ui.list0.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list1.itemRender = Jscd_itemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list2.itemRender = Jscd_itemView;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onItemRender);
                this.timeCtl = new TimeCtl(this._ui.timeTf);
                this.everyDay = new EveryDayMainTab(this._ui);
            }
        }
        onItemRender(item) {
            item.refresh();
        }
        wenhaoHandler() {
            E.ViewMgr.openHelpView("jscdTitle", "jscdgDesc");
        }
        onInit() {
            if (MainModel.Ins.needRed(RedEnum.JI_SHAO_CHENGDUO)) {
                RedUpdateModel.Ins.save(RedEnum.JI_SHAO_CHENGDUO, TimeUtil.serverTime);
            }
            this.model.updateRed();
            this._tabCtl.refresh(this.model.tablist);
            this._tabCtl.selectIndex = this.Data || 0;
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onRefreshEvt);
            this.model.on(JiShaoChengDuoModel.EventOpenServerAccPaid, this, this.onRefreshEvt);
        }
        onRefreshEvt() {
            if (this.UI) {
                let curItem = this._tabCtl.itemList[this._tabCtl.selectIndex];
                if (curItem) {
                    this.onTabSelClickHandler(curItem, true, true);
                }
            }
        }
        onTabRender(item) {
            let vo = item.dataSource;
            item.tf.text = vo.label;
        }
        getCanLingQuIndex(l) {
            if (this.activiyVo) {
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    if (this.activiyVo.getParam1(cfg.f_id) == EActivityLingQu.KeLingQu) {
                        return i;
                    }
                }
            }
            return 0;
        }
        onTabSelClickHandler(item, val, isRefresh) {
            let vo = item.dataSource;
            item.redimg.visible = vo.hasRed;
            if (val) {
                item.bgsel.skin = `remote/jscd/jthl_an.png`;
                item.tf.color = "#8F2D2F";
                this._ui.list0.visible = false;
                this._ui.list1.visible = false;
                this._ui.list2.visible = false;
                this._ui.everyDay.visible = false;
                this.onEndHandler();
                this.activiyVo = ActivityModel.Ins.getVo(vo.type);
                if (this.activiyVo) {
                    switch (vo.type) {
                        case EActivityType.OpenServerJiShaoChengDuo:
                            this._ui.list0.visible = true;
                            let l = t_OpenServerActivity_Charging.Ins.List;
                            this._ui.list0.array = l;
                            this._ui.list0.scrollTo(this.getCanLingQuIndex(l));
                            if (this._tabCtl.dataList.length <= 1) {
                                this._ui.bg5.skin = `remote/jscd/jthl_banner_4.png`;
                            }
                            else {
                                this._ui.bg5.skin = `remote/jscd/jthl_banner.png`;
                            }
                            break;
                        case EActivityType.OpenServerLeiChong:
                            this._ui.list1.visible = true;
                            let l1 = t_OpenServerActivity_Recharge.Ins.List;
                            this._ui.list1.array = l1;
                            this._ui.list1.scrollTo(this.getCanLingQuIndex(l1));
                            this._ui.bg5.skin = `remote/jscd/jthl_banner_2.png`;
                            break;
                        case EActivityType.OpenServerLianChong:
                            this._ui.list2.visible = true;
                            this._ui.bg5.skin = `remote/jscd/jthl_banner_3.png`;
                            this._ui.everyDay.visible = true;
                            if (isRefresh) {
                                this.everyDay.refresh();
                            }
                            else {
                                this.everyDay.init();
                            }
                            break;
                    }
                    this.timeCtl.start(this.activiyVo.endTime - TimeUtil.serverTime, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.onEndHandler));
                }
            }
            else {
                item.bgsel.skin = `remote/jscd/jthl_an_1.png`;
                item.tf.color = "#FFEFC5";
            }
        }
        onUpdateTime() {
            this._ui.tf1.visible = true;
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(time_str);
        }
        onEndHandler() {
            this._ui.timeTf.text = "";
            this._ui.tf1.visible = false;
        }
    }

    exports.JiShaoChengDuoView = JiShaoChengDuoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class OpenServerTabVo {
        get label() {
            let arr = E.getLang("jscdarr").split("|");
            return arr[this.type - EActivityType.OpenServerJiShaoChengDuo];
        }
        get hasRed() {
            let vo = ActivityModel.Ins.getVo(this.type);
            if (vo) {
                return vo.hasKeLingQu();
            }
            return false;
        }
    }
    class t_OpenServerActivity_Charging extends BaseCfg {
        GetTabelName() {
            return "t_OpenServerActivity_Charging";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_OpenServerActivity_Charging();
            }
            return this._ins;
        }
    }
    class t_OpenServerActivity_Recharge extends BaseCfg {
        GetTabelName() {
            return "t_OpenServerActivity_Recharge";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_OpenServerActivity_Recharge();
            }
            return this._ins;
        }
    }
    class OpenDailyPayTabVo {
        parse() {
            let val = t_OpenServerActivity_DailyPayment.Ins.getLevelValByLv(this.lv);
            this.label = StringUtil.moneyCv(val) + StringUtil.getCnMoney(0);
        }
        get everyDayCount() {
            let vo = ActivityModel.Ins.getVo(EActivityType.OpenServerLianChong);
            let count = 0;
            if (vo) {
                let l = this.cfgList;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    let _status = vo.getParam1(cfg.f_id);
                    if (_status == EActivityLingQu.YiLingQu || _status == EActivityLingQu.KeLingQu) {
                        count++;
                    }
                }
            }
            return count;
        }
        get canLingQuIndex() {
            let vo = ActivityModel.Ins.getVo(EActivityType.OpenServerLianChong);
            let l = this.cfgList;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (vo.getParam1(cfg.f_id) == EActivityLingQu.KeLingQu) {
                    return i;
                }
            }
            return 0;
        }
        get hasred() {
            let vo = ActivityModel.Ins.getVo(EActivityType.OpenServerLianChong);
            let l = this.cfgList;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (vo.getParam1(cfg.f_id) == EActivityLingQu.KeLingQu) {
                    return true;
                }
            }
            return false;
        }
    }
    class t_OpenServerActivity_DailyPayment extends BaseCfg {
        GetTabelName() {
            return "t_OpenServerActivity_DailyPayment";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_OpenServerActivity_DailyPayment();
            }
            return this._ins;
        }
        get tabList() {
            if (!this._tabList) {
                this._tabList = [];
                let l = this.List;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    let tab = this._tabList.find(item => cfg.f_Level == item.lv);
                    if (tab) {
                        tab.cfgList.push(cfg);
                    }
                    else {
                        tab = new OpenDailyPayTabVo();
                        tab.lv = cfg.f_Level;
                        tab.cfgList = [];
                        tab.cfgList.push(cfg);
                        tab.parse();
                        this._tabList.push(tab);
                    }
                }
            }
            return this._tabList;
        }
        getLevelValByLv(lv) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_Level == lv) {
                    return cfg.f_LevelVal;
                }
            }
        }
    }
    class JiShaoChengDuoModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.accPaid = 0;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new JiShaoChengDuoModel();
            }
            return this._ins;
        }
        initMsg() {
            this.Reg(new JiShaoChengDuoView(EViewType.JiShaoChengDuo));
            E.MsgMgr.AddMsg(MSGID.OpenServerAccPaid, this.onOpenServerAccPaid, this);
        }
        onOpenServerAccPaid(revc) {
            this.accPaid = revc.accPaid;
            this.accDailyPaid = revc.accDailyPaid;
            this.event(JiShaoChengDuoModel.EventOpenServerAccPaid);
        }
        onInitCallBack() {
            this.accPaid = 0;
            this.accDailyPaid = 0;
        }
        get tablist() {
            let l = [];
            let types = [EActivityType.OpenServerJiShaoChengDuo, EActivityType.OpenServerLeiChong, EActivityType.OpenServerLianChong];
            for (let i = 0; i < types.length; i++) {
                let type = types[i];
                let vo = ActivityModel.Ins.getVo(type);
                if (vo) {
                    let cell = new OpenServerTabVo();
                    cell.type = type;
                    l.push(cell);
                }
            }
            return l;
        }
        get hasRed() {
            if (this.isOpen) {
                let b = false;
                let types = [EActivityType.OpenServerJiShaoChengDuo, EActivityType.OpenServerLeiChong, EActivityType.OpenServerLianChong];
                for (let i = 0; i < types.length; i++) {
                    let type = types[i];
                    let vo = ActivityModel.Ins.getVo(type);
                    if (vo) {
                        if (vo.hasKeLingQu()) {
                            b = true;
                            break;
                        }
                    }
                }
                return b || MainModel.Ins.needRed(RedEnum.JI_SHAO_CHENGDUO);
            }
        }
        updateRed() {
            MainModel.Ins.funcSetRed(EFuncDef.JiShaoChengDuo, this.hasRed);
        }
        get isOpen() {
            let types = [EActivityType.OpenServerJiShaoChengDuo, EActivityType.OpenServerLeiChong, EActivityType.OpenServerLianChong];
            for (let i = 0; i < types.length; i++) {
                let type = types[i];
                let vo = ActivityModel.Ins.getVo(type);
                if (vo) {
                    return true;
                }
            }
            return false;
        }
    }
    JiShaoChengDuoModel.EventOpenServerAccPaid = "EventOpenServerAccPaid";

    exports.JiShaoChengDuoModel = JiShaoChengDuoModel;
    exports.OpenDailyPayTabVo = OpenDailyPayTabVo;
    exports.OpenServerTabVo = OpenServerTabVo;
    exports.t_OpenServerActivity_Charging = t_OpenServerActivity_Charging;
    exports.t_OpenServerActivity_DailyPayment = t_OpenServerActivity_DailyPayment;
    exports.t_OpenServerActivity_Recharge = t_OpenServerActivity_Recharge;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EClientType) {
        EClientType[EClientType["Main"] = undefined] = "Main";
        EClientType[EClientType["Discount"] = 1] = "Discount";
    })(exports.EClientType || (exports.EClientType = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShopModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.PageTypeGold = 3;
            this.boughtItems = [];
            this.curIndex = 0;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ShopModel();
            }
            return this._ins;
        }
        onInitCallBack() { }
        onShopBoughtItemsRevc(data) {
            this.boughtItems = data.datalist;
            this.updateRed();
        }
        updateRed() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.Shop)) ;
        }
        get canPay() {
            if (t_Platform.Ins.IOS_recharge) {
                return true;
            }
            if (Laya.Browser.onIOS || Laya.Browser.onIPad || Laya.Browser.onIPhone || Laya.Utils.getQueryString("onIOS") || initConfig.debug_onIOS) {
                return false;
            }
            return true;
        }
        get goldfid() {
            if (!this._gold_f_id) {
                let _page = this.PageTypeGold;
                let list1 = ShopProxy.Ins.List;
                for (let i = 0; i < list1.length; i++) {
                    let cfg = list1[i];
                    if (cfg.f_isfree && parseInt(cfg.f_Page) == _page) {
                        this._gold_f_id = cfg.f_id;
                        break;
                    }
                }
            }
            return this._gold_f_id;
        }
        get mGoldFree() {
            let fid = this.goldfid;
            if (this.boughtItems) {
                let obj = this.boughtItems.find(cell => cell.fid == fid);
                if (obj) {
                    return obj.state == 1;
                }
            }
            return true;
        }
        initMsg() {
            E.MsgMgr.AddMsg(MSGID.BuyItemResultRevc, this.onBuyItemResultRevc, this);
        }
        onBuyItemResultRevc(revc) {
            const shopView = E.ViewMgr.Get(EViewType.Shop);
            if (shopView.IsShow()) {
                shopView.refreshResources();
            }
            let cell = this.boughtItems.find(o => o.fid == revc.data.fid);
            if (!cell) {
                this.boughtItems.push(revc.data);
                shopView.refresh();
            }
            this.updateRed();
            if (revc.data.fid == this.goldfid) {
                E.ViewMgr.ShowMidOk('领取成功');
            }
        }
        showShopView() {
            if (!TaskModel.Ins.isFuncOpen(EFuncDef.Shop, true)) {
                return;
            }
            this.curIndex = EShopTabIndex.GoldHouse;
            E.ViewMgr.Open(EViewType.Shop);
        }
        showVoucherView() {
            if (!TaskModel.Ins.isFuncOpen(EFuncDef.Shop, true)) {
                return;
            }
            this.curIndex = EShopTabIndex.Voucher;
            let viewType = EViewType.Shop;
            if (E.ViewMgr.isOpenReg(viewType)) {
                E.ViewMgr.Get(EViewType.Shop).updateViewIndex();
            }
            else {
                E.ViewMgr.Open(viewType);
            }
        }
        showEveryDay() {
            if (!TaskModel.Ins.isFuncOpen(EFuncDef.Shop, true)) {
                return;
            }
            this.curIndex = EShopTabIndex.MoneyHouse;
            E.ViewMgr.Open(EViewType.Shop);
        }
    }

    exports.ShopModel = ShopModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Voucher extends BaseCfg {
        GetTabelName() {
            return "t_Voucher";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Voucher();
            }
            return this._ins;
        }
    }

    exports.t_Voucher = t_Voucher;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EShopTabIndex) {
        EShopTabIndex[EShopTabIndex["EveryHotSell"] = 0] = "EveryHotSell";
        EShopTabIndex[EShopTabIndex["MoneyHouse"] = 1] = "MoneyHouse";
        EShopTabIndex[EShopTabIndex["GoldHouse"] = 2] = "GoldHouse";
        EShopTabIndex[EShopTabIndex["Voucher"] = 3] = "Voucher";
    })(exports.EShopTabIndex || (exports.EShopTabIndex = {}));
    (function (EShopPayType) {
        EShopPayType[EShopPayType["Normal"] = 0] = "Normal";
        EShopPayType[EShopPayType["Voucher"] = 1] = "Voucher";
    })(exports.EShopPayType || (exports.EShopPayType = {}));
    class ShopProxy extends BaseCfg {
        constructor() {
            super(...arguments);
            this.voucherPage = 4;
        }
        GetTabelName() {
            return "t_Shop";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ShopProxy();
            }
            return this._ins;
        }
        checkVaild() {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_Page == this.voucherPage.toString()) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, "your t_Shop`s f_Page is not vaild!");
                }
            }
        }
        getTabItemList() {
            let _l = this.List;
            const tabIds = [...new Set(_l.filter(o => Number(o.f_Page)).map(o => Number(o.f_Page)))];
            const minTabId = Math.min(...tabIds);
            let _list = tabIds.map(tabId => ({
                tabId,
                name: _l.find(o => Number(o.f_Page) === tabId).f_PageName,
                selected: minTabId === tabId ? true : false,
                activityType: 0,
            }));
            if (E.sdk.clienttype == EClientType.Discount) {
                let o = {};
                o.name = E.getLang("voucher_name");
                o.activityType = EActivityType.Voucher;
                o.tabId = this.voucherPage;
                _list.push(o);
            }
            return _list;
        }
        getShopItemList(tabId) {
            if (tabId == ShopProxy.Ins.voucherPage) {
                return t_Voucher.Ins.List;
            }
            let _l = this.List;
            const boughtItems = ShopModel.Ins.boughtItems;
            return _l.filter(o => Number(o.f_Page) === tabId).map(o => {
                const payItem = new ItemVo();
                payItem.cfgId = Number(o.f_PriceType);
                payItem.count = Number(o.f_Price);
                return {
                    payResourceId: Number(o.f_PriceType),
                    payResourceAmount: Number(o.f_Price),
                    payItem,
                    purchaseId: Number(o.f_PurchaseID),
                    itemList: ItemViewFactory.convertItemList(o.f_ItemID),
                    shopType: 1,
                    fid: o.f_id,
                    bought: this.findByFid(boughtItems, o.f_id) === -1 ? false : true
                };
            });
        }
        findByFid(boughtItems, f_id) {
            let cell = boughtItems.find(o => o.fid == f_id);
            if (!cell) {
                return -1;
            }
        }
        yilingQuMask(skin, v) {
            skin.yilingquMask.visible = skin.yilingquLb.visible = v;
        }
        clearUI(skin) {
            skin.moneyNumLabel.text = "";
            skin.moneyIcon.skin = "";
            skin.zh_con.visible = false;
            skin.dotimg.visible = false;
            skin.doubleIcon.visible = false;
            this.yilingQuMask(skin, false);
        }
        renderVoucher(skin, cfg) {
            skin.itemNameLabel.text = cfg.f_PageName;
            let itemVo = ItemViewFactory.convertItem(cfg.f_ItemCount);
            if (itemVo) {
                skin.icon.skin = IconUtils.getIconByCfgId(itemVo.cfgId);
                skin.countLabel.text = itemVo.count + "";
                let purchaseCfg = t_Purchase_PriceProxy.Ins.GetDataById(cfg.f_PurchaseID);
                skin.moneyNumLabel.text = '￥' + StringUtil.moneyCv(purchaseCfg.f_price);
            }
            else {
                skin.icon.skin = "";
                skin.countLabel.text = skin.moneyNumLabel.text = cfg.f_id + "";
            }
        }
        convertMoney(_purchaseCfg1) {
            if (_purchaseCfg1.f_isVoucher == exports.EShopPayType.Voucher) {
                let rate = this.rate;
                let newCNY = StringUtil.moneyCv(_purchaseCfg1.f_price / rate);
                return newCNY;
            }
            return StringUtil.moneyCv(_purchaseCfg1.f_price);
        }
        convertReal(_purchaseCfg1) {
            if (_purchaseCfg1.f_isVoucher == exports.EShopPayType.Voucher) {
                let rate = this.rate;
                let newCNY = _purchaseCfg1.f_price / rate;
                return newCNY;
            }
            return _purchaseCfg1.f_price;
        }
        get rate() {
            return parseInt(System_RefreshTimeProxy.Ins.getVal(77).split(":")[1]);
        }
        setShopItem(skin, data) {
            this.clearUI(skin);
            if (data.hasOwnProperty("f_id")) {
                this.renderVoucher(skin, data);
            }
            else {
                const itemList = data.itemList;
                if (!itemList)
                    return;
                skin.icon.skin = itemList[0].getIcon();
                skin.countLabel.text = itemList[0].count.toString();
                skin.itemNameLabel.text = itemList[0].getName();
                const payResourceId = data.payResourceId;
                const payResourceAmount = data.payResourceAmount;
                const purchaseId = data.purchaseId;
                let _purchaseCfg1 = t_Purchase_PriceProxy.Ins.GetDataById(purchaseId);
                if (_purchaseCfg1 && _purchaseCfg1.f_isVoucher == exports.EShopPayType.Voucher) {
                    skin.moneyNumLabel.text = "";
                    skin.moneyIcon.skin = "";
                    skin.zh_con.visible = true;
                    skin.real_tf.text = StringUtil.moneyCv(_purchaseCfg1.f_price) + E.getLang("CNY");
                    let newCNY = this.convertMoney(_purchaseCfg1);
                    skin.zh_tf.text = E.getLang("voucher_unlock", newCNY.toFixed(2));
                }
                else {
                    const bought = data.bought;
                    if (purchaseId) {
                        if (bought) {
                            skin.doubleIcon.visible = false;
                        }
                        else {
                            skin.doubleIcon.visible = true;
                        }
                    }
                    else {
                        skin.doubleIcon.visible = false;
                    }
                    let _showLabel = "";
                    if (purchaseId) {
                        skin.moneyIcon.skin = '';
                        skin.moneyIcon.visible = false;
                        _showLabel = '￥' + payResourceAmount.toString();
                    }
                    else {
                        skin.moneyIcon.skin = ItemViewFactory.getResourceIcon(payResourceId);
                        skin.moneyIcon.visible = true;
                        _showLabel = payResourceAmount.toString();
                    }
                    let red = false;
                    let cfg = this.GetDataById(data.fid);
                    if (cfg.f_isfree) {
                        _showLabel = E.getLang("Free");
                        if (ShopModel.Ins.mGoldFree) {
                            red = true;
                        }
                        else {
                            this.yilingQuMask(skin, true);
                        }
                    }
                    skin.dotimg.visible = red;
                    skin.moneyNumLabel.text = _showLabel;
                }
            }
        }
    }

    exports.ShopProxy = ShopProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PackShopMarketProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Shop_Market";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new PackShopMarketProxy();
            }
            return this._ins;
        }
        getItemById(goodId) {
            const _l = this.List;
            const cfg = _l.find(o => Number(o.f_GoodsID) === goodId);
            if (!cfg)
                throw new Error(`${this.GetTabelName()}缺少f_GoodsID#${goodId}的配置`);
            const iconId = Number(cfg.f_Discount);
            const itemVo = ItemViewFactory.convertItemList(cfg.f_Goods)[0];
            const payItemVo = ItemViewFactory.convertItemList(`${cfg.f_price}`)[0];
            return { iconId, itemVo, payItemVo, fid: Number(cfg.f_id) };
        }
    }
    class PackShopMarkConfigProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Shop_Mart_Config";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new PackShopMarkConfigProxy();
            }
            return this._ins;
        }
        getRefreshItemVo() {
            const _l = this.List;
            const cfg = _l.find(o => Number(o.f_id) === 1);
            if (!cfg)
                throw new Error(`${this.GetTabelName()}缺少f_id#1的配置`);
            return ItemViewFactory.convertItemList(cfg.f_RefreshPrice)[0];
        }
    }
    class PackSupplyProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Supply";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new PackSupplyProxy();
            }
            return this._ins;
        }
        getSupplyItemById(fid) {
            const _l = this.List;
            const cfg = _l.find(o => Number(o.f_id) === fid);
            if (!cfg)
                throw new Error(`${this.GetTabelName()}缺少f_id#${fid}的配置`);
            const purchaseId = Number(cfg.f_PurchaseID);
            const itemVos = ItemViewFactory.convertItemList(cfg.f_Item);
            const price = t_Purchase_PriceProxy.Ins.getPriceItemById(purchaseId);
            return { purchaseId, itemVos, price };
        }
    }
    class PackMonthCardProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Month_Card";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new PackMonthCardProxy();
            }
            return this._ins;
        }
        getRewardConf(type) {
            const _l = this.List;
            const cfg = _l.find(o => o.f_id === type);
            if (!cfg)
                throw new Error(`${this.GetTabelName()}缺少f_id#${type}的配置`);
            return { itemVo: ItemViewFactory.convertItemList(cfg.f_Item)[0], purchaseId: cfg.f_PurchaseID };
        }
    }
    class PackEjectProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Eject";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new PackEjectProxy();
            }
            return this._ins;
        }
        getCfgByFid(cfgId) {
            return this.List.find(o => o.f_id === cfgId);
        }
        getRewardConf(cfgId) {
            const _l = this.List;
            const cfg = _l.find(o => o.f_id === cfgId);
            if (!cfg)
                throw new Error(`${this.GetTabelName()}缺少f_EjectPackID#${cfgId}的配置`);
            return {
                cellValues: ItemViewFactory.convertItemList(cfg.f_Item).map(o => {
                    const cellValue = new stCellValue();
                    cellValue.id = o.cfgId;
                    cellValue.count = o.count;
                    return cellValue;
                }),
                purchaseId: cfg.f_PurchaseID
            };
        }
    }
    class PackTeQuanKaCardProxy extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Month_AD";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new PackTeQuanKaCardProxy();
            }
            return this._ins;
        }
        getCfgByType(type) {
            return this.List.find(o => o.f_cardtype === type);
        }
    }

    exports.PackEjectProxy = PackEjectProxy;
    exports.PackMonthCardProxy = PackMonthCardProxy;
    exports.PackShopMarkConfigProxy = PackShopMarkConfigProxy;
    exports.PackShopMarketProxy = PackShopMarketProxy;
    exports.PackSupplyProxy = PackSupplyProxy;
    exports.PackTeQuanKaCardProxy = PackTeQuanKaCardProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TimeCell {
        constructor() {
            this.time = new Laya.Timer();
        }
        clear() {
            this.time.clearAll(this);
        }
        init(vo) {
            this.vo = vo;
            this.start();
        }
        start() {
            this.time.once(1000, this, this.onLoop);
        }
        onLoop() {
            if (TimeUtil.serverTime < this.vo.endTime) {
                this.start();
            }
            else {
                ActivityModel.Ins.requestByUid(this.vo.uid);
            }
        }
    }
    class ActivityTimeModel {
        constructor() {
            this.timeList = [];
        }
        refresh() {
            while (this.timeList.length) {
                let cell = this.timeList.pop();
                cell.clear();
            }
            let l = ActivityModel.Ins.dataList;
            for (let i = 0; i < l.length; i++) {
                let vo = l[i];
                if (vo.endTime) {
                    let cell = new TimeCell();
                    cell.init(vo);
                    this.timeList.push(cell);
                }
            }
        }
    }

    exports.ActivityTimeModel = ActivityTimeModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ActivityVo {
        get cfg() {
            if (!this._cfg) {
                this._cfg = t_Pack_ControllerProxy.Ins.GetDataById(this.uid);
            }
            return this._cfg;
        }
        get eject_f_id() {
            return this.cfg.f_p4;
        }
        get eject_hideTime() {
            return parseInt(this.cfg.f_p2);
        }
        get statusData() {
            return this._statusData;
        }
        set statusData(v) {
            this._statusData = v;
        }
        findSt(id) {
            let l = this.vo.datalist;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.id == id) {
                    return cell;
                }
            }
        }
        changeActivity(l) {
            let newL = [];
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let v = this.findSt(cell.id);
                if (v) {
                    v.param1 = cell.param1;
                }
                else {
                    newL.push(cell);
                }
            }
            if (this.vo.datalist.length > 0) {
                this.vo.datalist = this.vo.datalist.concat(newL);
            }
        }
        get uid() {
            if (this.vo) {
                return this.vo.uid;
            }
            if (this._statusData) {
                return this._statusData.uid;
            }
            return 0;
        }
        get isOpen() {
            let _status = this._statusData && this._statusData.status == 1;
            return _status;
        }
        get packId() {
            if (!this.cfg) {
                return 0;
            }
            return this.cfg.f_packid;
        }
        get priceID() {
            return this.cfg.f_PriceID;
        }
        get startTime() {
            if (this.vo) {
                return this.vo.starttime;
            }
            return 0;
        }
        get endTime() {
            if (this.vo) {
                return this.vo.endtime;
            }
            return 0;
        }
        getParam1(id) {
            let l = this.vo.datalist;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.id == id) {
                    return cell.param1;
                }
            }
            return EActivityLingQu.Nothing;
        }
        hasKeLingQu() {
            let l = this.vo.datalist;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.param1 == EActivityLingQu.KeLingQu) {
                    return true;
                }
            }
        }
        getSubTime(cfg) {
            let sub = cfg.f_BuyTimes - this.getParam1(cfg.f_id);
            if (sub < 0) {
                sub = 0;
            }
            return sub;
        }
        get dataList() {
            return this.vo && this.vo.datalist || [];
        }
        getCanLingQuIdList() {
            let l = this.vo.datalist;
            let arr = [];
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.param1 == EActivityLingQu.KeLingQu) {
                    arr.push(cell.id);
                }
            }
            return arr;
        }
        getNewPlayerCfgId() {
            if (this.vo) {
                let checkMaxId = t_Pack_FirstPay_Equip.Ins.max_f_id;
                let l = this.vo.datalist;
                let maxCfgId = 0;
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    if (cell.param1 == EActivityLingQu.YiLingQu) {
                        if (cell.id <= checkMaxId && cell.id > maxCfgId) {
                            maxCfgId = cell.id;
                        }
                    }
                }
                let resultId = maxCfgId + 1;
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    if (cell.id == resultId) {
                        return resultId;
                    }
                }
            }
            return 0;
        }
        toString() {
            return `[uid:${this.uid} packId:${this.packId}]`;
        }
        get isPay() {
            return MainModel.Ins.unpackIdList.indexOf(this.packId) >= 0;
        }
    }

    exports.ActivityVo = ActivityVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class CompackPop {
        start() {
            let _pop = false;
            if (initConfig.clienttype == EClientType.Discount) {
                let vo = ActivityModel.Ins.getVo(EActivityType.t_Pack_NewPlayer);
                if (vo) {
                    let _cfgId = vo.getNewPlayerCfgId();
                    let isMax = false;
                    if (_cfgId == 0) {
                        isMax = true;
                    }
                    if (isMax) {
                        MainModel.Ins.discountPack.onComboPack();
                        return;
                    }
                    else {
                        _pop = true;
                    }
                }
            }
            else {
                _pop = true;
            }
            if (_pop) {
                E.ViewMgr.Open(EViewType.NewPlayPackage);
            }
        }
        get isNotBuyAll() {
            let vo = ActivityModel.Ins.getVo(EActivityType.t_Pack_NewPlayer);
            if (vo) {
                let _cfgId = vo.getNewPlayerCfgId();
                let isMax = false;
                if (_cfgId == 0) {
                    isMax = true;
                }
                if (isMax) {
                    return;
                }
                return true;
            }
        }
    }

    exports.CompackPop = CompackPop;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ESkinRateBtn) {
        ESkinRateBtn[ESkinRateBtn["Red"] = 1] = "Red";
        ESkinRateBtn[ESkinRateBtn["Yellow"] = 2] = "Yellow";
        ESkinRateBtn[ESkinRateBtn["Blue"] = 3] = "Blue";
    })(exports.ESkinRateBtn || (exports.ESkinRateBtn = {}));
    class RateBtnUtils {
        static Refresh(btn, oldBtn, newBtn) {
            if (btn == oldBtn) {
                oldBtn.visible = true;
                newBtn.visible = false;
            }
            else {
                oldBtn.visible = false;
                newBtn.visible = true;
            }
        }
    }
    class RateBtn01Ctl {
        constructor(skin, that, func, type, bo = false) {
            this._skin = skin;
            this.btnCtl = ButtonCtl.CreateBtn(skin, that, func);
            skin.lab_qg.visible = bo;
            skin.yellowbg.visible = false;
            skin.bg.visible = false;
            skin.hot_img.visible = false;
            switch (type) {
                case exports.ESkinRateBtn.Red:
                    skin.bg.visible = true;
                    skin.hot_img.visible = true;
                    skin.bg.skin = `remote/common/base/anniu_red.png`;
                    break;
                case exports.ESkinRateBtn.Yellow:
                    skin.yellowbg.visible = true;
                    break;
                case exports.ESkinRateBtn.Blue:
                    skin.bg.visible = true;
                    skin.bg.skin = `remote/common/base/anniu_blue1.png`;
                    break;
            }
        }
        dispose() {
            this.btnCtl.dispose();
        }
        set visible(v) {
            this._skin.visible = v;
        }
        set cfg(_cfg) {
            this._cfg = _cfg;
            if (_cfg) {
                this._skin.zh_img.visible = true;
                this._skin.real_tf.visible = true;
                this._skin.real_tf.text = StringUtil.moneyCv(_cfg.f_price) + E.getLang("CNY");
                this._skin.tf1.text = ShopProxy.Ins.convertMoney(_cfg) + E.getLang("CNY");
            }
        }
        get cfg() {
            return this._cfg;
        }
        set lbText(v) {
            this._skin.zh_img.visible = false;
            this._skin.real_tf.visible = false;
            this._skin.tf1.text = v;
        }
    }

    exports.RateBtn01Ctl = RateBtn01Ctl;
    exports.RateBtnUtils = RateBtnUtils;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ECardLingqu) {
        ECardLingqu[ECardLingqu["Nothing"] = 0] = "Nothing";
        ECardLingqu[ECardLingqu["CanGet"] = 1] = "CanGet";
        ECardLingqu[ECardLingqu["AlreadyGet"] = 2] = "AlreadyGet";
    })(exports.ECardLingqu || (exports.ECardLingqu = {}));
    class YueKaView extends ViewBase {
        constructor() {
            super(...arguments);
            this.activityType = EActivityType.t_Pack_MonthAndYear_Card;
            this.autoFree = true;
            this.mMask = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_yueka_viewUI;
                const rewardConf = PackMonthCardProxy.Ins.getRewardConf(1);
                const purchaseId = rewardConf.purchaseId;
                this.purchaseId = purchaseId;
                const priceItem = t_Purchase_PriceProxy.Ins.getPriceItemById(purchaseId);
                const price = parseFloat((priceItem.price / 100).toFixed(2));
                this._ui.tf1.text = `${price}元解锁`;
                this._purchaseCfg = t_Purchase_PriceProxy.Ins.GetDataById(purchaseId);
                this.lingquCtl = new ButtonCtl(this._ui.lingqu, new Laya.Handler(this, this.onLingquHandler));
                this.btnCtl = ButtonCtl.Create(this._ui.btn1, new Laya.Handler(this, this.onEnterHandler));
                this.rateCtl = new RateBtn01Ctl(this._ui.ratebtn, this, this.onEnterHandler, ESkinRateBtn.Yellow);
                this.goonPay = ButtonCtl.Create(this._ui.img3, new Laya.Handler(this, this.onGoPushMoney));
                this._ui.zhangguIcon.skin = IconUtils.getIconByCfgId(ECellType.BOX);
                this.btnList.push(this.lingquCtl, this.btnCtl, this.goonPay);
                if (t_Platform.Ins.isHideAdImg) {
                    this._ui.mcsy_img.visible = false;
                }
                if (this._ui.zidongzhuwei && initConfig.clienttype == EClientType.Discount) {
                    this._ui.zidongzhuwei.visible = false;
                }
            }
        }
        onGoPushMoney() {
            this.onEnterHandler();
        }
        onLingquHandler() {
            let req = new MonthCardGet_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        clearUI() {
            this.lingquCtl.visible = false;
            this._ui.subcon.visible = false;
            this._ui.yilingqu.visible = false;
            this._ui.weichongzhi.visible = false;
        }
        refreshView() {
            this._curData = MainModel.Ins.monthCard;
            this.clearUI();
            if (this._curData) {
                if (this._curData.val == exports.ECardLingqu.Nothing) {
                    this._ui.weichongzhi.visible = true;
                    let btn = this.btnCtl;
                    if (this._purchaseCfg.f_isVoucher == EShopPayType.Voucher) {
                        btn = this.rateCtl.btnCtl;
                        this.rateCtl.cfg = this._purchaseCfg;
                    }
                    RateBtnUtils.Refresh(btn, this.btnCtl, this.rateCtl.btnCtl);
                }
                else if (this._curData.val == exports.ECardLingqu.CanGet) {
                    this.lingquCtl.visible = true;
                    this._ui.subcon.visible = true;
                }
                else if (this._curData.val == exports.ECardLingqu.AlreadyGet) {
                    this._ui.yilingqu.visible = true;
                    this._ui.subcon.visible = true;
                }
                this._ui.dattf.text = this._curData.subday + "";
            }
            this.layoutUI();
        }
        layoutUI() {
            this._ui.dattf.x = this._ui.img1.x + this._ui.img1.width;
            this._ui.img2.x = this._ui.dattf.x + this._ui.dattf.textField.width;
            this._ui.img3.x = this._ui.img2.x + this._ui.img2.width;
            this.goonPay.setpos(this._ui.img3.x, this._ui.img3.y);
        }
        onEnterHandler() {
            ActivityModel.Ins.recharge(this.purchaseId);
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onExit() {
            MainModel.Ins.off(MainEvent.MonthUpdate, this, this.refreshView);
            this.rateCtl.dispose();
        }
        onInit() {
            MainModel.Ins.on(MainEvent.MonthUpdate, this, this.refreshView);
            this.refreshView();
        }
    }

    exports.YueKaView = YueKaView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ActivityModel extends BaseModel {
        constructor() {
            super(...arguments);
            this._dataList = [];
            this._stPopWinList = [];
            this.isClickPop = false;
            this._activtyTime = new ActivityTimeModel();
            this.gameClubData = { join: 0, like: 0, publish: 0 };
            this.gameClubAuth = false;
            this.compackPop = new CompackPop();
            this._xinRenTime = 0;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ActivityModel();
            }
            return this._ins;
        }
        onInitCallBack() {
            this._dataList = [];
            this._stPopWinList = [];
        }
        initMsg() {
            E.MsgMgr.AddMsg(MSGID.ActivityListRevc, this.onActivityListRevc, this);
            E.MsgMgr.AddMsg(MSGID.ActivityChangeRevc, this.onActivityChangeRevc, this);
            E.MsgMgr.AddMsg(MSGID.ActivityStatus, this.onActivityStatus, this);
            E.MsgMgr.AddMsg(MSGID.RechargeBill, this.onRechargeBill, this);
            E.MsgMgr.AddMsg(MSGID.PopWinRevc, this.onPopWinRevc, this);
            E.MsgMgr.AddMsg(MSGID.ItemNotEnoughCode, this.onItemNotEnoughCode, this);
        }
        get dataList() {
            return this._dataList;
        }
        onPopWinRevc(revc) {
            let l = revc.datalist;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let _vo = this._stPopWinList.find(item => item.uid == cell.uid);
                if (_vo) {
                    _vo.time = cell.time;
                    _vo.iconHideTime = cell.iconHideTime;
                    _vo.iconStatus = cell.iconStatus;
                }
                else {
                    this._stPopWinList.push(cell);
                }
            }
            if (this.isClickPop) {
                ActivityModel.Ins.isClickPop = false;
                this.openPop(ActivityModel.Ins.popUid);
            }
            if (E.Debug) {
                this._stPopWinList.forEach(item => {
                    console.log(JSON.stringify(item) + "- nextOpenTime:" + TimeUtil.timestamtoTime(item.time * 1000));
                });
            }
            this.event(ActivityEvent.PopWinUpdate);
        }
        get isPopIconShow() {
            let arr = this.getPopShowArr();
            if (arr.length) {
                return true;
            }
            return false;
        }
        onActivityListRevc(revc) {
            let l = revc.datalist;
            for (let i = 0; i < l.length; i++) {
                let _serverVo = l[i];
                let fCell = this._dataList.find(o => o.uid == _serverVo.uid);
                if (fCell) {
                    fCell.vo = _serverVo;
                }
                else {
                    let _cell = new ActivityVo();
                    _cell.vo = _serverVo;
                    this._dataList.push(_cell);
                }
            }
            this._activtyTime.refresh();
            this.event(ActivityEvent.UpdateData);
            this.onRedUpdate();
        }
        onActivityChangeRevc(revc) {
            this.changeActivityList(revc.datalist, revc.type);
            this._activtyTime.refresh();
            this.event(ActivityEvent.UpdateData);
            MainModel.Ins.updateNewPlayerRed();
            this.onRedUpdate();
        }
        onActivityStatus(revc) {
            this.setStatus(revc);
        }
        setStatus(revc) {
            for (let i = 0; i < revc.datalist.length; i++) {
                let _cell = revc.datalist[i];
                this.updateStatus(_cell);
            }
            this.event(ActivityEvent.OpenCloseStatusUpdate);
        }
        changeUpdate(cell, type) {
            let findItem;
            for (let i = 0; i < this._dataList.length; i++) {
                let o = this._dataList[i];
                if (o.isOpen && o.uid == cell.uid) {
                    findItem = o;
                }
            }
            if (findItem) {
                findItem.vo.starttime = cell.starttime;
                findItem.vo.endtime = cell.endtime;
                if (type == 0) {
                    findItem.changeActivity(cell.datalist);
                }
                else {
                    findItem.vo.datalist = cell.datalist;
                }
            }
            else {
                this.pushDataList(cell);
            }
        }
        pushDataList(cell) {
            let index = this._dataList.findIndex(o => o.uid == cell.uid);
            if (index >= 0) {
                this._dataList.splice(index, 1);
            }
            let _n = new ActivityVo();
            _n.vo = cell;
            this._dataList.push(_n);
        }
        changeActivityList(l, type) {
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                this.changeUpdate(cell, type);
            }
        }
        updateStatus(_cell) {
            for (let i = 0; i < this._dataList.length; i++) {
                let _vo = this._dataList[i];
                if (_vo.vo && _vo.vo.uid == _cell.uid ||
                    _vo.statusData && _vo.statusData.uid == _cell.uid) {
                    _vo.statusData = _cell;
                    return;
                }
            }
            let _vo = new ActivityVo();
            _vo.statusData = _cell;
            this._dataList.push(_vo);
        }
        isLingqu(type, id) {
            switch (type) {
                case EActivityType.BoxBorn:
                    if (id <= 3) {
                        return true;
                    }
                    else {
                        return false;
                    }
            }
        }
        isChengZhangOrJueSeUnLock(type, id) {
            let model = MainModel.Ins;
            switch (type) {
                case EActivityType.BoxBorn:
                    let boxLv = model.mRoleData.boxlv;
                    let bl = t_Pack_BoxGrowProxy.Ins.List;
                    for (let i = 0; i < bl.length; i++) {
                        let cfg = bl[i];
                        if (boxLv >= cfg.f_Level) {
                            return true;
                        }
                    }
                    return false;
                case EActivityType.RoleBorn:
                    let lv = model.mRoleData.lv;
                    let l = t_Pack_ChaGrowProxy.Ins.List;
                    for (let i = 0; i < l.length; i++) {
                        let cfg = l[i];
                        if (lv >= cfg.f_Level) {
                            return true;
                        }
                    }
                    return false;
            }
        }
        getVo(id) {
            for (let i = 0; i < this._dataList.length; i++) {
                let _vo = this._dataList[i];
                if (_vo.isOpen && _vo.packId == id) {
                    return _vo;
                }
            }
        }
        getVoByP2(id, f_p2) {
            for (let i = 0; i < this._dataList.length; i++) {
                let _vo = this._dataList[i];
                if (_vo.isOpen && _vo.packId == id && parseInt(_vo.cfg.f_p2) == f_p2) {
                    return _vo;
                }
            }
        }
        getByUid(uid) {
            let vo = this._dataList.find(item => item.vo && item.uid == uid);
            return vo;
        }
        lingQu(uid, id) {
            let req = new ActivityAction_req();
            req.uid = uid;
            req.id = id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onVoucherBuyHandler(cfg, id) {
            let val = ShopProxy.Ins.convertReal(cfg);
            if (MainModel.Ins.isItemEnoughSt(`${id}-${val}`)) {
                this.reqBill(cfg.f_id);
            }
            else {
                let itemCfg = ItemProxy.Ins.getCfg(id);
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.getLang("CNY_tips", itemCfg.f_name), new Laya.Handler(this, this.onVoucherMsgHandler));
            }
        }
        onVoucherMsgHandler() {
            MainModel.Ins.openGold();
        }
        recharge(id) {
            let cfg = t_Purchase_PriceProxy.Ins.GetDataById(id);
            if (cfg.f_isVoucher == EShopPayType.Voucher) {
                let voucherID = ECellType.Voucher;
                let itemName = ItemProxy.Ins.getCfg(voucherID).f_name;
                let val = ShopProxy.Ins.convertReal(cfg);
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.getLang("askBuy", val + itemName), new Laya.Handler(this, this.onVoucherBuyHandler, [cfg, voucherID]));
            }
            else {
                if (initConfig.platform == PlatformConfig.Dev) {
                    E.ViewMgr.Open(EViewType.ChongZhiTest, null, id);
                }
                else {
                    this.reqBill(id);
                }
            }
        }
        reqBill(id) {
            let req = new RechargeBill_req();
            req.id = id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onRechargeBill(revc) {
            let cfg = t_Purchase_PriceProxy.Ins.GetDataById(revc.id);
            if (cfg.f_isVoucher == EShopPayType.Normal) {
                E.sdk.recharge(revc.val, cfg);
            }
        }
        buySomething(vo, f_id, _needItem) {
            if (vo) {
                if (_needItem.count == 0) {
                    this.okBuyHandler(vo, f_id);
                }
                else {
                    let obj = new Laya.Handler(this, this.okBuyHandler, [vo, f_id, _needItem]);
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.LangMgr.getLang("UseItem", _needItem.cntName), obj);
                }
            }
        }
        okBuyHandler(_activityVo, f_id, _needItem) {
            ActivityModel.Ins.lingQu(_activityVo.uid, f_id);
        }
        get popVo() {
            let serverTime = TimeUtil.serverTime;
            let vo = this._stPopWinList.find(item => item.iconStatus == 1 && item.iconHideTime > serverTime);
            if (vo) {
                return vo;
            }
        }
        sendPop(vo) {
            ActivityModel.Ins.isClickPop = true;
            ActivityModel.Ins.popUid = vo.uid;
            let req = new popWin_req();
            req.uid = vo.uid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onPop(uid, ui) {
            const popArr = ActivityModel.Ins.getPopShowArr();
            if (popArr.find(o => o.uid === uid)) {
                ui.visible = true;
            }
            else {
                ui.visible = false;
            }
        }
        onItemNotEnoughCode(revc) {
            let id = revc.id;
            if (id) {
                let cfg = ItemProxy.Ins.getCfg(id);
                let str = `${main.itemName(cfg.f_name)}不足`;
                E.ViewMgr.ShowMidError(str);
                this.checkItem(id);
            }
            else {
                LogSys$1.Warn(`onItemNotEnoughCode id is ${id}`);
            }
        }
        checkItem(itemId) {
            let type;
            switch (itemId) {
                case ECellType.GOLD:
                    type = EPopWinID.GOLD;
                    break;
                case ECellType.COPPER_MONEY:
                    type = EPopWinID.Money;
                    break;
                case ECellType.TongXingZheng:
                    type = EPopWinID.TXZ;
                    break;
                case ECellType.QiYun:
                    type = EPopWinID.QFHY;
                    break;
                case ECellType.DaoQi:
                    type = EPopWinID.FYSP;
                    break;
            }
            if (type) {
                this.runEnough(type);
            }
        }
        runEnough(eject_f_id) {
            if (!MainModel.Ins.isCanRecharge()) {
                return;
            }
            if (MainModel.Ins.mRoleData.lv < 35) {
                return;
            }
            let vo = this._dataList.find(cell => cell.cfg.f_packid == EActivityType.PopWinEject && cell.eject_f_id == eject_f_id.toString());
            if (vo) {
                let v = this._stPopWinList.find(o => o.uid === vo.uid);
                if (v) {
                    if (TimeUtil.serverTime > v.time) {
                        this.sendPop(vo);
                    }
                }
                else {
                    this.sendPop(vo);
                }
            }
        }
        openPop(uid) {
            if (this.hasPopUid(uid)) {
                this.diamondEject(uid);
            }
        }
        openPopWin() {
            this.diamondEject();
        }
        diamondEject(uid = null) {
            let popArr = this.getPopShowArr();
            if (popArr.length == 0) {
                return;
            }
            E.ViewMgr.Open(EViewType.DiamondEject, null, uid);
        }
        getPopWinHideTime(uid) {
            let cell = this._stPopWinList.find(item => item.uid == uid);
            if (cell) {
                return cell.iconHideTime;
            }
            return 0;
        }
        hasPopUid(uid) {
            let cell = this._stPopWinList.find(item => item.uid == uid);
            return cell != undefined;
        }
        isOpenByPackid(_l) {
            let packids;
            if (typeof (_l) == "number") {
                packids = [_l];
            }
            else {
                packids = _l;
            }
            for (let i = 0; i < packids.length; i++) {
                let id = packids[i];
                let cell = this._dataList.find(item => item.vo && item.cfg && item.cfg.f_packid == id && item.isOpen);
                if (cell) {
                    return true;
                }
            }
        }
        openFunc(type, uiType, param1 = null) {
            if (this.isOpenByPackid(type)) {
                E.ViewMgr.Open(uiType, null, param1);
            }
            else {
                E.ViewMgr.ShowMidError(E.LangMgr.getLang("FuncNotOpen"));
            }
        }
        requestByUid(uid) {
        }
        hasRed(type) {
            let _vo = this._dataList.find(cell => cell.vo && cell.cfg.f_packid == type);
            if (_vo) {
                switch (_vo.cfg.f_packid) {
                    case EActivityType.EveryDayBorn:
                        if (this.hasDailyListRed(_vo)) {
                            return true;
                        }
                        break;
                    case EActivityType.ZKShopWeek:
                        if (MainModel.Ins.isZKWCRedTip()) {
                            return true;
                        }
                        break;
                    case EActivityType.t_Pack_MonthAndYear_Card:
                        if (MainModel.Ins.allLife && MainModel.Ins.allLife.val == ECardLingqu.CanGet ||
                            MainModel.Ins.monthCard && MainModel.Ins.monthCard.val == ECardLingqu.CanGet) {
                            return true;
                        }
                        break;
                    case EActivityType.TeQuanKa:
                        if (MainModel.Ins.teQuanKaCard && MainModel.Ins.teQuanKaCard.val == ECardLingqu.CanGet) {
                            return true;
                        }
                        break;
                    case EActivityType.JJZML:
                        if (_vo.hasKeLingQu()) {
                            return true;
                        }
                        break;
                }
            }
            return false;
        }
        jijingHasRed() {
            for (let i = 0; i < this._dataList.length; i++) {
                let _vo = this._dataList[i];
                if (_vo && _vo.vo && _vo.cfg) {
                    switch (_vo.cfg.f_packid) {
                        case EActivityType.BoxBorn:
                        case EActivityType.RoleBorn:
                        case EActivityType.ZuoqiChengZhang:
                        case EActivityType.LingchongChengZhang:
                        case EActivityType.BaoshiChengZhang:
                            if (this.hasBoxBorn(_vo.cfg.f_packid, _vo)) {
                                return true;
                            }
                            break;
                        case EActivityType.t_Pack_MonthAndYear_Card:
                            return this.hasRed(EActivityType.t_Pack_MonthAndYear_Card);
                        case EActivityType.TeQuanKa:
                            return this.hasRed(EActivityType.TeQuanKa);
                    }
                }
            }
        }
        updatePackage() {
            MainModel.Ins.funcSetRed(EFuncDef.JiJing, this.jijingHasRed());
        }
        onUpdateRedLater() {
            this.updatePackage();
            MainModel.Ins.updateBoxOpenRed();
            let l = E.MsgMgr.LabordayList;
            l = l.concat(JiShaoChengDuoModel.Ins);
            for (let i = 0; i < l.length; i++) {
                let model = l[i];
                model.updateRed();
            }
            MainModel.Ins.updateGemRed();
            MainModel.Ins.funcSetRed(EFuncDef.JJZML, this.hasRed(EActivityType.JJZML));
            MainModel.Ins.funcSetRed(EFuncDef.EveryDayPackage, this.hasRed(EActivityType.EveryDayBorn));
            MainModel.Ins.event(MainEvent.NewPlayerFeastRed_Update);
        }
        onRedUpdate() {
            Laya.timer.callLater(this, this.onUpdateRedLater);
        }
        hasDailyFreeRed(cfg, _vo) {
            let hasRed = false;
            let free = false;
            if (cfg.f_PurchaseID == 0) {
                free = true;
            }
            let _serverTime = 0;
            if (_vo) {
                _serverTime = _vo.getParam1(cfg.f_id);
            }
            if (_serverTime >= cfg.f_BuyTimes) ;
            else {
                if (free) {
                    hasRed = true;
                }
            }
            return hasRed;
        }
        hasDailyListRed(_vo) {
            if (_vo) {
                let l1 = t_Pack_DailyProxy.Ins.List;
                for (let i = 0; i < l1.length; i++) {
                    let cfg = l1[i];
                    if (this.hasDailyFreeRed(cfg, _vo)) {
                        return true;
                    }
                }
            }
            return false;
        }
        hasBoxBorn(activityType, _vo) {
            let _list;
            switch (activityType) {
                case EActivityType.BoxBorn:
                    _list = t_Pack_BoxGrowProxy.Ins.List;
                    break;
                case EActivityType.RoleBorn:
                    _list = t_Pack_ChaGrowProxy.Ins.List;
                    break;
                case EActivityType.ZuoqiChengZhang:
                    _list = t_Fund_NewProxy.Ins.getCfgByType(1);
                    break;
                case EActivityType.LingchongChengZhang:
                    _list = t_Fund_NewProxy.Ins.getCfgByType(2);
                    break;
                case EActivityType.BaoshiChengZhang:
                    _list = t_Fund_NewProxy.Ins.getCfgByType(3);
                    break;
            }
            if (_list && this.bornHasLingqu(_list, _vo)) {
                return true;
            }
        }
        bornHasLingqu(curCfgList, _vo) {
            if (_vo) {
                let l = curCfgList;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    let _status = _vo.getParam1(cfg.f_id);
                    if (_status == EActivityLingQu.KeLingQu ||
                        _status == EActivityLingQu.ChongZhiWeiLingQu ||
                        _status == EActivityLingQu.ChongZhiAllNotLing) {
                        return true;
                    }
                }
            }
            return false;
        }
        checkOpenBoxRed() {
            let _activityVo = this.getVo(EActivityType.KaiXaingDaji);
            let l = t_Pack_BoxEventProxy.Ins.List;
            for (let i = 0; i < l.length; i++) {
                let _cfg = l[i];
                if (_cfg.f_BoxUse) ;
                let _status = EActivityLingQu.Nothing;
                if (_activityVo) {
                    _status = _activityVo.getParam1(_cfg.f_id);
                }
                switch (_status) {
                    case EActivityLingQu.Nothing:
                        break;
                    case EActivityLingQu.KeLingQu:
                        return true;
                    case EActivityLingQu.YiLingQu:
                        break;
                }
            }
            return false;
        }
        showXinRenView() {
            let funcid = EFuncDef.NewPlayer;
            let cfg = FuncProxy.Ins.getCfgByFuncId(funcid);
            if (MainModel.Ins.isVerify(cfg)) {
                return;
            }
            if (!MainModel.Ins.isOpenByFuncId(funcid.toString())) {
                return;
            }
            let pcfg = t_Pack_ControllerProxy.Ins.getCfgByPackidId(EActivityType.t_Pack_NewPlayer);
            if (MainModel.Ins.mRoleData.lv > parseInt(pcfg.f_p3)) {
                return;
            }
            let time = parseInt(pcfg.f_p2) * 1000;
            if (Laya.timer.currTimer - this._xinRenTime < time) {
                return;
            }
            this._xinRenTime = Laya.timer.currTimer;
            this.compackPop.start();
        }
        getPopShowIndex() {
            let arr = this.getPopShowArr();
            let num = 99999;
            let index = -1;
            for (let i = 0; i < arr.length; i++) {
                let vo = ActivityModel.Ins.getByUid(arr[i].uid);
                let cfg = PackEjectProxy.Ins.getCfgByFid(parseInt(vo.eject_f_id));
                if (cfg.f_priority < num) {
                    num = cfg.f_priority;
                    index = i;
                }
            }
            return index;
        }
        getPopShowArr() {
            let arr = [];
            for (let i = 0; i < this._stPopWinList.length; i++) {
                if (this._stPopWinList[i].iconStatus == 1) {
                    arr.push(this._stPopWinList[i]);
                }
            }
            return arr;
        }
    }

    exports.ActivityModel = ActivityModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FeastLogMessage {
        convert(_data, hasTime) {
            if (hasTime) {
                let space = "";
                let timeStr = "";
                if (hasTime) {
                    space = "    ";
                    timeStr = TimeUtil.timestamtoTime1(_data.time, "-", " ", ":", false);
                }
                this.desc = timeStr + space + this.desc;
                this.name = space + this.name;
            }
        }
    }
    class GemBaseModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.maxConfigId = 35;
            this.leichongTitle = "leichongjiangli";
            this.rankTitleStr1 = "";
            this.serDataList = [];
            this.packId = EActivityType.DuanWu;
        }
        static ConvertMsg(type, _data, hasTime = false) {
            let msg = new FeastLogMessage();
            if (type == EFeastType.Ride) {
                msg.desc = _data.nickName + E.getLang("duanwu01");
                let _mountCfg = Mount_ListProxy.Ins.getCfg(_data.id);
                msg.color = QualityUtils.getQuaColor(_mountCfg.f_Quality);
                msg.name = _mountCfg.f_MountName;
            }
            else if (type == EFeastType.Gem) {
                let cfg = BaoShiCfgProxy.Ins.getCfgById(_data.id);
                msg.desc = _data.nickName + E.getLang("get");
                let color = QualityUtils.getQuaColor(t_Alternation_GemScore.Ins.getByLevel(_data.level).f_GemColor);
                msg.color = color;
                msg.name = "Lv." + _data.level + cfg.f_GemAttr + E.getLang("gem");
            }
            else if (type == EFeastType.FuJiang) {
                msg.desc = _data.nickName + E.getLang("fj01");
                let _heroCfg = FuJiangListProxy.Ins.getCfgById(_data.id);
                msg.color = "#" + EquipmentQualityProxy.Ins.getByQua(_heroCfg.f_cheifQuality).f_chiefcolor;
                msg.name = _heroCfg.f_cheif;
            }
            else if (type == EFeastType.Pet) {
                let petCfg = PetListProxy.Ins.getCfgById(_data.id);
                msg.desc = _data.nickName + E.getLang("pet06");
                msg.color = "#" + EquipmentQualityProxy.Ins.getByQua(petCfg.f_petquality).f_Color;
                msg.name = petCfg.f_petname;
            }
            else if (type == EFeastType.ShenBin) {
                let sbCfg = ItemProxy.Ins.getCfg(_data.id);
                msg.desc = _data.nickName + E.getLang("shenbinglibao1");
                msg.color = "#" + EquipmentQualityProxy.Ins.getByQua(sbCfg.f_qua).f_Color;
                msg.name = main.itemName(sbCfg.f_name);
            }
            msg.convert(_data, hasTime);
            return msg;
        }
        get totalCnt() {
            return this.data ? this.data.totalCnt : 0;
        }
        get titleStr() {
            switch (this.subType) {
                case EFeastType.Ride:
                    return "ridetitle01";
                case EFeastType.Gem:
                    return "gemtitle01";
                case EFeastType.FuJiang:
                    return "gjtitle01";
                case EFeastType.Pet:
                    return "pet03";
                case EFeastType.ShenBin:
                    return "shenbinglibao";
            }
        }
        get titleSkin() {
            if (this.packId == EActivityType.NewPlayerFeast) {
                return `remote/duanwu/t${this.subType}.png`;
            }
            switch (this.subType) {
                case EFeastType.Ride:
                    return "remote/duanwu/zqsy.png";
                case EFeastType.Gem:
                    return "remote/gemfeast/bssy.png";
                case EFeastType.FuJiang:
                    return "remote/fujiangfeast/fjsy.png";
                case EFeastType.Pet:
                    return "remote/lingchongfeast/lcsy.png";
                case EFeastType.ShenBin:
                    return "remote/shenbingfeast/bssy.png";
            }
        }
        get bg4Img() {
            switch (this.subType) {
                case EFeastType.Ride:
                    return "remote/duanwu/zqlb.png";
                case EFeastType.Gem:
                    return "remote/duanwu/bslb.png";
                case EFeastType.FuJiang:
                    return "remote/fujiangfeast/fjlb.png";
                case EFeastType.Pet:
                    return "remote/lingchongfeast/lclb.png";
                case EFeastType.ShenBin:
                    return "remote/shenbingfeast/bslb.png";
            }
        }
        initMsg() {
        }
        onInitCallBack() {
            this.data = null;
            this.rankData = null;
            this.serDataList = [];
        }
        get activityVo() {
            let _activityVo = ActivityModel.Ins.getVoByP2(this.packId, this.subType);
            return _activityVo;
        }
        get isOpen() {
            if (this.data) {
                let vo = this.activityVo;
                return vo && vo.isOpen;
            }
        }
        sortTime(a, b) {
            if (a.time < b.time) {
                return -1;
            }
            else if (a.time > a.time) {
                return 1;
            }
            return 0;
        }
        get packcfgList() {
            return t_Alternation_MountPack.Ins.getListByType(this.subType);
        }
        findMsgVo(list1, time) {
            for (let i = 0; i < list1.length; i++) {
                if (list1[i].time == time) {
                    return list1[i];
                }
            }
        }
        get selfList() {
            if (this.data) {
                return this.data.selfRecords || [];
            }
            return [];
        }
        get myMSG() {
            let list1 = [];
            let selfList = this.selfList || [];
            selfList = selfList.sort(this.sortTime);
            for (let i = 0; i < selfList.length; i++) {
                let cell = selfList[i];
                let fo = this.findMsgVo(list1, cell.time);
                if (!fo) {
                    fo = new DuanWuLogMsgVo();
                    fo.subType = this.subType;
                    fo.time = cell.time;
                    list1.push(fo);
                }
                fo.msgs.push(cell);
            }
            return list1;
        }
        get isFreeCanLingQu() {
            let listdata = t_Alternation_MountPack.Ins.List;
            for (let i = 0; i < listdata.length; i++) {
                let cfg = listdata[i];
                if (cfg.f_PackType == this.subType) {
                    if (!cfg.f_PurchaseID) {
                        let time = this.getPackageTimes(cfg.f_id);
                        if (time >= cfg.f_BuyTimes) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                }
            }
        }
        getPackageTimes(id) {
            let vo = this.activityVo;
            if (vo) {
                return vo.getParam1(id);
            }
            return 0;
        }
        convertData(cfg) {
            let itemList = ItemViewFactory.convertItemList(cfg.f_Rewarditem);
            let dataList = [];
            for (let i = 0; i < itemList.length; i++) {
                let vo = new DuanwuSlotVo();
                vo.itemVo = itemList[i];
                dataList.push(vo);
            }
            if (cfg.f_RewardTitle) {
                let vo = new DuanwuSlotVo();
                vo.titleId = cfg.f_RewardTitle;
                dataList.push(vo);
            }
            return dataList;
        }
        get leijiCanLingQu() {
            let l = t_Alternation_Recharge.Ins.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_ActivityType == this.subType) {
                    let status = this.getLeiChongStatus(cfg);
                    if (status == EDuanWuLingquStatus.CanLingQu) {
                        return true;
                    }
                }
            }
        }
        isLeiChongLingqu(id) {
            let list1 = this.data.rewardList;
            return list1.indexOf(id) != -1;
        }
        getLeiChongStatus(cfg) {
            let status = EDuanWuLingquStatus.Not;
            if (this.data) {
                if (this.isLeiChongLingqu(cfg.f_id)) {
                    status = EDuanWuLingquStatus.IsLingQued;
                }
                else {
                    if (this.totalCnt < cfg.f_PackName) {
                        status = EDuanWuLingquStatus.Not;
                    }
                    else {
                        status = EDuanWuLingquStatus.CanLingQu;
                    }
                }
            }
            return status;
        }
        getPackageStatus(cfg) {
            let time = this.getPackageTimes(cfg.f_id);
            if (time >= cfg.f_BuyTimes) {
                return EDuanWuPackageStatus.Not;
            }
            else {
                return EDuanWuPackageStatus.Normal;
            }
        }
        packageLingqu(id) {
            let vo = this.activityVo;
            if (vo) {
                ActivityModel.Ins.lingQu(vo.uid, id);
            }
            else {
                E.ViewMgr.ShowMidError(E.getLang("activityend"));
            }
        }
        get maxRecordSerial() {
            let l = this.serDataList;
            if (l && l.length > 0) {
                return l[l.length - 1].recordSerial;
            }
            return 0;
        }
        getRankInfo(rank) {
            let l = this.rankData.dataList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.ranking == rank) {
                    return cell;
                }
            }
        }
        updateRed() {
            if (this.isOpen) {
                MainModel.Ins.funcSetRed(this.funcType, this.leijiCanLingQu || this.isFreeCanLingQu);
                MainModel.Ins.event(MainEvent.NewPlayerFeastRed_Update);
            }
        }
        get maxCount() {
            if (!this._maxCount) {
                this._maxCount = parseInt(System_RefreshTimeProxy.Ins.getVal(this.maxConfigId));
            }
            return this._maxCount;
        }
        updateTotal(val) {
            this.data.totalCnt = val;
            this.updateRed();
            this.event(DuanWuEvent.MoneyUpdate);
        }
        updateReward(rewardList) {
            this.data.rewardList = rewardList;
            this.updateRed();
            this.event(DuanWuEvent.MoneyUpdate);
        }
        upadteMsg(result) {
            let l = result.reverse();
            this.serDataList = this.serDataList.concat(l);
            while (this.serDataList.length > this.maxCount) {
                this.serDataList.shift();
            }
            if (l.length > 0) {
                this.event(DuanWuEvent.MSGUpdate);
            }
        }
    }

    exports.FeastLogMessage = FeastLogMessage;
    exports.GemBaseModel = GemBaseModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ItemUpdateCtl {
        constructor(tf, itemId) {
            this.itemId = itemId;
            this.tf = tf;
            this.tf.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.tf.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
            this.onUpdateView();
        }
        onDisplay() {
            MainModel.Ins.on(MainEvent.ValChange, this, this.onUpdateView);
            this.onUpdateView();
        }
        onUnDisplay() {
            this.exit();
        }
        onUpdateView() {
            let v = StringUtil.val2m(MainModel.Ins.mRoleData.getVal(this.itemId));
            this.tf.text = v;
        }
        exit() {
            MainModel.Ins.off(MainEvent.ValChange, this, this.onUpdateView);
        }
        static Create(tf, itemId) {
            return new ItemUpdateCtl(tf, itemId);
        }
    }

    exports.ItemUpdateCtl = ItemUpdateCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GemFeastModel extends GemBaseModel {
        constructor() {
            super(...arguments);
            this.packageTitleStr = "gemtitle02";
            this.rankTitleStr = "gemtitle03";
            this.funcType = EFuncDef.GemFeast;
            this.subType = EFeastType.Gem;
            this.rankBotStr = "duanwu06";
            this.rank_desc = "gemrank_title|gemrank_desc";
        }
        requstLeiChong(id) {
            let req = new ActivityTotalCntReward_req();
            req.type = this.subType;
            req.id = id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        requestRank() {
            let req = new ActivityNums_req();
            req.isNewPlayer = 0;
            req.type = this.subType;
            SocketMgr.Ins.SendMessageBin(req);
        }
        requstMsg() {
            let req = new ActivityRecords_req();
            req.isNewPlayer = 0;
            req.type = this.subType;
            req.recordSerial = this.maxRecordSerial;
            SocketMgr.Ins.SendMessageBin(req);
        }
        initUI() {
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new GemFeastModel();
            }
            return this._ins;
        }
        initMsg() {
            this.initUI();
            E.MsgMgr.AddMsg(MSGID.ActivityInit, this.onActivityInit, this);
            E.MsgMgr.AddMsg(MSGID.ActivityRecords, this.onActivityRecords, this);
            E.MsgMgr.AddMsg(MSGID.ActivitySelfRecords, this.onActivitySelfRecords, this);
            E.MsgMgr.AddMsg(MSGID.ActivityNums, this.onActivityNums, this);
            E.MsgMgr.AddMsg(MSGID.ActivityTotalCntReward, this.onActivityTotalCntReward, this);
            E.MsgMgr.AddMsg(MSGID.ActivityTotalCnt, this.onActivityTotalCnt, this);
        }
        onActivityInit(revc) {
            if (revc.type == this.subType) {
                this.data = revc;
                this.updateRed();
            }
        }
        onActivityRecords(revc) {
            if (revc.type == this.subType) {
                this.upadteMsg(revc.dataList);
            }
        }
        onActivitySelfRecords(revc) {
            if (revc.type == this.subType) {
                if (this.data) {
                    this.data.selfRecords = this.data.selfRecords.concat(revc.dataList);
                }
            }
        }
        onActivityNums(revc) {
            if (revc.type == this.subType) {
                this.rankData = revc;
                this.event(DuanWuEvent.RankUpdate);
            }
        }
        onActivityTotalCntReward(revc) {
            if (revc.type == this.subType) {
                this.updateReward(revc.dataList);
            }
        }
        onActivityTotalCnt(revc) {
            if (this.data) {
                if (revc.type == this.subType) {
                    this.updateTotal(revc.totalCnt);
                }
            }
        }
    }

    exports.GemFeastModel = GemFeastModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ActivityTimeUtils {
        static getTime(cfg) {
            let _start_str = cfg.f_time_start;
            const oneDay = 86400;
            let _timeVo = {};
            _timeVo.end = 0;
            let arr = _start_str.split("|");
            let type = parseInt(arr[0]);
            let _openTime = TimeUtil.openTime.toNumber() / 1000;
            let val = parseInt(arr[1]);
            let time = 0;
            switch (type) {
                case 1:
                    time = TimeUtil.getZeroSecond(_openTime);
                    time += (val - 1) * oneDay;
                    _timeVo.start = time;
                    if (cfg.f_time_end) {
                        _timeVo.end = time + oneDay * parseInt(cfg.f_time_end);
                    }
                    return _timeVo;
                case 5:
                    this.getLoopEndTime(_timeVo, _openTime, parseInt(cfg.f_time_end));
                    return _timeVo;
                default:
                    throw Error("time类型未实现");
            }
        }
        static getLoopEndTime(_timeVo, _openTime, day) {
            let alltime = ActivityTimeUtils.OneDay * day;
            let sub = (TimeUtil.serverTime - _openTime) / alltime;
            let a = Math.floor(sub);
            let start = _openTime + a * alltime;
            _timeVo.start = start;
            _timeVo.end = _timeVo.start + alltime;
        }
    }
    ActivityTimeUtils.OneDay = 86400;

    exports.ActivityTimeUtils = ActivityTimeUtils;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LiBaoZSProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new LiBaoZSProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Pack_NewPlayer_Mount";
        }
        getCfgByType(type) {
            for (let i = 0; i < this.List.length; i++) {
                if (this.List[i].f_packtype == type) {
                    return this.List[i];
                }
            }
            return null;
        }
    }
    class SkinLiBaoProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SkinLiBaoProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Pack_Skin";
        }
    }
    class t_Pack_FirstPay_Skin extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_FirstPay_Skin();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Pack_FirstPay_Skin";
        }
    }
    class AlternationRookieTaskProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new AlternationRookieTaskProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alternation_Rookie_Task";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_id == id);
        }
    }

    exports.AlternationRookieTaskProxy = AlternationRookieTaskProxy;
    exports.LiBaoZSProxy = LiBaoZSProxy;
    exports.SkinLiBaoProxy = SkinLiBaoProxy;
    exports.t_Pack_FirstPay_Skin = t_Pack_FirstPay_Skin;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class NewplayerFeastItem extends ui.views.huodong.ui_newplayer_feast_itemUI {
        constructor() {
            super();
            this.numCtl = new FontClipCtl(`remote/newplayerfeast/n`);
            this._actModel = ActivityModel.Ins;
            this.model = NewPlayerFeastModel.Ins;
            this.timeCtl = new TimeCtl(this.timeTF);
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            if (this.model.isOpenByUID(this.uid)) {
                let cfg = t_Pack_ControllerProxy.Ins.getByUID(this.uid);
                let subType = parseInt(cfg.f_p2);
                switch (subType) {
                    case EFeastType.Ride:
                        if (TaskModel.Ins.isFuncOpen(EFuncDef.Ride, true)) {
                            E.ViewMgr.Open(EViewType.NewPlayerRideFeast);
                        }
                        break;
                    case EFeastType.Gem:
                        if (TaskModel.Ins.isFuncOpen(EFuncDef.Gem, true)) {
                            E.ViewMgr.Open(EViewType.NewPlayerGemFeast);
                        }
                        break;
                    case EFeastType.FuJiang:
                        if (TaskModel.Ins.isFuncOpen(EFuncDef.FuJiang, true)) {
                            E.ViewMgr.Open(EViewType.NewPlayerFujiangFeast);
                        }
                        break;
                    case EFeastType.Pet:
                        if (TaskModel.Ins.isFuncOpen(EFuncDef.LingChong, true)) {
                            E.ViewMgr.Open(EViewType.NewPlayerPetFeast);
                        }
                        break;
                }
            }
        }
        refresh() {
            let uid = this.dataSource;
            this.uid = uid;
            let vo = this._actModel.getByUid(uid);
            let cfg = t_Pack_ControllerProxy.Ins.getByUID(this.uid);
            this.bg1.skin = `remote/newplayerfeast/a${cfg.f_p2}.png`;
            let packCfg = t_Pack_ControllerProxy.Ins.getByUID(this.uid);
            let time = ActivityTimeUtils.getTime(packCfg);
            this.timeCtl.stop();
            let day = packCfg.f_time_start.split("|")[1];
            this.numCtl.setValue(this.numCon, day, "middle");
            this.redImg.visible = false;
            if (this.model.isOpenByUID(this.uid)) {
                this.bg1.gray = this.timeTF.gray = this.redImg.gray = false;
                this.timeCtl.start(vo.endTime - TimeUtil.serverTime, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.onEnd));
                this.redImg.visible = this.model.hasRedByUID(this.uid);
            }
            else {
                this.bg1.gray = this.timeTF.gray = this.redImg.gray = true;
                let serverTime = TimeUtil.serverTime;
                if (serverTime >= time.end) {
                    this.timeTF.text = E.getLang("xrsy03");
                }
                else {
                    this.timeTF.text = E.getLang("notopen");
                }
            }
            if (E.Debug) {
                if (!this._testTf) {
                    this._testTf = new Laya.Label();
                    this.addChild(this._testTf);
                    this._testTf.fontSize = 30;
                    this._testTf.color = "#ff0000";
                }
                this._testTf.text = this.uid.toString();
            }
        }
        onUpdateTime(ticket) {
            let _s = TimeUtil.subTime(ticket);
            this.timeTF.text = _s + E.getLang("xrsy04");
        }
        onEnd() {
            this.timeTF.text = "";
        }
    }
    class NewplayerfeastView extends ViewBase {
        onAddLoadRes() {
            this.addAtlas("newplayerfeast.atlas");
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.OpenCloseStatusUpdate, this, this.refreshEvt);
            MainModel.Ins.off(MainEvent.NewPlayerFeastRed_Update, this, this.refreshEvt);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = NewPlayerFeastModel.Ins;
                this.UI = this._ui = new ui.views.huodong.ui_newplayerfeastUI();
                this.mMask = true;
                ButtonCtl.CreateBtn(this._ui.help, this, this.onHelp);
                this._ui.list1.itemRender = NewplayerFeastItem;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this.bindClose(this._ui.close1);
            }
        }
        onRenderHandler(item) {
            item.refresh();
        }
        onHelp() {
            E.ViewMgr.openHelpView("xrsy01", "xrsy02");
        }
        onInit() {
            MainModel.Ins.on(MainEvent.NewPlayerFeastRed_Update, this, this.refreshEvt);
            ActivityModel.Ins.on(ActivityEvent.OpenCloseStatusUpdate, this, this.refreshEvt);
            this.refreshEvt();
        }
        refreshEvt() {
            this._ui.list1.array = this.model.getShowSerialNums();
            this._ui.list1.scrollTo(0);
        }
    }
    class NewplayerfeastPackageItem extends ui.views.huodong.ui_newplayerfeast_package_itemUI {
        constructor() {
            super();
            this.chongzhiBtn.visible = false;
            this.tf03.text = E.getLang("LingQu");
            this.btnCtl = ButtonCtl.CreateBtn(this.lingquBtn, this, this.onLingQu);
        }
        onLingQu() {
            let req = new NewPlayerFeastScoreDraw_req();
            req.type = this.model.subType;
            req.id = this.cfg.f_id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        refresh(model) {
            this.model = model;
            this.cfg = this.dataSource;
            this.redimg.visible = false;
            this.tf01.text = StringUtil.format(this.cfg.f_ConditionTxt, this.cfg.f_Condition);
            ItemViewFactory.renderItemSlots(this.rewardCon, this.cfg.f_Reward, 10, 1, "left");
            let score = this.model.getScroe();
            this.tf02.text = score + "/" + this.cfg.f_Condition;
            let _status = this.model.getSubPackageStatus(this.cfg.f_id);
            switch (_status) {
                case EActivityLingQu.Nothing:
                    this.tf03.text = E.getLang("LingQu");
                    this.btnCtl.grayMouseDisable = true;
                    break;
                case EActivityLingQu.KeLingQu:
                    this.tf03.text = E.getLang("LingQu");
                    this.btnCtl.grayMouseDisable = false;
                    this.redimg.visible = true;
                    break;
                case EActivityLingQu.YiLingQu:
                    this.tf03.text = E.getLang("LingQu2");
                    this.btnCtl.grayMouseDisable = true;
                    break;
            }
        }
    }
    class NewplayerfeastPackage extends ViewBase {
        onAddLoadRes() {
            this.addAtlas("huodong.atlas");
            this.addAtlas("duanwu.atlas");
        }
        onExit() {
            NewPlayerFeastModel.Ins.off(NewPlayerFeastModel.EVENT_FEAST_REWARD, this, this.onUpdateReward);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_newplayerfeast_packageUI();
                this.mMask = true;
                this._ui.tf2.visible = this._ui.tf3.visible = false;
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = NewplayerfeastPackageItem;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onRenderHandler(item) {
            item.refresh(this.model);
        }
        onInit() {
            this.model = this.Data;
            NewPlayerFeastModel.Ins.on(NewPlayerFeastModel.EVENT_FEAST_REWARD, this, this.onUpdateReward);
            let uid = this.model.activityVo.uid;
            let subType = parseInt(t_Pack_ControllerProxy.Ins.getByUID(uid).f_p2);
            let cfglist = t_Alternation_Rookie.Ins.getListBySubType(subType);
            this._ui.list1.array = cfglist;
            this._ui.list1.scrollTo(0);
        }
        onUpdateReward() {
            this._ui.list1.refresh();
        }
    }

    exports.NewplayerfeastPackage = NewplayerfeastPackage;
    exports.NewplayerfeastView = NewplayerfeastView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class NewPlayerTaskItem extends ui.views.huodong.ui_newplayerfeast_package_itemUI {
        constructor() {
            super();
            this.chongzhiBtn.visible = false;
            ButtonCtl.Create(this.lingquBtn, new Laya.Handler(this, this.onBtnClick));
        }
        onBtnClick() {
            if (!this._data)
                return;
            let req = new NewPlayerFeastTask_req;
            req.id = this._data.id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let cfg = AlternationRookieTaskProxy.Ins.getCfgById(value.id);
            this.tf01.text = StringUtil.format(cfg.f_TaskContent, [cfg.f_TaskTarget]);
            ItemViewFactory.renderItemSlots(this.rewardCon, cfg.f_task, 10, 1, "left");
            this.tf02.text = "(" + value.nums + "/" + cfg.f_TaskTarget + ")";
            this.redimg.visible = false;
            if (value.status == 1) {
                this.tf03.text = "已领取";
                this.lingquBtn.disabled = true;
            }
            else if (value.status == 0) {
                this.tf03.text = "领取";
                this.lingquBtn.disabled = true;
            }
            else if (value.status == 2) {
                this.tf03.text = "领取";
                this.lingquBtn.disabled = false;
                this.redimg.visible = true;
            }
        }
    }

    exports.NewPlayerTaskItem = NewPlayerTaskItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class NewPlayerTaskView extends ViewBase {
        onAddLoadRes() {
            this.addAtlas("huodong.atlas");
            this.addAtlas("duanwu.atlas");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_newplayerfeast_packageUI();
                this.mMask = true;
                this._ui.tf1.text = "庆典任务";
                this._ui.tf2.visible = this._ui.tf3.visible = false;
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = NewPlayerTaskItem;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onInit() {
            NewPlayerFeastModel.Ins.on(NewPlayerFeastModel.UPDATA_TASK, this, this.updataView);
            this.model = this.Data;
            this.updataView();
        }
        onExit() {
            NewPlayerFeastModel.Ins.off(NewPlayerFeastModel.UPDATA_TASK, this, this.updataView);
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        updataView() {
            let arrr = NewPlayerFeastModel.Ins.getTaskListBySubType(this.model.subType);
            let arr1 = [];
            let arr2 = [];
            let arr3 = [];
            for (let i = 0; i < arrr.length; i++) {
                switch (arrr[i].status) {
                    case 2:
                        arr1.push(arrr[i]);
                        break;
                    case 0:
                        arr2.push(arrr[i]);
                        break;
                    case 1:
                        arr3.push(arrr[i]);
                        break;
                }
            }
            arr1 = arr1.sort(this.onSort);
            arr2 = arr2.sort(this.onSort);
            arr3 = arr3.sort(this.onSort);
            this._ui.list1.array = arr1.concat(arr2.concat(arr3));
        }
        onSort(a, b) {
            let aa = AlternationRookieTaskProxy.Ins.getCfgById(a.id);
            let bb = AlternationRookieTaskProxy.Ins.getCfgById(b.id);
            return aa.f_id - bb.f_id;
        }
    }

    exports.NewPlayerTaskView = NewPlayerTaskView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Alternation_Rookie extends BaseCfg {
        GetTabelName() {
            return "t_Alternation_Rookie";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Alternation_Rookie();
            }
            return this._ins;
        }
        getListBySubType(subType) {
            let res = [];
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_Type == subType) {
                    res.push(cfg);
                }
            }
            return res;
        }
    }
    class t_Alternation_RookiePack extends BaseCfg {
        GetTabelName() {
            return "t_Alternation_RookiePack";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Alternation_RookiePack();
            }
            return this._ins;
        }
        getListByType(type) {
            let l = this.List;
            let out = [];
            for (let i = 0; i < l.length; i++) {
                let o = l[i];
                if (o.f_PackType == type) {
                    out.push(o);
                }
            }
            return out;
        }
    }
    class NewPlayerFeastVo {
        addFeastList(l1) {
            for (let i = 0; i < l1.length; i++) {
                let cell = l1[i];
                let o = this.feastList.find(o => o.id == cell.id);
                if (o) {
                    o.status = cell.status;
                }
                else {
                    this.feastList.push(cell);
                }
            }
        }
    }
    class NewPlayerFeastModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.startTime = 0;
            this.endTime = 0;
            this.serialNums = [];
            this.dataList = [];
        }
        isActiveNotOpen(uid) {
            let packCfg = t_Pack_ControllerProxy.Ins.getByUID(uid);
            let time = ActivityTimeUtils.getTime(packCfg);
            let serverTime = TimeUtil.serverTime;
            if (serverTime < time.start) {
                return true;
            }
            return false;
        }
        getShowSerialNums() {
            let ids = [];
            for (let i = 0; i < this.serialNums.length; i++) {
                let id = this.serialNums[i];
                if (this.isActiveNotOpen(id)) ;
                else {
                    ids.push(id);
                }
            }
            return ids;
        }
        onInitCallBack() {
            this.serialNums = [];
            this.dataList = [];
            this.startTime = 0;
            this.endTime = 0;
            this.taskList = [];
        }
        initMsg() {
            this.Reg(new NewplayerfeastView(EViewType.NewPlayerFeast));
            this.Reg(new NewplayerfeastPackage(EViewType.NewPlayerFeastPackage));
            this.Reg(new NewPlayerTaskView(EViewType.NewPlayerTaskView));
            E.MsgMgr.AddMsg(MSGID.NewPlayerFeast, this.onNewPlayerFeast, this);
            E.MsgMgr.AddMsg(MSGID.NewPlayerFeastSelfRecords, this.onNewPlayerFeastSelfRecords, this);
            E.MsgMgr.AddMsg(MSGID.NewPlayerFeastRewards, this.onNewPlayerFeastRewards, this);
            E.MsgMgr.AddMsg(MSGID.NewPlayerFeastScore, this.onNewPlayerFeastScore, this);
            E.MsgMgr.AddMsg(MSGID.NewPlayerFeastTask, this.NewPlayerFeastTask, this);
            MainModel.Ins.on(MainEvent.NewPlayerFeastRed_Update, this, this.onNewPlayerFeastRed_Update);
        }
        onNewPlayerFeastRed_Update() {
            this.updateRed();
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new NewPlayerFeastModel();
            }
            return this._ins;
        }
        getScroeByType(type) {
            let a = this.dataList.find(cell => cell.type == type);
            if (a) {
                return a.score;
            }
            return 0;
        }
        onNewPlayerFeast(revc) {
            this.serialNums = revc.serialNums;
            this.startTime = revc.feastBeginUnix;
            this.endTime = revc.feastEndUnix;
            this.updateRed();
        }
        onLaterHandler() {
            MainModel.Ins.funcSetRed(EFuncDef.MountDQ, false);
            MainModel.Ins.funcSetRed(EFuncDef.PetQD, false);
            MainModel.Ins.funcSetRed(EFuncDef.GemQD, false);
            for (let i = 0; i < this.serialNums.length; i++) {
                let id = this.serialNums[i];
                if (this.hasRedByUID(id)) {
                    if (id == 40) {
                        MainModel.Ins.funcSetRed(EFuncDef.MountDQ, true);
                    }
                    if (id == 41) {
                        MainModel.Ins.funcSetRed(EFuncDef.GemQD, true);
                    }
                    if (id == 43) {
                        MainModel.Ins.funcSetRed(EFuncDef.PetQD, true);
                    }
                }
            }
        }
        updateRed() {
            Laya.timer.callLater(this, this.onLaterHandler);
        }
        getFeast(type) {
            return this.dataList.find(cell => cell.type == type);
        }
        addRecord(type, l1) {
            let vo = this.dataList.find(cell => cell.type == type);
            if (!vo) {
                vo = this.createFeastVo(type);
                this.dataList.push(vo);
            }
            vo.record = vo.record || [];
            vo.record = vo.record.concat(l1);
        }
        addNewFeast(type, l1) {
            let vo = this.dataList.find(cell => cell.type == type);
            if (!vo) {
                vo = this.createFeastVo(type);
                this.dataList.push(vo);
            }
            vo.feastList = vo.feastList || [];
            vo.addFeastList(l1);
        }
        createFeastVo(type) {
            let cell = new NewPlayerFeastVo();
            cell.type = type;
            cell.record = [];
            cell.feastList = [];
            cell.score = 0;
            return cell;
        }
        setScore(type, val) {
            let vo = this.dataList.find(cell => cell.type == type);
            if (!vo) {
                vo = this.createFeastVo(type);
                this.dataList.push(vo);
            }
            vo.score = val;
        }
        onNewPlayerFeastSelfRecords(revc) {
            this.addRecord(revc.type, revc.dataList);
            this.event(NewPlayerFeastModel.EVENT_RECORDS_UPDATA);
        }
        onNewPlayerFeastRewards(revc) {
            this.addNewFeast(revc.type, revc.dataList);
            this.event(NewPlayerFeastModel.EVENT_FEAST_REWARD);
        }
        onNewPlayerFeastScore(revc) {
            this.setScore(revc.type, revc.score);
        }
        NewPlayerFeastTask(value) {
            for (let i = 0; i < value.dataList.length; i++) {
                let index = this.taskList.findIndex(ele => ele.id == value.dataList[i].id);
                if (index == -1) {
                    this.taskList.push(value.dataList[i]);
                }
                else {
                    this.taskList[index] = value.dataList[i];
                }
            }
            this.event(NewPlayerFeastModel.UPDATA_TASK);
            this.updateRed();
        }
        getTaskListBySubType(subType) {
            if (!this.taskList)
                return [];
            let arr = [];
            for (let i = 0; i < this.taskList.length; i++) {
                let cfg = AlternationRookieTaskProxy.Ins.getCfgById(this.taskList[i].id);
                if (cfg.f_type == subType) {
                    arr.push(this.taskList[i]);
                }
            }
            return arr;
        }
        isTaskRedTipBySubType(subType) {
            if (!this.taskList)
                return false;
            for (let i = 0; i < this.taskList.length; i++) {
                let cell = this.taskList[i];
                let cfg = AlternationRookieTaskProxy.Ins.getCfgById(cell.id);
                if (cfg.f_type == subType && cell.status == 2) {
                    return true;
                }
            }
            return false;
        }
        hasRedByUID(uid) {
            let _actModel = ActivityModel.Ins;
            let vo = _actModel.getByUid(uid);
            if (vo && vo.isOpen) {
                if (vo.cfg.f_packid == EActivityType.NewPlayerFeast) {
                    let subType = parseInt(vo.cfg.f_p2);
                    if (this.isTaskRedTipBySubType(subType)) {
                        return true;
                    }
                    let _ckModel;
                    let packId;
                    if (subType == EFeastType.Ride) {
                        packId = EActivityType.ZuoqiChengZhang;
                        _ckModel = NewPlayerRideFeastModel.Ins;
                    }
                    else if (subType == EFeastType.Gem) {
                        packId = EActivityType.BaoshiChengZhang;
                        _ckModel = NewPlayerGemFeastModel.Ins;
                    }
                    else if (subType == EFeastType.Pet) {
                        packId = EActivityType.LingchongChengZhang;
                        _ckModel = NewPlayerPetFeastModel.Ins;
                    }
                    if (packId) {
                        const item = ActivityModel.Ins.getVo(packId);
                        if (item) {
                            if (ActivityModel.Ins.hasBoxBorn(packId, item)) {
                                return true;
                            }
                        }
                    }
                    if (_ckModel) {
                        if (_ckModel.isFreeCanLingQu) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        isOpenByUID(uid) {
            let _actModel = ActivityModel.Ins;
            let vo = _actModel.getByUid(uid);
            if (vo && vo.isOpen) {
                if (vo.cfg.f_packid == EActivityType.NewPlayerFeast) {
                    let funcid;
                    let subType = parseInt(vo.cfg.f_p2);
                    switch (subType) {
                        case EFeastType.Ride:
                            funcid = EFuncDef.DuanWu;
                            break;
                        case EFeastType.Gem:
                            funcid = EFuncDef.GemFeast;
                            break;
                        case EFeastType.FuJiang:
                            funcid = EFuncDef.FuJiangFeast;
                            break;
                        case EFeastType.Pet:
                            funcid = EFuncDef.PetFeast;
                            break;
                    }
                    if (funcid && !TaskModel.Ins.isFuncOpen(funcid)) {
                        return false;
                    }
                }
                return true;
            }
        }
        get isOpen() {
            if (this.startTime && this.endTime) {
                let time = TimeUtil.serverTime;
                if (time < this.startTime || time > this.endTime) {
                    return false;
                }
            }
            else if (this.startTime == 0 || this.endTime == 0) {
                return false;
            }
            return true;
        }
    }
    NewPlayerFeastModel.EVENT_RECORDS_UPDATA = "EVENT_RECORDS_UPDATA";
    NewPlayerFeastModel.EVENT_FEAST_REWARD = "EVENT_FEAST_REWARD";
    NewPlayerFeastModel.UPDATA_TASK = "UPDATA_TASK";
    class NewPlayerBaseFeastModel extends GemFeastModel {
        constructor() {
            super(...arguments);
            this.rankTitleStr = "huodongjiangli1";
            this.leichongTitle = "leichongjiangli1";
            this.packId = EActivityType.NewPlayerFeast;
        }
        getSubPackageStatus(id) {
            let vo = NewPlayerFeastModel.Ins.getFeast(this.subType);
            if (vo && vo.feastList) {
                let _find = vo.feastList.find(cell => cell.id == id);
                if (_find) {
                    return _find.status;
                }
            }
            return EActivityLingQu.Nothing;
        }
        getScroe() {
            return NewPlayerFeastModel.Ins.getScroeByType(this.subType);
        }
        get packcfgList() {
            return t_Alternation_RookiePack.Ins.getListByType(this.subType);
        }
        get selfList() {
            let vo = NewPlayerFeastModel.Ins.getFeast(this.subType);
            if (vo) {
                return vo.record || [];
            }
        }
        requestRank() {
            let req = new ActivityNums_req();
            req.isNewPlayer = 1;
            req.type = this.subType;
            SocketMgr.Ins.SendMessageBin(req);
        }
        requstLeiChong(id) {
        }
        requstMsg() {
            let req = new ActivityRecords_req();
            req.isNewPlayer = 1;
            req.type = this.subType;
            req.recordSerial = this.maxRecordSerial;
            SocketMgr.Ins.SendMessageBin(req);
        }
        initMsg() {
            super.initMsg();
        }
        get isOpen() {
            return this.activityVo && this.activityVo.isOpen;
        }
        onInitCallBack() {
            super.onInitCallBack();
        }
    }
    class NewPlayerGemFeastModel extends NewPlayerBaseFeastModel {
        constructor() {
            super(...arguments);
            this.funcType = EFuncDef.GemFeast;
            this.subType = EFeastType.Gem;
            this.rankTitleStr1 = "gemtitle03";
            this.rankBotStr = "duanwu06";
            this.rank_desc = "";
            this.packageTitleStr = "gemtitle02";
        }
        static get Ins() {
            if (!this._ins2) {
                this._ins2 = new NewPlayerGemFeastModel();
            }
            return this._ins2;
        }
    }
    class NewPlayerRideFeastModel extends NewPlayerBaseFeastModel {
        constructor() {
            super(...arguments);
            this.funcType = EFuncDef.DuanWu;
            this.subType = EFeastType.Ride;
            this.rankTitleStr1 = "ridetitle03";
            this.rankBotStr = "duanwu08";
            this.rank_desc = "";
            this.packageTitleStr = "ridetitle02";
        }
        static get Ins() {
            if (!this._ins2) {
                this._ins2 = new NewPlayerRideFeastModel();
            }
            return this._ins2;
        }
    }
    class NewPlayerFujiangFeastModel extends NewPlayerBaseFeastModel {
        constructor() {
            super(...arguments);
            this.funcType = EFuncDef.FuJiangFeast;
            this.subType = EFeastType.FuJiang;
        }
        static get Ins() {
            if (!this._ins2) {
                this._ins2 = new NewPlayerFujiangFeastModel();
            }
            return this._ins2;
        }
    }
    class NewPlayerPetFeastModel extends NewPlayerBaseFeastModel {
        constructor() {
            super(...arguments);
            this.funcType = EFuncDef.PetFeast;
            this.subType = EFeastType.Pet;
            this.rankTitleStr1 = "pet05";
            this.rankBotStr = "pet_desc";
            this.rank_desc = "";
            this.packageTitleStr = "pet04";
        }
        static get Ins() {
            if (!this._ins2) {
                this._ins2 = new NewPlayerPetFeastModel();
            }
            return this._ins2;
        }
    }

    exports.NewPlayerBaseFeastModel = NewPlayerBaseFeastModel;
    exports.NewPlayerFeastModel = NewPlayerFeastModel;
    exports.NewPlayerFujiangFeastModel = NewPlayerFujiangFeastModel;
    exports.NewPlayerGemFeastModel = NewPlayerGemFeastModel;
    exports.NewPlayerPetFeastModel = NewPlayerPetFeastModel;
    exports.NewPlayerRideFeastModel = NewPlayerRideFeastModel;
    exports.t_Alternation_Rookie = t_Alternation_Rookie;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MsgLogItemView extends ui.views.duanwu.ui_duanwu_log_itemviewUI {
        refresh(type) {
            let _data = this.dataSource;
            let msg = GemBaseModel.ConvertMsg(type, _data);
            this.tf0.text = msg.desc;
            this.tf1.color = msg.color;
            this.tf1.text = msg.name;
            this.tf1.x = this.tf0.x + this.tf0.textField.width;
        }
    }
    class DuanWuView extends ViewBase {
        constructor() {
            super(...arguments);
            this.rideList = [];
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("duanwu.atlas");
        }
        onExit() {
            this.clearRide();
            this.model.off(DuanWuEvent.MSGUpdate, this, this.onMsgEvt);
            this.model.off(DuanWuEvent.MoneyUpdate, this, this.redUpdateView);
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.updateActivityEvt);
            NewPlayerFeastModel.Ins.off(NewPlayerFeastModel.UPDATA_TASK, this, this.updataTaskRedTip);
            Laya.timer.clear(this, this.timeLoop);
        }
        updateActivityEvt() {
            this.redUpdateView();
        }
        bindModel() {
            this.model = DuanWuModel.Ins;
        }
        initUI() {
            this.UI = this._ui = new ui.views.duanwu.ui_duanwu_mainUI();
            this._ui.zhekouImg.mouseEnabled = false;
            this.btnList.push(ButtonCtl.CreateBtn(this._ui.xunzaoBtn, this, this.onXunZhao), ButtonCtl.CreateBtn(this._ui.threeBtn, this, this.onGoldReq));
            this._ui.desctf.text = E.getLang("duanwu07");
            ItemUpdateCtl.Create(this._ui.juanzhoutf, ECellType.HorseItemId);
            ItemUpdateCtl.Create(this._ui.goldtf, ECellType.GOLD);
        }
        onFirstInit() {
            if (!this.UI) {
                this.bindModel();
                this.initUI();
                this.bindClose(this._ui.close1);
                this.btnList.push(this._btn1 = ButtonCtl.CreateBtn(this._ui.btn1, this, this.onPackage), this._btn2 = ButtonCtl.CreateBtn(this._ui.btn2, this, this.onRankHandler), this._btn3 = ButtonCtl.CreateBtn(this._ui.btn3, this, this.onLeiChong), ButtonCtl.CreateBtn(this._ui.choujiangBtn, this, this.onRewardListHandler), ButtonCtl.CreateBtn(this._ui.help, this, this.onBtnTipClick));
                if (this._ui["btn4"]) {
                    this.btnList.push(ButtonCtl.CreateBtn(this._ui["btn4"], this, this.onRankHandler1));
                }
                this.showRewardView();
                this._ui.msgList.itemRender = MsgLogItemView;
                this._ui.msgList.renderHandler = new Laya.Handler(this, this.onMsgList);
            }
        }
        onGoldReq() {
            if (!this.model.isOpen) {
                E.ViewMgr.ShowMidError(E.getLang("activityend"));
                return;
            }
            let req = new GetRide_req();
            req.itemId = ECellType.GOLD;
            req.type = EZuoQi.Three;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onXunZhao() {
            let req = new GetRide_req();
            req.itemId = ECellType.HorseItemId;
            req.type = EZuoQi.Three;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onMsgList(item) {
            item.refresh(this.model.subType);
        }
        onBtnTipClick() {
            if (this.model.packId == EActivityType.DuanWu) {
                E.ViewMgr.openHelpView("duanwutitle", "duanwudesc");
            }
            else {
                E.ViewMgr.openHelpView("duanwutitle1", "duanwudesc1");
            }
        }
        onMsgEvt() {
            this._ui.msgList.dataSource = this.model.serDataList;
            this._ui.msgList.refresh();
            this.gotoEndIndex();
        }
        gotoEndIndex() {
            let index = 0;
            if (this.model.serDataList.length > 0) {
                index = this.model.serDataList.length - 1;
            }
            this._ui.msgList.scrollTo(index);
        }
        showRewardView() {
            if (this.model.packId == EActivityType.DuanWu) {
                let cfg = t_Alternation_Rank.Ins.getFreeByType(this.model.subType);
                let dataList = this.model.convertData(cfg);
                ItemViewFactory.renderItemSlots(this._ui.rewardCon, dataList, 10, 1, "center", DuanWuLeichongSlotItemView, "DuanWuLeichongSlotItemView");
            }
            else {
                let cfg = t_Alternation_Rookie_Rank.Ins.getFreeByType(this.model.subType);
                let itemList = ItemViewFactory.convertItemList(cfg.f_Rewarditem);
                let dataList = [];
                for (let i = 0; i < itemList.length; i++) {
                    let vo = new DuanwuSlotVo();
                    vo.itemVo = itemList[i];
                    dataList.push(vo);
                }
                ItemViewFactory.renderItemSlots(this._ui.rewardCon, dataList, 10, 1, "center", DuanWuLeichongSlotItemView, "DuanWuLeichongSlotItemView");
            }
        }
        redUpdateView() {
            this._ui.red0.visible = this.model.isFreeCanLingQu;
            DotManager.removeDot(this._ui.btn2);
            if (this.model.packId == EActivityType.DuanWu) {
                this._ui.red1.visible = this.model.leijiCanLingQu;
            }
            else if (this.model.packId == EActivityType.NewPlayerFeast) {
                let packId;
                if (this.model.subType == EFeastType.Ride) {
                    packId = EActivityType.ZuoqiChengZhang;
                }
                else if (this.model.subType == EFeastType.Gem) {
                    packId = EActivityType.BaoshiChengZhang;
                }
                else if (this.model.subType == EFeastType.Pet) {
                    packId = EActivityType.LingchongChengZhang;
                }
                const item = ActivityModel.Ins.getVo(packId);
                if (item) {
                    if (ActivityModel.Ins.hasBoxBorn(packId, item)) {
                        this._ui.red1.visible = true;
                    }
                    else {
                        this._ui.red1.visible = false;
                    }
                }
                else {
                    this._ui.red1.visible = false;
                }
                this.updataTaskRedTip();
            }
        }
        updataTaskRedTip() {
            if (NewPlayerFeastModel.Ins.isTaskRedTipBySubType(this.model.subType)) {
                DotManager.addDot(this._ui.btn2, 5);
            }
            else {
                DotManager.removeDot(this._ui.btn2);
            }
        }
        onRewardListHandler() {
            E.ViewMgr.Open(EViewType.DuanWuLog, null, this.model);
        }
        onLeiChong() {
            switch (this.model.packId) {
                case EActivityType.DuanWu:
                    E.ViewMgr.Open(EViewType.DuanWuLeiChong, null, this.model);
                    break;
                case EActivityType.NewPlayerFeast:
                    if (this.model.subType == EFeastType.Ride) {
                        E.ViewMgr.Open(EViewType.ZuoqiChengZhangView, null, "notopen");
                    }
                    else if (this.model.subType == EFeastType.Gem) {
                        E.ViewMgr.Open(EViewType.BaoshiChengZhangView, null, "notopen");
                    }
                    else if (this.model.subType == EFeastType.Pet) {
                        E.ViewMgr.Open(EViewType.LingchongChengZhangView, null, "notopen");
                    }
                    break;
            }
        }
        onRankHandler() {
            switch (this.model.packId) {
                case EActivityType.DuanWu:
                    E.ViewMgr.Open(EViewType.DuanWuRank, null, this.model);
                    break;
                case EActivityType.NewPlayerFeast:
                    if (this.model.activityVo) {
                        E.ViewMgr.Open(EViewType.NewPlayerTaskView, null, this.model);
                    }
                    break;
            }
        }
        onRankHandler1() {
            E.ViewMgr.Open(EViewType.DuanWuRank, null, this.model);
        }
        onPackage() {
            E.ViewMgr.Open(EViewType.DuanWuPackage, null, this.model);
        }
        clearRide() {
            for (let i = 0; i < this.rideList.length; i++) {
                this.rideList[i].stop();
            }
        }
        timeLoop() {
            this.model.requstMsg();
            Laya.timer.once(2000, this, this.timeLoop);
        }
        onInit() {
            this._ui.titleimg.skin = this.model.titleSkin;
            this._ui.tf1.text = E.getLang(this.model.titleStr);
            this._ui.tf2.text = E.getLang(this.model.rankTitleStr);
            this._ui.tf3.text = E.getLang(this.model.leichongTitle);
            switch (this.model.packId) {
                case EActivityType.DuanWu:
                    if (this._ui['btn4']) {
                        this._ui['btn4'].visible = false;
                    }
                    this._ui.lab_qf.text = "(当前区服：" + DuanWuModel.Ins.serverIdBegin + "-" + DuanWuModel.Ins.serverIdEnd + "服)";
                    this._ui.bg1.visible = false;
                    this._ui.tf5.x = 108;
                    this._ui.btn1.width = this._ui.btn2.width = this._ui.btn3.width = 190;
                    this._btn1.setpos(79, 1047);
                    this._btn2.setpos(284, 1047);
                    this._btn3.setpos(489, 1047);
                    break;
                case EActivityType.NewPlayerFeast:
                    if (this._ui['tf_4']) {
                        this._ui['tf_4'].text = E.getLang(this.model.rankTitleStr1);
                    }
                    this._ui.lab_qf.text = "";
                    this._ui.bg1.visible = true;
                    this._ui.bg1.x = 303;
                    this._ui.tf5.x = 315;
                    break;
            }
            this.model.on(DuanWuEvent.MoneyUpdate, this, this.redUpdateView);
            this.model.on(DuanWuEvent.MSGUpdate, this, this.onMsgEvt);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.updateActivityEvt);
            NewPlayerFeastModel.Ins.on(NewPlayerFeastModel.UPDATA_TASK, this, this.updataTaskRedTip);
            this.initRide();
            let vo = this.model.activityVo;
            if (vo) {
                this._ui.titleTf.text = E.getLang("houdongtime") + ":" + TimeUtil.getMonthDay(vo.startTime) + "-" + TimeUtil.getMonthDay(vo.endTime);
                this.onMsgEvt();
                this.timeLoop();
                this.redUpdateView();
            }
            else {
                this._ui.msgList.dataSource = [];
            }
            this.updateMoney();
        }
        initRide() {
            if (this.model.subType == EFeastType.Ride) {
                let arr = System_RefreshTimeProxy.Ins.getVal(29).split("|");
                for (let i = 0; i < arr.length; i++) {
                    let mountId = parseInt(arr[i]);
                    let con = this._ui["h" + i];
                    if (con.numChildren) {
                        let avatar = con.getChildAt(0);
                        avatar.play(EAvatarAnim.None);
                    }
                    else {
                        let avatar = AvatarFactory.createRide(mountId);
                        avatar.scaleX = avatar.scaleY = 1.4;
                        con.addChild(avatar);
                        this.rideList.push(avatar);
                    }
                }
            }
        }
        updateMoney() {
            if (this._ui instanceof ui.views.duanwu.ui_duanwu_mainUI) {
                let _result = ZuoQiModel.Ins.getSubTime();
                if (this.model.packId == EActivityType.DuanWu) {
                    this._ui.zhekouImg.visible = true;
                    this._ui.threeTf.text = _result.nowThreeCount + "";
                    this._ui.oldGoldTf.text = E.getLang("oldprice") + `${_result.threeOldCount}`;
                    this._ui.zhekouTf.text = E.getLang("limitdiscount", _result.discount);
                }
                else {
                    this._ui.zhekouImg.visible = false;
                    this._ui.threeTf.text = _result.threeOldCount + "";
                }
            }
        }
    }

    exports.DuanWuView = DuanWuView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangFeastModel extends GemFeastModel {
        constructor() {
            super(...arguments);
            this.packageTitleStr = "gttitle02";
            this.rankTitleStr = "gttitle03";
            this.funcType = EFuncDef.FuJiangFeast;
            this.subType = EFeastType.FuJiang;
            this.rankBotStr = "gtrank_desc";
            this.rank_desc = "gtrank_title|gtrank_read";
        }
        initUI() {
        }
        static get Ins() {
            if (!this._ins2) {
                this._ins2 = new FuJiangFeastModel();
            }
            return this._ins2;
        }
    }

    exports.FuJiangFeastModel = FuJiangFeastModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FuJiangFeastMianView extends DuanWuView {
        bindModel() {
            this.model = FuJiangFeastModel.Ins;
        }
        initUI() {
            this.UI = this._ui = new ui.views.fujiangfeast.ui_fujiangfeast_mainUI();
            this.skin = this._ui;
            this._ui.desctf.text = E.getLang("fujiangfeast01");
            ItemUpdateCtl.Create(this._ui.juanzhoutf, ECellType.JunLingZhuang);
            ItemUpdateCtl.Create(this._ui.goldtf, ECellType.GOLD);
            this.cfg = FuJiangConfigProxy.Ins.List[0];
            ButtonCtl.CreateBtn(this._ui.xunzaoBtn, this, this.oneGetHandler);
            ButtonCtl.CreateBtn(this._ui.threeBtn, this, this.tenGetHandler);
            ButtonCtl.CreateBtn(this._ui.juanzhou, this, this.onBuy);
            this._checkBoxCtl = new CheckBoxCtl({ bg: this.skin.ck, gou: this.skin.gou });
            this._checkBoxCtl.selectHander = new Laya.Handler(this, this.onSelectHander);
            this._checkBoxCtl.selected = true;
            this.updataView();
        }
        onSelectHander() {
            this.updataView();
        }
        updataView() {
            let _ten;
            let _35;
            if (!this._checkBoxCtl.selected) {
                _ten = ItemViewFactory.convertItem(this.cfg.f_drawten);
                this._zk10 = ItemViewFactory.convertItem(this.cfg.f_FeastDiscount);
                _35 = ItemViewFactory.convertItem(this.cfg.f_drawmulti);
                this._zk35 = ItemViewFactory.convertItem(this.cfg.f_Drawsinglediscount);
            }
            else {
                _ten = ItemViewFactory.convertItem(this.cfg.f_drawten_gold);
                this._zk10 = ItemViewFactory.convertItem(this.cfg.f_FeastDiscount_gold);
                _35 = ItemViewFactory.convertItem(this.cfg.f_drawmulti_gold);
                this._zk35 = ItemViewFactory.convertItem(this.cfg.f_Drawsinglediscount_gold);
            }
            this.skin.ybicon.skin = _ten.getIcon();
            this.skin.ybtf1.text = this._zk10.count + "";
            this.skin.oldTf1.text = _ten.count + "";
            this.skin.zhekouTf1.text = E.getLang("limitdiscount", this.cfg.f_discountvalue);
            this.skin.rightYuanBaoIcon.skin = _35.getIcon();
            this.skin.threeTf.text = this._zk35.count + "";
            this.skin.oldTf.text = _35.count + "";
            this.skin.zhekouTf.text = E.getLang("limitdiscount", this.cfg.f_discountvalue);
        }
        onBuy() {
            E.ViewMgr.Open(EViewType.FuJiangGouMai);
        }
        chouqu(type) {
            FuJiangModel.Ins.zmNum = type;
            let req = new RecruitChief_req();
            req.itemId = this._zk10.cfg.f_itemid;
            req.type = type;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onInit() {
            super.onInit();
            FuJiangModel.Ins.on(FuJiangModel.FUJIANG_ZHAOMU_UPDATA, this, this.openFuJiangHuoDe);
        }
        onExit() {
            super.onExit();
            FuJiangModel.Ins.off(FuJiangModel.FUJIANG_ZHAOMU_UPDATA, this, this.openFuJiangHuoDe);
        }
        openFuJiangHuoDe() {
            if (FuJiangModel.Ins.zmNum == 1) {
                E.ViewMgr.Open(EViewType.FuJiangHuoDe, null, [FuJiangModel.Ins.getIndexEff(), this._zk10]);
            }
            else if (FuJiangModel.Ins.zmNum == 2) {
                E.ViewMgr.Open(EViewType.FuJiangHDView1, null, this._zk35);
            }
        }
        tenGetHandler() {
            if (!this._checkBoxCtl.selected) {
                if (!MainModel.Ins.isItemEnoughSt(this.cfg.f_Drawsinglediscount)) {
                    this.onBuy();
                    return;
                }
            }
            this.chouqu(2);
        }
        oneGetHandler() {
            if (!this._checkBoxCtl.selected) {
                if (!MainModel.Ins.isItemEnoughSt(this.cfg.f_FeastDiscount)) {
                    this.onBuy();
                    return;
                }
            }
            this.chouqu(1);
        }
        onAddLoadRes() {
            this.addAtlas("fujiang.atlas");
            this.addAtlas("duanwu.atlas");
            this.addAtlas("fujiangfeast.atlas");
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("fjfeasttitle", "fjfeastdesc");
        }
    }

    exports.FuJiangFeastMianView = FuJiangFeastMianView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GemItemCtl$1 {
        constructor(skin, id) {
            this.skin = skin;
            this.cfg = t_Gem_Shop_Activity.Ins.GetDataById(id);
            this.skin.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onUndisplay);
            ButtonCtl.CreateBtn(this.skin.btn1, this, this.onBuyHandler);
        }
        onBuyHandler() {
            E.ViewMgr.Open(EViewType.BaoShiGMView, null, this._buyCfg);
        }
        onDisplay() {
            MainModel.Ins.on(MainEvent.ValChange, this, this.onUpadteMoney);
            this.onUpadteMoney();
        }
        isEnough(_gemCfg) {
            let discount = _gemCfg.f_Discount / 10000;
            let itemVo = ItemViewFactory.convertItem(_gemCfg.f_price);
            let val = itemVo.count * discount;
            let have = MainModel.Ins.mRoleData.getVal(itemVo.cfgId);
            return have >= val;
        }
        onUpadteMoney() {
            let arr = this.cfg.f_PricePriority.split("|");
            let _curGemCfg;
            for (let i = 0; i < arr.length; i++) {
                let o = parseInt(arr[i]);
                let _gemCfg = BaoShiShopProxy.Ins.GetDataById(o);
                if (this.isEnough(_gemCfg)) {
                    _curGemCfg = _gemCfg;
                    break;
                }
            }
            if (!_curGemCfg) {
                let o = parseInt(arr[arr.length - 1]);
                let _gemCfg = BaoShiShopProxy.Ins.GetDataById(o);
                _curGemCfg = _gemCfg;
            }
            let discount = 1;
            let itemVo = ItemViewFactory.convertItem(_curGemCfg.f_price);
            {
                this.skin.zhekouImg.visible = false;
            }
            this.skin.countTf.text = itemVo.count * discount + "";
            this.skin.moneyIcon.skin = itemVo.getIcon();
            let _resultItemVo = ItemViewFactory.convertItem(`${_curGemCfg.f_itemid}-1`);
            this.skin.tf1.text = _resultItemVo.getName();
            ItemViewFactory.refreshSlot(this.skin.slot, _resultItemVo);
            this._buyCfg = _curGemCfg;
        }
        onUndisplay() {
            MainModel.Ins.off(MainEvent.ValChange, this, this.onUpadteMoney);
        }
    }
    class GemFeastView extends DuanWuView {
        constructor() {
            super(...arguments);
            this.gemList = [];
        }
        initSkin() {
            this.UI = this._ui = new ui.views.gemfeast.ui_gemfeast_mainUI();
            this._ui.desctf.text = E.getLang("gemfeast01");
            this.gemList.push(new GemItemCtl$1(this._ui.item0, 1), new GemItemCtl$1(this._ui.item1, 2));
            ItemUpdateCtl.Create(this._ui.juanzhou2Tf, ECellType.BaoShiQuan);
            this._ui.juanzhouicon2.skin = IconUtils.getIconByCfgId(ECellType.BaoShiQuan);
            ItemUpdateCtl.Create(this._ui.juanzhoutf, ECellType.BaoShiQuanG);
            this._ui.juanzhouicon.skin = IconUtils.getIconByCfgId(ECellType.BaoShiQuanG);
            ItemUpdateCtl.Create(this._ui.goldtf, ECellType.GOLD);
        }
        bindModel() {
            this.model = GemFeastModel.Ins;
        }
        initUI() {
            this.initSkin();
        }
        onAddLoadRes() {
            this.addAtlas("duanwu.atlas");
            this.addAtlas("gemfeast.atlas");
        }
        onBtnTipClick() {
            if (this.model.packId == EActivityType.DuanWu) {
                E.ViewMgr.openHelpView("gemfeasttitle", "gemfeastdesc");
            }
            else {
                E.ViewMgr.openHelpView("gemfeasttitle1", "gemfeastdesc1");
            }
        }
    }

    exports.GemFeastView = GemFeastView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GemItemCtl$1 {
        constructor(skin, key) {
            this.skin = skin;
            const conf = t_Alternation_Gem_Config.Ins.GetDataById(1);
            this.cfg = {
                num: key === 'f_drawgemtriple' ? 3 : 1,
                rewards: conf[key],
                truePrice: key === 'f_drawgemtriple' ? conf['f_trueprice'] : 0
            };
            this.skin.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onUndisplay);
            ButtonCtl.CreateBtn(this.skin.btn1, this, this.onBuyHandler);
        }
        onBuyHandler() {
            let req = new GemBuy_req();
            req.type = 1;
            req.id = 0;
            req.num = this.cfg.num;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onDisplay() {
            MainModel.Ins.on(MainEvent.ValChange, this, this.onUpadteMoney);
            this.onUpadteMoney();
        }
        onUpadteMoney() {
            let itemVo = ItemViewFactory.convertItem(this.cfg.rewards);
            let discount = this.cfg.truePrice ? (itemVo.count / this.cfg.truePrice) : 1;
            if (discount >= 1) {
                this.skin.zhekouImg.visible = false;
            }
            else {
                this.skin.zhekouImg.visible = true;
                this.skin.zhekouTf.text = E.getLang("limitdiscount", (discount * 10).toFixed(0));
                this.skin.oldGoldTf.text = E.getLang("oldprice") + this.cfg.truePrice;
            }
            this.skin.countTf.text = itemVo.count + '';
            this.skin.moneyIcon.skin = itemVo.getIcon();
            this.skin.tf1.text = E.getLang("gemLottery", this.cfg.num);
        }
        onUndisplay() {
            MainModel.Ins.off(MainEvent.ValChange, this, this.onUpadteMoney);
        }
    }
    class GemFeastView2 extends DuanWuView {
        constructor() {
            super(...arguments);
            this.gemList = [];
        }
        initSkin() {
            this.UI = this._ui = new ui.views.gemfeast.ui_gemfeast_main2UI();
            this._ui.desctf.text = E.getLang("gemfeast01");
            this.gemList.push(new GemItemCtl$1(this._ui.item20, 'f_drawgemsingle'), new GemItemCtl$1(this._ui.item21, 'f_drawgemtriple'));
            ItemUpdateCtl.Create(this._ui.juanzhou2Tf, ECellType.BaoShiQuan);
            this._ui.juanzhouicon2.skin = IconUtils.getIconByCfgId(ECellType.BaoShiQuan);
            ItemUpdateCtl.Create(this._ui.juanzhoutf, ECellType.BaoShiQuanG);
            this._ui.juanzhouicon.skin = IconUtils.getIconByCfgId(ECellType.BaoShiQuanG);
            ItemUpdateCtl.Create(this._ui.goldtf, ECellType.GOLD);
        }
        bindModel() {
            this.model = GemFeastModel.Ins;
        }
        initUI() {
            this.initSkin();
        }
        onAddLoadRes() {
            this.addAtlas("duanwu.atlas");
            this.addAtlas("gemfeast.atlas");
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("gemfeasttitle", "gemfeastdesc");
        }
    }

    exports.GemFeastView2 = GemFeastView2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongModel extends Laya.EventDispatcher {
        constructor() {
            super(...arguments);
            this.ckList = [];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new LingChongModel();
            }
            return this._ins;
        }
        isRedTip() {
            if (!TaskModel.Ins.isFuncOpen(EFuncDef.LingChong)) {
                return false;
            }
            if (!this.petDataList) {
                return false;
            }
            if (this.isFreeRedTip()) {
                return true;
            }
            return false;
        }
        isFreeRedTip() {
            if (this.freeCount) {
                return true;
            }
            return false;
        }
        getSkillLv(star) {
            return star + 1;
        }
        getPetListByType(type) {
            let array = [];
            let arr = PetListProxy.Ins.List;
            for (let i = 0; i < arr.length; i++) {
                if (type == 0 || type == arr[i].f_pettype) {
                    array.push(arr[i]);
                }
            }
            return array;
        }
        getSZPetData() {
            if (this.petDataList) {
                return this.petDataList.find(ele => ele.onBattle == 1);
            }
            return null;
        }
        getAttrArr(id, lv, star) {
            let cfg = PetListProxy.Ins.getCfgById(id);
            let qCfg = PetQualityProxy.Ins.getCfgById(cfg.f_petquality);
            let str = qCfg.f_initivalue + "|";
            let attArr = qCfg.f_upgradevalue.split("|");
            for (let i = 0; i < attArr.length; i++) {
                let arr = attArr[i].split(":");
                str += arr[0] + ":" + parseInt(arr[1]) * lv + "|";
            }
            attArr = qCfg.f_upstarvalue.split("|");
            for (let i = 0; i < attArr.length; i++) {
                let arr = attArr[i].split(":");
                str += arr[0] + ":" + parseInt(arr[1]) * star + "|";
            }
            if (str.length > 0) {
                str = str.substr(0, str.length - 1);
            }
            return PlayerVoFactory.mergeAttr(str);
        }
        petSort(a, b) {
            let aCfg = PetListProxy.Ins.getByPetID(a.petId);
            let bCfg = PetListProxy.Ins.getByPetID(b.petId);
            if (aCfg.f_petquality > bCfg.f_petquality) {
                return -1;
            }
            else if (aCfg.f_petquality < bCfg.f_petquality) {
                return 1;
            }
            else {
                if (a.petStar > b.petStar) {
                    return -1;
                }
                else if (a.petStar < b.petStar) {
                    return 1;
                }
                else {
                    if (a.petLevel > b.petLevel) {
                        return -1;
                    }
                    else if (a.petLevel < b.petLevel) {
                        return 1;
                    }
                    else {
                        if (a.petId > b.petId) {
                            return 1;
                        }
                        else if (a.petId < b.petId) {
                            return -1;
                        }
                        else {
                            return 0;
                        }
                    }
                }
            }
        }
        getSkillDec(id, lv) {
            let sCfg = PetSkillClientProxy.Ins.getCfgById(id);
            let arr = sCfg.f_initvalue.split("|");
            let arr1 = sCfg.f_valuenum.split("|");
            let arr2 = [];
            for (let i = 0; i < arr.length; i++) {
                let num = (parseInt(arr[i]) + (parseInt(arr1[i]) * (lv - 1))) / 100;
                arr2.push(num + "%");
            }
            return StringUtil.format(sCfg.f_skillintro, arr2);
        }
        getPetAction(sel, type) {
            let req = new PetExtract_req();
            if (sel) {
                req.itemId = ECellType.GOLD;
                req.type = type;
                SocketMgr.Ins.SendMessageBin(req);
            }
            else {
                let num = MainModel.Ins.mRoleData.getVal(ECellType.LingChouZM);
                let cfg = PetConfigProxy.Ins.List[0];
                if (num >= parseInt(cfg.f_singleprice.split("-")[1])) {
                    req.itemId = ECellType.LingChouZM;
                    req.type = type;
                    SocketMgr.Ins.SendMessageBin(req);
                }
                else {
                    E.ViewMgr.Open(EViewType.LingChongGMView);
                }
            }
        }
    }
    LingChongModel.Updata_LingChong = "Updata_LingChong";
    LingChongModel.Updata_ChouKa = "Updata_ChouKa";
    LingChongModel.UPDATA_NEW_XM = "UPDATA_NEW_XM";
    LingChongModel.UPDATA_EQUIP_XM = "UPDATA_EQUIP_XM";
    LingChongModel.UPDATA_LEVEL_XM = "UPDATA_LEVEL_XM";
    LingChongModel.UPDATA_XM_LOCK = "UPDATA_XM_LOCK";
    LingChongModel.REMOVE_LingChong = "REMOVE_LingChong";

    exports.LingChongModel = LingChongModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LingChongFeastView extends DuanWuView {
        constructor() {
            super(...arguments);
            this.timeDelay = 300;
        }
        bindModel() {
            this.model = LingChongFeastModel.Ins;
        }
        initUI() {
            this.UI = this._ui = new ui.views.lingchongfeast.ui_lingchong_feastUI();
            this._ui.desctf.text = E.getLang("pet02");
            ItemUpdateCtl.Create(this._ui.goldtf, ECellType.GOLD);
            this._ui.yuanbaoicon.skin = IconUtils.getIconByCfgId(ECellType.GOLD);
            ItemUpdateCtl.Create(this._ui.juanzhoutf, ECellType.LingChouZM);
            this._ui.juanzhouicon.skin = IconUtils.getIconByCfgId(ECellType.LingChouZM);
            this.skin = this._ui;
            this._checkBoxCtl = new CheckBoxCtl({ bg: this.skin.ck, gou: this.skin.gou });
            this._checkBoxCtl.selectHander = new Laya.Handler(this, this.onSelectHander);
            this._checkBoxCtl.selected = true;
            this.skin.zhekouImg.mouseEnabled = false;
            ButtonCtl.CreateBtn(this.skin.xunzaoBtn, this, this.oneHandler);
            ButtonCtl.CreateBtn(this.skin.threeBtn, this, this.threeHandler);
            this.updataMoney();
        }
        onInit() {
            super.onInit();
            LingChongModel.Ins.on(LingChongModel.Updata_ChouKa, this, this.onLingChongEvt);
            this.onLingChongEvt();
        }
        onLingChongEvt() {
            this.updataMoney();
        }
        onExit() {
            super.onExit();
            LingChongModel.Ins.off(LingChongModel.Updata_ChouKa, this, this.onLingChongEvt);
        }
        threeHandler() {
            if (Laya.timer.currTimer - this._time < this.timeDelay) {
                return;
            }
            this._time = Laya.timer.currTimer;
            LingChongModel.Ins.getPetAction(this._checkBoxCtl.selected, 2);
        }
        oneHandler() {
            if (Laya.timer.currTimer - this._time < this.timeDelay) {
                return;
            }
            this._time = Laya.timer.currTimer;
            let req = new PetExtract_req();
            if (LingChongModel.Ins.freeCount) {
                req.itemId = 0;
                req.type = 1;
                SocketMgr.Ins.SendMessageBin(req);
            }
            else {
                LingChongModel.Ins.getPetAction(this._checkBoxCtl.selected, 1);
            }
        }
        onSelectHander() {
            this.updataMoney();
        }
        updataMoney() {
            let cfg = PetConfigProxy.Ins.List[0];
            let id;
            let num;
            let num1;
            let _now;
            if (this._checkBoxCtl.selected) {
                id = parseInt(cfg.f_singlepricegold.split("-")[0]);
                num = parseInt(cfg.f_singlepricegold.split("-")[1]);
                num1 = parseInt(cfg.f_triplepricegold.split("-")[1]);
                if (this.model.packId == EActivityType.DuanWu) {
                    this.skin.zhekouImg.visible = true;
                    _now = parseInt(cfg.f_Discount.split("-")[1]);
                    let a = (_now / num1 * 10).toFixed(0);
                    this.skin.zhekouTf.text = E.getLang("limitdiscount", a);
                    this.skin.oldGoldTf.text = E.getLang("oldprice") + num1;
                }
                else {
                    this.skin.zhekouImg.visible = false;
                    _now = num1;
                }
            }
            else {
                id = parseInt(cfg.f_singleprice.split("-")[0]);
                num = parseInt(cfg.f_singleprice.split("-")[1]);
                num1 = parseInt(cfg.f_tripleprice.split("-")[1]);
                _now = num1;
                this.skin.zhekouImg.visible = false;
            }
            if (LingChongModel.Ins.isFreeRedTip()) {
                this.skin.ybicon.skin = "";
                this.skin.ybtf1.text = "";
                this.skin.xunzhaotf.visible = false;
                this.skin.freeTf.visible = true;
            }
            else {
                this.skin.xunzhaotf.visible = true;
                this.skin.ybicon.skin = IconUtils.getIconByCfgId(id);
                this.skin.ybtf1.text = num + "";
                this.skin.freeTf.visible = false;
            }
            this.skin.rightYuanBaoIcon.skin = IconUtils.getIconByCfgId(id);
            this.skin.threeTf.text = _now + "";
        }
        onAddLoadRes() {
            this.addAtlas("duanwu.atlas");
            this.addAtlas("lingchongfeast.atlas");
        }
        onBtnTipClick() {
            if (this.model.packId == EActivityType.DuanWu) {
                E.ViewMgr.openHelpView("petfeasttitle", "petfeastdesc");
            }
            else {
                E.ViewMgr.openHelpView("petfeasttitle1", "petfeastdesc1");
            }
        }
    }
    class LingChongFeastModel extends GemFeastModel {
        constructor() {
            super(...arguments);
            this.funcType = EFuncDef.PetFeast;
            this.subType = EFeastType.Pet;
            this.packageTitleStr = "pet04";
            this.rankTitleStr = "pet05";
            this.rankBotStr = "pet_desc";
            this.rank_desc = "pet_title|pet_read";
        }
        initUI() {
            this.Reg(new LingChongFeastView(EViewType.PetFeast));
        }
        static get Ins() {
            if (!this._ins2) {
                this._ins2 = new LingChongFeastModel();
            }
            return this._ins2;
        }
    }

    exports.LingChongFeastModel = LingChongFeastModel;
    exports.LingChongFeastView = LingChongFeastView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DuanwuTopRewardView extends ui.views.duanwu.ui_duanwu_top_rewardUI {
        refresh() {
            this.tf.text = StringUtil.moneyCv(this.cfg.f_PackName) + "";
        }
        set enable(v) {
            this.bg02.visible = v;
        }
    }
    class DuanWuLeiChongView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.topRewardsList = [];
        }
        onAddLoadRes() { }
        onExit() {
            this.model.off(DuanWuEvent.MoneyUpdate, this, this.updateEvt);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.duanwu.ui_duanwu_leichongUI();
                this.bindClose(this._ui.close1);
                this.timeCtl = new TimeCtl(this._ui.tf3);
                this._moneyCtl = new ItemUpdateCtl(this._ui.moneyTf, ECellType.GOLD);
                this._ui.list1.itemRender = DuanWuLeichongItemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHadnler);
            }
        }
        initTitle() {
            while (this.topRewardsList.length) {
                let cell = this.topRewardsList.shift();
                cell.removeSelf();
            }
            let list1 = t_Alternation_Recharge.Ins.getListByType(this.model.subType);
            for (let i = 0; i < list1.length; i++) {
                let item = new DuanwuTopRewardView();
                let cfg = list1[i];
                item.cfg = cfg;
                item.x = (i + 1) * this._ui.bg5.width / list1.length;
                item.y = this._ui.progressImg.height / 2;
                this.topRewardsList.push(item);
                item.refresh();
                this._ui.progressImg.addChild(item);
            }
        }
        onRenderHadnler(item) {
            item.refresh(this.model);
        }
        onInit() {
            this.model = this.Data;
            this._ui.tf1.text = E.getLang(this.model.leichongTitle);
            this._ui.titleImg.skin = "o/title/" + ChengHaoListProxy.Ins.getCfgByID(t_Alternation_Recharge.Ins.titleId(this.model.subType)).f_titlePic;
            this.initTitle();
            this.model.on(DuanWuEvent.MoneyUpdate, this, this.updateEvt);
            this.setTime();
            this.updateTopView();
            this._ui.list1.array = t_Alternation_Recharge.Ins.getListByType(this.model.subType);
            this._ui.list1.scrollTo(0);
        }
        setTime() {
            let _activityVo = this.model.activityVo;
            if (_activityVo) {
                this.timeCtl.start(_activityVo.endTime - TimeUtil.serverTime, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.onEnd));
            }
        }
        updateTopView() {
            let totalCnt = this.model.totalCnt;
            this._ui.tf.text = E.getLang("cur") + ":" + StringUtil.moneyCv(totalCnt);
            let maxVal = this.topRewardsList[this.topRewardsList.length - 1].cfg.f_PackName;
            let stopInedx = 0;
            let isMax = false;
            for (let i = 0; i < this.topRewardsList.length; i++) {
                let item = this.topRewardsList[i];
                let cfg = item.cfg;
                let next;
                if (i < this.topRewardsList.length - 1) {
                    next = this.topRewardsList[i + 1].cfg;
                    if (totalCnt >= cfg.f_PackName && totalCnt < next.f_PackName) {
                        stopInedx = i + 1;
                    }
                }
                if (totalCnt >= cfg.f_PackName) {
                    item.enable = true;
                }
                else {
                    item.enable = false;
                }
            }
            if (totalCnt >= maxVal) {
                stopInedx = this.topRewardsList.length - 1;
                isMax = true;
            }
            let nextItem = this.topRewardsList[stopInedx];
            let curItem;
            let cur = nextItem.cfg.f_PackName;
            let preVal = 0;
            if (stopInedx > 0) {
                curItem = this.topRewardsList[stopInedx - 1];
                preVal = curItem.cfg.f_PackName;
            }
            let val = (totalCnt - preVal) / (cur - preVal);
            let w = 0;
            if (curItem) {
                w = curItem.x + (nextItem.x - curItem.x) * val;
            }
            else {
                w = nextItem.x * val;
            }
            if (isMax) {
                w = nextItem.x;
            }
            this._ui.progressImg.width = w;
        }
        updateEvt() {
            this.setTime();
            this._ui.list1.refresh();
            this.updateTopView();
        }
        onUpdateTime(ticket) {
            let _s = TimeUtil.subTime(ticket);
            this._ui.tf3.text = _s;
        }
        onEnd() {
            this._ui.tf3.text = "";
        }
    }

    exports.DuanWuLeiChongView = DuanWuLeiChongView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MsgCellView extends ui.views.duanwu.ui_duanwu_reward_log_item_viewUI {
        constructor() {
            super(...arguments);
            this.skinKey = "duanwu_txt_cellUI";
        }
        refresh() {
            while (this.txtCon.numChildren) {
                let cell = this.txtCon.getChildAt(0);
                Laya.Pool.recover(this.skinKey, cell);
                cell.removeSelf();
            }
            let data = this.dataSource;
            let bgHeight = 0;
            for (let i = 0; i < data.msgs.length; i++) {
                let cellSkin = Laya.Pool.getItemByClass(this.skinKey, ui.views.duanwu.ui_duanwu_txt_cellUI);
                let _data = data.msgs[i];
                cellSkin.visible = true;
                let msg = GemBaseModel.ConvertMsg(data.subType, _data, true);
                cellSkin.tf0.text = msg.desc;
                cellSkin.tf1.text = msg.name;
                cellSkin.tf1.color = msg.color;
                cellSkin.tf1.x = +cellSkin.tf0.x + cellSkin.tf0.textField.width;
                this.txtCon.addChild(cellSkin);
                cellSkin.y = i * cellSkin.height;
                bgHeight += cellSkin.height;
            }
            this.realHeight = bgHeight;
            this.bg1.height = bgHeight;
        }
    }
    class DuanWuNodeItem extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "MsgCellView";
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, MsgCellView);
            _skin.dataSource = this.list[index];
            _skin.refresh();
            _skin.height = _skin.realHeight;
            _skin.y = this.y;
            return _skin;
        }
    }
    class DuanWuLogView extends ViewBase {
        constructor() {
            super(...arguments);
            this.cellHeight = 0;
            this.mMask = true;
            this._panelCtl = new ScrollPanelControl();
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.duanwu.ui_duanwu_reward_log_viewUI();
                this.bindClose(this._ui.close1);
                this._panelCtl.init(this._ui.panel1);
                let temp = new ui.views.duanwu.ui_duanwu_txt_cellUI();
                this.cellHeight = temp.height;
                temp.destroy();
            }
        }
        onInit() {
            this.model = this.Data;
            this._panelCtl.clear();
            let dataList = this.model.myMSG;
            for (let i = 0; i < dataList.length; i++) {
                let o = dataList[i];
                let h = o.msgs.length * this.cellHeight;
                this._panelCtl.split([o], DuanWuNodeItem, h, 10);
            }
            this._panelCtl.endLast();
        }
    }

    exports.DuanWuLogView = DuanWuLogView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Purchase_EasyPay extends BaseCfg {
        GetTabelName() {
            return "t_Purchase_EasyPay";
        }
        getPurchaseCfg(uid) {
            let l = this.List;
            let cell = l.find(o => o.f_PackControllerid == uid);
            return cell;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Purchase_EasyPay();
            }
            return this._ins;
        }
    }

    exports.t_Purchase_EasyPay = t_Purchase_EasyPay;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AutoRateBtn {
        constructor(parent, uid) {
            let btn = parent.disbtn;
            this.easyCfg = t_Purchase_EasyPay.Ins.getPurchaseCfg(uid);
            let cfg = this.getPurcCfg(this.easyCfg);
            if (btn) {
                if (!cfg) {
                    btn.visible = false;
                    return;
                }
                this.cfg = cfg;
                this.uid = uid;
                this.btn = btn;
                this.btn.lb.text = E.getLang("combopack03");
                this.rate = new RateBtn01Ctl(this.btn, this, this.onClickHandler, ESkinRateBtn.Yellow, true);
                ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onRefresh);
                this.onInit();
                DebugUtil.drawTF(btn, this.cfg.f_id + "", "#00ff00");
            }
        }
        static Create(parent, uid) {
            return new AutoRateBtn(parent, uid);
        }
        getPurcCfg(cell) {
            if (initConfig.clienttype == EClientType.Discount && cell && !cell.f_Close) {
                return t_Purchase_PriceProxy.Ins.GetDataById(cell.f_Purchase);
            }
        }
        onClickHandler() {
            LogSys.Log(`your click purchase: ${this.cfg.f_id}`);
            ActivityModel.Ins.recharge(this.cfg.f_id);
        }
        onRefresh() {
            this.onInit();
        }
        onInit() {
            this.rate.cfg = this.cfg;
            let _vo = ActivityModel.Ins.getVo(EActivityType.OnePushPackage);
            if (_vo && this.easyCfg) {
                let status = _vo.getParam1(this.easyCfg.f_id);
                switch (status) {
                    case 0:
                        this.rate.btnCtl.grayMouseDisable = true;
                        break;
                    case 2:
                        this.rate.btnCtl.grayMouseDisable = false;
                        break;
                }
            }
        }
        dispose() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.onRefresh);
            if (this.rate) {
                this.rate.dispose();
            }
        }
    }

    exports.AutoRateBtn = AutoRateBtn;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DuanWuPackitemView extends ui.views.duanwu.ui_duanwu_package_itemUI {
        constructor() {
            super();
            this.freeBtnCtl = ButtonCtl.CreateBtn(this.lingquBtn, this, this.onFreeHandler);
            this.chongzhiBtnCtl = ButtonCtl.CreateBtn(this.chongzhiBtn, this, this.onChongZhiHandler);
            this.rateCtl = new RateBtn01Ctl(this.ratebtn, this, this.onChongZhiHandler, ESkinRateBtn.Yellow);
        }
        onFreeHandler() {
            this.model.packageLingqu(this.cfg.f_id);
        }
        onChongZhiHandler() {
            ActivityModel.Ins.recharge(this.cfg.f_PurchaseID);
        }
        refresh(model) {
            this.model = model;
            this.cfg = this.dataSource;
            this.zhekouimg.visible = false;
            this.freeBtnCtl.visible = false;
            this.chongzhiBtnCtl.visible = false;
            this.rateCtl.visible = false;
            this.redimg.visible = false;
            let time = this.model.getPackageTimes(this.cfg.f_id);
            this.tf01.text = this.cfg.f_PackName;
            ItemViewFactory.renderItemSlots(this.rewardCon, this.cfg.f_PackReward, 10, 1, "left");
            if (!this.cfg.f_PurchaseID) {
                this.freeBtnCtl.visible = true;
                if (time >= this.cfg.f_BuyTimes) {
                    this.freeBtnCtl.grayMouseDisable = true;
                }
                else {
                    this.freeBtnCtl.grayMouseDisable = false;
                    this.redimg.visible = true;
                }
            }
            else {
                let purcCfg = t_Purchase_PriceProxy.Ins.GetDataById(this.cfg.f_PurchaseID);
                let btn = this.chongzhiBtnCtl;
                if (purcCfg.f_isVoucher == EShopPayType.Voucher) {
                    btn = this.rateCtl.btnCtl;
                    this.rateCtl.cfg = purcCfg;
                }
                RateBtnUtils.Refresh(btn, this.chongzhiBtnCtl, this.rateCtl.btnCtl);
                btn.visible = true;
                this.cnYuan.text = StringUtil.moneyCv(t_Purchase_PriceProxy.Ins.GetDataById(this.cfg.f_PurchaseID).f_price) + StringUtil.getCnMoney(0);
                if (time >= this.cfg.f_BuyTimes) {
                    btn.grayMouseDisable = true;
                }
                else {
                    btn.grayMouseDisable = false;
                }
            }
            this.tf02.text = E.getLang("everyDay") + ":" + time + "/" + this.cfg.f_BuyTimes;
            if (this.cfg.f_Discount) {
                this.zhekouimg.visible = true;
                this.tf04.text = `${(this.cfg.f_Discount / 100).toFixed(0)}%${E.getLang("duanwu05")}`;
            }
        }
    }

    exports.DuanWuPackitemView = DuanWuPackitemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DuanWuPackageView extends ViewBase {
        constructor() {
            super(...arguments);
            this.uiBgCloseClick = true;
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
            this.model.off(DuanWuEvent.MoneyUpdate, this, this.updateEvt);
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.updateEvt);
            if (this.autoBtn) {
                this.autoBtn.dispose();
            }
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.duanwu.ui_duanwu_packageUI();
                this.timeCtl = new TimeCtl(this._ui.tf3);
                this.bindClose(this._ui.close1);
                this._moneyCtl = new ItemUpdateCtl(this._ui.moneyTf, ECellType.GOLD);
                this._ui.list1.itemRender = DuanWuPackitemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this.setMouseBg(this._ui.bg1);
            }
        }
        onRenderHandler(item) {
            item.refresh(this.model);
        }
        onInit() {
            this.model = this.Data;
            this.updateAutoRate();
            this._ui.tf1.text = E.getLang(this.model.titleStr);
            this._ui.bg4.skin = this.model.bg4Img;
            this.model.on(DuanWuEvent.MoneyUpdate, this, this.updateEvt);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.updateEvt);
            if (this.model.packId == EActivityType.NewPlayerFeast) {
                this._ui.tf2.visible = this._ui.tf3.visible = false;
            }
            else {
                this._ui.tf2.visible = this._ui.tf3.visible = true;
                this.setTime();
            }
            let listdata = this.model.packcfgList;
            let outList = [];
            let outListNot = [];
            for (let i = 0; i < listdata.length; i++) {
                if (this.model.getPackageStatus(listdata[i]) == EDuanWuPackageStatus.Normal) {
                    outList.push(listdata[i]);
                }
                else {
                    outListNot.push(listdata[i]);
                }
            }
            this._ui.list1.array = outList.concat(outListNot);
            this._ui.list1.scrollTo(0);
        }
        updateAutoRate() {
            let _activityVo = this.model.activityVo;
            if (_activityVo) {
                this.autoBtn = AutoRateBtn.Create(this._ui, _activityVo.uid);
            }
            if (initConfig.clienttype == EClientType.Discount) {
                this._ui.list1.height = 630;
            }
            else {
                this._ui.list1.height = 765;
            }
        }
        updateEvt() {
            this.setTime();
            this._ui.list1.refresh();
        }
        setTime() {
            let _activityVo = this.model.activityVo;
            if (_activityVo) {
                this.timeCtl.start(_activityVo.endTime - TimeUtil.serverTime, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.onEnd));
            }
        }
        onUpdateTime(ticket) {
            let _s = TimeUtil.subTime(ticket);
            this._ui.tf3.text = _s;
        }
        onEnd() {
            this._ui.tf3.text = "";
        }
    }

    exports.DuanWuPackageView = DuanWuPackageView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DuanWuRankitemView extends ui.views.duanwu.ui_duanwu_rank_itemUI {
        refresh() {
            let _data = this.dataSource;
            this.mingcitf.text = _data.ranking + "";
            this.nametf.text = _data.nickName;
            this.countTf.text = _data.num + "";
            MainModel.Ins.setTTHead(this.head.icon, MainModel.Ins.convertHead(_data.headUrl));
            this.head.titleIcon.visible = false;
            this.head.lvtf.text = "Lv." + _data.playerLevel;
            this.img_title.skin = ChengHaoListProxy.Ins.getIcon(_data.titleId);
        }
    }

    exports.DuanWuRankitemView = DuanWuRankitemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DuanWuRankView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this._avatarShowList = [];
        }
        onAddLoadRes() {
            this.addAtlas("jjc.atlas");
        }
        onExit() {
            this.model.off(DuanWuEvent.RankUpdate, this, this.onRankUpdate);
            this.clearUI();
        }
        clearUI() {
            this._ui.list1.array = [];
            for (let i = 0; i < this._avatarShowList.length; i++) {
                this._avatarShowList[i].refresh(null);
            }
            this._ui.owner.visible = false;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.duanwu.ui_duanwu_rankUI();
                this.timeCtl = new TimeCtl(this._ui.timetf);
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.rewardBtn, this, this.onRewardHandler);
                for (let i = 0; i < 3; i++) {
                    let cell = new PeakShowAvatarCtl();
                    cell.mouseEnable = false;
                    cell.skin = this._ui[`avatar${i}`];
                    this._avatarShowList.push(cell);
                }
                this._ui.list1.itemRender = DuanWuRankitemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onDuanWuRankitemHander);
                this.helpBtn = ButtonCtl.CreateBtn(this._ui.help, this, this.onHelpHandler);
            }
        }
        onHelpHandler() {
            let arr = this.model.rank_desc.split("|");
            E.ViewMgr.openHelpView(arr[0], arr[1]);
        }
        setTime() {
            let _activityVo = this.model.activityVo;
            if (_activityVo) {
                this.timeCtl.start(_activityVo.endTime - TimeUtil.serverTime, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.onEnd));
            }
        }
        onUpdateTime(ticket) {
            let _s = TimeUtil.subTime(ticket);
            this._ui.timetf.text = _s;
        }
        onEnd() {
            this._ui.timetf.text = "";
        }
        onDuanWuRankitemHander(item) {
            item.refresh();
        }
        onRankShowAvatar() {
            for (let i = 0; i < this._avatarShowList.length; i++) {
                this._avatarShowList[i].skin.visible = false;
            }
            let l = this.model.rankData.top3;
            for (let i = 0; i < this._avatarShowList.length; i++) {
                let vo = l[i];
                if (vo) {
                    let rankInfo = this.model.getRankInfo(vo.rank);
                    vo.name = rankInfo.nickName;
                    vo.plus = rankInfo.num;
                }
                this._avatarShowList[i].refresh(vo);
            }
        }
        onRewardHandler() {
            E.ViewMgr.Open(EViewType.DuanWuRewardShow, null, this.Data);
        }
        onInit() {
            this.model = this.Data;
            switch (this.model.subType) {
                case EFeastType.FuJiang:
                    this._ui.bg4.skin = "remote/fujiangfeast/zqcbphb.png";
                    break;
                case EFeastType.Pet:
                    this._ui.bg4.skin = "remote/lingchongfeast/lccb.png";
                    break;
                case EFeastType.ShenBin:
                    this._ui.bg4.skin = "remote/shenbingfeast/bshdcbbg.png";
                    break;
                default:
                    this._ui.bg4.skin = "remote/duanwu/zqcbphb.png";
                    break;
            }
            this._ui.descTf.text = E.getLang(this.model.rankBotStr);
            this._ui.tf1.text = E.getLang(this.model.rankTitleStr);
            if (this.model.rankTitleStr1 != "") {
                this._ui.tf1.text = E.getLang(this.model.rankTitleStr1);
            }
            this.model.on(DuanWuEvent.RankUpdate, this, this.onRankUpdate);
            if (this.model.rank_desc) {
                this.helpBtn.visible = true;
            }
            else {
                this.helpBtn.visible = false;
            }
            this.setTime();
            this.clearUI();
            this.model.requestRank();
        }
        get showList() {
            let l = this.model.rankData.dataList;
            let result = [];
            for (let i = 3; i < l.length; i++) {
                result.push(l[i]);
            }
            return result;
        }
        onRankUpdate() {
            this.onRankShowAvatar();
            this._ui.list1.array = this.showList;
            this._ui.list1.scrollTo(0);
            this.refreshSelfView(this._ui.owner);
        }
        refreshSelfView(skin) {
            if (this.model.rankData && this.model.rankData.self) {
                skin.visible = true;
                let selfData = this.model.rankData.self[0];
                if (selfData.ranking == 0) {
                    skin.paiming.visible = false;
                    skin.mingcitf.text = E.getLang("duanwu03");
                }
                else {
                    skin.paiming.visible = true;
                    let maxCont = 200;
                    if (selfData.ranking > maxCont) {
                        skin.mingcitf.text = maxCont + "+";
                        skin.paiming.visible = false;
                    }
                    else {
                        skin.mingcitf.text = selfData.ranking + "";
                        skin.paiming.visible = true;
                    }
                }
                MainModel.Ins.setTTHead(skin.head.icon, MainModel.Ins.convertHead(selfData.headUrl));
                skin.head.titleIcon.visible = false;
                skin.nametf.text = selfData.nickName;
                skin.countTf.text = selfData.num + "";
                skin.head.lvtf.text = "Lv." + selfData.playerLevel;
                skin.img_title.skin = ChengHaoListProxy.Ins.getIcon(selfData.titleId);
            }
        }
    }

    exports.DuanWuRankView = DuanWuRankView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DuanwuShowItemView extends ui.views.duanwu.ui_duanwu_reward_show_itemUI {
        constructor() {
            super();
        }
        refresh(model, isLastNode) {
            this.model = model;
            let _data = this.dataSource;
            let dataList = this.model.convertData(_data);
            ItemViewFactory.renderItemSlots(this.rewardCon, dataList, 10, 0.8, "right", DuanWuLeichongSlotItemView, "DuanWuLeichongSlotItemView");
            let arr = _data.f_Position.split("|");
            if (isLastNode) {
                this.tf4.text = arr[0] + "+";
            }
            else {
                this.tf4.text = arr[0] + "-" + arr[1];
            }
        }
    }
    class DuanWuRewardShowView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("jjc.atlas");
        }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.duanwu.ui_duanwu_reward_showUI();
                this.bindClose(this._ui.close1);
                this.timeCtl = new TimeCtl(this._ui.tf3);
                this._ui.list1.itemRender = DuanwuShowItemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onDuanwuShowItemHander);
            }
        }
        onDuanwuShowItemHander(item, index) {
            item.refresh(this.model, index == this.maxLen - 1);
        }
        onInit() {
            this.model = this.Data;
            this._ui.tf1.text = E.getLang(this.model.packageTitleStr);
            let _listData;
            if (this.model.packId == EActivityType.DuanWu) {
                _listData = t_Alternation_Rank.Ins.getListByType(this.model.subType);
            }
            else {
                _listData = t_Alternation_Rookie_Rank.Ins.getListByType(this.model.subType);
            }
            this.maxLen = _listData.length;
            this.setTime();
            this._ui.list1.array = _listData;
            this._ui.list1.scrollTo(0);
        }
        setTime() {
            let _activityVo = this.model.activityVo;
            if (_activityVo) {
                this.timeCtl.start(_activityVo.endTime - TimeUtil.serverTime, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.onEnd));
                if (this.model.rankData && this.model.rankData.self) {
                    let selfData = this.model.rankData.self[0];
                    let str = "";
                    if (selfData.ranking == 0) {
                        str = E.getLang("duanwu03");
                    }
                    else {
                        str = selfData.ranking + "";
                    }
                    this._ui.tf4.text = E.getLang("duanwu04") + ":" + str;
                }
                else {
                    this._ui.tf4.text = E.getLang("duanwu03");
                }
            }
        }
        onUpdateTime(ticket) {
            let _s = TimeUtil.subTime(ticket);
            this._ui.tf3.text = _s;
        }
        onEnd() {
            this._ui.tf3.text = "";
        }
    }

    exports.DuanWuRewardShowView = DuanWuRewardShowView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EDuanWuLingquStatus) {
        EDuanWuLingquStatus[EDuanWuLingquStatus["Not"] = 0] = "Not";
        EDuanWuLingquStatus[EDuanWuLingquStatus["CanLingQu"] = 1] = "CanLingQu";
        EDuanWuLingquStatus[EDuanWuLingquStatus["IsLingQued"] = 2] = "IsLingQued";
    })(exports.EDuanWuLingquStatus || (exports.EDuanWuLingquStatus = {}));
    (function (EDuanWuPackageStatus) {
        EDuanWuPackageStatus[EDuanWuPackageStatus["Not"] = 1] = "Not";
        EDuanWuPackageStatus[EDuanWuPackageStatus["Normal"] = 2] = "Normal";
    })(exports.EDuanWuPackageStatus || (exports.EDuanWuPackageStatus = {}));
    class NewPlayerGemFeastView extends GemFeastView {
        bindModel() {
            this.model = NewPlayerGemFeastModel.Ins;
        }
    }
    class NewPlayerPetFeastView extends LingChongFeastView {
        bindModel() {
            this.model = NewPlayerPetFeastModel.Ins;
        }
    }
    class NewPlayerRideFeastView extends DuanWuView {
        bindModel() {
            this.model = NewPlayerRideFeastModel.Ins;
        }
    }
    class NewPlayerFuJiangFeastView extends FuJiangFeastMianView {
        bindModel() {
            this.model = NewPlayerFujiangFeastModel.Ins;
        }
    }
    class DuanWuModel extends GemBaseModel {
        constructor() {
            super(...arguments);
            this.maxConfigId = 30;
            this.subType = EFeastType.Ride;
            this.funcType = EFuncDef.DuanWu;
            this.packageTitleStr = "ridetitle02";
            this.rankTitleStr = "ridetitle03";
            this.rankBotStr = "duanwu08";
        }
        requestRank() {
            let req = new MountFeastNums_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        requstLeiChong(id) {
            let req = new MountFeastTotalCntReward_req();
            req.id = id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        requstMsg() {
            let req = new MountFeastRecords_req();
            req.recordSerial = this.maxRecordSerial;
            SocketMgr.Ins.SendMessageBin(req);
        }
        initMsg() {
            this.Reg(new DuanWuView(EViewType.DuanWu));
            this.Reg(new DuanWuLeiChongView(EViewType.DuanWuLeiChong));
            this.Reg(new DuanWuPackageView(EViewType.DuanWuPackage));
            this.Reg(new DuanWuLogView(EViewType.DuanWuLog));
            this.Reg(new DuanWuRankView(EViewType.DuanWuRank));
            this.Reg(new DuanWuRewardShowView(EViewType.DuanWuRewardShow));
            this.Reg(new GemFeastView2(EViewType.GemFeast));
            this.Reg(new FuJiangFeastMianView(EViewType.FuJiangFeast));
            this.Reg(new NewPlayerGemFeastView(EViewType.NewPlayerGemFeast));
            this.Reg(new NewPlayerPetFeastView(EViewType.NewPlayerPetFeast));
            this.Reg(new NewPlayerRideFeastView(EViewType.NewPlayerRideFeast));
            this.Reg(new NewPlayerFuJiangFeastView(EViewType.NewPlayerFujiangFeast));
            E.MsgMgr.AddMsg(MSGID.MountFeastInit, this.onMountFeastInit, this);
            E.MsgMgr.AddMsg(MSGID.MountFeastTotalCnt, this.onMountFeastTotalCnt, this);
            E.MsgMgr.AddMsg(MSGID.MountFeastTotalCntReward, this.onMountFeastTotalCntReward, this);
            E.MsgMgr.AddMsg(MSGID.MountFeastRecords, this.onMountFeastRecords, this);
            E.MsgMgr.AddMsg(MSGID.MountFeastSelfRecords, this.onMountFeastSelfRecords, this);
            E.MsgMgr.AddMsg(MSGID.MountFeastNums, this.onMountFeastNums, this);
            E.MsgMgr.AddMsg(MSGID.NewCrossGroup, this.NewCrossGroup, this);
        }
        convertActivityRecord(l) {
            let result = [];
            for (let i = 0; i < l.length; i++) {
                let o = new stActivityRecord();
                let cell = l[i];
                o.playerId = cell.playerId;
                o.nickName = cell.nickName;
                o.id = cell.mountId;
                o.level = 0;
                o.recordSerial = cell.recordSerial;
                o.time = cell.time;
                result.push(o);
            }
            return result;
        }
        convertNumList(revc) {
            let o = {};
            o.type = EFeastType.Ride;
            o.dataList = revc.dataList;
            o.self = revc.self;
            o.top3 = revc.top3;
            return o;
        }
        onMountFeastNums(revc) {
            this.rankData = this.convertNumList(revc);
            this.event(DuanWuEvent.RankUpdate);
        }
        NewCrossGroup(value) {
            this.newCrossGroupId = value.newCrossGroupId;
            this.serverIdBegin = value.serverIdBegin;
            this.serverIdEnd = value.serverIdEnd;
        }
        onMountFeastSelfRecords(revc) {
            if (this.data) {
                this.data.selfRecords = this.data.selfRecords.concat(this.convertActivityRecord(revc.dataList));
            }
        }
        onMountFeastRecords(revc) {
            let result = this.convertActivityRecord(revc.dataList);
            this.upadteMsg(result);
        }
        onMountFeastTotalCntReward(revc) {
            this.updateReward(revc.dataList);
        }
        onMountFeastInit(revc) {
            let o = {};
            o.rewardList = revc.rewardList;
            o.selfRecords = this.convertActivityRecord(revc.selfRecords);
            o.totalCnt = revc.totalCnt;
            o.type = EFeastType.Ride;
            this.data = o;
            this.updateRed();
        }
        onMountFeastTotalCnt(revc) {
            if (this.data) {
                this.updateTotal(revc.totalCnt);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new DuanWuModel();
            }
            return this._ins;
        }
        open() {
            if (this.isOpen) {
                E.ViewMgr.Open(EViewType.DuanWu);
            }
            else {
                E.ViewMgr.ShowMidError(E.getLang("activityend"));
            }
        }
    }

    exports.DuanWuModel = DuanWuModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EZuoQi) {
        EZuoQi[EZuoQi["Once"] = 1] = "Once";
        EZuoQi[EZuoQi["Three"] = 2] = "Three";
    })(exports.EZuoQi || (exports.EZuoQi = {}));
    class ZuoQiLvResult {
        constructor() {
            this.status = ZuoQiLvResult.NORMAL;
        }
    }
    ZuoQiLvResult.MAX = 1;
    ZuoQiLvResult.NOT_ENOUGH = 2;
    ZuoQiLvResult.NORMAL = 3;
    class ZuoQiQuaResult {
    }
    class ZuoqiChouQuResult {
        get isShowDiscount() {
            if (DuanWuModel.Ins.isOpen) {
                let id = this.getCanUseItemId(3);
                if (id == ECellType.GOLD) {
                    return true;
                }
            }
        }
        getCanUseItemId(horseItemNeed) {
            let id = ECellType.HorseItemId;
            let have = MainModel.Ins.mRoleData.getVal(id);
            if (have >= horseItemNeed) {
                return id;
            }
            else {
                return ECellType.GOLD;
            }
        }
        get threeNeedCount() {
            if (this.isShowDiscount) {
                return this.nowThreeCount;
            }
            return this.threeItemVo.count;
        }
        get nowThreeCount() {
            let count = this.threeItemVo.count;
            return count * ZuoQiModel.Ins.cfg.f_Discount / 10000;
        }
        get threeOldCount() {
            return this.threeItemVo.count;
        }
        get discount() {
            return (ZuoQiModel.Ins.cfg.f_Discount / 1000).toFixed(0);
        }
    }

    exports.ZuoQiLvResult = ZuoQiLvResult;
    exports.ZuoQiQuaResult = ZuoQiQuaResult;
    exports.ZuoqiChouQuResult = ZuoqiChouQuResult;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RideMssionVo {
        constructor() {
            this.rideIds = [];
        }
        setData(vo) {
            this.time = vo.time;
            let i = this.rideIds.indexOf(vo.rideId);
            if (i == -1) {
                this.rideIds.push(vo.rideId);
            }
        }
        get rideToString() {
            let str = "[";
            for (let i = 0; i < this.rideIds.length; i++) {
                str += this.rideIds[i] + ",";
            }
            str += "]";
            return str;
        }
        get isRunning() {
            return this.time > TimeUtil.serverTime;
        }
    }

    exports.RideMssionVo = RideMssionVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoqiVo extends EquipItemVo {
        constructor() {
            super(...arguments);
            this.washCanLock = 0;
            this.washList = [];
        }
        get isEmpty() {
            return !this.curVo;
        }
        getAttrQua(attrId) {
            return ZuoQiModel.Ins.getAttrQua(this.equipVo, attrId);
        }
        getIcon() {
            return IconUtils.getHorseIcon(this.rideId);
        }
        get quality() {
            if (this.curVo) {
                let cfg = Mount_ListProxy.Ins.getCfg(this.curVo.id);
                if (cfg) {
                    let qua = cfg.f_Quality;
                    return qua;
                }
            }
            return 0;
        }
        getName() {
            let cfg = Mount_ListProxy.Ins.getCfg(this.rideId);
            if (cfg) {
                return cfg.f_MountName;
            }
            return "";
        }
        get starLv() {
            if (this.curVo) {
                return this.curVo.star;
            }
            return 0;
        }
        get lv() {
            if (this.curVo) {
                return this.curVo.lv;
            }
            return 0;
        }
        get rideId() {
            if (this.curVo) {
                return this.curVo.id;
            }
            return 0;
        }
        get mainid() {
            let id = MainModel.Ins.getIdByStyle(EEquipType.ZuoQi);
            return id;
        }
        get mBackHome() {
            if (!this.isEmpty && this.curVo) {
                if (this.curVo.lv == 0 && this.curVo.star == 0) {
                    return false;
                }
                else {
                    return true;
                }
            }
            return false;
        }
        get mWashLock() {
            return this.washCanLock == 1;
        }
        reset() {
            this.equipVo = null;
            this.washCanLock = 0;
            this.washList = [];
        }
    }

    exports.ZuoqiVo = ZuoqiVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZuoQiModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.cards = [`kamianbai`, `kamianlv`, `kamianlan`, `kamianzi`, `kamiancheng`, `kamianhong`, `kamianlanshenlan`];
            this.rideVo = new ZuoqiVo();
            this.rideVoList = [];
            this.missionList = [];
            this.mExtractTime = 0;
            this.foodTotal = 0;
            this.runRideMissionList = [];
            this.food = 0;
            this.hasRide = false;
            this.missionReward = [];
            this.preRewardList = [];
            this.rideCacheList = [];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ZuoQiModel();
            }
            return this._ins;
        }
        get hasHorse() {
            return this.rideVo.rideId != 0;
        }
        initMsg() {
            this.Reg(new ZuoQiTJView(EViewType.zuoqitujian));
            this.Reg(new ZuoqiBackView(EViewType.BackHome));
            this.Reg(new ZuoqiWashView(EViewType.MountWash));
            E.MsgMgr.AddMsg(MSGID.RideInfoRevc, this.onRideInfoRevc, this);
            E.MsgMgr.AddMsg(MSGID.GetRideRevc, this.onGetRideRevc, this);
            E.MsgMgr.AddMsg(MSGID.RideLvUpRevc, this.onRideLvUpRevc, this);
            E.MsgMgr.AddMsg(MSGID.RideQuaRevc, this.onRideQuaUpRevc, this);
            E.MsgMgr.AddMsg(MSGID.RideOwnerInfo, this.onRideOwnerInfo, this);
            E.MsgMgr.AddMsg(MSGID.RideOwnerCnt, this.onRideOwnerCnt, this);
            E.MsgMgr.AddMsg(MSGID.RideStorgeUpRevc, this.onRideStorgeUpRevc, this);
            E.MsgMgr.AddMsg(MSGID.RideMissionListRevc, this.onRideMissionListRevc, this);
            E.MsgMgr.AddMsg(MSGID.RideMissionRevc, this.onRideMissionRevc, this);
            E.MsgMgr.AddMsg(MSGID.RideMissionDataRevc, this.onRideMissionDataRevc, this);
            E.MsgMgr.AddMsg(MSGID.MountReturnPreView, this.onMountReturnPreView, this);
            E.MsgMgr.AddMsg(MSGID.MountReturn, this.onMountReturn, this);
            E.MsgMgr.AddMsg(MSGID.MountRefinementLock, this.onMountRefinementLock, this);
            E.MsgMgr.AddMsg(MSGID.MountRefinement, this.onMountRefinement, this);
        }
        getMountVoById(moundId) {
            for (let i = 0; i < this.rideVoList.length; i++) {
                let cell = this.rideVoList[i];
                if (cell.rideId == moundId) {
                    return cell;
                }
            }
            if (this.rideVo.rideId == moundId) {
                return this.rideVo;
            }
        }
        calLv(_vo) {
            let qua = _vo.quality;
            let cfg = MountConfigProxy.Ins.getByQualityID(qua);
            if (!cfg) {
                return 0;
            }
            let lv = _vo.lv;
            let testLv = 0;
            let list = [];
            while (1) {
                let n = Math.floor(lv / cfg.f_plaidAmount);
                if (lv >= cfg.f_MaxLevel) {
                    break;
                }
                else {
                    let a = cfg.f_UpgardeInc.split("-")[1];
                    let itemid = parseInt(cfg.f_UpgradeInit.split("-")[0]);
                    let s = cfg.f_UpgradeInit.split("-")[1];
                    let need = parseInt(s) + parseInt(a) * n;
                    let useCount = 0;
                    let cell = list.find(o => o.itemId == itemid);
                    if (cell) {
                        useCount = cell.useCount;
                    }
                    let have = MainModel.Ins.mRoleData.getVal(itemid);
                    have -= useCount;
                    if (need > have) {
                        break;
                    }
                    else {
                        if (cell) {
                            cell.useCount += need;
                        }
                        else {
                            let o = {};
                            o.useCount = need;
                            o.itemId = itemid;
                            list.push(o);
                        }
                        if (lv + 1 > MainModel.Ins.mRoleData.lv) {
                            break;
                        }
                        lv++;
                        testLv++;
                    }
                }
            }
            return testLv;
        }
        onMountRefinement(revc) {
            let vo = this.getMountVoById(revc.id);
            vo.washList = revc.refinements;
            this.event(ZuoQiEvent.MountRefinement);
        }
        onMountRefinementLock(revc) {
            let vo = this.getMountVoById(revc.id);
            vo.washCanLock = revc.canLock;
            this.event(ZuoQiEvent.MountRefinement);
        }
        onMountReturnPreView(revc) {
            this.preRewardList = revc.rewardList;
            this.event(ZuoQiEvent.ReturnPreView);
        }
        onMountReturn(revc) {
            this.event(ZuoQiEvent.ReturnMountSucceed);
        }
        onInitCallBack() {
            this.isOpen = false;
            this.rideVo.reset();
            this.mExtractTime = 0;
            this.food = 0;
            this.foodTotal = 0;
        }
        get mStorageUpgradePrice() {
            let str = Mount_StrogeProxy.Ins.getCfg(1).f_StorageUpgradePrice;
            let itemVo = ItemViewFactory.convertItemList(str)[0];
            return itemVo;
        }
        get hasFreeTime() {
            return this.mExtractTime == 0;
        }
        get isFoodFull() {
            return this.food >= this.foodTotal;
        }
        get hasRed() {
            return this.hasFreeTime || this.isFoodFull;
        }
        updateRed() {
            let _red = false;
            if (TaskModel.Ins.isFuncOpen(EFuncDef.Ride)) {
                if (this.hasRed) {
                    _red = true;
                }
            }
            if (_red) {
                DotManager.addMainDot("icon2", -20, -5);
            }
            else {
                DotManager.remMainDot("icon2");
            }
            this.event(ZuoQiEvent.RedUpdate);
        }
        onRideMissionDataRevc(revc) {
            this.food = 0;
            let l = [];
            let itemList = revc.itemList;
            for (let i = 0; i < itemList.length; i++) {
                let _cell = itemList[i];
                if (_cell.id != ECellType.Forage) {
                    l.push(_cell);
                }
                else {
                    this.food = _cell.count;
                }
            }
            this.missionReward = l;
            this.updateRed();
            this.event(ZuoQiEvent.StorgeUpdate);
        }
        onRideMissionListRevc(revc) {
            this.missionList = revc.rideList;
            this.event(ZuoQiEvent.DispathMission);
        }
        printRideInfo(l) {
            if (E.Debug) {
                let curTime = TimeUtil.serverTime;
                let s = "\n";
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    let sub = cell.time - curTime;
                    s += "index:" + i + " mission:" + cell.id + " rideId:" + cell.rideId + " endtime:" + TimeUtil.timestamtoTime(cell.time * 1000) + ",运输任务剩余时间:" + sub + "\n";
                }
                LogSys$1.Log(s);
            }
        }
        onRideMissionRevc(revc) {
            this.runRideMissionList = [];
            for (let i = 0; i < revc.rideList.length; i++) {
                let cell = revc.rideList[i];
                let e = this.runRideMissionList.find(o => o.mssionId == cell.id);
                if (e) {
                    e.setData(cell);
                }
                else {
                    let v = new RideMssionVo();
                    v.time = cell.time;
                    v.mssionId = cell.id;
                    v.rideIds.push(cell.rideId);
                    this.runRideMissionList.push(v);
                }
            }
            this.printRideInfo(revc.rideList);
            this.event(ZuoQiEvent.DispathMission);
        }
        get serverTransitReward() {
            let str = "";
            if (this.missionReward.length > 0) {
                for (let i = 0; i < this.missionReward.length; i++) {
                    let cell = this.missionReward[i];
                    if (cell.count > 0) {
                        str += `${cell.id}-${cell.count}|`;
                    }
                }
                str = str.substr(0, str.length - 1);
            }
            return str;
        }
        getTransitReward() {
            if (this.runRideMissionList) {
                let l = [];
                for (let i = 0; i < this.runRideMissionList.length; i++) {
                    let id = this.runRideMissionList[i].mssionId;
                    if (l.indexOf(id) == -1) {
                        l.push(id);
                    }
                }
                let ls = [];
                for (let i = 0; i < l.length; i++) {
                    let cfg = Mount_MissionProxy.Ins.GetDataById(l[i]);
                    ls.push(cfg.f_PlaceReward);
                }
                return ItemViewFactory.mergeItems(ls);
            }
            return "";
        }
        isMissionOpen(id) {
            let cfg = Mount_MissionProxy.Ins.GetDataById(id);
            if (cfg) {
                if (cfg.f_MissionOpen == 1) {
                    return true;
                }
                if (this.missionList.indexOf(id) != -1) {
                    return true;
                }
            }
            return false;
        }
        getRideMissionVo(id) {
            for (let i = 0; i < this.runRideMissionList.length; i++) {
                let cell = this.runRideMissionList[i];
                if (cell.mssionId == id) {
                    return cell;
                }
            }
        }
        isMissionRunning(id) {
            for (let i = 0; i < this.runRideMissionList.length; i++) {
                let cell = this.runRideMissionList[i];
                if (cell.mssionId == id) {
                    return true;
                }
            }
        }
        isRideUsed(rideId) {
            for (let i = 0; i < this.runRideMissionList.length; i++) {
                let cell = this.runRideMissionList[i];
                if (cell.rideIds.indexOf(rideId) != -1) {
                    return true;
                }
            }
        }
        freeRideList(qua) {
            let rl = [];
            let l = this.storgeList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (this.isRideUsed(cell.id)) ;
                else {
                    let cfg = Mount_ListProxy.Ins.getCfg(cell.id);
                    if (cfg.f_Quality >= qua) {
                        rl.push(cell);
                    }
                }
            }
            return rl;
        }
        onRideStorgeUpRevc(revc) {
            this.foodTotal = revc.total;
            this.event(ZuoQiEvent.StorgeUpdate);
            this.updateRed();
        }
        onRideOwnerInfo(revc) {
            this.isOpen = true;
            this.rideVo.equipVo = revc.equipItem;
            if (!revc.equipItem.equipStyle) {
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, `3042 equipStyle is 0\n`);
            }
            if (!this.hasRide) {
                this.hasRide = true;
                this.event(ZuoQiEvent.InitRide);
            }
            this.refreshZuoqiVo();
            this.event(ZuoQiEvent.RideOwnerInfoUpdate);
            this.event(ZuoQiEvent.UpdateInfoEvt);
        }
        refreshZuoqiVo() {
            if (this.rideVo.equipVo) {
                this.rideVo.curVo = this.getRideVo(this.rideVo.equipVo.equipStyle);
            }
            else {
                this.rideVo.curVo = null;
            }
        }
        onRideOwnerCnt(revc) {
            this.mExtractTime = revc.cnt;
            this.updateRed();
            this.event(ZuoQiEvent.TimeChange);
        }
        onRideLvUpRevc(revc) {
            let vo = this.getRideVo(revc.id);
            if (vo) {
                vo.lv = revc.lv;
            }
            this.event(ZuoQiEvent.UpdateInfoEvt);
        }
        onRideQuaUpRevc(revc) {
            let vo = this.getRideVo(revc.id);
            if (vo) {
                vo.star = revc.star;
            }
            this.event(ZuoQiEvent.UpdateInfoEvt);
        }
        getRideVo(id) {
            if (this.mlist) {
                for (let i = 0; i < this.mlist.length; i++) {
                    let vo = this.mlist[i];
                    if (vo.id == id) {
                        return vo;
                    }
                }
            }
        }
        onGetRideRevc(revc) {
            this.rideCacheList.push(revc.rideList);
            if (E.ViewMgr.IsOpen(EViewType.ZuoqiFangpai)) ;
            else {
                E.ViewMgr.Open(EViewType.ZuoqiFangpai);
            }
        }
        onRideInfoRevc(revc) {
            this.mlist = revc.mlist;
            this.refreshZuoqiVo();
            this.event(ZuoQiEvent.UpdateInfoEvt);
        }
        get storgeList() {
            return this.mlist || [];
        }
        lvUp(id, lv) {
            let req = new RideLv_req();
            req.id = id;
            req.cnt = lv;
            SocketMgr.Ins.SendMessageBin(req);
        }
        quaUp(id) {
            let req = new RideQua_req();
            req.id = id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        getLvZuoqiNeed(_vo) {
            let _result = new ZuoQiLvResult();
            let qua = _vo.quality;
            let cfg = MountConfigProxy.Ins.getByQualityID(qua);
            if (!cfg) {
                return;
            }
            let lv = _vo.lv;
            _result.stepMax = cfg.f_plaidAmount;
            let n = Math.floor(lv / cfg.f_plaidAmount);
            _result.step = n;
            _result.stepVal = lv % cfg.f_plaidAmount;
            if (lv >= cfg.f_MaxLevel) {
                _result.isMax = true;
                _result.status = ZuoQiLvResult.MAX;
            }
            else {
                let a = cfg.f_UpgardeInc.split("-")[1];
                let itemid = cfg.f_UpgradeInit.split("-")[0];
                let s = cfg.f_UpgradeInit.split("-")[1];
                let need = parseInt(s) + parseInt(a) * n;
                let have = MainModel.Ins.mRoleData.getVal(parseInt(itemid));
                _result.needItemid = parseInt(itemid);
                _result.need = need;
                _result.have = have;
                if (need > have) {
                    _result.status = ZuoQiLvResult.NOT_ENOUGH;
                }
            }
            return _result;
        }
        getQuaLvNeed(_vo) {
            let _result = new ZuoQiQuaResult();
            let qua = _vo.quality;
            let cfg = MountConfigProxy.Ins.getByQualityID(qua);
            _result.f_MaxStar = cfg.f_MaxStar;
            if (_vo.starLv >= cfg.f_MaxStar) {
                _result.isMax = true;
            }
            else {
                let _itemVo = ItemViewFactory.convertItemList(cfg.f_UpgradeStar)[0];
                _result.needItemVo = _itemVo;
                _result.have = MainModel.Ins.mRoleData.getVal(_itemVo.cfgId);
            }
            return _result;
        }
        rideUpdate(id) {
            let req = new RideUpdate_req();
            req.id = id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        unlock(id) {
            let req = new RideMissionList_req();
            req.id = id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        mission(missionId, rideList) {
            let l = [];
            for (let i = 0; i < rideList.length; i++) {
                let cell = new stRideReq();
                cell.missionId = missionId;
                cell.rideId = rideList[i];
                l.push(cell);
            }
            let req = new RideMission_req();
            req.rideList = l;
            SocketMgr.Ins.SendMessageBin(req);
        }
        delMission(missionId) {
            let req = new RideMissionDel_req();
            req.id = missionId;
            SocketMgr.Ins.SendMessageBin(req);
        }
        get cfg() {
            let cfg = Mount_GachaProxy.Ins.getCfg(1);
            return cfg;
        }
        getSubTime() {
            let _result = new ZuoqiChouQuResult();
            let s = TimeUtil.getZeroSecond(TimeUtil.serverTime);
            let cfg = this.cfg;
            let a = cfg.f_RefreshTime.split(":");
            let next = s + parseInt(a[0]) * 3600 + parseInt(a[1]) * 60 + parseInt(a[2]);
            let sub = next - TimeUtil.serverTime;
            if (sub < 0) {
                next += 86400;
            }
            _result.time = next;
            _result.freeItemVo = ItemViewFactory.convertItemList(cfg.f_SingleCost)[0];
            _result.threeItemVo = ItemViewFactory.convertItemList(cfg.f_TripleCost)[0];
            return _result;
        }
        timeEndReq() {
            Laya.timer.once(2000, this, this.delayTimeEnd);
        }
        delayTimeEnd() {
            let req = new RideMissionTimeEnd_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onZuoqiClick() {
            let vo = this.rideVo;
            if (!TaskModel.Ins.isFuncOpen(EFuncDef.Ride, true)) {
                return;
            }
            if (!vo.equipVo) {
                E.ViewMgr.Open(EViewType.ZuoqiChouQu);
            }
            else {
                let _showVo = {};
                _showVo.zqData = vo;
                _showVo.showEnter = true;
                E.ViewMgr.Open(EViewType.ZuoqiTips, null, _showVo);
            }
        }
        openZuoqiMainView() {
            E.ViewMgr.Open(EViewType.ZuoqiMain, null, this.rideVo);
        }
        getCheckStr(str) {
            let wash = new WashNeedReqVo();
            let arr = str.split(";");
            let item1 = arr[0];
            if (MainModel.Ins.isItemEnoughSt(item1)) {
                wash.item = item1;
                wash.refinementItem = parseInt(item1.split("-")[0]);
                return wash;
            }
            let item2 = arr[1];
            wash.refinementItem = parseInt(item2.split("-")[0]);
            wash.item = item2;
            return wash;
        }
        getAttrQua(equipVo, attrId) {
            let l = equipVo.mountAttrList;
            let o = l.find(cell => cell.id == attrId);
            if (o) {
                return o.quality;
            }
            return 0;
        }
        getWashNeedItemId(qua, lockedCount) {
            let cfg = MountConfigProxy.Ins.getByQualityID(qua);
            let str = "";
            if (lockedCount <= 0) {
                str = cfg.f_Refinement;
            }
            else {
                let item = cfg.f_Refinementlock.split("|")[lockedCount - 1];
                str = item;
            }
            return this.getCheckStr(str);
        }
        convertImage(qua) {
            return `static/${qua.toString()}.png`;
        }
    }
    class WashNeedReqVo {
        constructor() {
            this.refinementItem = 0;
        }
        get itemVo() {
            if (!this._itemVo) {
                this._itemVo = ItemViewFactory.convertItem(this.item);
            }
            return this._itemVo;
        }
    }

    exports.WashNeedReqVo = WashNeedReqVo;
    exports.ZuoQiModel = ZuoQiModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcFactory {
        static getRankImg(val) {
            if (val > 0) {
                return `remote/jjc/paiming_${val}.png`;
            }
            return "";
        }
        static refreshRank(rankTf, img, rank) {
            if (rank <= 3) {
                rankTf.text = "";
                img.skin = this.getRankImg(rank);
                img.visible = true;
            }
            else {
                img.visible = false;
                rankTf.text = rank.toString();
            }
        }
        static newStJjcPlayer(cell) {
            let dest = new stJjcPlayer();
            dest.headUrl = MainModel.Ins.convertHead(cell.headUrl);
            dest.id = cell.id;
            dest.name = cell.name;
            dest.lv = cell.lv;
            dest.plus = cell.plus;
            dest.rank = cell.rank;
            return dest;
        }
        static initTest() {
        }
    }

    exports.JjcFactory = JjcFactory;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FightJjcItemCtl {
        constructor(skin) {
            this.oldY = 0;
            this._oldScale = 0;
            this.skin = skin;
            this.oldY = skin.y;
            this._oldScale = skin.scaleX;
            this.tween = new Laya.Tween();
            this.headCtl = new JjcHeadCtl(this.skin.head, this.skin.plus, this.skin.nametf, this.skin.paiming, this.skin.paimingtf, null, this.skin.img_xx, this.skin.icon_xx, this.skin.lab_xx);
        }
        setData(data, type, data1) {
            this.headCtl.updateView(data, type, data1);
        }
        reset() {
            this.skin.y = this.oldY;
            this.skin.scaleX = this.skin.scaleY = this._oldScale;
        }
        playAnim(targetY, scale) {
            this.reset();
            this.tween.clear();
            this.tween.to(this.skin, { y: targetY, scaleX: scale, scaleY: scale }, FightJjcItemCtl.PlayTime, Laya.Ease.strongInOut);
        }
        set win(v) {
            if (v) {
                this.skin.statusIcon.skin = `remote/jjc/win.png`;
            }
            else {
                this.skin.statusIcon.skin = `remote/jjc/lose.png`;
            }
        }
    }
    FightJjcItemCtl.PlayTime = 1000;
    class FightJjcJieSuanCtl {
        constructor(view) {
            this.initWinY = 0;
            this.initLoseY = 0;
            this.needTime = 0;
            this.view = view;
            this.initWinY = view._ui.winplayer.y;
            this.initLoseY = view._ui.loseplayer.y;
            this._topv = new FightJjcItemCtl(this.view._ui.winplayer);
            this._bottomv = new FightJjcItemCtl(this.view._ui.loseplayer);
        }
        setData(data, type) {
            this.model = getJjcModel(data.type);
            this.needTime = 0;
            if (data.win == 0) {
                this.view._ui.succeed.visible = false;
                this.view._ui.fail.visible = true;
                this.succeed.visible = false;
                this.succeed.stop();
                if (TaskModel.Ins.isFuncOpen(EFuncDef.Ride)) {
                    this.view._ui.lab1.visible = true;
                    this.view._ui.lock1.visible = false;
                }
                else {
                    this.view._ui.lab1.visible = false;
                    this.view._ui.lock1.visible = true;
                }
                if (TaskModel.Ins.isFuncOpen(EFuncDef.CiFu)) {
                    this.view._ui.lab2.visible = true;
                    this.view._ui.lock2.visible = false;
                }
                else {
                    this.view._ui.lab2.visible = false;
                    this.view._ui.lock2.visible = true;
                }
            }
            else {
                this.succeed.visible = true;
                this.succeed.start();
                this.view._ui.jjcsucceed.visible = true;
                if (data.upval > 0 && type != EFightResultView.XXZDZ) {
                    let y1 = this.initWinY;
                    let y2 = this.initLoseY;
                    this._bottomv.win = true;
                    this._topv.win = false;
                    this._bottomv.setData(this.model.ownerPlayer, type, data);
                    let _enemyInfo = JjcFactory.newStJjcPlayer(data.enemyInfo);
                    _enemyInfo.rank += data.upval;
                    this._topv.setData(_enemyInfo, type, data);
                    this._topv.skin.y = y1;
                    this._topv.skin.scaleX = this._topv.skin.scaleY = 1;
                    this._topv.playAnim(y2, 0.9);
                    this._bottomv.skin.y = y1;
                    this._bottomv.skin.scaleX = this._bottomv.skin.scaleY = 0.9;
                    this._bottomv.playAnim(y1, 1);
                    this.needTime = FightJjcItemCtl.PlayTime;
                }
                else {
                    this._topv.setData(this.model.ownerPlayer, type, data);
                    this._topv.win = true;
                    this._topv.reset();
                    this._bottomv.setData(data.enemyInfo, type, data);
                    this._bottomv.win = false;
                    this._bottomv.reset();
                }
                let rewardList = this.model.succeedRewardList;
                this.view._ui.tf2.visible = rewardList.length > 0;
                ItemViewFactory.renderItemSlots(this.view._ui.rewardCon, rewardList, 50, 1, "center");
                if (type == EFightResultView.JJC) {
                    this.view._ui.img0.visible = true;
                    this.view._ui.jjcuplv.text = data.upval.toString();
                    this.view._ui.lab_xx.visible = this.view._ui.lab_xx1.visible = false;
                }
                else if (type == 2) {
                    this.view._ui.img0.visible = false;
                    this.view._ui.lab_xx.visible = this.view._ui.lab_xx1.visible = true;
                    this.view._ui.lab_xx1.text = XXZDZModel.Ins.starPercent + "%";
                }
            }
        }
    }

    exports.FightJjcJieSuanCtl = FightJjcJieSuanCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DiscountTicket extends Laya.Script {
        onAwake() {
            this.ui = this.owner;
        }
        onStart() {
            if (this.type == EFightType.Adventure) {
                let id = t_Platform.Ins.curCfg.f_AutoFight;
                if (id) {
                    if (initConfig.debug_f_AutoFight) {
                        id = initConfig.debug_f_AutoFight;
                    }
                    if (Laya.Utils.getQueryString("debug_f_AutoFight")) {
                        id = parseInt(Laya.Utils.getQueryString("debug_f_AutoFight"));
                    }
                    if (NewAdventureModel.Ins.adventureId > id) {
                        this._timeNum = 3;
                        this.updataTime();
                    }
                }
            }
        }
        onDestroy() {
            this.clear();
        }
        updataTime() {
            if (this._timeNum <= 0) {
                this.clear();
                this.ui.goonBtn.event(Laya.Event.CLICK);
            }
            else {
                this.ui.goonTf.text = E.getLang("goonfight") + "(" + this._timeNum + ")";
                Laya.timer.once(1000, this, this.updataTime);
                this._timeNum--;
            }
        }
        clear() {
            Laya.timer.clear(this, this.updataTime);
        }
    }

    exports.DiscountTicket = DiscountTicket;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SucceedPlay extends SimpleEffect {
        constructor(container) {
            super(container, `o/spine/succeed/shengli`);
            this.autoPlay = true;
        }
        start() {
            this.play(0, false, this, this.onCloseEnd);
        }
        onCloseEnd() {
            this.play(1, true);
        }
        set visible(v) {
            this.container.visible = v;
        }
    }

    exports.SucceedPlay = SucceedPlay;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EFightResultView) {
        EFightResultView[EFightResultView["JJC"] = 1] = "JJC";
        EFightResultView[EFightResultView["XXZDZ"] = 2] = "XXZDZ";
    })(exports.EFightResultView || (exports.EFightResultView = {}));
    class FightJieSuanView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMaskClick = true;
            this.auto = true;
            this.PageType = EPageType.None;
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.maoxian.ui_fight_jiesuanUI();
                this.succeed = new SucceedPlay(this._ui.succeedContainer);
                this._jjcCtl = new FightJjcJieSuanCtl(this);
                this._jjcCtl.succeed = this.succeed;
                this._ui.lab0.on(Laya.Event.CLICK, this, this.onLab0Click);
                this._ui.lab1.on(Laya.Event.CLICK, this, this.onLab1Click);
                this._ui.lab2.on(Laya.Event.CLICK, this, this.onLab2Click);
                this._ui.goonBtn.on(Laya.Event.CLICK, this, this.onGoOnClick);
                this._ui.backBtn.on(Laya.Event.CLICK, this, this.onBackClick);
            }
        }
        onGoOnClick(e) {
            if (e)
                e.stopPropagation();
            let _fightEnd = new FightEnd_req();
            _fightEnd.fight_type = this._fightResult.type;
            SocketMgr.Ins.SendMessageBin(_fightEnd);
            Laya.timer.clear(this, this.onFight);
            Laya.timer.once(100, this, this.onFight);
        }
        onBackClick(e) {
        }
        onFight() {
            MainModel.Ins.fightAdventure(NewAdventureModel.Ins.adventureData.adventureId);
            this.Close();
        }
        onLab0Click() {
            E.ViewMgr.Open(EViewType.FuJiang);
        }
        onLab1Click() {
            if (ZuoQiModel.Ins.hasHorse) {
                ZuoQiModel.Ins.openZuoqiMainView();
            }
            else {
                E.ViewMgr.Open(EViewType.ZuoqiChouQu);
            }
        }
        onLab2Click() {
            E.ViewMgr.Open(EViewType.CIFU);
        }
        onSkipHandler() {
            this.Close();
            this.onMaskClose();
        }
        onMaskClose() {
            this.succeed.stop();
            MainModel.Ins.jiesuanEnd(this.Data);
        }
        hideAll() {
            this._ui.skipTf1.off(Laya.Event.CLICK, this, this.onSkipHandler);
            this._ui.diban.off(Laya.Event.CLICK, this, this.onSkipHandler);
            this._ui.clickTips.visible = false;
            Laya.timer.clear(this, this.onDelayHandler);
            Laya.timer.clear(this, this.updataTime);
            this._ui.succeed.visible = false;
            this._ui.fail.visible = false;
            this._ui.jjcsucceed.visible = false;
        }
        onInit() {
            this.hideAll();
            let needTime = 0;
            let _data = this.Data;
            this._fightResult = _data;
            this._ui.lock0.visible = false;
            this._ui.lab0.visible = false;
            this._ui.harmtitle.visible = false;
            this._ui.rewadTf.visible = false;
            this._ui.goonTf.text = E.getLang("goonfight");
            if (_data.type == EFightType.Adventure && !NewAdventureModel.Ins.isCompleteAll) {
                this._ui.goonBtn.visible = this._ui.backBtn.visible = true;
                this._ui.skipTf1.visible = false;
            }
            else {
                this._ui.goonBtn.visible = this._ui.backBtn.visible = false;
                this._ui.skipTf1.visible = true;
            }
            switch (_data.type) {
                case EFightType.Adventure:
                case EFightType.BossFight:
                case EFightType.Boss:
                case EFightType.Expedition:
                case EFightType.WuShenDian:
                    this.style1();
                    break;
                case EFightType.Jjc:
                    this._jjcCtl.setData(this._fightResult.extData, exports.EFightResultView.JJC);
                    needTime = this._jjcCtl.needTime;
                    break;
                case EFightType.XXZDZ:
                    this._jjcCtl.setData(this._fightResult.extData, exports.EFightResultView.XXZDZ);
                    needTime = this._jjcCtl.needTime;
                    break;
                case EFightType.BigBoss:
                    ItemViewFactory.renderItemSlots(this._ui.rewardcontainer, "");
                    this._ui.harmtitle.visible = true;
                    this._ui.succeed.visible = true;
                    this._ui.fail.visible = false;
                    this._ui.harm.text = FightMonsterModel.Ins.totalHarm + "";
                    this.succeed.visible = true;
                    this.succeed.start();
                    break;
                case EFightType.AllianceWar:
                    ItemViewFactory.renderItemSlots(this._ui.rewardcontainer, "");
                    this._ui.harmtitle.visible = true;
                    this._ui.succeed.visible = true;
                    this._ui.fail.visible = false;
                    if (AllianceFightModel.Ins.totalHarmPercent === undefined) {
                        this._ui.harm.text = AllianceFightModel.Ins.totalHarm + '';
                    }
                    else {
                        this._ui.harm.text = AllianceFightModel.Ins.totalHarm + `(${AllianceFightModel.Ins.totalHarmPercent}%)`;
                    }
                    this.succeed.visible = true;
                    this.succeed.start();
                    break;
            }
            if (_data.fightVo.owner == EFightCamp.Enemy) ;
            if (needTime > 0) {
                Laya.timer.once(needTime, this, this.onDelayHandler);
            }
            else {
                this.onDelayHandler();
            }
            if (XXZDZModel.Ins.isFight) {
                this._ui.lab_time.visible = true;
                this._timeNum = 3;
                this.updataTime();
            }
            else {
                this._ui.lab_time.visible = false;
                Laya.timer.clear(this, this.updataTime);
            }
        }
        updataTime() {
            if (this._timeNum <= 0) {
                Laya.timer.clear(this, this.updataTime);
                this.onSkipHandler();
            }
            else {
                this._ui.lab_time.text = this._timeNum + "秒后关闭界面";
                Laya.timer.once(1000, this, this.updataTime);
                this._timeNum--;
            }
        }
        onDelayHandler() {
            this._ui.skipTf1.on(Laya.Event.CLICK, this, this.onSkipHandler);
            this._ui.diban.on(Laya.Event.CLICK, this, this.onSkipHandler);
            this._ui.clickTips.visible = true;
        }
        style1() {
            let _data = this.Data;
            if (_data.fightVo && _data.fightVo.owner == EFightCamp.Self) {
                this._ui.succeed.visible = true;
                this._ui.fail.visible = false;
                this.succeed.visible = true;
                this.succeed.start();
                this._ui.rewadTf.visible = true;
                ItemViewFactory.renderItemSlots(this._ui.rewardcontainer, _data.fightVo.rewardList);
                this.discountTicket = this._ui.addComponent(DiscountTicket);
                this.discountTicket.type = _data.type;
            }
            else {
                this._ui.succeed.visible = false;
                this._ui.fail.visible = true;
                this._ui.lock0.visible = false;
                if (_data.type == EFightType.Expedition) {
                    this._ui.nameTf.text = E.getLang("zhengzhan05");
                    this._ui.img11.skin = `remote/maoxian/fj.png`;
                    if (TaskModel.Ins.isFuncOpen(EFuncDef.FuJiang)) {
                        this._ui.lock0.visible = false;
                        this._ui.lab0.visible = true;
                    }
                    else {
                        this._ui.lock0.visible = true;
                        this._ui.lab0.visible = false;
                    }
                }
                else {
                    this._ui.nameTf.text = E.getLang("zhengzhan04");
                    this._ui.img11.skin = `remote/maoxian/jian.png`;
                    this._ui.lab0.visible = false;
                }
                if (TaskModel.Ins.isFuncOpen(EFuncDef.Ride)) {
                    this._ui.lab1.visible = true;
                    this._ui.lock1.visible = false;
                }
                else {
                    this._ui.lab1.visible = false;
                    this._ui.lock1.visible = true;
                }
                if (_data.type == EFightType.WuShenDian) {
                    this._ui.lab2.visible = true;
                    this._ui.lock2.visible = false;
                    this._ui.img22.skin = `remote/maoxian/wsd_sh.png`;
                    this._ui.lab22.text = "尝试选择其他神魂";
                }
                else {
                    if (TaskModel.Ins.isFuncOpen(EFuncDef.CiFu)) {
                        this._ui.lab2.visible = true;
                        this._ui.lock2.visible = false;
                    }
                    else {
                        this._ui.lab2.visible = false;
                        this._ui.lock2.visible = true;
                    }
                    this._ui.img22.skin = `remote/maoxian/fuyuan.png`;
                    this._ui.lab22.text = "提升福源品质和等级";
                }
                this.succeed.visible = false;
                this.succeed.stop();
            }
        }
        onExit() {
            if (this.discountTicket) {
                this.discountTicket.destroy();
            }
        }
        onAddLoadRes() {
            this.addAtlas("maoxian.atlas");
            this.addAtlas("jjc.atlas");
        }
        onAddEventListener() {
        }
        onEnter() {
        }
    }

    exports.FightJieSuanView = FightJieSuanView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcHeadCtl {
        constructor(skin, plusCon, nametf, mcImg, mcTf, imgTitle = null, img_xx = null, icon_xx = null, lab_xx = null) {
            this.nametf = nametf;
            this.plusCon = plusCon;
            this.icon = skin.icon;
            this.img_title = imgTitle;
            this.img_xx = img_xx;
            this.icon_xx = icon_xx;
            this.lab_xx = lab_xx;
            let _maskTemp = new Laya.Sprite();
            GeometryUtil.drawRoundRect(_maskTemp.graphics, 0, 0, this.icon.width, this.icon.height, 10, "#ff0000");
            this.icon.mask = _maskTemp;
            this.titleIcon = skin.titleIcon;
            this.lvtf = skin.lvtf;
            this.mcImg = mcImg;
            this.mcTf = mcTf;
            if (plusCon) {
                this._plugCtl = FontCtlFactory.createPlus();
            }
            skin.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            MainModel.Ins.showPlayer(this.data.accountId, this.data.id);
        }
        updateView(data, type = EFightResultView.JJC, data1 = null) {
            this.data = data;
            this.titleIcon.skin = "";
            this.lvtf.text = IconUtils.str2Lv(data.lv);
            MainModel.Ins.setTTHead(this.icon, MainModel.Ins.convertHead(data.headUrl));
            let _rankVal = data.rank;
            if (this.img_title) {
                this.img_title.skin = ChengHaoModel.Ins.getTitleImg(data.titleId);
            }
            if (this._plugCtl) {
                let v = StringUtil.val2Atlas(data.plus);
                this._plugCtl.setValue(this.plusCon, v);
            }
            if (this.nametf) {
                this.nametf.text = StringUtil.convertName(data.name);
                if (E.Debug && StringUtil.IsNullOrEmpty(data.name)) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, "name字段值为空 " + JSON.stringify(data));
                }
            }
            if (type == EFightResultView.JJC) {
                if (_rankVal <= JjcHeadCtl.maxRank) {
                    this.mcTf.text = "";
                    this.mcImg.visible = true;
                    this.mcImg.skin = JjcFactory.getRankImg(_rankVal);
                }
                else {
                    this.mcImg.visible = false;
                    this.mcTf.text = _rankVal + "";
                }
            }
            else if (type == EFightResultView.XXZDZ) {
                this.mcTf.text = "";
                this.mcImg.visible = false;
            }
            if (type == EFightResultView.JJC) {
                if (this.img_xx) {
                    this.img_xx.visible = false;
                }
            }
            else if (type == EFightResultView.XXZDZ) {
                this.img_xx.visible = true;
                this.icon_xx.skin = IconUtils.getIconByCfgId(ECellType.XingXing);
                if (data.accountId == MainModel.Ins.mRoleData.AccountId) {
                    this.lab_xx.text = "+" + data1.upval;
                }
                else {
                    this.lab_xx.text = "-" + data1.downval;
                }
            }
        }
    }
    JjcHeadCtl.maxRank = 3;

    exports.JjcHeadCtl = JjcHeadCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcOtherItemCtl {
        constructor(skin) {
            this.skin = skin;
            this.headCtl = new JjcHeadCtl(skin.head, skin.plus, skin.nametf, skin.paiming, skin.mingcitf, skin.img_title);
        }
        updateView(model) {
            this.headCtl.updateView(model.ownerPlayer);
        }
    }

    exports.JjcOtherItemCtl = JjcOtherItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcOtherItemView extends ui.views.jjc.ui_jjc_other_item1UI {
        constructor() {
            super();
            this._headCtl = new JjcHeadCtl(this.head, this.plusCon, this.nametf, this.paiming, this.mingcitf, this.img_title);
        }
        setData(data, hasScore) {
            this._data = data;
            this._headCtl.updateView(data);
            this.plug_spr.visible = data.plus > 0;
            if (data.rank > 3) {
                this.paimngBg.skin = `remote/jjc/paimingkuang.png`;
            }
            else {
                this.paimngBg.skin = `remote/jjc/paiming_${data.rank}_kuang.png`;
            }
            if (data.rank == 1) {
                this.parCon.x = this.parCon.y = 0;
                this.parCon.scaleX = this.parCon.scaleY = 1.05;
            }
            else {
                this.parCon.x = this.parCon.y = 14;
                this.parCon.scaleX = this.parCon.scaleY = 1;
            }
            if (hasScore) {
                this.jifenImg.visible = true;
                this.jftf.visible = true;
                this.jftf.text = data.score + "";
            }
            else {
                this.jifenImg.visible = false;
                this.jftf.visible = false;
            }
        }
    }

    exports.JjcOtherItemView = JjcOtherItemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjcMainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.mMainSnapshot = true;
        }
        custInit() {
            this.model = JjcModel.Ins;
            this.UI = this._ui = new ui.views.jjc.ui_jjc_mainUI();
            this._ui.tf6.text = E.LangMgr.getLang("JjcDayRank");
        }
        onFirstInit() {
            if (!this.UI) {
                this.custInit();
                this.btnList.push(ButtonCtl.Create(this._ui.close1, new Laya.Handler(this, this.Close)), ButtonCtl.Create(this._ui.leftbtn, new Laya.Handler(this, this.onCurWeekHandler)), ButtonCtl.Create(this._ui.rightbtn, new Laya.Handler(this, this.onTodayHandler)));
                this.tiaozhanCtl = ButtonCtl.Create(this._ui.tiaozhan, new Laya.Handler(this, this.onFightHandler));
                this._ui.list1.itemRender = JjcOtherItemView;
                this._ui.list1.vScrollBarSkin = " ";
                this._ui.list1.renderHandler = new Laya.Handler(this, this.JjcOtherItemHandler);
                this._ui.list1.array = [];
                this._timeCtl = new TimeCtlV2(this._ui.timetf, "{0}");
                this._ownerCtl = new JjcOtherItemCtl(this._ui.owner);
            }
        }
        JjcOtherItemHandler(item, index) {
            item.setData(item.dataSource, this.model.hasScore);
        }
        onCurWeekHandler() {
            E.ViewMgr.Open(EViewType.JjcRewardShow, null, { type: EJjcRewadShow.Week, m: this.model });
        }
        onTodayHandler() {
            E.ViewMgr.Open(EViewType.JjcRewardShow, null, { type: EJjcRewadShow.Day, m: this.model });
        }
        onFightHandler() {
            RedUpdateModel.Ins.save(this.model.redId, TimeUtil.serverTime);
            E.ViewMgr.Open(EViewType.JjcFight, null, this.model);
        }
        onExit() {
            this.model.off(JjcEvent.RedUpdate, this, this.onRedUpdate);
            this.model.off(JjcEvent.TodayRankValUpdate, this, this.onTodayRankValUpdate);
            RedUpdateModel.Ins.off(RedUpdateModel.UPDATA, this, this.onTiaozhanBtnEvt);
            this._timeCtl.stop();
            this.model.off(JjcEvent.SelfScore, this, this.onScoreHandle);
        }
        onTimeComplete() {
            this.timeRefresh();
        }
        onAddLoadRes() {
            this.addAtlas("jjc.atlas");
        }
        onTodayRankValUpdate() {
            this._ownerCtl.updateView(this.model);
        }
        onRedUpdate() {
            if (this.model.getRedByType(EJjcRewadShow.Day)) {
                DotManager.addDot(this._ui.rightbtn);
            }
            else {
                DotManager.removeDot(this._ui.rightbtn);
            }
            if (this.model.getRedByType(EJjcRewadShow.Week)) {
                DotManager.addDot(this._ui.leftbtn);
            }
            else {
                DotManager.removeDot(this._ui.leftbtn);
            }
        }
        onInit() {
            this._logCtl = new JjcLogBtnCtl(this._ui.fightbtn, this.model);
            this.timeRefresh();
            this._ownerCtl.updateView(this.model);
            this.model.on(JjcEvent.TodayRankValUpdate, this, this.onTodayRankValUpdate);
            this.model.on(JjcEvent.RedUpdate, this, this.onRedUpdate);
            RedUpdateModel.Ins.on(RedUpdateModel.UPDATA, this, this.onTiaozhanBtnEvt);
            this.onTiaozhanBtnEvt();
            this.onRedUpdate();
            this.model.on(JjcEvent.SelfScore, this, this.onScoreHandle);
            this.model.once(JjcEvent.UpdatePlayerList, this, this.onRefreshList);
            this.model.reqJjcList();
            this.onScoreHandle();
        }
        onScoreHandle() {
            if (this.model.hasScore) {
                if (this._ui.tf9) {
                    this._ui.tf9.visible = true;
                }
                this._ui.owner.jifenImg.visible = true;
                this._ui.owner.jftf.text = this.model.selfScore + "";
            }
            else {
                this._ui.owner.jifenImg.visible = false;
                if (this._ui.tf9) {
                    this._ui.tf9.visible = false;
                }
            }
        }
        onTiaozhanBtnEvt() {
            if (this.model.mFightRed) {
                DotManager.addDot(this.tiaozhanCtl.skin);
            }
            else {
                DotManager.removeDot(this.tiaozhanCtl.skin);
            }
        }
        get showList() {
            return this.model.playerList;
        }
        onRefreshList() {
            this._ui.list1.array = this.showList;
            this._ui.list1.scrollTo(0);
        }
        timeRefresh() {
            let sub = this.model.endTime - TimeUtil.serverTime;
            if (sub > 0) {
                this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
                this._timeCtl.start(sub);
            }
            else {
                this._ui.timetf.text = "";
                this._timeCtl.stop();
            }
        }
    }

    exports.JjcMainView = JjcMainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PeakShowAvatarCtl {
        constructor() {
            this.accountId = 0;
            this.mouseEnable = true;
        }
        refresh(vo) {
            this.vo = vo;
            let skin = this.skin;
            if (vo) {
                this.skin.visible = true;
                skin.nameTf.text = vo.name;
                skin.titleImg.skin = ChengHaoModel.Ins.getTitleImg(vo.titleid);
                skin.icon1.skin = `remote/jjc/dfjjc_mc${vo.rank}.png`;
                let plusView = skin.plugs;
                let val = StringUtil.val2Atlas(vo.plus);
                if (plusView instanceof Laya.Label) {
                    let label = plusView;
                    label.text = val;
                }
                else {
                    if (vo.plus) {
                        skin.plus_con.visible = true;
                        if (!this._plusCtl) {
                            this._plusCtl = FontCtlFactory.createPlus();
                        }
                        this._plusCtl.setValue(skin.plugs, val);
                    }
                    else {
                        skin.plus_con.visible = false;
                    }
                }
                if (this.avatar) {
                    this.avatar.dispose();
                    this.avatar = null;
                }
                this.avatar = AvatarFactory.createAvatarByStSkin(vo.enemySkin);
                this.avatar.dir = EAvatarDir.Right;
                skin.avatarCon.addChild(this.avatar);
            }
            else {
                this.skin.visible = false;
                this.releaseRes();
            }
            if (this.mouseEnable) {
                this.initClick();
            }
        }
        dispose() {
            this.refresh(null);
            this.accountId = null;
        }
        initClick() {
            let con = this.skin.clickPart;
            this.skin.hitArea = new Laya.Rectangle(con.x, con.y, con.width, con.height);
            this.skin.on(Laya.Event.CLICK, this, this.onClickHanlder);
        }
        onClickHanlder() {
            if (this.accountId) {
                MainModel.Ins.showPlayer(this.accountId, 0);
                return;
            }
            let model = PeakJjcModel.Ins;
            if (this.vo) {
                let cell = model.playerList[this.vo.rank - 1];
                MainModel.Ins.showPlayer(cell.accountId, cell.id);
            }
        }
        releaseRes() {
            if (this.avatar) {
                this.avatar.dispose();
                this.avatar = null;
            }
        }
    }
    class PeakJjcView extends JjcMainView {
        constructor() {
            super(...arguments);
            this._avatarShowList = [];
        }
        custInit() {
            this.model = PeakJjcModel.Ins;
            this.UI = this._ui = new ui.views.peakjjc.ui_jjc_mainUI();
            this._ui.tf6.text = "";
            let skin = this._ui;
            this.skin = skin;
            skin.tf9.text = E.getLang("dfjjc01");
            this._avatarShowList = [];
            for (let i = 0; i < 3; i++) {
                let cell = new PeakShowAvatarCtl();
                cell.skin = this.skin[`avatar${i}`];
                this._avatarShowList.push(cell);
            }
        }
        onExit() {
            super.onExit();
            for (let i = 0; i < this._avatarShowList.length; i++) {
                this._avatarShowList[i].refresh(null);
            }
        }
        initAvatarShow() {
            for (let i = 0; i < this._avatarShowList.length; i++) {
                this._avatarShowList[i].skin.visible = false;
            }
        }
        onRefreshList() {
            super.onRefreshList();
            this.initAvatarShow();
            this.model.once(JjcEvent.RankShowAvatar, this, this.onRankShowAvatar);
            let req = new PeakJjcAvatar_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        get showList() {
            let l = this.model.playerList;
            let result = [];
            for (let i = 3; i < l.length; i++) {
                result.push(l[i]);
            }
            return result;
        }
        onRankShowAvatar() {
            let _model = PeakJjcModel.Ins;
            let l = _model.rankAvatarlist;
            for (let i = 0; i < this._avatarShowList.length; i++) {
                let vo = l[i];
                this._avatarShowList[i].refresh(vo);
            }
        }
    }

    exports.PeakJjcView = PeakJjcView;
    exports.PeakShowAvatarCtl = PeakShowAvatarCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Arena_Peak_RankReward_Daily extends BaseCfg {
        GetTabelName() {
            return "t_Arena_Peak_RankReward_Daily";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new Arena_Peak_RankReward_Daily();
            }
            return this._ins;
        }
    }
    class Arena_Peak_RankReward_Weekly extends BaseCfg {
        GetTabelName() {
            return "t_Arena_Peak_RankReward_Weekly";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new Arena_Peak_RankReward_Weekly();
            }
            return this._ins;
        }
    }
    class Arena_Peak_config extends BaseCfg {
        GetTabelName() {
            return "t_Arena_Peak_config";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new Arena_Peak_config();
            }
            return this._ins;
        }
    }
    class Arena_Peak_BuyTicket extends BaseCfg {
        GetTabelName() {
            return "t_Arena_Peak_BuyTicket";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new Arena_Peak_BuyTicket();
            }
            return this._ins;
        }
        getCfgByTime(time) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let _cfg = l[i];
                if (_cfg.f_BuyTimes == time) {
                    return _cfg;
                }
            }
            let _cfg = l[l.length - 1];
            return _cfg;
        }
    }
    class PeakJjcModel extends JJC_BaseModel {
        constructor() {
            super(...arguments);
            this.redId = RedEnum.DF_JJC_FIGHT;
            this.playerList = [];
            this.fightPlayers = [];
            this.loglist = [];
            this.isEnable = false;
            this.todayRank = 0;
            this.succeedRewardList = [];
            this.surplusRefreshCount = 0;
            this.curWeekRank = 0;
            this.weekRewardStatus = EGetStatus.CanNotGet;
            this.weekRefreshTime = 0;
            this.rankAvatarlist = [];
            this.funcId = EFuncDef.DF_jjc;
        }
        get realPrice() {
            let cfg = this.curCfg;
            return cfg.f_CouponPrice;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new PeakJjcModel();
            }
            return this._ins;
        }
        initMsg() {
            this.Reg(new PeakJjcView(EViewType.DF_JJC));
            E.MsgMgr.AddMsg(MSGID.PeakJjcInfo, this.onJjcInfo, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcList, this.onJjcListRevc, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcRefreshList, this.onJjcFightListRevc, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcFightLog, this.onJjcFightLogRevc, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcMoneyUpdate, this.onJjcMoneyUpdateRevc, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcBuyFightCnt, this.onJjcBuyFightCntRevc, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcOpen, this.onJjcOpenRevc, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcRankChange, this.onJjcRankChangeRevc, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcRewardGain, this.onJjcRewardGainRevc, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcSucceedReward, this.onJjcSucceedReward, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcSurplusRefreshCount, this.onJjcSurplusRefreshCountRevc, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcWeekInfo, this.onJjcWeekInfoRevc, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcWeeklyRewardUnix, this.onWeeklyReward, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcAvatar, this.onPeakJjcAvatar, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcDailyRewardUnix, this.onDailyUnix, this);
            RedUpdateModel.Ins.on(RedUpdateModel.UPDATA, this, this.updateRed);
        }
        onDailyUnix(revc) {
            this.dailyDayTime = revc.time;
            this.event(JjcEvent.DailyDayTime);
        }
        rankSort(a, b) {
            if (a.rank < b.rank) {
                return -1;
            }
            else if (a.rank > b.rank) {
                return 1;
            }
            return 0;
        }
        onPeakJjcAvatar(revc) {
            this.rankAvatarlist = revc.datalist;
            this.rankAvatarlist.sort(this.rankSort);
            this.event(JjcEvent.RankShowAvatar);
        }
        onWeeklyReward(revc) {
            this.weekRefreshTime = revc.time;
            this.event(JjcEvent.WeekTime);
        }
        onJjcWeekInfoRevc(revc) {
            if (revc.rank != -1) {
                this.curWeekRank = revc.rank;
            }
            this.weekRewardStatus = revc.rewardStatus;
            this.event(JjcEvent.JjcWeekInfoUpdate);
            this.updateRed();
        }
        onJjcSurplusRefreshCountRevc(revc) {
            this.surplusRefreshCount = revc.val;
            this.event(JjcEvent.SurplusRefreshCount);
        }
        onJjcSucceedReward(revc) {
            this.succeedRewardList = revc.succeedRewardList;
        }
        onJjcRewardGainRevc(revc) {
            this.dayStatus = revc.day;
            this.event(JjcEvent.LingQuUpdate);
            this.updateRed();
        }
        onJjcFightListRevc(revc) {
            this.fightPlayers = revc.playerList;
            this.event(JjcEvent.FightPlayerList);
        }
        onJjcListRevc(revc) {
            this.playerList = revc.playerList;
            this.event(JjcEvent.UpdatePlayerList);
        }
        onJjcRankChangeRevc(revc) {
            this.todayRank = revc.rank;
            this.event(JjcEvent.TodayRankValUpdate);
        }
        onJjcOpenRevc(revc) {
            this.isEnable = revc.open == 1;
        }
        get isTimeOpen() {
            let time = MainModel.Ins.peakOpenTime;
            if (time != 0 && TimeUtil.serverTime >= time) {
                return true;
            }
        }
        onJjcFightLogRevc(revc) {
            this.loglist = revc.loglist;
            this.event(JjcEvent.LogEvent);
        }
        onJjcMoneyUpdateRevc(revc) {
            this.moneyDataRevc = revc;
            this.event(JjcEvent.MoneyVal);
        }
        onJjcInfo(revc) {
            this.baseInfo = revc;
        }
        get ownerPlayer() {
            if (!this._ownerPlayer) {
                let _player = new stJjcPlayer();
                let info = MainModel.Ins.mRoleData.mPlayer;
                _player.name = MainModel.Ins.mRoleData.getName() + "(" + MainModel.Ins.mRoleData.serverName + ")";
                _player.accountId = info.AccountId;
                _player.headUrl = MainModel.Ins.convertHead(info.HeadUrl);
                this._ownerPlayer = _player;
            }
            let _player = this._ownerPlayer;
            _player.lv = MainModel.Ins.mRoleData.lv;
            _player.plus = this.plus;
            _player.rank = this.todayRank;
            _player.titleId = ChengHaoModel.Ins.wearedTitleId;
            _player.score = this.selfScore;
            return _player;
        }
        get curCfg() {
            return Arena_Peak_config.Ins.GetDataById(1);
        }
        get refreshTotalCnt() {
            return this.curCfg.f_FreeChance;
        }
        get cfgFightRefreshMax() {
            return this.curCfg.f_RefreshChance;
        }
        get f_MoneyMaximum() {
            let cfg = this.curCfg;
            return cfg.f_MoneyMaximum;
        }
        get fightTotalCnt() {
            if (this.fightBuyRevc) {
                return this.fightBuyRevc.totalCnt;
            }
            return 0;
        }
        getRefreshPrice(refreshCount) {
            let cfg = this.curCfg;
            let [itemId, count] = cfg.f_refreshprice.split('-').map(Number);
            const [, icr] = cfg.f_refreshpriceincs.split('-').map(Number);
            const [, total] = cfg.f_refreshpricemax.split('-').map(Number);
            if (refreshCount > 0) {
                count += icr * refreshCount;
                count = Math.min(count, total);
            }
            return { itemId, count };
        }
        buyFightTime(playerId) {
            this.tempPlayerId = playerId;
            let req = new PeakJjcBuyFightCnt_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        get freefightCnt() {
            return this.fightBuyRevc.freeCnt;
        }
        get hasAlreadyBuyCnt() {
            if (this.fightBuyRevc) {
                return this.fightBuyRevc.buyCnt;
            }
            return -1;
        }
        get dayMoneyVal() {
            if (this.moneyDataRevc) {
                return this.moneyDataRevc.moneyVal;
            }
            return -1;
        }
        strToSecond(str, offsetTime) {
            let _endTime = str;
            let _sec = TimeUtil.toSecond(_endTime);
            let curtime = TimeUtil.curZeroTime + _sec;
            let sub = curtime - TimeUtil.serverTime;
            if (sub < 0) {
                sub += offsetTime;
            }
            return sub + TimeUtil.serverTime;
        }
        get endTime() {
            return this.strToSecond(this.curCfg.f_ArenaCloseTime.split("|")[0], 3600 * 24);
        }
        getWeekRewardEndTime() {
            return this.weekRefreshTime;
        }
        getDayRewardEndTime() {
            let time = this.dailyDayTime;
            return time;
        }
        refreshPlayerList() {
            let req = new PeakJjcActiveRefresh_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        getRedByType(type) {
            let _gray = false;
            if (type == EJjcRewadShow.Day) {
                if (this.dayStatus == EJjcRewadShowStatus.CanLingqu) ;
                else {
                    _gray = true;
                }
            }
            else {
                if (this.weekRewardStatus == EGetStatus.CanNotGet || this.weekRewardStatus == EGetStatus.IsAlreadyGet) {
                    _gray = true;
                }
            }
            return !_gray;
        }
        get mFightRed() {
            let o = RedUpdateModel.Ins.getByID(this.redId);
            if (o) {
                let time = o.type;
                if (time < TimeUtil.curZeroTime) {
                    return true;
                }
                return false;
            }
            return true;
        }
        reqJjcList() {
            let req = new PeakJjcList_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        reqRefreshList() {
            let req = new PeakJjcRefreshList_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        fight(id) {
            let req = new PeakJjcFight_req();
            req.playerId = id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        reqlog() {
            let req = new PeakJjcFightLog_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        reqGain(type) {
            let req = new PeakJjcRewardGain_req();
            req.type = type;
            SocketMgr.Ins.SendMessageBin(req);
        }
        reqWeekInfo() {
            let req = new PeakJjcWeekInfo_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        getRewardCfgList(type) {
            return type == EJjcRewadShow.Day ? Arena_Peak_RankReward_Daily.Ins.List : Arena_Peak_RankReward_Weekly.Ins.List;
        }
        getType() {
            return EJjcType.Peak;
        }
    }

    exports.Arena_Peak_BuyTicket = Arena_Peak_BuyTicket;
    exports.Arena_Peak_RankReward_Daily = Arena_Peak_RankReward_Daily;
    exports.Arena_Peak_RankReward_Weekly = Arena_Peak_RankReward_Weekly;
    exports.Arena_Peak_config = Arena_Peak_config;
    exports.PeakJjcModel = PeakJjcModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianModel extends Laya.EventDispatcher {
        constructor() {
            super(...arguments);
            this.power = 1;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WuShenDianModel();
            }
            return this._ins;
        }
        isRedTip() {
            if (!TaskModel.Ins.isFuncOpen(EFuncDef.WuShenDian)) {
                return false;
            }
            if (this.isRankAwardRedTip()) {
                return true;
            }
            return false;
        }
        isRankAwardRedTip() {
            if (this.rankRewardState == 1) {
                return true;
            }
            return false;
        }
    }
    WuShenDianModel.RED_TIP = "RED_TIP";
    WuShenDianModel.UPDATA_VIEW = "UPDATA_VIEW";
    WuShenDianModel.UPDATA_SHENHUN_VIEW = "UPDATA_SHENHUN_VIEW";
    WuShenDianModel.UPDATA_RANK_VIEW = "UPDATA_RANK_VIEW";
    WuShenDianModel.UPDATA_RANKAWARD_VIEW = "UPDATA_RANKAWARD_VIEW";
    WuShenDianModel.UPDATA_SHOP_VIEW = "UPDATA_SHOP_VIEW";
    WuShenDianModel.UPDATA_SHOPGM_VIEW = "UPDATA_SHOPGM_VIEW";

    exports.WuShenDianModel = WuShenDianModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianAwardProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new WuShenDianAwardProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Palace_Rank_Reward";
        }
    }
    class WuShenDianShopProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new WuShenDianShopProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Palace_Shop";
        }
        getListByType(type) {
            let arr = [];
            for (let i = 0; i < this.List.length; i++) {
                if (this.List[i].f_ShopType == type) {
                    arr.push(this.List[i]);
                }
            }
            return arr;
        }
    }
    class WuShenDianDataTypeProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new WuShenDianDataTypeProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Palace_DataType";
        }
    }
    class WuShenDianCoreBuffBaseProxy extends BaseCfg {
        GetTabelName() {
            return "";
        }
        getListByType(type) {
            let arr = [];
            for (let i = 0; i < this.List.length; i++) {
                if (this.List[i].f_CoreBuffType == type) {
                    arr.push(this.List[i]);
                }
            }
            return arr;
        }
    }
    class WuShenDianCoreBuffProxy {
        static get Ins() {
            if (!this._verList) {
                this._verList = [];
                this._verList.push(new WuShenDianCoreBuffV0Proxy());
                this._verList.push(new WuShenDianCoreBuffV1Proxy());
            }
            let temp = this._verList[0];
            for (let i = 0; i < this._verList.length; i++) {
                let proxy = this._verList[i];
                if (proxy.ver == MainModel.Ins.serverVer) {
                    temp = proxy;
                    break;
                }
            }
            return temp;
        }
    }
    class WuShenDianCoreBuffV0Proxy extends WuShenDianCoreBuffBaseProxy {
        GetTabelName() {
            return "t_Palace_Data_CoreBuff";
        }
    }
    class WuShenDianCoreBuffV1Proxy extends WuShenDianCoreBuffBaseProxy {
        GetTabelName() {
            return "t_Palace_Data_CoreBuff_v1";
        }
    }
    class WuShenDianConfigProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new WuShenDianConfigProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Palace_Config";
        }
    }
    class WuShenDianGKProxy extends BaseCfg {
        constructor() {
            super();
            this.max = 0;
            this._cfg = {};
            for (let i = 0; i < this.List.length; i++) {
                this.max = Math.max(this.List[i].f_Level, this.max);
                this._cfg[this.List[i].f_Level] = this.List[i];
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WuShenDianGKProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Palace_LevelSetting";
        }
        getCfgByGKID(id) {
            return this._cfg[id];
        }
    }
    class WuShenDianEnemyProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new WuShenDianEnemyProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Palace_Enemy";
        }
        getCfgById(id) {
            return this.List.find(ele => ele.f_EnemyID == id);
        }
    }

    exports.WuShenDianAwardProxy = WuShenDianAwardProxy;
    exports.WuShenDianConfigProxy = WuShenDianConfigProxy;
    exports.WuShenDianCoreBuffBaseProxy = WuShenDianCoreBuffBaseProxy;
    exports.WuShenDianCoreBuffProxy = WuShenDianCoreBuffProxy;
    exports.WuShenDianCoreBuffV0Proxy = WuShenDianCoreBuffV0Proxy;
    exports.WuShenDianCoreBuffV1Proxy = WuShenDianCoreBuffV1Proxy;
    exports.WuShenDianDataTypeProxy = WuShenDianDataTypeProxy;
    exports.WuShenDianEnemyProxy = WuShenDianEnemyProxy;
    exports.WuShenDianGKProxy = WuShenDianGKProxy;
    exports.WuShenDianShopProxy = WuShenDianShopProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianAwardView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wushendian.ui_wushendianAwardViewUI;
                this.bindClose(this._ui.close1);
                this._timeCtl = new TimeCtl(this._ui.time1);
                this._ui.list.itemRender = ui.views.wushendian.ui_wushendianAwardItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRewardItemRender);
                this.btnList.push(ButtonCtl.Create(this._ui.lingquBtn, new Laya.Handler(this, this.onBtnClick)));
            }
        }
        onInit() {
            WuShenDianModel.Ins.on(WuShenDianModel.UPDATA_RANKAWARD_VIEW, this, this.setBtn);
            this._ui.list.array = WuShenDianAwardProxy.Ins.List;
            let time = WuShenDianModel.Ins.rewardUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
            this.setBtn();
        }
        onExit() {
            WuShenDianModel.Ins.off(WuShenDianModel.UPDATA_RANKAWARD_VIEW, this, this.setBtn);
            this._timeCtl.stop();
        }
        onRewardItemRender(item) {
            let cfg = item.dataSource;
            let arr = cfg.f_Rank.split("|");
            if (arr.length == 1) {
                let rank = parseInt(arr[0]);
                if (rank == 1 || rank == 2 || rank == 3) {
                    item.rankTf.visible = false;
                    item.icon1.visible = true;
                    item.icon1.skin = "remote/main/main/dfjjc_mc" + rank + ".png";
                }
                else {
                    item.rankTf.visible = true;
                    item.rankTf.text = rank + "";
                    item.icon1.visible = false;
                }
            }
            else {
                item.rankTf.visible = true;
                item.rankTf.text = arr[0] + "-" + arr[1];
                item.icon1.visible = false;
            }
            ItemViewFactory.renderItemSlots(item.rewardList, cfg.f_Item, 10, 0.85, "right");
        }
        setBtn() {
            if (WuShenDianModel.Ins.rankRewardState == 1) {
                this._ui.lingquBtn.disabled = false;
                DotManager.addDot(this._ui.lingquBtn);
            }
            else {
                this._ui.lingquBtn.disabled = true;
                DotManager.removeDot(this._ui.lingquBtn);
            }
            if (WuShenDianModel.Ins.rankingSettle) {
                this._ui.lab.text = WuShenDianModel.Ins.rankingSettle + "";
            }
            else {
                this._ui.lab.text = "未上榜";
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        onBtnClick() {
            let req = new PalaceReward_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
    }

    exports.WuShenDianAwardView = WuShenDianAwardView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianRankCtl {
        constructor(skin) {
            this._ui = skin;
            this._ui.bg1.on(Laya.Event.CLICK, this, this.onClick);
            this._plusCtl = FontCtlFactory.createPlus();
        }
        onClick() {
            if (this._data) {
                if (this._data.accountId != MainModel.Ins.mRoleData.mPlayer.AccountId) {
                    let req = new StarWatchPlayerInfo_req();
                    req.accountId = this._data.accountId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        setData(value, type = 1) {
            if (!value)
                return;
            this._data = value;
            if (this._data.rank == 1 || this._data.rank == 2 || this._data.rank == 3) {
                this._ui.sp.visible = false;
                this._ui.paiming.skin = "remote/main/main/dfjjc_mc" + this._data.rank + ".png";
            }
            else {
                this._ui.sp.visible = true;
                this._ui.paiming.skin = "";
                if (this._data.rank <= 0) {
                    this._ui.mingcitf.text = "未上榜";
                }
                else {
                    if (this._data.rank <= 100) {
                        this._ui.mingcitf.text = this._data.rank + "";
                    }
                    else {
                        this._ui.mingcitf.text = "100+";
                    }
                }
            }
            MainModel.Ins.setTTHead(this._ui.icon, MainModel.Ins.convertHead(this._data.headUrl));
            this._ui.nameTf.text = this._data.name;
            this._ui.lab_qf.text = "(" + this._data.severName + ")";
            this._ui.img_title.skin = ChengHaoModel.Ins.getTitleImg(this._data.titleId);
            let v = StringUtil.val2Atlas(this._data.plus);
            this._plusCtl.setValue(this._ui.plusCon, v);
            this._ui.lab_gk.text = this._data.palaceLevel + "关";
            this._ui.lab_hh.text = this._data.accRound + "回合";
            if (type == 1) {
                this._ui.bg.skin = "remote/wushendian/dfjjc_xs.png";
            }
            else {
                this._ui.bg.skin = "remote/wushendian/dfjjc_xszj.png";
            }
        }
    }

    exports.WuShenDianRankCtl = WuShenDianRankCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianRankItem extends ui.views.wushendian.ui_wushendianRankItemUI {
        constructor() {
            super();
            this.ctl = new WuShenDianRankCtl(this);
        }
    }

    exports.WuShenDianRankItem = WuShenDianRankItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianRankView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wushendian.ui_wushendianRankViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.rightbtn, new Laya.Handler(this, this.onBtnClick)));
                this._ui.list.itemRender = WuShenDianRankItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._item = new WuShenDianRankCtl(this._ui.item);
            }
        }
        onInit() {
            WuShenDianModel.Ins.on(WuShenDianModel.UPDATA_RANK_VIEW, this, this.upDataView);
            WuShenDianModel.Ins.on(WuShenDianModel.UPDATA_RANKAWARD_VIEW, this, this.setRankRedTip);
            let req = new PalaceRankList_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            WuShenDianModel.Ins.off(WuShenDianModel.UPDATA_RANK_VIEW, this, this.upDataView);
            WuShenDianModel.Ins.off(WuShenDianModel.UPDATA_RANKAWARD_VIEW, this, this.setRankRedTip);
        }
        onBtnClick() {
            E.ViewMgr.Open(EViewType.WuShenDianAwardView);
        }
        onItemRender(item) {
            item.ctl.setData(item.dataSource);
        }
        upDataView() {
            this._ui.list.array = WuShenDianModel.Ins.rankList;
            this._item.setData(WuShenDianModel.Ins.myStarRank, 2);
            this.setRankRedTip();
        }
        setRankRedTip() {
            if (WuShenDianModel.Ins.isRankAwardRedTip()) {
                DotManager.addDot(this._ui.rightbtn, 10);
            }
            else {
                DotManager.removeDot(this._ui.rightbtn);
            }
        }
    }

    exports.WuShenDianRankView = WuShenDianRankView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianSHItem3 extends ui.views.wushendian.ui_wushendianSHItem3UI {
        constructor() {
            super();
            this.icon.on(Laya.Event.CLICK, this, this.onIconClick);
            this.img_suo.on(Laya.Event.CLICK, this, this.onImgClick);
        }
        onIconClick(e) {
            e.stopPropagation();
            if (this._data) {
                let cfg = WuShenDianDataTypeProxy.Ins.GetDataById(this._data.buffId);
                let id = cfg.f_AttributeID;
                let val = this._data.val;
                let st = MainModel.Ins.getAttrNameIdByID(id) + ": +";
                st += attrConvert(id, val);
                MainModel.Ins.showSmallTips("", st, e.target);
            }
        }
        onImgClick() {
            let len = parseInt(WuShenDianConfigProxy.Ins.GetDataById(1).f_BuffMinMax.split("|")[0]);
            let num = WuShenDianModel.Ins.buffList.length - len;
            let st = WuShenDianConfigProxy.Ins.GetDataById(1).f_LatticeInit;
            let id = parseInt(st.split("-")[0]);
            let count = parseInt(st.split("-")[1]);
            let cou = count;
            for (let i = 0; i < num; i++) {
                cou = cou * 2;
            }
            MainModel.Ins.queryMsg("解锁神魂格吗", id, cou, 0, new Laya.Handler(this, this.onClickHandler));
        }
        onClickHandler() {
            let req = new PalaceUnlockBuff_req;
            req.type = 0;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setData(value) {
            if (!value)
                return;
            if (value.suo == 1) {
                this.img_suo.visible = true;
                this.sp.visible = false;
                this._data = null;
            }
            else {
                this.img_suo.visible = false;
                this.sp.visible = true;
                this._data = value.data;
                if (this._data.buffId) {
                    let cfg = WuShenDianDataTypeProxy.Ins.GetDataById(this._data.buffId);
                    this.img_qua.skin = IconUtils.getQuaIcon(cfg.f_ColorID);
                    this.icon.skin = "o/Palace/" + cfg.f_Icon + ".png";
                }
                else {
                    this.img_qua.skin = "";
                    this.icon.skin = "";
                }
                for (let i = 1; i < 9; i++) {
                    if (this._data.times >= i) {
                        this["sp" + i].visible = true;
                    }
                    else {
                        this["sp" + i].visible = false;
                    }
                }
            }
        }
    }

    exports.WuShenDianSHItem3 = WuShenDianSHItem3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianSHItem4 extends ui.views.wushendian.ui_wushendianSHItem4UI {
        constructor() {
            super();
            this.icon.on(Laya.Event.CLICK, this, this.onIconClick);
            this.img_suo.on(Laya.Event.CLICK, this, this.onImgClick);
        }
        onIconClick(e) {
            e.stopPropagation();
            if (this._data) {
                MainModel.Ins.showSmallTips("", this._data.f_CorebuffName + " " + this._data.f_demension, e.target);
            }
        }
        onImgClick() {
            let len = parseInt(WuShenDianConfigProxy.Ins.GetDataById(1).f_CoreBuffMinMax.split("|")[0]);
            let num = WuShenDianModel.Ins.coreBuffList.length - len;
            let st = WuShenDianConfigProxy.Ins.GetDataById(1).f_CoreLatticeLnit;
            let id = parseInt(st.split("-")[0]);
            let count = parseInt(st.split("-")[1]);
            let cou = count;
            for (let i = 0; i < num; i++) {
                cou = cou * 2;
            }
            MainModel.Ins.queryMsg("解锁核心神魂格吗", id, cou, 0, new Laya.Handler(this, this.onClickHandler));
        }
        onClickHandler() {
            let req = new PalaceUnlockBuff_req;
            req.type = 1;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setData(value) {
            if (!value)
                return;
            if (value.suo == 1) {
                this.img_suo.visible = true;
                this.img_qua.visible = false;
                this._data = null;
            }
            else {
                this.img_suo.visible = false;
                this.img_qua.visible = true;
                if (value.data) {
                    this._data = WuShenDianCoreBuffProxy.Ins.GetDataById(value.data);
                    this.img_qua.skin = IconUtils.getQuaIcon(this._data.f_ColorID);
                    this.icon.skin = "o/Palace/" + this._data.f_Icon + ".png";
                }
                else {
                    this.img_qua.skin = "";
                    this.icon.skin = "";
                    this._data = null;
                }
            }
        }
    }

    exports.WuShenDianSHItem4 = WuShenDianSHItem4;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianSHLView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wushendian.ui_wushendianSHLViewUI;
                this.bindClose(this._ui.close1);
                this._ui.list2.itemRender = WuShenDianSHItem3;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list3.itemRender = WuShenDianSHItem4;
                this._ui.list3.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
            }
        }
        onInit() {
            WuShenDianModel.Ins.on(WuShenDianModel.UPDATA_SHENHUN_VIEW, this, this.updataView);
            this.updataView();
        }
        onExit() {
            WuShenDianModel.Ins.off(WuShenDianModel.UPDATA_SHENHUN_VIEW, this, this.updataView);
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onRenderHandler1(item) {
            item.setData(item.dataSource);
        }
        updataView() {
            let arr = [];
            let len = parseInt(WuShenDianConfigProxy.Ins.GetDataById(1).f_BuffMinMax.split("|")[1]);
            for (let i = 0; i < len; i++) {
                let obj = {};
                if (WuShenDianModel.Ins.buffList[i]) {
                    obj.data = WuShenDianModel.Ins.buffList[i];
                    obj.suo = 0;
                    arr.push(obj);
                }
                else {
                    obj.data = null;
                    obj.suo = 1;
                    arr.push(obj);
                }
            }
            this._ui.list2.array = arr;
            arr = [];
            len = parseInt(WuShenDianConfigProxy.Ins.GetDataById(1).f_CoreBuffMinMax.split("|")[1]);
            for (let i = 0; i < len; i++) {
                let obj = {};
                if (WuShenDianModel.Ins.coreBuffList[i] != null) {
                    obj.data = WuShenDianModel.Ins.coreBuffList[i];
                    obj.suo = 0;
                    arr.push(obj);
                }
                else {
                    obj.data = null;
                    obj.suo = 1;
                    arr.push(obj);
                }
            }
            this._ui.list3.array = arr;
        }
    }

    exports.WuShenDianSHLView = WuShenDianSHLView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EQuickMsg) {
        EQuickMsg[EQuickMsg["NULL"] = 0] = "NULL";
        EQuickMsg[EQuickMsg["JJC"] = 1] = "JJC";
        EQuickMsg[EQuickMsg["HeroHouseTask"] = 2] = "HeroHouseTask";
        EQuickMsg[EQuickMsg["PaoShangBuy"] = 3] = "PaoShangBuy";
        EQuickMsg[EQuickMsg["PaoShangDel"] = 4] = "PaoShangDel";
        EQuickMsg[EQuickMsg["FuYuanZH"] = 5] = "FuYuanZH";
        EQuickMsg[EQuickMsg["BaoShiCZ"] = 6] = "BaoShiCZ";
        EQuickMsg[EQuickMsg["BaoShiBZ"] = 7] = "BaoShiBZ";
        EQuickMsg[EQuickMsg["FaZhengGH"] = 8] = "FaZhengGH";
        EQuickMsg[EQuickMsg["ShenBinLv"] = 9] = "ShenBinLv";
        EQuickMsg[EQuickMsg["XXZDZ"] = 10] = "XXZDZ";
        EQuickMsg[EQuickMsg["ShenHun1"] = 11] = "ShenHun1";
        EQuickMsg[EQuickMsg["ShenHun2"] = 12] = "ShenHun2";
        EQuickMsg[EQuickMsg["ShenHun3"] = 13] = "ShenHun3";
        EQuickMsg[EQuickMsg["ShenHun4"] = 14] = "ShenHun4";
        EQuickMsg[EQuickMsg["ShenHun5"] = 15] = "ShenHun5";
    })(exports.EQuickMsg || (exports.EQuickMsg = {}));
    class QuickMsgVo {
    }

    exports.QuickMsgVo = QuickMsgVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianSHItem1 extends ui.views.wushendian.ui_wushendianSHItem1UI {
        constructor() {
            super();
            this.img_click.on(Laya.Event.CLICK, this, this.onClick);
        }
        onClick() {
            if (this._data) {
                let flag = false;
                for (let i = 0; i < WuShenDianModel.Ins.buffList.length; i++) {
                    if (WuShenDianModel.Ins.buffList[i].buffId == 0) {
                        flag = true;
                        break;
                    }
                }
                if (!flag) {
                    let vo = WuShenDianModel.Ins.buffList.find(cell => cell.buffId == this._data.buffId);
                    if (vo) {
                        flag = true;
                    }
                }
                if (flag) {
                    this.sendCmd();
                }
                else {
                    let len = parseInt(WuShenDianConfigProxy.Ins.GetDataById(1).f_BuffMinMax.split("|")[1]);
                    if (WuShenDianModel.Ins.buffList.length >= len) {
                        MainModel.Ins.queryMsg("神魂数量已满，请返回刷新神魂或放弃选择继续挑战", 0, 0, EQuickMsg.ShenHun2, new Laya.Handler(this, this.sendCmd1), "返回", "继续挑战");
                    }
                    else {
                        MainModel.Ins.queryMsg("神魂数量已达上限，请返回开启新的神魂格或放弃选择继续挑战", 0, 0, EQuickMsg.ShenHun1, new Laya.Handler(this, this.sendCmd1), "返回", "继续挑战");
                    }
                }
            }
        }
        sendCmd() {
            let req = new PalaceChooseBuff_req;
            req.buffId = this._data.buffId;
            SocketMgr.Ins.SendMessageBin(req);
            E.ViewMgr.Close(EViewType.WuShenDianSHView);
        }
        sendCmd1() {
            let req = new PalaceFight_req;
            req.type = 1;
            SocketMgr.Ins.SendMessageBin(req);
            E.ViewMgr.Close(EViewType.WuShenDianSHView);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            if (this._data.times == 7) {
                this.sp.visible = true;
            }
            else {
                this.sp.visible = false;
            }
            let index = WuShenDianModel.Ins.buffList.findIndex(ele => ele.buffId == value.buffId);
            if (index == -1) {
                this.sp_new.visible = true;
            }
            else {
                this.sp_new.visible = false;
            }
            let cfg = WuShenDianDataTypeProxy.Ins.GetDataById(this._data.buffId);
            this.img_qua.skin = IconUtils.getQuaIcon(value.quality);
            this.icon.skin = "o/Palace/" + cfg.f_Icon + ".png";
            let id = cfg.f_AttributeID;
            this.lab1.text = MainModel.Ins.getAttrNameIdByID(id) + ":";
            this.lab2.text = "+" + attrConvert(id, this._data.addVal);
            this.lab1.color = this.lab2.color = "#" + EquipmentQualityProxy.Ins.getByQua(value.quality).f_Color;
            this.lab4.text = attrConvert(id, this._data.val);
            for (let i = 1; i < 9; i++) {
                if (this._data.times >= i) {
                    this["sp" + i].visible = true;
                }
                else {
                    this["sp" + i].visible = false;
                }
            }
        }
    }

    exports.WuShenDianSHItem1 = WuShenDianSHItem1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenHunCtl {
        constructor(skin) {
            this._ui = skin;
        }
        setData(qua, icon, name) {
            this._ui.img_sel.visible = false;
            this._ui.img_qua.skin = IconUtils.getQuaIcon(qua);
            this._ui.icon.skin = "o/Palace/" + icon + ".png";
            this._ui.lab_name.text = name;
        }
    }

    exports.ShenHunCtl = ShenHunCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianSHItem2 extends ui.views.wushendian.ui_wushendianSHItem2UI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClick);
            this._ctl1 = new ShenHunCtl(this.item);
        }
        onClick() {
            if (this._data) {
                let flag = false;
                for (let i = 0; i < WuShenDianModel.Ins.coreBuffList.length; i++) {
                    if (WuShenDianModel.Ins.coreBuffList[i] == 0) {
                        flag = true;
                        break;
                    }
                }
                if (flag) {
                    this.sendCmd();
                }
                else {
                    let len = parseInt(WuShenDianConfigProxy.Ins.GetDataById(1).f_BuffMinMax.split("|")[1]);
                    if (WuShenDianModel.Ins.buffList.length >= len) {
                        MainModel.Ins.queryMsg("核心神魂数量已满，请继续挑战", 0, 0, EQuickMsg.ShenHun4, new Laya.Handler(this, this.sendCmd1), "返回", "继续挑战");
                    }
                    else {
                        MainModel.Ins.queryMsg("核心神魂数量已达上限，请返回开启新的神魂格或放弃选择继续挑战", 0, 0, EQuickMsg.ShenHun3, new Laya.Handler(this, this.sendCmd1), "返回", "继续挑战");
                    }
                }
            }
        }
        sendCmd() {
            let req = new PalaceChooseCoreBuff_req;
            req.coreBuffId = this._data.f_id;
            SocketMgr.Ins.SendMessageBin(req);
            E.ViewMgr.Close(EViewType.WuShenDianSHView);
        }
        sendCmd1() {
            let req = new PalaceFight_req;
            req.type = 1;
            SocketMgr.Ins.SendMessageBin(req);
            E.ViewMgr.Close(EViewType.WuShenDianSHView);
        }
        setData(value) {
            if (!value)
                return;
            this._data = WuShenDianCoreBuffProxy.Ins.GetDataById(value);
            this._ctl1.setData(this._data.f_ColorID, this._data.f_Icon, this._data.f_CorebuffName);
            this.lab_dec1.text = this._data.f_Corebuffdes;
        }
    }

    exports.WuShenDianSHItem2 = WuShenDianSHItem2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianSHView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wushendian.ui_wushendianSHViewUI;
                this.btnList.push(ButtonCtl.Create(this._ui.btn_lq, new Laya.Handler(this, this.onBtnClick)));
                this._ui.list2.itemRender = WuShenDianSHItem3;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list3.itemRender = WuShenDianSHItem4;
                this._ui.list3.renderHandler = new Laya.Handler(this, this.onRenderHandler1);
                this._ui.list1.itemRender = WuShenDianSHItem2;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler2);
                this._ui.list.itemRender = WuShenDianSHItem1;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler3);
            }
        }
        onInit() {
            WuShenDianModel.Ins.on(WuShenDianModel.UPDATA_SHENHUN_VIEW, this, this.updataView);
            this._type = this.Data;
            this.updataView();
        }
        onExit() {
            WuShenDianModel.Ins.off(WuShenDianModel.UPDATA_SHENHUN_VIEW, this, this.updataView);
        }
        SetCenter() {
            this.UI.anchorX = this.UI.anchorY = 0.5;
            this.UI.x = this.ViewParent.width >> 1;
            let yy = (1500 - ScreenAdapter.DefaultHeight) * 0.5;
            this.UI.y = (this.ViewParent.height >> 1) + yy;
        }
        onBtnClick() {
            let req = new PalaceRefreshBuff_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onRenderHandler1(item) {
            item.setData(item.dataSource);
        }
        onRenderHandler2(item) {
            item.setData(item.dataSource);
        }
        onRenderHandler3(item) {
            item.setData(item.dataSource);
        }
        updataView() {
            if (this._type == 1) {
                this._ui.sp.visible = true;
                this._ui.sp1.visible = false;
                this.onSHView();
            }
            else {
                this._ui.sp.visible = false;
                this._ui.sp1.visible = true;
                this._ui.list1.array = WuShenDianModel.Ins.selCoreBuffList;
            }
            let arr = [];
            let len = parseInt(WuShenDianConfigProxy.Ins.GetDataById(1).f_BuffMinMax.split("|")[1]);
            for (let i = 0; i < len; i++) {
                let obj = {};
                if (WuShenDianModel.Ins.buffList[i]) {
                    obj.data = WuShenDianModel.Ins.buffList[i];
                    obj.suo = 0;
                    arr.push(obj);
                }
                else {
                    obj.data = null;
                    obj.suo = 1;
                    arr.push(obj);
                }
            }
            this._ui.list2.array = arr;
            arr = [];
            len = parseInt(WuShenDianConfigProxy.Ins.GetDataById(1).f_CoreBuffMinMax.split("|")[1]);
            for (let i = 0; i < len; i++) {
                let obj = {};
                if (WuShenDianModel.Ins.coreBuffList[i] != null) {
                    obj.data = WuShenDianModel.Ins.coreBuffList[i];
                    obj.suo = 0;
                    arr.push(obj);
                }
                else {
                    obj.data = null;
                    obj.suo = 1;
                    arr.push(obj);
                }
            }
            this._ui.list3.array = arr;
        }
        onSHView() {
            this._ui.list.array = WuShenDianModel.Ins.selBuffList;
            let num = WuShenDianConfigProxy.Ins.GetDataById(1).f_FreeRefreshTimes - WuShenDianModel.Ins.refreshTimes;
            if (num > 0) {
                this._ui.icon.visible = false;
                this._ui.lab_free.text = "剩余免费次数:" + num + "次";
            }
            else {
                this._ui.icon.visible = true;
                this._ui.lab_free.text = "";
                let id = WuShenDianConfigProxy.Ins.GetDataById(1).f_RefreshConsume.split("-")[0];
                let val = WuShenDianConfigProxy.Ins.GetDataById(1).f_RefreshConsume.split("-")[1];
                this._ui.icon.skin = IconUtils.getIconByCfgId(id);
                this._ui.lab2.text = val;
            }
        }
    }

    exports.WuShenDianSHView = WuShenDianSHView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ValCtl {
        constructor(tf, img) {
            this.tf = tf;
            this.img = img;
            this.tf.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.tf.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        static Create(tf, img, type) {
            let ctl = new ValCtl(tf, img);
            ctl.setType(type);
            return ctl;
        }
        onDisplay() {
            MainModel.Ins.on(MainEvent.ValChangeCell, this, this.onUpdateView);
            this.onUpdateView(this.type);
        }
        onUnDisplay() {
            MainModel.Ins.off(MainEvent.ValChangeCell, this, this.onUpdateView);
        }
        onUpdateView(id) {
            if (id == this.type) {
                let img = this.img;
                if (img) {
                    img.skin = IconUtils.getIconByCfgId(this.type);
                }
                let val = MainModel.Ins.mRoleData.getVal(this.type);
                this.tf.text = StringUtil.val2m(val);
            }
        }
        setType(type) {
            this.type = type;
            this.onUpdateView(type);
        }
    }

    exports.ValCtl = ValCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianShopItem extends ui.views.wushendian.ui_wushendianShopItemUI {
        constructor() {
            super();
            this.lab_num.visible = false;
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            if (this._data) {
                let vo = WuShenDianModel.Ins.itemList.find(ele => ele.fid == this._data.f_id);
                let num = 0;
                if (vo) {
                    num = vo.buyNum;
                }
                if (num >= this._data.f_PurchaseMax) {
                    E.ViewMgr.ShowMidError("该物品已售罄，请等待商店刷新");
                    return;
                }
                let arr = this._data.f_Purchase.split("-");
                let arr1 = this._data.f_Item.split("-");
                MainModel.Ins.buy(parseInt(arr[0]), parseInt(arr[1]), parseInt(arr1[0]), parseInt(arr1[1]), new Laya.Handler(this, this.okBuyHandler));
            }
        }
        okBuyHandler() {
            if (this._data) {
                let req = new PalaceShop_req;
                req.fid = this._data.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let voo = WuShenDianModel.Ins.itemList.find(ele => ele.fid == value.f_id);
            let num = 0;
            if (voo) {
                num = voo.buyNum;
            }
            this.lab_xg.text = "每周限购" + num + "/" + value.f_PurchaseMax;
            let vo = new ItemVo();
            vo.cfgId = parseInt(value.f_Item.split("-")[0]);
            vo.count = parseInt(value.f_Item.split("-")[1]);
            ItemViewFactory.refreshSlot(this.item, vo, false);
            this.lab_name.text = vo.getName();
            this.icon.skin = IconUtils.getIconByCfgId(parseInt(value.f_Purchase.split("-")[0]));
            this.lab.text = value.f_Purchase.split("-")[1];
        }
    }

    exports.WuShenDianShopItem = WuShenDianShopItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianShopView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wushendian.ui_wushendianShopViewUI;
                this.bindClose(this._ui.btn_close);
                this._ui.list.itemRender = WuShenDianShopItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                ValCtl.Create(this._ui.lab2, this._ui.img2, ECellType.ShenHun);
                this._timeCtl = new TimeCtl(this._ui.time1);
                const tabsSkin = [this._ui.tab1, this._ui.tab2];
                this.tabList = ["道具商店", "副将商店"];
                this.tabsCtl = new TabControl();
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler), new Laya.Handler(this, this.itemTabHandler));
            }
        }
        itemTabHandler(tabSkin, index, sel, data) {
            let skin = tabSkin;
            skin.lab_name.text = this.tabList[index];
            if (sel) {
                skin.img1.visible = false;
                skin.img2.visible = true;
            }
            else {
                skin.img1.visible = true;
                skin.img2.visible = false;
            }
        }
        onTabSelectHandler(v) {
            if (v == -1)
                return;
            this._ui.list.array = WuShenDianShopProxy.Ins.getListByType(v + 1);
        }
        onInit() {
            WuShenDianModel.Ins.on(WuShenDianModel.UPDATA_SHOP_VIEW, this, this.updataView);
            WuShenDianModel.Ins.on(WuShenDianModel.UPDATA_SHOPGM_VIEW, this, this.onUpdataView);
            let req = new PalaceUpdateShop_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            WuShenDianModel.Ins.off(WuShenDianModel.UPDATA_SHOP_VIEW, this, this.updataView);
            WuShenDianModel.Ins.off(WuShenDianModel.UPDATA_SHOPGM_VIEW, this, this.onUpdataView);
            this._timeCtl.stop();
            this.tabsCtl.selectIndex = -1;
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        updataView() {
            let val = MainModel.Ins.mRoleData.getVal(ECellType.ShenHun);
            this._ui.lab2.text = StringUtil.val2m(val);
            let time = WuShenDianModel.Ins.shopRefreshUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
            this.tabsCtl.selectIndex = 0;
            this._ui.icon.skin = IconUtils.getIconByCfgId(ECellType.ShenHun);
            this._ui.lab_sx.text = WuShenDianModel.Ins.itemNum + "/" + WuShenDianConfigProxy.Ins.GetDataById(1).f_SoulpieceMax;
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        onUpdataView() {
            this._ui.list.refresh();
        }
    }

    exports.WuShenDianShopView = WuShenDianShopView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianTJView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wushendian.ui_wushendianTJViewUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = ui.views.wushendian.ui_wushendianTJItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list.selectEnable = true;
                this._ui.list.array = WuShenDianDataTypeProxy.Ins.List;
                this._ctl1 = new ShenHunCtl(this._ui.item1);
                this._ctl2 = new ShenHunCtl(this._ui.item2);
                this._ctl3 = new ShenHunCtl(this._ui.item3);
            }
        }
        onInit() {
            this._ui.list.selectedIndex = 0;
        }
        onExit() {
        }
        onItemRender(item, index) {
            let cfg = item.dataSource;
            item.img_qua.skin = IconUtils.getQuaIcon(cfg.f_ColorID);
            item.icon.skin = "o/Palace/" + cfg.f_Icon + ".png";
            item.lab_name.text = cfg.f_TypeName;
            if (index == this._ui.list.selectedIndex) {
                this._ctl1.setData(cfg.f_ColorID, cfg.f_Icon, cfg.f_TypeName);
                let arr = WuShenDianCoreBuffProxy.Ins.getListByType(cfg.f_CoreBuffType);
                this._ctl2.setData(arr[0].f_ColorID, arr[0].f_Icon, arr[0].f_CorebuffName);
                this._ui.lab_dec1.text = arr[0].f_Corebuffdes;
                this._ctl3.setData(arr[1].f_ColorID, arr[1].f_Icon, arr[1].f_CorebuffName);
                this._ui.lab_dec2.text = arr[1].f_Corebuffdes;
                item.img_sel.visible = true;
            }
            else {
                item.img_sel.visible = false;
            }
        }
    }

    exports.WuShenDianTJView = WuShenDianTJView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianAvatrItem extends ui.views.wushendian.ui_wushendianItemUI {
        constructor() {
            super();
            this._starCtl = new FuJiangStarCtl(this.item);
            this.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
        }
        onRemove() {
            this.clearAvatar();
        }
        setData(value, index) {
            if (!value)
                return;
            if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                if (index == 4) {
                    this.visible = true;
                    this._starCtl.setStar(value.star);
                    this._starCtl.centerX();
                    let cfg = WuShenDianEnemyProxy.Ins.GetDataById(value.enemyId);
                    this.lab_name.text = "Lv." + value.level + " " + cfg.f_EnemyName;
                    this.lab_name.color = "#" + EquipmentQualityProxy.Ins.getByQua(value.quality).f_Color;
                    let ecfg = Enemy_ImageProxy.Ins.getCfg(cfg.f_EnemyImage);
                    let skinVo = new stSkin();
                    skinVo.f_BodyID = ecfg.f_BodyID;
                    skinVo.f_HeadID = ecfg.f_HeadID;
                    skinVo.f_MountID = ecfg.f_MountID;
                    skinVo.f_ShieldID = ecfg.f_ShieldID;
                    skinVo.f_WeaponID = ecfg.f_WeaponID;
                    skinVo.f_WingID = ecfg.f_WingID;
                    this.skinVo = skinVo;
                    this.index = index;
                }
                else {
                    this.visible = false;
                }
            }
            else {
                this.visible = true;
                this._starCtl.setStar(value.star);
                this._starCtl.centerX();
                let cfg = WuShenDianEnemyProxy.Ins.GetDataById(value.enemyId);
                this.lab_name.text = "Lv." + value.level + " " + cfg.f_EnemyName;
                this.lab_name.color = "#" + EquipmentQualityProxy.Ins.getByQua(value.quality).f_Color;
                let ecfg = Enemy_ImageProxy.Ins.getCfg(cfg.f_EnemyImage);
                let skinVo = new stSkin();
                skinVo.f_BodyID = ecfg.f_BodyID;
                skinVo.f_HeadID = ecfg.f_HeadID;
                skinVo.f_MountID = ecfg.f_MountID;
                skinVo.f_ShieldID = ecfg.f_ShieldID;
                skinVo.f_WeaponID = ecfg.f_WeaponID;
                skinVo.f_WingID = ecfg.f_WingID;
                this.skinVo = skinVo;
                this.index = index;
            }
        }
        createAvatar() {
            if (this._avatar && this._avatar.isSkinEqual(this.skinVo)) {
                return;
            }
            this.clearAvatar();
            this._avatar = AvatarFactory.createAvatarByStSkin(this.skinVo, EAvatarAnim.NormalStand);
            this.sp.addChild(this._avatar);
            if (this.index == 4) {
                this._avatar.scaleX = this._avatar.scaleY = 1.2;
            }
            else {
                this._avatar.scaleX = this._avatar.scaleY = 1;
            }
        }
        clearAvatar() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
    }

    exports.WuShenDianAvatrItem = WuShenDianAvatrItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('wushendian.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.wushendian.ui_wushendianViewUI;
                this.bindClose(this._ui.btn_close);
                this._model = WuShenDianModel.Ins;
                this.btnList.push(ButtonCtl.Create(this._ui.btn_ph, new Laya.Handler(this, this.onBtnPHClick)), ButtonCtl.Create(this._ui.btn_sd, new Laya.Handler(this, this.onBtnSDClick)), ButtonCtl.Create(this._ui.btn_tj, new Laya.Handler(this, this.onBtnTJClick)), ButtonCtl.Create(this._ui.btn_xq, new Laya.Handler(this, this.onBtnXQClick)), ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)), ButtonCtl.Create(this._ui.btn_lq, new Laya.Handler(this, this.onBtnLQClick)), ButtonCtl.Create(this._ui.btn_tz, new Laya.Handler(this, this.onBtnTZClick)), ButtonCtl.Create(this._ui.btn_kstz, new Laya.Handler(this, this.onBtnKSTZClick)));
                this._ui.tf3.on(Laya.Event.CLICK, this, this.onTipsHandler);
                this._ui.btn_tip1.on(Laya.Event.CLICK, this, this.onTipsHandler);
                this._plusCtl = FontCtlFactory.createPlus();
                this._ui.list.itemRender = WuShenDianAvatrItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._timeCtl = new TimeCtl(this._ui.lab_time);
            }
        }
        onInit() {
            this._model.on(WuShenDianModel.UPDATA_VIEW, this, this.updataView);
            this._model.on(WuShenDianModel.UPDATA_RANKAWARD_VIEW, this, this.setRedTip);
            let req = new PalaceRefresh_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            this._model.off(WuShenDianModel.UPDATA_VIEW, this, this.updataView);
            this._model.off(WuShenDianModel.UPDATA_RANKAWARD_VIEW, this, this.setRedTip);
            this._timeCtl.stop();
            Laya.timer.clear(this, this.createAvatar);
        }
        onRenderHandler(item, index) {
            item.setData(item.dataSource, index);
        }
        onTipsHandler(e) {
            e.stopPropagation();
            let st = "";
            for (let i = 0; i < this._model.attrList.length; i++) {
                st += MainModel.Ins.getAttrNameIdByID(this._model.attrList[i], true) + " ";
            }
            MainModel.Ins.showSmallTips("", st, e.target, "rightbottom1");
        }
        onBtnPHClick() {
            E.ViewMgr.Open(EViewType.WuShenDianRankView);
        }
        onBtnSDClick() {
            E.ViewMgr.Open(EViewType.WuShenDianShopView);
        }
        onBtnTJClick() {
            E.ViewMgr.Open(EViewType.WuShenDianTJView);
        }
        onBtnXQClick() {
            E.ViewMgr.Open(EViewType.WuShenDianSHLView);
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("WuShenDianTitle", "WuShenDianDec");
        }
        onBtnLQClick() {
            if (this._model.gkId == 1) {
                E.ViewMgr.ShowMidError("当前关卡不能重置");
                return;
            }
            MainModel.Ins.queryMsg("重置后将退回第1关并失去所有神魂和核心神魂", 0, 0, 0, new Laya.Handler(this, this.onClickHandler));
        }
        onBtnTZClick() {
            this._model.isKs = false;
            this.onTZ();
        }
        onBtnKSTZClick() {
            this._model.isKs = true;
            this.onTZ();
        }
        onTZ() {
            if (WuShenDianModel.Ins.itemNum >= parseInt(WuShenDianConfigProxy.Ins.GetDataById(1).f_SoulpieceMax)) {
                MainModel.Ins.queryMsg("本周青铜币已达获取上限，是否继续挑战", 0, 0, EQuickMsg.ShenHun5, new Laya.Handler(this, this.sendCmd), "返回", "继续挑战");
                return;
            }
            if (this._model.tongguan) {
                E.ViewMgr.ShowMidError("您已通过武神的考验，请重置关卡后再挑战");
                return;
            }
            this.sendCmd();
        }
        sendCmd() {
            let req = new PalaceFight_req;
            req.type = 0;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onClickHandler() {
            let req = new PalaceReset_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        createAvatar() {
            if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                let item = this._ui.list.getCell(4);
                item.createAvatar();
                Laya.timer.clear(this, this.createAvatar);
            }
            else {
                if (this._count > 0) {
                    let item = this._ui.list.getCell(this._count - 1);
                    item.createAvatar();
                    this._count--;
                }
                else {
                    Laya.timer.clear(this, this.createAvatar);
                }
            }
        }
        updataView() {
            this._ui.lab_gk.text = "第" + this._model.gkId + "/" + WuShenDianGKProxy.Ins.max + "关";
            if (MainModel.Ins.serverVer == EServerVersion.Version_1) {
                let arr = [1, 1, 1, 1, this._model.enemyList[0], 1];
                this._ui.list.array = arr;
                this._count = arr.length;
            }
            else {
                this._ui.list.array = this._model.enemyList;
                this._count = this._model.enemyList.length;
            }
            Laya.timer.frameLoop(1, this, this.createAvatar);
            let v = StringUtil.val2Atlas(this._model.power);
            this._plusCtl.setValue(this._ui.plusCon, v);
            let cfg = WuShenDianGKProxy.Ins.getCfgByGKID(this._model.gkId);
            let award;
            if (this._model.state == 1) {
                award = cfg.f_FirstpassReward;
            }
            else {
                award = cfg.f_NormalReward;
            }
            ItemViewFactory.renderItemSlots(this._ui.rewardList, award, 10, 0.85);
            let time = WuShenDianModel.Ins.refreshUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
            this.setRedTip();
            const fastPassLevel = WuShenDianConfigProxy.Ins.GetDataById(1).f_quickfight;
            if ((MainModel.Ins.mRoleData.plus >= this._model.power) && (this._model.gkId < fastPassLevel)) {
                this._ui.btn_kstz.visible = true;
            }
            else {
                this._ui.btn_kstz.visible = false;
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            let st = "关卡刷新倒计时:\n" + time_str;
            this._timeCtl.setText(st);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        setRedTip() {
            if (this._model.isRankAwardRedTip()) {
                DotManager.addDot(this._ui.btn_ph, 0, 10);
            }
            else {
                DotManager.removeDot(this._ui.btn_ph);
            }
        }
    }

    exports.WuShenDianView = WuShenDianView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WuShenDianModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new WuShenDianModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            this.isOpen = false;
        }
        initMsg() {
            this._model = WuShenDianModel.Ins;
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            this.Reg(new WuShenDianView(EViewType.WuShenDianView));
            this.Reg(new WuShenDianRankView(EViewType.WuShenDianRankView));
            this.Reg(new WuShenDianShopView(EViewType.WuShenDianShopView));
            this.Reg(new WuShenDianTJView(EViewType.WuShenDianTJView));
            this.Reg(new WuShenDianSHView(EViewType.WuShenDianSHView, ELayerType.subFrameLayer));
            this.Reg(new WuShenDianAwardView(EViewType.WuShenDianAwardView));
            this.Reg(new WuShenDianSHLView(EViewType.WuShenDianSHLView));
            E.MsgMgr.AddMsg(MSGID.PalaceInit, this.PalaceInit, this);
            E.MsgMgr.AddMsg(MSGID.PalaceChooseBuff, this.PalaceChooseBuff, this);
            E.MsgMgr.AddMsg(MSGID.PalaceBuffList, this.PalaceBuffList, this);
            E.MsgMgr.AddMsg(MSGID.PalaceChooseCoreBuff, this.PalaceChooseCoreBuff, this);
            E.MsgMgr.AddMsg(MSGID.PalaceCoreBuffList, this.PalaceCoreBuffList, this);
            E.MsgMgr.AddMsg(MSGID.PalaceRankList, this.PalaceRankList, this);
            E.MsgMgr.AddMsg(MSGID.PalaceReward, this.PalaceReward, this);
            E.MsgMgr.AddMsg(MSGID.PalaceUpdateRanking, this.PalaceUpdateRanking, this);
            E.MsgMgr.AddMsg(MSGID.PalaceShop, this.PalaceShop, this);
            E.MsgMgr.AddMsg(MSGID.PalaceShopUpdate, this.PalaceShopUpdate, this);
            E.MsgMgr.AddMsg(MSGID.PalaceRefresh, this.PalaceRefresh, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setRedTip);
        }
        setRedTip() {
            MainModel.Ins.yewaiRed();
            this.event(WuShenDianModel.RED_TIP);
        }
        PalaceInit(value) {
            this.isOpen = true;
            this._model.gkId = value.id;
            this._model.enemyList = value.enemyList;
            this._model.power = value.power;
            this._model.attrList = value.attrList;
            this._model.ranking = value.ranking;
            this._model.rankingSettle = value.lastRanking;
            this._model.rankRewardState = value.rankRewardState;
            this._model.buffList = value.buffList;
            this._model.coreBuffList = value.coreBuffList;
            this._model.state = value.state;
            this._model.tongguan = value.clear;
            this._model.event(WuShenDianModel.UPDATA_VIEW);
        }
        PalaceChooseBuff(value) {
            this._model.selBuffList = value.buffList;
            this._model.refreshTimes = value.refreshTimes;
            if (E.ViewMgr.isOpenReg(EViewType.WuShenDianSHView)) {
                this._model.event(WuShenDianModel.UPDATA_SHENHUN_VIEW);
            }
            else {
                E.ViewMgr.Open(EViewType.WuShenDianSHView, null, 1);
            }
        }
        PalaceChooseCoreBuff(value) {
            this._model.selCoreBuffList = value.coreBuffList;
            E.ViewMgr.Open(EViewType.WuShenDianSHView, null, 2);
        }
        PalaceBuffList(value) {
            this._model.buffList = value.buffList;
            this._model.event(WuShenDianModel.UPDATA_SHENHUN_VIEW);
        }
        PalaceCoreBuffList(value) {
            this._model.coreBuffList = value.coreBuffList;
            this._model.event(WuShenDianModel.UPDATA_SHENHUN_VIEW);
        }
        PalaceRankList(value) {
            this._model.rankList = value.dataList;
            this._model.myStarRank = value.data;
            this._model.event(WuShenDianModel.UPDATA_RANK_VIEW);
        }
        PalaceReward(value) {
            this._model.rankRewardState = value.rankRewardState;
            this._model.rankingSettle = value.lastRanking;
            this._model.event(WuShenDianModel.UPDATA_RANKAWARD_VIEW);
            this.onMainViewInit();
        }
        PalaceUpdateRanking(value) {
            this._model.gkId = value.id;
            this._model.enemyList = value.enemyList;
            this._model.power = value.power;
            this._model.attrList = value.attrList;
            this._model.ranking = value.ranking;
            this._model.state = value.state;
            this._model.tongguan = value.clear;
        }
        PalaceRefresh(value) {
            this._model.refreshUnix = value.refreshUnix;
            this._model.rewardUnix = value.rewardUnix;
            this._model.event(WuShenDianModel.UPDATA_VIEW);
        }
        PalaceShop(value) {
            this._model.itemList = value.itemList;
            this._model.shopRefreshUnix = value.shopRefreshUnix;
            this._model.itemNum = value.itemNum;
            this._model.event(WuShenDianModel.UPDATA_SHOP_VIEW);
        }
        PalaceShopUpdate(value) {
            let index = this._model.itemList.findIndex(ele => ele.fid == value.item.fid);
            if (index != -1) {
                this._model.itemList[index].buyNum = value.item.buyNum;
            }
            else {
                this._model.itemList.push(value.item);
            }
            this._model.event(WuShenDianModel.UPDATA_SHOPGM_VIEW);
        }
    }

    exports.WuShenDianModule = WuShenDianModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YinDaoTaskProxy extends BaseCfg {
        constructor() {
            super();
            this.rebuild();
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new YinDaoTaskProxy();
            }
            return this._ins;
        }
        rebuild() {
            this.typeList = [];
            this.taskList = {};
            for (let i = 0; i < this.List.length; i++) {
                let id = parseInt(this.List[i].f_GuidePosition.split("-")[0]);
                if (this.typeList.indexOf(id) == -1) {
                    this.typeList.push(id);
                }
                let taskId = MainModel.Ins.getTaskGuideCfg(this.List[i]);
                if (!this.taskList[taskId]) {
                    this.taskList[taskId] = [];
                }
                this.taskList[taskId].push(this.List[i]);
            }
        }
        getCfgByGID(gid) {
            let l = this.List;
            return l.find(item => item.f_GuideID == gid);
        }
        GetTabelName() {
            return "t_Tasks_Guide";
        }
    }

    exports.YinDaoTaskProxy = YinDaoTaskProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TaskModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.isPoped = false;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new TaskModel();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
        }
        getWeiXinHead() {
            E.sdk.getWechatNickname((weiXin) => {
                let req = new wxPlayerInfo_req();
                req.nickName = weiXin.nickName;
                req.portrait = weiXin.avatarUrl;
                SocketMgr.Ins.SendMessageBin(req);
                MainModel.Ins.mRoleData.mPlayer.NickName = weiXin.nickName;
                MainModel.Ins.mRoleData.mPlayer.HeadUrl = weiXin.avatarUrl;
                MainModel.Ins.event(MainEvent.UpdateAvatarNickName);
                if (E.ta) {
                    E.ta.userSetOnce({ profile_open: 1 });
                }
            }, () => {
                if (E.ta) {
                    E.ta.userSetOnce({ profile_open: 0 });
                }
            });
        }
        get guideArr() {
            if (!this.taskData) {
                return [];
            }
            let taskArr = YinDaoTaskProxy.Ins.taskList[this.taskData.taskId];
            let guideTaskId = HrefUtils.getVal("guideTaskId");
            if (guideTaskId) {
                taskArr = YinDaoTaskProxy.Ins.taskList[guideTaskId];
            }
            return taskArr;
        }
        checkWeiXingHead(taskId) {
            let model = MainModel.Ins;
            if (model.mRoleData.mPlayer && model.mRoleData.mPlayer.HeadUrl == "") {
                let jjcCfg = FuncProxy.Ins.getCfgByFid(EFuncDef.Jjc);
                if (!this.isPoped && TaskProxy.Ins.isTaskComplete(FuncProxy.Ins.getTaskCfg(jjcCfg), taskId)) {
                    this.isPoped = true;
                    this.getWeiXinHead();
                }
            }
        }
        onTaskRevc(taskData) {
            if (TaskModel.Ins.taskData && TaskModel.Ins.taskData.taskId != taskData.id) {
                E.yinDaoMgr.index = 0;
            }
            if (!TaskModel.Ins.gongGaoList) {
                TaskModel.Ins.gongGaoList = [];
            }
            if (TaskModel.Ins.taskData && TaskModel.Ins.gongGaoList.indexOf(taskData.id) == -1) {
                let arr = FuncProxy.Ins.getCfgListByTaskId(taskData.id);
                for (let i = 0; i < arr.length; i++) {
                    if (TaskModel.Ins.gongGaoList.indexOf(arr[i].f_task) == -1) {
                        TaskModel.Ins.gongGaoList.push(arr[i].f_task);
                    }
                    let funcCfg = arr[i];
                    if (!funcCfg.f_close) {
                        let data = {};
                        data.st1 = funcCfg.f_name;
                        data.co1 = "#6DCC4E";
                        data.st2 = "功能开启";
                        MainModel.Ins.addTs(data);
                        let jjcCfg = FuncProxy.Ins.getCfgByFid(EFuncDef.Jjc);
                        if (FuncProxy.Ins.getTaskCfg(jjcCfg) == taskData.id) {
                            LogSys$1.Log("Jjc 开启!!!!");
                            this.getWeiXinHead();
                        }
                    }
                    MainModel.Ins.event(MainEvent.Function_Open);
                }
            }
            this.checkWeiXingHead(taskData.id);
            TaskModel.Ins.taskData = {
                taskId: taskData.id,
                taskStatus: taskData.status,
                datalist: taskData.datalist
            };
            if (this.taskCell)
                this.taskCell.skin.contTf.color = taskData.status === 2 ? '#239330' : '#cd1b29';
            TaskModel.Ins.doUpdate();
            TaskModel.Ins.updateFunc();
            this.event(TaskModel.TaskChanged);
            ShopModel.Ins.updateRed();
            E.yinDaoMgr.showYD(9);
        }
        updateFunc() {
            const _allBtns = TaskModel.Ins._allBtns;
            const taskData = TaskModel.Ins.taskData;
            if (!_allBtns || !taskData)
                return;
            const funcIds = FuncProxy.Ins.getFuncList(taskData.taskId);
            const posArr = funcIds.map(funcId => MainIconProxy.Ins.getFuncPosByFuncId(funcId));
            TaskModel.Ins._allBtns.forEach(element => {
                if (posArr.indexOf(element.pos) === -1) {
                    element.ctl.gray = true;
                }
                else {
                    element.ctl.gray = false;
                }
            });
        }
        InitUpdateTask(_ui, _allBtns) {
            if (!TaskModel.Ins._ui) {
                TaskModel.Ins._ui = _ui;
            }
            if (!TaskModel.Ins._allBtns) {
                TaskModel.Ins._allBtns = _allBtns;
            }
            if (!TaskModel.Ins.juanzhouCtl) {
                if (this.taskCell) {
                    this.juanzhouCtl = this.taskCell.skin.taskImg.on(Laya.Event.CLICK, this, this.onJuanzhou);
                }
            }
            this.doUpdate();
            this.updateFunc();
        }
        doUpdate() {
            if (!this.taskCell) {
                return;
            }
            let _taskCellSkin = this.taskCell.skin;
            if (_taskCellSkin && TaskModel.Ins.taskData) {
                let taskData = TaskModel.Ins.taskData;
                let taskStatus = taskData.taskStatus;
                if (taskStatus === 3) {
                    MainModel.Ins.reelCtl.visible = false;
                    return;
                }
                let task = TaskProxy.Ins.getCfg(taskData.taskId);
                let taskType = TaskProxy.Ins.getTaskType(task);
                let taskCondition = TaskProxy.Ins.getTaskConditions(task);
                let taskContent = TaskTypeProxy.Ins.getTaskContent(taskType);
                let params = taskContent.match(/\{(\d+)\}/g);
                for (let i = 0; i < params.length; i++) {
                    let remark = params[i];
                    const num = Number(remark.replace('{', '').replace('}', ''));
                    let text = '';
                    switch (num) {
                        case 0:
                            text = String(taskData.datalist[0]) || '';
                            break;
                        case 1:
                            if (taskType === 8) {
                                text = AdventureLevelProxy.Ins.getAdventureTaskName(Number(taskCondition[0]));
                            }
                            else {
                                text = taskCondition[0];
                            }
                            break;
                        case 2:
                            if (taskType === 5) {
                                let qua = EquipmentQualityProxy.Ins.getByQua(parseInt(taskCondition[1])).f_EquipmentLevel;
                                text = qua;
                            }
                            else {
                                text = taskCondition[1];
                            }
                            break;
                        default:
                            text = '';
                    }
                    taskContent = taskContent.replace(remark, text);
                }
                let rewardItem = TaskProxy.Ins.getTaskRewardItemList(taskData.taskId)[0];
                _taskCellSkin.taskItemIcon.skin = rewardItem.getIcon();
                if (_taskCellSkin.qua) {
                    if (initConfig.platform == PlatformConfig.War3) {
                        (_taskCellSkin.qua.skin = rewardItem.quaIcon());
                    }
                    else {
                        _taskCellSkin.qua.skin = "";
                    }
                }
                _taskCellSkin.rewardNum.text = rewardItem.count.toString();
                _taskCellSkin.renwuTask.text = taskContent;
                if (taskType === 8) {
                    _taskCellSkin.contTf.text = (taskData.datalist[0] >= Number(taskCondition[0]) ? '1' : '0') + '/1';
                }
                else {
                    _taskCellSkin.contTf.text = taskData.datalist[0] + '/' + taskCondition[0];
                }
                _taskCellSkin.contTf.color = taskData.taskStatus === 2 ? '#239330' : '#cd1b29';
                MainModel.Ins.treasureEffect = taskStatus === 2 ? true : false;
            }
        }
        onReqTask() {
            let rewardReq = new Reward_req();
            rewardReq.type = 4;
            SocketMgr.Ins.SendMessageBin(rewardReq);
        }
        onJuanzhou(e) {
            if (TaskModel.Ins.taskData.taskStatus === 2) {
                MainModel.Ins.reelPlay();
                this.onReqTask();
            }
            else if (TaskModel.Ins.taskData.taskStatus === 1) {
                let task = TaskProxy.Ins.getCfg(TaskModel.Ins.taskData.taskId);
                let cfg = TaskTypeProxy.Ins.getCfg(task.f_TaskType);
                E.yinDaoMgr.addZDTS(cfg);
                e.stopPropagation();
            }
        }
        get peakOpenDesc() {
            let time = MainModel.Ins.peakOpenTime;
            if (!time) {
                return E.getLang("peakerr2");
            }
            let arr = TimeUtil.timestamtoTime(time * 1000, "-", "-", "-", "").split("-");
            let s = `${arr[1]}月${arr[2]}日`;
            return E.getLang("peakerr", s);
        }
        isFuncOpen(funcid, msg = false) {
            if (MainModel.Ins.verify) {
                if (funcid == EFuncDef.Confraternity) {
                    return false;
                }
            }
            let funcCfg = FuncProxy.Ins.getCfgByFid(funcid);
            if (!funcCfg) {
                LogSys$1.Warn(`funcid ${funcid} 不存在`);
                return;
            }
            if (t_Platform.Ins.isClose(funcCfg.f_FunctionID) ||
                FuncProxy.Ins.f_close(funcCfg) || MainModel.Ins.isVerify(funcCfg)) {
                if (msg) {
                    E.ViewMgr.ShowMidError(E.getLang("please_wait"));
                }
                return false;
            }
            const taskData = TaskModel.Ins.taskData;
            let isTips = false;
            if (taskData) {
                const res = FuncProxy.Ins.checkFunc(taskData.taskId, funcid);
                if (!res && msg) {
                    const funcName = FuncProxy.Ins.getFuncNameByFuncId(funcid);
                    let _info = FuncProxy.Ins.f_info(funcCfg);
                    if (!StringUtil.IsNullOrEmpty(_info)) {
                        E.ViewMgr.ShowMidError(_info);
                    }
                    else {
                        E.ViewMgr.ShowMidError(`完成前置任务后可开启${funcName}`);
                    }
                    isTips = true;
                }
                if (funcid == EFuncDef.DF_jjc) {
                    if (!PeakJjcModel.Ins.isTimeOpen) {
                        if (msg) {
                            if (!isTips) {
                                let date = this.peakOpenDesc;
                                E.ViewMgr.ShowMidError(date);
                                isTips = true;
                            }
                        }
                        return false;
                    }
                }
                let isOpen = true;
                if (funcid == EFuncDef.Expedition && !MainModel.Ins.isConquestOpen) {
                    isOpen = false;
                }
                else if (funcid == EFuncDef.FightHard && !FightMonsterModel.Ins.data) {
                    isOpen = false;
                }
                else if (funcid == EFuncDef.WuShenDian && !WuShenDianModule.ins.isOpen) {
                    isOpen = false;
                }
                if (!isOpen) {
                    if (msg) {
                        if (!isTips) {
                            E.ViewMgr.ShowMidError(E.getLang("FuncNotOpen"));
                        }
                    }
                    return false;
                }
                return res;
            }
            return false;
        }
    }
    TaskModel.TaskChanged = 'TaskChanged';

    exports.TaskModel = TaskModel;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class HuanZhuangEvent {
	}
	HuanZhuangEvent.UpdateStyle = "UpdateStyle";
	HuanZhuangEvent.UnLockListUpdate = "UnLockListUpdate";
	HuanZhuangEvent.SuitUpdate = "SuitUpdate";

	exports.HuanZhuangEvent = HuanZhuangEvent;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class HuanZhuangVo {
        constructor() {
            this.selected = false;
        }
        getIcon() {
            if (this.iconURL) {
                return this.iconURL;
            }
            if (this.equipType == EEquipType.ZuoQi) {
                return IconUtils.getHorseIcon(this.equipStyle);
            }
            return ItemViewFactory.getEquipIcon(this.equipType, this.equipStyle);
        }
        defaultStyle() {
            let cell = MainModel.Ins.getWearable(this.equipType);
            if (cell && cell.equipVo) {
                return cell.equipVo.equipStyle;
            }
            if (this.equipType == EEquipType.Wing) {
                let windId = MainModel.Ins.wingId;
                return windId;
            }
            else if (this.equipType == EEquipType.ZuoQi) {
                let rideId = ZuoQiModel.Ins.rideVo.mainid;
                return rideId;
            }
            return 0;
        }
    }

    exports.HuanZhuangVo = HuanZhuangVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HuanZhuangModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.dataList = [];
            this.suitList = [];
            this.styleList = [];
            this.unlockList = [];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new HuanZhuangModel();
            }
            return this._ins;
        }
        initMsg() {
            E.MsgMgr.AddMsg(MSGID.ReloadEquipRevc, this.onReloadEquipRevc, this);
            E.MsgMgr.AddMsg(MSGID.SuitEquipListRevc, this.onSuitEquipListRevc, this);
            E.MsgMgr.AddMsg(MSGID.StyleUpdate, this.onStyleUpdate, this);
            E.MsgMgr.AddMsg(MSGID.ReloadEquipUpdate, this.onReloadEquipUpdate, this);
            RedUpdateModel.Ins.on(RedUpdateModel.UPDATA, this, this.refreshRed);
        }
        set redDot(v) {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.SwitchStyle)) {
                MainModel.Ins.funcSetRed(EFuncDef.SwitchStyle, v);
            }
        }
        onReloadEquipUpdate(revc) {
            let result = revc.datalist;
            for (let i = 0; i < result.length; i++) {
                let cell = result[i];
                let _findCell = this.dataList.find(item => item.type == cell.type);
                if (_findCell) {
                    for (let n = 0; n < cell.dataList.length; n++) {
                        let val = cell.dataList[n];
                        _findCell.dataList.push(val);
                        let isOpen = true;
                        if (cell.type == EEquipType.ZuoQi && !TaskModel.Ins.isFuncOpen(EFuncDef.Ride)) {
                            isOpen = false;
                        }
                        else if (cell.type == EEquipType.Wing && !TaskModel.Ins.isFuncOpen(EFuncDef.Wing)) {
                            isOpen = false;
                        }
                        if (isOpen) {
                            RedUpdateModel.Ins.saveEquipRed(cell.type, val);
                        }
                    }
                }
            }
            this.refreshData();
            if (MainModel.Ins.isInitAlready) {
                let l = t_Custom_CostumesProxy.Ins.List;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    let val = RedUpdateModel.Ins.getValByID(RedEnum.SUIT_ID + cfg.f_Costumesid);
                    if (val == 0 && this.isCanActive(cfg)) {
                        E.ViewMgr.Open(EViewType.UnlockEquip, null, cfg.f_Costumesid);
                        break;
                    }
                }
            }
        }
        onInitCallBack() {
            this.dataList = [];
            this.styleList = [];
            this.suitList = [];
        }
        onSuitEquipListRevc(revc) {
            this.suitList = revc.datalist;
            this.refreshRed();
            this.event(HuanZhuangEvent.SuitUpdate);
        }
        mergeList(l1, l2) {
            for (let i = 0; i < l2.length; i++) {
                let val = l2[i];
                if (l1.indexOf(val) == -1) {
                    l1.push(val);
                }
            }
        }
        refreshData() {
            let l = [];
            for (let i = 0; i < this.dataList.length; i++) {
                let vo = this.dataList[i];
                for (let n = 0; n < vo.dataList.length; n++) {
                    let val = vo.dataList[n];
                    let cell = new HuanZhuangVo();
                    cell.serverIndex = n;
                    cell.equipStyle = val;
                    cell.equipType = vo.type;
                    l.push(cell);
                }
            }
            this.unlockList = l;
            this.event(HuanZhuangEvent.UnLockListUpdate);
            this.refreshRed();
        }
        refreshRed() {
            let isRed = this.hasSuitCanActive();
            this.redDot = isRed;
        }
        updateRed() {
            this.refreshRed();
        }
        onReloadEquipRevc(revc) {
            let l1 = revc.datalist;
            for (let i = 0; i < l1.length; i++) {
                let cell = l1[i];
                let vo = this.dataList.find(item => item.type == cell.type);
                if (vo) {
                    this.mergeList(vo.dataList, cell.dataList);
                }
                else {
                    this.dataList.push(cell);
                }
            }
            this.refreshData();
        }
        isFirstPos(equipType, equipVal) {
            let l = this.dataList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.type == equipType) {
                    let index = cell.dataList.indexOf(equipVal);
                    return index == 0;
                }
            }
        }
        getMaxNum(equipType) {
            if (equipType == EEquipType.Wing) {
                return G.gameData.maxWing;
            }
            else if (equipType == EEquipType.ZuoQi) {
                if (Laya.Utils.getQueryString("maxride"))
                    return Laya.Utils.getQueryString("maxride");
                return G.gameData.maxRide;
            }
            return G.gameData.maxEquipStyle;
        }
        hasStyleZero(l, equipType) {
            return l.find(cell => cell.equipType == equipType && cell.equipStyle == 0) != undefined;
        }
        sortHander(a, b) {
            if (a.serverIndex < b.serverIndex) {
                return -1;
            }
            else if (a.serverIndex > b.serverIndex) {
                return 1;
            }
            return 0;
        }
        sortByLocked(a, b) {
            if (a.locked < b.locked) {
                return -1;
            }
            else if (a.locked > b.locked) {
                return 1;
            }
            return 0;
        }
        getVoList(equipType) {
            let _maxCnt = this.getMaxNum(equipType);
            let rl = [];
            for (let i = 0; i < _maxCnt; i++) {
                let equipStyle = i + 1;
                let o = this.haveEquipStyle(equipType, equipStyle);
                let vo = new HuanZhuangVo();
                vo.equipStyle = equipStyle;
                vo.equipType = equipType;
                if (o) {
                    vo.locked = 0;
                }
                else {
                    vo.locked = 1;
                }
                rl.push(vo);
            }
            rl = rl.sort(this.sortByLocked);
            let vo = new HuanZhuangVo();
            vo.iconURL = `remote/huanzhuang/wu.png`;
            vo.equipStyle = 0;
            vo.equipType = equipType;
            let res = [];
            res.push(vo);
            res = res.concat(rl);
            return res;
        }
        getFirstEquipStyle(type) {
            let o = this.dataList.find(cell => cell.type == type);
            if (o) {
                return o.dataList[0];
            }
            return 0;
        }
        isCanActive(cfg) {
            if (this.isSuitUnLock(cfg.f_Costumesid)) ;
            else {
                let typeList = [EEquipType.Casque, EEquipType.Barde, EEquipType.Weapon, EEquipType.Shield, EEquipType.ZuoQi, EEquipType.Wing];
                for (let i = 0; i < typeList.length; i++) {
                    let type = typeList[i];
                    let val = cfg["f_" + type];
                    if (val) {
                        let findItem = this.unlockList.find(item => item.equipType == type && item.equipStyle == val);
                        if (!findItem) {
                            return false;
                        }
                    }
                }
                return true;
            }
        }
        haveEquipStyle(type, equipStyle) {
            let o = this.dataList.find(cell => cell.type == type);
            if (o) {
                let k1 = o.dataList.find(o1 => o1 == equipStyle);
                return k1 != undefined;
            }
        }
        getEquipStyle(type) {
            for (let i = 0; i < this.styleList.length; i++) {
                let skin = this.styleList[i];
                if (skin.id == type) {
                    return skin.style;
                }
            }
            return 0;
        }
        isSuitUnLock(id) {
            return this.suitList.indexOf(id) != -1;
        }
        updateStyleList(l) {
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let a = this.styleList.find(st => st.id == cell.id);
                if (a) {
                    a.style = cell.style;
                }
                else {
                    this.styleList.push(cell);
                }
            }
        }
        onStyleUpdate(revc) {
            this.updateStyleList(revc.datalist);
            this.event(HuanZhuangEvent.UpdateStyle);
        }
        get suitAttrShow() {
            let l = HuanZhuangModel.Ins.suitList;
            let str = "";
            for (let i = 0; i < l.length; i++) {
                let id = l[i];
                if (id) {
                    let cfg = t_Custom_CostumesProxy.Ins.GetDataById(id);
                    str += cfg.f_SuitID + "|";
                }
            }
            if (str.length > 0) {
                str = str.substr(0, str.length - 1);
            }
            let arr = PlayerVoFactory.mergeAttr(str);
            return arr;
        }
        isCellCanActive(l) {
            for (let i = 0; i < l.length; i++) {
                if (this.isCanActive(l[i])) {
                    return true;
                }
            }
            return false;
        }
        hasSuitCanActive() {
            let qualist = t_Custom_CostumesProxy.Ins.qua;
            for (let i = 0; i < qualist.length; i++) {
                let data = qualist[i];
                let l = t_Custom_CostumesProxy.Ins.mapList[data];
                if (this.isCellCanActive(l)) {
                    return true;
                }
            }
            return false;
        }
    }

    exports.HuanZhuangModel = HuanZhuangModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ItemViewFactory {
        static createSoltItem(cls, key) {
            let cell = Laya.Pool.getItemByClass(key, cls);
            return cell;
        }
        static parseItem(str) {
            let l = [];
            let a = str.split("|");
            for (let i = 0; i < a.length; i++) {
                let arr = a[i].split("-");
                let item = {};
                item.id = parseInt(arr[0]);
                item.count = parseInt(arr[1]);
                l.push(item);
            }
            if (l.length > 1) {
                return l;
            }
            else if (l.length == 1) {
                return l[0];
            }
            return [];
        }
        static CenterLayout(container, cellW, gap, row) {
            let allw;
            allw = container.numChildren * (cellW + gap) - gap;
            let offset = allw / 2;
            if (row == -1) {
                row = Number.MAX_VALUE;
                offset = allw / 2;
            }
            else {
                offset = (row * (cellW + gap)) / 2 - gap;
            }
            let _resetIndex = 0;
            let oy = 0;
            for (let i = 0; i < container.numChildren; i++) {
                let cell = container.getChildAt(i);
                cell.x = _resetIndex * (cellW + gap) - offset;
                cell.y = oy;
                _resetIndex++;
                if (_resetIndex >= row) {
                    _resetIndex = 0;
                    oy += (cellW + gap);
                }
            }
        }
        static LeftLayout(container, cellW, gap, row) {
            let offset = 0;
            if (row == -1) {
                row = Number.MAX_VALUE;
            }
            let _resetIndex = 0;
            let oy = 0;
            for (let i = 0; i < container.numChildren; i++) {
                let cell = container.getChildAt(i);
                cell.x = _resetIndex * (cellW + gap) - offset;
                cell.y = oy;
                _resetIndex++;
                if (_resetIndex >= row) {
                    _resetIndex = 0;
                    oy += (cellW + gap);
                }
            }
        }
        static RightLayout(container, cellW, gap) {
            let allw = container.numChildren * (cellW + gap) - gap;
            let offset = -allw;
            for (let i = 0; i < container.numChildren; i++) {
                let cell = container.getChildAt(i);
                cell.x = i * (cellW + gap) + offset;
            }
        }
        static clear(container, sign) {
            while (container.numChildren) {
                let cell = container.getChildAt(0);
                Laya.Pool.recover(sign, cell);
                cell.removeSelf();
            }
        }
        static clearSolt(container, key) {
            this.clear(container, key);
        }
        static attrSortHandler(a, b) {
            if (a.id < b.id) {
                return -1;
            }
            else if (a.id > b.id) {
                return 1;
            }
            return 0;
        }
        static convertItemList(str) {
            let arr = str.split("|");
            let _l = [];
            if (str != "") {
                for (let i = 0; i < arr.length; i++) {
                    let cell = arr[i].split("-");
                    let _itemVo = new ItemVo();
                    _itemVo.cfgId = parseInt(cell[0]);
                    _itemVo.count = parseInt(cell[1]);
                    _l.push(_itemVo);
                }
            }
            return _l;
        }
        static convertItem(str) {
            return this.convertItemList(str)[0];
        }
        static convertCellList(str) {
            let arr = str.split("|");
            let _l = [];
            if (str != "") {
                for (let i = 0; i < arr.length; i++) {
                    let cell = arr[i].split("-");
                    let _itemVo = new stCellValue();
                    _itemVo.id = parseInt(cell[0]);
                    _itemVo.count = parseInt(cell[1]);
                    _l.push(_itemVo);
                }
            }
            return _l;
        }
        static renderItemSlots(con, str, gap = 10, scale = 1, align = "center", cls = SoltItemView, key = "SoltItemView", row = -1) {
            this.clearSolt(con, key);
            let itemList = [];
            if (typeof str == "string") {
                itemList = this.convertItemList(str);
            }
            else {
                for (let i = 0; i < str.length; i++) {
                    let v = str[i];
                    if (v instanceof stCellValue ||
                        str[i].hasOwnProperty('id') && str[i].hasOwnProperty('count')) {
                        let cell = new ItemVo();
                        cell.cfgId = v.id;
                        cell.count = v.count;
                        itemList.push(cell);
                    }
                    else {
                        itemList.push(v);
                    }
                }
            }
            let width = 0;
            for (let i = 0; i < itemList.length; i++) {
                let item = this.createSoltItem(cls, key);
                let skin = item;
                skin.scaleX = skin.scaleY = scale;
                item.setData(itemList[i]);
                con.addChild(skin);
                width = skin.width;
            }
            align = align || "left";
            let w = width;
            if (align == "center") {
                this.CenterLayout(con, w * scale, gap, row);
            }
            else if (align == "left") {
                this.LeftLayout(con, w * scale, gap, row);
            }
            else if (align == "right") {
                this.RightLayout(con, w * scale, gap);
            }
        }
        static rebuildAttr(l) {
            l = l.sort(this.attrSortHandler);
            let r = [];
            for (let i = 0; i < 8; i++) {
                r.push("empty");
            }
            let baseAttr = [EAttrType.Speed, EAttrType.Life, EAttrType.Attack, EAttrType.Defense];
            let n = 0;
            let m = 1;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (baseAttr.indexOf(cell.id) != -1) {
                    r[n] = cell;
                    n += 2;
                }
                else {
                    r[m] = cell;
                    m += 2;
                }
            }
            while (typeof r[r.length] == "string") {
                r.pop();
            }
            return r;
        }
        static getIcon(vo) {
            if (vo) {
                return this.getEquipIcon(vo.type, vo.equipStyle);
            }
            return "";
        }
        static getEquipIcon(type, equipStyle) {
            let str = `${type}_${equipStyle}`;
            let s = `o/item/${str}.png`;
            return s;
        }
        static getWingIcon(wingId) {
            if (wingId) {
                let str = `${EEquipType.Wing}_${wingId}`;
                let s2 = `o/item/${str}.png`;
                return s2;
            }
            return "";
        }
        static getHuanZhuangSkin(vo) {
            if (!vo) {
                return "";
            }
            let _style = HuanZhuangModel.Ins.getEquipStyle(vo.equipVo.type);
            if (_style) {
                return ItemViewFactory.getEquipIcon(vo.equipVo.type, _style);
            }
            else {
                return vo.getIcon();
            }
        }
        static getResourceIcon(resourceId) {
            if (resourceId) {
                let s2 = `o/icon/${resourceId}.png`;
                return s2;
            }
            return "";
        }
        static mergeItems(l) {
            let _itemsMap = {};
            for (let i = 0; i < l.length; i++) {
                let s = l[i];
                let itemVos = this.convertItemList(s);
                for (let n = 0; n < itemVos.length; n++) {
                    let cell = itemVos[n];
                    if (!_itemsMap[cell.cfgId]) {
                        _itemsMap[cell.cfgId] = 0;
                    }
                    _itemsMap[cell.cfgId] += cell.count;
                }
            }
            let str = "";
            for (let cfgid in _itemsMap) {
                str += `${cfgid}-${_itemsMap[cfgid]}|`;
            }
            if (str.length > 0) {
                str = str.substr(0, str.length - 1);
            }
            return str;
        }
        static refreshSlot(slot, itemVo, mouseEnable = true) {
            slot.icon.skin = IconUtils.getIconByCfgId(itemVo.cfgId);
            slot.tf1.text = itemVo.count.toString();
            slot.quality.skin = IconUtils.getQuaIcon(itemVo.cfg.f_qua);
            if (mouseEnable) {
                slot.on(Laya.Event.CLICK, this, this.onSlotClickHandler, [slot, itemVo]);
            }
            else {
                slot.off(Laya.Event.CLICK, this, this.onSlotClickHandler);
            }
        }
        static refreshSlot1(slot, skin, name, dec, mouseEnable = true) {
            slot.icon.skin = skin;
            slot.tf1.text = "";
            slot.quality.skin = "";
            if (mouseEnable) {
                slot.on(Laya.Event.CLICK, this, this.onSlotClickHandler1, [slot, name, dec]);
            }
            else {
                slot.off(Laya.Event.CLICK, this, this.onSlotClickHandler1);
            }
        }
        static onSlotClickHandler1(slot, name, dec, e) {
            e.stopPropagation();
            MainModel.Ins.showSmallTips(name, dec, slot);
        }
        static LayoutLabels(con) {
            let w = 0;
            for (let i = 0; i < con.numChildren; i++) {
                let label = con.getChildAt(i);
                label.x = w;
                w += label.textField.textWidth;
            }
        }
        static onSlotClickHandler(slot, _vo, e) {
            e.stopPropagation();
            MainModel.Ins.showSmallTips(_vo.getName(), _vo.getDesc(), slot);
        }
        static gapAndClear(con) {
            let _ls = [];
            for (let i = 0; i < con.numChildren; i++) {
                let spr = con.getChildAt(i);
                _ls.push(spr);
            }
            let _gap = 0;
            if (_ls.length >= 2) {
                _gap = Math.abs(_ls[_ls.length - 1].x - _ls[_ls.length - 2].x) - _ls[_ls.length - 1].width;
            }
            while (con.numChildren > 0) {
                con.getChildAt(0).removeSelf();
            }
            return _gap;
        }
        static createRideVo(cell) {
            let vo = new ZuoqiVo();
            vo.equipVo = cell.equipItem;
            vo.washList = cell.refinements;
            vo.washCanLock = cell.canLock;
            vo.curVo = ZuoQiModel.Ins.getRideVo(cell.mountId);
            return vo;
        }
        static updateRideStar(img, ownTf, needTf, str) {
            let itemVo = ItemViewFactory.convertItem(str);
            img.skin = itemVo.getIcon();
            let have = MainModel.Ins.mRoleData.getVal(itemVo.cfgId);
            ownTf.text = StringUtil.val2m(have).toString();
            if (have >= itemVo.count) {
                ownTf.color = "#A55E1B";
            }
            else {
                ownTf.color = "#ff0000";
            }
            needTf.color = "#A55E1B";
            needTf.text = "/" + itemVo.count.toString();
            needTf.x = ownTf.x + ownTf.textField.width;
        }
        static setJJC_score(skin, data, type) {
            let _rankVal = data.rank;
            skin.jifen.visible = false;
            if (type == EJjcType.JJC && MainModel.Ins.serverVer == EServerVersion.Version_1) {
                skin.mingcitf.text = "";
                skin.rankImg.visible = false;
                skin.jifen.visible = true;
                skin.jifenTf.text = data.score + "";
            }
        }
        static setStar(con, curStar, maxStar, isCenX = true, se = 1) {
            let normal1 = [`remote/common/base/star.png`, `remote/common/base/star_1.png`];
            let high1 = [`remote/common/base/star_2.png`, `remote/common/base/star_3.png`];
            let curArr = [];
            const MaxVal = 6;
            if (maxStar > MaxVal) {
                if (curStar > MaxVal) {
                    curArr = high1;
                    maxStar -= MaxVal;
                    curStar -= MaxVal;
                }
                else {
                    curArr = normal1;
                    maxStar = MaxVal;
                }
            }
            else {
                curArr = normal1;
            }
            let l = [];
            for (let i = 0; i < con.numChildren; i++) {
                l.push(con.getChildAt(i));
            }
            let item = l[0];
            let cellWidth = item.width;
            for (let i = 0; i < l.length; i++) {
                let _star = l[i];
                if (i < maxStar) {
                    if (i < curStar) {
                        _star.skin = curArr[0];
                    }
                    else {
                        _star.skin = curArr[1];
                    }
                    _star.visible = true;
                }
                else {
                    _star.visible = false;
                }
                _star.x = i * _star.width;
            }
            if (isCenX) {
                if (se == 1) {
                    con.x = (con.parent.width - maxStar * cellWidth) / 2;
                }
                else {
                    con.x = con.parent.width / 2 - maxStar * cellWidth / 2 * se;
                }
            }
        }
    }

    exports.ItemViewFactory = ItemViewFactory;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class IconUtils {
        static getHorseIcon(id) {
            return `o/horse/${id}.png`;
        }
        static getQuaIcon(qua) {
            qua = qua || 0;
            if (qua == 0) {
                return this.DefaultEmpty;
            }
            return `remote/main/main/zhuangbeikuang_${qua}.png`;
        }
        static getIcon(icon) {
            if (typeof icon == "string") {
                if (icon.indexOf("|") != -1) {
                    let arr = icon.split("|");
                    return `o/icon/${arr[main.skinStyle - 1]}.png`;
                }
            }
            return `o/icon/${icon}.png`;
        }
        static getNameByID(itemID) {
            let _cfg = ItemProxy.Ins.getCfg(itemID);
            if (_cfg) {
                return main.itemName(_cfg.f_name);
            }
            return "";
        }
        static convert(_cfg) {
            if (_cfg.f_sub_type == ESub_type.EquipSwitch) {
                let arr = _cfg.f_p1.split("|");
                return ItemViewFactory.getEquipIcon(parseInt(arr[0]), parseInt(arr[1]));
            }
            else if (_cfg.f_sub_type == ESub_type.Pet) {
                let petcfg = PetListProxy.Ins.getCfgById(parseInt(_cfg.f_p1));
                return PetListProxy.Ins.getPetIconById(petcfg.f_petid);
            }
        }
        static getIconByCfgId(_itemId) {
            let _cfg = ItemProxy.Ins.getCfg(_itemId);
            if (_cfg) {
                let icon = _cfg.f_icon;
                let icon1 = this.convert(_cfg);
                if (icon1) {
                    return icon1;
                }
                else if (icon == "") {
                    icon = _itemId.toString();
                }
                return this.getIcon(icon);
            }
            return "";
        }
        static str2Lv(lv) {
            return "Lv." + lv;
        }
    }
    IconUtils.Empty = "empty";
    IconUtils.effect = `o/spine/effect2/effect2`;
    IconUtils.plusAtlasPrefix = `remote/main/main/z`;
    IconUtils.dldAtlasPrefix = `remote/daluandou/ls_`;
    IconUtils.afAtlasPrefix = `remote/allianceFight/a`;
    IconUtils.DefaultEmpty = "remote/main/main/zhuangbeikuang_1.png";
    IconUtils.Bg = `remote/common/base/shuxingkuang.png`;
    IconUtils.numAtlasPrefix = `remote/num/k_`;
    IconUtils.fulleffect = `o/spine/boxstage/boxstage`;
    IconUtils.defaultIcon = "remote/common/base/jiangli1.png";

    exports.IconUtils = IconUtils;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AvatarSubView extends AvatarView {
        constructor() {
            super();
            this.skinList = ["daoguang", "xinxin", "ying"];
            this.addtionSkinList = [];
            this.allEquip = [
                EEquipType.Barde,
                EEquipType.Shoe,
                EEquipType.Casque,
                EEquipType.Weapon,
                EEquipType.Shield
            ];
        }
        initFightSkin() {
            let skinlist = [];
            skinlist = skinlist.concat(this.skinList);
            skinlist = skinlist.concat(this.addtionSkinList);
            for (let i = 0; i < skinlist.length; i++) {
                let part = skinlist[i];
                this.setPartSkin(part);
            }
        }
        dispose() {
            super.dispose();
        }
        setPartSkin(_part) {
            this.setSkin(this.main, this.baseImg, _part);
        }
        getOtherStyle(type, equipStyle) {
            return equipStyle;
        }
        refreshSkin() {
            if (this.useFightSkin) {
                this.initFightSkin();
            }
            let l = this.equipList || [];
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let _st = cell.equipVo;
                if (_st.wearable == EWearableType.Wearable) {
                    let equipStyle = _st.equipStyle;
                    let type = _st.type;
                    equipStyle = this.getOtherStyle(type, equipStyle);
                    this.equipSkin(type, equipStyle);
                }
            }
            this.defaultSkin();
        }
        setWing() {
            let wingId = this.wingId;
            this.coreSpine.setWingSkin(wingId);
        }
        defaultSkin() {
            this.setWing();
            this.refreshHorse();
            this.setEmpty();
        }
        refreshHorse() {
            if (!this.hasHorse()) {
                return;
            }
            this.baseImg = `o/horse_spine/horse_${this.rideId}.png`;
            this.coreSpine.setHorseSkin(this.rideId);
        }
        setSkin(fileList, sourceUrl, part) {
        }
        updateRide(id) {
            this.rideId = id;
            this.reload();
        }
        reload() {
            this.disposeCoreSpine();
            this.coreSpine = new SpineCoreSkel();
            this.initRes();
            this.loadSkel();
            this.refreshSkin();
        }
        updateWing(id) {
            this.wingId = id;
            this.refreshSkin();
        }
        updateSkin(type, equipStyle) {
            if (type == EEquipType.Wing) {
                this.updateWing(equipStyle);
            }
            else if (type == EEquipType.ZuoQi) {
                this.updateRide(equipStyle);
            }
            else {
                this.equipSkin(type, equipStyle);
            }
        }
        setEmpty() {
            for (let i = 0; i < this.allEquip.length; i++) {
                let type = this.allEquip[i];
                this.equipEmptySkin(type);
            }
        }
        equipEmptySkin(type) {
            switch (type) {
                case EEquipType.Barde:
                case EEquipType.Shoe:
                case EEquipType.Casque:
                case EEquipType.Weapon:
                case EEquipType.Shield:
                    let _part1 = this.fashion.getPartEquipKey(type);
                    this.setSkin(this.fashion.main, ResPath.Avatar.baseImg, _part1);
                    break;
            }
        }
        equipSkin(type, equipStyle) {
            if (this.imageID) {
                return;
            }
            if (type != EEquipType.Wing) {
                this.coreSpine.setSlot(type, equipStyle);
            }
        }
        set currentTime(v) {
            this.coreSpine.currentTime = v;
        }
    }

    exports.AvatarSubView = AvatarSubView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AvatarBaseView extends AvatarSubView {
        constructor() {
            super();
        }
    }
    class AvatarMainSkinView extends AvatarSubView {
        constructor() {
            super();
        }
        getOtherStyle(type, equipStyle) {
            return MainModel.Ins.getIdByStyle(type);
        }
    }
    class AavatrWingView extends AvatarBaseView {
        constructor() {
            super();
        }
        initWing(wingId) {
            this.rideId = 0;
            this.wingId = wingId;
            this.equipList = null;
            this.dir = EAvatarDir.Left;
            this.initRes();
            this.play(EAvatarAnim.OnlyWing);
            this.start();
            this.refreshSkin();
        }
        refreshSkin() {
            this.setWing();
        }
    }

    exports.AavatrWingView = AavatrWingView;
    exports.AvatarBaseView = AvatarBaseView;
    exports.AvatarMainSkinView = AvatarMainSkinView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AvatarMainView extends AvatarMainSkinView {
        constructor(showHorse = true) {
            super();
            this._showHorse = showHorse;
            this._zqModel = ZuoQiModel.Ins;
            this.model = MainModel.Ins;
            this.equipList = this.model.getEquipList();
            if (showHorse) {
                this.rideId = this._zqModel.rideVo.rideId;
            }
            this.wingId = this.model.wingId;
            this.initRes();
        }
        onEquipChange() {
            this.refreshSkin();
        }
        start() {
            super.start();
            if (this._showHorse) {
                this._zqModel.on(ZuoQiEvent.RideOwnerInfoUpdate, this, this.onRideOwnerInfoUpdate);
            }
            this.model.on(MainEvent.EquipChange, this, this.onEquipChange);
            this.model.on(MainEvent.UpdateWingId, this, this.onWingUpdate);
            HuanZhuangModel.Ins.on(HuanZhuangEvent.UpdateStyle, this, this.onUpdateStyle);
            this.onHuanZhuanEvt();
        }
        onUpdateStyle() {
            this.onHuanZhuanEvt();
        }
        onHuanZhuanEvt() {
            this.onEquipChange();
            if (this._showHorse) {
                this.onRideOwnerInfoUpdate();
            }
            this.onWingUpdate();
        }
        onRideOwnerInfoUpdate() {
            this.updateRide(this._zqModel.rideVo.mainid);
        }
        removeAllLis() {
            if (this._showHorse) {
                this._zqModel.off(ZuoQiEvent.RideOwnerInfoUpdate, this, this.onRideOwnerInfoUpdate);
            }
            this.model.off(MainEvent.EquipChange, this, this.onEquipChange);
            this.model.off(MainEvent.UpdateWingId, this, this.onWingUpdate);
            HuanZhuangModel.Ins.off(HuanZhuangEvent.UpdateStyle, this, this.onUpdateStyle);
        }
        onWingUpdate() {
            this.updateWing(this.model.wingId);
        }
    }

    exports.AvatarMainView = AvatarMainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AvatarFightVo {
    }
    class AvatarMonsterView extends AvatarSubView {
        constructor(fight = true) {
            super();
            this.useFightSkin = fight;
        }
        get fightVo() {
            return this.vo;
        }
        set fightVo(v) {
            this.vo = v;
        }
        refreshSkin() {
            this.initFightSkin();
            let _l = AvatarFactory.Skin2Equip(this.curSkin);
            for (let i = 0; i < _l.length; i++) {
                let cell = _l[i];
                if (cell.equipStyle != 0) {
                    this.equipSkin(cell.type, cell.equipStyle);
                }
            }
            this.defaultSkin();
        }
        set mSkin(v) {
            this.rideId = v.f_MountID;
            this.curSkin = v;
            this.refreshSkin();
        }
        isSkinEqual(temp) {
            if (this.curSkin && temp) {
                let skinVo = this.curSkin;
                if (skinVo.f_BodyID == temp.f_BodyID &&
                    skinVo.f_HeadID == temp.f_HeadID &&
                    skinVo.f_MountID == temp.f_MountID &&
                    skinVo.f_ShieldID == temp.f_ShieldID &&
                    skinVo.f_WeaponID == temp.f_WeaponID &&
                    skinVo.f_WingID == temp.f_WingID) {
                    return true;
                }
            }
        }
    }

    exports.AvatarFightVo = AvatarFightVo;
    exports.AvatarMonsterView = AvatarMonsterView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AnimShowCtl {
        constructor() {
            this.animList = [EAvatarAnim.HandBookShow1, EAvatarAnim.HandBookShow2];
            this.animIndex = 0;
        }
        bind(con) {
            this._avatar = con;
            this.createHit();
            this._avatar.pushCtl(this);
        }
        dispose() {
            if (this._hitSpr) {
                this._hitSpr.off(Laya.Event.CLICK, this, this.onClick);
                this._hitSpr.destroy();
                this._hitSpr = null;
            }
        }
        createHit() {
            this._hitSpr = new Laya.Sprite();
            let size = 100;
            if (E.Debug) {
                this._hitSpr.graphics.drawRect(-size, -size, size * 2, size * 2, null, "#ff0000", 1);
            }
            this._hitSpr.hitArea = new Laya.Rectangle(-size, -size, size * 2, size * 2);
            this._hitSpr.on(Laya.Event.CLICK, this, this.onClick);
            this._avatar.addChild(this._hitSpr);
        }
        onClick() {
            if (this._avatar.curAnim == EAvatarAnim.HandBookStand) {
                if (this.animIndex >= this.animList.length) {
                    this.animIndex = 0;
                }
                this._avatar.play(this.animList[this.animIndex], this, this.end);
                this.animIndex++;
            }
            else {
                console.log("no action!");
            }
        }
        end() {
            this._avatar.play(EAvatarAnim.HandBookStand);
        }
    }

    exports.AnimShowCtl = AnimShowCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PureEffect extends BaseSpineCoreSkel {
        constructor() {
            super(...arguments);
            this.anim = EAvatarAnim.Invalid;
            this.ox = 0;
            this.oy = 0;
        }
        get baseSkel() {
            return this.skeleton;
        }
        setPos(parent, ox = 0, oy = 0) {
            this.parent = parent;
            this.ox = ox;
            this.oy = oy;
            if (this.baseSkel) {
                this.baseSkel.removeSelf();
                this.parent.addChild(this.baseSkel);
                this.baseSkel.pos(this.ox, this.oy);
            }
        }
        dispose() {
            super.dispose();
        }
        get isLoaded() {
            return this.baseSkel;
        }
        onLoadFinish(cache) {
            super.onLoadFinish(cache);
            if (this.baseSkel) {
                this.baseSkel.on(Laya.Event.DISPLAY, this, this.onDisplay);
                this.baseSkel.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
            }
            if (this.parent) {
                this.setPos(this.parent, this.ox, this.oy);
            }
        }
        free() {
            this.parent = null;
            if (this.baseSkel) {
                this.baseSkel.off(Laya.Event.DISPLAY, this, this.onDisplay);
                this.baseSkel.off(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
            }
        }
        onUnDisplay() {
            Laya.timer.clear(this, this.onLoopHandler);
        }
        onDisplay() {
            Laya.timer.frameLoop(1, this, this.onLoopHandler);
        }
        onLoopHandler() {
        }
        play2(index, loop = false, force = false, that = null, endCall = null, arg = null) {
            this.play(index, that, endCall, arg, true, force, loop);
        }
    }

    exports.PureEffect = PureEffect;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpineAnimResultVo {
    }
    class SpineAnimUtils {
        static getPrefix(index) {
            let s = "s";
            switch (index) {
                case 4:
                    s = "s";
                    break;
                case 5:
                    s = "b";
                    break;
                case 6:
                case 7:
                    s = "x";
                    break;
            }
            return s;
        }
        static createFight(atlas, index, val, algin = "left") {
            let max = 9;
            let half = 0;
            if (algin == "left") {
                half = 0;
            }
            else if (algin == "center") {
                half = Math.ceil((max - val.length) / 2);
            }
            let prefix = this.getPrefix(index);
            let a = "";
            if (val.length > 0) {
                a = val[0];
            }
            else {
                return [];
            }
            let slotArr = a + "12345678";
            let list1 = [];
            for (let i = 0; i < half; i++) {
                let uv = atlas.getUV(this.blank);
                let _cell = new SpineAnimResultVo();
                _cell.slot = prefix + slotArr[i];
                _cell.val = this.blank;
                _cell.uv = uv;
                list1.push(_cell);
            }
            for (let i = half; i < max; i++) {
                let slotName = val[i - half];
                let _slot = "";
                _slot = prefix + slotArr[i];
                let uv;
                let _cell = new SpineAnimResultVo();
                if (slotName) {
                    uv = atlas.getUV(prefix + slotName);
                    _cell.val = prefix + slotName;
                }
                else {
                    uv = atlas.getUV(this.blank);
                    _cell.val = this.blank;
                }
                _cell.uv = uv;
                _cell.slot = _slot;
                list1.push(_cell);
            }
            return list1;
        }
        static sell(atlas, _data, pre = "h", numMax = 3, atlasPre) {
            let list1 = [];
            let hSlot = [];
            hSlot.push(pre + "+");
            let max = numMax + 1;
            for (let i = 0; i < max; i++) {
                hSlot.push(pre + (i + 1));
            }
            for (let i = 0; i < max; i++) {
                let _cell = new SpineAnimResultVo();
                _cell.slot = hSlot[i];
                let curVal = _data[i];
                list1.push(_cell);
                if (curVal != undefined) {
                    _cell.uv = atlas.getUV(atlasPre ? atlasPre + curVal : pre + curVal);
                }
                else {
                    _cell.uv = atlas.getUV("blank");
                }
            }
            return list1;
        }
    }
    SpineAnimUtils.blank = "blank";

    exports.SpineAnimResultVo = SpineAnimResultVo;
    exports.SpineAnimUtils = SpineAnimUtils;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FightPureAnim extends PureEffect {
        constructor(url = null, parent = null) {
            super();
            this.poolCache = false;
            this._valList = [];
            this.parent = parent;
            if (url) {
                this.load(url);
            }
        }
        onLoadFinish(cache) {
            super.onLoadFinish(cache);
            this.setText(this.anim, this._curText);
        }
        get urlKey() {
            return this.url.replace(".skel", ".png");
        }
        refresh(val) {
            for (let i = 0; i < val.length; i++) {
                let cell = val[i];
                let status = SpineUtil.f_setSlotUV(this.baseSkel, this.urlKey, cell.slot, cell.uv);
                if (status) {
                    val.splice(i, 1);
                    i--;
                }
            }
        }
        onLoopHandler() {
            if (this.baseSkel && this.baseSkel.playState == Laya.SpineSkeleton.playing) {
                this.refresh(this._valList);
            }
        }
        setText(animIndex, val) {
            val = val || [];
            if (this.isLoaded) {
                this._valList = val;
                this.refresh(val);
            }
            else {
                this._curText = val;
            }
            this.play2(animIndex, false, true, this, this.onAnimComplete);
        }
        onAnimComplete() {
            if (this.poolCache) {
                Laya.Pool.recover("FightPureAnim", this);
                AvatarFactory.effLength--;
            }
            if (this.autoFree) {
                this.dispose();
            }
            this.event(BaseSpineCoreSkel.PLAY_END);
        }
        poolPlay(anim, val = "") {
            if (val.length > 0) {
                let result = SpineAnimUtils.createFight(SpineUtil.fightEffectAtlas, anim, val);
                this.setText(anim, result);
            }
            else {
                this.play2(anim, null, null, this, this.onAnimComplete);
            }
        }
        playNormalBlood(v) {
            this.poolPlay(EAvatarEffectAnim.NormalBloodTxt, v);
        }
        playCsBloodTxt(v) {
            this.poolPlay(EAvatarEffectAnim.CsBloodTxt, v);
        }
        flyBlood(v, criticalStrike, anim) {
            if (v >= 0) {
                let _sign = "";
                _sign = "+";
                this.poolPlay(anim, _sign + v);
            }
            else {
                if (criticalStrike) {
                    this.playCsBloodTxt(v.toString());
                }
                else {
                    this.playNormalBlood(v.toString());
                }
            }
        }
    }

    exports.FightPureAnim = FightPureAnim;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ESkillId) {
        ESkillId[ESkillId["CriticalStrike"] = 10000] = "CriticalStrike";
    })(exports.ESkillId || (exports.ESkillId = {}));
    (function (EServerSkillType) {
        EServerSkillType[EServerSkillType["NormalAttack"] = 1] = "NormalAttack";
        EServerSkillType[EServerSkillType["SuckBlood"] = 2] = "SuckBlood";
        EServerSkillType[EServerSkillType["CriticalStrike"] = 3] = "CriticalStrike";
        EServerSkillType[EServerSkillType["PassiveDodge"] = 4] = "PassiveDodge";
        EServerSkillType[EServerSkillType["PassiveAnim"] = 5] = "PassiveAnim";
        EServerSkillType[EServerSkillType["PassiveHurtBlood"] = 6] = "PassiveHurtBlood";
        EServerSkillType[EServerSkillType["Move"] = 8] = "Move";
        EServerSkillType[EServerSkillType["Round"] = 9] = "Round";
        EServerSkillType[EServerSkillType["Dead"] = 10] = "Dead";
        EServerSkillType[EServerSkillType["Recover"] = 11] = "Recover";
        EServerSkillType[EServerSkillType["SkillType"] = 12] = "SkillType";
        EServerSkillType[EServerSkillType["ResetStand"] = 13] = "ResetStand";
        EServerSkillType[EServerSkillType["ReviveSetBlood"] = 14] = "ReviveSetBlood";
        EServerSkillType[EServerSkillType["Skill"] = 20] = "Skill";
        EServerSkillType[EServerSkillType["RemoteAttack"] = 21] = "RemoteAttack";
        EServerSkillType[EServerSkillType["BuffStart"] = 22] = "BuffStart";
        EServerSkillType[EServerSkillType["BuffEnd"] = 23] = "BuffEnd";
        EServerSkillType[EServerSkillType["ShoveAside"] = 24] = "ShoveAside";
        EServerSkillType[EServerSkillType["RemoteServerAtk"] = 25] = "RemoteServerAtk";
        EServerSkillType[EServerSkillType["RemoteServerCsAtk"] = 26] = "RemoteServerCsAtk";
    })(exports.EServerSkillType || (exports.EServerSkillType = {}));
    (function (EActionSkill) {
        EActionSkill[EActionSkill["ClientDie"] = -2] = "ClientDie";
        EActionSkill[EActionSkill["ClientMove"] = -1] = "ClientMove";
        EActionSkill[EActionSkill["NormalAttack"] = 1] = "NormalAttack";
        EActionSkill[EActionSkill["SuckBlood"] = 2] = "SuckBlood";
        EActionSkill[EActionSkill["CriticalStrike"] = 3] = "CriticalStrike";
        EActionSkill[EActionSkill["PassiveDodge"] = 4] = "PassiveDodge";
        EActionSkill[EActionSkill["PassiveAnim"] = 5] = "PassiveAnim";
        EActionSkill[EActionSkill["PassiveHurtBlood"] = 6] = "PassiveHurtBlood";
        EActionSkill[EActionSkill["HurtAnim"] = 10] = "HurtAnim";
        EActionSkill[EActionSkill["Round"] = 11] = "Round";
        EActionSkill[EActionSkill["Recover"] = 12] = "Recover";
        EActionSkill[EActionSkill["LianJi"] = 13] = "LianJi";
        EActionSkill[EActionSkill["ResetStand"] = 13.5] = "ResetStand";
        EActionSkill[EActionSkill["ReviveSetBlood"] = 14] = "ReviveSetBlood";
        EActionSkill[EActionSkill["StrikeBack"] = 20] = "StrikeBack";
        EActionSkill[EActionSkill["Skill"] = 20.5] = "Skill";
        EActionSkill[EActionSkill["RemoteAttack"] = 21] = "RemoteAttack";
        EActionSkill[EActionSkill["SkillType"] = 22] = "SkillType";
        EActionSkill[EActionSkill["BuffStart"] = 22.5] = "BuffStart";
        EActionSkill[EActionSkill["BuffEnd"] = 22.75] = "BuffEnd";
        EActionSkill[EActionSkill["ShoveAside"] = 24] = "ShoveAside";
        EActionSkill[EActionSkill["RemoteServerAtk"] = 25] = "RemoteServerAtk";
        EActionSkill[EActionSkill["RemoteServerCsAtk"] = 26] = "RemoteServerCsAtk";
    })(exports.EActionSkill || (exports.EActionSkill = {}));
    class FightActionVo {
        constructor(index = 0, id, round = 0) {
            this.isUsed = false;
            this.order = 0;
            this.round = 0;
            this.skillID = 0;
            this.delayTime0 = 0;
            this.index = index;
            this.skillID = id;
            this.round = round;
        }
        get index() {
            return this._index;
        }
        set index(v) {
            this._index = v;
        }
        getSkillName() {
            switch (this.skillID) {
                case exports.EActionSkill.ClientDie:
                    return "死亡";
                case exports.EActionSkill.ClientMove:
                    return "Client移动";
                case exports.EActionSkill.NormalAttack:
                    return "普攻";
                case exports.EActionSkill.SuckBlood:
                    return "吸血";
                case exports.EActionSkill.CriticalStrike:
                    return "暴击";
                case exports.EActionSkill.PassiveDodge:
                    return "受击闪避";
                case exports.EActionSkill.PassiveAnim:
                    let str = "";
                    return "受击动作" + ":" + str + ",动作值:";
                case exports.EActionSkill.PassiveHurtBlood:
                    return "受击伤害减血";
                case exports.EActionSkill.HurtAnim:
                    return "受击动作";
                case exports.EActionSkill.Round:
                    return "回合";
                case exports.EActionSkill.LianJi:
                    return "连击";
                case exports.EActionSkill.Recover:
                    return "回复血量";
                case exports.EActionSkill.StrikeBack:
                    return "反击";
                case exports.EActionSkill.Skill:
                    return "指定技能->" + this.skinName;
            }
        }
        get skinName() {
            return "";
        }
        toString() {
            let s = "";
            if (this.skillID != exports.EActionSkill.ClientMove) ;
            else {
                s = "移动";
            }
            let p = "";
            s += p;
            let _serverData = "";
            if (this.serverData) {
                _serverData = "服务器数据:[" + JSON.stringify(this.serverData) + "]";
            }
            return _serverData + "--->\tround:" + this.round + "\t client_order:" + this.order + "\t" + "\tClient-skillID:" + this.skillID + "\t" + this.getSkillName() + "\tval:" + "\tmoveIndex:" + "\t" + s;
        }
        getBackNext() {
            let l = this.getBackList();
            if (l.length > 0) {
                let cell = l[0];
                return cell;
            }
            return;
        }
        getFrontList() {
            let l = [];
            let front = this.front;
            while (front && front.round == this.round) {
                if (front.index == this.index) {
                    l.push(front);
                }
                front = front.front;
            }
            return l;
        }
        get roundFront() {
            let l = this.getFrontList();
            if (l.length > 0) {
                return l[0];
            }
        }
        getBackList() {
            let l = [];
            let back = this.back;
            while (back && back.round == this.round) {
                if (back.index == this.index) {
                    l.push(back);
                }
                back = back.back;
            }
            return l;
        }
        hasVal(val) {
            for (let i = 0; i < this.targetList.length; i++) {
                let cell = this.targetList[i];
                if (cell.val == val) {
                    return true;
                }
            }
        }
        checkTarget() {
            if (this.targetList.length <= 0) {
                console.warn(this);
                if (E.Debug) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, "fight err");
                }
            }
        }
    }

    exports.FightActionVo = FightActionVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class EquipSkin {
        constructor(type, equipStyle) {
            this.type = type;
            this.equipStyle = equipStyle;
        }
    }
    (function (EFightCamp) {
        EFightCamp[EFightCamp["Self"] = 0] = "Self";
        EFightCamp[EFightCamp["Enemy"] = 1] = "Enemy";
    })(exports.EFightCamp || (exports.EFightCamp = {}));
    class stCliFightAction extends stFightAction {
        static Create(cell) {
            let c = new stCliFightAction();
            c.type = cell.type;
            return c;
        }
    }
    class AvatarFactory {
        static getStandUiMainAvatar() {
            let _avatar = new AvatarMainView(false);
            _avatar.imageID = MainModel.Ins.imageID;
            _avatar.initRes();
            _avatar.start();
            _avatar.refreshSkin();
            _avatar.dir = EAvatarDir.Left;
            _avatar.play(EAvatarAnim.NormalStand);
            return _avatar;
        }
        static getStandHorseMainAvatar() {
            let _avatar = new AvatarMainView();
            _avatar.imageID = MainModel.Ins.imageID;
            _avatar.initRes();
            _avatar.start();
            _avatar.refreshSkin();
            _avatar.dir = EAvatarDir.Left;
            _avatar.play(EAvatarAnim.NormalStand);
            return _avatar;
        }
        static getStandFightMainAvatar(dir = EAvatarDir.Left, showBlood = true) {
            let _fightAvatar = new AvatarMainView();
            let _avatar = _fightAvatar;
            _avatar.initFightRes();
            _avatar.start();
            _avatar.useFightSkin = true;
            _avatar.play(EAvatarAnim.Stand);
            if (showBlood) {
                _avatar.initBlood();
            }
            _avatar.dir = dir;
            _avatar.refreshSkin();
            return _avatar;
        }
        static getStandNormalMainAvatar(dir = EAvatarDir.Left, ox = 0, oy = 0) {
            let _fightAvatar = new AvatarMainView();
            _fightAvatar.offsetX = ox;
            _fightAvatar.offsetY = oy;
            let _avatar = _fightAvatar;
            _avatar.start();
            _avatar.play(EAvatarAnim.NormalStand);
            _avatar.dir = dir;
            _avatar.refreshSkin();
            return _avatar;
        }
        static getFightMainAvatar(dir = EAvatarDir.Left, rideid, wingid, showBlood, imageID) {
            let _avatar = new AvatarMonsterView();
            _avatar.imageID = imageID;
            _avatar.initFightRes();
            _avatar.rideId = rideid;
            _avatar.wingId = wingid;
            _avatar.initRes();
            _avatar.play(EAvatarAnim.Stand);
            if (showBlood) {
                _avatar.initBlood();
                if (_avatar.blood) {
                    _avatar.blood.reverse();
                }
            }
            _avatar.dir = dir;
            _avatar.start();
            _avatar.mSkin = this.createMainSkin(rideid, wingid);
            return _avatar;
        }
        static createBossMonster(_url = 'o/spine/monster01/monster01', that, func) {
            let _resList = new ResItemGroup();
            _resList.addSkel(_url);
            let _avatar = new AvatarMonsterView();
            _avatar.initFightRes();
            _avatar.initBlood();
            if (_avatar.blood) {
                _avatar.blood.bgVisible = false;
                _avatar.blood.reverse();
            }
            E.ResMgr.LoadGroup(_resList, Callback.Create(this, () => {
                if (_avatar.destroyed) {
                    return;
                }
                _avatar.setSkel(_url);
                _avatar.start();
                if (that) {
                    func.call(that);
                }
            }), null);
            return _avatar;
        }
        static createPet(petId, mHitClick = true) {
            let cfg = PetListProxy.Ins.getCfgById(petId);
            let f_petanimid = cfg.f_petanimid;
            let pet = this.createBossMonster(`o/pet/pet${f_petanimid}/pet${f_petanimid}`);
            pet.play(EAvatarAnim.HandBookStand);
            if (mHitClick) {
                let animShow = new AnimShowCtl();
                animShow.bind(pet);
            }
            return pet;
        }
        static createCharacter(skinId, mHitClick = false) {
            let av = this.createBossMonster(`o/Image_Character/a${skinId}/a${skinId}`);
            av.play(EAvatarAnim.NormalStand);
            av.dir = EAvatarDir.Right;
            if (mHitClick) {
                let animShow = new AnimShowCtl();
                animShow.bind(av);
            }
            return av;
        }
        static createFlag(skinId) {
            return `o/Image_Flag/flag${skinId}.png`;
        }
        static createHalo(skinId, sp) {
            let eff = new SimpleEffect(sp, `o/Image_Halo/halo${skinId}/halo${skinId}`);
            eff.play(0, true);
            return eff;
        }
        static createMainSkin(rideid, wingid) {
            let skin = new stSkin();
            skin.f_HeadID = MainModel.Ins.getIdByStyle(EEquipType.Casque);
            skin.f_WeaponID = MainModel.Ins.getIdByStyle(EEquipType.Weapon);
            skin.f_ShieldID = MainModel.Ins.getIdByStyle(EEquipType.Shield);
            skin.f_WingID = wingid || MainModel.Ins.wingId;
            skin.f_MountID = rideid || ZuoQiModel.Ins.rideVo.mainid;
            skin.f_BodyID = MainModel.Ins.getIdByStyle(EEquipType.Barde);
            return skin;
        }
        static createBaseAvatar(equipList, rideId = 0, wingid = 0, dir = EAvatarDir.Left) {
            let _avatar = new AvatarBaseView();
            _avatar.rideId = rideId;
            _avatar.wingId = wingid;
            _avatar.equipList = equipList;
            _avatar.dir = dir;
            _avatar.initRes();
            _avatar.play(EAvatarAnim.NormalStand);
            _avatar.start();
            _avatar.refreshSkin();
            return _avatar;
        }
        static createAvatarByStSkin(v, anim = EAvatarAnim.NormalStand, dir = EAvatarDir.Left, ox = 0, oy = 0) {
            let _avatar = new AvatarMonsterView();
            if (v['f_imageID']) {
                _avatar.imageID = v['f_imageID'];
            }
            _avatar.offsetX = ox;
            _avatar.offsetY = oy;
            _avatar.dir = dir;
            _avatar.rideId = v.f_MountID || 0;
            _avatar.wingId = v.f_WingID || 0;
            _avatar.initRes();
            _avatar.play(anim);
            _avatar.start();
            _avatar.mSkin = v;
            return _avatar;
        }
        static createRide(f_MountID) {
            let skin = new stSkin();
            skin.f_MountID = f_MountID;
            return this.createAvatarByStSkin(skin, EAvatarAnim.None);
        }
        static createBaseMainAvatar(equipList, rideId = 0, wingid = 0, dir = EAvatarDir.Left) {
            let _avatar = new AvatarMainSkinView();
            _avatar.rideId = rideId;
            _avatar.wingId = wingid;
            _avatar.equipList = equipList;
            _avatar.dir = dir;
            _avatar.initRes();
            _avatar.play(EAvatarAnim.NormalStand);
            _avatar.start();
            _avatar.refreshSkin();
            return _avatar;
        }
        static createWingAvatar(_wingId) {
            let _avatar = new AavatrWingView();
            _avatar.initWing(_wingId);
            return _avatar;
        }
        static createFightMonsterAvatar(dir = EAvatarDir.Left, rideid, wingid, showBlood, imageID) {
            let _avatar = new AvatarMonsterView();
            _avatar.imageID = imageID;
            _avatar.initFightRes();
            _avatar.rideId = rideid;
            _avatar.wingId = wingid;
            _avatar.initRes();
            _avatar.refreshSkin();
            _avatar.play(EAvatarAnim.Stand);
            if (showBlood) {
                _avatar.initBlood();
                if (_avatar.blood) {
                    _avatar.blood.reverse();
                }
            }
            _avatar.dir = dir;
            _avatar.start();
            return _avatar;
        }
        static createAvatar(resKey, dir = EAvatarDir.Left) {
            let _avatar = new AvatarMonsterView();
            _avatar.setRes(resKey);
            _avatar.dir = dir;
            _avatar.start();
            return _avatar;
        }
        static createHeroAvatar(resKey) {
            let _avatar = new AvatarMonsterView();
            _avatar.setRes(resKey);
            _avatar.dir = EAvatarDir.Left;
            _avatar.addtionSkinList = ["hit1", "tea", "woodman"];
            _avatar.start();
            return _avatar;
        }
        static forwardTargetX(index) {
            if (index == 0) {
                return this.enemyX - this.roleWidth;
            }
            return this.ownerX + this.roleWidth;
        }
        static backTargetX(index) {
            if (index == 0) {
                return this.ownerX;
            }
            return this.enemyX;
        }
        static createTestFightList() {
            let l = [];
            return l;
        }
        static Skin2Equip(st) {
            let _l = [];
            if (!st) {
                let val = 0;
                _l.push(new EquipSkin(EEquipType.Weapon, val));
                _l.push(new EquipSkin(EEquipType.Shield, val));
                _l.push(new EquipSkin(EEquipType.Casque, val));
                _l.push(new EquipSkin(EEquipType.Wing, val));
                _l.push(new EquipSkin(EEquipType.Barde, val));
            }
            else {
                _l.push(new EquipSkin(EEquipType.Weapon, st.f_WeaponID || 0));
                _l.push(new EquipSkin(EEquipType.Shield, st.f_ShieldID || 0));
                _l.push(new EquipSkin(EEquipType.Casque, st.f_HeadID || 0));
                _l.push(new EquipSkin(EEquipType.Wing, st.f_WingID || 0));
                _l.push(new EquipSkin(EEquipType.Barde, st.f_BodyID || 0));
            }
            return _l;
        }
        static ac2Desc(cell) {
            return (cell.pos <= this.maxSideCount) + " " + this.getAcName(cell);
        }
        static getAcName(cell) {
            let val = 1;
            switch (cell.type) {
                case EServerSkillType.NormalAttack:
                    return "普通攻击";
                case EServerSkillType.CriticalStrike:
                    return "暴击";
                case EServerSkillType.PassiveHurtBlood:
                    return "受击减血 -" + val;
                case EServerSkillType.SuckBlood:
                    return "吸血 +" + val;
                case EServerSkillType.Move:
                    let a = "";
                    switch (val) {
                        case 0:
                            a = "回到自己的位置";
                            break;
                        case 1:
                            a = "冲向对方阵地";
                            break;
                    }
                    return "移动 " + a;
                case EServerSkillType.PassiveAnim:
                    let ac = "";
                    switch (val) {
                        case 0:
                            ac = "受到普攻";
                            break;
                        case 1:
                            ac = "受到暴击";
                            break;
                        case 2:
                            ac = "受到眩晕";
                            break;
                    }
                    return "受击动作 " + ac + ",动作值:" + val;
                case EServerSkillType.Round:
                    return "回合数=========================" + val;
                case EServerSkillType.Dead:
                    return "死亡";
                case EServerSkillType.PassiveDodge:
                    return "受击闪避";
                case EServerSkillType.Recover:
                    return "恢复";
                case EServerSkillType.SkillType:
                    return "连击 " + val;
                case EServerSkillType.ResetStand:
                    return "重置为待机动作";
                default:
                    console.error(cell);
                    return cell.type;
            }
        }
        static buildAct(cell, _actlist, roundVo) {
            let pos = cell.pos;
            let act;
            switch (cell.type) {
                case EServerSkillType.NormalAttack:
                    act = (new FightActionVo(pos, EActionSkill.NormalAttack, roundVo.round));
                    break;
                case EServerSkillType.CriticalStrike:
                    act = (new FightActionVo(pos, EActionSkill.CriticalStrike, roundVo.round));
                    break;
                case EServerSkillType.PassiveHurtBlood:
                    act = (new FightActionVo(pos, EActionSkill.PassiveHurtBlood, roundVo.round));
                    break;
                case EServerSkillType.SuckBlood:
                    act = (new FightActionVo(pos, EActionSkill.SuckBlood, roundVo.round));
                    break;
                case EServerSkillType.Move:
                    act = new FightActionVo(pos, EActionSkill.ClientMove, roundVo.round);
                    break;
                case EServerSkillType.PassiveAnim:
                    act = new FightActionVo(pos, EActionSkill.PassiveAnim, roundVo.round);
                    break;
                case EServerSkillType.Round:
                    let _round = cell.targetList[0].val;
                    roundVo.round = _round;
                    act = new FightActionVo(pos, EActionSkill.Round, roundVo.round);
                    break;
                case EServerSkillType.Dead:
                    act = (new FightActionVo(pos, EActionSkill.ClientDie, roundVo.round));
                    break;
                case EServerSkillType.PassiveDodge:
                    act = (new FightActionVo(pos, EActionSkill.PassiveDodge, roundVo.round));
                    break;
                case EServerSkillType.Recover:
                    act = new FightActionVo(pos, EActionSkill.Recover, roundVo.round);
                    break;
                case EServerSkillType.ReviveSetBlood:
                    act = new FightActionVo(pos, EActionSkill.ReviveSetBlood, roundVo.round);
                    break;
                case EServerSkillType.SkillType:
                    act = new FightActionVo(pos, EActionSkill.SkillType, roundVo.round);
                    break;
                case EServerSkillType.ResetStand:
                    act = new FightActionVo(pos, EActionSkill.ResetStand, roundVo.round);
                    break;
                case EServerSkillType.Skill:
                    act = new FightActionVo(pos, EActionSkill.Skill, roundVo.round);
                    break;
                case EServerSkillType.RemoteAttack:
                    act = new FightActionVo(pos, EActionSkill.RemoteAttack, roundVo.round);
                    break;
                case EServerSkillType.BuffStart:
                    act = new FightActionVo(pos, EActionSkill.BuffStart, roundVo.round);
                    break;
                case EServerSkillType.BuffEnd:
                    act = new FightActionVo(pos, EActionSkill.BuffEnd, roundVo.round);
                    break;
                case EServerSkillType.ShoveAside:
                    act = new FightActionVo(pos, EActionSkill.ShoveAside, roundVo.round);
                    break;
                case EServerSkillType.RemoteServerAtk:
                    act = new FightActionVo(pos, EActionSkill.RemoteServerAtk, roundVo.round);
                    break;
                case EServerSkillType.RemoteServerCsAtk:
                    act = new FightActionVo(pos, EActionSkill.RemoteServerCsAtk, roundVo.round);
                    break;
                default:
                    console.error(cell);
                    break;
            }
            if (E.Debug) {
                act.serverData = cell;
            }
            if (act) {
                if (cell.skillId) {
                    act.serverSkillId = cell.skillId;
                }
                act.targetList = cell.targetList;
                act.checkTarget();
            }
            _actlist.push(act);
            return act;
        }
        static createBystFightAction(l) {
            let _actlist = [];
            let round = {};
            round.round = 0;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.type != 0) {
                    this.buildAct(cell, _actlist, round);
                }
                else {
                    if (E.Debug) {
                        E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, JSON.stringify(cell));
                    }
                }
            }
            _actlist = this.toCv(_actlist);
            return _actlist;
        }
        static toCv(_actlist) {
            let _roundMap = {};
            for (let i = 0; i < _actlist.length; i++) {
                let cell = _actlist[i];
                if (!_roundMap[cell.round]) {
                    _roundMap[cell.round] = [];
                }
                _roundMap[cell.round].push(cell);
            }
            let newList = [];
            for (let obj in _roundMap) {
                let c1 = _roundMap[obj];
                newList = newList.concat(c1);
            }
            for (let i = 0; i < newList.length; i++) {
                let cur = newList[i];
                cur.order = i;
                cur.front = newList[i - 1];
                cur.back = newList[i + 1];
            }
            return newList;
        }
        static isSide(next, cur) {
            let count = this.maxSideCount;
            if (next.pos <= count && cur.pos <= count
                || next.pos > count && cur.pos > count) {
                return true;
            }
        }
        static getEffect(parant, url = null) {
            let cell = Laya.Pool.getItemByClass("FightPureAnim", FightPureAnim);
            let index = this.effList.indexOf(cell);
            if (index == -1) {
                this.effList.push(cell);
            }
            cell.poolCache = true;
            this.effLength++;
            if (!cell.baseSkel) {
                cell.load(url || (IconUtils.effect + ".skel"));
            }
            cell.setPos(parant.parent, parant.x, parant.y);
            return cell;
        }
        static clearEffect() {
            LogSys$1.Log("销毁数量:" + this.effList.length);
            while (this.effList.length) {
                let cell = this.effList.shift();
                cell.dispose();
            }
        }
    }
    AvatarFactory.POS_LEFT_PET = 13;
    AvatarFactory.POS_RIGHT_PET = 14;
    AvatarFactory.maxSideCount = 6;
    AvatarFactory.MOVE_POS = -300;
    AvatarFactory.offset = 120;
    AvatarFactory.posList = [];
    AvatarFactory.ownerX = 170;
    AvatarFactory.enemyX = 580;
    AvatarFactory.roleWidth = 120;
    AvatarFactory.effLength = 0;
    AvatarFactory.effList = [];

    exports.AvatarFactory = AvatarFactory;
    exports.stCliFightAction = stCliFightAction;

    return exports;

}(window));
(function (exports) {
    'use strict';

    var mUI$2 = ui.views.common.ui_loadingUI;
    class LoadingVo {
    }
    class LoadingView extends ViewBase {
        constructor() {
            super(...arguments);
            this.checkGuide = false;
            this.PageType = EPageType.None;
            this._curVal = 0;
            this._tween = new Laya.Tween();
        }
        onEnter() {
        }
        onExit() {
            E.taLoginTrack("loadingcomplete");
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new mUI$2();
            }
        }
        onInit() {
            E.taLoginTrack("startloading");
            this.initUI();
            if (this.Data instanceof LoadingVo) {
                let vo = this.Data;
                this.playAnim(vo);
            }
        }
        onAddLoadRes() {
            this.addRes(ResPath.View.Loading, Laya.Loader.JSON);
            this.addAtlas("loadingnew.atlas");
        }
        onAddEventListener() {
        }
        onChangeLanguage() {
        }
        UpdateProgress(num) {
            this._curVal = num;
            let showKedu = true;
            this._ui.progressTf.text = Math.floor(num * 100).toString() + "%";
            if (num > 0 && num <= 1) {
                if ((num * 100 > 50) && !this._flag) {
                    E.taLoginTrack("loading50");
                    this._flag = true;
                }
                this._ui.progressSkinBg.width = this._ui.progressSkin.width * num;
                this._ui.kedu.x = this._ui.progressSkinBg.width - this._ui.kedu.width;
            }
            else if (num <= 0) {
                showKedu = false;
            }
            else {
                this._ui.progressSkinBg.width = this._ui.progressSkin.width;
                this._ui.kedu.x = this._ui.progressSkinBg.width - this._ui.kedu.width;
            }
            if (showKedu) {
                this._ui.progressSkinBg.visible = true;
                this._ui.kedu.visible = true;
            }
            else {
                this._ui.progressSkinBg.visible = false;
                this._ui.kedu.visible = false;
            }
        }
        initUI() {
        }
        playAnim(vo) {
            let start = vo.start;
            let end = vo.end;
            let complete = vo.callBack;
            let duration = vo.duration;
            this._tween.clear();
            this.curVal = start;
            this._tween.to(this, { curVal: end }, duration, null, complete);
        }
        set curVal(val) {
            this.UpdateProgress(val);
        }
        get curVal() {
            return this._curVal;
        }
    }

    exports.LoadingView = LoadingView;
    exports.LoadingVo = LoadingVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DaLuanDouModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new DaLuanDouModel();
            }
            return this._ins;
        }
        isDotMain() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.DaLuanDou)) {
                if (this.isEnrollBM() || this.isRewardR()) {
                    return true;
                }
            }
            return false;
        }
        isEnrollBM() {
            if (this.openType == 1 && this.isEnroll == 0) {
                return true;
            }
            return false;
        }
        isRewardR() {
            if (this.isReward == 1) {
                return true;
            }
            return false;
        }
    }
    DaLuanDouModel.UPDATA_VIEW = "UPDATA_VIEW";
    DaLuanDouModel.UPDATA_VIEW_BM = "UPDATA_VIEW_BM";
    DaLuanDouModel.UPDATA_VIEW_SEVER = "UPDATA_VIEW_SEVER";
    DaLuanDouModel.DA_LUAN_DOU_RED = "DA_LUAN_DOU_RED";

    exports.DaLuanDouModel = DaLuanDouModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DaLuanDouProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new DaLuanDouProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Smash_Script";
        }
    }

    exports.DaLuanDouProxy = DaLuanDouProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    var HTMLDivElement = Laya.HTMLDivElement;
    class TestRichLabel {
        constructor() {
            let richtext = new MRichText();
            richtext.SetContent("xxx");
            richtext.SetColor("red");
            richtext.SetItalic(true);
            richtext.SetFontSize(32);
            let richtext2 = new MRichText()
                .SetContent("yyy")
                .SetColor("green")
                .SetItalic(true)
                .SetFontSize(32);
            let div = new HTMLDivElement();
            div.innerHTML = richtext.HTMLText + richtext2.HTMLText;
            Laya.stage.addChild(div);
        }
    }
    class MRichText {
        constructor() {
            this.m_italic_default = false;
            this.m_bold_default = false;
            this.m_letter_spacing_default = 1;
            this.m_font_family_default = "Arial";
            this.m_font_size_default = 16;
            this.m_color = "";
            this.m_color_default = "#ffffff";
            this.m_stroke_default = 1;
            this.m_stroke_color = "";
            this.m_stroke_color_default = "#000000";
            this.m_padding_default = "0px 0px 0px 0px";
            this.m_vertical_align_default = "top";
            this.m_align_default = "left";
        }
        get mStyle() {
            this.m_style = "style='";
            this.m_style += "italic:" + this.mItalic + ";";
            this.m_style += "bold:" + this.mBold + ";";
            this.m_style += "letter-spacing:" + this.mLetterSpacing + "px;";
            this.m_style += "font-family:" + this.mFontFamily + ";";
            this.m_style += "font-size:" + this.mFontSize + "px;";
            this.m_style += "color:" + this.mColor + ";";
            this.m_style += "stroke:" + this.mStroke + "px;";
            this.m_style += "strokeColor:" + this.mStrokeColor + ";";
            this.m_style += "padding:" + this.mPadding + ";";
            this.m_style += "vertical-align:" + this.mVerticalAlign + ";";
            this.m_style += "align:" + this.mAlign + ";";
            this.m_style += "'";
            return this.m_style;
        }
        get mItalic() {
            if (this.m_italic == null || this.m_italic == undefined)
                this.m_italic = this.m_italic_default;
            return this.m_italic;
        }
        SetItalic(b) {
            this.m_italic = b;
            this._setHtml();
            return this;
        }
        get mBold() {
            if (this.m_bold == null || this.m_bold == undefined)
                this.m_bold = this.m_bold_default;
            return this.m_bold;
        }
        SetBold(b) {
            this.m_bold = b;
            this._setHtml();
            return this;
        }
        get mLetterSpacing() {
            if (this.m_letter_spacing == null || this.m_letter_spacing == undefined)
                this.m_letter_spacing = this.m_letter_spacing_default;
            return this.m_letter_spacing;
        }
        SetLetterSpacing(num) {
            this.m_letter_spacing = num;
            this._setHtml();
            return this;
        }
        get mFontFamily() {
            if (!this.m_font_family || this.m_font_family == "")
                this.m_font_family = this.m_font_family_default;
            return this.m_font_family;
        }
        SetFontFamily(font) {
            this.m_font_family = font;
            this._setHtml();
            return this;
        }
        get mFontSize() {
            if (this.m_font_size == undefined || this.m_font_size == null)
                this.m_font_size = this.m_font_size_default;
            return this.m_font_size;
        }
        SetFontSize(num) {
            this.m_font_size = num;
            this._setHtml();
            return this;
        }
        get mColor() {
            if (!this.m_color || this.m_color == "")
                this.m_color = this.m_color_default;
            return this.m_color;
        }
        SetColor(color) {
            this.m_color = color;
            this._setHtml();
            return this;
        }
        get mStroke() {
            if (this.m_stroke == undefined || this.m_stroke == null)
                this.m_stroke = this.m_stroke_default;
            return this.m_stroke;
        }
        SetStroke(num) {
            this.m_stroke = num;
            this._setHtml();
            return this;
        }
        get mStrokeColor() {
            if (!this.m_stroke_color || this.m_stroke_color == "")
                this.m_stroke_color = this.m_stroke_color_default;
            return this.m_stroke_color;
        }
        SetStrokeColor(color) {
            this.m_stroke_color = color;
            this._setHtml();
            return this;
        }
        get mPadding() {
            if (!this.m_padding || this.m_padding == "")
                this.m_padding = this.m_padding_default;
            return this.m_padding;
        }
        SetPadding(top, right, bot, left) {
            this.m_padding = top + "px " + right + "px " + bot + "px " + left + "px ";
            this._setHtml();
            return this;
        }
        get mVerticalAlign() {
            if (!this.m_vertical_align || this.m_vertical_align == "")
                this.m_vertical_align = this.m_vertical_align_default;
            return this.m_vertical_align;
        }
        SetVerticalAlign(str) {
            this.m_vertical_align = str;
            this._setHtml();
            return this;
        }
        get mAlign() {
            if (!this.m_align || this.m_align == "")
                this.m_align = this.m_align_default;
            return this.m_align;
        }
        SetAlign(str) {
            this.m_align = str;
            this._setHtml();
            return this;
        }
        SetContent(str) {
            this.m_content = str;
            this._setHtml();
            return this;
        }
        Refresh() {
            this._setHtml();
        }
        _setHtml() {
            this.mHtml = "<span #>" + this.m_content + "</span>";
            this.mHtml = this.mHtml.replace('#', this.mStyle);
        }
        get HTMLText() {
            return this.mHtml;
        }
    }

    exports.MRichText = MRichText;
    exports.TestRichLabel = TestRichLabel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChatLineUI extends Laya.Box {
        constructor() {
            super();
        }
        init(data) {
            this.pos(0, 0);
            if (this._textfiled == null) {
                this._textfiled = new Laya.HTMLDivElement();
                this.addChild(this._textfiled);
            }
            Laya.HTMLStyle._inheritProps.push('family');
            this._textfiled.width = 600;
            this._textfiled.style.family = ZipJson.BOLD;
            this._textfiled.style.lineHeight = 40;
            this._textfiled.style.color = "#9C5F3A";
            this._textfiled.style.fontSize = 22;
            this._textfiled.style.leading = 10;
            this._textfiled.style.align = "left";
            this._textfiled.innerHTML = data;
            this._textfiled.height = this._textfiled.contextHeight + 4;
        }
        createRichHtmlText(str, color) {
            let fontSize = 26;
            let font = E.sdk.convertFont(ZipJson.BOLD);
            let r1 = new MRichText();
            r1.SetColor(color);
            r1.SetFontSize(fontSize);
            r1.SetFontFamily(font);
            r1.SetStroke(0);
            r1.SetContent(str);
            return r1.HTMLText;
        }
        dispose() {
            this.removeSelf();
        }
    }

    exports.ChatLineUI = ChatLineUI;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DaLuanDouView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('daluandou.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.daluandou.ui_daluandouUI;
                this.bindClose(this._ui.close1);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_bm, new Laya.Handler(this, this.onBtnBMClick)), ButtonCtl.Create(this._ui.btn_lq, new Laya.Handler(this, this.onBtnLQClick)));
                this._ctl1 = new FontClipCtl(IconUtils.dldAtlasPrefix);
                this._ctl2 = new FontClipCtl(IconUtils.dldAtlasPrefix);
                this._ctl3 = new FontClipCtl(IconUtils.dldAtlasPrefix);
                this._ctl_1 = new FontClipCtl(IconUtils.dldAtlasPrefix);
                this._ctl_2 = new FontClipCtl(IconUtils.dldAtlasPrefix);
                this._ui.panel_dec.vScrollBarSkin = "";
                this._ui.panel_dec.vScrollBar.isVertical = true;
                this._ui.panel_dec.vScrollBar.elasticBackTime = 100;
                this._ui.panel_dec.vScrollBar.elasticDistance = 10;
            }
        }
        onInit() {
            this._chatMsgTotalHeight = 0;
            this._ui.panel.scrollTo(0, 0);
            DaLuanDouModel.Ins.on(DaLuanDouModel.UPDATA_VIEW, this, this.onUpdataView);
            DaLuanDouModel.Ins.on(DaLuanDouModel.UPDATA_VIEW_BM, this, this.onUpdataViewBM);
            DaLuanDouModel.Ins.on(DaLuanDouModel.UPDATA_VIEW_SEVER, this, this.onUpdataViewServer);
            let req = new SmashFightOpenReq_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            DaLuanDouModel.Ins.off(DaLuanDouModel.UPDATA_VIEW, this, this.onUpdataView);
            DaLuanDouModel.Ins.off(DaLuanDouModel.UPDATA_VIEW_BM, this, this.onUpdataViewBM);
            DaLuanDouModel.Ins.off(DaLuanDouModel.UPDATA_VIEW_SEVER, this, this.onUpdataViewServer);
        }
        onBtnBMClick() {
            let req = new SmashEnroll_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtnLQClick() {
            let req = new Reward_req();
            req.type = EFightType.DLD;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onUpdataViewServer() {
            let req = new SmashFightUpdataRep_req;
            req.round = DaLuanDouModel.Ins.round;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onUpdataViewBM() {
            this._ui.lab_bm.text = "已报名";
            this._ui.btn_bm.mouseEnabled = false;
            DotManager.removeDot(this._ui.lab_bm);
        }
        onUpdataView(value) {
            let st = "";
            if (DaLuanDouModel.Ins.crossServers.length) {
                let time = DaLuanDouModel.Ins.startTime - TimeUtil.serverTime;
                if (time > 0) {
                    let num = Math.ceil(time / 86400);
                    st = "\n\n6、跨服大乱斗将在" + num + "天后开启";
                }
                else {
                    st = "\n\n6、本次大乱斗参与服务器为：" + DaLuanDouModel.Ins.crossServers[0] + "-" +
                        DaLuanDouModel.Ins.crossServers[1] + "服";
                }
            }
            this._ui.lab_dec.text = E.LangMgr.getLang("dldTip1") + st;
            let t1 = TimeUtil.serverTime - TimeUtil.curZeroTime - 3600 * 20;
            if (t1 >= 0) {
                this._ui.lab_ss.text = "今日连杀排行";
            }
            else {
                this._ui.lab_ss.text = "昨日连杀排行";
            }
            for (let i = 1; i < 4; i++) {
                let vo = DaLuanDouModel.Ins.smashTopWinnerList.find(ele => ele.position == i);
                if (vo) {
                    MainModel.Ins.setTTHead(this._ui["icon" + i], MainModel.Ins.convertHead(vo.portrait));
                    this._ui["img_t_" + i].skin = ChengHaoModel.Ins.getTitleImg(vo.titleId);
                    this._ui["Lvtf" + i].text = "lv" + vo.level;
                    this._ui["name" + i].text = vo.name;
                    this._ui["box_" + i].visible = true;
                    this["_ctl" + i].setValue(this._ui["num" + i], vo.streakTimes.toString(), "middle");
                }
                else {
                    this._ui["icon" + i].skin = "";
                    this._ui["img_t_" + i].skin = "";
                    this._ui["Lvtf" + i].text = "";
                    this._ui["name" + i].text = "虚位以待";
                    this._ui["box_" + i].visible = false;
                }
            }
            DotManager.removeDot(this._ui.lab_bm);
            if (DaLuanDouModel.Ins.isReward) {
                if (DaLuanDouModel.Ins.openType == 1 || DaLuanDouModel.Ins.openType == 4) {
                    this._ui.panel.visible = true;
                    this._ui.lab_title.text = "大乱斗规则";
                    this._ui.panel_dec.visible = false;
                }
                else {
                    if (DaLuanDouModel.Ins.smashFightList.length == 0) {
                        this._ui.panel.visible = true;
                        this._ui.lab_title.text = "大乱斗规则";
                        this._ui.panel_dec.visible = false;
                    }
                    else {
                        this._ui.panel.visible = false;
                        this._ui.lab_title.text = "大乱斗战报";
                        this._ui.panel_dec.visible = true;
                        this.uodataPanelAll(value);
                    }
                }
                this._ui.box1.visible = false;
                this._ui.box2.visible = true;
                this._ui.btn_lq.visible = true;
                this.setAward();
                DotManager.addDot(this._ui.btn_lq, 20, -13);
            }
            else {
                DotManager.removeDot(this._ui.btn_lq);
                switch (DaLuanDouModel.Ins.openType) {
                    case 1:
                        this._ui.box1.visible = true;
                        this._ui.box2.visible = false;
                        this._ui.panel.visible = true;
                        this._ui.lab_title.text = "大乱斗规则";
                        this._ui.panel_dec.visible = false;
                        if (DaLuanDouModel.Ins.isEnroll) {
                            this._ui.lab_bm.text = "已报名";
                            this._ui.btn_bm.mouseEnabled = false;
                        }
                        else {
                            this._ui.lab_bm.text = "报名";
                            this._ui.btn_bm.mouseEnabled = true;
                            DotManager.addDot(this._ui.lab_bm, 20, -25);
                        }
                        this._ui.btn_lq.visible = false;
                        break;
                    case 2:
                        if (DaLuanDouModel.Ins.isEnroll) {
                            this._ui.panel.visible = false;
                            this._ui.lab_title.text = "大乱斗战报";
                            this._ui.panel_dec.visible = true;
                            this._ui.box1.visible = false;
                            this._ui.box2.visible = true;
                            this.setAward();
                            this.uodataPanelAll(value);
                            this._ui.btn_lq.visible = false;
                        }
                        else {
                            this.setView();
                        }
                        break;
                    case 3:
                        if (DaLuanDouModel.Ins.isEnroll) {
                            this._ui.panel.visible = false;
                            this._ui.lab_title.text = "大乱斗战报";
                            this._ui.panel_dec.visible = true;
                            this._ui.box1.visible = false;
                            this._ui.box2.visible = true;
                            this.setAward();
                            this.uodataPanelAll(value);
                            this._ui.btn_lq.visible = true;
                        }
                        else {
                            this.setView();
                        }
                        break;
                    case 4:
                        this.setView();
                        break;
                }
            }
        }
        setView() {
            this._ui.box1.visible = true;
            this._ui.box2.visible = false;
            this._ui.panel.visible = true;
            this._ui.lab_title.text = "大乱斗规则";
            this._ui.panel_dec.visible = false;
            this._ui.lab_bm.text = "报名结束";
            this._ui.btn_bm.mouseEnabled = false;
            this._ui.btn_lq.visible = false;
        }
        setAward() {
            this._ctl_1.setValue(this._ui.sp1, DaLuanDouModel.Ins.fightResult.streakTimes.toString(), "middle");
            this._ctl_2.setValue(this._ui.sp2, DaLuanDouModel.Ins.fightResult.winTimes.toString(), "middle");
            this._ui.box_jl1.visible = this._ui.box_jl2.visible = false;
            for (let i = 0; i < DaLuanDouModel.Ins.fightResult.rewardList.length; i++) {
                this._ui["box_jl" + (i + 1)].visible = true;
                this._ui["icon_" + (i + 1)].skin = IconUtils.getIcon(DaLuanDouModel.Ins.fightResult.rewardList[i].id);
                this._ui["lab_num" + (i + 1)].text = DaLuanDouModel.Ins.fightResult.rewardList[i].count + "";
            }
            if (DaLuanDouModel.Ins.fightResult.onlineRewardList.length > 0) {
                this._ui.box_zx.visible = true;
                this._ui.icon_zx.skin = IconUtils.getIcon(DaLuanDouModel.Ins.fightResult.onlineRewardList[0].id);
                this._ui.lab_numzx.text = DaLuanDouModel.Ins.fightResult.onlineRewardList[0].count + "";
            }
            else {
                this._ui.box_zx.visible = false;
            }
            if (DaLuanDouModel.Ins.fightResult.rewardList.length == 1) {
                this._ui.box_zx.y = this._ui.box_jl2.y;
            }
            else {
                this._ui.box_zx.y = 83;
            }
            if (DaLuanDouModel.Ins.isReward) {
                this._ui.lab_lq.text = "领取";
                this._ui.btn_lq.mouseEnabled = true;
            }
            else {
                this._ui.lab_lq.text = "已领取";
                this._ui.btn_lq.mouseEnabled = false;
            }
        }
        setPanel(type, langList) {
            let cfg = DaLuanDouProxy.Ins.GetDataById(type);
            let list = [];
            for (let i = 0; i < langList.length; i++) {
                let data = langList[i];
                if (data.type == 2 || data.type == 3 || data.type == 6) {
                    let array = data.lang.split("|");
                    let st = "";
                    for (let j = 0; j < array.length; j++) {
                        let arr = array[j].split("-");
                        st += "@" + arr[0] + "@" + +arr[1];
                    }
                    list.push(st);
                }
                else {
                    list.push(data.lang);
                }
            }
            let chatStr = E.LangMgr.getLangArr(cfg.f_content, list);
            let newChatStr = "";
            newChatStr += chatStr.replace(/@31@/g, "<img src='o/daluandou/31.png' style='width:24px;height:31px'></img>")
                .replace(/@3@/g, "<img src='o/daluandou/3.png' style='width:34px;height:30px'></img>")
                .replace(/@sl@/g, "<img src='o/daluandou/sl.png' style='width:42px;height:20px'></img>")
                .replace(/@lb@/g, "<img src='o/daluandou/lb.png' style='width:43px;height:21px'></img>");
            var chatLineUI = Laya.Pool.getItemByClass("chatLineUI", ChatLineUI);
            chatLineUI.init(newChatStr);
            this._ui.panel_dec.addChild(chatLineUI);
            chatLineUI.y = this._chatMsgTotalHeight;
            this._chatMsgTotalHeight += chatLineUI.height;
            this._ui.panel_dec.vScrollBar.max = this._ui.panel_dec.contentHeight;
            this._ui.panel_dec.vScrollBar.value = this._ui.panel_dec.vScrollBar.max;
        }
        uodataPanelAll(value) {
            if (value == 1) {
                while (this._ui.panel_dec.numChildren) {
                    this._ui.panel_dec.removeChildAt(0);
                }
                this._chatMsgTotalHeight = 0;
                for (let i = 0; i < DaLuanDouModel.Ins.smashFightList.length; i++) {
                    this.setPanel(DaLuanDouModel.Ins.smashFightList[i].type, DaLuanDouModel.Ins.smashFightList[i].langList);
                }
            }
            else {
                if (DaLuanDouModel.Ins.round == 0) {
                    while (this._ui.panel_dec.numChildren) {
                        this._ui.panel_dec.removeChildAt(0);
                    }
                    this._chatMsgTotalHeight = 0;
                }
                let len = DaLuanDouModel.Ins.smashFightList.length;
                this.setPanel(DaLuanDouModel.Ins.smashFightList[len - 1].type, DaLuanDouModel.Ins.smashFightList[len - 1].langList);
            }
        }
    }

    exports.DaLuanDouView = DaLuanDouView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DaLuanDouModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new DaLuanDouModule();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            this.Reg(new DaLuanDouView(EViewType.DaLuanDou));
            MainModel.Ins.on(MainEvent.MainViewInit, this, this.onMainViewInit);
            MainModel.Ins.on(MainEvent.Function_Open, this, this.onMainViewInit);
            E.MsgMgr.AddMsg(MSGID.SmashInit, this.SmashInit, this);
            E.MsgMgr.AddMsg(MSGID.SmashEnroll, this.SmashEnroll, this);
            E.MsgMgr.AddMsg(MSGID.SmashUpdate, this.SmashUpdate, this);
            E.MsgMgr.AddMsg(MSGID.SmashStateUpdate, this.SmashStateUpdate, this);
            E.MsgMgr.AddMsg(MSGID.SmashFight, this.SmashFight, this);
        }
        onMainViewInit() {
            Laya.timer.callLater(this, this.setDot);
        }
        setDot() {
            if (DaLuanDouModel.Ins.isDotMain()) {
                MainModel.Ins.funcSetRed(EFuncDef.DaLuanDou, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.DaLuanDou, false);
            }
            DaLuanDouModel.Ins.event(DaLuanDouModel.DA_LUAN_DOU_RED);
        }
        SmashInit(value) {
            DaLuanDouModel.Ins.isEnroll = value.isEnroll;
            DaLuanDouModel.Ins.isReward = value.isReward;
            DaLuanDouModel.Ins.openType = value.openType;
            DaLuanDouModel.Ins.smashFightList = value.smashFightList;
            DaLuanDouModel.Ins.smashTopWinnerList = value.smashTopWinnerList;
            DaLuanDouModel.Ins.fightResult = value.fightResult;
            DaLuanDouModel.Ins.crossServers = value.crossServers;
            DaLuanDouModel.Ins.startTime = value.crossTime;
            DaLuanDouModel.Ins.event(DaLuanDouModel.UPDATA_VIEW, 1);
        }
        SmashEnroll() {
            DaLuanDouModel.Ins.isEnroll = 1;
            DaLuanDouModel.Ins.event(DaLuanDouModel.UPDATA_VIEW_BM);
            this.setDot();
        }
        SmashUpdate(value) {
            if (DaLuanDouModel.Ins.round == 0) {
                DaLuanDouModel.Ins.smashFightList = [];
            }
            for (let i = 0; i < value.smashFightList.length; i++) {
                DaLuanDouModel.Ins.smashFightList.push(value.smashFightList[i]);
            }
            DaLuanDouModel.Ins.smashTopWinnerList = value.smashTopWinnerList;
            DaLuanDouModel.Ins.fightResult = value.fightResult;
            DaLuanDouModel.Ins.event(DaLuanDouModel.UPDATA_VIEW, 2);
        }
        SmashStateUpdate(value) {
            DaLuanDouModel.Ins.openType = value.openType;
            DaLuanDouModel.Ins.event(DaLuanDouModel.UPDATA_VIEW, 1);
            this.setDot();
        }
        SmashFight(value) {
            DaLuanDouModel.Ins.round = value.round;
            DaLuanDouModel.Ins.event(DaLuanDouModel.UPDATA_VIEW_SEVER);
        }
    }

    exports.DaLuanDouModule = DaLuanDouModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ScoreHeadCtl {
        constructor(skin) {
            this.skin = skin;
            let _maskTemp = new Laya.Sprite();
            GeometryUtil.drawRoundRect(_maskTemp.graphics, 0, 0, this.skin.icon.width, this.skin.icon.height, 10, "#ff0000");
            this.skin.icon.mask = _maskTemp;
        }
        setData(data) {
            MainModel.Ins.setTTHead(this.skin.icon, MainModel.Ins.convertHead(data.headUrl));
            this.skin.nameTf.text = StringUtil.convertName(data.name);
            this.skin.lvtf.text = IconUtils.str2Lv(data.lv);
            this.skin.score_tf1.text = data.score + "";
        }
        setVal(str) {
            if (str.substr(0, 1) == "+") {
                this.skin.score_tf2.color = "#65C923";
            }
            else {
                this.skin.score_tf2.color = "#E73C3A";
            }
            this.skin.score_tf2.text = "(" + str + ")";
            this.skin.score_tf2.x = this.skin.score_tf1.x + this.skin.score_tf1.textField.textWidth;
        }
    }
    class ScoreJjcJieSuanView extends ViewBase {
        onAddLoadRes() {
            this.addAtlas("jjc.atlas");
        }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.jjc.ui_score_jjc_succeedUI();
                this.UI.on(Laya.Event.CLICK, this, this.onClickAllHandler);
                this.mMask = true;
                this._itemCtl0 = new ScoreHeadCtl(this._ui.item0);
                this._itemCtl1 = new ScoreHeadCtl(this._ui.item1);
                this.succeed = new SucceedPlay(this._ui.effectCon);
            }
        }
        onInit() {
            let _data = this.Data;
            let serverData = _data.extData;
            this.model = getJjcModel(serverData.type);
            if (serverData.win == 0) {
                this._ui.succeed.visible = false;
                this._ui.fail.visible = true;
                this.succeed.visible = false;
                this.succeed.stop();
                this._itemCtl0.setData(this.model.ownerPlayer);
                this._itemCtl1.setData(serverData.enemyInfo);
                this._itemCtl0.setVal("-" + serverData.upval);
                this._itemCtl1.setVal("+" + serverData.upval);
            }
            else {
                this._ui.fail.visible = false;
                this._ui.succeed.visible = true;
                this.succeed.visible = true;
                this.succeed.start();
                this._itemCtl0.setData(this.model.ownerPlayer);
                this._itemCtl1.setData(serverData.enemyInfo);
                if (_data.fightVo.rewardList.length > 0) {
                    this._ui.harmtitle.visible = true;
                }
                else {
                    this._ui.harmtitle.visible = false;
                }
                ItemViewFactory.renderItemSlots(this._ui.rewardcontainer, this.model.succeedRewardList);
                this._itemCtl0.setVal("+" + serverData.upval);
                this._itemCtl1.setVal("-" + serverData.upval);
            }
        }
        onClickAllHandler() {
            this.succeed.stop();
            MainModel.Ins.jiesuanEnd(this.Data);
            this.Close();
        }
        onMaskClose() {
            this.onClickAllHandler();
        }
    }

    exports.ScoreJjcJieSuanView = ScoreJjcJieSuanView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EGymShopType) {
        EGymShopType[EGymShopType["TokenShop"] = 0] = "TokenShop";
        EGymShopType[EGymShopType["GoldShop"] = 1] = "GoldShop";
    })(exports.EGymShopType || (exports.EGymShopType = {}));
    (function (EGymHeroType) {
        EGymHeroType[EGymHeroType["Field"] = 0] = "Field";
        EGymHeroType[EGymHeroType["Hero"] = 1] = "Hero";
    })(exports.EGymHeroType || (exports.EGymHeroType = {}));
    (function (EGymAction) {
        EGymAction[EGymAction["Live"] = 0] = "Live";
        EGymAction[EGymAction["ShowInherit"] = 1] = "ShowInherit";
        EGymAction[EGymAction["ShowReward"] = 2] = "ShowReward";
    })(exports.EGymAction || (exports.EGymAction = {}));
    (function (EGymLingQu) {
        EGymLingQu[EGymLingQu["CanLingqu"] = 1] = "CanLingqu";
        EGymLingQu[EGymLingQu["NormalIsAnim"] = 0] = "NormalIsAnim";
    })(exports.EGymLingQu || (exports.EGymLingQu = {}));
    (function (EFacilityType) {
        EFacilityType[EFacilityType["Null"] = 0] = "Null";
        EFacilityType[EFacilityType["Fight"] = 1] = "Fight";
        EFacilityType[EFacilityType["Drum"] = 2] = "Drum";
        EFacilityType[EFacilityType["Tea"] = 3] = "Tea";
        EFacilityType[EFacilityType["Light"] = 4] = "Light";
        EFacilityType[EFacilityType["Dummy"] = 5] = "Dummy";
    })(exports.EFacilityType || (exports.EFacilityType = {}));
    (function (EGymTaskType) {
        EGymTaskType[EGymTaskType["GetHero"] = 12] = "GetHero";
    })(exports.EGymTaskType || (exports.EGymTaskType = {}));
    (function (EGymTaskStatus) {
        EGymTaskStatus[EGymTaskStatus["NotLingqu"] = 0] = "NotLingqu";
        EGymTaskStatus[EGymTaskStatus["YiLingQu"] = 1] = "YiLingQu";
    })(exports.EGymTaskStatus || (exports.EGymTaskStatus = {}));
    (function (EGymHeroFetterStatus) {
        EGymHeroFetterStatus[EGymHeroFetterStatus["Finished"] = 1] = "Finished";
        EGymHeroFetterStatus[EGymHeroFetterStatus["CanActivied"] = 2] = "CanActivied";
        EGymHeroFetterStatus[EGymHeroFetterStatus["WaitFind"] = 3] = "WaitFind";
    })(exports.EGymHeroFetterStatus || (exports.EGymHeroFetterStatus = {}));
    (function (EGymRoleType) {
        EGymRoleType[EGymRoleType["Beggar"] = 7] = "Beggar";
    })(exports.EGymRoleType || (exports.EGymRoleType = {}));

    return exports;

}(window));
(function (exports) {
	'use strict';

	class GymEvent {
	}
	GymEvent.RemovePop = "RemovePop";
	GymEvent.InvitePopUpdate = "InvitePopUpdate";
	GymEvent.FightAnimPlayEnd = "FightAnimPlayEnd";
	GymEvent.KnowledgeLevelUp = "KnowledgeLevelUp";
	GymEvent.FacilitiesUpdate = "FacilitiesUpdate";
	GymEvent.WashSucceed = "WashSucceed";
	GymEvent.MapUdapate = "MapUdapate";
	GymEvent.TaskUpdate = "TaskUpdate";
	GymEvent.BondUpadte = "BondUpadte";
	GymEvent.MainAttrUpdate = "MainAttrUpdate";
	GymEvent.RedUpdate = "RedUpdate";
	GymEvent.SetGear = "SetGear";

	exports.GymEvent = GymEvent;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class GymInnerRoomSlotVo {
    }
    class GymSlotViewVo {
        constructor() {
            this.mSelect = false;
        }
        get locked() {
            return this.unlockLevel > HeroHouseModel.Ins.levelCtl.cfgLv;
        }
        get degree() {
            return this.equipVo.degree;
        }
        get heroCfg() {
            let cfg = t_Gym_NPC_List.Ins.getByHeroID(this.equipVo.heroId);
            return cfg;
        }
        get attrs() {
            return this.equipVo.attrList;
        }
        get isEmpty() {
            return this.equipVo == undefined;
        }
    }

    exports.GymInnerRoomSlotVo = GymInnerRoomSlotVo;
    exports.GymSlotViewVo = GymSlotViewVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (AvatarAnimStatus) {
        AvatarAnimStatus[AvatarAnimStatus["Idle"] = 0] = "Idle";
        AvatarAnimStatus[AvatarAnimStatus["Attack"] = 1] = "Attack";
        AvatarAnimStatus[AvatarAnimStatus["StrongAttack"] = 2] = "StrongAttack";
        AvatarAnimStatus[AvatarAnimStatus["Attack_Talk"] = 3] = "Attack_Talk";
        AvatarAnimStatus[AvatarAnimStatus["StrongAttack_Talk"] = 4] = "StrongAttack_Talk";
        AvatarAnimStatus[AvatarAnimStatus["Idle_Talk"] = 5] = "Idle_Talk";
        AvatarAnimStatus[AvatarAnimStatus["Idle_End_Talk"] = 6] = "Idle_End_Talk";
    })(exports.AvatarAnimStatus || (exports.AvatarAnimStatus = {}));
    class HeroAnimStatusVo {
        constructor(cell) {
            this.animScale = 1.0;
            let a = cell.split("-");
            let id = parseInt(a[0]);
            let time = parseInt(a[1]) / 1000;
            this.time = time;
            this.status = id;
        }
        get statusName() {
            let arr = ["待机", "攻击", "暴击", "攻击说话", "暴击说话", "待机说话", "待机总结说话"];
            return arr[this.status];
        }
    }

    exports.HeroAnimStatusVo = HeroAnimStatusVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GymSkinVo {
        constructor() {
            this.action = "";
        }
        get qua() {
            return this.quaCfg.f_id;
        }
        getTotalTime(str) {
            let l = str.split("|");
            let time = 0;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i].split("-");
                time += parseInt(cell[1]);
            }
            return time / 1000;
        }
        parse() {
            let anim = this.quaCfg.f_Anim.split("|");
            let animStr = "";
            for (let i = 0; i < anim.length; i++) {
                let cell = anim[i].split("-");
                let id = parseInt(cell[0]);
                let count = parseInt(cell[1]);
                for (let n = 0; n < count; n++) {
                    let cfg = t_Gym_NPC_Anim.Ins.GetDataById(id);
                    animStr += cfg.f_anim + "|";
                }
            }
            if (animStr.length > 0) {
                animStr = animStr.substr(0, animStr.length - 1);
            }
            this.action = animStr;
            this.animTotalTime = this.getTotalTime(animStr);
        }
    }
    class GymInviteVo {
        constructor(vo) {
            this._vo = vo;
            let _sub = this.subTime;
            if (_sub > 0) {
                this._curTicket = Math.ceil(_sub / 1000);
                this.onTimeRefresh();
            }
        }
        get mData() {
            return this._vo;
        }
        getTalk(type) {
            let skinvo = this.getSkinVo();
            let id;
            switch (this._vo.result) {
                case EGymAction.Live:
                    if (type == AvatarAnimStatus.Attack_Talk ||
                        type == AvatarAnimStatus.StrongAttack_Talk ||
                        type == AvatarAnimStatus.Idle_Talk) {
                        id = skinvo.imgCfg.f_TalkID;
                    }
                    else if (type == AvatarAnimStatus.Idle_End_Talk) {
                        id = skinvo.imgCfg.f_TalkLostID;
                    }
                    break;
                case EGymAction.ShowInherit:
                case EGymAction.ShowReward:
                    if (type == AvatarAnimStatus.Attack_Talk ||
                        type == AvatarAnimStatus.StrongAttack_Talk ||
                        type == AvatarAnimStatus.Idle_Talk) {
                        id = skinvo.imgCfg.f_TalkID;
                    }
                    else if (type == AvatarAnimStatus.Idle_End_Talk) {
                        id = skinvo.imgCfg.f_TalkWinID;
                    }
                    break;
            }
            if (id) {
                let arr = id.split('-');
                let index = Math.floor(Math.random() * arr.length);
                let talkId = parseInt(arr[index]);
                let cfg = t_Gym_NPC_Talk.Ins.GetDataById(talkId);
                if (cfg) {
                    return cfg.f_Content == "" ? "talk fid:" + cfg.f_id : cfg.f_Content;
                }
                return "talkId:" + talkId;
            }
            return "";
        }
        onTimeRefresh() {
            if (this._curTicket >= 0) {
                Laya.timer.once(1000, this, this.onTimeRefresh);
                this._curTicket--;
            }
            else {
                HeroHouseModel.Ins.updateRed();
                HeroHouseModel.Ins.event(GymEvent.FightAnimPlayEnd);
            }
        }
        get subTime() {
            let cell = this._vo;
            let serverTime = TimeUtil.serverTimeMS;
            let sub = cell.endtime.toNumber() - serverTime;
            if (sub < 0) {
                sub = 0;
            }
            return sub;
        }
        getSkinVo() {
            let quaCfg;
            let imgCfg;
            if (!this.skinVo) {
                this.skinVo = new GymSkinVo();
                let cell = this._vo;
                let heroCfg;
                switch (cell.type) {
                    case EGymHeroType.Field:
                        heroCfg = t_Gym_NPC_List.Ins.getByHeroID(cell.heroId);
                        quaCfg = t_Gym_NPC_Quality.Ins.getByQua(heroCfg.f_HeroQuality);
                        let imglist = t_Gym_NPC_Image.Ins.List;
                        imgCfg = imglist.find(item => item.f_NPCID == cell.heroId);
                        break;
                    case EGymHeroType.Hero:
                        heroCfg = t_Gym_NPC_List.Ins.getByHeroID(cell.heroId);
                        let heroType = heroCfg.f_HeroType;
                        quaCfg = t_Gym_NPC_Quality.Ins.getByQua(heroCfg.f_HeroQuality);
                        imgCfg = t_Gym_NPC_Image.Ins.getCfgByTypeID(heroType);
                        break;
                }
                this.skinVo.imgCfg = imgCfg;
                this.skinVo.quaCfg = quaCfg;
                this.skinVo.endTime = this._vo.endtime;
                this.skinVo.speedUpTime = this._vo.speedUpTime;
                this.skinVo.parse();
            }
            return this.skinVo;
        }
        getName(type) {
            switch (type) {
                case EGymHeroType.Field:
                    return "江湖人士";
                case EGymHeroType.Hero:
                    return "英雄";
            }
            return type;
        }
        get fullName() {
            let name = this.getName(this._vo.type).toString();
            let id = this.id;
            if (this._vo.type == EGymHeroType.Field) {
                return `${name} npcid:${id}`;
            }
            return `${name} heroid:${id}`;
        }
        get endtime() {
            return this._vo.endtime;
        }
        get id() {
            return this._vo.heroId;
        }
        get isTimeEnd() {
            if (this.endtime.toNumber() <= TimeUtil.serverTimeMS) {
                return true;
            }
            return false;
        }
        toCellString() {
            let cell = this._vo;
            let str = "";
            switch (cell.result) {
                case 0:
                    str = "演武完走人";
                    break;
                case 1:
                    str = "演武完展示传承界面";
                    break;
                case 2:
                    str = "演武完展示领取奖励界面";
                    break;
            }
            let sub = cell.endtime.toNumber() - TimeUtil.serverTimeMS;
            if (sub < 0) {
                sub = 0;
            }
            let endStr = TimeUtil.timeToStr(cell.endtime.toNumber() / 1000);
            return `uid:${cell.item.uid}\t${this.getName(cell.type)}\t${str} heroid:${cell.heroId} result:${cell.result} ${str} 剩余时间:${sub}毫秒,结束时间戳:${endStr}`;
        }
        get rewardStatus() {
            let vo = this._vo;
            let sub = vo.endtime.toNumber() - TimeUtil.serverTimeMS;
            if (sub < 0) {
                return EGymLingQu.CanLingqu;
            }
            return EGymLingQu.NormalIsAnim;
        }
        get rewardItem() {
            let l = this._vo.item.itemlist;
            if (l.length > 0) {
                let cell = l[l.length - 1];
                return cell;
            }
        }
        get uid() {
            return this.mData.item.uid;
        }
        get degree() {
            return this._vo.item.degree;
        }
        get attrlist() {
            return this._vo.item.attrList;
        }
        get heroCfg() {
            let _heroCfg = t_Gym_NPC_List.Ins.getByHeroID(this.mData.heroId);
            return _heroCfg;
        }
        dispose() {
            Laya.timer.clear(this, this.onTimeRefresh);
        }
    }

    exports.GymInviteVo = GymInviteVo;
    exports.GymSkinVo = GymSkinVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GymLevelCtl {
        constructor() {
            this._isFullLevel = false;
            this.skinSlotCount = 0;
            this._slotCount = 0;
        }
        get isFullLevel() {
            if (this._isFullLevel && !this.bTimeEnd) {
                return true;
            }
            return false;
        }
        get skinSlotMax() {
            if (this._skinSlotMax === undefined) {
                this.slotCount = 0;
            }
            return this._skinSlotMax;
        }
        get bTimeEnd() {
            if (this.time > 0) {
                return this.time >= TimeUtil.serverTime;
            }
            else if (this.time == 0) {
                return false;
            }
            return false;
        }
        get curSlot() {
            if (this.cur === undefined) {
                this.slotCount = 0;
            }
            return this.cur;
        }
        set slotCount(val) {
            this._slotCount = val;
            this.update();
        }
        newList() {
            if (!this._resultList) {
                let _list = t_Gym_NPC_InnerRoom.Ins.List;
                let startIndex = 0;
                let rl = [];
                for (let i = 0; i < _list.length; i++) {
                    let cfg = _list[i];
                    let vo = {};
                    vo.start = startIndex;
                    startIndex += cfg.f_PlaidAmount;
                    vo.end = startIndex;
                    vo.cfg = cfg;
                    rl.push(vo);
                }
                this._resultList = rl;
            }
        }
        get resultList() {
            if (!this._resultList) {
                this.newList();
            }
            return this._resultList;
        }
        update() {
            let l1 = this.resultList;
            let _slotNum = this._slotCount;
            let cur;
            let serverTime = TimeUtil.serverTime;
            for (let i = 0; i < l1.length; i++) {
                let cell = l1[i];
                if (_slotNum >= cell.start) {
                    if (_slotNum < cell.end || cell.start == cell.end) {
                        if (_slotNum == cell.start && serverTime < this.time) {
                            cur = l1[i - 1];
                            this.skinSlotCount = cell.end - cell.start;
                            this._skinSlotMax = cell.cfg.f_PlaidAmount;
                        }
                        else {
                            cur = cell;
                            this.skinSlotCount = _slotNum - cell.start;
                            this._skinSlotMax = cell.cfg.f_PlaidAmount;
                        }
                        break;
                    }
                }
            }
            if (!cur) {
                this._isFullLevel = true;
                cur = l1[l1.length - 1];
                this._skinSlotMax = cur.cfg.f_PlaidAmount;
                this.skinSlotCount = this._skinSlotMax;
            }
            else {
                if (cur.cfg.f_RoomLevel == t_Gym_NPC_InnerRoom.Ins.maxLevel) {
                    this._isFullLevel = true;
                    this._skinSlotMax = cur.cfg.f_PlaidAmount;
                    this.skinSlotCount = this._skinSlotMax;
                }
            }
            this.cur = cur;
        }
        get showStep() {
            return this.skinSlotCount;
        }
        get cfgLv() {
            if (!this.cur) {
                return 0;
            }
            this.update();
            return this.cur.cfg.f_RoomLevel;
        }
        reset() {
            this.time = 0;
        }
    }

    exports.GymLevelCtl = GymLevelCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroLevelShowAttr {
    }
    class HeroBetterResult {
        constructor() {
            this.attrList = [];
            this.mFullLv = false;
        }
        toString() {
            let arr = ["NULL", "演武台", "鼓", "茶台", "燃灯", "假人"];
            return arr[this.type] + "," + JSON.stringify(this.cfg);
        }
        get cost() {
            return this.cfg.f_UpgradeCost;
        }
        get taskId() {
            return this.cfg.f_Task;
        }
        get isBreak() {
            return this.taskId != "";
        }
        getAttr(str) {
            let l = [];
            if (str) {
                let arr = str.split("|");
                for (let i = 0; i < arr.length; i++) {
                    let a = arr[i];
                    let b = a.split(":");
                    let attr = new stEquipAttr();
                    attr.id = parseInt(b[0]);
                    attr.value = parseInt(b[1]);
                    l.push(attr);
                }
            }
            return l;
        }
        getAttrStr(cfg) {
            return HeroBetterModelCtl.getFiled(this.type, cfg);
        }
        get curAttr() {
            return this.getAttr(this.getAttrStr(this.cfg));
        }
        get nextAttr() {
            if (this.nextCfg) {
                return this.getAttr(this.getAttrStr(this.nextCfg));
            }
        }
    }
    class HeroBetterModelCtl {
        static getFiled(type, cfg) {
            switch (type) {
                case EFacilityType.Drum:
                    return cfg.f_DrumAttribute;
                case EFacilityType.Dummy:
                    return cfg.f_DummyAttribute;
                case EFacilityType.Light:
                    return cfg.f_LanternAttribute;
                case EFacilityType.Tea:
                    return cfg.f_TeaAttribute;
            }
        }
        getCfg(type) {
            let l;
            switch (type) {
                case EFacilityType.Dummy:
                    l = t_Gym_Facility_Dummy.Ins.List;
                    break;
                case EFacilityType.Drum:
                    l = t_Gym_Facility_Drum.Ins.List;
                    break;
                case EFacilityType.Tea:
                    l = t_Gym_Facility_Tea.Ins.List;
                    break;
                case EFacilityType.Light:
                    l = t_Gym_Facility_lantern.Ins.List;
                    break;
            }
            return l;
        }
        getByfid(fid, type) {
            let l = this.getCfg(type);
            let cfg = l.find(item => item.f_id == fid);
            return cfg;
        }
        isFullLv(fid, type) {
            let l = this.getCfg(type);
            let nextCfg = l.find(item => item.f_id == fid + 1);
            return nextCfg == undefined;
        }
        getAttrStr(fid, type) {
            let l = this.getCfg(type);
            if (l) {
                let cell = l.find(item => item.f_id == fid);
                return HeroBetterModelCtl.getFiled(type, cell);
            }
            return;
        }
        getDrumByLv(fid, type) {
            let _result = new HeroBetterResult();
            _result.type = type;
            let l = this.getCfg(type);
            let cell = l.find(item => item.f_id == fid);
            if (cell) {
                _result.cfg = cell;
                let nextCfg = l.find(item => item.f_id == fid + 1);
                _result.nextCfg = nextCfg;
            }
            if (!_result.nextCfg) {
                _result.mFullLv = true;
            }
            let datalist = [];
            let curList = _result.curAttr;
            let nextList = _result.nextAttr;
            for (let i = 0; i < curList.length; i++) {
                let cell = new HeroLevelShowAttr();
                cell.cur = curList[i];
                if (nextList) {
                    cell.next = nextList[i];
                }
                datalist.push(cell);
            }
            _result.attrList = datalist;
            return _result;
        }
    }

    exports.HeroBetterModelCtl = HeroBetterModelCtl;
    exports.HeroBetterResult = HeroBetterResult;
    exports.HeroLevelShowAttr = HeroLevelShowAttr;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroFacilitiesVo {
        constructor() {
            this.fid = 1;
            this.taskVal = 0;
        }
        get type() {
            return this.id;
        }
        get lv() {
            switch (this.type) {
                case EFacilityType.Fight:
                    let cfg = t_Gym_Facility_Platform.Ins.GetDataById(this.fid);
                    return cfg.f_FacilityRank + 1;
                default:
                    let l = HeroHouseModel.Ins.better.getCfg(this.type);
                    let cell = l.find(item => item.f_id == this.fid);
                    return cell.f_id;
            }
        }
        get showLv() {
            return this.lv;
        }
        get isFullLv() {
            switch (this.type) {
                case EFacilityType.Fight:
                    let cfg = t_Gym_Facility_Platform.Ins.GetDataById(this.fid);
                    let nextCfg = t_Gym_Facility_Platform.Ins.List.find(item => item.f_FacilityRank == cfg.f_FacilityRank + 1);
                    return nextCfg === undefined;
                default:
                    return HeroHouseModel.Ins.better.isFullLv(this.fid, this.type);
            }
        }
        get id() {
            return this.cfg.f_id;
        }
        setIcon(img) {
            let url;
            let scaleVal = 1;
            switch (this.type) {
                case EFacilityType.Fight:
                    url = `remote/hero_house/cgxz.png`;
                    scaleVal = 0.65;
                    break;
                case EFacilityType.Drum:
                    url = `remote/hero_house/gu.png`;
                    scaleVal = 0.4;
                    break;
                case EFacilityType.Tea:
                    url = `remote/hero_house/tea_sj.png`;
                    break;
                case EFacilityType.Light:
                    url = `remote/hero_house/deng.png`;
                    scaleVal = 0.65;
                    break;
                case EFacilityType.Dummy:
                    url = `remote/hero_house/jr_sj.png`;
                    break;
            }
            img.skin = url;
            img.scaleX = img.scaleY = scaleVal;
        }
        get name() {
            return this.cfg.f_FacilityName;
        }
        get sceneName() {
            return `${this.name} Lv.${this.curLv}`;
        }
        get curLv() {
            return this.lv;
        }
    }

    exports.HeroFacilitiesVo = HeroFacilitiesVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EGymGetStatus) {
        EGymGetStatus[EGymGetStatus["CantLingQu"] = 0] = "CantLingQu";
        EGymGetStatus[EGymGetStatus["CanGet"] = 1] = "CanGet";
        EGymGetStatus[EGymGetStatus["NotChongZhi"] = 2] = "NotChongZhi";
    })(exports.EGymGetStatus || (exports.EGymGetStatus = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class InviationCtl {
        constructor() {
            this.ticket = 0;
            this.itemCfgId = ECellType.HeroInvite;
        }
        get maxCount() {
            return t_Gym_Config.Ins.cfg.f_LetterMax;
        }
        get maxSubSecond() {
            return t_Gym_Config.Ins.cfg.f_LetterIncreaseTime;
        }
        set nextRefreshTime(v) {
            this._time = v;
            if (v == 0) {
                this.ticket = this.maxSubSecond;
            }
            else {
                this.ticket = v - TimeUtil.serverTime;
            }
            this._oldCount = MainModel.Ins.mRoleData.getVal(this.itemCfgId);
            if (this._oldCount < this.maxCount) {
                this.ticketTime();
            }
            else {
                this.clearTf();
            }
        }
        ticketTime() {
            if (this.ticket > 0) {
                Laya.timer.once(1000, this, this.ticketTime);
            }
            else {
                if (MainModel.Ins.mRoleData.getVal(this.itemCfgId) < this.maxCount) {
                    HeroHouseModel.Ins.reqInviation();
                }
                else {
                    this.clearTf();
                }
            }
            this.refreshView();
            this.ticket--;
        }
        bind(timeTf) {
            this.timeTf = timeTf;
            this.timeTf.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.timeTf.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        onDisplay() {
            this.bind(this.timeTf);
            MainModel.Ins.on(MainEvent.ValChangeCell, this, this.itemChange);
            this.nextRefreshTime = this._time;
        }
        itemChange(id) {
            if (id == this.itemCfgId) {
                if (this._time == 0) {
                    let _newCount = MainModel.Ins.mRoleData.getVal(this.itemCfgId);
                    if (this._oldCount == this.maxCount && this._oldCount != _newCount) {
                        this.nextRefreshTime = TimeUtil.serverTime + t_Gym_Config.Ins.cfg.f_LetterIncreaseTime;
                    }
                }
            }
        }
        onLater() {
            HeroHouseModel.Ins.reqInviation();
        }
        onUnDisplay() {
            MainModel.Ins.off(MainEvent.ValChangeCell, this, this.itemChange);
            Laya.timer.clearAll(this);
        }
        refreshView() {
            if (this.timeTf && this.timeTf.displayedInStage) {
                if (this._time == 0) {
                    this.timeTf.text = "";
                }
                else {
                    let sub = this._time - TimeUtil.serverTime;
                    if (sub > this.maxSubSecond) {
                        sub - this.maxSubSecond;
                    }
                    if (sub <= 0) {
                        this.timeTf.text = "";
                    }
                    else {
                        this.setTimeTxt(E.getLang("GymHuifu") + TimeUtil.subTime(sub));
                    }
                }
            }
        }
        clearTf() {
            if (this.timeTf && this.timeTf.displayedInStage) {
                this.timeTf.text = "";
            }
        }
        setTimeTxt(v) {
            this.timeTf.text = v;
        }
    }

    exports.InviationCtl = InviationCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WashResult {
        get hasSwicth() {
            return this.rightAttr.length > 0;
        }
        get model() {
            return HeroHouseModel.Ins;
        }
        hasEnough(high) {
            let cell = (high ? this.highitem : this.lowitem);
            return (MainModel.Ins.isItemEnoughSt(`${cell.cfgId}-${cell.count}`, true));
        }
        getResult(type) {
            let cfg = t_Gym_refinement_Config.Ins.GetDataById(1);
            let cost = cfg.f_CostType.split("|");
            this.highitem = ItemViewFactory.convertItem(cost[1]);
            this.lowitem = ItemViewFactory.convertItem(cost[0]);
            let cell = this.model.defineList.find(item => item.id == type);
            this.leftAttr = [];
            this.rightAttr = [];
            if (cell) {
                let l = cell.datalist;
                let _left = l.find(item => item.wearable == EWearableType.Wearable);
                if (_left) {
                    this.leftAttr = _left.attrList;
                }
                let _right = l.find(item => item.wearable == EWearableType.Not);
                if (_right) {
                    this.rightAttr = _right.attrList;
                }
            }
        }
    }

    exports.WashResult = WashResult;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroDetailItemViewVo {
        constructor() {
            this.heroType = 0;
            this.showLabel = false;
            this.equipList = [];
        }
    }
    class HeroDetailLabel extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "HeroDetailLabel";
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ui.views.hero_house.ui_hero_house_detailed_item_labeUI);
            let vo = this.list[index];
            let _typeCfg = t_Gym_NPC_Type.Ins.getByType(vo.heroType);
            _skin.tf1.text = _typeCfg.f_Typename + " :" + vo.count + "/" + vo.maxCount;
            _skin.y = this.y;
            return _skin;
        }
    }
    class HeroDetailItemRender extends ui.views.hero_house.ui_hero_house_detailed_itemUI {
        constructor() {
            super();
            ButtonCtl.CreateBtn(this.yiwanbtn, this, this.onClickHandler);
        }
        onClickHandler() {
            let heroCfg = t_Gym_NPC_List.Ins.getByHeroID(this.vo.heroId);
            E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.getLang("HeroDel", heroCfg.f_name), new Laya.Handler(this, this.okHandler));
        }
        okHandler() {
            HeroHouseModel.Ins.del(this.vo.uid);
        }
    }
    class HeroDetailItem extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = "HeroDetailItem";
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, HeroDetailItemRender);
            let vo = this.list[index];
            _skin.vo = vo;
            if (vo.heroId == 0) {
                _skin.emptyTf.visible = true;
                _skin.unlock.visible = false;
                _skin.yiwanbtn.visible = false;
            }
            else {
                _skin.emptyTf.visible = false;
                _skin.unlock.visible = true;
                _skin.yiwanbtn.visible = true;
                HeroHouseModel.Ins.refreshAttrView([_skin.tf1, _skin.tf2], _skin.img, _skin.nametf, vo.attrList, vo.heroId);
                _skin.tf3.text = HeroHouseModel.Ins.getDegreeDesc(vo.degree);
                if (E.Debug) {
                    _skin.nametf.text += " uid:" + vo.uid;
                }
            }
            _skin.y = this.y;
            return _skin;
        }
    }
    class HeroHouseDetailView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this._panelCtl = new ScrollPanelControl();
        }
        onAddLoadRes() { }
        onExit() {
            this.model.off(GymEvent.RemovePop, this, this.onRemovePop);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = HeroHouseModel.Ins;
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_detailedUI();
                this.bindClose(this._ui.close1);
                this._panelCtl.init(this._ui.panel1);
            }
        }
        onInit() {
            this.model.on(GymEvent.RemovePop, this, this.onRemovePop);
            this.refreshPanel();
        }
        onRemovePop() {
            this.refreshPanel(this._panelCtl.getScrollValue());
        }
        refreshPanel(y) {
            let _dataList = this.getDataList();
            this._panelCtl.clear();
            for (let i = 0; i < _dataList.length; i++) {
                let vo = _dataList[i];
                if (vo.showLabel) {
                    this._panelCtl.split([vo], HeroDetailLabel, 50);
                }
                else {
                    this._panelCtl.split(vo.equipList, HeroDetailItem, 148);
                }
            }
            this._panelCtl.end(y);
        }
        getDataList() {
            let l = this.model.equipList;
            let _heroTypeMap = {};
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let type = cell.heroType;
                if (!_heroTypeMap[type]) {
                    _heroTypeMap[type] = [];
                }
                let temp = _heroTypeMap[type];
                temp.push(cell);
            }
            let rl = [];
            let cfg = HeroHouseModel.Ins.levelCtl.curSlot.cfg;
            let arr = cfg.f_Slots.split("|");
            for (let i = 0; i < arr.length; i++) {
                let cell = arr[i];
                let a = cell.split("-");
                let heroType = parseInt(a[0]);
                let count = parseInt(a[1]);
                let equipList = _heroTypeMap[heroType];
                equipList = equipList || [];
                let vo = new HeroDetailItemViewVo();
                vo.heroType = heroType;
                vo.showLabel = true;
                vo.count = equipList.length;
                vo.maxCount = HeroHouseModel.Ins.getUnlockCount(vo.heroType);
                rl.push(vo);
                for (let n = 0; n < count; n++) {
                    let _voData = new HeroDetailItemViewVo();
                    _voData.heroType = heroType;
                    let _equipVo = equipList[n];
                    if (_equipVo) {
                        _voData.equipList.push(_equipVo);
                    }
                    else {
                        let cell = new stGymEquip();
                        cell.heroId = 0;
                        _voData.equipList.push(cell);
                    }
                    rl.push(_voData);
                }
            }
            return rl;
        }
    }

    exports.HeroHouseDetailView = HeroHouseDetailView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroCellCtl {
        constructor(skin) {
            this.skin = skin;
            skin.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            E.ViewMgr.Open(EViewType.HeroHouseShow, null, this.cfg);
        }
        set visible(v) {
            this.skin.visible = v;
        }
        set heroId(id) {
            let name = "";
            if (E.Debug) {
                name = id.toString();
            }
            let heroCfg = t_Gym_NPC_List.Ins.getByHeroID(id);
            this.cfg = heroCfg;
            this.skin.icon.skin = HeroHouseModel.Ins.getHeroIcon(heroCfg.f_iconid);
            this.skin.nameTf.text = heroCfg.f_name + name;
            this.skin.nameTf.color = HeroHouseModel.Ins.getColorByHeroID(heroCfg.f_HeroID);
            if (HeroHouseModel.Ins.isHeroOpen(id)) {
                this.skin.lockimg.visible = false;
            }
            else {
                this.skin.lockimg.visible = true;
            }
        }
    }
    class HeroHouseHandbookItemView extends ui.views.hero_house.ui_hero_house_handbook_itemUI {
        constructor() {
            super();
            this.cellList = [];
            for (let i = 0; i < 5; i++) {
                this.cellList.push(new HeroCellCtl(this[`a${i}`]));
            }
            this.activityCtl = ButtonCtl.CreateBtn(this.activityBtn, this, this.onActivityHandler);
            this.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        onDisplay() {
            HeroHouseModel.Ins.on(GymEvent.BondUpadte, this, this.refresh);
        }
        onUnDisplay() {
            HeroHouseModel.Ins.off(GymEvent.BondUpadte, this, this.refresh);
        }
        onActivityHandler() {
            let req = new GymBond_req();
            req.fid = this.cfg.f_id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        buildAttr(l1) {
            let s = "";
            for (let i = 0; i < l1.length; i++) {
                let arr = l1[i].split(":");
                let id = parseInt(arr[0]);
                let val = parseInt(arr[1]);
                let v = attrConvert(id, val);
                s += `${MainModel.Ins.getAttrNameIdByID(id)}${v} `;
            }
            return s;
        }
        refresh() {
            let cfg = this.dataSource;
            if (!cfg) {
                return;
            }
            this.cfg = cfg;
            this.titleTf.text = cfg.f_BondName + "";
            this.titleTf.color = HeroHouseModel.Ins.getColorByQua(cfg.f_BondQuality);
            let arr = cfg.f_NpcIds.split("|");
            this.refreshHeroList(arr);
            this.lefttf1.text = this.buildAttr(cfg.f_bondAttr.split("|"));
            this.daishoujitf.visible = false;
            this.righttf1.visible = false;
            this.activityCtl.visible = false;
            let status = HeroHouseModel.Ins.getFetterStatus(cfg.f_id);
            DotManager.removeDot(this);
            switch (status) {
                case EGymHeroFetterStatus.CanActivied:
                    this.activityCtl.visible = true;
                    DotManager.addDot(this);
                    break;
                case EGymHeroFetterStatus.Finished:
                    this.righttf1.visible = true;
                    break;
                case EGymHeroFetterStatus.WaitFind:
                    this.daishoujitf.visible = true;
                    break;
            }
        }
        refreshHeroList(heroIdList) {
            for (let i = 0; i < this.cellList.length; i++) {
                let cell = this.cellList[i];
                let _heroId = parseInt(heroIdList[i]);
                if (isNaN(_heroId)) {
                    cell.visible = false;
                }
                else {
                    cell.visible = true;
                    cell.heroId = _heroId;
                }
            }
        }
    }
    class HeroHouseHandbookView extends ViewBase {
        constructor() {
            super(...arguments);
            this._tanCommon = new TabCommonCtl();
            this._qua = 0;
            this.quaList = [];
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
            HeroHouseModel.Ins.off(GymEvent.BondUpadte, this, this.onUpdateTop);
            HeroHouseModel.Ins.off(GymEvent.RedUpdate, this, this.onRedUpdate);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = HeroHouseModel.Ins;
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_handbookUI();
                this._tanCommon.init(ui.views.hero_house.ui_hero_house_tab_itemUI, this._ui.tabCon, "ui_hero_house_tab_itemUI", this, this.onSelectHandler, this.itemTabHandler);
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = HeroHouseHandbookItemView;
                this._ui.list.renderHandler = new Laya.Handler(this, this.itemHandler);
                ButtonCtl.CreateBtn(this._ui.attrBtn, this, this.onAttrOpen);
            }
        }
        onAttrOpen() {
            this.model.showAttr();
        }
        itemHandler(item) {
            item.refresh();
        }
        onSelectHandler(index) {
            let _qua = this.quaList[index];
            this._qua = _qua;
            let l1 = t_Gym_NPC_Bond.Ins.getListByQua(_qua);
            this._ui.list.array = l1;
            this._ui.list.scrollTo(0);
            this.onUpdateTop();
        }
        itemTabHandler(tabSkin, index, sel, data) {
            if (!sel) {
                tabSkin.bg2.visible = true;
                tabSkin.bg1.visible = false;
                tabSkin.tf1.y = 10;
            }
            else {
                tabSkin.bg2.visible = false;
                tabSkin.bg1.visible = true;
                tabSkin.tf1.y = 14;
            }
            let cfg = t_Gym_NPC_Quality.Ins.getByQua(data);
            tabSkin.tf1.text = cfg.f_NPCQuality;
            tabSkin.tf1.color = `#${cfg.f_Color}`;
            if (HeroHouseModel.Ins.hasQuaHandBookRed(data)) {
                DotManager.addDot(tabSkin);
            }
            else {
                DotManager.removeDot(tabSkin);
            }
        }
        onUpdateTop() {
            let l1 = t_Gym_NPC_Bond.Ins.getListByQua(this._qua);
            let have = this.model.getBookOpenCount(this._qua);
            this._ui.tf3.text = E.LangMgr.getLang("ShoujiJindu", have, l1.length);
        }
        onRedUpdate() {
            this._tanCommon.udpateView();
            this._ui.list.refresh();
        }
        onInit() {
            MainModel.Ins.mainMask = true;
            HeroHouseModel.Ins.on(GymEvent.RedUpdate, this, this.onRedUpdate);
            HeroHouseModel.Ins.on(GymEvent.BondUpadte, this, this.onUpdateTop);
            this.quaList = t_Gym_NPC_Bond.Ins.quaList;
            this._tanCommon.refresh(this.quaList, 0);
        }
    }

    exports.HeroHouseHandbookView = HeroHouseHandbookView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroHouseMainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMaskClick = false;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("hero_house.atlas");
            this.addAtlas("huanzhuang.atlas");
        }
        onSetingClick() {
            this.model.autoCtl.onClickHandler();
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = HeroHouseModel.Ins;
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_main_viewUI();
                this.bindClose(this._ui.close1);
                this.model.inviationCtl.bind(this._ui.timeTf);
                this.setbtnCtl = ButtonCtl.CreateBtn(this._ui.setbtn, this, this.onSetingClick);
                this._ui.bg112.on(Laya.Event.CLICK, this, this.onOpenTask);
                this.btnList.push(ButtonCtl.CreateBtn(this._ui.houseBtn, this, this.onHouseClick), ButtonCtl.CreateBtn(this._ui.heroBtn, this, this.onHouseSelClick), ButtonCtl.CreateBtn(this._ui.lvBtn, this, this.onHouseLvClick), ButtonCtl.CreateBtn(this._ui.shopBtn, this, this.onShopHandler), ButtonCtl.CreateBtn(this._ui.ywBtn, this, this.onInviteHandler), ButtonCtl.CreateBtn(this._ui.yaoqing5, this, this.onFiveInvite), ButtonCtl.CreateBtn(this._ui.qipao, this, this.onQiPaoHandler), ButtonCtl.CreateBtn(this._ui.shihaiBtn, this, this.onShengShiHandler), ButtonCtl.CreateBtn(this._ui.help1, this, this.openChangguanHelp), ButtonCtl.CreateBtn(this._ui.heroHelp, this, this.openWuhunHelp), this.setbtnCtl);
                ValCtl.Create(this._ui.shtf1, this._ui.shouhun1, ECellType.TokenMoney);
                ValCtl.Create(this._ui.shtf2, this._ui.shouhun2, ECellType.WuXing);
                this._ui.tasklist.itemRender = ui.views.hero_house.ui_hero_house_attrUI;
                this._ui.tasklist.renderHandler = new Laya.Handler(this, this.onAttrRenderHandler);
                this._ui.tasklist.mouseEnabled = false;
                this._ui.midList.itemRender = ui.views.hero_house.ui_hero_house_attr1UI;
                this._ui.midList.renderHandler = new Laya.Handler(this, this.onAttrHandler);
                this._ui.rightList1.itemRender = ui.views.hero_house.ui_hero_house_attr1UI;
                this._ui.rightList1.renderHandler = new Laya.Handler(this, this.onAttrHandler);
                let midCtl = new TriangleHideCtl();
                midCtl.bind(this._ui.midList, this._ui.midIcon);
                this.midCtl = midCtl;
                let rightCtl = new TriangleHideCtl();
                rightCtl.bind(this._ui.rightList1, this._ui.downIcon);
                this.rightCtl = rightCtl;
                let gu = ButtonCtl.CreateBtn(this._ui.gu, this, this.onBigHandler);
                gu.data = EFacilityType.Drum;
                let tea = ButtonCtl.CreateBtn(this._ui.teaBtn, this, this.onBigHandler);
                tea.data = EFacilityType.Tea;
                let twBtn = ButtonCtl.CreateBtn(this._ui.twBtn, this, this.onBigHandler);
                twBtn.data = EFacilityType.Fight;
                let lightBtn = ButtonCtl.CreateBtn(this._ui.lightBtn, this, this.onBigHandler);
                lightBtn.data = EFacilityType.Light;
                let fightGuBtn = ButtonCtl.CreateBtn(this._ui.fightGuBtn, this, this.onBigHandler, false);
                this._ui.fightGuBtn.skin = "";
                fightGuBtn.data = EFacilityType.Dummy;
                this._ui.ywStageCon.alpha = 1.0;
                this.packageBtnCtl = ButtonCtl.CreateBtn(this._ui.packageBtn, this, this.onPackHandler);
                this._ui.aniCon.y = this._ui.fightGuBtn.y + 112;
                this.initEffect();
                this.btnList.push(gu, tea, twBtn, lightBtn, fightGuBtn, this.packageBtnCtl);
            }
        }
        onAutoHandler() {
            this._ui.chilun.rotation += 1;
        }
        set gear(v) {
            if (v) {
                Laya.timer.frameLoop(1, this, this.onAutoHandler);
            }
            else {
                Laya.timer.clear(this, this.onAutoHandler);
            }
        }
        updateSetBtnEvt() {
            if (MainModel.Ins.heroPackVo.canProxy) {
                this.setbtnCtl.visible = true;
            }
            else {
                this.setbtnCtl.visible = false;
            }
        }
        initEffect() {
            this.teaEff = new SimpleEffect(this._ui.teaEff, "o/spine/gym/gym");
            this.teaEff.autoPlay = true;
            this.lightEff = new SimpleEffect(this._ui.lightEff, "o/spine/gym/gym");
            this.lightEff.autoPlay = true;
            this.guEff = new SimpleEffect(this._ui.guEff, "o/spine/gym/gym");
            this.guEff.autoPlay = true;
        }
        set drumVisible(v) {
            if (v) {
                this.guEff.play(0, true);
            }
            else {
                this.guEff.stop();
            }
            this._ui.guEff.visible = v;
        }
        playEffect() {
            this.teaEff.play(1, true);
            this.lightEff.play(2, true);
        }
        onLoopCheck() {
            let vo = HeroHouseModel.Ins.animInviteVo;
            if (vo) {
                this._ui.qipao.visible = false;
            }
            else {
                this._ui.qipao.visible = true;
            }
        }
        onPackHandler() {
            E.ViewMgr.Open(EViewType.HeroHousePackage);
        }
        openChangguanHelp() {
            E.ViewMgr.openHelpView("changguantitle", "changguandesc");
        }
        openWuhunHelp() {
            E.ViewMgr.openHelpView("wuhuntitle", "wuhundesc");
        }
        onBigHandler(type) {
            this.model.selLevelUpType = type;
            E.ViewMgr.Open(EViewType.HeroHouseLevelUp);
        }
        onAttrHandler(item) {
            let attr = item.dataSource;
            let id = attr.id;
            let count = attr.value;
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id);
            item.valTf.text = attrConvert(id, count);
        }
        onAttrRenderHandler(cell) {
            let vo = cell.dataSource;
            let cfg = t_Gym_Mission_List.Ins.GetDataById(vo.fid);
            cell.tf1.text = cfg.f_MissionName;
            let max = cfg.f_RewardsType;
            if (cfg.f_TaskType == EGymTaskType.GetHero) {
                max = cfg.f_RewardsType.split('|')[0];
            }
            cell.valTf.text = `${vo.count}/${max}`;
        }
        onShengShiHandler() {
            E.ViewMgr.Open(EViewType.HeroHouseKnowLedge);
        }
        onQiPaoHandler() {
            E.ViewMgr.Open(EViewType.HeroHouseStorge);
        }
        onFiveInvite() {
            this.model.invite(EInviteType.Five, true);
        }
        onInviteHandler() {
            this.model.invite(EInviteType.One, true);
        }
        onOpenTask() {
            E.ViewMgr.Open(EViewType.HeroHouseTask);
        }
        onShopHandler() {
            E.ViewMgr.Open(EViewType.HeroHouseShop);
        }
        onHouseClick() {
            E.ViewMgr.Open(EViewType.HeroHouseMapSel);
        }
        onHouseSelClick() {
            E.ViewMgr.Open(EViewType.HeroHouseHandbook);
        }
        onHouseLvClick() {
            E.ViewMgr.Open(EViewType.HeroHouseLevelUp);
        }
        onRemovePop() {
            this.onUpdatePopView();
        }
        onRefreshRed() {
            if (HeroHouseModel.Ins.mHandbookRed) {
                DotManager.addDot(this._ui.heroBtn);
            }
            else {
                DotManager.removeDot(this._ui.heroBtn);
            }
            if (MainModel.Ins.heroPackVo.type == EGymGetStatus.CanGet) {
                DotManager.addDot(this.packageBtnCtl.skin);
            }
            else {
                DotManager.removeDot(this.packageBtnCtl.skin);
            }
        }
        onInit() {
            this._ui.aniCon.addChild(this.model.heroAnim.container);
            let req = new GymInviteGetList_req();
            SocketMgr.Ins.SendMessageBin(req);
            E.ViewMgr.Close(EViewType.Main);
            this.playEffect();
            this.model.on(GymEvent.RemovePop, this, this.onRemovePop);
            this.model.on(GymEvent.InvitePopUpdate, this, this.onUpdatePopView);
            this.model.on(GymEvent.FightAnimPlayEnd, this, this.onUpdatePopView);
            this.model.on(GymEvent.MapUdapate, this, this.onUpdateMapName);
            this.model.on(GymEvent.TaskUpdate, this, this.onUdapteTask);
            this.model.on(GymEvent.FacilitiesUpdate, this, this.onUpdateView);
            this.model.on(GymEvent.WashSucceed, this, this.onUpdateView);
            this.model.on(GymEvent.MainAttrUpdate, this, this.onUpdateView);
            this.model.on(GymEvent.RedUpdate, this, this.onRefreshRed);
            this.model.on(GymEvent.SetGear, this, this.onSetGear);
            MainModel.Ins.on(MainEvent.ValChangeCell, this, this.onUpdateInviteLetter);
            MainModel.Ins.on(MainEvent.GymCardUpdate, this, this.onRefreshRed);
            MainModel.Ins.on(MainEvent.GymCardUpdate, this, this.updateSetBtnEvt);
            this.onUpdateInviteLetter();
            this.onUpdatePopView();
            this.onUpdateMapName();
            this.onUdapteTask();
            this.updateAttrView();
            this.onUpdateFacilites();
            this.updateSetBtnEvt();
            this.gear = this.model.autoCtl.isAuto;
            Laya.timer.loop(1000, this, this.onLoopCheck);
            let ctl = this.model.autoCtl;
            if (!ctl.isAuto || ctl.isAuto && ctl.cur) {
                this.model.openPop();
            }
            this.onRefreshRed();
        }
        onSetGear(v) {
            this.gear = v;
        }
        onUpdateView() {
            this.updateAttrView();
            this.onUpdateFacilites();
        }
        onUpdateFacilites() {
            this._ui.teaTf.text = this.model.getNameByType(EFacilityType.Tea);
            this._ui.ywttf.text = this.model.getNameByType(EFacilityType.Fight);
            this._ui.fightgutf.text = this.model.getNameByType(EFacilityType.Drum);
            this._ui.playerTf.text = this.model.getNameByType(EFacilityType.Dummy);
            this._ui.lightTf.text = this.model.getNameByType(EFacilityType.Light);
        }
        updateAttrView() {
            this._ui.midList.array = this.model.defineShowAttr;
            this._ui.midList.scrollTo(0);
            this._ui.rightList1.array = this.model.heroAttr;
            this._ui.rightList1.scrollTo(0);
            this.midCtl.onChangeEvt();
            this.rightCtl.onChangeEvt();
        }
        onUdapteTask() {
            this._ui.tasklist.array = this.model.taskList;
            this._ui.tasklist.refresh();
            this._ui.tasklist.scrollTo(0);
        }
        onExit() {
            this.model.heroAnim.removeSelf();
            this.gear = false;
            E.ViewMgr.Open(EViewType.Main);
            this.teaEff.stop();
            this.teaEff.dispose();
            this.guEff.stop();
            this.guEff.dispose();
            this.lightEff.stop();
            this.lightEff.dispose();
            MainModel.Ins.off(MainEvent.GymCardUpdate, this, this.updateSetBtnEvt);
            this.model.off(GymEvent.RemovePop, this, this.onRemovePop);
            this.model.off(GymEvent.InvitePopUpdate, this, this.onUpdatePopView);
            this.model.off(GymEvent.FightAnimPlayEnd, this, this.onUpdatePopView);
            this.model.off(GymEvent.MapUdapate, this, this.onUpdateMapName);
            this.model.off(GymEvent.TaskUpdate, this, this.onUdapteTask);
            this.model.off(GymEvent.FacilitiesUpdate, this, this.onUpdateView);
            this.model.off(GymEvent.WashSucceed, this, this.onUpdateView);
            this.model.off(GymEvent.MainAttrUpdate, this, this.onUpdateView);
            this.model.off(GymEvent.RedUpdate, this, this.onRefreshRed);
            this.model.off(GymEvent.SetGear, this, this.onSetGear);
            MainModel.Ins.off(MainEvent.ValChangeCell, this, this.onUpdateInviteLetter);
            MainModel.Ins.off(MainEvent.GymCardUpdate, this, this.onRefreshRed);
            Laya.timer.clear(this, this.onLoopCheck);
            spineRes.GC();
        }
        onUpdateInviteLetter(id = ECellType.HeroInvite) {
            if (id == ECellType.HeroInvite || id == ECellType.HighHeroInvite) {
                let max = t_Gym_Config.Ins.cfg.f_LetterMax;
                this._ui.tf6.text = this.model.curInviteLetterCount + "/" + max + "";
                if (E.Debug) {
                    console.log("设置邀请函数量");
                }
            }
        }
        onUpdateMapName() {
            let cfg = this.model.curMapCfg;
            if (cfg) {
                this._ui.controyTf.text = cfg.f_MapName;
                this._ui.controyTf.color = cfg.f_Color;
            }
            else {
                this._ui.controyTf.text = "";
            }
        }
        onUpdatePopView() {
            let cell = this.model.popInfo;
            let v = false;
            this._ui.qipaoTf.text = this.model.authCount;
            this._ui.juanzhou.skin = this.model.authIcon;
            v = this.model.bMaxIcon;
            this._ui.maxIcon.visible = v;
            if (cell.needAnimCount <= 0) {
                this._ui.rankTf.visible = false;
            }
            else {
                this._ui.rankTf.visible = true;
                this._ui.rankTf.text = cell.needAnimCount + '/' + t_Gym_Config.Ins.cfg.f_Queue;
            }
        }
    }

    exports.HeroHouseMainView = HeroHouseMainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroHousePackage extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        get packVo() {
            return MainModel.Ins.heroPackVo;
        }
        onAddLoadRes() {
            this.addAtlas("huodong.atlas");
        }
        onExit() {
            MainModel.Ins.off(MainEvent.GymCardUpdate, this, this.onRefreshHandler);
            this.timeCtl.stop();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_chongzhi_viewUI();
                this.chongzhiCtl = ButtonCtl.CreateBtn(this._ui.btn1, this, this.onChongZhi);
                this.rateCtl = new RateBtn01Ctl(this._ui.ratebtn, this, this.onChongZhi, ESkinRateBtn.Yellow);
                this.lingquCtl = ButtonCtl.CreateBtn(this._ui.lingqu, this, this.onLingquHandler);
                this.timeCtl = new TimeCtlV2(this._ui.sytimeTf, "{0}");
                this.timeCtl.style = ETimeShowStyle.HMS;
            }
        }
        onLingquHandler() {
            let req = new Reward_req();
            req.type = EFightType.HeroPackage;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onChongZhi() {
            ActivityModel.Ins.recharge(this.cfg.f_PurchaseID);
        }
        onTimeEnd() {
            this._ui.sytimeTf.text = "";
        }
        onRefreshHandler() {
            this.cfg = t_Pack_Gym.Ins.GetDataById(1);
            let itemVo = ItemViewFactory.parseItem(this.cfg.f_Item);
            this._ui.yuanbaoImg.skin = IconUtils.getIcon(itemVo.id);
            this._ui.moneyTf.text = itemVo.count.toString();
            this.timeCtl.stop();
            this._ui.subcon.visible = false;
            this.lingquCtl.visible = false;
            this._ui.sp1.visible = false;
            this._ui.todayIsGet.visible = false;
            this._ui.sysy.visible = false;
            DotManager.removeDot(this.lingquCtl.skin);
            if (this.packVo.type == EGymGetStatus.NotChongZhi) {
                this._ui.sp1.visible = true;
                let purchCfg = t_Purchase_PriceProxy.Ins.GetDataById(this.cfg.f_PurchaseID);
                this._ui.tf1.text = `${StringUtil.moneyCv(purchCfg.f_price)}元解锁`;
                let btn = this.chongzhiCtl;
                if (purchCfg.f_isVoucher == EShopPayType.Voucher) {
                    btn = this.rateCtl.btnCtl;
                    this.rateCtl.cfg = purchCfg;
                }
                RateBtnUtils.Refresh(btn, this.chongzhiCtl, this.rateCtl.btnCtl);
            }
            else {
                if (this.packVo.isTryout) {
                    this._ui.sysy.visible = true;
                    let sub = this.packVo.tryoutSubTime;
                    if (sub > 0) {
                        this.timeCtl.start(sub);
                        this.timeCtl.on(Laya.Event.COMPLETE, this, this.onTimeEnd);
                    }
                }
                else {
                    this._ui.dattf.text = this.packVo.day + "";
                    this._ui.subcon.visible = true;
                }
                if (this.packVo.type == EGymGetStatus.CanGet) {
                    this.lingquCtl.visible = true;
                    DotManager.addDot(this.lingquCtl.skin);
                }
                else if (this.packVo.type == EGymGetStatus.CantLingQu) {
                    this._ui.todayIsGet.visible = true;
                }
            }
            this.layoutUI();
        }
        layoutUI() {
            this._ui.dattf.x = this._ui.img1.x + this._ui.img1.width;
            this._ui.img2.x = this._ui.dattf.x + this._ui.dattf.textField.width;
        }
        onInit() {
            MainModel.Ins.on(MainEvent.GymCardUpdate, this, this.onRefreshHandler);
            this.onRefreshHandler();
        }
    }

    exports.HeroHousePackage = HeroHousePackage;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroHouseReadView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
            this.model.autoCtl.cur = null;
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = HeroHouseModel.Ins;
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_readUI();
                ButtonCtl.CreateBtn(this._ui.ywBtn, this, this.onForgetHandler);
                ButtonCtl.CreateBtn(this._ui.jiChengBtn, this, this.onInheritHandler);
                ButtonCtl.CreateBtn(this._ui.failOk, this, this.failOkHandler);
                ButtonCtl.CreateBtn(this._ui.jiyuanLingqu, this, this.jiyuanLingquHandler);
                this._ui.jiyuanDescTf.text = "";
                this._ui.failDescTf.text = E.getLang("GymFail");
            }
        }
        refrashAttr(l) {
            let arr = [this._ui.tf2, this._ui.tf3];
            for (let i = 0; i < arr.length; i++) {
                let tf = arr[i];
                if (i < l.length) {
                    let cell = l[i];
                    let val = attrConvert(cell.id, cell.value);
                    tf.text = `${MainModel.Ins.getAttrNameIdByID(cell.id)}: ${val}`;
                }
                else {
                    tf.text = "";
                }
            }
        }
        failOkHandler() {
            this.doForget();
            this.Close();
        }
        jiyuanLingquHandler() {
            this.doForget();
            this.Close();
        }
        onForgetHandler() {
            this.doForget();
            this.Close();
        }
        doForget() {
            this.model.forget(this.model.firstVo);
        }
        onInheritHandler() {
            let heroType = this.vo.heroCfg.f_HeroType;
            if (this.model.hasEmpty(heroType)) {
                this.model.equip(this.vo.uid);
            }
            else {
                E.ViewMgr.Open(EViewType.HeroHouseSwicth, null, this.vo);
            }
            this.Close();
        }
        onRefreshHandler() {
            let vo = this.model.firstVo;
            this.vo = vo;
            if (vo) {
                if (E.Debug) {
                    if (!this.tf) {
                        this.tf = new Laya.Label();
                        this.tf.color = "#ffffff";
                        this.tf.fontSize = 24;
                        this._ui.addChild(this.tf);
                    }
                    this.tf.text = `uid:${vo.uid} heroType:${vo.heroCfg.f_HeroType}`;
                }
                switch (vo.mData.result) {
                    case EGymAction.Live:
                        this._ui.getNewJiYuan.visible = false;
                        this._ui.getFail.visible = true;
                        this._ui.getNewHero.visible = false;
                        break;
                    case EGymAction.ShowInherit:
                        this._ui.getNewJiYuan.visible = false;
                        this._ui.getFail.visible = false;
                        this._ui.getNewHero.visible = true;
                        let _heroCfg = t_Gym_NPC_List.Ins.getByHeroID(vo.mData.heroId);
                        this._ui.nameTf.text = _heroCfg.f_name;
                        this._ui.nameTf.color = this.model.getColorByQua(_heroCfg.f_HeroQuality);
                        this._ui.finishTf.text = this.model.getDegreeDesc(vo.degree);
                        let _typeCfg = t_Gym_NPC_Type.Ins.getByType(_heroCfg.f_HeroType);
                        this._ui.tf0.text = "类别:" + _typeCfg.f_Typename;
                        this._ui.tf1.text = "地区:" + HeroHouseModel.Ins.getRegion(_heroCfg.f_HeroID);
                        this._ui.quality1.skin = IconUtils.getQuaIcon(_heroCfg.f_HeroQuality);
                        this._ui.icon1.skin = HeroHouseModel.Ins.getHeroIcon(_heroCfg.f_iconid);
                        this.refrashAttr(vo.attrlist);
                        let _rewardItem2 = vo.rewardItem;
                        this._ui.tqIcon.skin = IconUtils.getIconByCfgId(_rewardItem2.id);
                        this._ui.tf4.text = StringUtil.val2m(_rewardItem2.count);
                        break;
                    case EGymAction.ShowReward:
                        this._ui.getNewJiYuan.visible = true;
                        let _heroCfg1 = t_Gym_NPC_List.Ins.getByHeroID(vo.mData.heroId);
                        this._ui.quality1.skin = IconUtils.getQuaIcon(_heroCfg1.f_HeroQuality);
                        this._ui.icon2.skin = HeroHouseModel.Ins.getHeroIcon(_heroCfg1.f_iconid);
                        this._ui.getFail.visible = false;
                        this._ui.getNewHero.visible = false;
                        let _rewardItem = vo.rewardItem;
                        this._ui.moneyIcon.skin = IconUtils.getIconByCfgId(_rewardItem.id);
                        this._ui.moneyTf.text = StringUtil.val2m(_rewardItem.count);
                        this._ui.jiyuanDescTf.text = _heroCfg1.f_info;
                        break;
                }
            }
        }
        onInit() {
            this.onRefreshHandler();
        }
    }

    exports.HeroHouseReadView = HeroHouseReadView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MapSel {
    }
    class MapCondition {
    }
    class MapSelectItem extends ui.views.hero_house.ui_hero_house_map_bot_item_viewUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onSelectHandler);
        }
        onSelectHandler() {
            let mapView = E.ViewMgr.Get(EViewType.HeroHouseMapSel);
            let l = mapView.mapDataList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.index == this.vo.index) {
                    cell.sel = true;
                }
                else {
                    cell.sel = false;
                }
            }
            mapView.refreshView();
        }
    }
    class HeroHouseSelectMapView extends ViewBase {
        onAddLoadRes() { }
        onExit() {
            this.model.off(GymEvent.MapUdapate, this, this.onUpdateViewEvt);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = HeroHouseModel.Ins;
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_map_sel_viewUI;
                this._ui.list2.itemRender = MapSelectItem;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.itemRender);
                this._ui.list2.selectEnable = true;
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = ui.views.hero_house.ui_hero_house_map_sel_item_viewUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this.unlockCtl = ButtonCtl.CreateBtn(this._ui.unlockBtn, this, this.onUnlockHandler);
                this.selectBtnCtl = ButtonCtl.CreateBtn(this._ui.selectBtn, this, this.onSelectMapHandler);
                this.addBlackBg(0.5);
            }
        }
        onUnlockHandler() {
            let req = new GymLock_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        set bLockCondition(v) {
            this._ui.tf2.visible = v;
            this.bLockList = v;
        }
        get bLockListShow() {
            return this._ui.list1.visible;
        }
        set bLockList(v) {
            this._ui.list1.visible = v;
        }
        onSelectMapHandler() {
            let req = new GymGoto_req();
            req.mapId = this._mapSelVo.cfg.f_id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onRenderHandler(item) {
            let _data = item.dataSource;
            let cell = HeroHouseModel.Ins.getMapTaskDesc(_data);
            if (cell.empty) {
                item.tf1.text = "";
            }
            else {
                item.tf1.text = cell.desc;
            }
            if (!cell.empty && cell.finished) {
                item.gouimg.visible = true;
            }
            else {
                item.gouimg.visible = false;
            }
        }
        itemRender(item) {
            let vo = item.dataSource;
            item.vo = vo;
            if (vo.sel) {
                item.selimg.visible = true;
            }
            else {
                item.selimg.visible = false;
            }
            if (HeroHouseModel.Ins.isMapLocked(vo.cfg.f_id)) {
                item.lockimg1.visible = true;
            }
            else {
                item.lockimg1.visible = false;
            }
            item.icon.skin = this.model.getMapIcon(vo.cfg.f_Icon);
        }
        getSelectVo() {
            let l = this.mapDataList;
            return l.find(item => item.sel == true);
        }
        hasNoFinished(cfg, l) {
            for (let i = 0; i < l.length; i++) {
                let cell = HeroHouseModel.Ins.getMapTaskDesc(l[i]);
                if (!cell.finished) {
                    return true;
                }
            }
        }
        refreshView() {
            this._ui.list2.refresh();
            let selVo = this.getSelectVo();
            this._mapSelVo = selVo;
            this._ui.tf1.text = selVo.cfg.f_MapName;
            this._ui.qizhiIcon.skin = this.model.getMapIcon(selVo.cfg.f_Icon);
            if (HeroHouseModel.Ins.isMapLocked(selVo.cfg.f_id)) {
                this._ui.lockmask1.visible = true;
            }
            else {
                this._ui.lockmask1.visible = false;
            }
            this._ui.tf1.color = selVo.cfg.f_Color;
            let vo = selVo;
            this._ui.img1.visible = false;
            this.unlockCtl.visible = false;
            this.selectBtnCtl.visible = false;
            this._ui.tf6.visible = false;
            this.bLockCondition = false;
            let hasDesc = false;
            if (HeroHouseModel.Ins.isSelMap(vo.cfg.f_id)) {
                this._ui.tf7.text = "当前区域";
                this._ui.img1.visible = true;
                hasDesc = true;
            }
            else if (this.model.isNextUnlock(vo.cfg.f_id)) {
                this.bLockCondition = true;
                this.unlockCtl.visible = true;
            }
            else {
                if (this.model.info.mapId >= vo.cfg.f_id) {
                    this.selectBtnCtl.visible = true;
                    hasDesc = true;
                }
                else {
                    this._ui.tf6.visible = true;
                    this._ui.tf6.text = "需解锁前置任务";
                }
            }
            let _mapConditions = [];
            if (this.bLockListShow) {
                let condition = selVo.cfg.f_Condition.split("|");
                for (let i = 0; i < condition.length; i++) {
                    let cell = new MapCondition();
                    cell.task = condition[i];
                    _mapConditions.push(cell);
                }
                if (selVo.cfg.f_Adventure_Level) {
                    let cell = new MapCondition();
                    cell.passId = selVo.cfg.f_Adventure_Level;
                    _mapConditions.push(cell);
                }
            }
            this._ui.list1.array = _mapConditions;
            if (this.hasNoFinished(selVo.cfg, _mapConditions)) {
                this._ui.tf5.text = "未解锁";
            }
            else {
                this._ui.tf5.text = "解锁";
            }
            if (hasDesc) {
                this._ui.titleTf1.visible = true;
                this._ui.heroInfoTf.text = selVo.cfg.f_Info;
            }
            else {
                this._ui.titleTf1.visible = false;
                this._ui.heroInfoTf.text = "";
            }
        }
        onUpdateViewEvt() {
            this.refreshView();
        }
        mapDataInit() {
            if (!this.mapDataList) {
                this.mapDataList = [];
                let l = t_Gym_Map.Ins.List;
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    let vo = new MapSel();
                    vo.index = i;
                    vo.cfg = cell;
                    vo.sel = false;
                    this.mapDataList.push(vo);
                }
            }
        }
        get selectMapIndex() {
            let cell = this.mapDataList.find(item => item.sel == true);
            return cell ? cell.index : 0;
        }
        selectDefault() {
            let index = this.selectMapIndex;
            this.mapDataList[index].sel = true;
        }
        onInit() {
            this.mapDataInit();
            this.model.on(GymEvent.MapUdapate, this, this.onUpdateViewEvt);
            this.selectDefault();
            this._ui.list2.array = this.mapDataList;
            this._ui.list2.scrollTo(0);
            this.refreshView();
        }
    }

    exports.HeroHouseSelectMapView = HeroHouseSelectMapView;
    exports.MapCondition = MapCondition;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroShopItemRender extends ui.views.hero_house.ui_hero_house_shop_itemUI {
        constructor() {
            super();
            this.doubleIcon.visible = false;
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            MainModel.Ins.buy(this._needItem.cfgId, this._needItem.count, this._showItem.cfgId, this._showItem.count, new Laya.Handler(this, this.okBuyHandler), EBuyType.Item, true);
        }
        okBuyHandler() {
            let req = new GymShop_req();
            req.fid = this.cfg.f_id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        refresh() {
            this.cfg = this.dataSource;
            if (this.cfg.f_PageID == EGymShopType.GoldShop) ;
            let _showItem = ItemViewFactory.convertItemList(this.cfg.f_ItemID)[0];
            this._showItem = _showItem;
            let needItem = ItemViewFactory.convertItemList(this.cfg.f_TokenPrice)[0];
            this._needItem = needItem;
            this.moneyIcon.skin = needItem.getIcon();
            this.moneyNumLabel.text = needItem.count.toString();
            this.itemNameLabel.text = _showItem.getName();
            this.countLabel.text = _showItem.count + "";
            this.icon.skin = _showItem.getIcon();
        }
    }
    class HeroHouseShopView extends ViewBase {
        constructor() {
            super(...arguments);
            this.tabsCtl = new TabControl();
            this.mMask = true;
        }
        onAddLoadRes() {
        }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_shopUI();
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = HeroShopItemRender;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onHeroShopItemRender);
                const tabsSkin = [this._ui.t0, this._ui.t1];
                this.tabsCtl.init(tabsSkin, new Laya.Handler(this, this.onTabSelectHandler));
                let arr = E.LangMgr.getLang("HeroShops").split("|");
                this.tabsCtl.setData(arr);
                this._moneyCtl = new ValCtl(this._ui.moneyInfo.moneyCountLabel, this._ui.moneyInfo.icon);
            }
        }
        onTabSelectHandler(v) {
            let l = t_Gym_Shop.Ins.getListByType(v);
            this._ui.list1.array = l;
            let type = 0;
            switch (v) {
                case EGymShopType.GoldShop:
                    type = ECellType.WuXing;
                    break;
                case EGymShopType.TokenShop:
                    type = ECellType.GOLD;
                    break;
            }
            this._moneyCtl.setType(type);
        }
        onHeroShopItemRender(item) {
            item.refresh();
        }
        onInit() {
            this.tabsCtl.selectIndex = 0;
            this._ui.list1.refresh();
            this._ui.list1.scrollTo(0);
        }
    }

    exports.HeroHouseShopView = HeroHouseShopView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroHouseShowView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_showUI();
                this.setMouseBg(this._ui.bg1);
            }
        }
        onInit() {
            this.cfg = this.Data;
            this._ui.nametf.text = this.cfg.f_name;
            this._ui.nametf.color = HeroHouseModel.Ins.getColorByHeroID(this.cfg.f_HeroID);
            this._ui.item.lockimg.visible = false;
            this._ui.item.nameTf.visible = false;
            this._ui.item.icon.skin = HeroHouseModel.Ins.getHeroIcon(this.cfg.f_iconid);
            this._ui.descTf.text = this.cfg.f_desc;
            this._ui.attr.text = this.buildAttr();
            let typeName = "江湖人士";
            if (this.cfg.f_HeroType != 0) {
                let imgCfg = t_Gym_NPC_Image.Ins.getCfgByTypeID(this.cfg.f_HeroType);
                typeName = imgCfg.f_Typename;
                this._ui.quaTf.text = `${HeroHouseModel.Ins.getMaxDrgree(this.cfg.f_HeroID)}`;
            }
            else {
                this._ui.quaTf.text = "";
            }
            this._ui.tf1.text = `类型:${typeName}`;
            this._ui.tf2.text = `地区:${HeroHouseModel.Ins.getRegion(this.cfg.f_HeroID)}`;
        }
        buildAttr() {
            let s = "";
            if (!StringUtil.IsNullOrEmpty(this.cfg.f_Attribute)) {
                let arr = this.cfg.f_Attribute.split("|");
                for (let i = 0; i < arr.length; i++) {
                    let v = arr[i].split(":");
                    let id = parseInt(v[0]);
                    s += MainModel.Ins.getAttrNameIdByID(id) + ":" + attrConvert(id, parseInt(v[1]));
                    if (i < arr.length - 1) {
                        s += "     ";
                    }
                }
            }
            return s;
        }
    }

    exports.HeroHouseShowView = HeroHouseShowView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroHouseStorgeItemView extends ui.views.hero_house.ui_hero_house_storge_itemUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler(e) {
            e.stopPropagation();
            let view = E.ViewMgr.Get(EViewType.HeroHouseStorge);
            let itemVo = this.vo.itemVo;
            MainModel.Ins.showSmallTips(itemVo.getName(), itemVo.getDesc(), this);
            view.refreshSelView(this.vo.index);
        }
        refresh() {
            this.vo = this.dataSource;
            let itemVo = this.vo.itemVo;
            this.icon.skin = itemVo.getIcon();
            this.qua.skin = itemVo.quaIcon();
            if (this.vo.infinite) {
                this.tf1.text = "";
                this.infiniteImg.visible = true;
            }
            else {
                this.tf1.text = itemVo.count + "";
                this.infiniteImg.visible = false;
            }
            this.updateSelectView();
        }
        updateSelectView() {
            if (this.vo.itemId == HeroHouseModel.Ins.curStorgeItemId) {
                this.sel.visible = true;
            }
            else {
                this.sel.visible = false;
            }
        }
    }

    exports.HeroHouseStorgeItemView = HeroHouseStorgeItemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroItemSelVo {
        get itemId() {
            return this.itemVo.cfgId;
        }
    }
    class HeroHouseStorgeView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_storgeUI();
                this.bindClose(this._ui.close1);
                this.selBtnCtl = ButtonCtl.CreateBtn(this._ui.qichenBtn, this, this.onSelectHandler);
                this._ui.list1.itemRender = HeroHouseStorgeItemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemHandler);
            }
        }
        onItemHandler(item) {
            item.refresh();
        }
        onSelectHandler() {
            this.Close();
        }
        refreshSelView(index) {
            let l = this._dataList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let v = false;
                if (cell.index == index) {
                    v = true;
                }
                if (v) {
                    HeroHouseModel.Ins.curStorgeItemId = cell.itemId;
                }
            }
            this._ui.list1.refresh();
            let view = E.ViewMgr.Get(EViewType.HeroHouse);
            view.onUpdatePopView();
        }
        onInit() {
            this._dataList = HeroHouseModel.Ins.getStorgeList();
            this._ui.list1.array = this._dataList;
            this._ui.list1.scrollTo(0);
        }
    }

    exports.HeroHouseStorgeView = HeroHouseStorgeView;
    exports.HeroItemSelVo = HeroItemSelVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroItemCtl {
        constructor(skin) {
            this.tf1 = skin.tf1;
            this.tf2 = skin.tf2;
            this.tf3 = skin.tf3;
            this.tf4 = skin.tf4;
            this.nametf = skin.nametf;
            this.img = skin.img;
        }
        updateHero(heroCfg) {
            this.tf1.text = "地区:" + HeroHouseModel.Ins.getRegion(heroCfg.f_HeroID) + '';
        }
        refresh(heroCfg, attrs, degree) {
            if (heroCfg) {
                this.updateHero(heroCfg);
            }
            this.tf2.text = HeroHouseModel.Ins.getDegreeDesc(degree);
            HeroHouseModel.Ins.refreshAttrView([this.tf3, this.tf4], this.img, this.nametf, attrs, heroCfg.f_HeroID);
        }
    }
    class HeroSwicthItem extends ui.views.hero_house.ui_hero_house_switch_equip_itemUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
            this.emptyTf.visible = false;
            this.sel.visible = false;
            this.ctl = new HeroItemCtl(this);
        }
        onClickHandler() {
            if (!this.vo.locked) {
                this.vo.mSelect = true;
                let view = E.ViewMgr.Get(EViewType.HeroHouseSwicth);
                view.refreshList();
                if (!this.vo.isEmpty) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.getLang("HeroAsk", this.heroCfg.f_name), new Laya.Handler(this, this.okHandler));
                }
            }
        }
        okHandler() {
            let view = E.ViewMgr.Get(EViewType.HeroHouseSwicth);
            let req = new GymSwicthEquip_req();
            req.oldUid = this.vo.equipVo.uid;
            req.newUid = view.curData.uid;
            SocketMgr.Ins.SendMessageBin(req);
            E.ViewMgr.Close(EViewType.HeroHouseSwicth);
        }
        refresh() {
            let vo = this.dataSource;
            this.vo = vo;
            this.emptyTf.visible = false;
            this.sel.visible = vo.mSelect;
            if (vo.locked) {
                this.lockimg.visible = true;
                this.unlock.visible = false;
                let lv = HeroHouseModel.Ins.convertShowLv(vo.unlockLevel);
                this.lockTfDesc.text = E.getLang("ss01", lv);
            }
            else {
                if (vo.isEmpty) {
                    this.lockimg.visible = false;
                    this.unlock.visible = false;
                    this.emptyTf.visible = true;
                }
                else {
                    this.lockimg.visible = false;
                    this.unlock.visible = true;
                    let heroCfg = vo.heroCfg;
                    this.heroCfg = heroCfg;
                    this.ctl.refresh(heroCfg, vo.attrs, vo.degree);
                    if (E.Debug) {
                        this.nametf.text += " uid:" + vo.equipVo.uid;
                    }
                }
            }
        }
    }
    class MySelfHeroSwicthItemCtl {
        constructor(skin) {
            this.skin = skin;
            skin.lockimg.visible = false;
            skin.sel.visible = false;
            skin.emptyTf.visible = false;
            this.ctl = new HeroItemCtl(skin);
        }
        refresh(_data) {
            this.ctl.refresh(_data.heroCfg, _data.attrlist, _data.degree);
            if (E.Debug) {
                this.skin.nametf.text += " uid:" + _data.uid;
            }
        }
    }
    class HeroHouseSwitchView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        get curData() {
            return this._mData;
        }
        onAddLoadRes() {
        }
        onExit() {
        }
        onFirstInit() {
            if (!this.UI) {
                this._model = HeroHouseModel.Ins;
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_switch_equipUI();
                this._selfView = new MySelfHeroSwicthItemCtl(this._ui.newget);
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._ui.list1.itemRender = HeroSwicthItem;
            }
        }
        onCloseHandler() {
            super.onCloseHandler();
            this._model.openPop();
        }
        onRenderHandler(cell) {
            cell.refresh();
        }
        refreshList() {
            this._ui.list1.refresh();
        }
        onInit() {
            this._mData = this.Data;
            let _heroCfg = this._mData.heroCfg;
            this._selfView.refresh(this._mData);
            let count = this._model.getUnlockCount(_heroCfg.f_HeroType);
            let equipList = this._model.getEquipListByType(_heroCfg.f_HeroType);
            let _typeCfg = t_Gym_NPC_Type.Ins.getByType(_heroCfg.f_HeroType);
            this._ui.tf1.text = "类别:" + _typeCfg.f_Typename;
            this._ui.tf2.text = "数量:" + equipList.length + "/" + count;
            this._ui.list1.array = this._model.buildSlotViewListVo(_heroCfg.f_HeroType);
            this._ui.list1.scrollTo(0);
        }
    }

    exports.HeroHouseSwitchView = HeroHouseSwitchView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroHouseTaskItem extends ui.views.hero_house.ui_hero_house_taskitem_viewUI {
        constructor() {
            super();
            this.lingquCtl = ButtonCtl.CreateBtn(this.lingquBtn, this, this.onLingQuHandler);
            this.refreshBtnCtl = ButtonCtl.CreateBtn(this.refreshBtn, this, this.onRefreshHandler);
        }
        onRefreshHandler() {
            let cfg = HeroHouseModel.Ins.taskRefreshCfg;
            let arr = cfg.f_MissionRefreshCost.split("-");
            let moneyCfgid = parseInt(arr[0]);
            let moneyVal = parseInt(arr[1]);
            MainModel.Ins.queryMsg(E.getLang("RefreshTask"), moneyCfgid, moneyVal, EQuickMsg.HeroHouseTask, new Laya.Handler(this, this.onRefreshOkHandler));
        }
        onRefreshOkHandler() {
            let req = new GymMissionRefresh_req();
            req.fid = this.cfg.f_id;
            let cell2 = HeroHouseModel.Ins.taskList.find(cell => cell.fid == this.cfg.f_id);
            req.index = HeroHouseModel.Ins.taskList.indexOf(cell2);
            SocketMgr.Ins.SendMessageBin(req);
        }
        onLingQuHandler() {
            let req = new GymMissionReward_req();
            req.fid = this.cfg.f_id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        set curStar(v) {
            for (let i = 0; i < 5; i++) {
                if ((i + 1) <= v) {
                    this['s' + i].visible = true;
                }
                else {
                    this['s' + i].visible = false;
                }
            }
        }
        refresh() {
            this._curData = this.dataSource;
            this.cfg = t_Gym_Mission_List.Ins.GetDataById(this._curData.fid);
            let type = this.cfg.f_TaskType;
            let arr = this.cfg.f_RewardsType.split("|");
            let needVal = parseInt(arr[0]);
            let typeCfg = t_Gym_Mission_Type.Ins.GetDataById(type);
            let ext = "";
            if (E.Debug) {
                ext += this.cfg.f_id + "";
            }
            this.nameTf.text = this.cfg.f_MissionName + ext;
            let heroName = "";
            if (this.cfg.f_TaskType == EGymTaskType.GetHero) {
                let heroid = parseInt(arr[1]);
                heroName = t_Gym_NPC_List.Ins.getByHeroID(heroid).f_name;
            }
            let val = HeroHouseModel.Ins.getTaskVal(this.cfg.f_id);
            this.titleTf.text = StringUtil.format(typeCfg.f_GymtaskContent, val, needVal, heroName);
            this.icon.skin = HeroHouseModel.Ins.getTaskIcon(this.cfg.f_iconid);
            let rewardCfg = t_Gym_Mission_Quality.Ins.getByMissionStarId(this.cfg.f_StarRank);
            let itemVo = ItemViewFactory.convertItemList(rewardCfg.f_MissionRewards)[0];
            ItemViewFactory.refreshSlot(this.slot, itemVo);
            this.curStar = rewardCfg.f_Star;
            this.refreshBtnCtl.visible = false;
            switch (this._curData.rewardStatus) {
                case EGymTaskStatus.NotLingqu:
                    if (this._curData.count >= needVal) {
                        this.lingquCtl.gray = false;
                        this.lingquCtl.mouseEnable = true;
                        this.tf2.text = E.getLang("LingQu");
                    }
                    else {
                        this.lingquCtl.gray = true;
                        this.lingquCtl.mouseEnable = false;
                        this.tf2.text = E.getLang("LingQu");
                    }
                    this.refreshBtnCtl.visible = true;
                    break;
                case EGymTaskStatus.YiLingQu:
                    this.lingquCtl.mouseEnable = false;
                    this.lingquCtl.gray = true;
                    this.tf2.text = E.getLang("LingQu2");
                    break;
            }
        }
    }
    class HeroHouseTaskView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
            this.model.off(GymEvent.TaskUpdate, this, this.refreshView);
            this.timeCtl.stop();
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = HeroHouseModel.Ins;
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_task_viewUI();
                this.bindClose(this._ui.close1);
                this.moneyCtl = new ValCtl(this._ui.moneyTf, this._ui.moneyIcon);
                this.moneyCtl.setType(ECellType.GOLD);
                this._ui.list1.itemRender = HeroHouseTaskItem;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onHeroHouseTaskRender);
                this.timeCtl = new TimeCtl(this._ui.timeTf);
                let cfg = this.model.taskRefreshCfg;
                let arr = cfg.f_MissionRefreshCost.split("-");
                ValCtl.Create(this._ui.moneyTf, this._ui.moneyIcon, parseInt(arr[0]));
            }
        }
        onHeroHouseTaskRender(item) {
            item.refresh();
        }
        refreshView() {
            this._ui.list1.array = this.model.taskList;
            this._ui.list1.scrollTo(0);
        }
        onInit() {
            this.model.on(GymEvent.TaskUpdate, this, this.refreshView);
            this.refreshView();
            this.refreshTime();
        }
        refreshTime() {
            this.timeCtl.start(MainModel.Ins.subNextSecond, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.refreshTime));
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(E.getLang("ResetTime", time_str));
        }
    }

    exports.HeroHouseTaskView = HeroHouseTaskView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EGameColor) {
        EGameColor["White"] = "#ffffff";
        EGameColor["Normal"] = "#B67946";
        EGameColor["Normal1"] = "#9F540C";
        EGameColor["NotEnough"] = "#ff0000";
        EGameColor["GREED"] = "#42f908";
        EGameColor["NORMAL_YELLOW"] = "#FBE6B9";
        EGameColor["RED"] = "#EE3736";
    })(exports.EGameColor || (exports.EGameColor = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChestProgressCtl {
        constructor(progcontainer) {
            this.maskList = [];
            this.clsKey = "MSprite";
            this.blackWidth = 4;
            this.offsetSize = 0;
            this.progcontainer = progcontainer;
            this.curHeight = progcontainer.height;
            this.maxWidth = this.progcontainer.width;
        }
        set visible(v) {
            this.progcontainer.visible = v;
        }
        setVal(cur, max) {
            this.clear();
            if (cur > max) {
                cur = max;
            }
            if (max <= 0) {
                this.progcontainer.width = 0;
                return;
            }
            let cellWidth = this.maxWidth / max;
            for (let i = 0; i < max - 1; i++) {
                let cell = Laya.Pool.getItemByClass(this.clsKey, Laya.Sprite);
                this.progcontainer.addChild(cell);
                cell.x = cellWidth * (i + 1);
                let size = this.offsetSize;
                cell.graphics.drawRect(-size, size, this.blackWidth, this.curHeight - size * 2, "#000000");
                this.progcontainer.addChild(cell);
                this.maskList.push(cell);
            }
            this.progcontainer.width = (cur / max) * this.maxWidth;
        }
        clear() {
            while (this.maskList.length) {
                let cell = this.maskList.pop();
                cell.removeSelf();
                Laya.Pool.recover(this.clsKey, cell);
            }
        }
    }

    exports.ChestProgressCtl = ChestProgressCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroKnowledgeView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
            this._timeCtl.stop();
            this.timeCtl1.stop();
            this.model.off(GymEvent.KnowledgeLevelUp, this, this.refreshView);
            MainModel.Ins.off(MainEvent.ValChange, this, this.onMoneyUpdate);
            GuaJiModel.Ins.off(GuaJiModel.UPDATA_CD_TIME, this, this.refreshView);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = HeroHouseModel.Ins;
                this.lvCtl = this.model.levelCtl;
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_shengshi_viewUI();
                this._timeCtl = new TimeCtlV2(this._ui.timeTf, "升级时间:{0}");
                this.timeCtl1 = new TimeCtl(this._ui.lab_time);
                this._progressCtl = new ChestProgressCtl(this._ui.progcontainer);
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.watchBtn, this, this.onWatchHandler);
                ValCtl.Create(this._ui.moneyTf, this._ui.moneyIcon, ECellType.WuXing);
                this.ywtBtnCtl = ButtonCtl.CreateBtn(this._ui.ywtBtn, this, this.onLevelUpHandler);
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list1.itemRender = ui.views.hero_house.ui_hero_house_shengshi_itemUI;
                ButtonCtl.CreateBtn(this._ui.subBtn, this, this.onSubTime);
                ButtonCtl.CreateBtn(this._ui.fastBtn, this, this.onFastHandler);
            }
        }
        onSubTime() {
            E.ViewMgr.Open(EViewType.SubCDView, null, GuaJiModel.CDEnmu.WuGuanSS);
        }
        onFastHandler() {
            MainModel.Ins.fastUseItem(ECellType.ChestQuick, EUseItemScene.Knowledge, this.lvCtl.time);
        }
        onItemRender(item) {
            let cfg = item.dataSource;
            item.tf1.text = cfg.f_Typename;
            let count = this.model.getByLv(cfg.f_TypeID, this.model.levelCtl.cfgLv);
            item.tf2.text = count + "";
            if (this.lvCtl.isFullLevel) {
                item.tf3.text = "";
                item.bg.visible = false;
            }
            else {
                let lv = this.model.convertShowLv(this.model.levelCtl.cfgLv);
                item.tf3.text = this.model.getByLv(cfg.f_TypeID, lv) + '';
                item.bg.visible = true;
            }
        }
        onLevelUpHandler() {
            if (this.lvCtl.isFullLevel) {
                E.ViewMgr.ShowMidError(E.getLang("FullLv"));
            }
            else {
                if (MainModel.Ins.isItemEnoughSt(this.lvCtl.curSlot.cfg.f_PlaidPrice, true)) {
                    let req = new GymRoomUpgrade_req();
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        onWatchHandler() {
            E.ViewMgr.Open(EViewType.HeroHouseDetail);
        }
        onInit() {
            this.model.on(GymEvent.KnowledgeLevelUp, this, this.refreshView);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onMoneyUpdate);
            GuaJiModel.Ins.on(GuaJiModel.UPDATA_CD_TIME, this, this.refreshView);
            this.refreshView();
        }
        clearMoney() {
            this._ui.yuanbaoTf2.text = "";
            this._ui.yuanbao3.skin = "";
        }
        onTimeEnd() {
            this.lvCtl.reset();
            this.refreshView();
        }
        onMoneyUpdate() {
            this.moneyUpdate();
        }
        moneyUpdate() {
            let cur = this.lvCtl.curSlot;
            if (cur.cfg.f_PlaidPrice != "") {
                let _itemVo = ItemViewFactory.convertItemList(cur.cfg.f_PlaidPrice)[0];
                this._ui.yuanbaoTf2.text = StringUtil.val2m(_itemVo.count);
                let have = MainModel.Ins.mRoleData.getVal(_itemVo.cfgId);
                if (have < _itemVo.count) {
                    this._ui.yuanbaoTf2.color = EGameColor.NotEnough;
                }
                else {
                    this._ui.yuanbaoTf2.color = EGameColor.Normal;
                }
                this._ui.yuanbao3.skin = IconUtils.getIconByCfgId(_itemVo.cfgId);
            }
        }
        onLayer() {
            if (E.Debug) {
                if (!this.tf) {
                    this.tf = new Laya.Label();
                    this._ui.addChild(this.tf);
                    this.tf.color = "#ffffff";
                    this.tf.fontSize = 24;
                }
                let data = HeroHouseModel.Ins.data;
                this.tf.text = data.level + "," + data.time;
            }
            let labelList = [this._ui.tf1, this._ui.tf2, this._ui.tf3, this._ui.tf4];
            let l = t_Gym_NPC_Type.Ins.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_TypeID) {
                    let tf = labelList[i];
                    let count = this.model.getUnlockCount(cfg.f_TypeID);
                    let have = this.model.getHeroCount(cfg.f_TypeID);
                    tf.text = `${cfg.f_Typename}: ${have}/${count}`;
                }
            }
            this._ui.lvTf.text = `${this.model.levelCtl.cfgLv + 1}级`;
            this._progressCtl.setVal(this.lvCtl.showStep, this.lvCtl.skinSlotMax);
            this.clearMoney();
            if (this.lvCtl.isFullLevel) {
                this._ui.levelFullTf.text = E.getLang("FullLv");
                this.ywtBtnCtl.visible = false;
            }
            else {
                this._ui.levelFullTf.text = "";
                this.moneyUpdate();
                this.ywtBtnCtl.visible = true;
                this._ui.tf12.text = "购买";
            }
            this._ui.stepTf.text = `养成阶段:${this.lvCtl.showStep}`;
            this._ui.list1.array = l;
            this._ui.levelUpCon.visible = true;
            this._ui.fastCon.visible = false;
            this._timeCtl.stop();
            if (this.lvCtl.bTimeEnd) {
                this._ui.levelUpCon.visible = false;
                this._ui.fastCon.visible = true;
                this._timeCtl.on(Laya.Event.COMPLETE, this, this.onTimeEnd);
                let sub = this.lvCtl.time - TimeUtil.serverTime;
                this._timeCtl.start(sub);
            }
            this.setCDBtn();
        }
        refreshView() {
            this.onLayer();
        }
        setCDBtn() {
            let time = GuaJiModel.Ins.getstAdCdByType(GuaJiModel.CDEnmu.WuGuanSS).endUnix - TimeUtil.serverTime;
            if (time > 0) {
                this._ui.lab_d.visible = false;
                this._ui.lab_time.visible = true;
                this._ui.subBtn.disabled = true;
                this.timeCtl1.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.timeCtl1.stop();
                this.endTime();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl1.tickVal);
            this.timeCtl1.setText(time_str + "后刷新");
        }
        endTime() {
            this._ui.lab_d.visible = true;
            this._ui.lab_time.visible = false;
            this._ui.subBtn.disabled = false;
        }
    }

    exports.HeroKnowledgeView = HeroKnowledgeView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LabelUtil {
        static create(color = "#ffffff") {
            let label = new Laya.Label();
            label.color = color;
            label.fontSize = 22;
            label.strokeColor = "#000000";
            label.stroke = 2;
            return label;
        }
    }

    exports.LabelUtil = LabelUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MProgressSkin extends Laya.Sprite {
        constructor(w = 200, h = 20) {
            super();
            this.width = w;
            this.height = h;
            this.graphics.drawRect(0, 0, w, h, "#ff0000", "#00ff00", 2);
        }
        set value(v) {
            this.graphics.clear();
            this.graphics.drawRect(0, 0, this.width * v, this.height, "#ff0000");
            this.graphics.drawRect(0, 0, this.width, this.height, null, "#00ff00", 2);
        }
    }

    exports.MProgressSkin = MProgressSkin;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroDebugView extends Laya.Sprite {
        constructor() {
            super();
            this.rate = 1;
            Laya.timer.frameLoop(1, this, this.onLoop);
            let progress = new MProgressSkin();
            this.addChild(progress);
            this.progress = progress;
            this.label = LabelUtil.create();
            this.addChild(this.label);
        }
        onLoop() {
            if (this.avatar) {
                let spine = this.avatar.coreSpine;
                if (spine && spine.skeleton) {
                    let v = spine.skeleton['_playbackRate'];
                    this.label.text = spine.anim + "--" + (spine.currentPlayTime / v).toFixed(2) + "/" + ((spine.duration / this.rate) / v).toFixed(2);
                    let pv = spine.currentPlayTime / (spine.duration / this.rate);
                    if (pv > 1)
                        pv = 1;
                    this.progress.value = pv;
                }
            }
        }
    }
    class DebugShowLabel {
        constructor() {
            this.str = "";
            this._label = LabelUtil.create();
            this._label.bgColor = "#777777";
            Laya.timer.frameLoop(1, this, this.onLoop);
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new DebugShowLabel();
            }
            return this._ins;
        }
        onLoop() {
            if (this._label) {
                Laya.stage.addChild(this._label);
            }
            this._label.text = this.str;
        }
        setText(v) {
            this.str = v;
        }
    }

    exports.DebugShowLabel = DebugShowLabel;
    exports.HeroDebugView = HeroDebugView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroAnimStage {
        constructor() {
            this.isClearRes = false;
            this.container = new Laya.Sprite();
            this.container.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.container.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        removeSelf() {
            this.container.removeSelf();
        }
        onDisplay() {
            HeroHouseModel.Ins.on(GymEvent.InvitePopUpdate, this, this.updateAvatar);
            HeroHouseModel.Ins.on(GymEvent.RemovePop, this, this.updateAvatar);
            this.updateAvatar();
        }
        onUnDisplay() {
            if (!HeroHouseModel.Ins.autoCtl.isAuto) {
                HeroHouseModel.Ins.off(GymEvent.InvitePopUpdate, this, this.updateAvatar);
                HeroHouseModel.Ins.off(GymEvent.RemovePop, this, this.updateAvatar);
                this.clearRes();
            }
        }
        initDebug() {
            if (HrefUtils.getVal("debug")) {
                if (!this.debugView) {
                    this.debugView = new HeroDebugView();
                }
                this.container.addChild(this.debugView);
                this.debugView.avatar = this.heroAvatar;
            }
        }
        updateAvatar() {
            let vo = HeroHouseModel.Ins.animInviteVo;
            this.vo = vo;
            if (!vo) {
                this.stop();
                return;
            }
            if (!this.heroAvatar) {
                this.heroAvatar = AvatarFactory.createHeroAvatar("hero1");
                this.container.addChild(this.heroAvatar);
                this.initDebug();
            }
            let _skinVo = vo.getSkinVo();
            let cfg = _skinVo.imgCfg;
            this.heroAvatar.reset();
            this.heroAvatar.mSkin = t_Gym_NPC_Image.Ins.getStSkin(cfg);
            this.smallPeopleSkin = "";
            this.drumVisible = true;
            this.heroAvatar.spineload(this, this.onSpineComplete);
        }
        onAnimPlayComplete() {
            if (this.isClearRes) {
                return;
            }
            let useTime = 0;
            if (!this.vo.isTimeEnd) {
                useTime = this.vo.subTime;
            }
            Laya.timer.clear(this, this.end);
            Laya.timer.once(useTime, this, this.end);
        }
        end() {
            this.showReward();
            this.updateAvatar();
        }
        onSpineComplete() {
            let vo = this.vo;
            if (!vo || !this.heroAvatar) {
                return;
            }
            let _skinVo = vo.getSkinVo();
            let sub = _skinVo.endTime.toNumber() - TimeUtil.serverTimeMS;
            if (sub <= 0) {
                this.stop();
                return;
            }
            let cfg = _skinVo.imgCfg;
            let animIndex = cfg.f_AnimIndex;
            let animTotalTime = cfg.f_SingleAnimeTime;
            if (sub > animTotalTime) {
                sub = animTotalTime;
            }
            let rate = animTotalTime / (animTotalTime - _skinVo.speedUpTime);
            if (this.debugView)
                this.debugView.rate = rate;
            let realTotalTime = animTotalTime / rate;
            let offsetTime = realTotalTime - sub;
            LogSys$1.Log("uid:" + vo.uid + ',' + vo.fullName + " 已经播放了" + offsetTime + "毫秒," + `整个动作时长${realTotalTime}毫秒 剩余时间${sub}毫秒 播放进度为${(offsetTime / realTotalTime).toFixed(2)}`);
            this.heroAvatar.play(animIndex, this, this.onAnimPlayComplete, null, true);
            this.isClearRes = false;
            this.heroAvatar.coreSpine.playbackRate(rate);
            let duration = this.heroAvatar.duration;
            let per = offsetTime / realTotalTime;
            let curTime = duration * (per > 1 ? 1 : per);
            if (curTime > this.heroAvatar.duration) {
                curTime = Math.floor(this.heroAvatar.duration);
            }
            this.heroAvatar.currentTime = curTime;
        }
        stop() {
            this.clearRes();
            this.showReward();
        }
        showReward() {
            if (this.vo) {
                HeroHouseModel.Ins.autoCtl.check(this.vo);
            }
        }
        clearRes() {
            this.isClearRes = true;
            if (this.heroAvatar) {
                this.heroAvatar.play(EAvatarAnim.WoodStand);
                this.heroAvatar.stop();
                this.heroAvatar.dispose();
                this.heroAvatar = null;
            }
            else {
                this.smallPeopleSkin = "remote/hero_house/jr.png";
            }
            this.drumVisible = false;
        }
        set smallPeopleSkin(url) {
            let type = EViewType.HeroHouse;
            if (E.ViewMgr.isOpenReg(type)) {
                let view = E.ViewMgr.Get(type);
                view._ui.fightGuBtn.skin = url;
            }
        }
        set drumVisible(v) {
            let type = EViewType.HeroHouse;
            if (E.ViewMgr.isOpenReg(type)) {
                let view = E.ViewMgr.Get(type);
                view.drumVisible = v;
            }
        }
    }

    exports.HeroAnimStage = HeroAnimStage;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroSelQua {
    }
    class HeroHouseWeiTuoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.selectCtl = new SelectListCtl();
        }
        onAddLoadRes() { }
        onExit() {
        }
        uploadConfig() {
            let l1 = [];
            RedUpdateUtils.push(l1, RedEnum.HERO_AUTO_CK2, this.ck2);
            RedUpdateUtils.push(l1, RedEnum.HERO_AUTO_CK1, this.ckCtl1);
            RedUpdateUtils.push(l1, RedEnum.HERO_AUTO_CK0, this.ckCtl0);
            RedUpdateUtils.push(l1, RedEnum.HERO_AUTO_QUA, this.selectCtl);
            RedUpdateModel.Ins.saveArr(l1);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_weituo_viewUI();
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.startBtn, this, this.onStartHandler);
                let arr = E.getLang("GymWeiTuo").split("|");
                this.ckCtl0 = new CheckBoxCtl(this._ui.ck0, arr[0]);
                this.ckCtl0.selectHander = new Laya.Handler(this, this.onSelectHandler);
                this.ckCtl1 = new CheckBoxCtl(this._ui.ck1, arr[1]);
                this.ckCtl1.selectHander = new Laya.Handler(this, this.onSelectHandler);
                let ck2 = new CheckBoxCtl(this._ui.ck2, arr[2]);
                ck2.selectHander = new Laya.Handler(this, this.onSelectHandler);
                this.ck2 = ck2;
                this.initSelView();
            }
        }
        initSelView() {
            let listData = [];
            let l = t_Gym_NPC_Quality.Ins.List;
            for (let i = l.length - 1; i >= 0; i--) {
                let _cfg = l[i];
                if (_cfg.f_id != EGymRoleType.Beggar) {
                    let vo = new HeroSelQua();
                    vo.color = _cfg.f_Color;
                    vo.txt = _cfg.f_name;
                    vo.f_id = _cfg.f_id;
                    listData.push(vo);
                }
            }
            listData.reverse();
            this.selectCtl.init(this._ui.sanjiao, this._ui.listarea, this._ui.listcontainer, this._ui.listtf, ui.views.main.ui_quick_setting_list_attrUI, listData);
            this.selectCtl.selectHandler = new Laya.Handler(this, this.onSelectHandler);
        }
        onSelectHandler() {
            this.uploadConfig();
        }
        onStartHandler() {
            let cur = HeroHouseModel.Ins.autoCtl.uiVo;
            if (this.ck2.selected) {
                cur.qua = this.selectCtl.selectVo.f_id;
            }
            else {
                cur.qua = null;
            }
            cur.bSmriti = this.ckCtl0.selected;
            cur.bNewHero = this.ckCtl1.selected;
            if (HeroHouseModel.Ins.canInvite(EInviteType.One, true)) {
                HeroHouseModel.Ins.autoCtl.setAuto(true);
            }
            this.Close();
        }
        onInit() {
            RedUpdateUtils.refreshByConfig(this.ckCtl0, RedEnum.HERO_AUTO_CK0, true);
            RedUpdateUtils.refreshByConfig(this.ckCtl1, RedEnum.HERO_AUTO_CK1, true);
            RedUpdateUtils.refreshByConfig(this.ck2, RedEnum.HERO_AUTO_CK2, true);
            RedUpdateUtils.refreshByConfig(this.selectCtl, RedEnum.HERO_AUTO_QUA, 0);
            let cur = this.selectCtl.curIndex;
            this.selectCtl.selectIndex(cur);
        }
    }

    exports.HeroHouseWeiTuoView = HeroHouseWeiTuoView;
    exports.HeroSelQua = HeroSelQua;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroEntrustVo {
    }
    class HeroSmallBtnCtl {
        constructor() {
            this.uiVo = new HeroEntrustVo();
        }
        get isAuto() {
            return this._isAuto;
        }
        setAuto(v) {
            if (v && !HeroHouseModel.Ins.canInvite()) {
                return;
            }
            this._isAuto = v;
            if (v) {
                HeroHouseModel.Ins.invite();
            }
            this.gear = v;
        }
        reset() {
            this._isAuto = false;
            this.gear = false;
            this.cur = null;
        }
        get model() {
            return HeroHouseModel.Ins;
        }
        onClickHandler() {
            if (!this._isAuto) {
                E.ViewMgr.Open(EViewType.HeroHouseWeiTuo);
            }
            else {
                E.ViewMgr.ShowMidOk("取消委托!");
                this.setAuto(false);
            }
        }
        set gear(v) {
            HeroHouseModel.Ins.event(GymEvent.SetGear, v);
        }
        continueTask() {
            if (this._isAuto) {
                if (!this.model.bInviteFull) {
                    HeroHouseModel.Ins.invite();
                }
                else {
                    this.setAuto(false);
                }
            }
        }
        stopTask() {
            this._isAuto = false;
            this.gear = this._isAuto;
        }
        check(cur) {
            if (this._isAuto) {
                let isOpen = false;
                let _vo = cur.getSkinVo();
                if (_vo.imgCfg.f_peopleType == 1 || _vo.imgCfg.f_peopleType == 2) ;
                else {
                    if (this.uiVo.qua) {
                        if (_vo.qua >= this.uiVo.qua) {
                            LogSys$1.Log(StringUtil.format("qua终止{0} {1}", _vo.qua, this.uiVo.qua));
                            isOpen = true;
                        }
                    }
                    if (!isOpen && this.uiVo.bNewHero) {
                        if (cur.mData.result == EGymAction.ShowInherit) {
                            if (this.model.hasGetHero(cur.heroCfg.f_HeroID)) {
                                LogSys$1.Log(StringUtil.format("人物类型{0},新英雄武魂 heroid:{1}", cur.mData.type, cur.mData.heroId));
                                isOpen = true;
                            }
                        }
                    }
                    if (!isOpen && this.uiVo.bSmriti) {
                        if (HeroHouseModel.Ins.isBetterThan(cur.mData.item)) {
                            LogSys$1.Log(StringUtil.format("人物类型{0} heroid:{1} 武魂完整度:{3}", cur.mData.type, cur.mData.heroId, cur.mData.endtime));
                            isOpen = true;
                        }
                    }
                }
                if (isOpen) {
                    this.open(cur);
                }
                else {
                    HeroHouseModel.Ins.forget(cur);
                }
            }
            else {
                this.open(cur);
            }
        }
        open(cur) {
            this.cur = cur;
            HeroHouseModel.Ins.openPop();
        }
    }

    exports.HeroEntrustVo = HeroEntrustVo;
    exports.HeroSmallBtnCtl = HeroSmallBtnCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroLittleIconCtl {
        constructor(skin) {
            this.skin = skin;
            this.model = HeroHouseModel.Ins;
            this.skin.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler() {
            this.model.selLevelUpType = this.vo.type;
            let _lvUpview = E.ViewMgr.Get(EViewType.HeroHouseLevelUp);
            _lvUpview.onRefreshView();
            _lvUpview.updateBottomSel();
        }
        refreshView() {
            let _vo = this.vo;
            _vo.setIcon(this.skin.icon);
            this.skin.lvTf.text = IconUtils.str2Lv(_vo.showLv);
            this.updateSelect();
        }
        set mSelect(v) {
            if (this.skin.topicon.visible != v) {
                this.skin.topicon.visible = v;
            }
        }
        updateSelect() {
            this.mSelect = this.model.selLevelUpType == this.vo.type;
        }
    }

    exports.HeroLittleIconCtl = HeroLittleIconCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ValLabelCtl {
        static refresh(tf, id, needCount, img = null) {
            let have = MainModel.Ins.mRoleData.getVal(id);
            tf.text = StringUtil.val2m(have) + "/" + needCount;
            if (have < needCount) {
                tf.color = EGameColor.NotEnough;
            }
            else {
                tf.color = EGameColor.Normal;
            }
            if (img) {
                img.skin = IconUtils.getIconByCfgId(id);
            }
        }
    }

    exports.ValLabelCtl = ValLabelCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroUpLevelBase {
        constructor() {
            this.model = HeroHouseModel.Ins;
        }
        onTuPoHandler() {
            this.levelUp();
        }
        refresh() {
            this.skin.switchLvContainer.visible = false;
            this.skin.tupo_task.visible = false;
            this.skin.topcon.visible = true;
            this.skin.t2.text = "当前等级: " + this.vo.showLv;
            if (this.vo.isFullLv) {
                this.skin.t3.text = "";
                this.skin.arrow1.visible = false;
            }
            else {
                this.skin.t3.text = "下一等级: " + (this.vo.showLv + 1);
                this.skin.arrow1.visible = true;
            }
            this.breakBtnCtl.data = this.vo;
        }
        set visible(v) {
            if (this.container.visible != v) {
                this.container.visible = v;
            }
        }
        levelUp() {
            this.model.levelUp(this.vo);
        }
        get visible() {
            return this.container.visible;
        }
        get vo() {
            return HeroHouseModel.Ins.facilitList.find(item => item.type == this.type);
        }
        updateTupo(result) {
            this.skin.topcon.visible = false;
            this.skin.yanwutai.visible = false;
            this.skin.tupo_task.visible = true;
            this.skin.taskDesc.text = result.taskDesc;
            this.skin.tupomoney.visible = false;
            if (result.taskNotComplete) {
                this.breakBtnCtl.grayMouseDisable = false;
            }
            else {
                this.breakBtnCtl.grayMouseDisable = true;
            }
        }
    }

    exports.HeroUpLevelBase = HeroUpLevelBase;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroLvForward extends HeroUpLevelBase {
        constructor(skin) {
            super();
            this.skin = skin;
            ButtonCtl.CreateBtn(this.skin.jingjieBtn, this, this.onLevelUpHandlers);
            ButtonCtl.CreateBtn(this.skin.switchBtn, this, this.onSwitchHandle);
            this.skin.jingjielist.itemRender = ui.views.hero_house.ui_hero_house_level_up_attrUI;
            this.skin.jingjielist.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            let _ckSkin = { bg: this.skin.bg, gou: this.skin.gou, content: this.skin.content };
            this.washCtlCk = new CheckBoxCtl(_ckSkin);
            this.washCtlCk.selectHander = new Laya.Handler(this, this.onWashSelectHandler);
            this.washBtnCtl = ButtonCtl.CreateBtn(this.skin.washBtn1, this, this.onWashHandler);
            this.skin.left1.itemRender = ui.views.hero_house.ui_hero_house_level_up_switch_attrUI;
            this.skin.left1.renderHandler = new Laya.Handler(this, this.onAttrHandler);
            this.skin.right1.itemRender = ui.views.hero_house.ui_hero_house_level_up_switch_attrUI;
            this.skin.right1.renderHandler = new Laya.Handler(this, this.onAttrHandler);
            this.skin.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        onDisplay() {
            this.model.on(GymEvent.WashSucceed, this, this.onWashSucceed);
        }
        onUnDisplay() {
            this.model.off(GymEvent.WashSucceed, this, this.onWashSucceed);
        }
        onWashSucceed() {
            this.refresh();
        }
        onSwitchOk() {
            this.model.switchId(this.type);
        }
        onSwitchHandle() {
            if (this.isShowTips(this.model.wash.leftAttr)) {
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.getLang("wash01"), new Laya.Handler(this, this.onSwitchOk));
            }
            else {
                this.onSwitchOk();
            }
        }
        onAttrHandler(cell) {
            let attr = cell.dataSource;
            cell.tf1.text = MainModel.Ins.getAttrNameIdByID(attr.id);
            cell.tf2.text = attrConvert(attr.id, attr.value);
            cell.tf1.color = cell.tf2.color = t_Gym_refinement_AttributeRange.Ins.getColor(attr.id, attr.value);
        }
        onWashSelectHandler() {
            this.updateUseView();
        }
        updateUseView() {
            let wash = this.model.wash;
            let _item;
            if (!this.washCtlCk.selected) {
                _item = wash.lowitem;
            }
            else {
                _item = wash.highitem;
            }
            ValLabelCtl.refresh(this.skin.tf10, _item.cfgId, _item.count, this.skin.yuanbao2);
        }
        isShowTips(attr) {
            for (let i = 0; i < attr.length; i++) {
                let o = attr[i];
                let qua = t_Gym_refinement_AttributeRange.Ins.getQua(o.id, o.value);
                if (qua >= 6) {
                    return true;
                }
            }
        }
        onWashOk() {
            this.model.washByID(this.type, this.washCtlCk.selected ? 1 : 0);
        }
        onWashHandler() {
            if (this.model.wash.hasEnough(this.washCtlCk.selected)) {
                if (this.isShowTips(this.model.wash.rightAttr)) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.getLang("wash01"), new Laya.Handler(this, this.onWashOk));
                }
                else {
                    this.onWashOk();
                }
            }
        }
        onRenderHandler(item) {
            let cell = item.dataSource;
            let cur = cell.cur;
            let next = cell.next;
            item.attrTf.text = MainModel.Ins.getAttrNameIdByID(cur.id) + ":" + attrConvert(cur.id, cur.value);
            item.attrDesc.text = MainModel.Ins.getAttrDesc(cur.id);
            if (next) {
                item.attrValTf.text = attrConvert(next.id, next.value);
            }
            else {
                item.attrValTf.text = "";
            }
        }
        onLevelUpHandlers() {
            this.levelUp();
        }
        get container() {
            return this.skin.switchLvContainer;
        }
        updateTopStr(_result) {
            this.skin.arrow1.visible = false;
            this.skin.t2.text = "当前属性";
            if (_result.mFullLv) {
                this.skin.t3.text = "";
            }
            else {
                this.skin.t3.text = "新属性";
            }
        }
        set showSwitchBtn(v) {
            this.skin.switchBtn.visible = v;
            if (v) {
                this.skin.washContainer.x = 51;
            }
            else {
                this.skin.washContainer.x = 199;
            }
        }
        refresh() {
            super.refresh();
            let _result = this.model.better.getDrumByLv(this.vo.fid, this.vo.type);
            if (E.Debug) {
                console.log(_result.toString());
            }
            this.updateTopStr(_result);
            if (this.model.selLevelTabIndex == 0) {
                if (!StringUtil.IsNullOrEmpty(_result.cfg.f_Task)) {
                    this.skin.switchLvContainer.visible = false;
                    this.skin.tupo_task.visible = true;
                    let task = {};
                    HeroHouseModel.Ins.buildTask(task, this.vo.id, _result.cfg.f_Task);
                    this.updateTupo(task);
                    let need1 = ItemViewFactory.convertItem(_result.cost);
                    if (need1) {
                        this.skin.tupomoney.visible = true;
                        ValLabelCtl.refresh(this.skin.tf8, need1.cfgId, need1.count, this.skin.tupoicon);
                    }
                }
                else {
                    this.skin.switchLvContainer.visible = true;
                    this.skin.tupo_task.visible = false;
                    this.skin.xilianswitch.visible = false;
                    this.skin.jingjie.visible = true;
                    this.skin.jingjielist.array = _result.attrList;
                    let need = ItemViewFactory.convertItem(_result.cost);
                    ValLabelCtl.refresh(this.skin.yuanbaoCntTf, need.cfgId, need.count, this.skin.yuanbaoIcon);
                }
            }
            else {
                this.skin.switchLvContainer.visible = true;
                this.skin.xilianswitch.visible = true;
                this.skin.jingjie.visible = false;
                this.model.wash.getResult(this.type);
                this.updateUseView();
                this.skin.left1.array = this.model.wash.leftAttr;
                this.skin.right1.array = this.model.wash.rightAttr;
                if (this.model.wash.hasSwicth) {
                    this.skin.tf1.visible = false;
                    this.showSwitchBtn = true;
                }
                else {
                    this.skin.tf1.visible = true;
                    this.showSwitchBtn = false;
                }
            }
        }
    }

    exports.HeroLvForward = HeroLvForward;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class YanWuLevelUp extends HeroUpLevelBase {
        constructor(skin) {
            super();
            this.type = EFacilityType.Fight;
            this.skin = skin;
            ButtonCtl.CreateBtn(this.skin.ywtBtn, this, this.onYanWuHandler);
            this.skin.ywtlist.itemRender = ui.views.hero_house.ui_hero_house_ywt_itemUI;
            this.skin.ywtlist.renderHandler = new Laya.Handler(this, this.itemRenderHandler);
        }
        itemRenderHandler(item) {
            let _vo = item.dataSource;
            item.tf1.text = _vo.name;
            item.tf1.color = _vo.color;
            item.tf2.text = _vo.curStr;
            item.tf3.text = _vo.nextStr;
        }
        onYanWuHandler() {
            if (MainModel.Ins.isItemEnoughSt(this._needItemVo.toString(), true)) {
                this.levelUp();
            }
        }
        get container() {
            return this.skin.yanwutai;
        }
        refresh() {
            super.refresh();
            let result = HeroHouseModel.Ins.buildListData(this.vo.id, this.vo.fid);
            this.cfg = result.cfg;
            let l = result.datalist;
            this.skin.ywtlist.array = l;
            this.skin.ywtlist.scrollTo(0);
            if (this.vo.isFullLv) {
                this.skin.ywcost.visible = false;
            }
            else {
                this.skin.ywcost.visible = true;
                let cost = result.cfg.f_UpgradeCost;
                if (cost) {
                    this.skin.yanwutai.visible = true;
                    this.skin.tupo_task.visible = false;
                    let _needItemVo = ItemViewFactory.convertItem(cost);
                    this._needItemVo = _needItemVo;
                    this.skin.yuanbao3.skin = IconUtils.getIconByCfgId(_needItemVo.cfgId);
                    ValLabelCtl.refresh(this.skin.yuanbaoTf2, _needItemVo.cfgId, _needItemVo.count);
                }
                else {
                    this.updateTupo(result);
                }
            }
        }
    }

    exports.YanWuLevelUp = YanWuLevelUp;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroHouseLevelUp extends ViewBase {
        constructor() {
            super(...arguments);
            this.itemList = [];
            this._tabsCtl = new TabControl();
            this.labelArr = ["强化", "洗练"];
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
            this.model.off(GymEvent.FacilitiesUpdate, this, this.onRefreshView);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = HeroHouseModel.Ins;
                this.UI = this._ui = new ui.views.hero_house.ui_hero_house_level_upUI();
                this.bindClose(this._ui.close1);
                this._tabsCtl.init([this._ui.qianhuaBtn, this._ui.washBtn], new Laya.Handler(this, this.onSelectHandler), new Laya.Handler(this, this.onTabItem));
                this._tabsCtl.setData(this.labelArr);
                this.itemList = [];
                for (let i = 0; i < 5; i++) {
                    let cell = new HeroLittleIconCtl(this._ui["item" + i]);
                    cell.vo = this.model.facilitList[i];
                    this.itemList.push(cell);
                }
                let breakBtnCtl = ButtonCtl.CreateBtn(this._ui.tupoBtn, this, this.tupoHandler);
                this.ywView = new YanWuLevelUp(this._ui);
                this.ywView.breakBtnCtl = breakBtnCtl;
                this.otherView = new HeroLvForward(this._ui);
                this.otherView.breakBtnCtl = breakBtnCtl;
            }
        }
        tupoHandler(data) {
            this.model.levelUp(data);
        }
        onTabItem(img, i, sel, data) {
            if (sel) {
                img.skin = "remote/main/main/anniu_2.png";
            }
            else {
                img.skin = "remote/main/main/anniu_1.png";
            }
            let labels = [this._ui.tf4, this._ui.tf5];
            labels[i].text = data;
        }
        onSelectHandler(index) {
            this.model.selLevelTabIndex = index;
            let type = this.model.selLevelUpType;
            if (type != EFacilityType.Fight) {
                this.otherView.type = type;
                this.otherView.refresh();
            }
        }
        onInit() {
            this.model.on(GymEvent.FacilitiesUpdate, this, this.onRefreshView);
            this.onRefreshView();
            this._tabsCtl.selectIndex = this.model.selLevelTabIndex;
        }
        clearView() {
            this._ui.jingjie.visible = false;
            this._ui.tupo_task.visible = false;
            this._ui.xilianswitch.visible = false;
            this._ui.yanwutai.visible = false;
        }
        onRefreshView() {
            this.clearView();
            this.updateBottom();
            let type = this.model.selLevelUpType;
            if (type == EFacilityType.Fight) {
                this.ywView.visible = true;
                this.ywView.refresh();
                this.otherView.visible = false;
            }
            else {
                this.ywView.visible = false;
                this.otherView.visible = true;
                this.otherView.type = type;
                this.otherView.refresh();
            }
            if (type == EFacilityType.Fight) {
                this._tabsCtl.visible = false;
            }
            else {
                this._tabsCtl.visible = true;
            }
            this.vo = this.model.facilitList.find(item => item.type == type);
            let _vo = this.vo;
            if (_vo) {
                _vo.setIcon(this._ui.icon);
                this._ui.nameTf.text = _vo.name;
                this._ui.lvTf.text = "Lv." + _vo.curLv;
            }
        }
        updateBottomSel() {
            for (let i = 0; i < this.itemList.length; i++) {
                let cell = this.itemList[i];
                cell.updateSelect();
            }
        }
        updateBottom() {
            for (let i = 0; i < this.itemList.length; i++) {
                let cell = this.itemList[i];
                cell.vo = this.model.facilitList[i];
                cell.refreshView();
            }
        }
    }

    exports.HeroHouseLevelUp = HeroHouseLevelUp;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroHouseTaskVo {
    }
    (function (EInviteType) {
        EInviteType[EInviteType["One"] = 1] = "One";
        EInviteType[EInviteType["Five"] = 2] = "Five";
    })(exports.EInviteType || (exports.EInviteType = {}));
    class HeroHouseModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.newNplcIdCache = [];
            this.data = new GymRoomLevel_revc();
            this.levelCtl = new GymLevelCtl();
            this.better = new HeroBetterModelCtl();
            this.invitelGymList = [];
            this.storgeList = [];
            this.curStorgeItemId = ECellType.Auth;
            this.inviationCtl = new InviationCtl();
            this.autoCtl = new HeroSmallBtnCtl();
            this.heroAnim = new HeroAnimStage();
            this.equipList = [];
            this.defineList = [];
            this.taskList = [];
            this.wash = new WashResult();
            this.mapTasklist = [];
            this.facilitySummaryAttrList = [];
            this.gymRoomSummaryAttrList = [];
            this.selLevelUpType = EFacilityType.Fight;
            this.selLevelTabIndex = 0;
            this.maxCount = 5;
        }
        onInitCallBack() {
            this.autoCtl.reset();
            this._facilitList = null;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new HeroHouseModel();
            }
            return this._ins;
        }
        get authIcon() {
            let id = this.curStorgeItemId;
            return IconUtils.getIconByCfgId(id);
        }
        onCheckXingWu() {
            let id = this.curStorgeItemId;
            if (id != ECellType.Auth) {
                let cnt = MainModel.Ins.mRoleData.getVal(id);
                if (cnt <= 0) {
                    this.curStorgeItemId = ECellType.Auth;
                    this.event(GymEvent.InvitePopUpdate);
                }
            }
        }
        get bMaxIcon() {
            return this.curStorgeItemId == ECellType.Auth;
        }
        get authCount() {
            let count = MainModel.Ins.mRoleData.getVal(this.curStorgeItemId);
            return count <= 0 ? "" : count.toString();
        }
        get curMapCfg() {
            if (this.info) {
                let cfg = t_Gym_Map.Ins.GetDataById(this.info.curMapId);
                return cfg;
            }
        }
        isBetterThan(cell) {
            let l = this.equipList;
            let o = l.find(item => item.heroType == cell.heroType &&
                item.heroId == cell.heroId &&
                item.degree < cell.degree);
            return o != undefined;
        }
        getTaskVal(taskId) {
            let cell = this.taskList.find(item => item.fid == taskId);
            if (cell) {
                return cell.count;
            }
            return 0;
        }
        get curInviteLetterCount() {
            return MainModel.Ins.mRoleData.inviteCount;
        }
        get animInviteVo() {
            let l = this.invitelGymList;
            for (let i = 0; i < l.length; i++) {
                let cur = l[i];
                if (cur.rewardStatus == EGymLingQu.NormalIsAnim) {
                    return cur;
                }
            }
            return;
        }
        openPop() {
            if (E.ViewMgr.IsOpen(EViewType.HeroHouseSwicth)) {
                return;
            }
            let type = EViewType.HeroInherit;
            if (E.ViewMgr.IsOpen(EViewType.HeroHouse)) {
                let cell = this.firstVo;
                if (cell) {
                    if (cell.isTimeEnd) {
                        if (!E.ViewMgr.IsOpen(type)) {
                            if (this.autoCtl.isAuto && cell.mData.result == EGymAction.Live) {
                                this.forget(this.firstVo);
                            }
                            else {
                                E.ViewMgr.Open(type);
                            }
                        }
                        else {
                            let view = E.ViewMgr.Get(type);
                            view.onRefreshHandler();
                        }
                    }
                }
            }
        }
        get mInheritRed() {
            let cell = this.firstVo;
            if (cell && cell.isTimeEnd) {
                return true;
            }
        }
        get mRed() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.HeroHouse)) {
                return this.mInheritRed || this.mHandbookRed || MainModel.Ins.heroPackVo.type == EGymGetStatus.CanGet;
            }
        }
        get mHandbookRed() {
            let _quas = t_Gym_NPC_Bond.Ins.quaList;
            for (let i = 0; i < _quas.length; i++) {
                let qua = _quas[i];
                if (this.hasQuaHandBookRed(qua)) {
                    return true;
                }
            }
        }
        hasQuaHandBookRed(qua) {
            let l1 = t_Gym_NPC_Bond.Ins.getListByQua(qua);
            for (let i = 0; i < l1.length; i++) {
                let cfg = l1[i];
                let status = HeroHouseModel.Ins.getFetterStatus(cfg.f_id);
                if (status == EGymHeroFetterStatus.CanActivied) {
                    return true;
                }
            }
        }
        updateRed() {
            if (this.mRed) {
                DotManager.addMainDot("icon5", -20, -5);
            }
            else {
                DotManager.remMainDot("icon5");
            }
            this.event(GymEvent.RedUpdate);
        }
        get popInfo() {
            let cell = {};
            let l = this.invitelGymList;
            let cnt = 0;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.rewardStatus == EGymLingQu.CanLingqu) {
                    cnt++;
                }
            }
            cell.finishCount = cnt;
            let sub = l.length - cnt;
            sub--;
            if (sub < 0) {
                sub = 0;
            }
            let max = t_Gym_Config.Ins.cfg.f_Queue;
            if (sub > max) {
                sub = max;
            }
            cell.needAnimCount = sub;
            return cell;
        }
        initMsg() {
            this.Reg(new HeroHouseMainView(EViewType.HeroHouse));
            this.Reg(new HeroHouseSwitchView(EViewType.HeroHouseSwicth));
            this.Reg(new HeroHouseShowView(EViewType.HeroHouseShow));
            this.Reg(new HeroHouseSelectMapView(EViewType.HeroHouseMapSel));
            this.Reg(new HeroHouseLevelUp(EViewType.HeroHouseLevelUp));
            this.Reg(new HeroHouseShopView(EViewType.HeroHouseShop));
            this.Reg(new HeroHouseTaskView(EViewType.HeroHouseTask));
            this.Reg(new HeroHouseReadView(EViewType.HeroInherit, ELayerType.subFrameLayer));
            this.Reg(new HeroHouseDetailView(EViewType.HeroHouseDetail));
            this.Reg(new HeroKnowledgeView(EViewType.HeroHouseKnowLedge));
            this.Reg(new HeroHouseHandbookView(EViewType.HeroHouseHandbook));
            this.Reg(new HeroHouseStorgeView(EViewType.HeroHouseStorge));
            this.Reg(new HeroHouseWeiTuoView(EViewType.HeroHouseWeiTuo));
            this.Reg(new HeroHousePackage(EViewType.HeroHousePackage));
            E.MsgMgr.AddMsg(MSGID.GymInfoRevc, this.onGymInfoRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymInviteRevc, this.onGymInviteRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymEquipInitRevc, this.onGymEquipInitRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymEquipChangeRevc, this.onGymEquipChangeRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymForgetEquipRevc, this.onGymForgetEquipRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymFacilityListRevc, this.onGymFacilityListRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymRoomLevel, this.onGymRoomLevel, this);
            E.MsgMgr.AddMsg(MSGID.GymUpgradeRevc, this.onGymUpgradeRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymFacilityRefinementListRevc, this.GymFacilityRefinementListRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymFacilityRefinementChangeRevc, this.onGymFacilityRefinementChangeRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymMapTasksRevc, this.onGymMapTasksRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymMissionListRevc, this.onGymMissionListRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymMissionUpdateRevc, this.onGymMissionUpdateRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymBondListInitRevc, this.onGymBondListInitRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymBondChangeRevc, this.onGymBondChangeRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymBondNpcChangeRevc, this.onGymBondNpcChangeRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymInvitationRevc, this.onGymInvitationRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymFacilitySummaryRevc, this.onGymFacilitySummaryRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymRoomSummaryRevc, this.onGymRoomSummaryRevc, this);
            E.MsgMgr.AddMsg(MSGID.GymMissionRefreshUpdateRevc, this.onGymMissionRefreshUpdateRevc, this);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onCheckXingWu);
        }
        onGymMissionRefreshUpdateRevc(revc) {
            this.taskList[revc.index] = revc.mission;
            this.event(GymEvent.TaskUpdate);
        }
        onGymRoomSummaryRevc(revc) {
            this.gymRoomSummaryAttrList = revc.attrList;
            this.event(GymEvent.MainAttrUpdate);
        }
        onGymFacilitySummaryRevc(revc) {
            this.facilitySummaryAttrList = revc.attrList;
            this.event(GymEvent.MainAttrUpdate);
        }
        reqInviation() {
            let req = new GymInvitation_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onGymInvitationRevc(revc) {
            this.inviationCtl.nextRefreshTime = revc.nextRefreshTime;
        }
        onGymBondListInitRevc(revc) {
            this.bond = revc;
        }
        isHeroOpen(heroId) {
            if (this.bond) {
                return this.bond.npcIds.find(item => item.id == heroId);
            }
        }
        isFetter(fid) {
            if (this.bond) {
                return this.bond.activedFids.indexOf(fid) != -1;
            }
        }
        getFetterStatus(fid) {
            if (this.isFetter(fid)) {
                return EGymHeroFetterStatus.Finished;
            }
            let cfg = t_Gym_NPC_Bond.Ins.GetDataById(fid);
            let arr = cfg.f_NpcIds.split("|");
            for (let i = 0; i < arr.length; i++) {
                let id = parseInt(arr[i]);
                if (!this.isHeroOpen(id)) {
                    return EGymHeroFetterStatus.WaitFind;
                }
            }
            return EGymHeroFetterStatus.CanActivied;
        }
        onGymBondChangeRevc(revc) {
            let fid = revc.fid;
            let index = this.bond.activedFids.indexOf(fid);
            if (index == -1) {
                this.bond.activedFids.push(fid);
            }
            this.event(GymEvent.BondUpadte);
            this.updateRed();
        }
        onGymBondNpcChangeRevc(revc) {
            let cell = this.bond.npcIds.find(item => item.id == revc.npcId.id);
            if (cell) {
                cell.degree = revc.npcId.degree;
            }
            else {
                this.bond.npcIds.push(revc.npcId);
                this.newNplcIdCache.push(revc.npcId.id);
            }
            this.event(GymEvent.BondUpadte);
        }
        hasGetHero(heroId) {
            let bFind = false;
            let index = this.newNplcIdCache.indexOf(heroId);
            if (index != -1) {
                bFind = true;
                this.newNplcIdCache.splice(index, 1);
            }
            return bFind;
        }
        onGymMissionListRevc(revc) {
            this.taskList = revc.datalist;
            this.event(GymEvent.TaskUpdate);
        }
        onGymMissionUpdateRevc(revc) {
            let l = revc.datalist;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let vo = this.taskList.find(item => item.fid == cell.fid);
                if (vo) {
                    vo.count = cell.count;
                    vo.rewardStatus = cell.rewardStatus;
                }
                else {
                    this.taskList.push(cell);
                }
            }
            this.event(GymEvent.TaskUpdate);
        }
        onGymMapTasksRevc(revc) {
            for (let i = 0; i < revc.list.length; i++) {
                let cell = revc.list[i];
                let find = this.mapTasklist.find(item => item.taskTypeId == cell.taskTypeId);
                if (find) {
                    find.param = cell.param;
                }
                else {
                    this.mapTasklist.push(cell);
                }
            }
            this.event(GymEvent.MapUdapate);
        }
        updateCell(cell, oldList) {
            let updateOk = false;
            for (let i = 0; i < oldList.length; i++) {
                if (cell.wearable == oldList[i].wearable) {
                    oldList[i] = cell;
                    updateOk = true;
                }
            }
            if (!updateOk) {
                oldList.push(cell);
            }
        }
        isMapLocked(fid) {
            if (fid > this.info.mapId) {
                return true;
            }
            return false;
        }
        isNextUnlock(fid) {
            return this.info.mapId + 1 == fid;
        }
        isSelMap(fid) {
            return this.info.curMapId == fid;
        }
        showAttr() {
            let l = this.bond.activedFids;
            let str = "";
            for (let i = 0; i < l.length; i++) {
                let id = l[i];
                let cfg = t_Gym_NPC_Bond.Ins.GetDataById(id);
                str += cfg.f_bondAttr + "|";
            }
            if (str.length > 0) {
                str = str.substr(0, str.length - 1);
            }
            let arr = PlayerVoFactory.mergeAttr(str);
            E.ViewMgr.Open(EViewType.AttrShow, null, arr);
        }
        onGymFacilityRefinementChangeRevc(revc) {
            let reslist = revc.datalist;
            for (let i = 0; i < reslist.length; i++) {
                let _new = reslist[i];
                let old = this.defineList.find(item => item.id == _new.id);
                if (old) {
                    old.datalist = _new.datalist;
                }
                else {
                    let cell = new stGymFacilityRefinement();
                    cell.id = _new.id;
                    cell.datalist = _new.datalist;
                    this.defineList.push(cell);
                }
            }
            this.event(GymEvent.WashSucceed);
        }
        get facilitList() {
            if (!this._facilitList) {
                this._facilitList = [];
                let l = t_Gym_Facility_List.Ins.List;
                for (let i = 0; i < l.length; i++) {
                    let _cell = new HeroFacilitiesVo();
                    _cell.cfg = l[i];
                    this._facilitList.push(_cell);
                }
            }
            return this._facilitList;
        }
        getNameByType(type) {
            let l = this.facilitList;
            let cell = l.find(item => item.type == type);
            if (cell) {
                return cell.sceneName;
            }
            return "";
        }
        GymFacilityRefinementListRevc(revc) {
            this.defineList = revc.datalist;
            this.event(GymEvent.WashSucceed);
        }
        get defineShowAttr() {
            return this.facilitySummaryAttrList;
        }
        get heroAttr() {
            return this.gymRoomSummaryAttrList;
        }
        washByID(id, useType) {
            let req = new GymFacilityRefinement_req();
            req.type = 1;
            req.id = id;
            req.usetype = useType;
            SocketMgr.Ins.SendMessageBin(req);
        }
        switchId(id) {
            let req = new GymFacilityRefinement_req();
            req.type = 2;
            req.id = id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        getHeroCount(heroType) {
            let count = 0;
            let l = this.equipList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.heroType == heroType) {
                    count++;
                }
            }
            return count;
        }
        delEquip(uid) {
            let cell = this.equipList.find(item => item.uid == uid);
            if (cell) {
                let index = this.equipList.indexOf(cell);
                this.equipList.splice(index, 1);
            }
            this.autoCtl.continueTask();
            this.event(GymEvent.RemovePop);
            if (!this.autoCtl.isAuto) {
                this.openPop();
            }
            this.updateRed();
        }
        onGymUpgradeRevc(revc) {
            let fItem = revc.upgradeInfo;
            this.updateFacility(fItem);
            this.event(GymEvent.FacilitiesUpdate);
        }
        onGymRoomLevel(revc) {
            this.data = revc;
            this.levelCtl.time = revc.time - 1;
            this.levelCtl.slotCount = revc.level;
            if (E.Debug) {
                console.log("神识的等级推送%c" + revc.level + "," + revc.time, "color:#ff0000");
            }
            this.event(GymEvent.KnowledgeLevelUp);
        }
        updateFacility(fItem) {
            let cell = this.facilitList.find(item => item.id == fItem.id);
            cell.fid = fItem.fid;
            cell.taskVal = fItem.taskVal;
        }
        onGymFacilityListRevc(revc) {
            let upgradeList = revc.datalist;
            for (let i = 0; i < upgradeList.length; i++) {
                let fItem = upgradeList[i];
                this.updateFacility(fItem);
            }
            this.event(GymEvent.FacilitiesUpdate);
        }
        delInviteList(uid) {
            let l = [];
            for (let i = 0; i < this.invitelGymList.length; i++) {
                let cell = this.invitelGymList[i];
                if (cell.uid == uid) {
                    cell.dispose();
                }
                else {
                    l.push(cell);
                }
            }
            this.invitelGymList = l;
        }
        onGymForgetEquipRevc(revc) {
            this.delInviteList(revc.uid);
            this.delEquip(revc.uid);
        }
        onGymInfoRevc(revc) {
            this.info = revc;
            this.event(GymEvent.MapUdapate);
        }
        onGymInviteRevc(revc) {
            let inviteList = revc.itemlist;
            while (this.invitelGymList.length > 0) {
                let _cell = this.invitelGymList.pop();
                _cell.dispose();
            }
            for (let i = 0; i < inviteList.length; i++) {
                let cell = inviteList[i];
                let vo = new GymInviteVo(cell);
                this.invitelGymList.push(vo);
            }
            if (E.Debug) {
                LogSys$1.Log("START\t################################### 气泡列表");
                let l = this.invitelGymList;
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    console.log('%c index: ' + i + cell.toCellString(), 'color:#0000ff');
                }
                LogSys$1.Log("END\t################################### 气泡列表");
            }
            this.event(GymEvent.InvitePopUpdate);
            if (!this.autoCtl.isAuto) {
                this.openPop();
            }
        }
        onGymEquipInitRevc(revc) {
            this.equipList = revc.datalist;
        }
        onGymEquipChangeRevc(revc) {
            let l = revc.datalist;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                let a = this.equipList.find(item => item.uid == cell.uid);
                if (a) {
                    let index = this.equipList.indexOf(a);
                    this.equipList[index] = cell;
                }
                else {
                    this.equipList.push(cell);
                    LogSys$1.Log("添加神识装备:" + cell.uid);
                    this.delInviteList(cell.uid);
                }
            }
            this.autoCtl.continueTask();
        }
        get queueMax() {
            return t_Gym_Config.Ins.cfg.f_Queue;
        }
        get bInviteFull() {
            let count = this.invitelGymList.length;
            return count >= this.queueMax + 1;
        }
        useSubInvite(count) {
            let ids = [];
            let _highHeroInviteCount = MainModel.Ins.mRoleData.getVal(ECellType.HighHeroInvite);
            let sub = count - _highHeroInviteCount;
            let oldNeed = 0;
            let highNeed = 0;
            if (sub < 0) {
                oldNeed = 0;
                highNeed = count;
            }
            else {
                oldNeed = sub;
                highNeed = count - sub;
            }
            for (let i = 0; i < oldNeed; i++) {
                ids.push(ECellType.HeroInvite);
            }
            for (let i = 0; i < highNeed; i++) {
                ids.push(ECellType.HighHeroInvite);
            }
            return ids;
        }
        invite(type = exports.EInviteType.One, tips = false) {
            if (!this.canInvite(type, tips)) {
                this.autoCtl.stopTask();
                return;
            }
            let itemId = 0;
            if (this.curStorgeItemId != ECellType.Auth) {
                itemId = this.curStorgeItemId;
            }
            let req = new GymInvite_req();
            if (itemId == 0) {
                req.itemIds = [];
            }
            else {
                if (type == exports.EInviteType.One) {
                    req.itemIds = [itemId];
                }
                else {
                    let itemIds = [];
                    let cnt = MainModel.Ins.mRoleData.getVal(itemId);
                    for (let i = 0; i < this.maxCount; i++) {
                        if (cnt > 0) {
                            itemIds.push(itemId);
                        }
                        cnt--;
                    }
                    req.itemIds = itemIds;
                }
            }
            let ids = this.useSubInvite(type == exports.EInviteType.One ? 1 : this.maxCount);
            req.invitionIds = ids;
            req.type = type;
            SocketMgr.Ins.SendMessageBin(req);
        }
        canInvite(type = exports.EInviteType.One, tips = false) {
            if (this.bInviteFull) {
                if (tips) {
                    E.ViewMgr.ShowMidError(E.getLang("GymPeopleFull"));
                }
                return;
            }
            let vo = this.animInviteVo;
            if (vo) {
                if (tips) {
                    E.ViewMgr.ShowMidError(E.getLang("heroend"));
                }
                return;
            }
            let count = 1;
            if (type == exports.EInviteType.Five) {
                count = this.maxCount;
            }
            let a = MainModel.Ins.mRoleData.getVal(ECellType.HeroInvite);
            let b = MainModel.Ins.mRoleData.getVal(ECellType.HighHeroInvite);
            if (a + b < count) {
                if (tips) {
                    E.ViewMgr.ShowMidError(E.getLang("HeroInviteNotEnough"));
                }
                return;
            }
            return true;
        }
        forget(vo) {
            if (vo) {
                this.del(vo.mData.item.uid);
            }
        }
        del(uid) {
            let req = new GymForgetEquip_req();
            req.uid = uid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        get firstVo() {
            if (this.invitelGymList.length > 0) {
                let item = this.invitelGymList[0];
                if (item.isTimeEnd == false) {
                    return;
                }
                return item;
            }
        }
        getColorByQua(qua) {
            let cfg = t_Gym_NPC_Quality.Ins.getByQua(qua);
            return `#${cfg.f_Color}`;
        }
        getCountry(type) {
            return E.getLang("Country")[type - 1];
        }
        getUnlockCount(herotype) {
            let cfg = this.levelCtl.curSlot.cfg;
            let arr = cfg.f_Slots.split("|");
            for (let i = 0; i < arr.length; i++) {
                let cell = arr[i];
                let a = cell.split("-");
                if (parseInt(a[0]) == herotype) {
                    return parseInt(a[1]);
                }
            }
            return 0;
        }
        getByLv(herotype, lv) {
            let cfg = t_Gym_NPC_InnerRoom.Ins.getByLv(lv);
            if (cfg) {
                let arr = cfg.f_Slots.split("|");
                for (let i = 0; i < arr.length; i++) {
                    let str = arr[i];
                    let a = str.split("-");
                    let _heroType = parseInt(a[0]);
                    let _count = parseInt(a[1]);
                    if (_heroType == herotype) {
                        return _count;
                    }
                }
            }
            return 0;
        }
        getEquipListByType(heroType) {
            let l = this.equipList;
            let olist = [];
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.heroType == heroType) {
                    olist.push(cell);
                }
            }
            return olist;
        }
        getHeroList(heroType) {
            let equipList = this.equipList || [];
            let l = [];
            for (let i = 0; i < equipList.length; i++) {
                let cell = equipList[i];
                if (cell.heroType == heroType) {
                    l.push(cell);
                }
            }
            return l;
        }
        getMapTaskDesc(_data) {
            let taskStr = _data.task;
            let cell = new HeroHouseTaskVo();
            if (taskStr == "") {
                cell.empty = true;
                return cell;
            }
            if (!taskStr) {
                let cfg = AdventureLevelProxy.Ins.getByLevelId(_data.passId);
                let name = AdventureLevelProxy.Ins.getChapterName(cfg);
                let arr = E.getLang("FinishLabels").split("|");
                let _statusStr = arr[0];
                let adventureId = NewAdventureModel.Ins.adventureData.adventureId;
                let pre = AdventureLevelProxy.Ins.getPreCfg(adventureId);
                if (adventureId == 0) {
                    cell.finished = true;
                }
                else if (pre == undefined || pre && pre.f_Levelid < cfg.f_Levelid) {
                    _statusStr = arr[1];
                    cell.finished = false;
                }
                else {
                    cell.finished = true;
                }
                cell.desc = E.getLang("NeedPass", name);
            }
            else {
                let arr = taskStr.split("-");
                let type = parseInt(arr[0]);
                let need = parseInt(arr[1]);
                let param1 = 0;
                let taskcell = this.mapTasklist.find(item => item.taskTypeId == type);
                if (taskcell) {
                    param1 = taskcell.param;
                }
                let cfg = t_Gym_Mission_Type.Ins.GetDataById(type);
                let s = StringUtil.format(cfg.f_GymtaskContent, param1, need);
                cell.desc = s;
                cell.need = need;
                cell.have = param1;
                cell.finished = cell.have >= cell.need;
            }
            return cell;
        }
        hasSlotCount(heroType) {
            let cfg = t_Gym_NPC_InnerRoom.Ins.getByLv(this.levelCtl.cfgLv);
            let f_Slots = cfg.f_Slots.split("|");
            for (let i = 0; i < f_Slots.length; i++) {
                let node = f_Slots[i];
                let arr = node.split("-");
                let type = parseInt(arr[0]);
                let count = parseInt(arr[1]);
                if (type == heroType) {
                    return count;
                }
            }
            return 0;
        }
        buildSlotViewListVo(heroType) {
            let templist = this.getHeroList(heroType);
            let vlist = [];
            let l = t_Gym_NPC_InnerRoom.Ins.List;
            let out = [];
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                let arr = cfg.f_Slots.split("|");
                for (let n = 0; n < arr.length; n++) {
                    let a = arr[n].split("-");
                    let type = parseInt(a[0]);
                    let count = parseInt(a[1]);
                    if (type == heroType) {
                        let _fItem = out.find(item => item.count == count);
                        if (!_fItem) {
                            let o = {};
                            o.f_id = cfg.f_id;
                            o.count = count;
                            out.push(o);
                        }
                    }
                }
            }
            for (let i = 0; i < out.length; i++) {
                let o = out[i];
                let slot = new GymSlotViewVo();
                slot.heroType = heroType;
                let cfg = t_Gym_NPC_InnerRoom.Ins.GetDataById(o.f_id);
                slot.unlockLevel = cfg.f_RoomLevel;
                if (slot.unlockLevel <= this.levelCtl.cfgLv) {
                    slot.equipVo = templist.pop();
                }
                vlist.push(slot);
            }
            return vlist;
        }
        hasEmpty(type) {
            let count = this.hasSlotCount(type);
            let templist = this.getHeroList(type);
            return templist.length < count;
        }
        getDegreeDesc(degree) {
            return "完整度" + (degree / 100) + "%";
        }
        getTaskIcon(f_iconid) {
            return `o/gym/${f_iconid}.png`;
        }
        getHeroIcon(f_iconid) {
            return `o/gym/${f_iconid}.png`;
        }
        getMapIcon(id) {
            return `remote/hero_house/${id}.png`;
        }
        equip(uid) {
            let req = new GymSwicthEquip_req();
            req.newUid = uid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        getRegion(heroId) {
            let cfg = t_Gym_NPC_List.Ins.getByHeroID(heroId);
            if (cfg.f_Region) {
                let mapCfg = t_Gym_Map.Ins.GetDataById(cfg.f_Region);
                return mapCfg.f_MapName;
            }
            return E.getLang("AllRegion");
        }
        refreshAttrView(attrSkinList, img, nametf, attrs, heroId) {
            let l = attrs;
            for (let i = 0; i < attrSkinList.length; i++) {
                let tf = attrSkinList[i];
                if (i < l.length) {
                    let cell = l[i];
                    tf.text = MainModel.Ins.getAttrNameIdByID(cell.id) + ":" + attrConvert(cell.id, cell.value);
                }
                else {
                    tf.text = "";
                }
            }
            let heroCfg = t_Gym_NPC_List.Ins.getByHeroID(heroId);
            img.skin = this.getHeroIcon(heroCfg.f_iconid);
            nametf.text = heroCfg.f_name;
            nametf.color = this.getColorByQua(heroCfg.f_HeroQuality);
        }
        findCfg(f_id) {
            return t_Gym_Facility_Platform.Ins.GetDataById(f_id);
        }
        findNextRank(f_id) {
            let cfg = t_Gym_Facility_Platform.Ins.GetDataById(f_id);
            if (cfg) {
                let _nextCfg = t_Gym_Facility_Platform.Ins.findByRank(cfg.f_FacilityRank + 1);
                return _nextCfg;
            }
        }
        sortYanWu(a, b) {
            if (a.sort < b.sort) {
                return -1;
            }
            else if (a.sort > b.sort) {
                return 1;
            }
            return 0;
        }
        get taskRefreshCfg() {
            let cfg = t_Gym_Mission_Config.Ins.GetDataById(1);
            return cfg;
        }
        buildTask(out, id, f_Task) {
            if (!StringUtil.IsNullOrEmpty(f_Task)) {
                let task = f_Task.split('-');
                let taskCfg = t_Gym_Mission_Type.Ins.GetDataById(parseInt(task[0]));
                let have = 0;
                let cell = this.facilitList.find(item => item.id == id);
                let needCount = parseInt(task[1]);
                if (cell) {
                    have = cell.taskVal;
                }
                out.taskDesc = StringUtil.format(taskCfg.f_GymtaskContent, have, task[1]);
                if (have >= needCount) {
                    out.taskNotComplete = true;
                }
            }
        }
        getStorgeList() {
            let l = MainModel.Ins.getItemList(EItemSubType.Authenticating);
            let r = [];
            let _defaultCell = new HeroItemSelVo();
            _defaultCell.infinite = true;
            let _itemVo = new ItemVo();
            _itemVo.cfgId = ECellType.Auth;
            _defaultCell.itemVo = _itemVo;
            r.push(_defaultCell);
            for (let i = 0; i < l.length; i++) {
                let cell = new HeroItemSelVo();
                cell.itemVo = l[i];
                cell.index = i;
                r.push(cell);
            }
            this.storgeList = r;
            return this.storgeList;
        }
        getColorByHeroID(id) {
            let heroCfg = t_Gym_NPC_List.Ins.getByHeroID(id);
            let quaCfg = t_Gym_NPC_Quality.Ins.GetDataById(heroCfg.f_HeroQuality);
            return `#${quaCfg.f_Color}`;
        }
        getMaxDrgree(heroId) {
            let cell = this.bond.npcIds.find(item => item.id == heroId);
            if (cell) {
                return this.getDegreeDesc(cell.degree);
            }
            return "";
        }
        buildListData(id, fid) {
            let out = {};
            let cfg = this.findCfg(fid);
            let redType = 6;
            let curArr = (cfg.f_Not_Red_Client + "|" + redType + "-" + cfg.f_Red_Client).split("|");
            let nextArr;
            let nextCfg = this.findNextRank(fid);
            if (nextCfg) {
                nextArr = (nextCfg.f_Not_Red_Client + "|" + redType + "-" + nextCfg.f_Red_Client).split("|");
            }
            this.buildTask(out, id, cfg.f_Task);
            let l = [];
            for (let i = 0; i < curArr.length; i++) {
                let a = curArr[i];
                let cell = new YanWuLevelUpItemVo();
                let qua = parseInt(a.split("-")[0]);
                cell.cur = a;
                cell.qua = qua;
                cell.cfg = t_Gym_NPC_Quality.Ins.GetDataById(qua);
                if (nextArr) {
                    let b = nextArr[i];
                    cell.next = b;
                }
                l.push(cell);
            }
            l = l.sort(this.sortYanWu);
            out.datalist = l;
            out.cfg = cfg;
            return out;
        }
        getBookOpenCount(qua) {
            let _count = 0;
            let l = this.bond.activedFids;
            for (let i = 0; i < l.length; i++) {
                let id = l[i];
                let cfg = t_Gym_NPC_Bond.Ins.GetDataById(id);
                if (cfg.f_BondQuality == qua) {
                    _count++;
                }
            }
            return _count;
        }
        levelUp(vo) {
            let req = new GymUpgrade_req();
            req.id = vo.id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        convertShowLv(lv) {
            return lv + 1;
        }
    }
    class YanWuLevelUpItemVo {
        get sort() {
            return this.cfg.f_sort;
        }
        get color() {
            if (this.qua == 7) {
                return "#" + E.getLang("Gray");
            }
            return HeroHouseModel.Ins.getColorByQua(this.qua);
        }
        get name() {
            return this.cfg.f_NPCQuality;
        }
        f_convert(s) {
            if (!s)
                return "";
            let val = parseInt(s.split("-")[1]);
            return (val / 100) + "%";
        }
        get curStr() {
            return this.f_convert(this.cur);
        }
        get nextStr() {
            return this.f_convert(this.next);
        }
    }

    exports.HeroHouseModel = HeroHouseModel;
    exports.HeroHouseTaskVo = HeroHouseTaskVo;
    exports.YanWuLevelUpItemVo = YanWuLevelUpItemVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HuanzhuangItemShowVo {
    }
    class HuanZhuanTuJianIcon {
        constructor(skin) {
            this.locked = false;
            this.skin = skin;
            this.skin.sel.visible = false;
            this.skin.lockimg.visible = false;
            this.skin.ck.visible = false;
        }
        setData(type, equipStyle) {
            let str = `${type}_${equipStyle}`;
            let s = "";
            if (equipStyle == 0) {
                this.skin.icon.skin = "";
            }
            else {
                if (type == EEquipType.ZuoQi) {
                    s = IconUtils.getHorseIcon(equipStyle);
                }
                else {
                    s = `o/item/${str}.png`;
                }
            }
            this.skin.icon.skin = s;
            let unlockList = HuanZhuangModel.Ins.unlockList;
            let findItem = unlockList.find(item => item.equipType == type && item.equipStyle == equipStyle);
            if (!findItem) {
                this.skin.lockimg.visible = true;
                this.skin.icon.gray = true;
                this.locked = true;
            }
            else {
                this.skin.lockimg.visible = false;
                this.skin.icon.gray = false;
                this.locked = false;
            }
        }
        set visible(v) {
            this.skin.visible = v;
        }
    }
    class HuanzhuangTujianItemRender extends ui.views.huanzhuang.ui_huangzhuangtujian_itemUI {
        constructor() {
            super();
            this._ctlList = [];
            for (let i = 0; i < 6; i++) {
                this._ctlList.push(new HuanZhuanTuJianIcon(this['item' + i]));
            }
            this.btnCtl = ButtonCtl.CreateBtn(this.jihuoBtn, this, this.onJiHuoHandler);
            this.on(Laya.Event.DISPLAY, this, this.onDisplay);
            this.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
        }
        onDisplay() {
            HuanZhuangModel.Ins.on(HuanZhuangEvent.SuitUpdate, this, this.onSuitUpdate);
        }
        onUnDisplay() {
            HuanZhuangModel.Ins.off(HuanZhuangEvent.SuitUpdate, this, this.onSuitUpdate);
        }
        onJiHuoHandler() {
            let req = new suitEquip_req();
            req.id = this.cfg.f_Costumesid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onSuitUpdate() {
            if (this.cfg) {
                this.refreshView();
            }
        }
        set enableTex(v) {
            if (v) {
                this.lefttf1.color = "#54EDFF";
                this.lefttf1.strokeColor = "#2B8AC7";
            }
            else {
                this.lefttf1.color = "#FBFAF8";
                this.lefttf1.strokeColor = "#90501F";
            }
        }
        refreshView() {
            this.cfg = this.dataSource;
            if (this.cfg == null) {
                return;
            }
            let typeList = [EEquipType.Casque, EEquipType.Barde, EEquipType.Weapon, EEquipType.Shield, EEquipType.ZuoQi, EEquipType.Wing];
            let l = [];
            for (let i = 0; i < typeList.length; i++) {
                let type = typeList[i];
                let val = this.cfg["f_" + type];
                if (val) {
                    let vo = new HuanzhuangItemShowVo();
                    vo.type = type;
                    vo.val = parseInt(val);
                    l.push(vo);
                }
            }
            let lockedNum = 0;
            let allItemNum = 0;
            for (let i = 0; i < this._ctlList.length; i++) {
                let ctl = this._ctlList[i];
                let vo = l[i];
                if (vo) {
                    ctl.setData(vo.type, vo.val);
                    ctl.visible = true;
                    allItemNum++;
                    if (ctl.locked) {
                        lockedNum++;
                    }
                }
                else {
                    ctl.visible = false;
                }
            }
            this.righttf1.text = "";
            this.btnCtl.visible = false;
            if (HuanZhuangModel.Ins.isSuitUnLock(this.cfg.f_Costumesid)) {
                this.righttf1.text = "已激活";
                this.enableTex = true;
            }
            else {
                if (allItemNum - lockedNum < allItemNum) {
                    this.enableTex = false;
                    this.righttf1.text = "未激活";
                }
                else {
                    this.btnCtl.visible = true;
                    this.btnCtl.grayMouseDisable = false;
                    this.tf1.text = "激活";
                    this.enableTex = false;
                }
            }
            this.titleTf.text = this.cfg.f_Name + "(" + (allItemNum - lockedNum) + "/" + allItemNum + ")";
            this.lefttf1.text = this.attrStr;
        }
        get attrStr() {
            let str = this.cfg.f_SuitID;
            if (StringUtil.IsNullOrEmpty(str)) {
                return "";
            }
            let arr = str.split("|");
            let out = "";
            for (let i = 0; i < arr.length; i++) {
                let a = arr[i].split(":");
                let id = parseInt(a[0]);
                let v = parseInt(a[1]);
                let val = attrConvert(id, v);
                out += `${MainModel.Ins.getAttrNameIdByID(id)} ${val}  `;
            }
            return out;
        }
    }

    exports.HuanzhuangItemShowVo = HuanzhuangItemShowVo;
    exports.HuanzhuangTujianItemRender = HuanzhuangTujianItemRender;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class UnLockView extends ViewBase {
        onAddLoadRes() { }
        onExit() {
            this.disposeAvatar();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_unlock_heroUI();
                this.mMask = true;
                this.mClickAnyAreaClose = true;
                this._ui.list1.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemHender);
            }
        }
        playCongratulatEffect() {
            if (!this.congratulatEffect) {
                this.congratulatEffect = new SimpleEffect(this._ui.gxCon, "o/spine/gxjq/gxjq");
            }
            this.congratulatEffect.play(0, false, this, this.onPlayEnd, null, true);
        }
        onPlayEnd() {
        }
        disposeAvatar() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        onItemHender(item) {
            item.tf1.visible = false;
            let vo = item.dataSource;
            let str = `${vo.type}_${vo.val}`;
            item.icon.skin = `o/item/${str}.png`;
            item.quality.skin = IconUtils.getQuaIcon(this.qua);
        }
        onInit() {
            let suitid = this.Data;
            let cfg = t_Custom_CostumesProxy.Ins.getByCostumesid(suitid);
            this.qua = cfg.f_equipQuality;
            let typeList = [EEquipType.Casque, EEquipType.Barde, EEquipType.Weapon, EEquipType.Shield, EEquipType.ZuoQi, EEquipType.Wing];
            let l = [];
            for (let i = 0; i < typeList.length; i++) {
                let type = typeList[i];
                let val = cfg["f_" + type];
                if (val) {
                    let vo = new HuanzhuangItemShowVo();
                    vo.type = type;
                    vo.val = parseInt(val);
                    l.push(vo);
                }
            }
            this._ui.list1.array = l;
            this.disposeAvatar();
            let _skinVo = new stSkin();
            _skinVo.f_HeadID = cfg.f_2;
            _skinVo.f_BodyID = cfg.f_5;
            _skinVo.f_WeaponID = cfg.f_9;
            _skinVo.f_ShieldID = cfg.f_12;
            this._avatar = AvatarFactory.createFightMonsterAvatar(EAvatarDir.Left, 0, 0, false, MainModel.Ins.randomImageID);
            this._avatar.mSkin = _skinVo;
            this._ui.heroCon.addChild(this._avatar);
            this._ui.heroName.text = cfg.f_Name + E.getLang("suit01");
            this.playCongratulatEffect();
            RedUpdateModel.Ins.save(RedEnum.SUIT_ID + suitid, 1);
        }
    }

    exports.UnLockView = UnLockView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GuangGaoView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('huodong.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.huodong.ui_guanggaoUI;
                this.bindClose(this._ui.btn_close);
                this.mf_ctl = ButtonCtl.Create(this._ui.btn_mf, new Laya.Handler(this, this.onBtnClick));
                this.tq_ctl = ButtonCtl.Create(this._ui.img_tq, new Laya.Handler(this, this.onBtnTQClick));
                this.timeCtl = new TimeCtl(this._ui.timeTf);
                this._ui.list.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemHandler);
                if (t_Platform.Ins.isHideAdImg) {
                    this.tq_ctl.visible = false;
                    this.UI.height -= this._ui.img_tq.height;
                }
            }
        }
        onBtnTQClick() {
            E.ViewMgr.Open(EViewType.ZhongShenKa);
        }
        onInit() {
            GuaJiModel.Ins.on(GuaJiModel.UPDATA_CD_TIME, this, this.upDataView);
            this.upDataView();
            let arr = System_RefreshTimeProxy.Ins.GetDataById(15).f_SystemConfig.split("|");
            this._ui.list.array = arr;
        }
        onExit() {
            GuaJiModel.Ins.off(GuaJiModel.UPDATA_CD_TIME, this, this.upDataView);
            this.timeCtl.stop();
            this.mf_ctl.dispose();
            this.tq_ctl.dispose();
        }
        onItemHandler(item) {
            let vo = new ItemVo();
            vo.cfgId = parseInt(item.dataSource.split("-")[0]);
            vo.count = parseInt(item.dataSource.split("-")[1]);
            ItemViewFactory.refreshSlot(item, vo);
        }
        onBtnClick() {
            let cfg = GuaJiModel.Ins.getstAdCdByType(GuaJiModel.CDEnmu.GuangGao);
            let num = parseInt(System_RefreshTimeProxy.Ins.GetDataById(16).f_SystemConfig) - cfg.times;
            if (num == 0) {
                E.ViewMgr.ShowMidError("今日观看已达上限,请明日再来");
                return;
            }
            E.sendTrack("ad_watch", { type: "guanggao" });
            E.sdk.lookVideo((type) => {
                console.log('type: ', type);
                switch (type) {
                    case 0:
                        break;
                    case 1:
                        E.sendTrack("ad_finish", { type: "guanggao" });
                        let req = new AdWatchDone_req;
                        req.pos = GuaJiModel.CDEnmu.GuangGao;
                        SocketMgr.Ins.SendMessageBin(req);
                        this.Close();
                        break;
                }
            });
        }
        upDataView() {
            let cfg = GuaJiModel.Ins.getstAdCdByType(GuaJiModel.CDEnmu.GuangGao);
            let num = parseInt(System_RefreshTimeProxy.Ins.GetDataById(16).f_SystemConfig) - cfg.times;
            this._ui.lab_cs.text = "剩余" + num + "次";
            if (num) {
                let time = cfg.endUnix - TimeUtil.serverTime;
                if (time > 0) {
                    this._ui.btn_mf.disabled = true;
                    this._ui.lab_name1.visible = true;
                    this._ui.timeTf.visible = true;
                    this._ui.img.visible = true;
                    this.timeCtl.start(time, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
                }
                else {
                    this.timeCtl.stop();
                    this.endTime();
                }
            }
            else {
                this._ui.btn_mf.disabled = true;
                this._ui.lab_name1.visible = false;
                this._ui.timeTf.visible = false;
                this._ui.img.visible = false;
                this.timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(time_str);
        }
        endTime() {
            this._ui.btn_mf.disabled = false;
            this._ui.lab_name1.visible = false;
            this._ui.timeTf.visible = false;
            this._ui.img.visible = false;
        }
    }

    exports.GuangGaoView = GuangGaoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Fund extends BaseCfg {
        GetTabelName() {
            return "t_Fund";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Fund();
            }
            return this._ins;
        }
    }
    class t_FundOne extends BaseCfg {
        GetTabelName() {
            return "t_FundOne";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_FundOne();
            }
            return this._ins;
        }
    }
    class t_FundTwo extends BaseCfg {
        GetTabelName() {
            return "t_FundTwo";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_FundTwo();
            }
            return this._ins;
        }
    }
    class t_FundThree extends BaseCfg {
        GetTabelName() {
            return "t_FundThree";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_FundThree();
            }
            return this._ins;
        }
    }

    exports.t_Fund = t_Fund;
    exports.t_FundOne = t_FundOne;
    exports.t_FundThree = t_FundThree;
    exports.t_FundTwo = t_FundTwo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TreasureVo {
        reset() {
        }
        get model() {
            return TreasureModel.ins;
        }
    }

    exports.TreasureVo = TreasureVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TreasureModel extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new TreasureModel();
            }
            return this._ins;
        }
        onInitCallBack() {
            let l = this.dataList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                cell.reset();
            }
            this.fundData = new FundInit_revc();
        }
        initMsg() {
            E.MsgMgr.AddMsg(MSGID.FundInit, this.onFundInit, this);
            E.MsgMgr.AddMsg(MSGID.FundReward, this.onFundReward, this);
        }
        onFundInit(revc) {
            this.fundData = revc;
            this.updateRed();
            this.event(TreasureModel.EventUpdate);
        }
        onFundReward(revc) {
            let cell = revc.updatedFundData;
            let l = this.fundData.fundList || [];
            let find = false;
            for (let i = 0; i < l.length; i++) {
                let o = l[i];
                if (o.id == cell.id) {
                    l[i] = cell;
                    find = true;
                    break;
                }
            }
            if (!find) {
                if (!this.fundData.fundList) {
                    this.fundData.fundList = [];
                }
                this.fundData.fundList.push(cell);
            }
            this.updateRed();
            this.event(TreasureModel.EventUpdate);
        }
        get isOpen() {
            return this.endTime > TimeUtil.serverTime;
        }
        get isPay() {
            if (this.isOpen) {
                let l = this.fundData.fundList;
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    if (cell.canBuy == 0) {
                        return true;
                    }
                }
            }
        }
        get dataList() {
            if (!this._dataList) {
                this._dataList = [];
                let l1 = t_Fund.Ins.List;
                for (let i = 0; i < l1.length; i++) {
                    let vo = new TreasureVo();
                    vo.cfg = l1[i];
                    this._dataList.push(vo);
                }
            }
            return this._dataList;
        }
        get endTime() {
            return this.fundData.endUnix || 0;
        }
        get hasRed() {
            if (this.isOpen) {
                let need = false;
                let l = this.fundData.fundList || [];
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    let canLingqu = this.stFund_hasRed(cell);
                    if (canLingqu) {
                        need = true;
                        break;
                    }
                }
                return need || MainModel.Ins.needRed(RedEnum.RED_JuBaoPeng);
            }
        }
        stFund_hasRed(cell) {
            let l = cell.dataList;
            for (let n = 0; n < l.length; n++) {
                let o = l[n];
                if (o.state == ELingQuStatus.CanLLingQu) {
                    return true;
                }
            }
        }
        getStatus(fund_f_id, sub_f_id) {
            let l = this.fundData.fundList || [];
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.id == fund_f_id) {
                    let l2 = cell.dataList;
                    for (let n = 0; n < l2.length; n++) {
                        let o = l2[n];
                        if (o.f_id == sub_f_id) {
                            return o.state;
                        }
                    }
                }
            }
            return ELingQuStatus.NotCanLingQu;
        }
        isFundCanLingqu(fund_f_id) {
            let l = this.fundData.fundList || [];
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.id == fund_f_id) {
                    if (this.stFund_hasRed(cell)) {
                        return true;
                    }
                }
            }
        }
        isBuyed(fund_f_id) {
            let l = this.fundData.fundList || [];
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.id == fund_f_id && cell.canBuy == 0) {
                    return true;
                }
            }
        }
        updateRed() {
            MainModel.Ins.funcSetRed(EFuncDef.JuBaoPeng, this.hasRed);
        }
    }
    TreasureModel.EventUpdate = "EventUpdate";

    exports.TreasureModel = TreasureModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TreasureSlotVo {
        static createVo(str, isLingqu) {
            let vo = new TreasureSlotVo();
            vo.item = str;
            vo.isLingqued = isLingqu;
            return vo;
        }
    }
    class JuBaoPengSlotView extends ui.views.main.ui_slot_lingqu_itemUI {
        constructor() {
            super();
            this.yilingqu.mouseEnabled = false;
            this.ctl = new ItemSlotCtl(this);
        }
        setData(vo) {
            let itemVo = ItemViewFactory.convertItem(vo.item);
            this.ctl.setData(itemVo);
            if (vo.isLingqued) {
                this.yilingqu.visible = true;
            }
            else {
                this.yilingqu.visible = false;
            }
        }
    }

    exports.JuBaoPengSlotView = JuBaoPengSlotView;
    exports.TreasureSlotVo = TreasureSlotVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Jubaopeng_itemView extends ui.views.huodong.ui_jubaopeng_itemUI {
        constructor() {
            super();
            this.initPosY = 0;
            this.curTime = 0;
            this.getLingquCtl = new ButtonCtl(this.lingquBtn, new Laya.Handler(this, this.onLingQuHandler));
            this.initPosY = this.lingquBtn.y;
        }
        lingquAction() {
            if (!this.model.isOpen) {
                E.ViewMgr.ShowMidError(E.getLang("activityend"));
                return;
            }
            if (this.curTime != 0 && Laya.timer.currTimer < this.curTime + 1000) {
                return;
            }
            this.curTime = Laya.timer.currTimer;
            let req = new FundReward_req();
            req.f_id = this.data.f_id;
            req.id = this.cfg.f_id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onLingQuHandler() {
            this.lingquAction();
        }
        setData(cfg, data) {
            this.cfg = cfg;
            this.data = data;
            let rewards = data.f_FundReward;
            this.dayTf.text = E.getLang("huodong02", StringUtil.toChinesNum(data.f_Day));
            this.getLingquCtl.visible = false;
            this.getLingquCtl.grayMouseDisable = false;
            this.lingquTf.text = E.getLang("LingQu");
            let _status = ELingQuStatus.NotCanLingQu;
            if (this.model.isBuyed(cfg.f_id)) {
                this.getLingquCtl.visible = true;
                _status = this.model.getStatus(cfg.f_id, data.f_id);
                if (_status == ELingQuStatus.CanLLingQu) ;
                else if (_status == ELingQuStatus.IsLingQu) {
                    this.lingquTf.text = E.getLang("LingQu2");
                    this.getLingquCtl.grayMouseDisable = true;
                }
                else if (_status == ELingQuStatus.NotCanLingQu) {
                    this.getLingquCtl.grayMouseDisable = true;
                }
            }
            this._status = _status;
            let itemArr = rewards.split("|");
            let gap = 10;
            let mWidth = 100;
            let rewardList = [];
            for (let i = 0; i < itemArr.length; i++) {
                rewardList.push(TreasureSlotVo.createVo(itemArr[i], _status == ELingQuStatus.IsLingQu));
            }
            ItemViewFactory.renderItemSlots(this.rewardCon, rewardList, gap, 1, "left", JuBaoPengSlotView, "JuBaoPengSlotView");
            let offsetx = this.rewardCon.x;
            let ow = offsetx * 2 + (itemArr.length * (mWidth + gap)) - gap;
            this.width = ow;
            this.getLingquCtl.setpos((this.width - this.lingquBtn.width) / 2, this.initPosY);
            if (this.getLingquCtl.visible) {
                this.rewardCon.y = 113;
            }
            else {
                this.rewardCon.y = 149;
            }
            if (this.model.getStatus(this.cfg.f_id, data.f_id) == ELingQuStatus.CanLLingQu) {
                this.redImg.visible = true;
            }
            else {
                this.redImg.visible = false;
            }
        }
        get model() {
            return TreasureModel.ins;
        }
    }

    exports.Jubaopeng_itemView = Jubaopeng_itemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JuBaoPengView extends ViewBase {
        constructor() {
            super(...arguments);
            this.tabCtl = new NoTabClassCommonCtl();
            this.itemKey = "Jubaopeng_itemView";
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("jubaopeng.atlas");
        }
        onExit() {
            this.model.off(TreasureModel.EventUpdate, this, this.updateEvt);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = TreasureModel.ins;
                this.UI = this._ui = new ui.views.huodong.ui_jubaopengUI();
                this.bindClose(this._ui.close1);
                this.cfgArr = [t_FundOne.Ins.List, t_FundTwo.Ins.List, t_FundThree.Ins.List];
                let gap = this._ui.tab1.x - this._ui.tab0.x - this._ui.tab1.width;
                this.tabCtl.init2(this._ui.tabcon, this, this.onSelHandler, this.tabItemRender, gap);
                this._ui.itemshow.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.itemshow.renderHandler = new Laya.Handler(this, this.onItemRender);
                let tctl = new TriangleHideCtl();
                tctl.bind(this._ui.itemshow, this._ui.showicon, true);
                this.tctl = tctl;
                this.timeCtl = new TimeCtl(this._ui.timeTf);
                this.buyBtnCtl = ButtonCtl.CreateBtn(this._ui.buyBtn, this, this.onBuyHandler);
                this.rateCtl = new RateBtn01Ctl(this._ui.ratebtn, this, this.onBuyHandler, ESkinRateBtn.Yellow);
            }
        }
        onBuyHandler() {
            if (!this.model.isOpen) {
                E.ViewMgr.ShowMidError(E.getLang("activityend"));
                return;
            }
            let cfg = t_Fund.Ins.List[this.tabCtl.selectIndex];
            ActivityModel.Ins.recharge(cfg.f_Stalls);
        }
        onItemRender(item, index) {
            let itemVo = ItemViewFactory.convertItem(item.dataSource);
            ItemViewFactory.refreshSlot(item, itemVo);
        }
        onSelHandler(index) {
            let cfg = this.model.dataList[index].cfg;
            this._ui.itemshow.array = cfg.f_preview.split("|");
            this.tctl.onChangeEvt();
            this._ui.showImg2.skin = `remote/jubaopeng/${cfg.f_RewardUp_res}.png`;
            let priceCfg = t_Purchase_PriceProxy.Ins.GetDataById(cfg.f_Stalls);
            this._ui.monetTf.text = `${StringUtil.moneyCv(priceCfg.f_price)}元`;
            let cfgArr = this.cfgArr;
            let l = cfgArr[index];
            let ox = 0;
            while (this._ui.panel1.numChildren) {
                let cell = this._ui.panel1.getChildAt(0);
                Laya.Pool.recover(this.itemKey, cell);
                cell.removeSelf();
            }
            let offsetX = 0;
            for (let i = 0; i < l.length; i++) {
                let cfg1 = l[i];
                let item = Laya.Pool.getItemByClass(this.itemKey, Jubaopeng_itemView);
                item.setData(cfg, cfg1);
                item.x = ox;
                ox = ox + item.width;
                this._ui.panel1.addChild(item);
                if (item._status == ELingQuStatus.CanLLingQu) {
                    offsetX = item.x;
                }
            }
            this._ui.panel1.scrollTo(offsetX, 0);
            let btn = this.buyBtnCtl;
            if (priceCfg.f_isVoucher == EShopPayType.Voucher) {
                btn = this.rateCtl.btnCtl;
                this.rateCtl.cfg = priceCfg;
            }
            RateBtnUtils.Refresh(btn, this.buyBtnCtl, this.rateCtl.btnCtl);
            if (this.model.isBuyed(cfg.f_id)) {
                btn.skin.visible = false;
            }
            else {
                btn.skin.visible = true;
            }
        }
        tabItemRender(itemView, index, sel, _data) {
            if (sel) {
                itemView.tf1.color = '#BE7641';
                itemView.img0.visible = false;
                itemView.img1.visible = true;
            }
            else {
                itemView.tf1.color = '#FFEFC5';
                itemView.img0.visible = true;
                itemView.img1.visible = false;
            }
            itemView.tf1.text = _data.cfg.f_PackName;
            if (this.model.isFundCanLingqu(_data.cfg.f_id)) {
                itemView.redImg.visible = true;
            }
            else {
                itemView.redImg.visible = false;
            }
        }
        updateEvt() {
            this.onSelHandler(this.tabCtl.selectIndex);
            this.tabCtl.udpateView();
            this.setTime();
        }
        onInit() {
            if (MainModel.Ins.needRed(RedEnum.RED_JuBaoPeng)) {
                RedUpdateModel.Ins.save(RedEnum.RED_JuBaoPeng, TimeUtil.serverTime);
            }
            this.model.updateRed();
            this.model.on(TreasureModel.EventUpdate, this, this.updateEvt);
            this.tabCtl.refresh(this.model.dataList, 0);
            this.setTime();
        }
        setTime() {
            this.timeCtl.start(this.model.endTime - TimeUtil.serverTime, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.onEnd));
        }
        onUpdateTime(ticket) {
            let _s = TimeUtil.subTime(ticket);
            this._ui.timeTf.text = E.getLang("huodong01", _s);
        }
        onEnd() {
            this._ui.timeTf.text = "";
        }
    }

    exports.JuBaoPengView = JuBaoPengView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LiBaoModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new LiBaoModel();
            }
            return this._ins;
        }
        isOpenByFid(fid) {
            let vo = ActivityModel.Ins.getByUid(fid);
            if (vo && vo.statusData) {
                if (vo.statusData.status == 1) {
                    return true;
                }
            }
            return false;
        }
        getPlayerTotal() {
            return StringUtil.moneyCv(this.PlayerTotalCnt);
        }
    }

    exports.LiBaoModel = LiBaoModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (NamingEvent) {
        NamingEvent["RankUpdate"] = "RankUpdate";
        NamingEvent["RewardUpdate"] = "RewardUpdate";
    })(exports.NamingEvent || (exports.NamingEvent = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_NamingRight extends BaseCfg {
        GetTabelName() {
            return "t_NamingRight";
        }
        getByType(type) {
            let l = this.List;
            let cell = l.find(o => o.f_Type == type);
            return cell;
        }
    }

    exports.t_NamingRight = t_NamingRight;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class NamingChargeRenameView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
        }
        onAddLoadRes() {
        }
        onExit() {
            this.mod_btnCtl.dispose();
            this._timeCtl.dispose();
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = NamingChargeModel.Ins;
                this.UI = this._ui = new ui.views.naming_charge.ui_jianghuyouming_renameUI();
                this.bindClose(this._ui.close_btn);
                this.mod_btnCtl = ButtonCtl.CreateBtn(this._ui.mod_btn, this, this.onModHandler);
                this._ui.tips_tf.text = E.getLang("naming_charge_01");
                this._timeCtl = new TimeCtlV2(this._ui.time_tf, "{0}");
                this._ui.input1.prompt = E.getLang("naming_charge_13");
            }
        }
        checkNotCN(str) {
            let reg = /[\u4e00-\u9fa5]/;
            for (let i = 0; i < str.length; i++) {
                let s = str[i];
                if (reg.test(s) == false) {
                    return true;
                }
            }
        }
        onModHandler() {
            let str = this._ui.input1.text;
            if (StringUtil.IsNullOrEmpty(str)) {
                E.ViewMgr.ShowMidError(E.getLang("naming_charge_11"));
                return;
            }
            let limit = System_RefreshTimeProxy.Ins.getNumberVal(81);
            if (StringUtil.getNumBytes(str) > limit) {
                E.ViewMgr.ShowMidError(E.getLang("naming_charge_09", limit / 2));
                return;
            }
            if (this.checkNotCN(str)) {
                E.ViewMgr.ShowMidError(E.getLang("naming_charge_10"));
                return;
            }
            let req = new NameingServer_req();
            req.serverName = str;
            SocketMgr.Ins.SendMessageBin(req);
            this.Close();
        }
        onInit() {
            this._ui.input1.text = "";
            if (this.model.isCanNamed) {
                this._ui.sp0.visible = true;
                this._ui.sp1.visible = false;
            }
            else {
                this._ui.sp0.visible = false;
                this._ui.sp1.visible = true;
                this._ui.mid_desc_tf.text = E.getLang("naming_charge_05", MainModel.Ins.mRoleData.serverName);
            }
            this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
            let sub = NamingChargeModel.Ins.initData.namedEndUnix - TimeUtil.serverTime;
            this._timeCtl.start(sub);
        }
        onTimeComplete() {
            this._ui.desc_tf.text = "";
            this._ui.time_tf.text = "";
        }
    }

    exports.NamingChargeRenameView = NamingChargeRenameView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class NamingChargeRewardView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onExit() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.naming_charge.ui_jianghuyouming_rewardUI();
            }
        }
        onInit() {
            this.cfg = this.Data;
            this._ui.title_tf.text = this.cfg.f_RewardName;
            this._ui.desc_tf.text = E.getLang("naming_charge_03", StringUtil.moneyCv(this.cfg.f_RechargeLimit)) + this.cfg.f_RewardName;
            ItemViewFactory.renderItemSlots(this._ui.reward_con, this.cfg.f_Reward, 10, 1, "left", undefined, undefined, 4);
        }
    }

    exports.NamingChargeRewardView = NamingChargeRewardView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    var EBtnType;
    (function (EBtnType) {
        EBtnType[EBtnType["Left"] = 0] = "Left";
        EBtnType[EBtnType["Right"] = 1] = "Right";
    })(EBtnType || (EBtnType = {}));
    class NamingChargeView extends ViewBase {
        constructor() {
            super(...arguments);
            this._avatarShowList = [];
            this.autoFree = true;
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("jjc.atlas");
        }
        onExit() {
            this.slot_clickCtl.dispose();
            this.rightbtnCtl.dispose();
            this.leftbtnCtl.dispose();
            this._progressCtl.dispose();
            this._timeCtl.dispose();
            for (let i = 0; i < this._avatarShowList.length; i++) {
                this._avatarShowList[i].dispose();
            }
            this.model.off(NamingEvent.RankUpdate, this, this.onRankUpdate);
            this.sp1_lingqu_btnCtl.dispose();
            this.model.off(NamingEvent.RewardUpdate, this, this.onUpdateView);
            this.curType = ENameDayType.Null;
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = NamingChargeModel.Ins;
                this.UI = this._ui = new ui.views.naming_charge.ui_jianghuyoumingUI();
                let progressSkin = {};
                progressSkin.bg = this._ui.expv;
                this._progressCtl = new ProgressCtl(progressSkin);
                this._timeCtl = new TimeCtlV2(this._ui.timetf);
                this.leftbtnCtl = ButtonCtl.CreateBtn(this._ui.leftbtn, this, this.onLeftBtnClick, true, [EBtnType.Left]);
                this.rightbtnCtl = ButtonCtl.CreateBtn(this._ui.rightbtn, this, this.onLeftBtnClick, true, [EBtnType.Right]);
                this.slot_clickCtl = ButtonCtl.CreateBtn(this._ui.slot_click_rect, this, this.onSlotClick, false);
                this._ui.slot_click_rect.on(Laya.Event.CLICK, this, this.onSlotClick);
                this.bindClose(this._ui.close1);
                this._avatarShowList = [];
                for (let i = 0; i < 3; i++) {
                    let cell = new PeakShowAvatarCtl();
                    cell.skin = this._ui[`avatar${i}`];
                    this._avatarShowList.push(cell);
                }
                this.initAvatarShow();
                this.sp1_lingqu_btnCtl = ButtonCtl.CreateBtn(this._ui.sp1_lingqu_btn, this, this.onLingQuClickHander);
                this._ui.list1.itemRender = JjcOtherItemView;
                this._ui.list1.vScrollBarSkin = " ";
                this._ui.list1.renderHandler = new Laya.Handler(this, this.JjcOtherItemHandler);
                this._ui.list1.array = [];
            }
        }
        JjcOtherItemHandler(item, index) {
            item.setData(item.dataSource, false);
        }
        onLingQuClickHander() {
            let req = new GetNamingReward_req();
            req.flag = this.curType;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onSlotClick() {
            if (this.model.isCanGet(this.cfg.f_id)) {
                this.onLingQuClickHander();
            }
            else {
                E.ViewMgr.Open(EViewType.NamingChargeReward, null, this.cfg);
            }
        }
        initAvatarShow() {
            for (let i = 0; i < this._avatarShowList.length; i++) {
                this._avatarShowList[i].skin.visible = false;
                this._ui["empty_img" + i].visible = false;
            }
        }
        onUpdateView() {
            this.updateCurView(this.curType);
        }
        onLeftBtnClick(type) {
            let curType = type + 1;
            if (curType == this.curType) {
                return;
            }
            this.updateCurView(curType);
        }
        updateCurView(curType) {
            DotManager.removeDot(this._ui.leftbtn);
            DotManager.removeDot(this._ui.rightbtn);
            if (curType == ENameDayType.Region && !this.model.isRegionOpen) {
                E.ViewMgr.ShowMidError(E.getLang("naming_charge_07"));
                return;
            }
            this.curType = curType;
            let cfg = this.model.proxyCfg.getByType(curType);
            this.cfg = cfg;
            this._ui.top_con_ttitle_tf.text = "";
            this.initAvatarShow();
            let subtime;
            switch (curType) {
                case ENameDayType.FirstDay:
                    this._ui.sp0.visible = false;
                    this.rightbtnCtl.bgSkin = `remote/main/main/anniu_2.png`;
                    this.leftbtnCtl.bgSkin = `remote/main/main/anniu_1.png`;
                    ItemViewFactory.renderItemSlots(this._ui.sp1_reward_con, this.cfg.f_Reward, 10, 1, "center", undefined, undefined, 4);
                    this._ui.sp1_tip1.text = E.getLang("naming_charge_03", StringUtil.moneyCv(this.cfg.f_RechargeLimit));
                    if (this.model.isCanGet(this.cfg.f_id)) {
                        this.sp1_lingqu_btnCtl.grayMouseDisable = false;
                    }
                    else {
                        this.sp1_lingqu_btnCtl.grayMouseDisable = true;
                    }
                    let v = this.model.firstDayCNY / this.cfg.f_RechargeLimit;
                    if (v > 1) {
                        v = 1;
                    }
                    this._ui.sp1_exp_bg.width = v * (this._ui.sp1_exp.width - 3);
                    this._ui.sp1_exp_tf1.text = StringUtil.moneyCv(this.model.firstDayCNY) + "/" + StringUtil.moneyCv(this.cfg.f_RechargeLimit);
                    subtime = this.model.initData.firstDayEndUnix - TimeUtil.serverTime;
                    break;
                case ENameDayType.Region:
                    this._ui.sp0.visible = true;
                    this.leftbtnCtl.bgSkin = `remote/main/main/anniu_2.png`;
                    this.rightbtnCtl.bgSkin = `remote/main/main/anniu_1.png`;
                    let itemVo = ItemViewFactory.convertItem(cfg.f_Reward.split("|")[0]);
                    ItemViewFactory.refreshSlot(this._ui.slot1, itemVo, false);
                    if (this.model.isCanGet(this.cfg.f_id)) {
                        DotManager.addDot(this._ui.slot1);
                    }
                    else {
                        DotManager.removeDot(this._ui.slot1);
                    }
                    this._ui.tips_tf.text = E.getLang("naming_charge_03", StringUtil.moneyCv(this.cfg.f_RechargeLimit));
                    this._ui.item_name_tf.text = this.cfg.f_RewardName;
                    let val = LiBaoModel.Ins.PlayerTotalCnt;
                    this._progressCtl.value = val / this.cfg.f_RechargeLimit;
                    this._ui.expTf.text = StringUtil.moneyCv(val) + "/" + StringUtil.moneyCv(this.cfg.f_RechargeLimit);
                    subtime = this.model.initData.namedEndUnix - TimeUtil.serverTime;
                    break;
            }
            this._ui.tf2.text = E.getLang("naming_charge_04");
            this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
            this._timeCtl.start(subtime);
            let req = new NamingChargeRank_req();
            req.flag = this.curType;
            SocketMgr.Ins.SendMessageBin(req);
            this._ui.sp1.visible = !this._ui.sp0.visible;
            if (this.model.getStatus(ENameDayType.FirstDay) == ENameReward.CanGet) {
                DotManager.addDot(this._ui.leftbtn);
            }
            if (this.model.getStatus(ENameDayType.Region) == ENameReward.CanGet) {
                DotManager.addDot(this._ui.rightbtn);
            }
        }
        onTimeComplete() {
            this._ui.timetf.text = "";
            this._ui.tf2.text = "";
        }
        onInit() {
            this.model.on(NamingEvent.RankUpdate, this, this.onRankUpdate);
            this.model.on(NamingEvent.RewardUpdate, this, this.onUpdateView);
            this.onLeftBtnClick(EBtnType.Left);
        }
        convertToPlayerVo(vo) {
            let _playerVo = new stJjcPlayer();
            _playerVo.id = 0;
            _playerVo.headUrl = vo.headUrl;
            _playerVo.name = vo.nickName;
            _playerVo.lv = vo.playerLevel;
            _playerVo.plus = vo.plus;
            _playerVo.rank = vo.ranking;
            _playerVo.accountId = vo.accountId;
            _playerVo.titleId = vo.titleId;
            return _playerVo;
        }
        onRankUpdate() {
            let datalist = [];
            let playerList = [];
            this._ui.shouweidacheng_img.visible = false;
            let heroCount = 1;
            switch (this.cfg.f_Type) {
                case ENameDayType.FirstDay:
                    datalist = this.model.firstDayData.top1;
                    playerList = this.model.firstDayData.dataList;
                    if (datalist.length > 0) {
                        this._ui.shouweidacheng_img.visible = true;
                    }
                    else {
                        let money = StringUtil.moneyCv(this.cfg.f_RechargeLimit);
                        this._ui.top_con_ttitle_tf.text = E.getLang("naming_charge_06", money);
                    }
                    break;
                case ENameDayType.Region:
                    heroCount = 3;
                    datalist = this.model.rankData.top3;
                    playerList = this.model.rankData.dataList;
                    let showList = [];
                    for (let i = heroCount; i < this.model.rankData.dataList.length; i++) {
                        let vo = this.model.rankData.dataList[i];
                        showList.push(this.convertToPlayerVo(vo));
                    }
                    this._ui.list1.array = showList;
                    break;
            }
            for (let i = 0; i < heroCount; i++) {
                let vo = datalist[i];
                let _ctl = this._avatarShowList[i];
                _ctl.refresh(vo);
                let _accountVo = playerList[i];
                let empty_img = this._ui["empty_img" + i];
                if (_accountVo) {
                    empty_img.visible = false;
                    _ctl.accountId = _accountVo.accountId;
                }
                else {
                    empty_img.visible = true;
                }
            }
        }
    }

    exports.NamingChargeView = NamingChargeView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ENameReward) {
        ENameReward[ENameReward["Nothing"] = 0] = "Nothing";
        ENameReward[ENameReward["AlreadyGet"] = 1] = "AlreadyGet";
        ENameReward[ENameReward["CanGet"] = 2] = "CanGet";
    })(exports.ENameReward || (exports.ENameReward = {}));
    (function (ENameDayType) {
        ENameDayType[ENameDayType["Null"] = 0] = "Null";
        ENameDayType[ENameDayType["FirstDay"] = 1] = "FirstDay";
        ENameDayType[ENameDayType["Region"] = 2] = "Region";
    })(exports.ENameDayType || (exports.ENameDayType = {}));
    class NamingChargeModel extends BaseModel {
        static get Ins() {
            if (!this._ins) {
                this._ins = new NamingChargeModel();
            }
            return this._ins;
        }
        get proxyCfg() {
            if (!this._proxyCfg) {
                this._proxyCfg = new t_NamingRight();
            }
            return this._proxyCfg;
        }
        initMsg() {
            this.Reg(new NamingChargeView(EViewType.NamingChargeMain));
            this.Reg(new NamingChargeRenameView(EViewType.NamingChargeAlert));
            this.Reg(new NamingChargeRewardView(EViewType.NamingChargeReward));
            E.MsgMgr.AddMsg(MSGID.NamingInit, this.onNamingInit, this);
            E.MsgMgr.AddMsg(MSGID.NameingChange, this.onNameingChange, this);
            E.MsgMgr.AddMsg(MSGID.NameingServer, this.onNameingServer, this);
            E.MsgMgr.AddMsg(MSGID.NamingChargeRankFirstDay, this.onNamingChargeRankFirstDay, this);
            E.MsgMgr.AddMsg(MSGID.NamingChargeRank, this.onNamingChargeRank, this);
            E.MsgMgr.AddMsg(MSGID.FirstDayCharge, this.onFirstDayCharge, this);
            E.MsgMgr.AddMsg(MSGID.NamingReward, this.onNamingReward, this);
        }
        pushReward(cell) {
            let l = this.initData.dataList;
            let obj = l.find(o => o.id == cell.id);
            if (obj) {
                obj.state = cell.state;
            }
            else {
                this.initData.dataList.push(cell);
            }
        }
        onNamingReward(revc) {
            let l = revc.dataList;
            for (let i = 0; i < l.length; i++) {
                this.pushReward(l[i]);
            }
            this.checkRed();
            this.event(NamingEvent.RewardUpdate);
        }
        onFirstDayCharge(revc) {
            this.firstDayCNY = revc.cnt;
        }
        onNamingInit(revc) {
            this.initData = revc;
            this.firstDayCNY = revc.firstDayCharge;
            this.checkRed();
        }
        onNameingChange(revc) {
            if (this.initData) {
                this.initData.canNamed = revc.canNamed;
                this.initData.namedTimes = revc.namedTimes;
                this.initData.namedEndUnix = revc.namedEndUnix;
            }
            else {
                LogSys.Error("onNameingChange this.initData is null!");
            }
        }
        checkRed() {
            let l = this.initData.dataList;
            let hasRed = false;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.state == 2) {
                    hasRed = true;
                    break;
                }
            }
            MainModel.Ins.funcSetRed(EFuncDef.NamingCharge, hasRed);
        }
        getStatus(id) {
            if (this.initData) {
                let l = this.initData.dataList;
                let cell = l.find(o => o.id == id);
                if (cell) {
                    return cell.state;
                }
            }
            return 0;
        }
        onNameingServer(revc) {
            MainModel.Ins.mRoleData.serverName = revc.naming;
            E.ViewMgr.ShowMidOk(E.getLang("naming_charge_14"));
        }
        onNamingChargeRankFirstDay(revc) {
            this.firstDayData = revc;
            this.event(NamingEvent.RankUpdate);
        }
        onNamingChargeRank(revc) {
            this.rankData = revc;
            this.event(NamingEvent.RankUpdate);
        }
        onInitCallBack() {
            this.firstDayData = null;
            this.rankData = null;
            this.initData = null;
            this.firstDayCNY = 0;
        }
        isCanGet(id) {
            if (this.initData) {
                let l = this.initData.dataList;
                let cell = l.find(o => o.id == id);
                if (cell) {
                    return cell.state == exports.ENameReward.CanGet;
                }
            }
            return false;
        }
        get isCanNamed() {
            if (Laya.Utils.getQueryString("isCanNamed")) {
                return true;
            }
            if (this.initData) {
                return this.initData.namedTimes > 0 && this.initData.canNamed == 1;
            }
        }
        get isOpen() {
            return this.initData && (this.initData.canNamed == 1);
        }
        get isRegionOpen() {
            if (this.initData) {
                let subtime = this.initData.firstDayEndUnix - TimeUtil.serverTime;
                return subtime < 0;
            }
            return false;
        }
    }

    exports.NamingChargeModel = NamingChargeModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ESdkValChange) {
        ESdkValChange[ESdkValChange["LevelUp"] = 1] = "LevelUp";
        ESdkValChange[ESdkValChange["Plus"] = 2] = "Plus";
        ESdkValChange[ESdkValChange["EnterGame"] = 3] = "EnterGame";
        ESdkValChange[ESdkValChange["CreateRole"] = 4] = "CreateRole";
    })(exports.ESdkValChange || (exports.ESdkValChange = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinListProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new ShenBinListProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Artifact_List";
        }
        getCfgById(id) {
            return this.List.find(item => item.f_Artifactid == id);
        }
    }
    class ShenBinExpProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let qua = this.List[i].f_ArtifactQua;
                if (!this._map[qua]) {
                    this._map[qua] = {};
                }
                let lv = this.List[i].f_currentlevel;
                this._map[qua][lv] = this.List[i];
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ShenBinExpProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Artifact_Exp";
        }
        getCfgByQuaAndLv(qua, lv) {
            return this._map[qua][lv];
        }
    }
    class ShenBinCfgProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new ShenBinCfgProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Artifact_Config";
        }
    }
    class ShenBinPackProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new ShenBinPackProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Artifact_pack";
        }
    }
    class ShenBinAttrProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new ShenBinAttrProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Artifact_Attribute";
        }
        getCfgByQua(qua) {
            return this.List.find(item => item.f_QualityID == qua);
        }
    }
    class ShenBinComboProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new ShenBinComboProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Artifact_Combo";
        }
    }
    class ArtifactComboAttributeProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let id = this.List[i].f_ComboId;
                if (!this._map[id]) {
                    this._map[id] = [];
                }
                this._map[id].push(this.List[i]);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ArtifactComboAttributeProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Artifact_Combo_Attribute";
        }
        getCfgById(id) {
            return this._map[id];
        }
    }

    exports.ArtifactComboAttributeProxy = ArtifactComboAttributeProxy;
    exports.ShenBinAttrProxy = ShenBinAttrProxy;
    exports.ShenBinCfgProxy = ShenBinCfgProxy;
    exports.ShenBinComboProxy = ShenBinComboProxy;
    exports.ShenBinExpProxy = ShenBinExpProxy;
    exports.ShenBinListProxy = ShenBinListProxy;
    exports.ShenBinPackProxy = ShenBinPackProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinModel extends Laya.EventDispatcher {
        static get Ins() {
            if (!this._ins) {
                this._ins = new ShenBinModel();
            }
            return this._ins;
        }
        isDotMain() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.Confraternity)) {
                if (ShenBinModel.Ins.isFreeDot() || ShenBinModel.Ins.isLvDot() || this.isTZRedTip()) {
                    return true;
                }
            }
            return false;
        }
        isFreeDot() {
            if (ShenBinModel.Ins.dataPackList) {
                let arr = ShenBinPackProxy.Ins.List;
                for (let i = 0; i < arr.length; i++) {
                    if (arr[i].f_PurchaseID == 0) {
                        let vo = ShenBinModel.Ins.dataPackList.find(ele => ele.id == arr[i].f_id);
                        if (vo && vo.num == 0) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        isLvDot() {
            if (this.dataList) {
                for (let i = 0; i < this.dataList.length; i++) {
                    let cfg = ShenBinListProxy.Ins.getCfgById(this.dataList[i].artifactId);
                    let ecfg = ShenBinExpProxy.Ins.getCfgByQuaAndLv(cfg.f_ArtifactQua, this.dataList[i].level);
                    let eNextcfg = ShenBinExpProxy.Ins.getCfgByQuaAndLv(cfg.f_ArtifactQua, this.dataList[i].level + 1);
                    if (eNextcfg) {
                        let icfg = ItemProxy.Ins.getCfg(cfg.f_itemId);
                        let num = MainModel.Ins.mRoleData.getVal(icfg.f_itemid);
                        if (num >= parseInt(ecfg.f_pieces)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        isTZRedTip() {
            if (!this.tzList) {
                return false;
            }
            for (let i = 0; i < this.tzList.length; i++) {
                if (this.tzList[i].state == 1) {
                    return true;
                }
            }
            return false;
        }
        getTZSt(st) {
            let arr = st.split("|");
            let num = 0;
            for (let i = 0; i < arr.length; i++) {
                let data = ShenBinModel.Ins.dataList.find(ele => ele.artifactId == parseInt(arr[i]));
                if (data && data.level) {
                    num++;
                }
            }
            return num + "/" + arr.length;
        }
        getTZLv(st) {
            let arr = st.split("|");
            let num = 99999;
            for (let i = 0; i < arr.length; i++) {
                let data = ShenBinModel.Ins.dataList.find(ele => ele.artifactId == parseInt(arr[i]));
                if (data) {
                    num = Math.min(num, data.level);
                }
            }
            return num;
        }
    }
    ShenBinModel.UPDATA_SHENBIN = "UPDATA_SHENBIN";
    ShenBinModel.UPDATA_LOGVIEW = "UPDATA_LOGVIEW";
    ShenBinModel.UPDATA_PACK = "UPDATA_PACK";
    ShenBinModel.OPEN_ITEM = "OPEN_ITEM";
    ShenBinModel.PLAY_EFFECT = "PLAY_EFFECT";
    ShenBinModel.UPDATA_TZ = "UPDATA_TZ";

    exports.ShenBinModel = ShenBinModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinCtl {
        constructor(skin) {
            this.skin = skin;
            this.skin.on(Laya.Event.CLICK, this, this.onClick);
            this.skin.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onRemove);
        }
        onAdd() {
            ShenBinModel.Ins.on(ShenBinModel.UPDATA_SHENBIN, this, this.onupdataView);
            ShenBinModel.Ins.on(ShenBinModel.PLAY_EFFECT, this, this.onPlayEffect);
        }
        onRemove() {
            ShenBinModel.Ins.off(ShenBinModel.UPDATA_SHENBIN, this, this.onupdataView);
            ShenBinModel.Ins.off(ShenBinModel.PLAY_EFFECT, this, this.onPlayEffect);
            if (this.eff) {
                this.eff.stop();
            }
        }
        onPlayEffect() {
            if (this._data) {
                let cfg = ShenBinListProxy.Ins.getCfgById(this._data.artifactId);
                if (cfg.f_itemId == ShenBinModel.Ins.openItem.id) {
                    let ecfg = ShenBinExpProxy.Ins.getCfgByQuaAndLv(cfg.f_ArtifactQua, this._data.level);
                    let num = MainModel.Ins.mRoleData.getVal(cfg.f_itemId);
                    this.skin.lab_num.text = num + "/" + ecfg.f_pieces;
                    this.playAnim();
                    if (num >= parseInt(ecfg.f_pieces)) {
                        DotManager.addDot(this.skin, 5, 0);
                    }
                    else {
                        DotManager.removeDot(this.skin);
                    }
                }
            }
        }
        playAnim() {
            if (!this.eff) {
                this.eff = new SimpleEffect(this.skin, "o/spine/change/change", this.skin.icon.width / 2 + 11, this.skin.icon.height / 2 + 16);
            }
            this.eff.play(0, false);
        }
        onClick() {
            if (this._data) {
                E.ViewMgr.Open(EViewType.ShenBinLv, null, this._data);
            }
        }
        onupdataView() {
            if (this._data) {
                let index = ShenBinModel.Ins.dataList.findIndex(ele => ele.artifactId === this._data.artifactId);
                this._data = ShenBinModel.Ins.dataList[index];
                this.updataView();
            }
        }
        setData(value) {
            if (!value)
                return;
            let index = ShenBinModel.Ins.dataList.findIndex(ele => ele.artifactId === value.artifactId);
            this._data = ShenBinModel.Ins.dataList[index];
            this.updataView();
        }
        updataView() {
            if (this._data.wearable == 1) {
                this.skin.img.visible = true;
            }
            else {
                this.skin.img.visible = false;
            }
            let cfg = ShenBinListProxy.Ins.getCfgById(this._data.artifactId);
            let ecfg = ShenBinExpProxy.Ins.getCfgByQuaAndLv(cfg.f_ArtifactQua, this._data.level);
            let eNextcfg = ShenBinExpProxy.Ins.getCfgByQuaAndLv(cfg.f_ArtifactQua, this._data.level + 1);
            let icfg = ItemProxy.Ins.getCfg(cfg.f_itemId);
            this.skin.icon.skin = IconUtils.getIconByCfgId(icfg.f_itemid);
            this.skin.quality.skin = IconUtils.getQuaIcon(icfg.f_qua);
            this.skin.lab_lv.text = "lv." + this._data.level;
            DotManager.removeDot(this.skin);
            if (eNextcfg) {
                let icfg = ItemProxy.Ins.getCfg(cfg.f_itemId);
                let num = MainModel.Ins.mRoleData.getVal(icfg.f_itemid);
                this.skin.lab_num.text = num + "/" + ecfg.f_pieces;
                this.skin.lab_sp.visible = this.skin.lab_num.visible = true;
                this.skin.lab_mj.visible = false;
                if (num >= parseInt(ecfg.f_pieces)) {
                    DotManager.addDot(this.skin, 5, 0);
                }
            }
            else {
                this.skin.lab_sp.visible = this.skin.lab_num.visible = false;
                this.skin.lab_mj.visible = true;
            }
        }
    }

    exports.ShenBinCtl = ShenBinCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShenBinFeastView extends DuanWuView {
        constructor() {
            super(...arguments);
            this._isAuto = false;
        }
        bindModel() {
            this.model = ShenBinFeastModel.Ins;
        }
        initUI() {
            this.UI = this._ui = new ui.views.shenbingfeast.ui_shenbing_feastUI();
            ItemUpdateCtl.Create(this._ui.goldtf, ECellType.GOLD);
            this._ui.yuanbaoicon.skin = IconUtils.getIconByCfgId(ECellType.GOLD);
            ItemUpdateCtl.Create(this._ui.labbb, ECellType.ShenTie);
            this._ui.imggg.skin = IconUtils.getIconByCfgId(ECellType.ShenTie);
            ItemUpdateCtl.Create(this._ui.juanzhoutf, ECellType.ShenBinCP);
            this._ui.juanzhouicon.skin = IconUtils.getIconByCfgId(ECellType.ShenBinCP);
            this.skin = this._ui;
            for (let i = 1; i < 21; i++) {
                this["_shenBinCtl" + i] = new ShenBinCtl(this.skin["item" + i]);
            }
            this._eff = new SimpleEffect(this.skin.sp, `o/spine/sweapon2/sweapon2`, 40, 250);
            ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick));
            this._checkBoxCtl = new CheckBoxCtl({ bg: this.skin.ck, gou: this.skin.gou });
            this._checkBoxCtl.selectHander = new Laya.Handler(this, this.onSelectHander);
            this._checkBoxCtl.selected = false;
            this._checkBoxCtl1 = new CheckBoxCtl({ bg: this.skin.ck1, gou: this.skin.gou1 });
            this._checkBoxCtl1.selectHander = new Laya.Handler(this, this.onSelectHander1);
            this._checkBoxCtl1.selected = false;
            this.skin.rewardCon.visible = false;
            this.skin.zhekouImg.mouseEnabled = false;
            this.updataMoney();
        }
        onSelectHander() {
            if (this._isAuto) {
                this._checkBoxCtl.selected = true;
                this.setAuto(false);
                E.ViewMgr.ShowMidError("已关闭连续锻造");
            }
        }
        onSelectHander1() {
            this.updataMoney();
            if (this._isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("已关闭连续锻造");
            }
        }
        updataMoney() {
            let cfg = ShenBinCfgProxy.Ins.List[0];
            let id;
            let num;
            let _now;
            if (this._checkBoxCtl1.selected) {
                id = parseInt(cfg.f_PreCost_Money.split("-")[0]);
                num = parseInt(cfg.f_PreCost_Money.split("-")[1]);
                _now = num;
                this.skin.zhekouImg.visible = false;
            }
            else {
                id = parseInt(cfg.f_PreCost.split("-")[0]);
                num = parseInt(cfg.f_PreCost.split("-")[1]);
                this.skin.zhekouImg.visible = true;
                _now = parseInt(cfg.f_PreCost_discount.split("-")[1]);
                let a = (_now / num * 10).toFixed(0);
                this.skin.zhekouTf.text = E.getLang("limitdiscount", a);
            }
            this.skin.img_m.skin = IconUtils.getIconByCfgId(id);
            this.skin.lab_money.text = _now + "";
        }
        onAddLoadRes() {
            this.addAtlas("duanwu.atlas");
            this.addAtlas("shenbingfeast.atlas");
            this.addAtlas('shenbin.atlas');
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("shenbinfeasttitle", "shenbinfeastdesc");
        }
        onInit() {
            super.onInit();
            ShenBinModel.Ins.on(ShenBinModel.OPEN_ITEM, this, this.onOpenItem);
            this._eff.play(0);
            this.updataView();
            this.iconInit();
        }
        onExit() {
            super.onExit();
            ShenBinModel.Ins.off(ShenBinModel.OPEN_ITEM, this, this.onOpenItem);
            this.setAuto(false);
            this._isPlay = false;
            if (this._eff) {
                this._eff.stop();
            }
            this.iconInit();
            Laya.timer.clear(this, this.onIconTween);
            Laya.Tween.clearAll(this.skin.icon);
        }
        setAuto(v) {
            this._isAuto = v;
            if (v) {
                this.sendCmd();
            }
            else {
                Laya.timer.clear(this, this.sendCmd);
            }
        }
        onBtnClick() {
            if (this._isAuto) {
                this.setAuto(false);
                E.ViewMgr.ShowMidError("已关闭连续锻造");
                return;
            }
            if (this._isPlay) {
                return;
            }
            if (this._checkBoxCtl.selected) {
                this.setAuto(true);
                return;
            }
            let req = new OpenArtifactBox_req;
            if (this._checkBoxCtl1.selected) {
                req.flag = 1;
            }
            else {
                req.flag = 0;
            }
            SocketMgr.Ins.SendMessageBin(req);
        }
        updataView() {
            for (let i = 0; i < ShenBinModel.Ins.dataList.length; i++) {
                this["_shenBinCtl" + (i + 1)].setData(ShenBinModel.Ins.dataList[i]);
            }
        }
        sendCmd() {
            if (!this._isAuto) {
                Laya.timer.clear(this, this.sendCmd);
                return;
            }
            let cfg = ShenBinCfgProxy.Ins.List[0];
            if (this._checkBoxCtl1.selected) {
                if (!MainModel.Ins.isItemEnoughSt(cfg.f_PreCost_Money, true)) {
                    if (this._isAuto) {
                        this.setAuto(false);
                    }
                    return;
                }
                let req = new OpenArtifactBox_req;
                req.flag = 1;
                SocketMgr.Ins.SendMessageBin(req);
                Laya.timer.once(900, this, this.sendCmd);
            }
            else {
                if (!MainModel.Ins.isItemEnoughSt(cfg.f_PreCost_discount, true)) {
                    if (this._isAuto) {
                        this.setAuto(false);
                    }
                    return;
                }
                let req = new OpenArtifactBox_req;
                req.flag = 0;
                SocketMgr.Ins.SendMessageBin(req);
                Laya.timer.once(900, this, this.sendCmd);
            }
        }
        iconInit() {
            this.skin.icon.x = 337;
            this.skin.icon.y = 778;
            this.skin.icon.visible = false;
        }
        onOpenItem() {
            if (this._eff) {
                this._isPlay = true;
                let cfg = ItemProxy.Ins.getCfg(ShenBinModel.Ins.openItem.id);
                let index = 0;
                if (cfg) {
                    switch (cfg.f_qua) {
                        case 3:
                            index = 1;
                            break;
                        case 4:
                            index = 2;
                            break;
                        case 5:
                            index = 3;
                            break;
                        case 8:
                            index = 4;
                            break;
                        case 9:
                            index = 5;
                            break;
                    }
                }
                this._eff.play(index, false, this, this.onPlayComplete);
                Laya.timer.once(350, this, this.onIconTween);
            }
        }
        onPlayComplete() {
            if (this._eff) {
                this._eff.play(0);
            }
        }
        onIconTween() {
            let xx;
            let yy;
            let flag;
            if (ShenBinModel.Ins.openItem.id == ECellType.ShenTie) {
                xx = 260 - 20;
                yy = 104 - 50;
                flag = false;
            }
            else if (ShenBinModel.Ins.openItem.id == ECellType.ShenBinCP) {
                xx = 413 - 20;
                yy = 104 - 50;
                flag = false;
            }
            else {
                let index = 0;
                for (let i = 0; i < ShenBinModel.Ins.dataList.length; i++) {
                    let cfg = ShenBinListProxy.Ins.getCfgById(ShenBinModel.Ins.dataList[i].artifactId);
                    if (cfg.f_itemId == ShenBinModel.Ins.openItem.id) {
                        index = i + 1;
                        break;
                    }
                }
                xx = this._ui["item" + index].x + 100;
                yy = this._ui["item" + index].y + 100;
                flag = true;
            }
            this.skin.icon.skin = IconUtils.getIconByCfgId(ShenBinModel.Ins.openItem.id);
            this.skin.icon.visible = true;
            Laya.Tween.to(this.skin.icon, { x: xx, y: yy }, 150, null, Laya.Handler.create(this, this.onTweenComplete, [flag]));
        }
        onTweenComplete(flag) {
            this._isPlay = false;
            this.iconInit();
            if (flag) {
                ShenBinModel.Ins.event(ShenBinModel.PLAY_EFFECT);
            }
        }
    }
    class ShenBinFeastModel extends GemFeastModel {
        constructor() {
            super(...arguments);
            this.funcType = EFuncDef.ShenBinSY;
            this.subType = EFeastType.ShenBin;
            this.packageTitleStr = "shenbinglibao2";
            this.rankTitleStr = "shenbinglibao3";
            this.rankBotStr = "shenbinglibao_desc";
            this.rank_desc = "shenbinglibao_title|shenbinglibao_read";
        }
        initUI() {
            this.Reg(new ShenBinFeastView(EViewType.ShenBinFeast));
        }
        static get Ins() {
            if (!this._ins2) {
                this._ins2 = new ShenBinFeastModel();
            }
            return this._ins2;
        }
    }

    exports.ShenBinFeastModel = ShenBinFeastModel;
    exports.ShenBinFeastView = ShenBinFeastView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    const reportTypes = ['entergame', 'createrole', 'roleupgrade'];
    let Sygame = window['Sygame'];
    class SySdk {
        constructor() {
            this.on = true;
            this.openid = '';
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new SySdk();
            }
            return this._ins;
        }
        setPlayerData(playerData) {
            this.playerData = playerData;
        }
        setPlayerLevel(playerLevel) {
            this.playerData.role_level = playerLevel;
            this.playerData.role_vip = playerLevel;
        }
        setPlayerPlus(plus) {
            this.playerData.role_power = plus;
        }
        syInit() {
            if (!this.on)
                return;
            let data = wx.getLaunchOptionsSync();
            Sygame.init(data);
        }
        syLogin(callBack) {
            if (!this.on)
                return;
            Sygame.syLogin().then((res) => {
                this.openid = res.openid;
                this.cbsgTunnelOpenType = res.cbsgTunnelOpenType;
                if (res.cbsgTunnelId != undefined) {
                    this.cbsgTunnelId = res.cbsgTunnelId;
                }
                console.log('===================>syLogin:', JSON.stringify(res));
                console.log("openid:" + this.openid);
                callBack();
            }).catch(() => {
                callBack();
            });
        }
        syReportRoleInfo(type) {
            if (!this.on)
                return;
            if (reportTypes.indexOf(type) === -1)
                return;
            const data = this.playerData;
            data.report_type = type;
            LogSys$1.Log('syReportRoleInfo data' + JSON.stringify(data));
            Sygame.syReportRoleInfo(data).then((res) => {
                LogSys$1.Log('syReportRoleInfo' + JSON.stringify(res));
            });
        }
        showRewordVideo(callback) {
            Sygame.showRewordVideo(callback);
        }
        pay(payData) {
            const requestData = Object.assign(Object.assign({}, payData), this.playerData);
            Sygame.syPay(requestData).then((res) => {
                if (LogSys$1.CanLog(ELogLevel.LOG)) {
                    console.log(res);
                    console.log(res.info);
                    console.log(res.payId);
                    console.log(res.status);
                }
            });
        }
        syGetSubscribe(data) {
            data['role_id'] = this.playerData.role_id;
            Sygame.syGetSubscribe(data).then((res) => {
                LogSys$1.Log(res);
                LogSys$1.Log(res.status);
                LogSys$1.Log(res.info);
            });
        }
        goShareData(shareQueryParam) {
            let shareData = window['Sygame'].shareCardV3Params();
            let d = {
                title: shareData.title,
                imageUrlId: shareData.imageUrlId,
                imageUrl: shareData.image,
                query: (shareQueryParam ? shareQueryParam + '&' : '') + shareData.query
            };
            console.log('分享goShareData', d);
            wx.shareAppMessage(d);
        }
        syGetWechatNickname(successCallback, failCallback) {
            Sygame.syGetWechatNickname().then((res) => {
                successCallback(res);
            }).catch(e => failCallback(e));
        }
        getAppId() {
            return Sygame.appid;
        }
        onShow(query) {
            if (query && query['query'] && query['query']['afkinviter']) {
                const req = new AfkInvite_req();
                req.inviterId = Number(query['query']['afkinviter']);
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
    }

    exports.SySdk = SySdk;
    exports.Sygame = Sygame;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Func_Guide extends BaseCfg {
        GetTabelName() {
            return "t_Func_Guide";
        }
        f_sort(cfg) {
            let v = cfg[`f_sort${this.suffix}`];
            return v;
        }
        f_taskid(cfg) {
            let v = cfg[`f_taskid${this.suffix}`];
            return v;
        }
        f_funcname(cfg) {
            let v = cfg[`f_funcname${this.suffix}`];
            return v;
        }
        f_funcdes(cfg) {
            let v = cfg[`f_funcdes${this.suffix}`];
            return t_Txt_Config.Ins.replace(v);
        }
        f_icon(cfg) {
            let v = cfg[`f_icon${this.suffix}`];
            return v;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Func_Guide();
            }
            return this._ins;
        }
    }

    exports.t_Func_Guide = t_Func_Guide;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhengTuItemView extends ui.views.zhengtu.ui_zhengtu_item_viewUI {
        constructor() {
            super();
            this.model = ZhengTuModel.Ins;
            this.lingquCtl = ButtonCtl.CreateBtn(this.lingqu, this, this.onLingqu);
            this.itemSlot.maskbg.mouseEnabled = false;
        }
        onLingqu() {
            let req = new GetFuncGuide_req();
            req.id = this._cfg.f_id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        refresh() {
            this._cfg = this.dataSource;
            let vo = this.model.getStatus(this._cfg.f_id);
            let _status = vo.state;
            let itemVo = ItemViewFactory.convertItem(this._cfg.f_rewards);
            ItemViewFactory.refreshSlot(this.itemSlot.slot, itemVo);
            this.itemSlot.maskbg.visible = false;
            this.redImg.visible = false;
            this.task_tf.visible = false;
            switch (_status) {
                case EZhengTuStatus.Not:
                    this.lingquCtl.visible = false;
                    this.task_tf.visible = true;
                    this.task_tf.text = E.getLang("zhengtu01", vo.intervalTask);
                    break;
                case EZhengTuStatus.KeLingQu:
                    this.lingquCtl.visible = true;
                    this.lingquCtl.grayMouseDisable = false;
                    this.tf1.text = E.getLang("LingQu");
                    this.redImg.visible = true;
                    break;
                case EZhengTuStatus.YiLingQu:
                    this.lingquCtl.visible = true;
                    this.lingquCtl.grayMouseDisable = true;
                    this.tf1.text = E.getLang("LingQu2");
                    this.itemSlot.maskbg.visible = true;
                    break;
            }
            this.nameTf.text = t_Func_Guide.Ins.f_funcname(this._cfg);
            this.descTf.text = t_Func_Guide.Ins.f_funcdes(this._cfg);
            this.icon.skin = `o/zhengtu/${t_Func_Guide.Ins.f_icon(this._cfg)}.png`;
        }
    }
    class ZhengTuView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("zhengtu.atlas");
        }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.model = ZhengTuModel.Ins;
                this.UI = this._ui = new ui.views.zhengtu.ui_zhengtu_viewUI();
                this.mMask = true;
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = ZhengTuItemView;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender);
            }
        }
        onItemRender(item) {
            item.refresh();
        }
        onInit() {
            this.model.on(ZhengTuModel.EVENT_UPDATE, this, this.onRefreshHandler);
            this._ui.list1.array = this.model.cfgList;
            this._ui.list1.scrollTo(0);
        }
        onRefreshHandler() {
            this._ui.list1.refresh();
        }
    }

    exports.ZhengTuView = ZhengTuView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EZhengTuStatus) {
        EZhengTuStatus[EZhengTuStatus["Not"] = 0] = "Not";
        EZhengTuStatus[EZhengTuStatus["YiLingQu"] = 1] = "YiLingQu";
        EZhengTuStatus[EZhengTuStatus["KeLingQu"] = 2] = "KeLingQu";
    })(exports.EZhengTuStatus || (exports.EZhengTuStatus = {}));
    class ZhengTuModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.dataList = [];
            this.cfgList = [];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ZhengTuModel();
            }
            return this._ins;
        }
        sortHandler(a, b) {
            let a1 = t_Func_Guide.Ins.f_sort(a);
            let b1 = t_Func_Guide.Ins.f_sort(b);
            if (a1 < b1) {
                return -1;
            }
            else if (a1 > b1) {
                return 1;
            }
            return 0;
        }
        onInitCallBack() {
            this.dataList = [];
        }
        rebuild() {
            this.cfgList = t_Func_Guide.Ins.List.sort(this.sortHandler);
        }
        initMsg() {
            this.Reg(new ZhengTuView(EViewType.ZhengTu));
            E.MsgMgr.AddMsg(MSGID.GetFuncGuide, this.onGetFuncGuide, this);
        }
        onGetFuncGuide(revc) {
            let datalist = revc.dataList;
            for (let i = 0; i < datalist.length; i++) {
                let cell = datalist[i];
                this.updateDataList(cell);
            }
            this.update();
        }
        updateDataList(cell) {
            let find = this.dataList.find(item => item.id == cell.id);
            if (find) {
                find.intervalTask = cell.intervalTask;
                find.state = cell.state;
            }
            else {
                this.dataList.push(cell);
            }
        }
        update() {
            this.updateRed();
            this.event(ZhengTuModel.EVENT_UPDATE);
            MainModel.Ins.event(MainEvent.EventMainUpdateView);
        }
        getStatus(f_id) {
            let find = this.dataList.find(item => item.id == f_id);
            if (find) {
                return find;
            }
            let vo = new stFuncGuide();
            vo.intervalTask = 0;
            vo.id = f_id;
            vo.state = exports.EZhengTuStatus.Not;
            this.dataList.push(vo);
            return vo;
        }
        get isOpen() {
            let l = this.dataList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.state == exports.EZhengTuStatus.KeLingQu || cell.state == exports.EZhengTuStatus.Not) {
                    return true;
                }
            }
            return false;
        }
        get hasRed() {
            let l = this.dataList;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.state == exports.EZhengTuStatus.KeLingQu) {
                    return true;
                }
            }
        }
        updateRed() {
            MainModel.Ins.funcSetRed(EFuncDef.ZhengTu, this.hasRed);
        }
    }
    ZhengTuModel.EVENT_UPDATE = "EVENT_UPDATE";

    exports.ZhengTuModel = ZhengTuModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LabourZuoqiTipsVo {
        constructor(str) {
            let arr = str.split("|");
            this.mountid = parseInt(arr[0]);
            this.plus = parseInt(arr[1]);
            this.star = parseInt(arr[2]);
            this.lv = parseInt(arr[3]);
            this.base = arr[4].split("-");
            this.sp = arr[5].split("-");
            let cfg = Mount_ListProxy.Ins.getCfg(this.mountid);
            this.mountCfg = cfg;
            this.qua = cfg.f_Quality;
            let cfg2 = MountConfigProxy.Ins.getByQualityID(this.qua);
            this.maxLv = cfg2.f_MaxLevel;
        }
        quaTxt() {
            let cfg = EquipmentQualityProxy.Ins.GetDataById(this.qua);
            if (cfg) {
                return cfg.f_EquipmentLevel;
            }
            return "";
        }
    }
    class ZuoqiTipsShop extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.zuoqi.ui_zuoqi_tip2UI();
                this._plusCtl = FontCtlFactory.createPlus();
                this._ui.listleft.renderHandler = new Laya.Handler(this, this.onBaseMainAttr);
                this._ui.listleft.itemRender = ui.views.main.ui_main_attrUI;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onSpAtrrHandler);
                this._ui.list2.itemRender = ui.views.zuoqi.ui_zuoqi_spec_attr1UI;
                this.bindClose(this._ui.close1);
            }
        }
        onBaseMainAttr(item) {
            let arr = item.dataSource.split(":");
            item.upimg.visible = false;
            let id = parseInt(arr[0]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id);
            item.valTf.text = attrConvert(id, parseInt(arr[1]));
        }
        onSpAtrrHandler(item) {
            let arr = item.dataSource.split(":");
            let id = parseInt(arr[0]);
            item.tf1.text = MainModel.Ins.getAttrNameIdByID(id);
            item.valTf.text = attrConvert(id, parseInt(arr[1]));
        }
        onInit() {
            this._data = this.Data;
            this.updateHead(this._ui.slot1);
            this._ui.nameTf.text = this._data.mountCfg.f_MountName;
            this._ui.quaTf.text = this._data.quaTxt();
            this._ui.nameTf.color = this._ui.quaTf.color = QualityUtils.getQuaColor(this._data.qua);
            this._ui.lvuptf.text = E.getLang("zuoqilvlimit", this._data.maxLv);
            this._plusCtl.setValue(this._ui.plusCon, StringUtil.val2Atlas(this._data.plus));
            this._ui.listleft.array = this._data.base;
            this._ui.list2.array = this._data.sp;
        }
        updateHead(headSkin) {
            headSkin.ck.visible = false;
            headSkin.sel.visible = false;
            f_setStar(headSkin, this._data.star);
            headSkin.typename.text = "";
            headSkin.tf1.text = "Lv." + this._data.lv;
            headSkin.icon.skin = IconUtils.getHorseIcon(this._data.mountid);
            headSkin.qua.skin = IconUtils.getQuaIcon(this._data.qua);
        }
    }

    exports.LabourZuoqiTipsVo = LabourZuoqiTipsVo;
    exports.ZuoqiTipsShop = ZuoqiTipsShop;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ReelAnimCtl {
        constructor() {
            this.dir = -1;
            this.offsetX = 0;
            this.isPlaying = false;
        }
        init(con) {
            this.con = con;
            this.offsetX = this.dir * -1 * con.width;
            this.tween = new Laya.Tween();
            this.visible = true;
        }
        set visible(v) {
            if (this.con) {
                this.lbvis = v;
                this.con.visible = v;
            }
        }
        play(_callBack, _useTime = 250) {
            if (this.con) {
                this.useTime = _useTime;
                this.callBack = _callBack;
                if (this.isPlaying) {
                    return;
                }
                this.isPlaying = true;
                this.con.x = 0;
                this.tween.clear();
                this.lbParent = false;
                this.tween.to(this.con, { x: this.offsetX }, this.useTime, null, new Laya.Handler(this, this.end));
            }
        }
        set lbParent(v) {
        }
        set lbvis(v) {
        }
        end() {
            if (this.callBack) {
                this.callBack.runWith(0);
            }
            this.tween.to(this.con, { x: 0 }, this.useTime, null, new Laya.Handler(this, this.end1));
        }
        end1() {
            this.isPlaying = false;
            this.lbParent = true;
            if (this.callBack) {
                this.callBack.runWith(1);
            }
        }
        refresh() {
        }
    }

    exports.ReelAnimCtl = ReelAnimCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EChestLevelUp) {
        EChestLevelUp[EChestLevelUp["UseMoney"] = 1] = "UseMoney";
        EChestLevelUp[EChestLevelUp["Full"] = 2] = "Full";
        EChestLevelUp[EChestLevelUp["Time"] = 3] = "Time";
        EChestLevelUp[EChestLevelUp["End"] = 4] = "End";
    })(exports.EChestLevelUp || (exports.EChestLevelUp = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AdventureBossProxy extends BaseCfg {
        GetTabelName() {
            return "t_Adventure_Boss";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new AdventureBossProxy();
            }
            return this._ins;
        }
        getNext(id) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_id == id) {
                    let _nextCfg = l[i + 1];
                    return _nextCfg;
                }
            }
            if (id == 0) {
                return l[0];
            }
        }
    }

    exports.AdventureBossProxy = AdventureBossProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BoxCdProxy extends BaseCfg {
        GetTabelName() {
            return "t_BoxCD";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new BoxCdProxy();
            }
            return this._ins;
        }
    }
    class t_BoxGachaProxy extends BaseCfg {
        GetTabelName() {
            return "t_BoxGacha";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_BoxGachaProxy();
            }
            return this._ins;
        }
        getCfgByLv(lv) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_BoxLevel == lv) {
                    return cfg;
                }
            }
        }
    }

    exports.BoxCdProxy = BoxCdProxy;
    exports.t_BoxGachaProxy = t_BoxGachaProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AnimSetting {
        constructor(imgurl, spineurl, bg, index) {
            this.imgurl = imgurl;
            this.spineurl = spineurl;
            this.bgURL = bg;
            this.index = index;
        }
        get desc() {
            let arr = E.getLang("boxdesc").split("|");
            return arr[this.index];
        }
    }
    class LRCtl {
        constructor(left1, right1, okBtn, tf, nametf, ui) {
            this.model = MainModel.Ins;
            this._ui = ui;
            this.nametf = nametf;
            this.tf = tf;
            this.leftBtnCtl = ButtonCtl.CreateBtn(left1, this, this.onLeftHandler);
            this.rightBtnCtl = ButtonCtl.CreateBtn(right1, this, this.onRightHandler);
            this.okCtl = ButtonCtl.CreateBtn(okBtn, this, this.onOkHandler);
        }
        refreshArrow() {
            this.updateEvt();
        }
        updateEvt() {
            this.model.event(MainEvent.UPDATE_NEW_PLAYER);
            this.model.event(MainEvent.SWITCH_ANIM);
            this.model.event(MainEvent.MailRed);
        }
        onOkHandler() {
            this.refreshArrow();
            this.model.animIndex = this.index;
            this.updateEvt();
            E.ViewMgr.Close(EViewType.BoxAnimSet);
            E.ViewMgr.Close(EViewType.SheZhiView);
        }
        clear() {
            this.model.isNewRole = false;
            this.model.event(MainEvent.UPDATE_NEW_PLAYER);
        }
        onLeftHandler() {
            if (this.index > 0) {
                this.index--;
            }
            else {
                this.index = this.model.animSettingList.length - 1;
            }
            this.refresh();
            this.clear();
            this.refreshArrow();
        }
        onRightHandler() {
            if (this.index < this.model.animSettingList.length - 1) {
                this.index++;
            }
            else {
                this.index = 0;
            }
            this.refresh();
            this.refreshArrow();
        }
        refresh() {
            this.updateView();
        }
        updateView() {
            let index = this.index;
            if (index == 0) ;
            else if (index == this.model.animSettingList.length - 1) ;
            let vo = this.model.animSettingList[index];
            this.bg.skin = `${vo.imgurl}`;
            if (this.model.animIndex == index) {
                this.okCtl.grayMouseDisable = true;
                this.tf.text = E.getLang("selected");
            }
            else {
                this.okCtl.grayMouseDisable = false;
                this.tf.text = E.getLang("ok");
            }
            this.nametf.text = vo.desc;
            this._ui.l_red.visible = false;
            this._ui.redImg1.visible = false;
            let _hasRed = false;
            if (this.model.boxSettingRed) {
                if (this.index == this.model.DEFAULT_ANIM_INDEX && MainModel.Ins.isKotoWBuy) {
                    _hasRed = true;
                }
            }
            if (_hasRed) {
                this._ui.r_red.visible = true;
            }
            else {
                this._ui.r_red.visible = false;
            }
        }
    }
    class BoxSetAnimView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.model = MainModel.Ins;
                this.UI = this._ui = new ui.views.shezhi.ui_openboxUI();
                this.bindClose(this._ui.close1);
                this.lr = new LRCtl(this._ui.rightbtn, this._ui.leftbtn, this._ui.okbtn, this._ui.tf, this._ui.nametf, this._ui);
                this.lr.bg = this._ui.bg1;
            }
        }
        onInit() {
            this.lr.index = this.model.animIndex;
            this.lr.updateView();
        }
    }

    exports.AnimSetting = AnimSetting;
    exports.BoxSetAnimView = BoxSetAnimView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChestAnimBaseView {
        constructor() {
            this.anim = new BaseAnimSpine(false);
        }
        set mStatus(v) {
            let view = main.mainView;
            if (v == EChestAnimStatus.Close) {
                if (view) {
                    view.UpdateEquipSmallIcon(null);
                }
            }
            this._mStatus = v;
        }
        get mStatus() {
            return this._mStatus;
        }
        Play(_endHandler, qua = 1) {
        }
        get duration() {
            return 0;
        }
        get isPlaying() {
            return false;
        }
        onAnimEnd() {
        }
        updateAnim(b) {
        }
        Stop() {
        }
    }

    exports.ChestAnimBaseView = ChestAnimBaseView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Sell2Spine extends FightPureAnim {
        constructor() {
            super();
            this.maxCount = 9;
        }
        get numAtlas() {
            return SpineUtil.sell2Atlas;
        }
        boxSell(exp, money) {
            let anim = 0;
            let result = [];
            let numAtlas = this.numAtlas;
            result = result.concat(SpineAnimUtils.sell(numAtlas, "+" + exp, "j", this.maxCount));
            result = result.concat(SpineAnimUtils.sell(numAtlas, "+" + money, "h", this.maxCount));
            this.setText(anim, result);
            this.play(0);
        }
        createDatas(str, pre) {
            let numAtlas = this.numAtlas;
            return SpineAnimUtils.sell(numAtlas, str, pre, 5, "h");
        }
        playHappy(gouyu, fuyuan = 0) {
            let anim = 1;
            let result = [];
            let numAtlas = this.numAtlas;
            let _cell2 = new SpineAnimResultVo();
            _cell2.slot = "icon_jb6";
            if (!fuyuan) {
                _cell2.uv = numAtlas.getUV("blank");
                result.push(_cell2);
                result = result.concat(this.createDatas("", "a"));
            }
            else {
                _cell2.uv = numAtlas.getUV("icon_jp");
                result.push(_cell2);
                result = result.concat(this.createDatas("+" + fuyuan, "a"));
            }
            let _gouYuCell = new SpineAnimResultVo();
            _gouYuCell.slot = "icon_jy5";
            if (!gouyu) {
                _gouYuCell.uv = numAtlas.getUV("blank");
                result.push(_gouYuCell);
                result = result.concat(this.createDatas("", "b"));
            }
            else {
                _gouYuCell.uv = numAtlas.getUV("icon_sp");
                result.push(_gouYuCell);
                result = result.concat(this.createDatas("+" + gouyu, "b"));
            }
            this.play(anim);
            this.setText(anim, result);
        }
    }
    class BetterEffectSpine extends FightPureAnim {
        get numAtlas() {
            let url = this.url.replace(".skel", ".atlas");
            return AtlasParserV.parse(Laya.Loader.getRes(url));
        }
        xxzdz(value, index) {
            let result = [];
            let _data = SpineAnimUtils.sell(this.numAtlas, "+" + value, "h", 5, "h");
            result = result.concat(_data);
            this.setText(index, result);
        }
    }

    exports.BetterEffectSpine = BetterEffectSpine;
    exports.Sell2Spine = Sell2Spine;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EChestSpineAnim) {
        EChestSpineAnim[EChestSpineAnim["Open"] = 0] = "Open";
        EChestSpineAnim[EChestSpineAnim["Qua1"] = 1] = "Qua1";
        EChestSpineAnim[EChestSpineAnim["Qua2"] = 2] = "Qua2";
        EChestSpineAnim[EChestSpineAnim["Qua3"] = 3] = "Qua3";
        EChestSpineAnim[EChestSpineAnim["Qua4"] = 4] = "Qua4";
        EChestSpineAnim[EChestSpineAnim["Qua5"] = 5] = "Qua5";
        EChestSpineAnim[EChestSpineAnim["Qua6"] = 6] = "Qua6";
        EChestSpineAnim[EChestSpineAnim["Close"] = 7] = "Close";
        EChestSpineAnim[EChestSpineAnim["CloseEnd"] = 8] = "CloseEnd";
        EChestSpineAnim[EChestSpineAnim["Qua7"] = 9] = "Qua7";
        EChestSpineAnim[EChestSpineAnim["Qua8"] = 10] = "Qua8";
        EChestSpineAnim[EChestSpineAnim["Qua9"] = 11] = "Qua9";
        EChestSpineAnim[EChestSpineAnim["Qua10"] = 12] = "Qua10";
        EChestSpineAnim[EChestSpineAnim["Qua11"] = 13] = "Qua11";
        EChestSpineAnim[EChestSpineAnim["Qua12"] = 14] = "Qua12";
        EChestSpineAnim[EChestSpineAnim["Qua13"] = 15] = "Qua13";
    })(exports.EChestSpineAnim || (exports.EChestSpineAnim = {}));
    class ChestAnimSpine extends ChestAnimBaseView {
        constructor(container, index) {
            super();
            this.offsetY = 0;
            this.animVal = 0;
            this.model = MainModel.Ins;
            this.container = container;
            this.url = MainModel.Ins.animSettingList[index].spineurl;
            this.anim.load(this.url);
            this.anim.once(Laya.Event.COMPLETE, this, this.onInit);
            this.model.on(MainEvent.SellSucceed, this, this.onSellSucceed);
        }
        onAvatarLabel(e) {
            let animEvent = e.name;
            if (animEvent == EAnimEvent.Drum) {
                E.AudioMgr.PlaySound1("drum.mp3");
            }
            LogSys.Warn("animEvent:" + animEvent + " index:" + this.anim.curIndex);
        }
        getVal(l, type) {
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.id == type) {
                    return cell.count;
                }
            }
        }
        onSellSucceed(data) {
            if (data.errorID == 0) {
                this._animCtl.boxSell(this.getVal(data.itemList, ECellType.EXP), this.getVal(data.itemList, ECellType.COPPER_MONEY));
                if (this.sellEffect) {
                    this.sellEffect.play();
                }
            }
        }
        getAnim(qua) {
            switch (qua) {
                case 1: return exports.EChestSpineAnim.Qua1;
                case 2: return exports.EChestSpineAnim.Qua2;
                case 3: return exports.EChestSpineAnim.Qua3;
                case 4: return exports.EChestSpineAnim.Qua4;
                case 5: return exports.EChestSpineAnim.Qua5;
                case 6: return exports.EChestSpineAnim.Qua6;
                case 7: return exports.EChestSpineAnim.Qua7;
                case 8: return exports.EChestSpineAnim.Qua8;
                case 9: return exports.EChestSpineAnim.Qua9;
                case 10: return exports.EChestSpineAnim.Qua10;
                case 11: return exports.EChestSpineAnim.Qua11;
                case 12: return exports.EChestSpineAnim.Qua12;
                case 13: return exports.EChestSpineAnim.Qua13;
            }
            return exports.EChestSpineAnim.Qua13;
        }
        get duration() {
            if (this.anim && this.anim.avatar) {
                return this.anim.avatar.duration;
            }
            return 0;
        }
        onInit() {
            this.anim.container.y = this.offsetY;
            this.anim.avatar.skeleton.on(Laya.Event.LABEL, this, this.onAvatarLabel);
            if (!DrawCallConfig.disable_spine) {
                this.container.addChild(this.anim.container);
            }
            let _animCtl = new Sell2Spine();
            _animCtl.load(`o/spine/sell2/sell2.skel`);
            _animCtl.setPos(this.container);
            this._animCtl = _animCtl;
            this.Stop();
        }
        Stop() {
            this.onAnimEnd(true);
        }
        onAnimEnd(isInit = false) {
            this.updateAnim(isInit);
            if (this.endHandler) {
                this.endHandler.run();
            }
        }
        updateAnim(isInit = false) {
            if (this.mStatus == EChestAnimStatus.Open) {
                this.anim.play(exports.EChestSpineAnim.Open, true);
            }
            else {
                if (isInit) {
                    this.onCloseEnd();
                }
                else {
                    if (initConfig.noBoxAnim) {
                        this.onCloseEnd();
                    }
                    else {
                        this.end1();
                    }
                }
            }
        }
        end1() {
            if (this.anim.curIndex == exports.EChestSpineAnim.Open) {
                this.anim.playOnce(exports.EChestSpineAnim.CloseEnd, this, this.onCloseEnd);
            }
            else {
                this.onCloseEnd();
            }
        }
        onCloseEnd() {
            this.anim.play(exports.EChestSpineAnim.Close, true);
        }
        get isPlaying() {
            if (this.anim) {
                if (this.anim.curIndex == exports.EChestSpineAnim.CloseEnd ||
                    this.anim.curIndex == exports.EChestSpineAnim.Close ||
                    this.anim.curIndex == exports.EChestSpineAnim.Open) {
                    return false;
                }
                return true;
            }
            return false;
        }
        Play(_endHandler, qua = 1) {
            this.endHandler = _endHandler;
            if (this.isPlaying) {
                return;
            }
            let anim = this.getAnim(qua);
            this.animVal = anim;
            if (anim >= exports.EChestSpineAnim.Qua10 && E.ViewMgr.IsOpen(EViewType.Main)) {
                MainModel.Ins.mainView.playFullEffect();
            }
            LogSys.Log("play index:" + anim);
            this.anim.playOnce(anim, this, this.onAnimEnd);
        }
    }

    exports.ChestAnimSpine = ChestAnimSpine;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AddSubCtl {
        constructor(_addSkin, _subSkin, _showTf) {
            this._curVal = 0;
            this._maxVal = 0;
            this._oneOffset = 1;
            this._addSkin = _addSkin;
            this._subSkin = _subSkin;
            this._showTf = _showTf;
            ButtonCtl.CreateBtn(this._addSkin, this, this.onAddHandler);
            ButtonCtl.CreateBtn(this._subSkin, this, this.onSubHandler);
        }
        onAddHandler() {
            if (this._curVal + this._oneOffset > this._maxVal) {
                return;
            }
            this._curVal += this._oneOffset;
            this.refreshSkin();
        }
        setValue(v) {
            if (v > this._maxVal) {
                return;
            }
            this._curVal = v;
            this.refreshSkin();
        }
        onSubHandler() {
            if (this._curVal - this._oneOffset <= 0) {
                return;
            }
            this._curVal -= this._oneOffset;
            this.refreshSkin();
        }
        refreshSkin() {
            this._showTf.text = this._curVal.toString();
            this.callBack.run();
        }
        reset() {
            this._curVal = 1;
            this.refreshSkin();
        }
        set maxVal(v) {
            this._maxVal = v;
        }
        get curVal() {
            return this._curVal;
        }
    }

    exports.AddSubCtl = AddSubCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class QuickViewVo {
        getDesc(curVal) {
            let cfg = ItemProxy.Ins.getCfg(this.itemId);
            switch (this.sceneType) {
                default:
                    let _time = parseInt(cfg.f_p1);
                    let sec = curVal * _time;
                    let str = TimeUtil.timeFormatStr(sec, true);
                    return E.getLang("CanFastTime") + " " + str;
            }
        }
        get useRefreshTime() {
            let cfg = ItemProxy.Ins.getCfg(this.itemId);
            switch (this.sceneType) {
                default:
                    let _time = parseInt(cfg.f_p1);
                    return _time;
            }
        }
        get haveItemCount() {
            return MainModel.Ins.mRoleData.getVal(this.itemId);
        }
        mushUse(curVal) {
            if (MainModel.Ins.isItemEnoughSt(`${this.itemId}-${curVal}`, true)) {
                let req = new UseItem_req();
                req.type = this.sceneType;
                req.itemlist = [];
                let _cell = new stCellValue();
                _cell.id = this.itemId;
                _cell.count = curVal;
                req.itemlist.push(_cell);
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        useItem(curVal) {
            switch (this.sceneType) {
                case EUseItemScene.Chest:
                    if (curVal > 1) {
                        this.mushUse(curVal);
                    }
                    else {
                        MainModel.Ins.levelUpChest();
                    }
                    break;
                default:
                    this.mushUse(curVal);
                    break;
            }
        }
    }
    class ChestQuickUseView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_chest_quick_useUI();
                this.bindClose(this._ui.close1);
                this._ctl = new AddSubCtl(this._ui.addBtn, this._ui.subBtn, this._ui.cntTf);
                this._ctl.callBack = new Laya.Handler(this, this.onUpdateHandler);
                this.btnList.push(ButtonCtl.CreateBtn(this._ui.okBtn, this, this.onOkHandler), ButtonCtl.CreateBtn(this._ui.cancelBtn, this, this.Close));
                this.maxBtnCtl = ButtonCtl.CreateBtn(this._ui.maxBtn, this, this.onMaxHandler);
                this.maxBtnCtl.visible = HrefUtils.getVal("maxbtn") == 1;
                this.btnList.push(this.maxBtnCtl);
            }
        }
        onMaxHandler() {
            this._ctl.setValue(this._vo.haveItemCount);
        }
        onOkHandler() {
            this._vo.useItem(this._ctl.curVal);
            this.Close();
        }
        onUpdateHandler() {
            this._ui.tf3.text = this._vo.getDesc(this._ctl.curVal);
        }
        onInit() {
            let _vo = this.Data;
            this._vo = _vo;
            this.itemId = _vo.itemId;
            let cfg = ItemProxy.Ins.getCfg(this.itemId);
            this.itemCfg = cfg;
            let haveItem = MainModel.Ins.getItemVo(cfg.f_itemid);
            ItemViewFactory.refreshSlot(this._ui.slot, haveItem);
            this._ui.nameTf.text = main.itemName(cfg.f_name);
            if (this._vo.sceneType == EUseItemScene.Chest ||
                this._vo.sceneType == EUseItemScene.Knowledge) {
                let useRefreshTime = _vo.useRefreshTime;
                let needCount = Math.ceil((_vo.lvTime - TimeUtil.serverTime) / useRefreshTime);
                if (haveItem.count < needCount) {
                    this._ctl.maxVal = haveItem.count;
                    this._ctl.setValue(haveItem.count);
                }
                else {
                    this._ctl.maxVal = needCount;
                    this._ctl.setValue(needCount);
                }
                this._ctl.refreshSkin();
            }
            else {
                this._ctl.maxVal = MainModel.Ins.mRoleData.getVal(this.itemId);
                this._ctl.reset();
            }
        }
    }

    exports.ChestQuickUseView = ChestQuickUseView;
    exports.QuickViewVo = QuickViewVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class CJKEView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_vipKFViewUI();
                this.bindClose(this._ui.btn_close);
                this._ui.icon1.skin = "";
            }
        }
        onInit() {
            if (window['Sygame']) {
                let channel = window['Sygame'].channel;
                let wecha_id = window['Sygame'].openid;
                let role_id = MainModel.Ins.mRoleData.AccountId;
                let version = window['Sygame'].app_version;
                let url = `https://docater1.cn/index.php?g=Wap&m=MiniGame&a=getUserVipInfo&channel=${channel}&wecha_id=${wecha_id}&role_id=${role_id}&version=${version}`;
                HttpUtil.httpGet(url, new Laya.Handler(this, this.onHttpComplete));
            }
        }
        onHttpComplete(value) {
            let data = JSON.parse(value);
            this._ui.icon1.skin = data.vip_qrcode;
        }
        onExit() {
        }
    }

    exports.CJKEView = CJKEView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ExchangeView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.shezhi.ui_duihuanma_viewUI();
                this.bindClose(this._ui.close1);
                this.btn1Ctl = ButtonCtl.CreateBtn(this._ui.btn1, this, this.onExchangeHandler);
            }
        }
        onExchangeHandler() {
            if (StringUtil.IsNullOrEmpty(this._ui.input1.text)) {
                return;
            }
            let req = new RedemptionCode_req();
            req.code = this._ui.input1.text;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onInit() {
            this._ui.input1.text = "";
        }
        SetCenter() {
            super.SetCenter();
            this.UI.y = this.ViewParent.height * 0.4;
        }
    }

    exports.ExchangeView = ExchangeView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MainBotIconCtl {
        onVisible(v) {
        }
    }

    exports.MainBotIconCtl = MainBotIconCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function getPosSize$2(spr) {
        let wx = E.wx;
        let info = wx.getSystemInfoSync();
        let w = info.screenWidth;
        let h = info.screenHeight;
        let percent = w / Laya.stage.width;
        let rw = spr.width * percent;
        let rh = spr.height * percent;
        let pos = spr.parent.localToGlobal(new Laya.Point(spr.x, spr.y));
        let obj = {};
        obj.w = rw;
        obj.h = rh;
        obj.x = pos.x / Laya.stage.width * w;
        obj.y = pos.y / Laya.stage.height * h;
        return obj;
    }
    class WeiXinNormal extends MainBotIconCtl {
        setSkin(skin) {
            this._skin = skin;
            this._skin.redimg.visible = false;
            this._skin.bg.skin = `remote/main/main/pyq.png`;
            this._skin.tf.text = E.getLang("pyq01");
            this._skin.on(Laya.Event.CLICK, this, this.onPyq);
            this.onRedUpdate();
        }
        onPyq() {
            E.ViewMgr.Open(EViewType.GameGroup);
            MainModel.Ins.event(MainEvent.MailRed);
        }
        onVisible(v) {
            if (v) {
                MainModel.Ins.on(MainEvent.FuncSmallIconUpdate, this, this.onRedUpdate);
                this.onRedUpdate();
            }
            else {
                MainModel.Ins.off(MainEvent.FuncSmallIconUpdate, this, this.onRedUpdate);
            }
        }
        onRedUpdate() {
            this._skin.redimg.visible = MainModel.Ins.getHasRed(EFuncDef.GameCirle);
        }
    }
    class WeiXinNormalStyle extends MainBotIconCtl {
        setSkin(skin) {
            this._skin = skin;
            this._skin.redimg.visible = false;
            this._skin.bg.skin = `remote/main/main/pyq.png`;
            this._skin.tf.text = E.getLang("pyq01");
            this.btnCtl = new WeiXinPyqCtl();
            this.btnCtl.setSkin(this._skin);
        }
        onVisible(v) {
            this.btnCtl.onVisible(v);
        }
    }
    class WeiXinPyqCtl extends MainBotIconCtl {
        setSkin(skin) {
            this._skin = skin;
            this.wx = E.wx;
            if (E.Debug) {
                this._skin.graphics.drawRect(0, 0, this._skin.width, this._skin.height, null, 0xff0000);
            }
            if (!this.wx) {
                this._skin.on(Laya.Event.CLICK, this, this.onPyq);
            }
        }
        onVisible(v) {
            if (v) {
                this.onDisplay();
            }
            else {
                this.onUnDisplay();
            }
        }
        createWxBtn() {
            if (this.wx) {
                let o = getPosSize$2(this._skin);
                let openLink = System_RefreshTimeProxy.Ins.getVal(39);
                let btn = this.wx['createGameClubButton']({
                    hasRedDot: false,
                    image: "empty.png",
                    style: {
                        left: o.x,
                        top: o.y,
                        width: o.w,
                        height: o.h,
                    },
                    openlink: openLink
                });
                this.wxbtn = btn;
            }
        }
        onDisplay() {
            let wx = this.wx;
            if (wx) {
                if (!this.wxbtn) {
                    this.createWxBtn();
                }
                this.wxbtn.show();
            }
        }
        onUnDisplay() {
            if (this.wxbtn) {
                this.wxbtn.hide();
            }
        }
        onPyq(e) {
            if (!this.wx) {
                E.ViewMgr.ShowMidError("请切换到微信环境下");
            }
        }
    }

    exports.WeiXinNormal = WeiXinNormal;
    exports.WeiXinNormalStyle = WeiXinNormalStyle;
    exports.WeiXinPyqCtl = WeiXinPyqCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GSoltItemView extends ui.views.main.ui_slot_itemUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
            this.tf1.visible = false;
        }
        setData(vo) {
            let _vo = vo;
            this._vo = _vo;
            this.icon.skin = _vo.getIcon();
        }
        onClickHandler(e) {
            e.stopPropagation();
            MainModel.Ins.showSmallTips(this._vo.getName(), this._vo.getDesc(), this);
        }
    }
    class GameGroupView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("youxiquan.atlas");
        }
        onExit() {
            this.btnCtl.onVisible(false);
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.shezhi.ui_youxiquan_viewUI();
                this.bindClose(this._ui.close1);
                this._ui.enterBtn.on(Laya.Event.CLICK, this, this.onClickHandler);
                this.btnCtl = new WeiXinPyqCtl();
                this.btnCtl.setSkin(this._ui.enterBtn);
                let str = System_RefreshTimeProxy.Ins.getVal(41);
                ItemViewFactory.renderItemSlots(this._ui.rewardCon, str, 10, 1, "center", GSoltItemView, "GSoltItemView");
            }
        }
        onClickHandler() {
            this.Close();
        }
        onInit() {
            MainModel.Ins.funcSetRed(EFuncDef.GameCirle, false);
            MainModel.Ins.event(MainEvent.MailRed);
        }
        onShow() {
            super.onShow();
            this.btnCtl.onVisible(true);
        }
    }

    exports.GameGroupView = GameGroupView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class GZHView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_gzhViewUI();
                this.bindClose(this._ui.btn_close);
                this._ui.icon1.skin = `static/ewma.png`;
                this._ui.nameTf.text = E.getLang("gamename");
            }
        }
        onInit() {
        }
        onExit() {
        }
    }

    exports.GZHView = GZHView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HighAutoAttrCfg {
        constructor(attrId = 0) {
            this.color = "FBF0BB";
            this.attrid = attrId;
        }
        get doNotCheck() {
            return this.attrid == -1;
        }
        get txt() {
            if (this.count) {
                return this.count.toString();
            }
            if (this.attrid == 0) {
                return E.getLang("Anything");
            }
            else if (this.attrid == -1) {
                return "无";
            }
            return MainModel.Ins.getAttrNameIdByID(this.attrid);
        }
    }
    var EBoxAutoType;
    (function (EBoxAutoType) {
        EBoxAutoType[EBoxAutoType["Lv"] = 1] = "Lv";
        EBoxAutoType[EBoxAutoType["Month"] = 2] = "Month";
        EBoxAutoType[EBoxAutoType["Year"] = 3] = "Year";
    })(EBoxAutoType || (EBoxAutoType = {}));
    var EErrStatus;
    (function (EErrStatus) {
        EErrStatus[EErrStatus["Lv"] = 0] = "Lv";
        EErrStatus[EErrStatus["Month"] = 1] = "Month";
        EErrStatus[EErrStatus["Year"] = 2] = "Year";
        EErrStatus[EErrStatus["Null"] = 3] = "Null";
    })(EErrStatus || (EErrStatus = {}));
    class CountAutoCfg {
        constructor(cfg = null) {
            this.color = "FBF0BB";
            this.cfg = cfg;
            if (cfg) {
                this.count = this.cfg.f_BoxMag;
            }
            else {
                this.count = 1;
            }
        }
        get txt() {
            return this.count + "倍";
        }
        get boxMag() {
            if (this.cfg) {
                return this.cfg.f_BoxMag;
            }
            return 1;
        }
        get condition() {
            if (this.cfg) {
                let s = "";
                let sign = "";
                if (this.cfg.f_p1 != 0) {
                    s = `Lv.${this.cfg.f_p1}`;
                    sign = "+";
                }
                if (this.cfg.f_UnlockType == EBoxAutoType.Month) {
                    s += sign + "月卡";
                }
                else if (this.cfg.f_UnlockType == EBoxAutoType.Year) {
                    s += sign + "终身卡";
                }
                return s;
            }
            else {
                return "";
            }
        }
        get locked() {
            let lv = MainModel.Ins.mRoleData.lv;
            if (this.cfg) {
                if (this.cfg.f_UnlockType == EBoxAutoType.Lv) {
                    if (lv < this.cfg.f_p1) {
                        this.errStatus = EErrStatus.Lv;
                        return true;
                    }
                }
                else if (this.cfg.f_UnlockType == EBoxAutoType.Month) {
                    if (!MainModel.Ins.isMonthCanUsed) {
                        this.errStatus = EErrStatus.Month;
                        return true;
                    }
                }
                else if (this.cfg.f_UnlockType == EBoxAutoType.Year) {
                    if (!MainModel.Ins.isYearCanUsed) {
                        this.errStatus = EErrStatus.Year;
                        return true;
                    }
                }
                if (lv < this.cfg.f_p1) {
                    this.errStatus = EErrStatus.Lv;
                    return true;
                }
            }
            this.errStatus = EErrStatus.Null;
        }
    }
    class HighListCtl {
        constructor(skin, datalist, maxCount, type) {
            this.cls = ui.views.main.ui_high_quick_setting_list_attrUI;
            this.sel = new SelectListCtl();
            this._ui = skin;
            this.resetIndex(type, datalist);
            this.sel.mCompose = true;
            this.sel.dirBottom = true;
            this.sel.maxColCount = maxCount;
            this.sel.selectHandler = new Laya.Handler(this, this.onSel);
            this.refresh(datalist);
        }
        resetIndex(type, datalist) {
            let v1 = type;
            let o = RedUpdateModel.Ins.getByID(v1);
            if (o) {
                this.sel.curIndex = o.type;
            }
            else {
                this.sel.curIndex = datalist.length - 1;
            }
        }
        onSel() {
            let view = E.ViewMgr.Get(EViewType.HighAutoChest);
            if (view.IsShow()) {
                view.uploadData();
            }
        }
        refresh(datalist) {
            this.sel.init(this._ui.sj0, this._ui.listarea0, this._ui.listcon0, this._ui.tf0, this.cls, datalist, "ui_high_quick_setting_list_attrUI");
            this.sel.refresh();
        }
    }
    class NumListCtl {
        constructor(skin, datalist) {
            this.cls = ui.views.main.ui_high_quick_num_setting_list_attrUI;
            this.sel = new SelectListCtl();
            this.sel.curIndex = MainModel.Ins.boxAutoVo.boxCountIndex;
            this.sel.itemHandler = new Laya.Handler(this, this.onItemRender);
            this.sel.checkHandler = new Laya.Handler(this, this.checkHandler);
            this.sel.selectHandler = new Laya.Handler(this, this.onSel);
            this.sel.clickCallBack = new Laya.Handler(this, this.onClick);
            this._ui = skin;
            this.sel.mCompose = true;
            this.sel.dirBottom = true;
            this.refresh(datalist);
        }
        onClick(index) {
            console.log(index);
            let view = E.ViewMgr.Get(EViewType.Main);
            view.skin.setdot.visible = false;
        }
        onSel() {
            let view = E.ViewMgr.Get(EViewType.HighAutoChest);
            if (view.IsShow()) {
                view.uploadData();
            }
        }
        onItemRender(item) {
            let cfg = item.dataSource;
            item.tf.text = cfg.txt;
            item.tf2.text = cfg.condition;
            item.lockimg.visible = cfg.locked;
        }
        checkHandler(index) {
            let cfg = this.sel.curDataList[index];
            if (cfg.locked) {
                let err = E.getLang("carderr").split("|")[cfg.errStatus];
                E.ViewMgr.ShowMidError(err);
                this.sel.close();
                return false;
            }
            return true;
        }
        refresh(datalist) {
            this.sel.init(this._ui.sj0, this._ui.listarea0, this._ui.listcon0, this._ui.tf0, this.cls, datalist, "ui_high_quick_num_setting_list_attr");
            this.sel.refresh();
        }
    }
    class t_Box_filter extends BaseCfg {
        GetTabelName() {
            return "t_Box_filter";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Box_filter();
            }
            return this._ins;
        }
    }
    class HighCheckBoxCtl extends CheckBoxCtl {
        constructor(skin) {
            super(skin);
        }
    }
    class HighChestAutoSettingView extends ViewBase {
        constructor() {
            super(...arguments);
            this.selCtl = new SelectListCtl();
            this.ctlList = [];
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("main/main.atlas");
        }
        onExit() {
            this.uploadData();
            SelectListCtl.closeAll();
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = MainModel.Ins;
                this.UI = this._ui = new ui.views.main.ui_quick_setting_highUI();
                this.bindClose(this._ui.close1);
                this._ui.maskbg.on(Laya.Event.CLICK, this, this.Close);
                let group = t_Box_filter.Ins.List;
                let indexConfig = [RedEnum.BOX_ATTR_0, RedEnum.BOX_ATTR_1, RedEnum.BOX_ATTR_2, RedEnum.BOX_ATTR_3];
                for (let i = 0; i < 4; i++) {
                    let datalist1 = [];
                    let cfg = group[i];
                    let arr = cfg.f_filter1.split("|");
                    datalist1.push(new HighAutoAttrCfg(0));
                    for (let n = 0; n < arr.length; n++) {
                        datalist1.push(new HighAutoAttrCfg(parseInt(arr[n])));
                    }
                    datalist1.push(new HighAutoAttrCfg(-1));
                    this.ctlList.push(new HighListCtl(this._ui["l" + i], datalist1, 8, indexConfig[i]));
                }
                this.numCtl = new NumListCtl(this._ui.l4, []);
                this.refreshNum();
                this.startCtl = new ButtonCtl(this._ui.startBtn, new Laya.Handler(this, this.onStartHandler));
                this.setMouseBg(this._ui.bg2);
                this._ui.tips1.text = E.getLang("AutoHeroTips1");
                this._ui.tips2.text = E.getLang("AutoHeroTips2");
                this.ck0 = new HighCheckBoxCtl(this._ui.ck0);
                this.ck0.selectHander = new Laya.Handler(this, this.onSelHandler);
                this.ck0.selected = this.model.boxAutoVo.ck0;
                this.ck1 = new HighCheckBoxCtl(this._ui.ck1);
                this.ck1.selectHander = new Laya.Handler(this, this.onSelHandler);
                this.ck1.selected = this.model.boxAutoVo.ck1;
                this.togetherCk = new HighCheckBoxCtl(this._ui.tongshick);
                this.togetherCk.selectHander = new Laya.Handler(this, this.onTogetherHandler);
                this.orCk = new HighCheckBoxCtl(this._ui.huock);
                this.orCk.selectHander = new Laya.Handler(this, this.onOrHandler);
                this.plusCk = new CheckBoxCtl(this._ui.ck2);
                this.plusCk.selected = this.model.boxAutoVo.mCheckPlusHigh;
                this.plusCk.selectHander = new Laya.Handler(this, this.onPlusSelHandler);
                new ButtonCtl(this._ui._5btn, new Laya.Handler(this, this.onMonthHandler));
                new ButtonCtl(this._ui._8btn, new Laya.Handler(this, this.onYearHandler));
            }
        }
        initSel() {
            this.selCtl.dirBottom = true;
            this.selCtl.init(this._ui.sanjiao, this._ui.listarea, this._ui.listcontainer, this._ui.listtf, ui.views.main.ui_quick_setting_list_attrUI, MainModel.Ins.chestQuaSelectConfigList);
            this.selCtl.selectHandler = new Laya.Handler(this, this.onQuaSelHandler);
        }
        onTogetherHandler() {
            this.orCk.selected = !this.togetherCk.selected;
            this.onSelHandler();
        }
        onOrHandler() {
            this.togetherCk.selected = !this.orCk.selected;
            this.onSelHandler();
        }
        onPlusSelHandler() {
            this.model.boxAutoVo.mCheckPlusHigh = this.plusCk.selected;
        }
        onQuaSelHandler() {
            let quaCfg = this.selCtl.selectVo;
            this.model.boxAutoVo.saveQua(quaCfg.f_id);
        }
        onSelHandler() {
            this.uploadData();
        }
        onMonthHandler() {
            ActivityModel.Ins.openFunc(EActivityType.t_Pack_MonthAndYear_Card, EViewType.YueKa);
        }
        onYearHandler() {
            ActivityModel.Ins.openFunc(EActivityType.t_Pack_MonthAndYear_Card, EViewType.ZhongShenKa);
        }
        getSelIndex() {
            let quaid = this.model.boxAutoVo.getQua_f_id();
            let datalist = this.selCtl.curDataList;
            for (let i = 0; i < datalist.length; i++) {
                let quaCfg = datalist[i];
                if (quaCfg.f_id == quaid) {
                    return i;
                }
            }
            return 0;
        }
        initTogetherOr() {
            this.togetherCk.selected = this.model.boxAutoVo.togetherCkVal;
            this.orCk.selected = !this.model.boxAutoVo.togetherCkVal;
        }
        onInit() {
            this.initSel();
            this.initTogetherOr();
            let _index = this.getSelIndex();
            this.selCtl.selectIndex(_index);
            this.selCtl.refresh();
            this.refreshNum();
            this.plusCk.selected = this.model.boxAutoVo.mCheckPlusHigh;
        }
        refreshNum() {
            if (this.numCtl) {
                this.numCtl.refresh(this.model.boxAutoVo.boxNumCfgList);
                let vo = this.numCtl.sel.selectVo;
                if (vo.locked) {
                    this.numCtl.sel.selectIndex(0);
                }
            }
        }
        uploadData() {
            let vo = this.model.boxAutoVo;
            if (this.numCtl) {
                vo.boxCountIndex = this.numCtl.sel.curIndex;
            }
            if (!this.plusCk) {
                return;
            }
            vo.togetherCkVal = this.togetherCk.selected;
            vo.mCheckPlusHigh = this.plusCk.selected;
            let arr = [RedEnum.BOX_ATTR_0, RedEnum.BOX_ATTR_1, RedEnum.BOX_ATTR_2, RedEnum.BOX_ATTR_3];
            for (let i = 0; i < arr.length; i++) {
                let id = arr[i];
                vo.uddateAttr(id, this.ctlList[i].sel.curIndex);
            }
            this.onQuaSelHandler();
            vo.ck0 = this.ck0.selected;
            vo.ck1 = this.ck1.selected;
            vo.upload();
        }
        onStartHandler() {
            let curCfg = this.selCtl.selectVo;
            this.uploadData();
            this.model.QuickStart(curCfg);
            this.Close();
        }
    }

    exports.CountAutoCfg = CountAutoCfg;
    exports.HighAutoAttrCfg = HighAutoAttrCfg;
    exports.HighChestAutoSettingView = HighChestAutoSettingView;
    exports.t_Box_filter = t_Box_filter;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EButtonStyle) {
        EButtonStyle[EButtonStyle["Mid"] = 1] = "Mid";
        EButtonStyle[EButtonStyle["Bottom"] = 2] = "Bottom";
        EButtonStyle[EButtonStyle["Pos"] = 3] = "Pos";
    })(exports.EButtonStyle || (exports.EButtonStyle = {}));
    class FuncSmallIcon {
        constructor() {
            this.used = false;
            this.isOpen = false;
            this.pos = 0;
            this._checkSubFuncList = [];
        }
        initSkin(cls) {
            this.skin = new cls();
            this.statusLabel = "";
            this.onDisplay();
        }
        refresh(name, funcType, btnStyle, x = undefined, y = undefined) {
            let skin;
            if (name instanceof Laya.View) {
                skin = name;
            }
            else {
                skin = E.ViewMgr.Get(EViewType.Main).UI[name];
            }
            let pos = 0;
            let cfg = MainIconProxy.Ins.getCfgByFuncid(funcType);
            if (cfg && btnStyle == exports.EButtonStyle.Pos) {
                pos = cfg.f_pos;
            }
            this.skin = skin;
            DebugUtil.draw(this.skin);
            if (debug) {
                if (!this._debugTF) {
                    this._debugTF = new Laya.Label();
                    this._debugTF.fontSize = 18;
                    this._debugTF.color = "#ff0000";
                }
                this.skin.addChild(this._debugTF);
                this._debugTF.text = funcType.toString();
            }
            this.pos = pos;
            this.btnStyle = btnStyle;
            let btnEffect = true;
            let btn = skin;
            if (btn.dot) {
                btn.dot.visible = false;
            }
            if (btnStyle == exports.EButtonStyle.Bottom) {
                btnEffect = false;
                this.selected = false;
            }
            let btnCon = this.skin["btnCon"];
            if (!btnCon) {
                btnCon = this.skin;
            }
            this.btnCtl = ButtonCtl.CreateBtn(btnCon, this, this.onClickHandler, btnEffect);
            if (btnStyle == exports.EButtonStyle.Mid) {
                this.btnCtl.setpos(x, y);
            }
            skin.on(Laya.Event.DISPLAY, this, this.onDisplay);
            skin.on(Laya.Event.UNDISPLAY, this, this.onUnDisplay);
            this._checkSubFuncList = [];
            if (cfg && cfg.f_ui_id) {
                this._checkSubFuncList = MainIconProxy.Ins.getFuncListByF_ui_id(cfg.f_ui_id);
            }
            this.setData(funcType);
            if (x != undefined) {
                this.setPos(x, y);
            }
            this.update();
        }
        update() {
        }
        updateLogicVis(v) {
        }
        set statusLabel(v) {
            if (this.skin.bg2) {
                if (v == "") {
                    this.skin.bg2.visible = this.skin.tf2.visible = false;
                }
                else {
                    this.skin.bg2.visible = this.skin.tf2.visible = true;
                    this.skin.tf2.text = v;
                }
            }
        }
        set selected(v) {
            this.skin.bg.visible = v;
        }
        setPos(x, y) {
            this.skin.x = x;
            this.skin.y = y;
        }
        onDisplay() {
            MainModel.Ins.on(MainEvent.FuncSmallIconUpdate, this, this.onRedUpdate);
        }
        refreshView() {
            this.setData(this.funcId);
        }
        onUnDisplay() {
            MainModel.Ins.off(MainEvent.FuncSmallIconUpdate, this, this.onRedUpdate);
        }
        onClickHandler() {
            if (MainModel.Ins.taLBId.indexOf(this.funcId) != -1) {
                if (E.ta) {
                    let time = TimeUtil.timestamtoTime(TimeUtil.serverTimeMS);
                    E.ta.userSetOnce({ first_pack: time });
                    E.ta.userSetOnce({ first_pack_id: this.funcId });
                    E.sendTrack("pack_click");
                }
            }
            if (this.funcCfg && this.funcCfg.f_hide_red) {
                MainModel.Ins.funcSetRed(this.funcCfg.f_FunctionID, false);
            }
            if (this.funcId == EFuncDef.NewPlayer) {
                let _activityVo = ActivityModel.Ins.getVo(EActivityType.t_Pack_NewPlayer);
                if (_activityVo) {
                    let _cfgId = _activityVo.getNewPlayerCfgId();
                    if (_cfgId) {
                        if (MainModel.Ins.newPlayerCloseRedList.indexOf(_cfgId) == -1) {
                            MainModel.Ins.newPlayerCloseRedList.push(_cfgId);
                            MainModel.Ins.updateNewPlayerRed();
                        }
                    }
                }
            }
            E.ViewMgr.OpenByFuncid(this.funcId);
        }
        midEmptyStatus() {
            this.funcId = 0;
            let skin = this.skin;
            skin.dot.visible = false;
            skin.tf2.visible = skin.bg2.visible = false;
            skin.icon.skin = `remote/main/main/weikaifang.png`;
            skin.tf.text = "";
        }
        onRedUpdate() {
            if (this.cfg) {
                let red = false;
                if (this._checkSubFuncList.length) {
                    for (let i = 0; i < this._checkSubFuncList.length; i++) {
                        let funcId = this._checkSubFuncList[i];
                        if (MainModel.Ins.getHasRed(funcId)) {
                            red = true;
                            break;
                        }
                    }
                }
                if (!red) {
                    if (MainModel.Ins.getHasRed(this.funcId)) {
                        red = true;
                    }
                }
                let x = 0;
                let y = 20;
                if (this.btnStyle == exports.EButtonStyle.Pos) {
                    x = 20;
                    y = 0;
                }
                if (this.btnStyle == exports.EButtonStyle.Mid) {
                    x = 0;
                    y = 0;
                }
                if (red) {
                    DotManager.addDot(this.skin, x, y);
                }
                else {
                    DotManager.removeDot(this.skin);
                }
                DebugUtil.drawTF(this.skin, this.funcId + "," + (red ? 1 : 0));
            }
        }
        getName(cfg) {
            if (MainModel.Ins.isVerify(cfg) && cfg.f_ts_name) {
                return cfg.f_ts_name;
            }
            if (!StringUtil.IsNullOrEmpty(cfg.f_outsidename) && this.btnStyle == exports.EButtonStyle.Bottom) {
                return cfg.f_outsidename;
            }
            return cfg.f_name;
        }
        showDebug() {
            if (E.Debug) {
                if (!this._testTF) {
                    this._testTF = new Laya.Label();
                    this._testTF.fontSize = 18;
                    this._testTF.color = "#00ff00";
                    this._testTF.stroke = 2;
                    this._testTF.strokeColor = "#000000";
                    let _conSpr = new Laya.Sprite();
                    this.skin.addChild(_conSpr);
                    _conSpr.graphics.drawCircle(0, 0, 5, "#00ffff");
                }
                this.skin.addChild(this._testTF);
                this._testTF.text = this.cfg.f_funid + "";
            }
        }
        isOpenByFuncid(funcId) {
            return MainModel.Ins.isOpenAllByFuncid(funcId.toString());
        }
        setData(funcType) {
            let cfg = MainIconProxy.Ins.getCfgByFuncid(funcType);
            let funcCfg = FuncProxy.Ins.getCfgByFid(funcType);
            this.funcCfg = funcCfg;
            this.cfg = cfg;
            this.skin.tf.text = this.getName(funcCfg);
            this.funcId = parseInt(cfg.f_funid);
            let iconVal = "";
            let isOpen = false;
            if (this._checkSubFuncList.length) {
                for (let i = 0; i < this._checkSubFuncList.length; i++) {
                    let funid = this._checkSubFuncList[i];
                    if (this.isOpenByFuncid(funid)) {
                        isOpen = true;
                        break;
                    }
                }
            }
            if (!isOpen) {
                isOpen = this.isOpenByFuncid(this.funcId);
            }
            let vis = true;
            if (this.btnStyle == exports.EButtonStyle.Mid) {
                let iconArr = cfg.f_icon.split(".");
                let a = iconArr[0];
                let icon = isOpen ? a : `${a}_1`;
                iconVal = `remote/main/main/${icon}.png`;
            }
            else if (this.btnStyle == exports.EButtonStyle.Bottom) {
                let arr = cfg.f_icon.split(".");
                let _icon2 = "";
                if (isOpen) {
                    _icon2 = arr[0] + "." + "png";
                }
                else {
                    _icon2 = arr[0] + "_1." + "png";
                }
                iconVal = `remote/main/main/${_icon2}`;
            }
            else if (this.btnStyle == exports.EButtonStyle.Pos) {
                vis = isOpen;
                iconVal = `remote/main/main/${cfg.f_icon}`;
            }
            this.skin.icon.skin = iconVal;
            this.visible = vis;
            this.isOpen = isOpen;
            this.onRedUpdate();
        }
        midReset() {
            this.skin.dot.visible = true;
            this.skin.tf2.visible = this.skin.bg2.visible = true;
        }
        set visible(v) {
            this.skin.visible = v;
        }
        dispose() {
            this._checkSubFuncList = [];
            this.onUnDisplay();
            this.skin.removeSelf();
        }
    }

    exports.FuncSmallIcon = FuncSmallIcon;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MailSlotItem {
        constructor(skin) {
            this.skin = skin;
            this.skin.on(Laya.Event.CLICK, this, this.onSlotClickHandler);
        }
        onSlotClickHandler(e) {
            let _vo = this.itemVo;
            if (_vo.cfg) {
                e.stopPropagation();
                MainModel.Ins.showSmallTips(_vo.getName(), _vo.getDesc(), this.skin);
            }
        }
        refresh(item, isLingqu) {
            if (item) {
                this.itemVo = new ItemVo();
                this.itemVo.cfgId = item.id;
                this.itemVo.count = item.count;
                this.skin.visible = true;
                this.skin.yilingquStatus.visible = isLingqu;
                let cfg = ItemProxy.Ins.getCfg(item.id);
                if (cfg) {
                    let qua = cfg.f_qua;
                    this.skin.quality.skin = IconUtils.getQuaIcon(qua);
                }
                else {
                    this.skin.quality.skin = "";
                }
                this.skin.icon.skin = IconUtils.getIconByCfgId(item.id);
                this.skin.tf1.text = item.count + "";
            }
            else {
                this.skin.visible = false;
            }
        }
    }
    let descClsKey = "DescTfNode";
    class DescTfNode extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = descClsKey;
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ui.views.mail.mail_tf_contentUI);
            let _data = this.list[index];
            _skin.descTf.text = _data;
            _skin.height = _skin.descTf.textField.textHeight;
            _skin.x = 0;
            _skin.y = this.y;
            return _skin;
        }
    }
    class MailShow extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.slotList = [];
            this.autoFree = true;
        }
        onAddLoadRes() { }
        onExit() {
        }
        ;
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.mail.mailshowUI();
                this.slotList = [];
                for (let i = 0; i < 4; i++) {
                    this.slotList.push(new MailSlotItem(this._ui['item' + i]));
                }
                this.setMouseBg(this._ui.bg1);
                this.bindClose(this._ui.close1);
                this.gap = this._ui.item1.x - this._ui.item0.x - this._ui.item1.width;
                this.linqubtnCtl = new ButtonCtl(this._ui.linqubtn, new Laya.Handler(this, this.onLingQuClickHandler));
                this.delbtnCtl = new ButtonCtl(this._ui.delbtn, new Laya.Handler(this, this.onDelHandler));
                this.scrollView = new ScrollPanelControl();
                this.scrollView.init(this._ui.panel1);
                this.btnList.push(this.linqubtnCtl, this.delbtnCtl);
            }
        }
        onDelHandler() {
            this.onDel();
            this.Close();
        }
        onLingQuClickHandler() {
            this.onLingqu();
            this.Close();
        }
        onLingqu() {
            let req = new MailList_req();
            req.type = EMailReqType.LingQuOrRead;
            req.uid = this._data.uid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onDel() {
            let req = new MailList_req();
            req.type = EMailReqType.Del;
            req.uid = this._data.uid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setRead() {
            if (this._data.state == EMailStatus.notRead) {
                this.onLingqu();
            }
        }
        getTfHeight(str) {
            let _skin = Laya.Pool.getItemByClass(descClsKey, ui.views.mail.mail_tf_contentUI);
            _skin.descTf.text = str;
            let h = _skin.descTf.textField.textHeight;
            Laya.Pool.recover(descClsKey, _skin);
            return h;
        }
        onInit() {
            this.delbtnCtl.visible = false;
            this.linqubtnCtl.visible = false;
            this._data = this.Data;
            this.setRead();
            this._ui.title2.text = this._data.title;
            this.scrollView.clear();
            let str = this._data.content;
            this.scrollView.split([str], DescTfNode, this.getTfHeight(str));
            this.scrollView.end();
            for (let i = 0; i < this.slotList.length; i++) {
                let slot = this.slotList[i];
                slot.refresh(this._data.itemlist[i], this._data.state == EMailStatus.isLingqued);
            }
            this.onLayout(this._data.itemlist.length);
            switch (this._data.state) {
                case EMailStatus.isLingqued:
                    this.delbtnCtl.visible = true;
                    break;
                case EMailStatus.notLingqu:
                    this.linqubtnCtl.visible = true;
                    break;
            }
        }
        onLayout(count) {
            if (count > 4) {
                count = 4;
            }
            if (count > 0) {
                let offsetW = this._ui.item0.width + this.gap;
                let centerX = this._ui.width / 2;
                let w = (count * offsetW - this.gap) / 2;
                let x = centerX - w;
                for (let i = 0; i < count; i++) {
                    let cellSkin = this.slotList[i];
                    if (cellSkin) {
                        cellSkin.skin.x = x + offsetW * i;
                    }
                }
            }
        }
    }

    exports.MailShow = MailShow;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MailItemView extends ui.views.mail.mallitemUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClickHander);
        }
        onClickHander() {
            E.ViewMgr.Open(EViewType.MailShow, null, this._data);
        }
        clearUI() {
            this.newIcon.visible = false;
            this.lingquTf.visible = false;
            this.readIconed = false;
        }
        refresh() {
            this.clearUI();
            this._data = this.dataSource;
            switch (this._data.state) {
                case EMailStatus.notRead:
                    this.newIcon.visible = true;
                    break;
                case EMailStatus.isReaded:
                    this.readIconed = true;
                    break;
                case EMailStatus.isLingqued:
                    this.readIconed = true;
                    this.lingquTf.visible = true;
                    break;
            }
            this.tf1.text = this._data.title;
            this.timetf.text = TimeUtil.timestamtoTime(this._data.time * 1000, "/");
        }
        set readIconed(v) {
            if (v) {
                this.statusIcon.skin = `remote/mail/youjian.png`;
            }
            else {
                this.statusIcon.skin = `remote/mail/youjian1.png`;
            }
        }
    }

    exports.MailItemView = MailItemView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MailView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("mail.atlas");
        }
        onExit() {
            this.model.off(MainEvent.MailListUpdate, this, this.onMailListUpdate);
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = MainModel.Ins;
                this.UI = this._ui = new ui.views.mail.mail_viewUI();
                this.bindClose(this._ui.close1);
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onMailHandler);
                this._ui.list1.itemRender = MailItemView;
                this._ui.list1.array = [];
                this._ui.emptyImg.visible = false;
                this.btnList.push(ButtonCtl.Create(this._ui.delbtn, new Laya.Handler(this, this.onClickDelHandler)), ButtonCtl.Create(this._ui.yijianlinqu, new Laya.Handler(this, this.onYiJianHandler)));
            }
        }
        onYiJianHandler() {
            if (!MainModel.Ins.hasMailCanLingqu) {
                E.ViewMgr.ShowMidLabel(E.getLang("maillingqu"));
                return;
            }
            let req = new MailList_req();
            req.type = EMailReqType.LingQuOrRead;
            req.uid = 0;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onClickDelHandler() {
            if (MainModel.Ins.mailList.length <= 0) {
                E.ViewMgr.ShowMidLabel(E.getLang("maildel"));
                return;
            }
            let req = new MailList_req();
            req.type = EMailReqType.Del;
            req.uid = 0;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onMailHandler(item, index) {
            item.refresh();
        }
        onInit() {
            this.model.on(MainEvent.MailListUpdate, this, this.onMailListUpdate);
            let req = new MailList_req();
            req.uid = 0;
            req.type = EMailReqType.List;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onMailListUpdate() {
            this._ui.list1.array = this.model.mailList;
            this._ui.list1.scrollTo(0);
            if (this.model.mailList.length <= 0) {
                this._ui.emptyImg.visible = true;
            }
            else {
                this._ui.emptyImg.visible = false;
            }
        }
    }

    exports.MailView = MailView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class TriangleScrollPanelControl extends ScrollPanelControl {
        onScrollBarChange() {
            super.onScrollBarChange();
            this.showHideDown();
        }
        setTriangleIcon(down) {
            this.down = down;
            this.on(ScrollPanelControl.EVENT_END, this, this.onEndHandler);
        }
        onEndHandler() {
            this.showHideDown();
        }
        showHideDown() {
            let panel = this.getPanel();
            if (panel.destroyed) {
                return;
            }
            let h = this.getPanel().height;
            let allh = this.getAllHeight();
            if (h >= allh) {
                this.down.visible = false;
            }
            else {
                if (this.getPanel().vScrollBar.value == allh - h) {
                    this.down.visible = false;
                }
                else {
                    this.down.visible = true;
                }
            }
        }
    }

    exports.TriangleScrollPanelControl = TriangleScrollPanelControl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    const mClsKey = "NoticeNodeView";
    class PopNoticeVo {
    }
    class NoticeNodeView extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = mClsKey;
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, ui.views.main.ui_notice_itemUI);
            let vo = this.list[index];
            _skin.titleTf.text = vo.title;
            _skin.descTf.text = vo.content;
            _skin.height = _skin.descTf.y + _skin.descTf.textField.height;
            _skin.y = this.y;
            return _skin;
        }
        static getHeight(vo) {
            let _skin = Laya.Pool.getItemByClass(mClsKey, ui.views.main.ui_notice_itemUI);
            _skin.descTf.text = vo.content;
            return _skin.descTf.y + _skin.descTf.textField.height;
        }
    }
    class NoticePopView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this._curList = [];
            this._panelCtl = new TriangleScrollPanelControl();
        }
        onAddLoadRes() {
            this.addAtlas("main/main.atlas");
        }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_pop_noticeUI();
                this._panelCtl.init(this._ui.panel1);
                this._panelCtl.setTriangleIcon(this._ui.sanjiao);
                let _ckSkin = this._ui.ckTips;
                this._ckCtl = new CheckBoxCtl(_ckSkin);
                this._ckCtl.selectHander = new Laya.Handler(this, this.onCkSel);
                this._ui.ckTips.content.text = E.getLang("todaytip");
                this.bindClose(this._ui.close1);
            }
        }
        onCkSel() {
            this.curData.noticeSel.sel = this._ckCtl.selected;
        }
        onInit() {
            this.curData = this.Data;
            this._curList = this.curData.dataList;
            this._panelCtl.clear();
            for (let i = 0; i < this._curList.length; i++) {
                let cell = this._curList[i];
                let h = NoticeNodeView.getHeight(cell);
                this._panelCtl.split([cell], NoticeNodeView, h, 20);
            }
            this._panelCtl.end();
            if (this.curData.noticeSel) {
                this._ckCtl.visible = true;
                this._ckCtl.selected = this.curData.noticeSel.sel;
            }
            else {
                this._ckCtl.visible = false;
            }
        }
    }

    exports.NoticePopView = NoticePopView;
    exports.PopNoticeVo = PopNoticeVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class QuickQua {
    }
    class QuickSettingView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        getSelIndex() {
            let quaid = this.model.boxAutoVo.getQua_f_id();
            let datalist = this.selCtl.curDataList;
            for (let i = 0; i < datalist.length; i++) {
                let quaCfg = datalist[i];
                if (quaCfg.f_id == quaid) {
                    return i;
                }
            }
            return 0;
        }
        onFirstInit() {
            if (!this._ui) {
                this.UI = this._ui = new ui.views.main.ui_quick_settingUI();
                this.model = MainModel.Ins;
                this.startCtl = new ButtonCtl(this._ui.startBtn, new Laya.Handler(this, this.onStartHandler));
                this.selCtl = new SelectListCtl();
                this.btnList.push(new ButtonCtl(this._ui.close1, new Laya.Handler(this, this.Close)));
                this._ui.maskbg.on(Laya.Event.CLICK, this, this.Close);
                let cfg = FuncProxy.Ins.getCfgByFuncId(EFuncDef.HideChestAuto);
                this._ui.tips2.text = FuncProxy.Ins.f_info(cfg);
            }
        }
        initSelectUI() {
            this.selCtl.init(this._ui.sanjiao, this._ui.listarea, this._ui.listcontainer, this._ui.listtf, ui.views.main.ui_quick_setting_list_attrUI, MainModel.Ins.chestQuaSelectConfigList);
            this.selCtl.selectHandler = new Laya.Handler(this, this.onSelHandler);
        }
        onSelHandler() {
            this.upload();
        }
        onStartHandler() {
            if (this.model.mRoleData.boxCnt) {
                let curCfg = this.selCtl.selectVo;
                this.model.QuickStart(curCfg);
            }
            this.Close();
        }
        upload() {
            let vo = this.model.boxAutoVo;
            let quaCfg = this.selCtl.selectVo;
            vo.saveQua(quaCfg.f_id);
            vo.upload();
        }
        onExit() {
            this.upload();
        }
        onAddLoadRes() {
            this.addAtlas("main/chest.atlas");
        }
        onAddEventListener() {
        }
        onEnter() {
        }
        onInit() {
            this.initSelectUI();
            let _index = this.getSelIndex();
            this.selCtl.selectIndex(_index);
            this.selCtl.refresh();
        }
    }

    exports.QuickQua = QuickQua;
    exports.QuickSettingView = QuickSettingView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Subtitle_Content extends BaseCfg {
        GetTabelName() {
            return "t_Subtitle_Content";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Subtitle_Content();
            }
            return this._ins;
        }
        getContentTxt(f_subtitleid) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_subtitleid == f_subtitleid) {
                    return cfg;
                }
            }
        }
    }
    (function (ENoticeType) {
        ENoticeType[ENoticeType["PaoMaLight"] = 3] = "PaoMaLight";
        ENoticeType[ENoticeType["Notice"] = 1] = "Notice";
        ENoticeType[ENoticeType["GameRolling"] = 4] = "GameRolling";
    })(exports.ENoticeType || (exports.ENoticeType = {}));
    class RollingLampView extends ViewBase {
        constructor() {
            super(...arguments);
            this.PageType = EPageType.None;
            this.tw = new Laya.Tween();
        }
        onAddLoadRes() {
            this.addAtlas("main/main.atlas");
        }
        onExit() {
            this.resetX();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_paomaLightUI();
                this.model = MainModel.Ins;
                this._ui.paomaTf.cacheAs = "normal";
                let arr = System_RefreshTimeProxy.Ins.getVal(17).split("-");
                this._time = parseInt(arr[0]);
                this._stopTime = parseInt(arr[1]);
                this.resetX();
            }
        }
        resetX() {
            this._ui.container.x = this._ui.width + 100;
        }
        onInit() {
            Laya.timer.clearAll(this);
            this.showNotice();
        }
        showNotice() {
            if (this.model.pomaList.length <= 0) {
                this.Close();
            }
            else {
                this.resetX();
                this.doAction();
            }
        }
        doAction() {
            let cell = this.model.pomaList.shift();
            if (cell.type == exports.ENoticeType.GameRolling) {
                let cfg = t_Subtitle_Content.Ins.getContentTxt(cell.templateId);
                if (cfg) {
                    switch (cfg.f_subtitleid) {
                        case 2:
                            cell.params[1] = main.itemName(ItemProxy.Ins.getCfg(parseInt(cell.params[1])).f_name);
                            break;
                        case 4:
                            let f_Quality = "";
                            let cfg = EquipmentQualityProxy.Ins.GetDataById(parseInt(cell.params[1]));
                            if (cfg) {
                                f_Quality = cfg.f_EquipmentLevel;
                            }
                            cell.params[1] = f_Quality;
                            let mountCfg = Mount_ListProxy.Ins.getCfg(parseInt(cell.params[2]));
                            cell.params[2] = mountCfg.f_MountName;
                            break;
                        case 11:
                            let fjCfg = FuJiangListProxy.Ins.getCfgById(parseInt(cell.params[1]));
                            cell.params[1] = fjCfg.f_cheif;
                            break;
                    }
                    let str = StringUtil.format(cfg.f_subtitle, cell.params);
                    this._ui.paomaTf.text = str;
                }
                else {
                    this._ui.paomaTf.text = cell.templateId.toString();
                }
            }
            else {
                this._ui.paomaTf.text = cell.content;
            }
            this.tw.clear();
            this.tw.to(this._ui.container, { x: 0 }, this._time, Laya.Ease.linearNone, new Laya.Handler(this, this.onMoveNext));
        }
        onMoveNext() {
            Laya.timer.once(this._stopTime, this, this.next1);
        }
        next1() {
            this.tw.to(this._ui.container, { x: -this._ui.width }, this._time, Laya.Ease.linearNone, new Laya.Handler(this, this.onPlayEnd));
        }
        onPlayEnd() {
            this.showNotice();
        }
        SetCenter() {
            this.UI.anchorX = 0.5;
            this.UI.x = this.ViewParent.width >> 1;
            this.UI.y = MainModel.Ins.paomaGobalPos.y;
        }
    }

    exports.RollingLampView = RollingLampView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LabourConfigQua {
    }
    class t_Labour_Config_item extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Labour_Config_item();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Labour_Config_item";
        }
        getListByType(type) {
            let result = [];
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_type == type) {
                    result.push(cfg);
                }
            }
            return result;
        }
        quaList(type) {
            let _quaList = [];
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_type == type) {
                    let cell = _quaList.find(o => o.qua == cfg.f_itemQua);
                    if (cell) {
                        cell.cfgList.push(cfg);
                    }
                    else {
                        let o = new LabourConfigQua();
                        o.type = type;
                        o.cfgList = [];
                        o.qua = cfg.f_itemQua;
                        o.cfgList.push(cfg);
                        _quaList.push(o);
                    }
                }
            }
            return _quaList;
        }
    }
    class t_Labour_Config_Rate extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Labour_Config_Rate();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Labour_Config_Rate";
        }
        getRate(qua) {
            let l = this.List;
            let cell = l.find(o => o.f_itemQua == qua);
            if (cell) {
                return cell.f_itemRate;
            }
            return 0;
        }
    }
    class t_Labour_Shop extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Labour_Shop();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Labour_Shop";
        }
        getListByType(type) {
            let l = [];
            let l2 = this.List;
            for (let i = 0; i < l2.length; i++) {
                let cfg = l2[i];
                if (cfg.f_type == type) {
                    l.push(cfg);
                }
            }
            return l;
        }
    }
    class t_Labour_Pack extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Labour_Pack();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Labour_Pack";
        }
        getListByType(type) {
            let l = [];
            let l2 = this.List;
            for (let i = 0; i < l2.length; i++) {
                let cfg = l2[i];
                if (cfg.f_type == type) {
                    l.push(cfg);
                }
            }
            return l;
        }
    }
    class t_Labour_Config extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Labour_Config();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Labour_Config";
        }
        getByType(type) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let o = l[i];
                if (o.f_type == type) {
                    return o;
                }
            }
        }
    }
    class t_Labour_Shop_Free extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Labour_Shop_Free();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Labour_Shop_Free";
        }
        getListByType(type) {
            let l = [];
            let l2 = this.List;
            for (let i = 0; i < l2.length; i++) {
                let cfg = l2[i];
                if (cfg.f_type == type) {
                    l.push(cfg);
                }
            }
            return l;
        }
    }
    (function (EModelLabordayType) {
        EModelLabordayType[EModelLabordayType["Laborday"] = 0] = "Laborday";
        EModelLabordayType[EModelLabordayType["Children"] = 1] = "Children";
        EModelLabordayType[EModelLabordayType["Summer"] = 2] = "Summer";
        EModelLabordayType[EModelLabordayType["midAutumn"] = 3] = "midAutumn";
        EModelLabordayType[EModelLabordayType["luck"] = 4] = "luck";
        EModelLabordayType[EModelLabordayType["yuanxiao"] = 5] = "yuanxiao";
    })(exports.EModelLabordayType || (exports.EModelLabordayType = {}));

    exports.LabourConfigQua = LabourConfigQua;
    exports.t_Labour_Config = t_Labour_Config;
    exports.t_Labour_Config_Rate = t_Labour_Config_Rate;
    exports.t_Labour_Config_item = t_Labour_Config_item;
    exports.t_Labour_Pack = t_Labour_Pack;
    exports.t_Labour_Shop = t_Labour_Shop;
    exports.t_Labour_Shop_Free = t_Labour_Shop_Free;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LabordayExchange extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
        }
        onExit() {
            MainModel.Ins.off(MainEvent.ValChange, this, this.onRefreshHandler);
            this.model.off(LabordayBaseModel.EVENT_TICKET_COUNT, this, this.onRefreshHandler);
            this._timeCtl.stop();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.laborday.ui_laborday_exchangeUI();
                this.btnCtl = ButtonCtl.Create(this._ui.linqubtn, new Laya.Handler(this, this.onExchangeEvt));
                this.bindClose(this._ui.close1);
                this._timeCtl = new TimeCtlV2(this._ui.title2, "{0}后结束");
            }
        }
        onExchangeEvt() {
            if (!this.model.isOpen) {
                E.ViewMgr.ShowMidError(E.getLang("activityend"));
                return;
            }
            if (!MainModel.Ins.isItemEnoughSt(this.cfg.f_exchangeCost1, true)) {
                return;
            }
            let req = new LabourExchange_req();
            req.type = this.type;
            SocketMgr.Ins.SendMessageBin(req);
        }
        get type() {
            return this.model.type;
        }
        onInit() {
            this.model = this.Data;
            this.cfg = t_Labour_Config.Ins.getByType(this.type);
            this._ui.descTf.text = E.getLang(this.model.descid);
            this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
            this._timeCtl.start(this.model.subTime);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onRefreshHandler);
            this.model.on(LabordayBaseModel.EVENT_TICKET_COUNT, this, this.onRefreshHandler);
            this.onRefreshHandler();
        }
        onRefreshHandler() {
            let rItem = ItemViewFactory.convertItem(this.cfg.f_exchangeRwards);
            ItemViewFactory.refreshSlot(this._ui.item0, rItem);
            let lItem = ItemViewFactory.convertItem(this.cfg.f_exchangeCost1);
            ItemViewFactory.refreshSlot(this._ui.item1, lItem);
            let count = MainModel.Ins.mRoleData.getVal(lItem.cfgId);
            this._ui.tf3.text = `${count}/${lItem.count}`;
            this._ui.botDescTf.text = E.getLang("labordayget") + this.model.ticketCount + '/' + this.cfg.f_Specialpara1;
            this._ui.dotimg1.visible = this.model.mExchange;
        }
        onTimeComplete() {
            this._ui.title2.text = E.getLang("labordayend");
        }
    }

    exports.LabordayExchange = LabordayExchange;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LabordayMainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("laborday.atlas");
            this.addAtlas("huodong.atlas");
            this.animURL = "o/spine/51ndj/51ndj";
        }
        onExit() {
            this.model.off(LabordayBaseModel.EVENT_TOY_UPDATE, this, this.onToyUpdate);
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.onRedUpdate);
            this.model.off(LabordayBaseModel.EVENT_PROTECT_CHANGE, this, this.onProtectEvt);
            this._ui.icon1.skin = "";
            this._statrCtl.mouseEnable = true;
        }
        onFirstInit() {
            if (!this.UI) {
                this.initUI();
                this.setMouseBg(this._ui.bg1);
                ButtonCtl.Create(this._ui.shopBtn, new Laya.Handler(this, this.onShop));
                ButtonCtl.Create(this._ui.eggBtn, new Laya.Handler(this, this.onExchange));
                ButtonCtl.Create(this._ui.labordayBtn, new Laya.Handler(this, this.onPackageHander));
                ButtonCtl.Create(this._ui.watchBtn, new Laya.Handler(this, this.onWatchHandler));
                this._statrCtl = ButtonCtl.Create(this._ui.startBtn, new Laya.Handler(this, this.onStartHandler));
                this.bindClose(this._ui.close1);
                this.costCfg = t_Labour_Config.Ins.getByType(this.model.type);
                this._ui.lmoneyIcon.skin = IconUtils.getIcon(this.model.pieces);
                this._ui.shouhun1.skin = IconUtils.getIcon(this.model.coin);
                this.needItemVo = ItemViewFactory.convertItem(this.costCfg.f_PreCost);
                this._ui.moneyIcon.skin = this.needItemVo.getIcon();
                this.effect = new SimpleEffect(this._ui.animCon, this.animURL);
                this._ui.lmoneybg.visible = false;
                this.initLb();
            }
        }
        initLb() {
            if (!StringUtil.IsNullOrEmpty(this.model.markTitle)) {
                this._ui.tf2.text = this.model.markTitle;
            }
            if (!StringUtil.IsNullOrEmpty(this.model.packTitle)) {
                this._ui.tf4.text = this.model.packTitle;
            }
            if (!StringUtil.IsNullOrEmpty(this.model.imgTitle) && typeof this._ui['imgTitle'] != "undefined") {
                this._ui['imgTitle'].skin = this.model.imgTitle;
            }
            if (!StringUtil.IsNullOrEmpty(this.model.mainDesc)) {
                this._ui.title1.text = this.model.mainDesc;
            }
        }
        initUI() {
            this.model = LabordayModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_laborday_viewUI();
            this.packageType = EViewType.LabordayPackage;
            this.shopType = EViewType.LabordayShop;
        }
        onStartHandler() {
            if (!this.model.isOpen) {
                E.ViewMgr.ShowMidError(E.getLang("activityend"));
                return;
            }
            if (MainModel.Ins.isItemEnoughSt(this.costCfg.f_PreCost, true)) {
                this._statrCtl.mouseEnable = false;
                Laya.timer.once(1300, this, this.playEnd);
                this.effect.play(1, false);
            }
        }
        playEnd() {
            this._statrCtl.mouseEnable = true;
            let req = new LabourCapsuleToys_req();
            req.type = this.model.type;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onWatchHandler() {
            E.ViewMgr.Open(EViewType.LabordayReward, null, this.model.type);
        }
        onPackageHander() {
            E.ViewMgr.Open(this.packageType);
        }
        onShop() {
            E.ViewMgr.Open(this.shopType);
        }
        onExchange() {
            E.ViewMgr.Open(EViewType.LabordayExchange, null, this.model);
        }
        onInit() {
            MainModel.Ins.on(MainEvent.ValChange, this, this.onValChange);
            this.model.on(LabordayBaseModel.EVENT_TOY_UPDATE, this, this.onToyUpdate);
            this.model.on(LabordayBaseModel.EVENT_PROTECT_CHANGE, this, this.onProtectEvt);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onRedUpdate);
            this._statrCtl.mouseEnable = true;
            Laya.timer.clear(this, this.playEnd);
            this.effect.play(0, true);
            this.onValChange();
            this.onRedUpdate();
            this.onProtectEvt();
        }
        onProtectEvt() {
            this._ui.tips2.visible = this._ui.tips1.visible = false;
            this._ui.tf9.text = this.model.leftCount + "";
            if (this.model.mBuyFinish) {
                this._ui.tips2.visible = true;
            }
            else {
                this._ui.tips1.visible = true;
            }
        }
        onRedUpdate() {
            this._ui.dotimg2.visible = this.model.freePackage;
        }
        onValChange() {
            this._ui.lmoneyTf.text = StringUtil.val2m(MainModel.Ins.mRoleData.getVal(this.model.pieces));
            this._ui.shtf1.text = StringUtil.val2m(MainModel.Ins.mRoleData.getVal(this.model.coin));
            let have = MainModel.Ins.mRoleData.getVal(this.needItemVo.cfgId);
            let cfg = this.costCfg;
            let _showCount = this.needItemVo.count;
            let costCount = parseInt(cfg.f_exchangeCost1.split("-")[1]);
            if (have >= costCount) {
                _showCount = costCount;
            }
            this._ui.moneyTf.text = _showCount + "";
            this._ui.dotimg1.visible = this.model.mExchange;
            this.onProtectEvt();
        }
        onToyUpdate() {
            let cell = this.model.curReward;
            if (cell) {
                let icon = "";
                if (cell.type == 1) {
                    let horseCfg = Mount_ListProxy.Ins.getCfg(cell.id);
                    icon = IconUtils.getHorseIcon(horseCfg.f_MountID);
                }
                else {
                    icon = IconUtils.getIcon(cell.id);
                }
            }
        }
    }

    exports.LabordayMainView = LabordayMainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class PackageItemCtl {
        static onOkHandler(data) {
            if (data.cfg.f_PurchaseID == 0) {
                let req = new LabourPackGet_req();
                req.id = data.cfg.f_id;
                let type = data.model.type;
                req.type = type;
                SocketMgr.Ins.SendMessageBin(req);
            }
            else {
                ActivityModel.Ins.recharge(data.cfg.f_PurchaseID);
            }
        }
        static refresh(skin) {
            let cfg = skin.dataSource;
            let model = getModelLaborDay(cfg.f_type);
            if (!skin.btn1.dataSource) {
                skin.btn1.dataSource = {};
                let _btnData = skin.btn1.dataSource;
                _btnData.btnCtl = ButtonCtl.Create(skin.btn1, new Laya.Handler(this, this.onOkHandler));
            }
            let _btnData = skin.btn1.dataSource;
            _btnData.cfg = cfg;
            _btnData.model = model;
            _btnData.btnCtl.data = _btnData;
            skin.dotimg.visible = false;
            let _activityVo = ActivityModel.Ins.getVo(model.activteType);
            _btnData.btnCtl.grayMouseDisable = false;
            let _statusCount = 0;
            if (_activityVo) {
                _statusCount = _activityVo.getParam1(cfg.f_id);
            }
            skin.tf1.text = cfg.f_name;
            ItemViewFactory.renderItemSlots(skin.rewardCon, cfg.f_Item, null, 1, "left");
            if (cfg.f_PurchaseID == 0) {
                if (_statusCount > 0) {
                    _btnData.btnCtl.grayMouseDisable = true;
                }
                else {
                    skin.dotimg.visible = true;
                }
                skin.moneyTf.text = E.getLang("Free");
                skin.xiangoutf.text = "";
            }
            else {
                skin.xiangoutf.text = `限购:${(_statusCount)}/${cfg.f_BuyTimes}`;
                let purchaseCfg = t_Purchase_PriceProxy.Ins.GetDataById(cfg.f_PurchaseID);
                skin.moneyTf.text = `${StringUtil.moneyCv(purchaseCfg.f_price)}元`;
            }
        }
    }
    class LabordayPackageView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.onRefresh);
            this._timeCtl.stop();
        }
        onFirstInit() {
            if (!this.UI) {
                this.reg();
                this.bindClose(this._ui.close1);
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onLabordayPackageItem);
                this._timeCtl = new TimeCtlV2(this._ui.timeTf, "{0}后结束");
                if (!StringUtil.IsNullOrEmpty(this.model.packTitle)) {
                    this._ui.title2.text = this.model.packTitle;
                }
            }
        }
        reg() {
            this.model = LabordayModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_layorday_packageUI();
            this._ui.list1.itemRender = ui.views.laborday.ui_layorday_package_itemUI;
        }
        onLabordayPackageItem(item) {
            PackageItemCtl.refresh(item);
        }
        onInit() {
            this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
            this._timeCtl.start(this.model.subTime);
            this._ui.list1.array = t_Labour_Pack.Ins.getListByType(this.model.type);
            this._ui.list1.scrollTo(0);
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onRefresh);
        }
        onRefresh() {
            this._ui.list1.refresh();
        }
        onTimeComplete() {
            this._ui.timeTf.text = E.getLang("labordayend");
        }
    }

    exports.LabordayPackageView = LabordayPackageView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    let keyCls$1 = "LabordayNodeSkin";
    let nodeKey$1 = "LabordayCellItem";
    let rowMax$1 = 4;
    class LaboradyItemShowSkin extends ui.views.laborday.ui_layorday_reward_itemUI {
    }
    class LabordayCellItem extends ui.views.laborday.ui_layorday_reward_cell_showUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onSlotClickHandler);
        }
        onSlotClickHandler(e) {
            if (!this.cfg) {
                return;
            }
            if (this.cfg.f_itemtype == 0) {
                e.stopPropagation();
                let _vo = ItemViewFactory.convertItem(this.cfg.f_item);
                MainModel.Ins.showSmallTips(_vo.getName(), _vo.getDesc(), this);
            }
            else if (this.cfg.f_itemtype == 1) {
                let _tipsVo = new LabourZuoqiTipsVo(this.cfg.f_MountTips);
                E.ViewMgr.Open(EViewType.RideBuyTips, null, _tipsVo);
            }
        }
        reset() {
            this.cfg = null;
        }
    }
    class LabordayNode extends RowMoveBaseNode {
        constructor() {
            super(...arguments);
            this.clsKey = keyCls$1;
        }
        createNode(index) {
            let _skin = Laya.Pool.getItemByClass(this.clsKey, LaboradyItemShowSkin);
            let data = this.list[index];
            _skin.tf1.text = E.getLang("labordayqua", EquipmentQualityProxy.Ins.getByQua(data.qua).f_EquipmentLevel);
            let rate = t_Labour_Config_Rate.Ins.getRate(data.qua);
            _skin.gailvTf.text = E.getLang("labordayrate") + parseFloat((rate / 100).toFixed(2)) + "%";
            while (_skin.con1.numChildren) {
                let cell = _skin.con1.getChildAt(0);
                cell.removeSelf();
                Laya.Pool.recover(nodeKey$1, cell);
            }
            let max = rowMax$1;
            let ox = 0;
            let oy = 0;
            let height = 0;
            for (let i = 0; i < data.cfgList.length; i++) {
                let cell = Laya.Pool.getItemByClass(this.clsKey, LabordayCellItem);
                cell.reset();
                let cfg = data.cfgList[i];
                cell.cfg = cfg;
                if (cfg.f_itemtype == 1) {
                    let horseCfg = Mount_ListProxy.Ins.getCfg(parseInt(cfg.f_item));
                    cell.icon.skin = IconUtils.getHorseIcon(horseCfg.f_MountID);
                    cell.tf1.text = "";
                    cell.quality.skin = IconUtils.getQuaIcon(horseCfg.f_Quality);
                }
                else {
                    let _itemVo = ItemViewFactory.convertItem(cfg.f_item);
                    cell.icon.skin = _itemVo.getIcon();
                    cell.tf1.text = _itemVo.count.toString();
                    cell.quality.skin = IconUtils.getQuaIcon(cfg.f_itemQua);
                }
                if (cfg.f_GetTimes) {
                    let model = getModelLaborDay(data.type);
                    let hasCount = model.getLimitCount(cfg.f_id);
                    cell.cntTf.text = E.getLang("xiangliang") + `${hasCount}/${cfg.f_GetTimes}`;
                }
                else {
                    cell.cntTf.text = "不限量";
                }
                if (i % max == 0) {
                    ox = 0;
                    oy += cell.height;
                }
                cell.x = ox;
                cell.y = oy - cell.height;
                ox += cell.width;
                height = cell.y + cell.height;
                _skin.con1.addChild(cell);
            }
            _skin.bg1.height = height + 35;
            _skin.hitArea = new Laya.Rectangle(0, 0, _skin.bg1.width, _skin.bg1.height + _skin.bg1.y);
            _skin.y = this.y;
            return _skin;
        }
        static getHeight(count) {
            let _skin = Laya.Pool.getItemByClass(keyCls$1, LaboradyItemShowSkin);
            let cell = Laya.Pool.getItemByClass(nodeKey$1, LabordayCellItem);
            return _skin.con1.y + cell.height * Math.ceil(count / rowMax$1);
        }
    }
    class LabordayShowReward extends ViewBase {
        constructor() {
            super(...arguments);
            this._panelCtl = new ScrollPanelControl();
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.laborday.ui_layorday_rewardUI();
                this.bindClose(this._ui.close1);
                this._panelCtl.init(this._ui.panel1);
            }
        }
        onInit() {
            this._panelCtl.clear();
            let type = this.Data;
            let quaList = t_Labour_Config_item.Ins.quaList(type);
            for (let i = 0; i < quaList.length; i++) {
                let data = quaList[i];
                let h = LabordayNode.getHeight(data.cfgList.length);
                this._panelCtl.split([data], LabordayNode, h);
            }
            this._panelCtl.end();
        }
    }

    exports.LabordayShowReward = LabordayShowReward;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MidAutumnShopItem extends ui.views.laborday.ui_midautumn_qqItemUI {
        constructor() {
            super();
            this.item01.on(Laya.Event.CLICK, this, this.onClick);
        }
        onClick() {
            if (!this._data)
                return;
            if (!this._model.isOpen) {
                E.ViewMgr.ShowMidError(E.getLang("activityend"));
                return;
            }
            let id = parseInt(this._data.f_GoodsID.split("-")[0]);
            let num = parseInt(this._data.f_GoodsID.split("-")[1]);
            MainModel.Ins.buy(this._needId, this._needCount, id, num, new Laya.Handler(this, this.onOkHandler), EBuyType.Item, this._data.f_isquick == 1);
        }
        onOkHandler() {
            if (!this._data)
                return;
            if (this._data.f_GoodsLimit <= 0) ;
            else {
                let count = this._model.getBuyTime1(this._data.f_id);
                if (count >= this._data.f_GoodsLimit) {
                    E.ViewMgr.ShowMidError(E.getLang("labordayismax"));
                    return;
                }
            }
            if (MainModel.Ins.isItemEnoughSt(this._data.f_Price, true)) {
                let req = new LabourShopFree_req();
                req.type = this._model.type;
                req.id = this._data.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this._model = getModelLaborDay(this._data.f_type);
            if (value.f_GoodsLimit <= 0) {
                this.xiangouTf.text = "";
            }
            else {
                let count = this._model.getBuyTime1(value.f_id);
                this.xiangouTf.text = E.getLang("labordaylimit") + `${count}/${value.f_GoodsLimit}`;
            }
            this.item01.tf1.text = "";
            this.item01.icon.skin = "";
            this.item01.quality.skin = "";
            let name = "";
            let itemVo = ItemViewFactory.convertItem(value.f_GoodsID);
            this.item01.icon.skin = IconUtils.getIconByCfgId(itemVo.cfgId);
            this.item01.tf1.text = itemVo.count.toString();
            this.item01.quality.skin = IconUtils.getQuaIcon(itemVo.cfg.f_qua);
            name = itemVo.getName();
            let price = value.f_Price.split("-");
            this._needId = parseInt(price[0]);
            this.huobi.skin = IconUtils.getIcon(this._needId);
            this._needCount = parseInt(price[1]);
            this.shtf1.text = StringUtil.val2m(this._needCount);
            this.nameTf.text = name;
        }
    }

    exports.MidAutumnShopItem = MidAutumnShopItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MidAutumnShopView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        ;
        onAddLoadRes() { }
        onFirstInit() {
            if (!this.UI) {
                this.model = MidAutumnModel.Ins;
                this.UI = this._ui = new ui.views.laborday.ui_midautumn_maviewUI();
                this._ui.list1.itemRender = MidAutumnShopItem;
                this.moneyType = this.model.pieces1;
                this.bindClose(this._ui.close1);
                this._ui.shouhun1.skin = IconUtils.getIcon(this.moneyType);
                this._timeCtl = new TimeCtlV2(this._ui.timeTf, "{0}后结束");
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onRenderHandler(item) {
            item.setData(item.dataSource);
        }
        onShopView() {
            this._ui.list1.refresh();
        }
        onInit() {
            this.model.on(LabordayBaseModel.EVENT_SHOP_UPDATE, this, this.onShopView);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onMoneyChange);
            this._ui.list1.array = t_Labour_Shop_Free.Ins.getListByType(this.model.type);
            this.onMoneyChange();
            this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
            this._timeCtl.start(this.model.subTime);
        }
        onExit() {
            MainModel.Ins.off(MainEvent.ValChange, this, this.onMoneyChange);
            this.model.off(LabordayBaseModel.EVENT_SHOP_UPDATE, this, this.onShopView);
            this._timeCtl.stop();
        }
        onTimeComplete() {
            this._ui.timeTf.text = E.getLang("labordayend");
        }
        onMoneyChange() {
            this._ui.huobiTf.text = StringUtil.val2m(MainModel.Ins.mRoleData.getVal(this.moneyType));
        }
    }

    exports.MidAutumnShopView1 = MidAutumnShopView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LabordayBaseModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.activteType = EActivityType.Laborday;
            this._shopList = [];
            this.shopDatalist = [];
            this.redDatalist = [];
            this.ticketCount = 0;
            this.leftCount = 0;
        }
        get pieces() {
            return t_Labour_Config.Ins.getByType(this.type).f_shopicon;
        }
        get pieces1() {
            return t_Labour_Config.Ins.getByType(this.type).f_shopicon_1;
        }
        get coin() {
            return t_Labour_Config.Ins.getByType(this.type).f_mainicon;
        }
        initMsg() {
            this.regUI();
            E.MsgMgr.AddMsg(MSGID.LabourShopInit, this.onLabourShopInit, this);
            E.MsgMgr.AddMsg(MSGID.LabourShopChange, this.onLabourShopChange, this);
            E.MsgMgr.AddMsg(MSGID.LabourCapsuleToys, this.onLabourCapsuleToys, this);
            E.MsgMgr.AddMsg(MSGID.LabourTicket, this.onLabourTicket, this);
            E.MsgMgr.AddMsg(MSGID.LabourItemRedChange, this.onLabourItemRedChange, this);
            E.MsgMgr.AddMsg(MSGID.LabourBaodiLeft, this.onLabourBaodiLeft, this);
            E.MsgMgr.AddMsg(MSGID.LabourShopFreeChange, this.LabourShopFreeChange, this);
            MainModel.Ins.on(MainEvent.ValChange, this, this.updateRed);
        }
        regUI() {
            this.funcid = EFuncDef.Laborday;
            this.Reg(new LabordayMainView(EViewType.Laborday));
            this.Reg(new LabordayShowReward(EViewType.LabordayReward));
            this.Reg(new LabordayShopView(EViewType.LabordayShop));
            this.Reg(new LabordayPackageView(EViewType.LabordayPackage));
            this.Reg(new LabordayExchange(EViewType.LabordayExchange));
        }
        onInitCallBack() {
            this._shopList = [];
            this.curReward = null;
            this.redDatalist = [];
            this.leftCount = 0;
            this.shopDatalist = [];
        }
        onLabourShopChange(revc) {
            if (revc.type == this.type) {
                let l = revc.datalist;
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    let a = this._shopList.find(o => o.id == cell.id);
                    if (a) {
                        a.num = cell.num;
                    }
                    else {
                        this._shopList.push(cell);
                    }
                }
                this.event(LabordayBaseModel.EVENT_SHOP_UPDATE);
            }
        }
        onLabourBaodiLeft(revc) {
            if (revc.type == this.type) {
                this.leftCount = revc.baodi;
                LogSys$1.Log("revc.baodi:" + revc.baodi);
                this.event(LabordayBaseModel.EVENT_PROTECT_CHANGE);
            }
        }
        LabourShopFreeChange(value) {
            if (value.type == this.type) {
                let l = value.datalist;
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    let a = this.shopDatalist.find(o => o.id == cell.id);
                    if (a) {
                        a.num = cell.num;
                    }
                    else {
                        this.shopDatalist.push(cell);
                    }
                }
                this.event(LabordayBaseModel.EVENT_SHOP_UPDATE);
            }
        }
        onLabourItemRedChange(revc) {
            if (revc.type == this.type) {
                for (let i = 0; i < revc.redDatalist.length; i++) {
                    let cell = revc.redDatalist[i];
                    let o1 = this.redDatalist.find(o => o.id == cell.id);
                    if (o1) {
                        o1.num = cell.num;
                    }
                    else {
                        this.redDatalist.push(cell);
                    }
                }
                this.event(LabordayBaseModel.EVENT_ITEM_RED_CHANGE);
            }
        }
        onLabourTicket(revc) {
            if (revc.type == this.type) {
                this.ticketCount = revc.num;
                this.event(LabordayBaseModel.EVENT_TICKET_COUNT);
            }
        }
        onLabourCapsuleToys(revc) {
            if (revc.type == this.type) {
                this.curReward = revc.datalist[0];
                this.event(LabordayBaseModel.EVENT_TOY_UPDATE);
            }
        }
        onLabourShopInit(revc) {
            if (revc.type == this.type) {
                this.redDatalist = revc.redDatalist;
                this._shopList = revc.datalist;
                this.shopDatalist = revc.datalistFree;
                this.leftCount = revc.baodi;
                LogSys$1.Log("onLabourShopInit revc.baodi:" + revc.baodi);
                this.ticketCount = revc.todayTicketNum;
            }
        }
        updateRed() {
            let red = false;
            if (this.isOpen) {
                if (this.freePackage || this.mExchange) {
                    red = true;
                }
            }
            MainModel.Ins.funcSetRed(this.funcid, red);
        }
        get freePackage() {
            let _activityVo = ActivityModel.Ins.getVo(this.activteType);
            if (_activityVo && _activityVo.isOpen) {
                let l = _activityVo.dataList;
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    let cfg = t_Labour_Pack.Ins.GetDataById(cell.id);
                    if (cfg.f_PurchaseID == 0) {
                        if (cell.param1 == 0) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        get isOpen() {
            if (MainModel.Ins.verify) {
                return false;
            }
            let _activityVo = ActivityModel.Ins.getVo(this.activteType);
            if (_activityVo && _activityVo.isOpen) {
                if (parseInt(_activityVo.cfg.f_p2) == this.type) {
                    return true;
                }
            }
            return false;
        }
        get mExchange() {
            if (this.isOpen) {
                let cfg = t_Labour_Config.Ins.getByType(this.type);
                let lItem = ItemViewFactory.convertItem(cfg.f_exchangeCost1);
                let count = MainModel.Ins.mRoleData.getVal(lItem.cfgId);
                return count >= lItem.count;
            }
            return false;
        }
        getLimitCount(fid) {
            let cell = this.redDatalist.find(o => o.id == fid);
            if (cell) {
                return cell.num;
            }
            return 0;
        }
        get configItems() {
            if (!this._configItemList) {
                this._configItemList = t_Labour_Config_item.Ins.getListByType(this.type);
            }
            return this._configItemList;
        }
        get mBuyFinish() {
            let qua = 8;
            let l = this.configItems;
            let allCount = 0;
            let itemList = [];
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_itemQua == qua) {
                    allCount += cfg.f_GetTimes;
                    itemList.push(cfg.f_id);
                }
            }
            let myCount = 0;
            if (this.redDatalist) {
                for (let i = 0; i < this.redDatalist.length; i++) {
                    let cell = this.redDatalist[i];
                    if (itemList.indexOf(cell.id) != -1) {
                        myCount += cell.num;
                    }
                }
            }
            return myCount >= allCount;
        }
        getBuyTime(fid) {
            let cell = this._shopList.find(o => o.id == fid);
            if (cell) {
                return cell.num;
            }
            return 0;
        }
        get subTime() {
            let _activityVo = ActivityModel.Ins.getVo(this.activteType);
            if (_activityVo && _activityVo.isOpen) {
                let sub = _activityVo.endTime - TimeUtil.serverTime;
                if (sub < 0) {
                    sub = 0;
                }
                return sub;
            }
            return 0;
        }
        getBuyTime1(fid) {
            let cell = this.shopDatalist.find(o => o.id == fid);
            if (cell) {
                return cell.num;
            }
            return 0;
        }
    }
    LabordayBaseModel.EVENT_SHOP_UPDATE = "EVENT_SHOP_UPDATE";
    LabordayBaseModel.EVENT_TOY_UPDATE = "EVENT_TOY_UPDATE";
    LabordayBaseModel.EVENT_TICKET_COUNT = "EVENT_TICKET_COUNT";
    LabordayBaseModel.EVENT_ITEM_RED_CHANGE = "EVENT_ITEM_RED_CHANGE";
    LabordayBaseModel.EVENT_PROTECT_CHANGE = "EVENT_BAODI_CHANGE";
    class LabordayModel extends LabordayBaseModel {
        constructor() {
            super(...arguments);
            this.type = EModelLabordayType.Laborday;
            this.redKey = "l22";
            this.descid = "labordaydesc";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new LabordayModel();
            }
            return this._ins;
        }
    }
    class ChildrenModel extends LabordayBaseModel {
        constructor() {
            super(...arguments);
            this.redKey = "l23";
            this.type = EModelLabordayType.Children;
            this.descid = "childrendesc";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ChildrenModel();
            }
            return this._ins;
        }
        regUI() {
            this.funcid = EFuncDef.ChildrenHD;
            this.Reg(new ChildrenView(EViewType.Children));
            this.Reg(new ChildrenPackageView(EViewType.ChildPackage));
            this.Reg(new ChildrenShopView(EViewType.ChildrenShop));
        }
    }
    class SummerModel extends LabordayBaseModel {
        constructor() {
            super(...arguments);
            this.redKey = "l28";
            this.type = EModelLabordayType.Summer;
            this.descid = "summerdesc";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new SummerModel();
            }
            return this._ins;
        }
        regUI() {
            this.funcid = EFuncDef.Summer;
            this.Reg(new SummerView(EViewType.Summer));
            this.Reg(new SummerPackageView(EViewType.SummerPackage));
            this.Reg(new SummerShopView(EViewType.SummerShop));
        }
    }
    class MidAutumnModel extends LabordayBaseModel {
        constructor() {
            super(...arguments);
            this.redKey = "l28";
            this.type = EModelLabordayType.midAutumn;
            this.descid = "midautumndesc";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new MidAutumnModel();
            }
            return this._ins;
        }
        regUI() {
            this.funcid = EFuncDef.midAutumn;
            this.Reg(new MidAutumnView(EViewType.midAutumn));
            this.Reg(new MidAutumnPackageView(EViewType.midAutumnPackage));
            this.Reg(new MidAutumnShopView(EViewType.midAutumnrenShop));
            this.Reg(new MidAutumnShopView1(EViewType.midAutumnrenShop1));
        }
    }
    class LuckModel extends LabordayBaseModel {
        constructor() {
            super(...arguments);
            this.funcid = EFuncDef.Luck;
            this.descid = "luckdesc";
            this.type = EModelLabordayType.luck;
            this.markTitle = "扭蛋商店";
            this.packTitle = "扭蛋礼包";
            this.mainDesc = "每次抽取必得10个幸运勋章";
            this.imgTitle = "remote/laborday/xynd.png";
        }
        regUI() {
            this.Reg(new LuckView(EViewType.Luck));
            this.Reg(new LuckPackageView(EViewType.LuckPackage));
            this.Reg(new LuckShopView(EViewType.LuckShop));
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new LuckModel();
            }
            return this._ins;
        }
    }
    class YuanXiaoModel extends LabordayBaseModel {
        constructor() {
            super(...arguments);
            this.type = EModelLabordayType.yuanxiao;
            this.descid = "yuanxiaodesc";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new YuanXiaoModel();
            }
            return this._ins;
        }
        regUI() {
            this.funcid = EFuncDef.yuanxiao;
            this.Reg(new YuanXiaoView(EViewType.yuanxiao));
            this.Reg(new YuanXiaoPackageView(EViewType.yuanxiaoPackage));
            this.Reg(new YuanXiaoShopView(EViewType.yuanxiaoShop));
        }
    }
    function getModelLaborDay(type) {
        switch (type) {
            case EModelLabordayType.Laborday:
                return LabordayModel.Ins;
            case EModelLabordayType.Children:
                return ChildrenModel.Ins;
            case EModelLabordayType.Summer:
                return SummerModel.Ins;
            case EModelLabordayType.midAutumn:
                return MidAutumnModel.Ins;
            case EModelLabordayType.luck:
                return LuckModel.Ins;
            case EModelLabordayType.yuanxiao:
                return YuanXiaoModel.Ins;
            default:
                throw Error("please set model!");
        }
    }

    exports.ChildrenModel = ChildrenModel;
    exports.LabordayBaseModel = LabordayBaseModel;
    exports.LabordayModel = LabordayModel;
    exports.LuckModel = LuckModel;
    exports.MidAutumnModel = MidAutumnModel;
    exports.SummerModel = SummerModel;
    exports.YuanXiaoModel = YuanXiaoModel;
    exports.getModelLaborDay = getModelLaborDay;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ELabodayType) {
        ELabodayType[ELabodayType["EquipStyle"] = 2] = "EquipStyle";
        ELabodayType[ELabodayType["Item"] = 3] = "Item";
    })(exports.ELabodayType || (exports.ELabodayType = {}));
    class MarkItemCtl {
        static refresh(skin) {
            let cfg = skin.dataSource;
            let model = getModelLaborDay(cfg.f_type);
            if (cfg.f_GoodsLimit <= 0) {
                skin.xiangouTf.text = "";
            }
            else {
                let count = model.getBuyTime(cfg.f_id);
                skin.xiangouTf.text = E.getLang("labordaylimit") + `${count}/${cfg.f_GoodsLimit}`;
            }
            skin.item01.tf1.text = "";
            skin.item01.icon.skin = "";
            skin.item01.quality.skin = "";
            let name = "";
            switch (cfg.f_GoodsType) {
                case exports.ELabodayType.EquipStyle:
                    let arr1 = cfg.f_GoodsID.split("-");
                    let part = parseInt(arr1[0]);
                    let style = parseInt(arr1[1]);
                    let quaSkin = IconUtils.defaultIcon;
                    if (cfg.f_GoodsQua) {
                        quaSkin = IconUtils.getQuaIcon(cfg.f_GoodsQua);
                    }
                    skin.item01.quality.skin = quaSkin;
                    skin.item01.icon.skin = ItemViewFactory.getEquipIcon(part, style);
                    let nameArr = cfg.f_Tips.split("-");
                    if (nameArr.length >= 2) {
                        name = nameArr[0];
                    }
                    break;
                case exports.ELabodayType.Item:
                    let itemVo = ItemViewFactory.convertItem(cfg.f_GoodsID);
                    skin.item01.icon.skin = IconUtils.getIconByCfgId(itemVo.cfgId);
                    skin.item01.tf1.text = itemVo.count.toString();
                    skin.item01.quality.skin = IconUtils.getQuaIcon(itemVo.cfg.f_qua);
                    name = itemVo.getName();
                    break;
            }
            let price = cfg.f_Price.split("-");
            let needId = parseInt(price[0]);
            skin.huobi.skin = IconUtils.getIcon(needId);
            let needCount = parseInt(price[1]);
            skin.shtf1.text = StringUtil.val2m(needCount);
            skin.nameTf.text = name;
            skin.item01.on(Laya.Event.CLICK, this, this.onClick, [model, cfg, needId, needCount]);
        }
        static onClick(model, cfg, needId, needCount) {
            if (!model.isOpen) {
                E.ViewMgr.ShowMidError(E.getLang("activityend"));
                return;
            }
            MainModel.Ins.buy(needId, needCount, cfg.f_id, 0, new Laya.Handler(this, this.onOkHandler, [model, cfg]), EBuyType.LabourShop, cfg.f_isquick == 1);
        }
        static onOkHandler(model, cfg) {
            if (cfg.f_GoodsLimit <= 0) ;
            else {
                let count = model.getBuyTime(cfg.f_id);
                if (count >= cfg.f_GoodsLimit) {
                    E.ViewMgr.ShowMidError(E.getLang("labordayismax"));
                    return;
                }
            }
            if (MainModel.Ins.isItemEnoughSt(cfg.f_Price, true)) {
                let req = new LabourShop_req();
                req.type = model.type;
                req.id = cfg.f_id;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
    }
    class LabordayShopView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() { }
        onExit() {
            MainModel.Ins.off(MainEvent.ValChange, this, this.onMoneyChange);
            this.model.off(LabordayBaseModel.EVENT_SHOP_UPDATE, this, this.onShopView);
            this._timeCtl.stop();
        }
        onFirstInit() {
            if (!this.UI) {
                this.reg();
                this.moneyType = this.model.pieces;
                this.bindClose(this._ui.close1);
                this._ui.shouhun1.skin = IconUtils.getIcon(this.moneyType);
                this._timeCtl = new TimeCtlV2(this._ui.timeTf, "{0}后结束");
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this.initLb();
            }
        }
        initLb() {
            if (!StringUtil.IsNullOrEmpty(this.model.markTitle)) {
                this._ui.title2.text = this.model.markTitle;
            }
        }
        reg() {
            this.model = LabordayModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_layorday_markerUI();
            this._ui.list1.itemRender = ui.views.laborday.ui_layorday_marker_itemUI;
        }
        onRenderHandler(item) {
            MarkItemCtl.refresh(item);
        }
        onShopView() {
            this._ui.list1.refresh();
        }
        onInit() {
            this.model.on(LabordayBaseModel.EVENT_SHOP_UPDATE, this, this.onShopView);
            this._ui.list1.array = t_Labour_Shop.Ins.getListByType(this.model.type);
            MainModel.Ins.on(MainEvent.ValChange, this, this.onMoneyChange);
            this.onMoneyChange();
            this._timeCtl.once(Laya.Event.COMPLETE, this, this.onTimeComplete);
            this._timeCtl.start(this.model.subTime);
        }
        onTimeComplete() {
            this._ui.timeTf.text = E.getLang("labordayend");
        }
        onMoneyChange() {
            this._ui.huobiTf.text = StringUtil.val2m(MainModel.Ins.mRoleData.getVal(this.moneyType));
        }
    }
    class ChildrenShopView extends LabordayShopView {
        reg() {
            this.model = ChildrenModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_children_markerUI();
            this._ui.list1.itemRender = ui.views.laborday.ui_children_marker_itemUI;
        }
    }
    class ChildrenPackageView extends LabordayPackageView {
        reg() {
            this.model = ChildrenModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_children_packageUI();
            this._ui.list1.itemRender = ui.views.laborday.ui_children_package_itemUI;
        }
    }
    class ChildrenView extends LabordayMainView {
        initUI() {
            this.model = ChildrenModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_children_viewUI();
            this.packageType = EViewType.ChildPackage;
            this.shopType = EViewType.ChildrenShop;
        }
        onAddLoadRes() {
            super.onAddLoadRes();
            this.addAtlas("children.atlas");
            this.animURL = "o/spine/61ndj/61ndj";
        }
    }
    class SummerPackageView extends LabordayPackageView {
        reg() {
            this.model = SummerModel.Ins;
            this.UI = this._ui = new ui.views.summer.ui_summer_packageUI();
            this._ui.list1.itemRender = ui.views.summer.ui_summer_package_itemUI;
        }
    }
    class SummerShopView extends LabordayShopView {
        reg() {
            this.model = SummerModel.Ins;
            this.UI = this._ui = new ui.views.summer.ui_summer_markerUI;
            this._ui.list1.itemRender = ui.views.summer.ui_summer_marker_itemUI;
        }
    }
    class SummerView extends LabordayMainView {
        initUI() {
            this.model = SummerModel.Ins;
            this.UI = this._ui = new ui.views.summer.ui_summer_viewUI();
            this.packageType = EViewType.SummerPackage;
            this.shopType = EViewType.SummerShop;
        }
        onAddLoadRes() {
            super.onAddLoadRes();
            this.addAtlas("summer.atlas");
            this.animURL = "o/spine/71ndj/71ndj";
        }
    }
    class MidAutumnShopView extends LabordayShopView {
        reg() {
            this.model = MidAutumnModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_midautumn_qqviewUI();
            this._ui.list1.itemRender = ui.views.laborday.ui_midautumn_qqItemUI;
        }
    }
    class MidAutumnPackageView extends LabordayPackageView {
        reg() {
            this.model = MidAutumnModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_midautumn_lbviewUI();
            this._ui.list1.itemRender = ui.views.laborday.ui_midautumn_lbItemUI;
        }
    }
    class MidAutumnView extends LabordayMainView {
        initUI() {
            this.model = MidAutumnModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_midautumn_viewUI();
            ButtonCtl.Create(this._ui['yshopBtn'], new Laya.Handler(this, this.onBtnClick));
            this.packageType = EViewType.midAutumnPackage;
            this.shopType = EViewType.midAutumnrenShop;
        }
        onBtnClick() {
            E.ViewMgr.Open(EViewType.midAutumnrenShop1);
        }
        onAddLoadRes() {
            super.onAddLoadRes();
            this.addAtlas("midautumn.atlas");
            this.animURL = "o/spine/11ndj/11ndj";
        }
    }
    class LuckShopView extends LabordayShopView {
        reg() {
            this.model = LuckModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_layorday_markerUI();
            this._ui.list1.itemRender = ui.views.laborday.ui_layorday_marker_itemUI;
        }
    }
    class LuckPackageView extends LabordayPackageView {
        reg() {
            this.model = LuckModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_layorday_packageUI();
            this._ui.list1.itemRender = ui.views.laborday.ui_layorday_package_itemUI;
        }
    }
    class LuckView extends LabordayMainView {
        initUI() {
            this.model = LuckModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_laborday_viewUI();
            this.packageType = EViewType.LuckPackage;
            this.shopType = EViewType.LuckShop;
        }
        onAddLoadRes() {
            super.onAddLoadRes();
            this.animURL = "o/spine/51ndj2/51ndj2";
        }
    }
    class YuanXiaoShopView extends LabordayShopView {
        reg() {
            this.model = YuanXiaoModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_yuanxiaoShopViewUI();
            this._ui.list1.itemRender = ui.views.laborday.ui_yuanxiaoShopItemUI;
        }
    }
    class YuanXiaoPackageView extends LabordayPackageView {
        reg() {
            this.model = YuanXiaoModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_yuanxiaoPackageViewUI();
            this._ui.list1.itemRender = ui.views.laborday.ui_yuanxiaoPackageItemUI;
        }
    }
    class YuanXiaoView extends LabordayMainView {
        initUI() {
            this.model = YuanXiaoModel.Ins;
            this.UI = this._ui = new ui.views.laborday.ui_yuanxiaoViewUI();
            this.packageType = EViewType.yuanxiaoPackage;
            this.shopType = EViewType.yuanxiaoShop;
        }
        onAddLoadRes() {
            super.onAddLoadRes();
            this.addAtlas("yuanxiao.atlas");
            this.animURL = "o/spine/21ndj/21ndj";
        }
    }

    exports.ChildrenPackageView = ChildrenPackageView;
    exports.ChildrenShopView = ChildrenShopView;
    exports.ChildrenView = ChildrenView;
    exports.LabordayShopView = LabordayShopView;
    exports.LuckPackageView = LuckPackageView;
    exports.LuckShopView = LuckShopView;
    exports.LuckView = LuckView;
    exports.MidAutumnPackageView = MidAutumnPackageView;
    exports.MidAutumnShopView = MidAutumnShopView;
    exports.MidAutumnView = MidAutumnView;
    exports.SummerPackageView = SummerPackageView;
    exports.SummerShopView = SummerShopView;
    exports.SummerView = SummerView;
    exports.YuanXiaoPackageView = YuanXiaoPackageView;
    exports.YuanXiaoShopView = YuanXiaoShopView;
    exports.YuanXiaoView = YuanXiaoView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShopBuyView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() { }
        onExit() { }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_shopBuyViewUI();
                this.bindClose(this._ui.closeBtn1);
                ButtonCtl.Create(this._ui.cancelBtn, new Laya.Handler(this, this.onCancelHandler));
                ButtonCtl.Create(this._ui.okBtn, new Laya.Handler(this, this.onOkHandler));
            }
        }
        onOkHandler() {
            this._data.ok.runWith(this._data);
            if (!this._data.buyEndNotClose) {
                this.Close();
            }
        }
        onCancelHandler() {
            this.Close();
        }
        clearUI() {
            this._ui.item.tf1.text = "";
            this._ui.item.quality.skin = IconUtils.defaultIcon;
            this._ui.item.icon.skin = "";
            this._ui.nameTF.text = "";
            this._ui.moneyTf.text = "";
            this._ui.goldIcon.skin = "";
        }
        onInit() {
            this.clearUI();
            this._data = this.Data;
            let _vo = this.Data;
            this._ui.item.offAll();
            switch (_vo.type) {
                case EBuyType.Item:
                    let targetCfg = ItemProxy.Ins.getCfg(_vo.targetId);
                    this._ui.nameTF.text = main.itemName(targetCfg.f_name);
                    let _itemVo = new ItemVo();
                    _itemVo.cfgId = _vo.targetId;
                    _itemVo.count = _vo.targetCount;
                    ItemViewFactory.refreshSlot(this._ui.item, _itemVo);
                    this._ui.descTf.text = _itemVo.getDesc();
                    break;
                case EBuyType.LabourShop:
                    this.refreshLabourShop(_vo);
                    break;
                default:
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, "you must be set type!");
                    break;
            }
            this._ui.goldIcon.skin = IconUtils.getIconByCfgId(_vo.needItemId);
            this._ui.moneyTf.text = StringUtil.val2m(_vo.needCount);
        }
        refreshLabourShop(_vo) {
            let cfg = t_Labour_Shop.Ins.GetDataById(_vo.targetId);
            switch (cfg.f_GoodsType) {
                case ELabodayType.EquipStyle:
                    let arr1 = cfg.f_GoodsID.split("-");
                    let part = parseInt(arr1[0]);
                    let style = parseInt(arr1[1]);
                    this._ui.item.tf1.text = "1";
                    this._ui.item.icon.skin = ItemViewFactory.getEquipIcon(part, style);
                    this._ui.item.quality.skin = IconUtils.getQuaIcon(cfg.f_GoodsQua);
                    let nameArr = cfg.f_Tips.split("-");
                    if (nameArr.length >= 2) {
                        this._ui.nameTF.text = nameArr[0];
                        this._ui.descTf.text = nameArr[1];
                    }
                    break;
                case ELabodayType.Item:
                    let itemVo = ItemViewFactory.convertItem(cfg.f_GoodsID);
                    this._ui.item.icon.skin = IconUtils.getIconByCfgId(itemVo.cfgId);
                    this._ui.item.tf1.text = itemVo.count.toString();
                    this._ui.item.quality.skin = IconUtils.getQuaIcon(itemVo.cfg.f_qua);
                    this._ui.nameTF.text = itemVo.getName();
                    this._ui.descTf.text = itemVo.getDesc();
                    break;
            }
        }
    }

    exports.ShopBuyView = ShopBuyView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SubCDView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
        }
        onAddLoadRes() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_jccdViewUI();
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.subBtn, this, this.onSubBtnClick);
            }
        }
        onSubBtnClick() {
            if (this.Data == GuaJiModel.CDEnmu.BaoXiangLv) {
                E.sendTrack("ad_watch", { type: "BaoXiangLv" });
            }
            else if (this.Data == GuaJiModel.CDEnmu.WuGuanSS) {
                E.sendTrack("ad_watch", { type: "WuGuanSS" });
            }
            E.sdk.lookVideo((type) => {
                console.log('type: ', type);
                switch (type) {
                    case 0:
                        break;
                    case 1:
                        if (this.Data == GuaJiModel.CDEnmu.BaoXiangLv) {
                            E.sendTrack("ad_finish", { type: "BaoXiangLv" });
                        }
                        else if (this.Data == GuaJiModel.CDEnmu.WuGuanSS) {
                            E.sendTrack("ad_finish", { type: "WuGuanSS" });
                        }
                        let req = new AdWatchDone_req;
                        req.pos = this.Data;
                        SocketMgr.Ins.SendMessageBin(req);
                        break;
                }
            });
            this.Close();
        }
        onInit() {
        }
        onExit() {
        }
    }

    exports.SubCDView = SubCDView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ZhengZhanAvatarItem extends ui.views.zhangzhan.ui_zhengzhan_avatarUI {
        constructor() {
            super();
            this.starCtl = new FuJiangStarCtl(this.starItem);
        }
        refresh(val, cfg) {
            this.clear();
            this.avatar = AvatarFactory.createAvatarByStSkin(val, EAvatarAnim.NormalStand);
            this.avatarCon.addChild(this.avatar);
            this.starCtl.setStar(cfg.f_EnemyStar);
            this.starCtl.centerX();
            this.nameTf.text = "Lv." + cfg.f_EnemyLv + " " + cfg.f_Stations;
            this.nameTf.color = "#" + EquipmentQualityProxy.Ins.getByQua(cfg.f_EnemyImage).f_Color;
            if (this.avatar.bHorseSkel) {
                this.con1.y = -AvatarView.hasHorseHeight;
            }
            else {
                this.con1.y = -AvatarView.normalHeight;
            }
        }
        clear() {
            if (this.avatar) {
                this.avatar.dispose();
                this.avatar = null;
            }
        }
        dispose() {
            this.clear();
            this.removeSelf();
        }
    }

    exports.ZhengZhanAvatarItem = ZhengZhanAvatarItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Conquest_Value extends BaseCfg {
        GetTabelName() {
            return "t_Conquest_Value";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Conquest_Value();
            }
            return this._ins;
        }
    }
    class t_Conquest_EnemyValue extends BaseCfg {
        GetTabelName() {
            return "t_Conquest_EnemyValue";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Conquest_EnemyValue();
            }
            return this._ins;
        }
        getCfgByEnemyId(entmyId) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_EnemyID == entmyId) {
                    return cfg;
                }
            }
        }
    }
    class EnemyImageSkin {
    }
    class ZhengZhanView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.clsSkin = "ZhengZhanAvatarItem";
            this.maxCount = 10;
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("zhengzhan.atlas");
        }
        onExit() {
            this.model.off(MainEvent.ConquestUpdate, this, this.updateView);
            this.clearAllAvatar();
        }
        clearAllAvatar() {
            for (let i = 0; i < 6; i++) {
                let avatarCon = this._ui['avatar' + i];
                if (avatarCon.numChildren > 0) {
                    let item = avatarCon.getChildAt(0);
                    Laya.Pool.recover(this.clsSkin, item);
                    item.dispose();
                }
            }
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = MainModel.Ins;
                this.UI = this._ui = new ui.views.zhangzhan.ui_zhengzhan_mainUI();
                this.initWidth = this._ui.bg6.width;
                this.bindClose(this._ui.close1);
                this.fightCtl = ButtonCtl.CreateBtn(this._ui.tiaozhanBtn, this, this.onFightHandler);
                this._ui.tf3.on(Laya.Event.CLICK, this, this.onTipsHandler);
                this._ui.helpBtn.on(Laya.Event.CLICK, this, this.onTipsHandler);
                this._plusCtl = FontCtlFactory.createPlus();
                this._ui.title1.text = FuncProxy.Ins.getCfgByFuncId(EFuncDef.Expedition).f_name;
            }
        }
        onTipsHandler(e) {
            e.stopPropagation();
            if (this.cfg) {
                MainModel.Ins.showSmallTips("", this.cfg.f_Lineup, e.target, "rightbottom");
            }
        }
        onFightHandler() {
            switch (this.model.conquestData.state) {
                case EConquestType.NotLingQu:
                    let req1 = new ConquestChapterReward_req();
                    SocketMgr.Ins.SendMessageBin(req1);
                    break;
                case EConquestType.Zero:
                    let req = new ConquestFight_req();
                    SocketMgr.Ins.SendMessageBin(req);
                    break;
            }
        }
        updateProgress(_step) {
            this._ui.progressTf.text = `${_step}/${this.maxCount}`;
            this._ui.bg6.width = this.initWidth * (_step / this.maxCount);
        }
        onCreateList(vo) {
            let avatarCon = this._ui['avatar' + vo.index];
            let f_Enemyid = vo.f_Enemyid;
            let _skinVo;
            if (!f_Enemyid) ;
            else {
                let _imgcfg = Enemy_ImageProxy.Ins.getCfg(vo.id);
                _skinVo = new stSkin();
                _skinVo.f_BodyID = _imgcfg.f_BodyID;
                _skinVo.f_HeadID = _imgcfg.f_HeadID;
                _skinVo.f_MountID = _imgcfg.f_MountID;
                _skinVo.f_ShieldID = _imgcfg.f_ShieldID;
                _skinVo.f_WeaponID = _imgcfg.f_WeaponID;
                _skinVo.f_WingID = _imgcfg.f_WingID;
                let item = Laya.Pool.getItemByClass(this.clsSkin, ZhengZhanAvatarItem);
                let cfg = t_Conquest_EnemyValue.Ins.getCfgByEnemyId(f_Enemyid);
                this._allPlus += cfg.f_EnemyPower;
                item.refresh(_skinVo, cfg);
                avatarCon.addChild(item);
            }
        }
        onCreateRole() {
            if (this.roleList.length > 0) {
                let cell = this.roleList.shift();
                this.onCreateList(cell);
            }
            else {
                Laya.timer.clear(this, this.onCreateRole);
                this.next();
            }
        }
        updateView() {
            if (this.model.conquestData) {
                this.clearAllAvatar();
                this.cfg = t_Conquest_Value.Ins.GetDataById(this.model.conquestData.fid);
                let arr = this.cfg.f_Level.split("-");
                this._ui.tf2.text = this.cfg.f_LevelName;
                this._ui.tf4.text = E.getLang("zhengzhan01", this.cfg.f_Level);
                let _skinList = this.cfg.f_EnemyImage.split("|");
                let f_EnemyidArr = this.cfg.f_Enemyid.split("|");
                let l = [];
                for (let i = 0; i < _skinList.length; i++) {
                    let cell = new EnemyImageSkin();
                    cell.index = i;
                    cell.id = parseInt(_skinList[i]);
                    cell.f_Enemyid = parseInt(f_EnemyidArr[i]);
                    l.push(cell);
                }
                this.roleList = l;
                this._allPlus = 0;
                Laya.timer.frameLoop(1, this, this.onCreateRole);
                this._ui.box1.skin = `remote/zhengzhan/chest.png`;
                let _rewardStr = this.cfg.f_LevelReward;
                let _step = parseInt(arr[1]) - 1;
                switch (this.model.conquestData.state) {
                    case EConquestType.IsLingQu:
                        this.fightCtl.grayMouseDisable = true;
                        this._ui.tf6.text = E.getLang("LingQu2");
                        break;
                    case EConquestType.NotLingQu:
                        this._ui.box1.skin = `remote/zhengzhan/chest_1.png`;
                        this.fightCtl.grayMouseDisable = false;
                        this._ui.tf6.text = E.getLang("LingQu");
                        _rewardStr = this.cfg.f_StageReward;
                        _step = this.maxCount;
                        break;
                    case EConquestType.Zero:
                        this.fightCtl.grayMouseDisable = false;
                        this._ui.tf6.text = E.getLang("zhengzhan02");
                        break;
                }
                this.updateProgress(_step);
                ItemViewFactory.renderItemSlots(this._ui.rewardCon, _rewardStr, 10, 1, "center");
            }
        }
        next() {
            this._plusCtl.setValue(this._ui.toplug, this._allPlus.toString());
        }
        onInit() {
            this.model.on(MainEvent.ConquestUpdate, this, this.updateView);
            this.updateView();
        }
    }

    exports.ZhengZhanView = ZhengZhanView;
    exports.t_Conquest_EnemyValue = t_Conquest_EnemyValue;
    exports.t_Conquest_Value = t_Conquest_Value;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AdventureVo {
        constructor() {
            this.isChapterRewardFinished = false;
        }
        getChapter() {
            if (!this._allChapterList) {
                this._allChapterList = [];
                let _l = AdventureLevelProxy.Ins.List;
                for (let i = 0; i < _l.length; i++) {
                    let _cfg = _l[i];
                    if (_cfg.f_ChapterReward) {
                        this._allChapterList.push(_cfg);
                    }
                }
            }
        }
        isOpen(lv) {
            return this.revcData.id >= lv;
        }
        clear() {
            this.isChapterRewardFinished = false;
        }
        setData(revc) {
            this.clear();
            this.revcData = revc;
            this.curCfg = AdventureLevelProxy.Ins.getByLevelId(revc.id);
            this.getChapter();
            this.getNextCfg();
        }
        getNextCfg() {
            let revc = this.revcData;
            let f_Levelid = revc.rewardId;
            if (this._allChapterList.length > 0 && f_Levelid == 0) {
                this.nextCfg = this._allChapterList[0];
            }
            for (let i = 0; i < this._allChapterList.length; i++) {
                let cfg = this._allChapterList[i];
                if (cfg.f_Levelid == f_Levelid) {
                    this.nextCfg = this._allChapterList[i + 1];
                    if (!this.nextCfg) {
                        this.isChapterRewardFinished = true;
                    }
                    break;
                }
            }
        }
    }

    exports.AdventureVo = AdventureVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Box_AutoProxy extends BaseCfg {
        GetTabelName() {
            return "t_Box_Auto";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new Box_AutoProxy();
            }
            return this._ins;
        }
        getCfgByBoxMag(boxMag) {
            let l = this.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_BoxMag == boxMag) {
                    return cfg;
                }
            }
        }
        getPreBoxMaxList(boxMag) {
            let l = this.List;
            let boxMagList = [];
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_BoxMag <= boxMag) {
                    boxMagList.push(cfg.f_BoxMag);
                }
            }
            return boxMagList;
        }
    }

    exports.Box_AutoProxy = Box_AutoProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    var EAutoErrCode;
    (function (EAutoErrCode) {
        EAutoErrCode[EAutoErrCode["None"] = 0] = "None";
        EAutoErrCode[EAutoErrCode["Stop"] = 1] = "Stop";
        EAutoErrCode[EAutoErrCode["GoOn"] = 2] = "GoOn";
    })(EAutoErrCode || (EAutoErrCode = {}));
    class BoxAutoVo {
        constructor() {
            this.togetherCkVal = false;
        }
        get mCheckPlusHigh() {
            let n = RedUpdateModel.Ins.getByID(RedEnum.BOX_PLUS);
            if (n) {
                return n.type == 1;
            }
            return true;
        }
        set mCheckPlusHigh(v) {
            RedUpdateModel.Ins.save(RedEnum.BOX_PLUS, v ? 1 : 0);
        }
        get boxNumCfgList() {
            if (!this._countDataList) {
                let list1 = Box_AutoProxy.Ins.List;
                let _countDataList = [];
                _countDataList.push(new CountAutoCfg());
                for (let i = 0; i < list1.length; i++) {
                    _countDataList.push(new CountAutoCfg(list1[i]));
                }
                this._countDataList = _countDataList;
            }
            return this._countDataList;
        }
        get boxAutoUseCount() {
            let vo = this.boxNumCfgList[this.boxCountIndex];
            if (vo.locked) {
                return this.boxNumCfgList[0].boxMag;
            }
            if (vo) {
                return vo.boxMag;
            }
            return this.boxNumCfgList[0].boxMag;
        }
        reset() {
            this.togetherCkVal = false;
        }
        get isOpen() {
            return MainModel.Ins.boxAuto.open == 1;
        }
        hasAttr(l, attrid) {
            for (let i = 0; i < l.length; i++) {
                if (attrid == l[i].id) {
                    return true;
                }
            }
        }
        isStopNow(l, id) {
            let arr1 = [RedEnum.BOX_ATTR_0, RedEnum.BOX_ATTR_1, RedEnum.BOX_ATTR_2, RedEnum.BOX_ATTR_3];
            let index = arr1.indexOf(id);
            let group = t_Box_filter.Ins.List;
            let cfg = group[index];
            let arr = cfg.f_filter1.split("|");
            let selIndex = 0;
            let o = RedUpdateModel.Ins.getByID(id);
            if (o) {
                selIndex = o.type;
            }
            let val;
            if (selIndex == 0) {
                val = 0;
            }
            else {
                val = parseInt(arr[selIndex - 1]);
            }
            if (val == 0) {
                for (let i = 0; i < arr.length; i++) {
                    let id = parseInt(arr[i]);
                    if (this.hasAttr(l, id)) {
                        return EAutoErrCode.Stop;
                    }
                }
            }
            else if (isNaN(val)) {
                return EAutoErrCode.None;
            }
            else {
                if (this.hasAttr(l, val)) {
                    return EAutoErrCode.Stop;
                }
            }
            return EAutoErrCode.GoOn;
        }
        check(l, arr) {
            let s0 = this.isStopNow(l, arr[0]);
            let s1 = this.isStopNow(l, arr[1]);
            if (s0 == EAutoErrCode.None && s1 == EAutoErrCode.Stop ||
                s0 == EAutoErrCode.Stop && s1 == EAutoErrCode.None ||
                s0 == EAutoErrCode.Stop && s1 == EAutoErrCode.Stop ||
                s0 == EAutoErrCode.None && s1 == EAutoErrCode.None) {
                return true;
            }
        }
        checkAttrIsCanStop(l) {
            if (this.ck0) {
                if (this.check(l, [RedEnum.BOX_ATTR_0, RedEnum.BOX_ATTR_1])) {
                    return true;
                }
            }
            if (this.ck1) {
                if (this.check(l, [RedEnum.BOX_ATTR_2, RedEnum.BOX_ATTR_3])) {
                    return true;
                }
            }
            return false;
        }
        get attrCk() {
            return this.ck0 || this.ck1;
        }
        print() {
        }
        upload() {
            let cm = RedUpdateModel.Ins;
            let l1 = [];
            l1.push({ id: RedEnum.BOX_QUA, val: this.getQua_f_id() });
            let arr = [RedEnum.BOX_ATTR_0, RedEnum.BOX_ATTR_1, RedEnum.BOX_ATTR_2, RedEnum.BOX_ATTR_3];
            for (let i = 0; i < arr.length; i++) {
                let v = arr[i];
                let o = RedUpdateModel.Ins.getByID(v);
                let out = 0;
                if (o) {
                    out = o.type;
                }
                l1 = l1.concat({ id: v, val: out });
            }
            l1.push({ id: RedEnum.BOX_PLUS, val: this.mCheckPlusHigh ? 1 : 0 });
            l1.push({ id: RedEnum.BOX_NUM_INDEX, val: this.getBoxNumIndex() });
            l1.push({ id: RedEnum.BOX_CK0, val: this.ck0 ? 1 : 0 });
            l1.push({ id: RedEnum.BOX_CK1, val: this.ck1 ? 1 : 0 });
            cm.saveArr(l1);
        }
        uddateAttr(id, val) {
            RedUpdateModel.Ins.save(id, val);
        }
        get boxCountIndex() {
            return this.getBoxNumIndex();
        }
        set boxCountIndex(v) {
            RedUpdateModel.Ins.save(RedEnum.BOX_NUM_INDEX, v);
        }
        getBoxNumIndex() {
            let n = RedUpdateModel.Ins.getByID(RedEnum.BOX_NUM_INDEX);
            let boxindex = 0;
            if (n) {
                boxindex = n.type;
            }
            return boxindex;
        }
        getQua_f_id() {
            let vo = RedUpdateModel.Ins.getByID(RedEnum.BOX_QUA);
            if (vo) {
                return vo.type;
            }
            return 1;
        }
        saveQua(val) {
            RedUpdateModel.Ins.save(RedEnum.BOX_QUA, val);
        }
        initData() {
        }
        getIndexByAttrId(cfg, attrId) {
            if (!cfg) {
                return 0;
            }
            let arr = cfg.f_filter1.split("|");
            let i = arr.indexOf(attrId.toString());
            if (i != -1) {
                return i + 1;
            }
            return 0;
        }
        get ck0() {
            let o = RedUpdateModel.Ins.getByID(RedEnum.BOX_CK0);
            if (o) {
                return o.type == 1;
            }
            return true;
        }
        set ck0(v) {
            RedUpdateModel.Ins.save(RedEnum.BOX_CK0, v ? 1 : 0);
        }
        get ck1() {
            let o = RedUpdateModel.Ins.getByID(RedEnum.BOX_CK1);
            if (o) {
                return o.type == 1;
            }
            return true;
        }
        set ck1(v) {
            RedUpdateModel.Ins.save(RedEnum.BOX_CK1, v ? 1 : 0);
        }
    }

    exports.BoxAutoVo = BoxAutoVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ErrorCode) {
        ErrorCode[ErrorCode["EquipUid"] = 9] = "EquipUid";
        ErrorCode[ErrorCode["Sell"] = 11] = "Sell";
        ErrorCode[ErrorCode["Selled"] = 12] = "Selled";
        ErrorCode[ErrorCode["HeroYanWuFail"] = 133] = "HeroYanWuFail";
        ErrorCode[ErrorCode["HeroForgetFail"] = 138] = "HeroForgetFail";
        ErrorCode[ErrorCode["HeroMoveFail"] = 139] = "HeroMoveFail";
        ErrorCode[ErrorCode["DisableUser"] = 448] = "DisableUser";
    })(exports.ErrorCode || (exports.ErrorCode = {}));

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeroPackVo {
        get vo() {
            return MainModel.Ins.gymCardVo;
        }
        constructor() {
        }
        get type() {
            if (!this.vo || (this.vo && this.day == 0)) {
                return EGymGetStatus.NotChongZhi;
            }
            if (this.vo) {
                return this.vo.type;
            }
            return EGymGetStatus.CantLingQu;
        }
        get canProxy() {
            return true;
        }
        get day() {
            if (this.vo) {
                return this.vo.day;
            }
            return 0;
        }
        subDay() {
            if (this.vo) {
                this.vo.day--;
                if (this.vo.day <= 0) {
                    this.vo.tryout = 0;
                    HeroHouseModel.Ins.autoCtl.reset();
                }
                MainModel.Ins.event(MainEvent.GymCardUpdate);
            }
        }
        get isTryout() {
            if (this.vo && this.vo.tryout == 1) {
                return true;
            }
        }
        get tryoutSubTime() {
            if (this.vo && this.vo.day > 0) {
                let day = this.vo.day - 1;
                if (day < 0)
                    day = 0;
                let sub = 86400 - (TimeUtil.serverTime - TimeUtil.curZeroTime) + day * 86400;
                return sub;
            }
            return 0;
        }
        reset() {
            MainModel.Ins.gymCardVo = null;
        }
    }

    exports.HeroPackVo = HeroPackVo;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EOpenChest) {
        EOpenChest[EOpenChest["Normal"] = 1] = "Normal";
        EOpenChest[EOpenChest["Auto"] = 2] = "Auto";
    })(exports.EOpenChest || (exports.EOpenChest = {}));
    (function (EChestOpenStatus) {
        EChestOpenStatus[EChestOpenStatus["None"] = 0] = "None";
        EChestOpenStatus[EChestOpenStatus["GetBetterEquip"] = 1] = "GetBetterEquip";
    })(exports.EChestOpenStatus || (exports.EChestOpenStatus = {}));
    class ChestPolicyBase {
        constructor() {
            this.status = exports.EChestOpenStatus.None;
            this.type = exports.EOpenChest.Normal;
            this.isPlaying = false;
        }
        get model() {
            return MainModel.Ins;
        }
        aniEnd(data) {
        }
        Stop() {
        }
        BetterAction() {
            return false;
        }
        ExchangeEquip(data) {
            switch (data.errorID) {
                case 0:
                    let _equipVo;
                    if (data.equipItemList.length > 0) {
                        _equipVo = data.equipItemList[0];
                    }
                    this.model.PlayChestAnim(new Laya.Handler(this, this.aniEnd, [data]), _equipVo);
                    break;
                case 1:
                    E.ViewMgr.ShowMidError(E.LangMgr.getLang("BoxNotEnough"));
                    MainModel.Ins.discountPack.boxNotEnough();
                    this.model.StopChestProxy(false);
                    break;
            }
        }
        openUiByEquipVo(cell) {
            this.model.openUiByEquipVo(cell);
        }
    }
    class ChestPolicy extends ChestPolicyBase {
        constructor() {
            super(...arguments);
            this.type = exports.EOpenChest.Normal;
        }
        aniEnd(data) {
            if (data.equipItemList.length > 0) {
                let cell = data.equipItemList[0];
                this.model.openUiByEquipVo(cell);
            }
        }
        BeginChest(delay = true) {
            let cell = this.model.getNotWear();
            if (cell) {
                this.openUiByEquipVo(cell.equipVo);
            }
            else {
                this.model.timeCtl.start();
            }
        }
    }
    class ChestAutoPolicy extends ChestPolicyBase {
        constructor() {
            super(...arguments);
            this.type = exports.EOpenChest.Auto;
            this.delayTime = 500;
        }
        aniEnd(data) {
            console.log("aniEnd onAniDelayHandler type:" + this.type + " status:" + this.status);
            Laya.timer.clear(this, this.onAniDelayHandler);
            Laya.timer.once(this.delayTime, this, this.onAniDelayHandler);
        }
        Stop() {
            this.model.off(MainEvent.SellSucceed, this, this.onSellSucceed);
            this.model.off(MainEvent.EquipChange, this, this.onEquipChange);
            Laya.timer.clear(this, this.onAniDelayHandler);
        }
        onAniDelayHandler() {
            this.model.BeginChest();
        }
        onSellSucceed() {
            this.openChest();
        }
        onEquipChange() {
            this.openChest();
        }
        BetterAction() {
            let _equip = this.model.getNotWear();
            if (_equip) {
                this.openUiByEquipVo(_equip.equipVo);
                this.model.once(MainEvent.SellSucceed, this, this.onSellSucceed);
                this.model.once(MainEvent.EquipChange, this, this.onEquipChange);
                return true;
            }
            else {
                LogSys$1.Log("未找到可替换或者出售的装备");
            }
            return false;
        }
        log(cell, pre = "") {
            LogSys$1.Log(pre + cell.equipVo.uid + "," + cell.getName() + ",type:" + cell.equipVo.type + ",qua:" + cell.equipVo.quality);
        }
        getNeedStop(b, list1) {
            if (b) {
                for (let i = 0; i < list1.length; i++) {
                    if (!list1[i]) {
                        return false;
                    }
                }
                return true;
            }
            else {
                for (let i = 0; i < list1.length; i++) {
                    if (list1[i]) {
                        return true;
                    }
                }
                return false;
            }
        }
        BeginChest(delay = true) {
            this.status = exports.EChestOpenStatus.None;
            let _getEquip = this.model.getNotWear();
            if (_getEquip) {
                let boxAutoVo = this.model.boxAutoVo;
                let plusStop = false;
                let attrStop = false;
                let quaStop = false;
                let plusStopNeed = false;
                let attrStopNeed = false;
                if (boxAutoVo.isOpen) {
                    let curWearvo = this.model.getEquipWearVo(_getEquip.equipVo.type);
                    if (boxAutoVo.mCheckPlusHigh) {
                        plusStopNeed = true;
                        if (curWearvo && _getEquip.equipVo.plus > curWearvo.plus) {
                            plusStop = true;
                        }
                    }
                    let attrs = [];
                    attrs = attrs.concat(_getEquip.equipVo.attrList);
                    attrs = attrs.concat(_getEquip.equipVo.attrList1);
                    if (boxAutoVo.attrCk) {
                        attrStopNeed = true;
                        if (boxAutoVo.checkAttrIsCanStop(attrs)) {
                            attrStop = true;
                        }
                    }
                }
                if (_getEquip.equipVo.quality >= this.model.quickCfg.f_id) {
                    quaStop = true;
                }
                let blist = [];
                if (attrStopNeed) {
                    blist.push(attrStop);
                }
                if (plusStopNeed) {
                    blist.push(plusStop);
                }
                blist.push(quaStop);
                let needPop = this.getNeedStop(boxAutoVo.togetherCkVal, blist);
                if (needPop) {
                    this.status = exports.EChestOpenStatus.GetBetterEquip;
                    this.BetterAction();
                }
                else {
                    if (this.model.mainView.avatarFight) {
                        this.model.mainView.avatarFight.animSell(_getEquip.equipVo, new Laya.Handler(this, this.onSellEnd, [_getEquip.equipVo]));
                    }
                    else {
                        this.onSellEnd(_getEquip.equipVo);
                    }
                }
            }
            else {
                this.openChest(delay);
            }
        }
        onSellEnd(vo) {
            this.model.once(MainEvent.SellSucceed, this, this.onSellSucceed);
            this.model.sell(vo.uid);
        }
        openChest(delay = true) {
            MainModel.Ins.event(MainEvent.FightAvatarAnim);
            this.status = exports.EChestOpenStatus.None;
            if (delay) {
                this.model.timeCtl.delayStart();
            }
            else {
                this.model.timeCtl.start();
            }
        }
    }

    exports.ChestAutoPolicy = ChestAutoPolicy;
    exports.ChestPolicy = ChestPolicy;
    exports.ChestPolicyBase = ChestPolicyBase;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class CombopackTabCtl {
        constructor() {
            this.list1 = [];
        }
        add(skin, label) {
            DebugUtil.draw(skin);
            skin.tf.text = label;
            skin.on(Laya.Event.CLICK, this, this.onClickHandler);
            this.list1.push(skin);
        }
        onClickHandler(e) {
            let index = this.list1.indexOf(e.target);
            this._index = index;
            this.selectIndex = index;
        }
        set selectIndex(value) {
            this._index = value;
            for (let i = 0; i < this.list1.length; i++) {
                let cell = this.list1[i];
                let cur;
                if (i == value) {
                    cur = this.selStyle;
                }
                else {
                    cur = this.unSelStyle;
                }
                if (cur) {
                    cell.bg.skin = cur[0];
                    cell.tf.color = cur[1];
                }
            }
            if (this.callBack) {
                this.callBack.call(this.that, value);
            }
        }
        get selectIndex() {
            return this._index;
        }
        dispose() {
            while (this.list1.length) {
                let cell = this.list1.shift();
                cell.off(Laya.Event.CLICK, this, this.onClickHandler);
            }
            this.callBack = null;
            this.that = null;
        }
        pushStyle(sel, unSel) {
            this.selStyle = sel;
            this.unSelStyle = unSel;
        }
        bind(callBack, that) {
            this.callBack = callBack;
            this.that = that;
        }
    }

    exports.CombopackTabCtl = CombopackTabCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Purchase_ComboPack extends BaseCfg {
        GetTabelName() {
            return "t_Purchase_ComboPack";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Purchase_ComboPack();
            }
            return this._ins;
        }
    }

    exports.t_Purchase_ComboPack = t_Purchase_ComboPack;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class CombopackView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
        }
        onAddLoadRes() {
            this.addAtlas("combopack.atlas");
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.onRefresh);
            this.tabCtl.dispose();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.combopack.ui_combopack_mainUI();
                this._ui.timetf.visible = false;
                this.bindClose(this._ui.close_btn);
                this.tabCtl = new CombopackTabCtl();
                for (let i = 0; i < 3; i++) {
                    this.tabCtl.add(this._ui["b" + i], E.getLang("combopack01") + StringUtil.toChinesNum(i + 1));
                }
                this.tabCtl.pushStyle(["remote/combopack/jx_2.png", "#5F3926"], ["remote/combopack/jx_3.png", "#F4CCC0"]);
                this.tabCtl.bind(this.onTabClickHandler, this);
                this.lingqubtnCtl = new RateBtn01Ctl(this._ui.lingqubtn, this, this.onLingQuHandler, ESkinRateBtn.Yellow);
                this._ui.list1.itemRender = ui.views.combopack.ui_comboppack_itemUI;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemHandler);
            }
        }
        onItemHandler(item, index) {
            let data = item.dataSource;
            item.tf.text = data.label;
            let cfg = t_Purchase_PriceProxy.Ins.GetDataById(data.purchaseID);
            item.moneytf.text = E.getLang("combopack02") + " " + StringUtil.moneyCv(cfg.f_price) + E.getLang("CNY");
        }
        onLingQuHandler() {
            let _cfg = t_Purchase_PriceProxy.Ins.GetDataById(this.curCfg.f_PurchaseID);
            ActivityModel.Ins.recharge(_cfg.f_id);
        }
        get curCfg() {
            let index = this.curSelInex;
            let cfg = t_Purchase_ComboPack.Ins.GetDataById(index + 1);
            return cfg;
        }
        onTabClickHandler(index) {
            this.updataCombopackView();
        }
        get curSelInex() {
            return this.tabCtl.selectIndex;
        }
        updataCombopackView() {
            let index = this.curSelInex;
            this._ui.bg01.skin = `static/set_meal_${(index + 1)}.png`;
            let cfg = this.curCfg;
            this.lingqubtnCtl.cfg = t_Purchase_PriceProxy.Ins.GetDataById(cfg.f_PurchaseID);
            let purchaseIDArr = cfg.f_ComboPurchaseID.split("|");
            let labelArr = cfg.f_Client.split("|");
            let dataList = [];
            for (let i = 0; i < purchaseIDArr.length; i++) {
                let cell = {};
                cell.label = labelArr[i] || "";
                cell.purchaseID = parseInt(purchaseIDArr[i] || "");
                dataList.push(cell);
            }
            this._ui.list1.array = dataList;
            let vo = ActivityModel.Ins.getVo(EActivityType.Combopack);
            let isgary = true;
            if (vo) {
                let type = vo.getParam1(cfg.f_id);
                switch (type) {
                    case ECombopackLingQu.Locked:
                    case ECombopackLingQu.isGet:
                    case ECombopackLingQu.LockedSub:
                        break;
                    case ECombopackLingQu.WaitRecharge:
                        isgary = false;
                        break;
                }
            }
            this.lingqubtnCtl.btnCtl.grayMouseDisable = isgary;
        }
        onInit() {
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onRefresh);
            this.tabCtl.selectIndex = this.Data || 0;
        }
        onRefresh() {
            this.updataCombopackView();
        }
    }

    exports.CombopackView = CombopackView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DiscountPopWin extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
        }
        onAddLoadRes() {
        }
        onExit() {
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.main.ui_pop_01discountUI();
                this._ui.bg.on(Laya.Event.CLICK, this, this.Close);
            }
        }
        onInit() {
        }
    }

    exports.DiscountPopWin = DiscountPopWin;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ECombopackLingQu) {
        ECombopackLingQu[ECombopackLingQu["Locked"] = 0] = "Locked";
        ECombopackLingQu[ECombopackLingQu["isGet"] = 1] = "isGet";
        ECombopackLingQu[ECombopackLingQu["WaitRecharge"] = 2] = "WaitRecharge";
        ECombopackLingQu[ECombopackLingQu["LockedSub"] = 3] = "LockedSub";
    })(exports.ECombopackLingQu || (exports.ECombopackLingQu = {}));
    class CombopackModel extends BaseModel {
        initMsg() {
            this.Reg(new CombopackView(EViewType.Combopack));
            this.Reg(new DiscountPopWin(EViewType.DiscountPopWin, ELayerType.alertLayer));
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new CombopackModel();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
    }

    exports.CombopackModel = CombopackModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SevenDaysTaskProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SevenDaysTaskProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_SevenDays_Task";
        }
        getCfgById(id) {
            return this.List.find(ele => ele.f_id == id);
        }
    }
    class SevenDaysPackProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SevenDaysPackProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Sevendays_Pack";
        }
    }
    class SevenDaysStageRewardsProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SevenDaysStageRewardsProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_SevenDays_StageRewards";
        }
    }

    exports.SevenDaysPackProxy = SevenDaysPackProxy;
    exports.SevenDaysStageRewardsProxy = SevenDaysStageRewardsProxy;
    exports.SevenDaysTaskProxy = SevenDaysTaskProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class DiscountPackagePop {
        onComboPack() {
            let funcid = EFuncDef.Combopack;
            if (MainModel.Ins.isOpenByFuncId(funcid + "")) {
                let canPay;
                let selIndex = 0;
                let l = t_Purchase_ComboPack.Ins.List;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    let vo = ActivityModel.Ins.getVo(EActivityType.Combopack);
                    let isgary = true;
                    if (vo) {
                        let type = vo.getParam1(cfg.f_id);
                        switch (type) {
                            case ECombopackLingQu.Locked:
                            case ECombopackLingQu.isGet:
                            case ECombopackLingQu.LockedSub:
                                break;
                            case ECombopackLingQu.WaitRecharge:
                                isgary = false;
                                selIndex = i;
                                break;
                        }
                    }
                    if (!isgary) {
                        canPay = true;
                        break;
                    }
                }
                if (canPay) {
                    E.ViewMgr.OpenByFuncid(funcid, true, selIndex);
                    return true;
                }
            }
        }
        onSevenDay() {
            let l = SevenDaysPackProxy.Ins.List;
            let _activityVo = ActivityModel.Ins.getVo(EActivityType.ServerTask);
            if (!_activityVo) {
                return;
            }
            for (let i = 0; i < l.length; i++) {
                let value = l[i];
                if (value.f_purchaseid != 0) {
                    let voo = _activityVo.vo.datalist.find(item => item.id == value.f_id);
                    if (voo) {
                        if (voo.param1 >= value.f_buytimes) ;
                        else {
                            let obj = {};
                            obj.tabIndex = 1;
                            obj.listitemIndex = i;
                            E.ViewMgr.OpenByFuncid(EFuncDef.ServerTask, true, obj);
                            return true;
                        }
                    }
                }
            }
        }
        onEveryDay(yourIndex = -1) {
            let funcid = EFuncDef.EveryDayPackage;
            if (MainModel.Ins.isOpenByFuncId(funcid + "")) {
                let l = t_Pack_DailyProxy.Ins.List;
                let _vo = ActivityModel.Ins.getVo(EActivityType.EveryDayBorn);
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    if (_vo) {
                        if (cfg.f_PurchaseID == 0) ;
                        else {
                            let _serverTime = 0;
                            if (_vo) {
                                _serverTime = _vo.getParam1(cfg.f_id);
                            }
                            if (_serverTime >= cfg.f_BuyTimes) ;
                            else {
                                let obj = {};
                                obj.tabIndex = 1;
                                obj.listitemIndex = yourIndex == -1 ? i : yourIndex;
                                E.ViewMgr.OpenByFuncid(funcid, true, obj);
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }
        boxNotEnough() {
            let pos = t_Platform.Ins.curCfg.f_exhaustPosition;
            if (pos) {
                this.onEveryDay(pos - 1);
            }
        }
        start() {
            let _need = false;
            let val = RedUpdateModel.Ins.getValByID(RedEnum.DISCOUNT_POP_PLAYER);
            if (val != 0 && TimeUtil.getZeroSecond(val) == TimeUtil.curZeroTime) ;
            else {
                _need = true;
            }
            if (!_need) {
                return;
            }
            RedUpdateModel.Ins.save(RedEnum.DISCOUNT_POP_PLAYER, TimeUtil.serverTime);
            if (ActivityModel.Ins.compackPop.isNotBuyAll) {
                E.ViewMgr.Open(EViewType.NewPlayPackage);
                return;
            }
            if (this.onComboPack()) {
                return;
            }
            if (this.onSevenDay()) {
                return;
            }
            if (this.onEveryDay()) {
                return;
            }
        }
    }

    exports.DiscountPackagePop = DiscountPackagePop;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ErrCodeProxy extends BaseCfg {
        GetTabelName() {
            return "t_Err";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ErrCodeProxy();
            }
            return this._ins;
        }
    }
    class SuccessCodeProxy extends BaseCfg {
        GetTabelName() {
            return "t_Err_Sucess";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new SuccessCodeProxy();
            }
            return this._ins;
        }
    }

    exports.ErrCodeProxy = ErrCodeProxy;
    exports.SuccessCodeProxy = SuccessCodeProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SpineEffectManager {
        static get Ins() {
            if (!this._ins) {
                this._ins = new SpineEffectManager();
            }
            return this._ins;
        }
        playOnce(url, container, x = 0, y = 0, index = 0) {
            let spine = new SimpleEffect(container, url, x, y);
            spine.playEndDisplse(index);
        }
    }

    exports.SpineEffectManager = SpineEffectManager;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FightTest {
        static flyMSG() {
            if (E.Debug) {
                return true;
            }
            return false;
        }
        static print(l) {
            let str = "";
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                str += i + " " + "-->" +
                    "type:" + cell.type + "\t" + AvatarFactory.getAcName(cell) + "\n";
            }
            console.log(str);
        }
        static test3085() {
            let s = `{"protoid":3085,"type":0,"datalist":[{"uid":24,"starttime":1684771140,"endtime":1685807940,"datalist":[{"id":8,"param1":1}]}]}`;
            ActivityModel.Ins.onActivityChangeRevc(JSON.parse(s));
        }
        static fight(id) {
            let req = new FightStart_req();
            req.id = id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        static f2() {
        }
        static jjc() {
        }
        static load(name, type = EFightType.Adventure) {
            if (name.indexOf(".json") == -1) {
                name = name + ".json";
            }
            Laya.loader.load(name, new Laya.Handler(this, () => {
                let str = Laya.loader.getRes(name);
                let o = JSON.parse(str);
                if (LogSys$1.CanLog(ELogLevel.LOG)) {
                    console.log(o);
                }
                if (o.protoid == MSGID.JjcFightRevc) {
                    JjcModel.Ins.onJjcFightRevc(o);
                }
                else {
                    MainModel.Ins.onFightRevc(o);
                }
            }), null, Laya.Loader.TEXT);
        }
        static fightByStr(str) {
            let o = JSON.parse(str);
            JjcModel.Ins.onJjcFightRevc(o);
        }
    }

    exports.FightTest = FightTest;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function createBtn(that, func, color = "#ff0000", y = 0, label = null) {
        let btn = new Laya.Sprite();
        btn.width = btn.height = 100;
        btn.graphics.drawRect(0, 0, btn.width, btn.height, color, "#000000", 2);
        btn.alpha = 0.25;
        btn.hitArea = new Laya.Rectangle(0, 0, btn.width, btn.height);
        btn.on(Laya.Event.CLICK, that, func);
        btn.y = y;
        if (label) {
            let txt = new Laya.Text();
            txt.text = label;
            txt.fontSize = 24;
            btn.addChild(txt);
        }
        return btn;
    }
    function rebuildStatShow() {
        Laya.Stat['_StatRender'].createUIPre = function createUIPre(x, y) {
            var pixel = Laya.Browser.pixelRatio;
            let StatUI = Laya.Stat['_StatRender'];
            let that = StatUI;
            that._width = pixel * 360;
            that._vx = pixel * 120;
            that._height = pixel * (that['_view'].length * 12 + 3 * pixel) + 4;
            StatUI._fontSize = 12 * pixel;
            for (var i = 0; i < that._view.length; i++) {
                that._view[i].x = 4;
                that._view[i].y = i * StatUI._fontSize + 2 * pixel;
            }
            if (!that._canvas) {
                that._canvas = new Laya.HTMLCanvas(true);
                that._canvas.size(that._width, that._height);
                that._ctx = that._canvas.getContext('2d');
                that._ctx.textBaseline = "top";
                that._ctx.font = StatUI._fontSize + "px Arial";
                that._canvas.source.style.cssText = "pointer-events:none;background:rgba(150,150,150,0.5);z-index:100000;position: absolute;direction:ltr;left:" + x + "px;top:" + y + "px;width:" + (that._width / pixel) + "px;height:" + (that._height / pixel) + "px;";
            }
            if (!Laya.Browser.onKGMiniGame) {
                Laya.Browser.container.appendChild(that._canvas.source);
            }
            that._first = true;
            that.loop();
            that._first = false;
        };
        Laya.Stat['_StatRender'].show = function show(x = 0, y = 0) {
            let that = Laya.Stat['_StatRender'];
            if (!Laya.Browser._isMiniGame && !Laya.Render.isConchApp)
                that['_useCanvas'] = true;
            that['_show'] = true;
            Laya.Stat['_fpsData'].length = 60;
            that['_view'][0] = { title: "FPS(WebGL)", value: "_fpsStr", color: "yellow", units: "int" };
            that['_view'][1] = { title: "Sprite", value: "_spriteStr", color: "white", units: "int" };
            that['_view'][2] = { title: "RenderBatches", value: "renderBatches", color: "red", units: "int" };
            that['_view'][3] = { title: "SavedRenderBatches", value: "savedRenderBatches", color: "white", units: "int" };
            that['_view'][4] = { title: "CPU", value: "cpuMemory", color: "yellow", units: "int" };
            that['_view'][5] = { title: "GPU", value: "gpuMemory", color: "yellow", units: "int" };
            that['_view'][6] = { title: "Shader", value: "shaderCall", color: "white", units: "int" };
            that['_view'][7] = { title: "Canvas", value: "_canvasStr", color: "white", units: "int" };
            if (Laya.Render.is3DMode) {
                that['_view'][0].title = "FPS(3D)";
                that['_view'][8] = { title: "TriFaces", value: "trianglesFaces", color: "white", units: "int" };
                that['_view'][9] = { title: "FrustumCulling", value: "frustumCulling", color: "white", units: "int" };
                that['_view'][10] = { title: "OctreeNodeCulling", value: "octreeNodeCulling", color: "white", units: "int" };
            }
            if (that['_useCanvas']) {
                that['createUIPre'](x, y);
            }
            else
                that['createUI'](x, y);
            that.enable();
        };
    }
    let gm;
    class GmTest {
        constructor() {
            this.cmdList = [];
            let cmdList = this.cmdList;
            let that = this;
            window["gm"] = function (str) {
                let arr = str.split(" ");
                let param1 = arr[0];
                let p1 = arr[1];
                let p2 = arr[2];
                if (param1 == "serverday") {
                    that.subday(parseInt(p1));
                    return;
                }
                else if (param1 == "ui") {
                    E.ViewMgr.Open(parseInt(p1));
                    return;
                }
                else if (param1 == "fight") {
                    let name = arr[1];
                    FightTest.load(name);
                    return;
                }
                else if (param1 == "funccheck") {
                    console.log(MainModel.Ins.isOpenAllByFuncid(p1));
                    return;
                }
                else if (param1 == "act") {
                    let revc = new ActivityStatus_revc();
                    revc.datalist = [];
                    let cell = new stActivityStatus();
                    cell.uid = parseInt(p1);
                    cell.status = parseInt(p2);
                    revc.datalist.push(cell);
                    ActivityModel.Ins.setStatus(revc);
                    return;
                }
                else if (param1 == "finishtask") {
                    window["gm"](`task ${GmTest.maxTaskId()} 2`);
                    return;
                }
                else if (param1 == "debug_reward") {
                    let o = new RewardUseItem();
                    let l = [];
                    let count = parseInt(p1) || 15;
                    for (let i = 0; i < count; i++) {
                        let cell = new stCellValue();
                        cell.id = 1;
                        cell.count = i + 1;
                        l.push(cell);
                    }
                    o.itemList = l;
                    E.ViewMgr.openReward(o);
                    return;
                }
                else if (param1 == "debug_pop") {
                    MainModel.Ins['discountPack'].start();
                    return;
                }
                else if (param1 == "ad") {
                    E.sdk.lookVideo((type) => {
                        console.log("========>", type);
                    });
                    return;
                }
                else if (param1 == "debug_clear") {
                    let l = [
                        RedEnum.DISCOUNT_POP_PLAYER,
                        RedEnum.DISCOUNT,
                    ];
                    let l2 = [];
                    for (let i = 0; i < l.length; i++) {
                        let o = {};
                        o.id = l[i];
                        o.val = 0;
                        l2.push(o);
                    }
                    RedUpdateModel.Ins.saveArr(l2);
                    return;
                }
                MainModel.Ins.gm(str);
            };
            window["item"] = function () {
                return ItemProxy.Ins.List;
            };
            window["effect"] = function (url) {
                SpineEffectManager.Ins.playOnce(url, Laya.stage, Laya.stage.width / 2, Laya.stage.height / 2);
            };
            window["setred"] = function (funcid, v) {
                MainModel.Ins.funcSetRed(funcid, v);
            };
            window["openui"] = function (id) {
                E.ViewMgr.Open(id);
            };
            window["cfg"] = function (name) {
                if (name == "item")
                    return ItemProxy.Ins.List;
                if (name == "task")
                    return TaskProxy.Ins.List;
            };
            window["gc"] = function () {
                spineRes.GC();
            };
            if (E.Debug) {
                rebuildStatShow();
                let offsetY = 200;
                let btn2 = createBtn(this, () => {
                    gm("fight 1");
                }, "#00ff00", 120 + offsetY);
                let btn4 = createBtn(this, () => {
                    E.ViewMgr.Open(EViewType.WowHuanZhuangView);
                }, "#0000ff");
                btn4.y = 220 + offsetY;
                if (Laya.Utils.getQueryString("mainview")) ;
                else {
                    Laya.stage.frameLoop(60, this, () => {
                        Laya.stage.addChild(btn2);
                        Laya.stage.addChild(btn4);
                    });
                }
                window["test1"] = function (v) {
                    console.log("==========================================================");
                    let l = SpineTemplateCache.Ins.tempList;
                    for (let i = 0; i < l.length; i++) {
                        let cell = l[i];
                        if (cell.used == false) {
                            console.log(i + " " + cell.toString());
                        }
                        else {
                            console.log("%c" + i + " " + cell.toString(), "color:red");
                        }
                    }
                };
                window['gm_help'] = function () {
                    let file = `http://101.132.177.145:8001/Project1/Client/trunk/protos/GM.md`;
                    Laya.loader.load(file, new Laya.Handler(this, () => {
                        console.log(Laya.loader.getRes(file));
                    }), null, Laya.Loader.TEXT);
                };
                window["tt1"] = function () {
                };
            }
            gm = window["gm"];
            window["f"] = function () {
                window["gm"](`task ${GmTest.maxTaskId()} 2`);
            };
            window["f2"] = function (v) {
                let _emailData = new stMail();
                _emailData.itemlist = [];
                let _cell = new stCellValue();
                _cell.id = 3;
                _cell.count = 10;
                _emailData.itemlist.push(_cell);
                _emailData.content = v == 1 ? "大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑,大师的卡仕达看见啥空间的哈萨克觉得好看等哈就卡仕达卡仕达看哈数据的哈萨克觉得大家快速导航卡刷道具卡杀地煞肯德基哈桑" : "abc";
                E.ViewMgr.Open(EViewType.MailShow, null, _emailData);
            };
            window["ui"] = function (id) {
                E.ViewMgr.Open(id);
            };
            window['fight'] = function (name, type) {
                FightTest.load(name, type);
            };
            window["load"] = function (v) {
                if (v > 0) {
                    E.ViewMgr.ShowLoading();
                }
                else {
                    E.ViewMgr.Close(EViewType.Loading);
                }
            };
            window["red"] = function (funcId, v) {
                MainModel.Ins.funcSetRed(funcId, v);
            };
        }
        onTimeLoop() {
            if (this.cmdList.length > 0) {
                MainModel.Ins.gm(this.cmdList.shift());
            }
        }
        static maxTaskId() {
            let taskstr = "";
            let l1 = TaskProxy.Ins.taskList;
            for (let i = 0; i < l1.length; i++) {
                taskstr += l1[i] + " ";
            }
            let maxTaskId = l1[l1.length - 1];
            return maxTaskId;
        }
        subday(day) {
            let servertime = TimeUtil.openTime.toNumber() / 1000 + day * 60 * 24 * 60;
            window['gm'](`server ${servertime}`);
        }
    }

    exports.GmTest = GmTest;
    exports.rebuildStatShow = rebuildStatShow;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class JjzmlItemCtl {
        constructor(skin) {
            this.skin = skin;
            this.skin.on(Laya.Event.CLICK, this, this.onTips);
        }
        onTips(e) {
            e.stopPropagation();
            MainModel.Ins.showSmallTips(this._itemVo.getName(), this._itemVo.getDesc(), this.skin);
        }
        setData(vo, cfg) {
            if (vo) {
                this.skin.isGetImg.visible = false;
                this.skin.bg0.visible = false;
                this.skin.tf1.text = E.LangMgr.getLang("QianDao1", StringUtil.toChinesNum(cfg.f_Days));
                let itemVo = ItemViewFactory.convertItem(cfg.f_Item);
                this._itemVo = itemVo;
                this.skin.icon1.skin = itemVo.getIcon();
                this.skin.countTf.text = itemVo.count + "";
                let _status = vo.getParam1(cfg.f_id);
                switch (_status) {
                    case EActivityLingQu.Nothing:
                        break;
                    case EActivityLingQu.KeLingQu:
                        this.skin.bg0.visible = true;
                        break;
                    case EActivityLingQu.YiLingQu:
                        this.skin.isGetImg.visible = true;
                        break;
                }
            }
        }
        dispose() {
            this.skin.off(Laya.Event.CLICK, this, this.onTips);
        }
    }
    class JjzmlView extends ViewBase {
        constructor() {
            super(...arguments);
            this.itemList = [];
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("jjzml.atlas");
        }
        onExit() {
            ActivityModel.Ins.off(ActivityEvent.UpdateData, this, this.onRefresh);
            while (this.itemList.length) {
                let cell = this.itemList.pop();
                cell.dispose();
            }
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = JjzmlModel.Ins;
                this.mMask = true;
                this.UI = this._ui = new ui.views.jjzml.ui_jjzml_mainUI();
                this.bindClose(this._ui.close1);
                this._signCtl = ButtonCtl.CreateBtn(this._ui.btn1, this, this.onQianDaoHandler);
                this.itemList = [];
                for (let i = 0; i < this._ui.rewardCon.numChildren; i++) {
                    this.itemList.push(new JjzmlItemCtl(this._ui.rewardCon.getChildAt(i)));
                }
                this._ui.tf2.visible = false;
                RedUpdateModel.Ins.addRedImg(this._ui.btn1);
            }
        }
        onQianDaoHandler() {
            if (!this.model.isOpen) {
                E.ViewMgr.ShowMidError(E.getLang("activityend"));
                return;
            }
            ActivityModel.Ins.lingQu(this._vo.uid, 0);
        }
        onInit() {
            ActivityModel.Ins.on(ActivityEvent.UpdateData, this, this.onRefresh);
            this.onRefresh();
        }
        onRefresh() {
            this._vo = ActivityModel.Ins.getVo(EActivityType.JJZML);
            if (this._vo) {
                let list1 = t_Pack_Attendance_Chief.Ins.List;
                for (let i = 0; i < list1.length; i++) {
                    let cell = this.itemList[i];
                    cell.setData(this._vo, list1[i]);
                }
                if (this._vo.hasKeLingQu()) {
                    this._signCtl.visible = true;
                    this._ui.tf2.visible = false;
                }
                else {
                    this._signCtl.visible = false;
                    this._ui.tf2.visible = true;
                }
            }
        }
    }

    exports.JjzmlView = JjzmlView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_Pack_Attendance_Chief extends BaseCfg {
        GetTabelName() {
            return "t_Pack_Attendance_Chief";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Pack_Attendance_Chief();
            }
            return this._ins;
        }
    }
    class JjzmlModel extends BaseModel {
        static get Ins() {
            if (!this._ins) {
                this._ins = new JjzmlModel();
            }
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            this.Reg(new JjzmlView(EViewType.JJZML));
        }
        get isOpen() {
            return ActivityModel.Ins.isOpenByPackid(EActivityType.JJZML);
        }
    }

    exports.JjzmlModel = JjzmlModel;
    exports.t_Pack_Attendance_Chief = t_Pack_Attendance_Chief;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MainUpdate {
        constructor() {
            this.isPlaying = false;
        }
        UpdateGold() {
        }
        UpdateExp() {
        }
        UpdateBattle() {
        }
        UpdateMoney() {
        }
        UpdateEquip() {
        }
        UpdateBoxCnt() {
        }
        UpdateBoxLv() {
        }
        UpdateMainAttr() {
        }
        AddHero() {
        }
        UpdateSmallIcon() {
        }
        playLevelUp() {
        }
    }

    exports.MainUpdate = MainUpdate;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WingIdProxy extends BaseCfg {
        GetTabelName() {
            return "t_Wing_ID";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WingIdProxy();
            }
            return this._ins;
        }
        getWingName(wingId) {
            let _l = this.List;
            const cfg = _l.find(o => o.f_id === wingId);
            if (!cfg) {
                throw new Error(`缺少翅膀#${wingId}的配置`);
            }
            return cfg.f_Wing;
        }
        getWingUpgradeAttrList(wingId, level, stage) {
            const initAttrList = WingInitProxy.Ins.getWingInitAttrList(wingId);
            const levelList = WingExpProxy.Ins.getLevelList();
            const accLevel = levelList.filter(o => o.stage < stage).reduce((sum, o) => sum += o.maxLevel, 0) + level;
            const levelAttrList = WingUpgradeProxy.Ins.getWingLevelAttrList(accLevel);
            const stageAttrList = WingEffectValueProxy.Ins.getWingStageAttrList(wingId, stage);
            const totalList = [...initAttrList, ...levelAttrList, ...stageAttrList];
            const attrIds = [...new Set(totalList.map(o => o.id))];
            const attrList = attrIds.map(id => {
                const value = totalList.filter(o => o.id === id).reduce((sum, o) => sum += o.value, 0);
                return { id, value };
            });
            return attrList.sort((a, b) => a.id - b.id);
        }
        getWingAttrList(wingId, level, stage, treasureStage) {
            const upgradeAttrList = this.getWingUpgradeAttrList(wingId, level, stage);
            const treasureAttrList = WingTreasureUpgradeProxy.Ins.getTreasureAttrList(treasureStage);
            const totalList = [...upgradeAttrList, ...treasureAttrList];
            const attrIds = [...new Set(totalList.map(o => o.id))];
            const attrList = attrIds.map(id => {
                const value = totalList.filter(o => o.id === id).reduce((sum, o) => sum += o.value, 0);
                return { id, value };
            });
            return attrList.sort((a, b) => a.id - b.id);
        }
        getConfigWingList() {
            let _l = this.List;
            return _l.filter(o => Number(o.f_id))
                .map(o => ({
                wingId: Number(o.f_id),
                wingName: o.f_Wing,
                priceItemVo: Number(o.f_WingPrice) === 0
                    ? undefined
                    : ItemViewFactory.convertItemList(o.f_WingPrice)[0]
            }));
        }
    }
    class WingInitProxy extends BaseCfg {
        GetTabelName() {
            return "t_Wing_Init";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WingInitProxy();
            }
            return this._ins;
        }
        getWingInitAttrList(wingId) {
            let _l = this.List;
            const cfg = _l.find(o => o.f_id === wingId);
            if (!cfg) {
                throw new Error(`t_Wing_Init缺少翅膀#${wingId}的配置`);
            }
            const attrList = [];
            Object.keys(cfg).forEach(key => {
                if (/^f_\d{5}$/.test(key)) {
                    const k = Number(key.replace('f_', ''));
                    const val = Number(cfg[key]);
                    attrList.push({ id: k, value: val });
                }
            });
            return attrList;
        }
    }
    class WingUpgradeProxy extends BaseCfg {
        GetTabelName() {
            return "t_Wing_Upgrade";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WingUpgradeProxy();
            }
            return this._ins;
        }
        getWingLevelAttrList(accLevel) {
            let _l = this.List;
            const attrList = [];
            _l.forEach((cfg) => {
                if (Number(cfg.f_attribute)) {
                    const k = Number(cfg.f_attribute);
                    const val = Number(cfg.f_UpgradeValue);
                    attrList.push({ id: k, value: val * accLevel });
                }
            });
            return attrList;
        }
    }
    class WingEffectValueProxy extends BaseCfg {
        GetTabelName() {
            return "t_Wing_EffectValue";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WingEffectValueProxy();
            }
            return this._ins;
        }
        getWingStageAttrList(wingId, stage) {
            let _l = this.List;
            const cfg = _l.find(o => Number(o.f_WingID) === wingId);
            if (!cfg) {
                throw new Error(`t_Wing_EffectValue缺少翅膀#${wingId}的配置`);
            }
            const attrList = [];
            Object.keys(cfg).forEach(key => {
                if (/^f_\d{5}$/.test(key)) {
                    const k = Number(key.replace('f_', ''));
                    const val = Number(cfg[key]);
                    attrList.push({ id: k, value: val * stage });
                }
            });
            return attrList;
        }
        getWingStageConfigAttrList(wingId) {
            let _l = this.List;
            const cfg = _l.find(o => Number(o.f_WingID) === wingId);
            if (!cfg) {
                throw new Error(`t_Wing_EffectValue缺少翅膀#${wingId}的配置`);
            }
            const attrList = [];
            Object.keys(cfg).forEach(key => {
                if (/^f_\d{5}$/.test(key)) {
                    const k = Number(key.replace('f_', ''));
                    const val = Number(cfg[key]);
                    attrList.push({ id: k, value: val });
                }
            });
            return attrList;
        }
    }
    class WingExpProxy extends BaseCfg {
        GetTabelName() {
            return "t_Wing_Exp";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WingExpProxy();
            }
            return this._ins;
        }
        getNextLevelData(level, stage) {
            var _a;
            let _l = this.List;
            if (!_l.length) {
                throw new Error(`t_Wing_Exp配置错误`);
            }
            const maxStage = Math.max(..._l.map(o => o.f_id), 1) - 1;
            if (stage > maxStage) {
                throw new Error(`t_Wing_Exp缺少stage#${stage}的配置`);
            }
            const maxLevel = ((_a = _l.find(o => o.f_id - 1 === stage)) === null || _a === void 0 ? void 0 : _a.f_Rank0) || 0;
            if (level > maxLevel) {
                throw new Error(`t_Wing_Exp缺少stage#${stage} level#${level}的配置`);
            }
            const restLevel = maxLevel - level;
            const nextLevel = restLevel ? level + 1 : 0;
            const nextStage = Math.min(stage + 1, maxStage);
            const nextLevelStage = restLevel ? stage : nextStage;
            const nextStageLevel = 0;
            return {
                isNextFinish: !restLevel && (stage === nextStage),
                restLevel,
                nextLevel,
                nextLevelStage,
                nextStage,
                nextStageLevel
            };
        }
        getLevelList() {
            let _l = this.List;
            if (!_l.length) {
                throw new Error(`t_Wing_Exp配置错误`);
            }
            const validateList = _l.map(o => ({
                stage: o.f_id - 1,
                maxLevel: o.f_Rank0
            }));
            return validateList.sort((a, b) => a.stage - b.stage);
        }
    }
    class WingConfigProxy extends BaseCfg {
        GetTabelName() {
            return "t_Wing_Config";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WingConfigProxy();
            }
            return this._ins;
        }
        getUpgradeItemList(stage) {
            let _l = this.List;
            const cfg = _l.find(o => Number(o.f_Rank) === stage);
            let levelList = [];
            let stageList = [];
            if (!cfg) {
                return { levelList, stageList };
            }
            levelList = ItemViewFactory.convertItemList(cfg.f_ItemIDLevel).sort((a, b) => a.cfgId - b.cfgId);
            stageList = ItemViewFactory.convertItemList(cfg.f_ItemIDRank).sort((a, b) => a.cfgId - b.cfgId);
            return { levelList, stageList };
        }
    }
    class WingTreasureInitProxy extends BaseCfg {
        GetTabelName() {
            return "t_Wing_Treasure_Init";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WingTreasureInitProxy();
            }
            return this._ins;
        }
        getTreasureInitAttrList() {
            let _l = this.List;
            return _l.map(o => ({
                id: Number(o.f_TreasureEffect),
                value: Number(o.f_TreasureInit)
            })).filter(o => o.id).sort((a, b) => a.id - b.id);
        }
    }
    class WingTreasureUpgradeProxy extends BaseCfg {
        GetTabelName() {
            return "t_Wing_Treasure_Upgrade";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WingTreasureUpgradeProxy();
            }
            return this._ins;
        }
        getTreasureAttrList(stage) {
            let _l = this.List;
            const initAttrList = WingTreasureInitProxy.Ins.getTreasureInitAttrList();
            const list = _l.filter(o => o.f_id <= stage).map(o => ({ idStr: o.f_TreasureEffect, value: Number(o.f_UpgradeValue) }));
            const attrs = list.map(o => o.idStr);
            return initAttrList.map(o => {
                const index = attrs.lastIndexOf(o.id.toString());
                return {
                    id: o.id,
                    value: list.filter(item => item.idStr.indexOf(o.id.toString()) !== -1).reduce((sum, cur) => sum += cur.value, 0),
                    level: Math.floor((index + 1) / 7)
                };
            });
        }
        getMaxUpgradeStage() {
            return Math.max(...this.List.map(o => o.f_id));
        }
    }
    class WingTreasureConfigProxy extends BaseCfg {
        GetTabelName() {
            return "t_Wing_Treasure_Config";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WingTreasureConfigProxy();
            }
            return this._ins;
        }
        checkWingTreasureFullLevel(treasureStage) {
            const fullRankStage = this.List.filter(o => !isNaN(o.f_TreasureRank)).map(o => o.f_TreasureRank).length * 7;
            const fullUpgradeStage = WingTreasureUpgradeProxy.Ins.getMaxUpgradeStage();
            return treasureStage >= Math.min(fullRankStage, fullUpgradeStage);
        }
        getTreasurResources(rank) {
            let _l = this.List;
            const cfg = _l.find(o => Number(o.f_TreasureRank) === rank);
            if (!cfg) {
                throw new Error(`t_Wing_Treasure_Config缺少境界#${rank}的配置`);
            }
            return ItemViewFactory.convertItemList(cfg.f_Item).sort((a, b) => a.cfgId - b.cfgId);
        }
        getTreasureUpgradeRateStr(rank) {
            let _l = this.List;
            const cfg = _l.find(o => o.f_TreasureRank === rank);
            if (!cfg) {
                throw new Error(`t_Wing_Treasure_Config缺少境界#${rank}的配置`);
            }
            return parseFloat((cfg.f_Rank1 / 10000).toFixed(2)) + '%';
        }
    }
    class WingUpdateAttrSkinProxy {
        static setDataThan(skin, attrVo) {
            let model = MainModel.Ins;
            skin.tf1.text = model.getAttrNameIdByID(attrVo.id);
            skin.valTf1.text = attrConvert(attrVo.id, attrVo.now);
            if (attrVo.next && (attrVo.now !== attrVo.next)) {
                skin.upimg.visible = true;
                skin.valTf2.text = attrConvert(attrVo.id, attrVo.next);
            }
            else {
                skin.upimg.visible = false;
                skin.valTf2.text = '';
            }
        }
        static setDataThan2(skin, attrVo) {
            let model = MainModel.Ins;
            if (!attrVo) {
                skin.tf1.text = '';
                skin.valTf.text = '';
                return;
            }
            if (attrVo.title) {
                skin.tf1.text = attrVo.title;
            }
            else {
                skin.tf1.text = model.getAttrNameIdByID(attrVo.id);
            }
            if (attrVo.addValue) {
                const valText = attrConvert(attrVo.id, attrVo.value).replace('%', '');
                const totalText = attrConvert(attrVo.id, attrVo.value + attrVo.addValue);
                const addValText = attrConvert(attrVo.id, attrVo.addValue).replace('%', '');
                skin.valTf.text = `${totalText}(${valText}+${addValText})`;
            }
            else {
                const valText = attrConvert(attrVo.id, attrVo.value);
                skin.valTf.text = `${valText}`;
            }
        }
        static setWingListItem(skin, itemVo) {
            const wingId = itemVo.wingId;
            const selected = itemVo.selected;
            const locked = itemVo.locked;
            const weared = itemVo.weared;
            skin.wingLeftIcon.skin = ItemViewFactory.getWingIcon(wingId);
            skin.wingRightIcon.skin = ItemViewFactory.getWingIcon(wingId);
            if (selected !== undefined) {
                skin.selectedView.visible = selected ? true : false;
                skin.selectedBg.visible = selected ? true : false;
            }
            if (locked !== undefined) {
                skin.lockView.visible = locked ? true : false;
            }
            if (weared !== undefined) {
                skin.wearedIcon.visible = weared ? true : false;
            }
        }
        static setWingInfoAttrItem(skin, attrVo) {
            let model = MainModel.Ins;
            if (attrVo === 'empty') {
                skin.tf1.text = '';
                skin.valTf.text = '';
                skin.visible = false;
            }
            else {
                skin.tf1.text = model.getAttrNameIdByID(attrVo.id);
                skin.valTf.text = attrConvert(attrVo.id, attrVo.value);
            }
        }
    }

    exports.WingConfigProxy = WingConfigProxy;
    exports.WingEffectValueProxy = WingEffectValueProxy;
    exports.WingExpProxy = WingExpProxy;
    exports.WingIdProxy = WingIdProxy;
    exports.WingInitProxy = WingInitProxy;
    exports.WingTreasureConfigProxy = WingTreasureConfigProxy;
    exports.WingTreasureInitProxy = WingTreasureInitProxy;
    exports.WingTreasureUpgradeProxy = WingTreasureUpgradeProxy;
    exports.WingUpdateAttrSkinProxy = WingUpdateAttrSkinProxy;
    exports.WingUpgradeProxy = WingUpgradeProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class WingModel extends BaseModel {
        constructor() {
            super(...arguments);
            this.playerWingIds = [];
            this.wingFightCapacity = 0;
            this.wingTreasureFightCapacity = 0;
            this.wingLevelAttrs = [];
            this.wingStageAttrs = [];
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new WingModel();
            }
            return this._ins;
        }
        onInitCallBack() {
            this.wingId = undefined;
            this.level = undefined;
            this.stage = undefined;
            this.wingName = undefined;
            this.playerWingIds = [];
            this.treasureStage = undefined;
            this.wingFightCapacity = undefined;
            this.wingTreasureFightCapacity = undefined;
        }
        initMsg() {
        }
        onWearedWingDataRevc(data) {
            const wingId = data.wingData.wingId;
            const level = data.wingData.wingInfoData.wingLevel;
            const stage = data.wingData.wingInfoData.wingStage;
            const wingName = WingIdProxy.Ins.getWingName(wingId);
            MainModel.Ins.wingId = wingId;
            this.wingId = wingId;
            this.level = level;
            this.stage = stage;
            this.wingName = wingName;
            this.wingFightCapacity = data.wingData.wingPower;
            this.wingLevelAttrs = data.wingData.levelAttrList;
            this.wingStageAttrs = data.wingData.stageAttrList;
            this.refreshWingView();
            this.updateRed();
        }
        updateRed() {
            if (TaskModel.Ins.isFuncOpen(EFuncDef.Wing)) {
                if (this.mLevelUp) {
                    DotManager.addMainDot("icon3", -20, -5);
                }
                else {
                    DotManager.remMainDot("icon3");
                }
                this.event(WingModel.EventRedRefresh);
            }
        }
        get mLevelUp() {
            const levelData = WingExpProxy.Ins.getNextLevelData(this.level, this.stage);
            const stage = this.stage;
            if (levelData.restLevel) {
                const itemListData = WingConfigProxy.Ins.getUpgradeItemList(stage);
                const itemList = itemListData.levelList;
                for (let i = 0; i < itemList.length; i++) {
                    let cell = itemList[i];
                    if (MainModel.Ins.mRoleData.getVal(cell.cfgId) < cell.count) {
                        return false;
                    }
                }
                return true;
            }
        }
        refreshWingView() {
            const infoView = E.ViewMgr.Get(EViewType.WingInfo);
            const levelView = E.ViewMgr.Get(EViewType.WingMainLevel);
            const stageView = E.ViewMgr.Get(EViewType.WingMainStage);
            const exchangeView = E.ViewMgr.Get(EViewType.WingExchange);
            const treasureView = E.ViewMgr.Get(EViewType.WingTreasure);
            const mainView = E.ViewMgr.Get(EViewType.Main);
            if (infoView.IsShow()) {
                infoView.refresh(true);
            }
            const level = this.level;
            const stage = this.stage;
            const levelData = WingExpProxy.Ins.getNextLevelData(level, stage);
            if (levelView.IsShow()) {
                if (!levelData.restLevel) {
                    E.ViewMgr.Close(EViewType.WingMainLevel);
                    E.ViewMgr.Open(EViewType.WingMainStage);
                }
                else {
                    levelView.refresh();
                    if (stageView.IsShow()) {
                        stageView.refresh();
                    }
                }
            }
            else if (stageView.IsShow()) {
                if (levelData.restLevel) {
                    E.ViewMgr.Close(EViewType.WingMainStage);
                    E.ViewMgr.Open(EViewType.WingMainLevel);
                }
                else {
                    stageView.refresh();
                    if (levelView.IsShow()) {
                        levelView.refresh();
                    }
                }
            }
            if (exchangeView.IsShow()) {
                exchangeView.refresh();
            }
            if (treasureView.IsShow()) {
                treasureView.refresh();
            }
            if (mainView.IsShow()) {
                mainView.updateWingItem();
            }
            this.showTips();
        }
        showTips() {
            const type = this.type;
            if (!type)
                return;
            switch (type) {
                case 'LEVEL':
                    E.ViewMgr.ShowMidOk('升级成功');
                    break;
                case 'STAGE':
                    E.ViewMgr.ShowMidOk('升阶成功');
                    break;
                case 'EXCHANGE':
                    E.ViewMgr.ShowMidOk('更换成功');
                    break;
            }
        }
        getWingTreasureUpgradeName(treasureStage) {
            return treasureStage % 7 ? '升级' : '突破';
        }
        onWingListRevc(data) {
            console.log('onWingListRevc', data);
            this.playerWingIds = data.list || [];
            const exchangeView = E.ViewMgr.Get(EViewType.WingExchange);
            if (exchangeView.IsShow()) {
                exchangeView.refresh();
                E.ViewMgr.ShowMidOk('购买成功');
            }
            else {
                E.ViewMgr.Open(EViewType.WingExchange, null);
            }
        }
        onWingTreasureRevc(data) {
            const stage = this.treasureStage;
            this.treasureStage = data.stage;
            this.wingTreasureFightCapacity = data.treasurePower;
            this.refreshWingView();
            if (!WingModel.Ins.type)
                return;
            if (E.ViewMgr.IsOpen(EViewType.WingTreasure)) {
                const upgradeName = this.getWingTreasureUpgradeName(stage + 1);
                if (data.errorID) {
                    E.ViewMgr.ShowMidError(`${upgradeName}失败`);
                }
                else {
                    E.ViewMgr.ShowMidOk(`${upgradeName}成功`);
                }
            }
        }
        showPlayerWingInfo(data) {
            const wingId = data.wingId;
            const wingName = WingIdProxy.Ins.getWingName(wingId);
            E.ViewMgr.Open(EViewType.WingInfo, null, Object.assign(Object.assign({}, data), { wingName }));
        }
        getOwnerWingData() {
            const wingId = WingModel.Ins.wingId;
            const level = WingModel.Ins.level;
            const stage = WingModel.Ins.stage;
            const treasureStage = WingModel.Ins.treasureStage;
            const wingName = WingModel.Ins.wingName;
            const wingFightCapacity = WingModel.Ins.wingFightCapacity;
            const wingTreasureFightCapacity = WingModel.Ins.wingTreasureFightCapacity;
            return {
                wingId,
                level,
                stage,
                treasureStage,
                isOwner: true,
                wingName,
                wingFightCapacity,
                wingTreasureFightCapacity
            };
        }
    }
    WingModel.EventRedRefresh = "EventRedRefresh";
    WingModel.wingAttrs = [10012, 10013, 10014, 10015, 10016, 10017];

    exports.WingModel = WingModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (EServerVersion) {
        EServerVersion[EServerVersion["Version_1"] = 1] = "Version_1";
    })(exports.EServerVersion || (exports.EServerVersion = {}));
    (function (EBuyType) {
        EBuyType[EBuyType["Item"] = 0] = "Item";
        EBuyType[EBuyType["LabourShop"] = 1] = "LabourShop";
    })(exports.EBuyType || (exports.EBuyType = {}));
    (function (ESellStatus) {
        ESellStatus[ESellStatus["Start"] = 1] = "Start";
        ESellStatus[ESellStatus["End"] = 2] = "End";
    })(exports.ESellStatus || (exports.ESellStatus = {}));
    var ELoginCode;
    (function (ELoginCode) {
        ELoginCode[ELoginCode["Succeed"] = 0] = "Succeed";
        ELoginCode[ELoginCode["PARAM_ERROR"] = 10003] = "PARAM_ERROR";
    })(ELoginCode || (ELoginCode = {}));
    class SignStatus {
        get signType() {
            if (!this.serverVo) {
                return 0;
            }
            return this.serverVo.val;
        }
        reset() {
            this.serverVo = null;
        }
    }
    (function (EMailStatus) {
        EMailStatus[EMailStatus["notRead"] = 0] = "notRead";
        EMailStatus[EMailStatus["isReaded"] = 1] = "isReaded";
        EMailStatus[EMailStatus["notLingqu"] = 2] = "notLingqu";
        EMailStatus[EMailStatus["isLingqued"] = 3] = "isLingqued";
        EMailStatus[EMailStatus["isDeleted"] = 4] = "isDeleted";
    })(exports.EMailStatus || (exports.EMailStatus = {}));
    (function (EMailReqType) {
        EMailReqType[EMailReqType["List"] = 0] = "List";
        EMailReqType[EMailReqType["LingQuOrRead"] = 1] = "LingQuOrRead";
        EMailReqType[EMailReqType["Del"] = 2] = "Del";
    })(exports.EMailReqType || (exports.EMailReqType = {}));
    (function (EMainSkin) {
        EMainSkin[EMainSkin["Null"] = 0] = "Null";
        EMainSkin[EMainSkin["Drum"] = 1] = "Drum";
        EMainSkin[EMainSkin["Kotow"] = 2] = "Kotow";
    })(exports.EMainSkin || (exports.EMainSkin = {}));
    (function (ESpineAnimIndex) {
        ESpineAnimIndex[ESpineAnimIndex["Kotow"] = 0] = "Kotow";
        ESpineAnimIndex[ESpineAnimIndex["Drum"] = 1] = "Drum";
        ESpineAnimIndex[ESpineAnimIndex["SmallDrum"] = 2] = "SmallDrum";
    })(exports.ESpineAnimIndex || (exports.ESpineAnimIndex = {}));
    (function (EConquestType) {
        EConquestType[EConquestType["Zero"] = 0] = "Zero";
        EConquestType[EConquestType["NotLingQu"] = 1] = "NotLingQu";
        EConquestType[EConquestType["IsLingQu"] = 2] = "IsLingQu";
    })(exports.EConquestType || (exports.EConquestType = {}));
    class NoticePopTipSelVo {
        constructor() {
            this.hasNotOpen = false;
            this.key = RedEnum.NOTICE_SEL;
        }
        get sel() {
            let cell = RedUpdateModel.Ins.getByID(this.key);
            if (cell) {
                let _status = false;
                if (cell.type == 0) ;
                else if (cell.type == 1) {
                    _status = true;
                }
                if (TimeUtil.isNotToday(cell.type)) ;
                else {
                    _status = true;
                }
                return _status;
            }
            return false;
        }
        reset() {
            this.hasNotOpen = false;
        }
        set sel(v) {
            let time = TimeUtil.serverTime;
            RedUpdateModel.Ins.save(this.key, v ? time : 0);
        }
        autoOpen() {
            if (!this.sel && !this.hasNotOpen) {
                this.hasNotOpen = true;
                let localNoticeList = MainModel.Ins.localNoticeList;
                if (localNoticeList.length > 0) {
                    let cell = localNoticeList[0];
                    if (cell.frequent == 1) {
                        MainModel.Ins.openPopNotice(localNoticeList);
                    }
                }
            }
        }
    }
    class MainModel extends BaseModel {
        constructor() {
            super();
            this.redNameKeyList = [];
            this.autoSell = false;
            this._mainUpdate = new MainUpdate();
            this.oldSkin = {};
            this.loginTime = 0;
            this.isInitAlready = false;
            this.fightAnimScale = 1.0;
            this.unpackIdList = [];
            this.ser_ver = "";
            this._sideBarStatus = 0;
            this.discountPack = new DiscountPackagePop();
            this._drawList = [];
            this.taLBId = [3, 4, 13, 11, 12];
            this.mSellStatus = exports.ESellStatus.End;
            this.quickMsgList = [];
            this.equipList = [];
            this.redList = [];
            this.normalChest = new ChestPolicy();
            this.autoChest = new ChestAutoPolicy();
            this._windId = 0;
            this._mSellList = [];
            this._mEquipList = [];
            this.curChest = this.normalChest;
            this.reelCtl = new ReelAnimCtl();
            this.isNewRole = false;
            this.animUseMs = 0;
            this.bMailRed = false;
            this.yxqRed = false;
            this.mailList = [];
            this.pomaList = [];
            this.localNoticeList = [];
            this.noticeSel = new NoticePopTipSelVo();
            this.boxAuto = new BoxAuto_revc();
            this.peakOpenTime = 0;
            this.serverVer = 0;
            this.authBtnShow = 0;
            this.animIndex = 0;
            this.clickTimeMs = 0;
            this.heroPackVo = new HeroPackVo();
            this.sign = new SignStatus();
            this.boxOldShow = false;
            this.boxBoxCommitState = false;
            this.mRoleData = new MainRoleVo();
            this.quickCfg = null;
            this.boxAutoVo = new BoxAutoVo();
            this.adventureVo = new AdventureVo();
            this.gameStyle_server = exports.EMainSkin.Null;
            this.hasLvUpBtnRed = false;
            this.boxUsedCount = 0;
            this.lv = 0;
            this.exp = 0;
            this.boxMinQua = 1;
            this.configIsSame = true;
            this.newPlayerCloseRedList = [];
            this._snapSpr = new Laya.Image();
            this.pwd = "0";
            this.curVer = "";
            this.redl = [];
            window['main'] = this;
            this.adventureBossData = new Adventure_Boss_revc();
            this.adventureBossData.cnt = 0;
            this.adventureBossData.f_id = 0;
            new GmTest();
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new MainModel();
            }
            return this._ins;
        }
        get skinStyle() {
            let _skinStyle1 = Laya.Utils.getQueryString("skinStyle");
            if (Laya.Browser.onPC && _skinStyle1) {
                if (_skinStyle1) {
                    return parseInt(_skinStyle1);
                }
            }
            else {
                if (this.gameStyle_server != exports.EMainSkin.Null) {
                    return this.gameStyle_server;
                }
                if (SySdk.Ins.cbsgTunnelOpenType != 1) {
                    return exports.EMainSkin.Drum;
                }
                return exports.EMainSkin.Kotow;
            }
            let _skinStyle = parseInt(System_RefreshTimeProxy.Ins.getNumberVal(71));
            if (_skinStyle) {
                return _skinStyle;
            }
            return exports.EMainSkin.Kotow;
        }
        get DEFAULT_ANIM_INDEX() {
            return 0;
        }
        onInitCallBack() {
            this._sideBarStatus = 0;
            this.allLife = null;
            this.monthCard = null;
            this.newPlayerCloseRedList = [];
            this.gameStyle_server = exports.EMainSkin.Null;
            this.redList = [];
            this.sign.reset();
            this.heroPackVo.reset();
            this.boxBoxCommitState = false;
            this.serverVer = 0;
            this.isInitAlready = false;
            this.boxOldShow = false;
            RedUpdateModel.Ins.clear();
            for (let o in this.oldSkin) {
                delete (this.oldSkin[o]);
            }
            for (let i = 0; i < this._drawList.length; i++) {
                let cell = this._drawList[i];
                if (cell.type == DrawCallNode.TYPE_DOT) {
                    cell.visible = false;
                }
            }
            this.wingId = 0;
            this.reelCtl.visible = true;
            this.curChest = this.normalChest;
            this.quickCfg = null;
            this.bMailRed = false;
            this.pomaList = [];
            this.localNoticeList = [];
            this.noticeSel.reset();
            WingModel.Ins.type = null;
            this.boxReset();
            this.peakOpenTime = 0;
            this.animIndex = this.DEFAULT_ANIM_INDEX;
            window['onShowData'] = null;
            this.isNewRole = false;
            E.AudioMgr.SetMusicMute(false);
            E.AudioMgr.SetSoundMute(false);
            this.conquestData = null;
            this.fightAnimScale = 1.0;
            this.ser_ver = "";
            this.StopChestProxy(false);
            this.unpackIdList = [];
            let mainView = E.ViewMgr.Get(EViewType.Main);
            if (mainView) {
                mainView.setLayerEvt(false);
                if (mainView.skin) {
                    mainView.skin.setdot.visible = false;
                }
                mainView.reset();
            }
            this.exp = 0;
            this.lv = 0;
            if (this.getView()) {
                this.mainView.gj && this.mainView.gj.onExit();
                this.mainView.avatarFight && this.mainView.avatarFight.onExit();
            }
        }
        getGameClubData() {
            if (!TaskModel.Ins.isFuncOpen(EFuncDef.YouXiQuan, false))
                return;
            E.sdk.getGameClubData((res) => {
                var _a;
                if (res) {
                    const d = JSON.parse(res);
                    const dataList = (_a = d === null || d === void 0 ? void 0 : d.data) === null || _a === void 0 ? void 0 : _a.dataList;
                    if (dataList && dataList.length) {
                        let gameClubData = ActivityModel.Ins.gameClubData;
                        const m = new Map([
                            [1, 'join'], [4, 'like'], [6, 'publish'],
                        ]);
                        let isRed = false;
                        dataList.forEach((element, i) => {
                            var _a, _b;
                            const key = m.get(element.dataType.type);
                            gameClubData[key] = element.value;
                            const fid = i + 1;
                            const conf = System_CommunityProxy.Ins.getCfgById(fid);
                            const revcData = (_b = (_a = MainModel.Ins.clubReward) === null || _a === void 0 ? void 0 : _a.dataList) === null || _b === void 0 ? void 0 : _b.find(o => o.id === fid);
                            if ((revcData === null || revcData === void 0 ? void 0 : revcData.state) !== 1 && gameClubData[key] >= (conf === null || conf === void 0 ? void 0 : conf.f_taskvalue)) {
                                isRed = true;
                            }
                        });
                        if (isRed) {
                            MainModel.Ins.yxqRed = true;
                            this.updateYXQ_red();
                        }
                        ActivityModel.Ins.gameClubData = gameClubData;
                        ActivityModel.Ins.gameClubAuth = true;
                        MainModel.Ins.event(MainEvent.GameClubUpdate);
                    }
                }
                else {
                    ActivityModel.Ins.gameClubAuth = false;
                    MainModel.Ins.event(MainEvent.GameClubUpdate);
                }
            });
        }
        get animSettingList() {
            if (!this._animSettingList) {
                this._animSettingList = [];
                this._animSettingList.push(new AnimSetting("remote/shezhi/tyjy.png", "o/spine/boxkt/boxkt", "remote/main/main/zy_bg2.jpg", exports.ESpineAnimIndex.Kotow));
                this._animSettingList.push(new AnimSetting("remote/shezhi/bx.png", "o/spine/boxgulv13/boxgulv13", "remote/main/main/bgzy.png", exports.ESpineAnimIndex.Drum));
                this._animSettingList.push(new AnimSetting("remote/shezhi/bx.png", "o/spine/boxgulv14/boxgulv14", "remote/main/main/bgzy.png", exports.ESpineAnimIndex.SmallDrum));
            }
            return this._animSettingList;
        }
        get isMonthCanUsed() {
            if (!this.monthCard || this.monthCard && this.monthCard.val == ECardLingqu.Nothing) {
                return false;
            }
            return true;
        }
        showLoading() {
            let vo = new LoadingVo();
            vo.start = 0;
            vo.end = 0.75;
            vo.duration = 200;
            vo.callBack = new Laya.Handler(this, this.loadEnd);
            E.ViewMgr.loading(vo);
        }
        loadEnd() {
            this.enterGame();
            let vo = new LoadingVo();
            vo.start = 0.75;
            vo.end = 1;
            vo.duration = 20000;
            E.ViewMgr.loading(vo);
        }
        enterGame() {
            MainModel.Ins.connectRegist();
            E.taLoginTrack("clickStartGame");
            MainModel.Ins.loginTime = Laya.timer.currTimer;
        }
        get isYearCanUsed() {
            if (!this.allLife || this.allLife && this.allLife.val == ECardLingqu.Nothing) {
                return false;
            }
            return true;
        }
        clearUI() {
            E.ViewMgr.Close(EViewType.Equip_switch);
            E.ViewMgr.Close(EViewType.EquipUpdate);
        }
        setItem(icon, tf, id) {
            icon.skin = IconUtils.getIconByCfgId(id);
            tf.text = StringUtil.val2m(this.mRoleData.getVal(id));
        }
        get hasMailCanLingqu() {
            if (this.mailList.length <= 0) {
                return false;
            }
            for (let i = 0; i < this.mailList.length; i++) {
                let cell = this.mailList[i];
                if (cell.state == exports.EMailStatus.notLingqu) {
                    return true;
                }
            }
            return false;
        }
        boxReset() {
            this.boxAuto.open = 0;
            this.boxAuto.rate = 1;
            this.boxAutoVo.reset();
        }
        getEquipList() {
            return this.equipList;
        }
        get verify() {
            let ts = HrefUtils.getVal("ts");
            if (ts == 0) {
                return false;
            }
            if (InitConfig.wxLoginResult) {
                let result = InitConfig.wxLoginResult.result;
                if (result.audit == 1 || ts == 1) {
                    return true;
                }
            }
        }
        getIdByStyle(type) {
            let l = this.equipList;
            let vo;
            for (let i = 0; i < l.length; i++) {
                let cell = l[i];
                if (cell.equipVo.type == type) {
                    if (cell.equipVo.wearable == EWearableType.Wearable) {
                        vo = cell;
                        break;
                    }
                }
            }
            let equipStyle = vo ? vo.equipVo.equipStyle : 0;
            let val = HuanZhuangModel.Ins.getEquipStyle(type);
            if (val) {
                return val;
            }
            if (type == EEquipType.ZuoQi) {
                return ZuoQiModel.Ins.rideVo.rideId;
            }
            else if (type == EEquipType.Wing) {
                return this.wingId;
            }
            return equipStyle;
        }
        isAutoSelect(type) {
            let cell = this.quickMsgList.find(item => item.type == type);
            if (cell) {
                return cell.selected;
            }
            return false;
        }
        get imageID() {
            if (initConfig.platform == PlatformConfig.War3) {
                return 2;
            }
            return 0;
        }
        get randomImageID() {
            if (initConfig.platform == PlatformConfig.War3) {
                return Math.floor(Math.random() * 3) + 1;
            }
            return 0;
        }
        get wingId() {
            let style = HuanZhuangModel.Ins.getEquipStyle(EEquipType.Wing);
            if (style) {
                return style;
            }
            return this._windId;
        }
        set wingId(v) {
            this._windId = v;
            this.event(MainEvent.UpdateWingId);
        }
        get mPlayinfo() {
            return this.mRoleData.mBaseInfo;
        }
        get showAttrType() {
            if (!this._showAttrType) {
                this._showAttrType = PlayerVoFactory.initShowAttr();
            }
            return this._showAttrType;
        }
        get hasFreeYeWaiRed() {
            let cfg = AdventureBossProxy.Ins.GetDataById(this.adventureBossData.f_id);
            if (cfg) {
                let arr = cfg.f_RaidsPrice.split("|");
                let itemStr = arr[this.adventureBossData.cnt];
                if (itemStr) {
                    let _itemVo = ItemViewFactory.convertItemList(itemStr)[0];
                    if (_itemVo.count == 0) {
                        return true;
                    }
                }
            }
            return false;
        }
        yewaiRed() {
            let v = false;
            if (this.mYewaiBossRed || WuShenDianModel.Ins.isRedTip()) {
                v = true;
            }
            MainModel.Ins.funcSetRed(EFuncDef.YeWaiBoss, v);
        }
        get mYewaiBossRed() {
            return TaskModel.Ins.isFuncOpen(EFuncDef.YeWaiBoss) && this.hasFreeYeWaiRed;
        }
        refreshRed() {
            this.yewaiRed();
            this.chestLvUpRed();
            this.updateBoxOpenRed();
        }
        updateRed() {
            this.refreshRed();
            if (this.mainView) {
                this.mainView.onMailRedEvt();
            }
            if (this.isVipKFRedTip()) {
                MainModel.Ins.funcSetRed(EFuncDef.CJKF, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.CJKF, false);
            }
        }
        getItemVo(itemId) {
            let count = this.mRoleData.getVal(itemId);
            let _itemVo = new ItemVo();
            _itemVo.cfgId = itemId;
            _itemVo.count = count;
            return _itemVo;
        }
        get equipNotWeared() {
            for (let i = 0; i < this.equipList.length; i++) {
                let _equipVo = this.equipList[i];
                if (_equipVo.equipVo.wearable == EWearableType.Not) {
                    return _equipVo;
                }
            }
            return null;
        }
        initMsg() {
            this.Reg(new ShopBuyView(EViewType.ShopBuy));
            this.Reg(new GZHView(EViewType.GZHVIEW));
            this.Reg(new CJKEView(EViewType.CjkfView));
            this.Reg(new SubCDView(EViewType.SubCDView));
            this.Reg(new GuangGaoView(EViewType.GuangGaoView));
            this.Reg(new MailView(EViewType.Mail));
            this.Reg(new MailShow(EViewType.MailShow));
            this.Reg(new RollingLampView(EViewType.RollingLamp, ELayerType.alertLayer));
            this.Reg(new NoticePopView(EViewType.NoticePop, ELayerType.subFrameLayer));
            this.Reg(new HighChestAutoSettingView(EViewType.HighAutoChest));
            this.Reg(new ZuoqiTipsShop(EViewType.RideBuyTips));
            this.Reg(new BoxSetAnimView(EViewType.BoxAnimSet));
            this.Reg(new JuBaoPengView(EViewType.JuBaoPeng));
            this.Reg(new ZhengZhanView(EViewType.ZhengZhan));
            this.Reg(new GameGroupView(EViewType.GameGroup));
            this.Reg(new ExchangeView(EViewType.ExchangeCode));
            this.Reg(new UnLockView(EViewType.UnlockEquip, ELayerType.subFrameLayer));
            this.Reg(new ScoreJjcJieSuanView(EViewType.ScoreJjcJieSuan, ELayerType.subFrameLayer));
            E.MsgMgr.AddMsg(MSGID.PlayerLevel, this.onLevel, this);
            E.MsgMgr.AddMsg(MSGID.PlayerCurExp, this.onExp, this);
            E.MsgMgr.AddMsg(MSGID.ExchangeEquipRevc, this.onExchangeEquipRevc, this);
            E.MsgMgr.AddMsg(MSGID.EquipChangeRevc, this.onEquipChangeRevc, this);
            E.MsgMgr.AddMsg(MSGID.ValChanelRevc, this.onValChanelRevc, this);
            E.MsgMgr.AddMsg(MSGID.InitRevc, this.onInitRevc, this);
            E.MsgMgr.AddMsg(MSGID.ChestInfoUpdateRevc, this.onChestInfoUpdate, this);
            E.MsgMgr.AddMsg(MSGID.ChestUpLevelRevc, this.onChestUpLevelRevc, this);
            E.MsgMgr.AddMsg(MSGID.ItemDelRevc, this.onItemDelRevc, this);
            E.MsgMgr.AddMsg(MSGID.ErrCode, this.onErrCodeRevc, this);
            E.MsgMgr.AddMsg(MSGID.SellRevc, this.onSellRevc, this);
            E.MsgMgr.AddMsg(MSGID.SellEquipFinish, this.onSellEquipFinishRevc, this);
            E.MsgMgr.AddMsg(MSGID.FightRevc, this.onFightRevc, this);
            E.MsgMgr.AddMsg(MSGID.DebugFightValRevc, this.onDebugFightValRevc, this);
            E.MsgMgr.AddMsg(MSGID.AdventureRevc, this.onAdventureRevc, this);
            E.MsgMgr.AddMsg(MSGID.RewardRevc, this.onRewardRevc, this);
            E.MsgMgr.AddMsg(MSGID.TaskRevc, TaskModel.Ins.onTaskRevc, TaskModel.Ins);
            E.MsgMgr.AddMsg(MSGID.Adventure_Boss, this.onAdventure_Boss, this);
            E.MsgMgr.AddMsg(MSGID.WearedWingDataRevc, WingModel.Ins.onWearedWingDataRevc, WingModel.Ins);
            E.MsgMgr.AddMsg(MSGID.WingListRevc, WingModel.Ins.onWingListRevc, WingModel.Ins);
            E.MsgMgr.AddMsg(MSGID.WingTreasureStageRevc, WingModel.Ins.onWingTreasureRevc, WingModel.Ins);
            E.MsgMgr.AddMsg(MSGID.WatchPlayerInfoRevc, this.onWatchPlayerInfoRevc, this);
            E.MsgMgr.AddMsg(MSGID.ShopBoughtItemsRevc, ShopModel.Ins.onShopBoughtItemsRevc, ShopModel.Ins);
            E.MsgMgr.AddMsg(MSGID.BoxUsedCountRevc, this.onBoxUsedCountRevc, this);
            E.MsgMgr.AddMsg(MSGID.Success, this.onSuccessCodeRevc, this);
            E.MsgMgr.AddMsg(MSGID.ConfigHashRevc, this.onConfigHashRevc, this);
            E.MsgMgr.AddMsg(MSGID.ServerVersion, this.onServerVersionRevc, this);
            E.MsgMgr.AddMsg(MSGID.RedDotUpdateOtpRevc, this.onRedDotUpdateOtpRevc, this);
            E.MsgMgr.AddMsg(MSGID.JjcRankDrop, this.onJjcRankDrop, this);
            E.MsgMgr.AddMsg(MSGID.SignStatus, this.onSignStatus, this);
            E.MsgMgr.AddMsg(MSGID.GymPack, this.onGymPack, this);
            E.MsgMgr.AddMsg(MSGID.MonthCard, this.onMonthCard, this);
            E.MsgMgr.AddMsg(MSGID.AdFreeCard, this.AdFreeCard, this);
            E.MsgMgr.AddMsg(MSGID.AllLifeCard, this.onAllLifeCard, this);
            E.MsgMgr.AddMsg(MSGID.MailRed, this.onMailRed, this);
            E.MsgMgr.AddMsg(MSGID.MailList, this.onMailList, this);
            E.MsgMgr.AddMsg(MSGID.NoticeList, this.onNoticeList, this);
            E.MsgMgr.AddMsg(MSGID.BoxAuto, this.onBoxAuto, this);
            E.MsgMgr.AddMsg(MSGID.PeakJjcOpenUnix, this.onPeakJjcOpenUnix, this);
            E.MsgMgr.AddMsg(MSGID.JjcRewardPreview, this.onJjcRewardPreview, this);
            E.MsgMgr.AddMsg(MSGID.GetServerTimeMS, this.onGetServerTimeMS, this);
            E.MsgMgr.AddMsg(MSGID.Conquest, this.onConquest, this);
            E.MsgMgr.AddMsg(MSGID.GrowPackUnlock, this.onGrowPackUnlock, this);
            E.MsgMgr.AddMsg(MSGID.NewArena, this.onNewArena, this);
            E.MsgMgr.AddMsg(MSGID.PetFusionBaoDi, this.onPetFusionBaoDi, this);
            E.MsgMgr.AddMsg(MSGID.BoxCommitState, this.onBoxCommitState, this);
            E.MsgMgr.AddMsg(MSGID.ShareReward, this.onShareReward, this);
            E.MsgMgr.AddMsg(MSGID.BoxExtraItemInit, this.onBoxExtraItemInit, this);
            E.MsgMgr.AddMsg(MSGID.BoxExtraItemChange, this.BoxExtraItemChange, this);
            E.MsgMgr.AddMsg(MSGID.ClubReward, this.onClubReward, this);
            E.MsgMgr.AddMsg(MSGID.DailyShopWeekCard, this.DailyShopWeekCard, this);
            E.MsgMgr.AddMsg(MSGID.WxAuthInfo, this.onWxAuthInfo, this);
            E.MsgMgr.AddMsg(MSGID.GameStyle, this.onGameStyle, this);
            E.MsgMgr.AddMsg(MSGID.SideBarReward, this.onSideBarReward, this);
        }
        onSideBarReward(revc) {
            this._sideBarStatus = revc.state;
            this.event(MainEvent.EventMainUpdateView);
        }
        get canBarStatusLingQu() {
            return this._sideBarStatus == 1;
        }
        onGameStyle(revc) {
            this.gameStyle_server = revc.type;
        }
        onWxAuthInfo(revc) {
            this.authBtnShow = revc.show;
            if (initConfig.debug_authBtnShow) {
                this.authBtnShow = 1;
            }
            this.event(MainEvent.AuthBtnChange);
        }
        onClubReward(revc) {
            this.clubReward = revc;
            this.event(MainEvent.ClubReward);
            this.yxqRed = revc.dataList.find(o => o.state === 2) ? true : false;
            this.updateYXQ_red();
        }
        updateYXQ_red() {
            this.funcSetRed(EFuncDef.GameCirle, this.yxqRed);
            this.event(MainEvent.YXQRed);
        }
        BoxExtraItemChange(revc) {
            this.boxExtra = revc;
            this.event(MainEvent.BoxExtraChange);
        }
        onBoxExtraItemInit(revc) {
            this.boxExtra = revc;
        }
        onShareReward(revc) {
            this.shareReward = revc;
            this.event(MainEvent.ShareReward);
        }
        onBoxCommitState(revc) {
            this.boxBoxCommitState = revc.state == 1;
        }
        onPetFusionBaoDi(revc) {
            this.petFusion = revc;
            this.event(MainEvent.EventPetFusionBaoDi);
        }
        getLvByQuaPet(qua) {
            if (this.petFusion) {
                let l = this.petFusion.dataList;
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    if (cell.quality == qua) {
                        return cell.baoDi;
                    }
                }
            }
            return null;
        }
        onNewArena(revc) {
            this.serverVer = revc.isNew;
            console.log("serverVer:" + this.serverVer + " " + this.tabelSuffix);
            YinDaoTaskProxy.Ins.rebuild();
        }
        get tabelSuffix() {
            return this.serverVer == 0 ? "" : `_v${this.serverVer}`;
        }
        getIsShowScore(funid) {
            if (funid == EFuncDef.Jjc) {
                return this.serverVer == exports.EServerVersion.Version_1;
            }
            return false;
        }
        onLevel(revc) {
            this.oldLv = this.mRoleData.lv;
            this.lv = revc.level;
            this.event(MainEvent.Level);
            if (this.isInitAlready) {
                let nowLv = this.mRoleData.lv;
                if (this.oldLv != nowLv) {
                    let _mainUpdate = this.getView();
                    if (_mainUpdate) {
                        _mainUpdate.playLevelUp();
                        E.sdk.valChange(ESdkValChange.LevelUp, nowLv);
                    }
                }
            }
        }
        onExp(revc) {
            this.exp = revc.curLevelExp;
            this.event(MainEvent.Exp);
        }
        onGrowPackUnlock(revc) {
            let l = revc.dataList;
            for (let i = 0; i < l.length; i++) {
                let id = l[i];
                let index = this.unpackIdList.indexOf(id);
                if (index == -1) {
                    this.unpackIdList.push(id);
                }
            }
            this.event(MainEvent.GrowPackUnlock);
        }
        onConquest(revc) {
            this.conquestData = revc;
            this.event(MainEvent.ConquestUpdate);
        }
        get isConquestOpen() {
            return this.conquestData != null;
        }
        onGetServerTimeMS(revc) {
            TimeUtil.serverTimeV = revc.serverTime;
        }
        onJjcRewardPreview(revc) {
            getJjcModel(revc.type).preRewardList = revc.rewardList;
        }
        onPeakJjcOpenUnix(revc) {
            this.peakOpenTime = revc.time;
        }
        onBoxAuto(revc) {
            if (MainModel.Ins.isInitAlready && revc.open && (revc.rate > this.boxAuto.rate)) {
                let view = E.ViewMgr.Get(EViewType.Main);
                view.skin.setdot.visible = true;
            }
            this.boxAuto = revc;
        }
        openPopNotice(cellList) {
            if (cellList.length <= 0) {
                E.ViewMgr.ShowMidError("没有公告数据,请后台配置!");
                return;
            }
            let result = new PopNoticeVo();
            result.dataList = cellList;
            result.noticeSel = this.noticeSel;
            E.ViewMgr.Open(EViewType.NoticePop, null, result);
        }
        openServerNotice(title, content) {
            let result = new PopNoticeVo();
            let cell = new stNotice();
            cell.content = content;
            cell.title = title;
            result.dataList = [];
            result.dataList.push(cell);
            E.ViewMgr.Open(EViewType.NoticePop, null, result);
        }
        onNoticeList(revc) {
            this.pushNotice(revc);
        }
        pushNotice(revc) {
            for (let i = 0; i < revc.datalist.length; i++) {
                let cell = revc.datalist[i];
                if (cell.type == ENoticeType.PaoMaLight || cell.type == ENoticeType.GameRolling) {
                    this.pomaList.push(cell);
                }
                else if (cell.type == ENoticeType.Notice) {
                    this.localNoticeList.push(cell);
                }
            }
            this.playPaoMaLight();
        }
        playPaoMaLight() {
            if (this.pomaList.length > 0) {
                if (this.paomaGobalPos) {
                    E.ViewMgr.Open(EViewType.RollingLamp);
                }
            }
        }
        onMailRed(revc) {
            this.setMailRed(revc.red == 1);
        }
        setMailRed(v) {
            this.bMailRed = v;
            this.event(MainEvent.MailRed);
        }
        onMailList(revc) {
            this.mailList = revc.datalist;
            this.event(MainEvent.MailListUpdate);
        }
        onMonthCard(revc) {
            this.monthCard = revc;
            this.event(MainEvent.MonthUpdate);
            ActivityModel.Ins.updatePackage();
        }
        AdFreeCard(value) {
            this.teQuanKaCard = value;
            this.event(MainEvent.Updata_TeQuanKa);
            ActivityModel.Ins.updatePackage();
        }
        DailyShopWeekCard(value) {
            this.dailyShopWeekCard = value;
            this.event(MainEvent.DailyShopWeekCard_Card);
            ActivityModel.Ins.updatePackage();
        }
        getZKWCNum(id) {
            for (let i = 0; i < this.dailyShopWeekCard.dataList.length; i++) {
                if (this.dailyShopWeekCard.dataList[i].id == id) {
                    return this.dailyShopWeekCard.dataList[i].subday;
                }
            }
            return 0;
        }
        isZKWCRedTip() {
            if (this.getZKWCNum(1)) {
                let data = ActivityModel.Ins.getVo(EActivityType.ZKShopWeek);
                if (data && data.vo && data.vo.datalist) {
                    if (data.vo.datalist[0].param1 == 2) {
                        return true;
                    }
                }
            }
            return false;
        }
        onAllLifeCard(revc) {
            this.allLife = revc;
            this.event(MainEvent.AllLifeUpdate);
            ActivityModel.Ins.updatePackage();
        }
        onGymPack(revc) {
            this.gymCardVo = revc;
            this.event(MainEvent.GymCardUpdate);
        }
        onSignStatus(revc) {
            this.sign.serverVo = revc;
            this.refreshSignRed(revc.isNew, revc.val == 1);
            this.event(MainEvent.SignStatus);
        }
        refreshSignRed(isNew, v) {
            if (isNew) {
                this.funcSetRed(EFuncDef.SignInNew, v);
            }
            else {
                this.funcSetRed(EFuncDef.SignIn, v);
            }
        }
        delRed(fid) {
            for (let i = 0; i < this.redList.length; i++) {
                let cell = this.redList[i];
                if (fid == cell) {
                    this.redList.splice(i, 1);
                    i--;
                }
            }
        }
        cfgByPos(pos) {
            let cfg = MainIconProxy.Ins.getCfgByPosition(pos);
            if (cfg) {
                let isOpen = TaskModel.Ins.isFuncOpen(parseInt(cfg.f_funid));
                if (isOpen) {
                    isOpen = this.isOpenByFuncId(cfg.f_funid);
                }
                if (isOpen) {
                    return cfg;
                }
            }
        }
        isOpenAllByFuncid(f_funid) {
            let isOpen = TaskModel.Ins.isFuncOpen(parseInt(f_funid));
            if (isOpen) {
                isOpen = this.isOpenByFuncId(f_funid);
            }
            return isOpen;
        }
        isSubOpen(cfg) {
            if (cfg.f_ui_id) {
                let _checkSubFuncList = MainIconProxy.Ins.getFuncListByF_ui_id(cfg.f_ui_id);
                if (_checkSubFuncList.length) {
                    let isOpen = false;
                    for (let i = 0; i < _checkSubFuncList.length; i++) {
                        let funid = _checkSubFuncList[i];
                        if (this.isOpenAllByFuncid(funid.toString())) {
                            isOpen = true;
                            break;
                        }
                    }
                    return isOpen;
                }
            }
            return true;
        }
        funcSetRed(fid, v) {
            if (v && FuncProxy.Ins.getCfgByFid(fid).f_close) {
                v = false;
            }
            if (v) {
                let index = this.redList.indexOf(fid);
                if (index == -1) {
                    this.redList.push(fid);
                }
            }
            else {
                let index = this.redList.indexOf(fid);
                if (index != -1) {
                    this.delRed(fid);
                }
            }
            if (E.ViewMgr.isOpenReg(EViewType.FightMain)) {
                return;
            }
            this.event(MainEvent.FuncSmallIconUpdate);
        }
        getHasRed(fid) {
            return this.redList.indexOf(fid) != -1;
        }
        onJjcRankDrop(revc) {
            LogSys$1.Log("rank ch ange:" + revc.rank);
            this.jjcRankDrop();
        }
        jjcRankDrop() {
            JjcModel.Ins.mDropRed = true;
            JjcModel.Ins.updateRed();
        }
        onRedDotUpdateOtpRevc(revc) {
            RedUpdateModel.Ins.redList = revc.datalist;
            this.boxAutoVo.initData();
            if (E.Debug) {
                let str = "";
                for (let i = 0; i < RedUpdateModel.Ins.redList.length; i++) {
                    let cell = RedUpdateModel.Ins.redList[i];
                    let s = "";
                    if (cell.type == 0 || cell.type == 1) {
                        s = cell.type + "";
                    }
                    else {
                        s = TimeUtil.timestamtoTime(cell.type * 1000);
                    }
                    str += `${cell.id} val:${cell.type}\n`;
                }
            }
            E.AudioMgr.SetMusicMute(RedUpdateModel.Ins.getValByID(RedEnum.MUISC_BG) == 0);
            E.AudioMgr.SetSoundMute(RedUpdateModel.Ins.getValByID(RedEnum.MUISC_EFFECT) == 0);
            if (this.iskowtow == undefined) {
                let val = RedUpdateModel.Ins.getValByID(RedEnum.IsKowtow);
                if (val == 1) {
                    this.iskowtow = 1;
                }
            }
            let fightScale = RedUpdateModel.Ins.getValByID(RedEnum.FIGHT_ANIM_SCALE);
            if (!fightScale) {
                fightScale = 1.0;
            }
            this.fightAnimScale = fightScale;
            this.fixQua();
        }
        fixQua() {
            let _curQua = this.boxMinQua;
            let vo = RedUpdateModel.Ins.getByID(RedEnum.BOX_QUA);
            if (vo) {
                _curQua = vo.type;
            }
            let minQua = this.getMinQua();
            if (_curQua < minQua) {
                _curQua = minQua;
                LogSys$1.Log("修改为最低可用的的品质" + _curQua);
                RedUpdateModel.Ins.save(RedEnum.BOX_QUA, _curQua);
            }
        }
        needRed(type) {
            let val = RedUpdateModel.Ins.getValByID(type);
            let need = false;
            if (val == 0) {
                need = true;
            }
            else {
                if (val <= TimeUtil.curZeroTime) {
                    need = true;
                }
            }
            return need;
        }
        onServerVersionRevc(revc) {
            console.log("server version:" + revc.val);
            this.ser_ver = revc.val + "-" + this.serverVer;
        }
        onConfigHashRevc(revc) {
            let val = revc.val;
            let diff = false;
            if (StaticDataMgr.Ins.hasVal != val) {
                console.warn(`==============================>配置不一致:客户端${StaticDataMgr.Ins.hasVal},服务器:${val}`);
                diff = true;
                this.configIsSame = false;
            }
            else {
                console.log(`配置一致:客户端${StaticDataMgr.Ins.hasVal},服务器${val}`);
            }
            if (!Laya.Browser.onPC && typeof wx == "object" && wx) {
                let o = wx.getSystemInfoSync();
                if (o && o.platform == "devtools") {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, (diff ? "warning 配置不同!!!!" : "配置相同") + "\nclient:\n" + StaticDataMgr.Ins.hasVal + "\nserver:\n" + val);
                    console.log("============================>" + JSON.stringify(o));
                }
            }
        }
        onBoxUsedCountRevc(revc) {
            this.boxUsedCount = revc.val;
            this.event(MainEvent.BoxUsed);
            this.updateBoxOpenRed();
        }
        updateBoxOpenRed() {
            this.funcSetRed(EFuncDef.KaiFuKuangHuang, ActivityModel.Ins.checkOpenBoxRed());
        }
        gm(str) {
            if (debug) {
                let gm = new Gm_req();
                gm.datas = str;
                SocketMgr.Ins.SendMessageBin(gm);
            }
        }
        onWatchPlayerInfoRevc(revc) {
            E.ViewMgr.Open(EViewType.ShowPlayer, null, revc);
        }
        onAdventure_Boss(revc) {
            this.adventureBossData = revc;
            this.event(MainEvent.AdventureBossUpdate);
            this.yewaiRed();
        }
        updateGemRed() {
            let gemList = [];
            gemList.push(DuanWuModel.Ins, GemFeastModel.Ins, FuJiangFeastModel.Ins);
            for (let i = 0; i < gemList.length; i++) {
                gemList[i].updateRed();
            }
        }
        get isCanSweep() {
            let cfg = AdventureBossProxy.Ins.GetDataById(this.adventureBossData.f_id);
            let arr = cfg.f_RaidsPrice.split("|");
            let itemStr = arr[this.adventureBossData.cnt];
            if (itemStr) {
                return true;
            }
        }
        onErrCodeRevc(data) {
            let cfg = ErrCodeProxy.Ins.GetDataById(data.reason);
            console.log('%cErrID:' + data.reason.toString() + " " + (cfg ? cfg.f_err : ""), 'color:#ff0000');
            switch (data.reason) {
                case ErrorCode.EquipUid:
                case ErrorCode.Sell:
                    return;
                case ErrorCode.Selled:
                    return;
                case ErrorCode.HeroYanWuFail:
                    HeroHouseModel.Ins.openPop();
                    return;
                case ErrorCode.DisableUser:
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, cfg.f_err);
                    return;
            }
            this.showErr(data.reason);
        }
        onSuccessCodeRevc(data) {
            if (debug) {
                let cfg = SuccessCodeProxy.Ins.GetDataById(data.reason);
                console.log('%cSuccessID:' + data.reason.toString() + " " + (cfg ? cfg.f_success : ""), 'color:#00ff00');
            }
            this.showSuccess(data.reason);
        }
        onSellRevc(data) {
            this.mSellStatus = exports.ESellStatus.End;
            if (data.errorID == 0) {
                this.removeTempEquipList(data.value.toString());
                this.event(MainEvent.SellSucceed, data);
            }
        }
        onSellEquipFinishRevc(data) {
            this.event(MainEvent.SellFinished, data);
        }
        parseLog(o) {
            return `回合数:${o.round} 技能:${o.skillId} pos:${o.pos} 动作类型:${o.type} attrId:${o.attrId} old:${o.oldVal} new:${o.newVal}`;
        }
        outLog(vo) {
            if (vo) {
                console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>日志START");
                console.log(vo.logList);
                for (let i = 0; i < vo.logList.length; i++) {
                    let cell = vo.logList[i];
                    console.log(i + "---->" + this.parseLog(cell));
                }
                console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>日志END");
            }
        }
        openFunc(funcType) {
            if (TaskModel.Ins.isFuncOpen(funcType, true)) {
                let cfg = FuncProxy.Ins.getCfgByFid(funcType);
                if (cfg.f_viewType) {
                    E.ViewMgr.Open(cfg.f_viewType);
                }
            }
        }
        fightAdventure(id) {
            let req = new NewAdventureFight_req();
            req.type = ENewAdventure.Fight;
            req.adventureId = id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onFightRevc(data) {
            if (debug) {
                if (HrefUtils.getVal("nofightlog") || initConfig.nofightlog) ;
                else {
                    this.outLog(data.fightVo);
                    this.fightCMD = JSON.stringify(data);
                    console.log(this.fightCMD);
                }
            }
            this.fight({ fightVo: data.fightVo, type: data.fight_type });
        }
        fight(_cell) {
            if (E.ViewMgr.isOpenReg(EViewType.WuShenDianView) && WuShenDianModel.Ins.isKs) {
                MainModel.Ins.fightJieSuan(_cell);
            }
            else {
                let type = EViewType.FightMain;
                if (E.ViewMgr.isOpenReg(type)) {
                    let view = E.ViewMgr.Get(type);
                    view.clearScene();
                    view.refreshFightView(_cell);
                }
                else {
                    E.ViewMgr.Open(type, null, _cell);
                }
            }
        }
        fightJieSuan(_cell) {
            if (E.Debug && initConfig.withoutFightUI) {
                return;
            }
            let _data = _cell;
            let serverData = _data.extData;
            if (serverData && serverData.type == EServerFightType.ScoreJJC) {
                E.ViewMgr.Open(EViewType.ScoreJjcJieSuan, null, _cell);
            }
            else {
                E.ViewMgr.Open(EViewType.FightJieSuan, null, _cell);
            }
        }
        jiesuanEnd(Data) {
            E.ViewMgr.Close(EViewType.FightMain);
            this.newPlayerActivit(Data);
            if (E.ViewMgr.isOpenReg(EViewType.WuShenDianView) && WuShenDianModel.Ins.isKs) {
                SocketMgr.Ins.SendMessageBin(new PalaceRefresh_req());
                const fightReq = new FightEnd_req();
                fightReq.fight_type = 16;
                SocketMgr.Ins.SendMessageBin(fightReq);
            }
        }
        newPlayerActivit(Data) {
            let pcfg = t_Pack_ControllerProxy.Ins.getCfgByPackidId(EActivityType.t_Pack_NewPlayer);
            let limtid = parseInt(pcfg.f_p1);
            if (initConfig.debug_pop_limtid) {
                limtid = initConfig.debug_pop_limtid;
            }
            if (NewAdventureModel.Ins.adventureId < limtid) {
                return;
            }
            if (NewAdventureModel.Ins.adventureId == limtid) {
                ActivityModel.Ins.showXinRenView();
            }
            else {
                let _data = Data;
                if (_data.fightVo && _data.fightVo.owner == EFightCamp.Enemy) {
                    ActivityModel.Ins.showXinRenView();
                }
            }
        }
        adventureEnter() {
            let avent = new Adventure_req();
            SocketMgr.Ins.SendMessageBin(avent);
        }
        onDebugFightValRevc(data) {
            console.log("onDebugFightValRevc...");
            console.log(JSON.stringify(data));
        }
        onAdventureRevc(data) {
            this.adventureVo.setData(data);
            E.ViewMgr.Update(EViewType.FightOpen);
        }
        onRewardRevc(data) {
            if (data.type == ERewardType.DLD) {
                DaLuanDouModel.Ins.isReward = 0;
                DaLuanDouModel.Ins.event(DaLuanDouModel.UPDATA_VIEW, 1);
                DaLuanDouModule.ins.setDot();
            }
            if (data.type == ERewardType.YeWaiBoss) ;
            else {
                let l = data.rewardList;
                let other = [];
                for (let i = 0; i < l.length; i++) {
                    let cell = l[i];
                    let cfg = ItemProxy.Ins.getCfg(cell.id);
                    if (cell.count > 0 && cfg && cfg.f_sub_type == ESub_type.RandomGemBox) ;
                    else {
                        other.push(cell);
                    }
                }
                data.rewardList = other;
                if (data.rewardList.length > 0) {
                    E.ViewMgr.openReward(data);
                }
            }
            this.event(MainEvent.Reward_revcUpdate);
        }
        showErr(id) {
            let cfg = ErrCodeProxy.Ins.GetDataById(id);
            let _content;
            if (cfg) {
                _content = cfg.f_err;
            }
            else {
                _content = id.toString();
            }
            E.ViewMgr.ShowMidError(_content);
        }
        showSuccess(id) {
            let cfg = SuccessCodeProxy.Ins.GetDataById(id);
            let _content;
            if (cfg) {
                _content = cfg.f_success;
            }
            else {
                _content = id.toString();
            }
            E.ViewMgr.ShowMidOk(_content);
        }
        mChestMoneyLevelRed() {
            this.hasLvUpBtnRed = false;
            let isFullMax = false;
            let chestData = this.mRoleData.getChestData();
            let res = this.getChestCfgByPos(chestData.pos, chestData.boxlv, chestData.time);
            if (res.cfg) ;
            switch (res.status) {
                case EChestLevelUp.UseMoney:
                    break;
                case EChestLevelUp.Full:
                    this.hasLvUpBtnRed = true;
                    break;
                case EChestLevelUp.Time:
                    break;
                case EChestLevelUp.End:
                    break;
            }
            if (res.cur == res.max) {
                isFullMax = true;
            }
            else {
                isFullMax = false;
            }
            let haveMoney = this.getMoeny();
            if (haveMoney < res.cfg.f_Cost * 1.5) {
                return false;
            }
            else {
                if (isFullMax) ;
                else {
                    if (chestData.time > 0) ;
                    else {
                        return true;
                    }
                }
            }
            return false;
        }
        chestLvUpRed() {
            let _red = this.mChestMoneyLevelRed();
            let showRed = false;
            if (_red || this.hasLvUpBtnRed) {
                showRed = true;
            }
            this.getView().lvdot = showRed;
        }
        onItemDelRevc(data) {
            this.DelItem(data.delList);
        }
        DelItem(delList) {
            for (let i = 0; i < this.equipList.length; i++) {
                let equip = this.equipList[i];
                for (let n = 0; n < delList.length; n++) {
                    let delUid = delList[n];
                    if (equip.getUid().equals(delUid)) {
                        this.equipList.splice(i, 1);
                        i--;
                    }
                }
            }
            this.event(MainEvent.DelItems, [delList]);
            this.getView().UpdateEquip();
        }
        onExchangeEquipRevc(data) {
            this.ExchangeEquip(data);
        }
        getWearable(type) {
            for (let i = 0; i < this.equipList.length; i++) {
                let cell = this.equipList[i];
                if (cell.equipVo.type == type) {
                    if (cell.equipVo.wearable == EWearableType.Wearable) {
                        return cell;
                    }
                }
            }
        }
        getNotWear() {
            for (let i = 0; i < this.equipList.length; i++) {
                let cell = this.equipList[i];
                if (cell.equipVo.wearable == EWearableType.Not) {
                    return cell;
                }
            }
        }
        openUiByEquipVo(cell, useUI = false) {
            let oldEquip = this.getWearable(cell.type);
            let newEquip = DateFactory.createEquipItemVo(cell);
            let resultOld;
            let resultNew;
            if (oldEquip) {
                if (this.canOpenSwicthUI(newEquip.getUid().toString())) {
                    resultOld = oldEquip;
                    resultNew = newEquip;
                }
            }
            else {
                if (this.canOpenUpdateEquipUI(newEquip.getUid().toString())) {
                    resultNew = newEquip;
                }
            }
            if (useUI || !this.mainView.avatarFight) {
                this.openEquipUI(resultOld, resultNew);
            }
            else {
                this.mainView.avatarFight.saveEquip(resultOld, resultNew);
            }
        }
        openEquipUI(resultOld, resultNew) {
            if (resultOld) {
                E.ViewMgr.Open(EViewType.Equip_switch, null, [resultOld, resultNew]);
            }
            else {
                E.ViewMgr.Open(EViewType.EquipUpdate, null, resultNew);
            }
        }
        ExchangeEquip(data) {
            this.curChest.ExchangeEquip(data);
        }
        onEquipChangeRevc(data) {
            this.EquipChange(data);
        }
        add_stEquipItem(cell) {
            this.equipList.push(DateFactory.createOwnerEquipVo(cell));
        }
        EquipChange(data) {
            let l2 = data.equipItem;
            for (let i = 0; i < l2.length; i++) {
                let cell = l2[i];
                let find = false;
                this.removeTempEquipList(cell.uid.toString());
                for (let n = 0; n < this.equipList.length; n++) {
                    let vo = this.equipList[n];
                    if (vo.equipVo.uid.equals(cell.uid)) {
                        this.equipList[n].equipVo = cell;
                        find = true;
                        break;
                    }
                }
                if (!find) {
                    this.add_stEquipItem(cell);
                }
            }
            this.getView().UpdateEquip();
            if (E.ViewMgr.Get(EViewType.Equip_switch).IsShow() ||
                E.ViewMgr.Get(EViewType.EquipUpdate).IsShow()) {
                this.getView().UpdateSmallIcon();
            }
            this.event(MainEvent.EquipChange, [data.equipItem]);
        }
        onValChanelRevc(data) {
            this.ValChanel(data);
        }
        getView() {
            let _mainUpdate = this._mainUpdate;
            let mainView = E.ViewMgr.Get(EViewType.Main);
            if (mainView && mainView.IsShow()) {
                _mainUpdate = mainView;
            }
            return _mainUpdate;
        }
        checkShowReward() {
            let _cellList = this.mRoleData.moneyInfo;
            let _useItemList = [];
            for (let i = 0; i < _cellList.length; i++) {
                let cell = _cellList[i];
                let cfg = ItemProxy.Ins.getCfg(cell.id);
                if (cell.count > 0 && cfg && cfg.f_sub_type == ESub_type.RandomGemBox) {
                    _useItemList.push(cell);
                }
            }
            if (_useItemList.length) {
                let o = new RewardUseItem();
                o.itemList = _useItemList;
                E.ViewMgr.openReward(o);
            }
        }
        ValChanel(data) {
            let _mainUpdate = this.getView();
            let _cellList = data.itemList;
            let _useItemList = [];
            for (let i = 0; i < _cellList.length; i++) {
                let cell = _cellList[i];
                let cfg = ItemProxy.Ins.getCfg(cell.id);
                if (cell.count > 0 && cfg && cfg.f_sub_type == ESub_type.RandomGemBox) {
                    _useItemList.push(cell);
                }
                this.mRoleData.setAttr(cell.id, cell.count);
                this.event(MainEvent.ValChangeCell, cell.id);
                if (cell.id == ECellType.COPPER_MONEY || cell.id == ECellType.WhitePlume) {
                    WingModel.Ins.updateRed();
                }
                switch (cell.id) {
                    case ECellType.GOLD:
                        _mainUpdate.UpdateGold();
                        break;
                    case ECellType.COPPER_MONEY:
                        _mainUpdate.UpdateMoney();
                        this.chestLvUpRed();
                        break;
                    case ECellType.BOX:
                        _mainUpdate.UpdateBoxCnt();
                        break;
                    case ECellType.EXP:
                        _mainUpdate.UpdateExp();
                        break;
                    case ECellType.BATTLE:
                        _mainUpdate.UpdateBattle();
                        E.sdk.valChange(ESdkValChange.Plus, cell.count);
                        break;
                    default:
                        _mainUpdate.UpdateMainAttr();
                        break;
                }
            }
            if (_useItemList.length) {
                let o = new RewardUseItem();
                o.itemList = _useItemList;
                E.ViewMgr.openReward(o);
            }
            this.event(MainEvent.ValChange);
        }
        crossDayFunc() {
            let _fundRefresh = new FundRefresh_req();
            SocketMgr.Ins.SendMessageBin(_fundRefresh);
            this.heroPackVo.subDay();
        }
        onTimeCross() {
            if (this._crossDayTicket < 0) {
                this._crossDayTicket = TimeUtil.curZeroTime + 24 * 3600 - TimeUtil.serverTime;
                this.event(MainEvent.CrossDayUpadte);
                this.crossDayFunc();
            }
            this._crossDayTicket--;
        }
        onInitRevc(data) {
            E.LangMgr.rebuild();
            ZhengTuModel.Ins.rebuild();
            E.taLoginTrack("3010initComplete");
            this.openMainView();
            const playerLevel = this.mRoleData.lv;
            E.sdk.setPlayerData({
                role_id: this.mRoleData.AccountId.toString(),
                role_name: this.mRoleData.NickName,
                role_level: playerLevel,
                server_id: this.mRoleData.serverId.toString(),
                server_name: this.mRoleData.serverName,
                role_vip: playerLevel,
                role_power: this.mRoleData.plus,
            });
            E.sdk.valChange(ESdkValChange.EnterGame, 0);
            if (window['wx']) {
                window['wxOnShow'] = (result) => {
                    console.log('wxOnShow: ', result);
                    window['onShowData'] = result;
                    try {
                        E.sdk.onShow(result);
                        MainModel.Ins.event(MainEvent.WxOnShow, result);
                    }
                    catch (e) { }
                };
                const data = wx.getLaunchOptionsSync();
                console.log('launch: ', data);
                E.sdk.onShow(data);
                if (E.ta) {
                    E.ta.userSetOnce({ user_source: data['scene'] });
                }
                if (window['onShowData']) {
                    E.sdk.onShow(data);
                }
                MainModel.Ins.getGameClubData();
            }
            this._crossDayTicket = TimeUtil.curZeroTime + 24 * 3600 - TimeUtil.serverTime;
            Laya.timer.loop(1000, this, this.onTimeCross);
            if (this.verify) ;
            else {
                if (this.isOpenByFuncId(EFuncDef.WanShengJie.toString())) {
                    E.ViewMgr.Open(EViewType.WanShengJieView1);
                }
                else if (this.isOpenByFuncId(EFuncDef.SpringFestival.toString())) {
                    E.ViewMgr.Open(EViewType.SpringFestivalTipView);
                }
                else {
                    this.isOpenAnyPackage();
                }
                this.setInitRed();
            }
            this.isInitAlready = true;
            if (this.getView()) {
                this.mainView.gj && this.mainView.gj.onInit();
                this.mainView.avatarFight && this.mainView.avatarFight.onInit();
            }
            let skinReq = new GameStyle_req();
            if (SySdk.Ins.cbsgTunnelOpenType == undefined) {
                skinReq.type = this.skinStyle;
            }
            else {
                let type;
                if (this.gameStyle_server != exports.EMainSkin.Null) {
                    type = this.gameStyle_server;
                }
                else {
                    type = exports.EMainSkin.Drum;
                    if (SySdk.Ins.cbsgTunnelOpenType == 1) {
                        type = exports.EMainSkin.Kotow;
                    }
                }
                skinReq.type = type;
            }
            console.log("cbsgTunnelOpenType:", SySdk.Ins.cbsgTunnelOpenType, "gameStyle_server", this.gameStyle_server);
            SocketMgr.Ins.SendMessageBin(skinReq);
            this.checkDisCount();
        }
        checkDisCount() {
            if (!this.isOpenAllByFuncid(EFuncDef.DiscountWin + "")) {
                return;
            }
            let day = parseInt(System_RefreshTimeProxy.Ins.getNumberVal(83));
            let disid = RedEnum.DISCOUNT;
            let redVo = RedUpdateModel.Ins.getByID(disid);
            let time;
            if (redVo) {
                time = redVo.type;
            }
            let need = false;
            let isOpenDay = (TimeUtil.serverTime - TimeUtil.openTime.toNumber() / 1000) / ActivityTimeUtils.OneDay;
            if (isOpenDay > day) ;
            else {
                if (time) {
                    let zerotime = TimeUtil.getZeroSecond(time);
                    if (zerotime == TimeUtil.curZeroTime) ;
                    else {
                        need = true;
                    }
                }
                else {
                    need = true;
                }
            }
            if (need) {
                E.ViewMgr.Open(EViewType.DiscountPopWin);
                RedUpdateModel.Ins.save(disid, TimeUtil.serverTime);
            }
        }
        setInitRed() {
            this.updateNewPlayerRed();
            let style = parseInt(System_RefreshTimeProxy.Ins.getVal(44));
            if (style == 1) {
                this.funcSetRed(EFuncDef.GameCirle, true);
            }
        }
        updateNewPlayerRed() {
            let pcfg = t_Pack_ControllerProxy.Ins.getCfgByPackidId(EActivityType.t_Pack_NewPlayer);
            let _newPlayerRed = false;
            if (this.mRoleData.lv > parseInt(pcfg.f_p3)) ;
            else {
                let vo = ActivityModel.Ins.getVo(EActivityType.t_Pack_NewPlayer);
                if (vo) {
                    let id = vo.getNewPlayerCfgId();
                    if (id) {
                        if (this.newPlayerCloseRedList.indexOf(id) != -1) ;
                        else {
                            _newPlayerRed = true;
                        }
                    }
                }
            }
            if (!_newPlayerRed && this.firstRechargeRed) {
                _newPlayerRed = true;
            }
            this.funcSetRed(EFuncDef.NewPlayer, _newPlayerRed);
        }
        get firstRechargeRed() {
            let l = t_Pack_FirstPay_Skin.Ins.List;
            let _activityVo = ActivityModel.Ins.getVo(EActivityType.SkinLiBao);
            let status = EActivityLingQu.YiLingQu;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (_activityVo) {
                    const dataList = ActivityModel.Ins.getByUid(_activityVo.uid).dataList;
                    let cell = dataList.find(o => o.id == cfg.f_id);
                    if (cell) {
                        status = cell.param1;
                        if (status == EActivityLingQu.KeLingQu) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        isOpenAnyPackage() {
            if (t_Platform.Ins.curCfg.f_packisNew) {
                this.discountPack.start();
                return;
            }
            let _need = false;
            let val = RedUpdateModel.Ins.getValByID(RedEnum.POP_VAL);
            if (val != 0 && TimeUtil.getZeroSecond(val) == TimeUtil.curZeroTime) ;
            else {
                _need = true;
            }
            if (initConfig.debug_pop) {
                _need = true;
            }
            if (_need) {
                this.openAnyPackage();
            }
        }
        savePop() {
            RedUpdateModel.Ins.save(RedEnum.POP_VAL, TimeUtil.serverTime);
        }
        openAnyPackage() {
            let newplayer = true;
            if (!this.isOpenByFuncId(EFuncDef.NewPlayer.toString())) {
                newplayer = false;
            }
            else {
                let pcfg = t_Pack_ControllerProxy.Ins.getCfgByPackidId(EActivityType.t_Pack_NewPlayer);
                if (this.mRoleData.lv > parseInt(pcfg.f_p3)) {
                    newplayer = false;
                }
            }
            let vo = ActivityModel.Ins.getVo(EActivityType.t_Pack_NewPlayer);
            let _cfgId = 0;
            if (vo) {
                _cfgId = vo.getNewPlayerCfgId();
            }
            if (_cfgId <= 3) ;
            else {
                newplayer = false;
            }
            if (newplayer) {
                E.ViewMgr.Open(EViewType.NewPlayPackage);
                this.savePop();
            }
            else {
                let day = TimeUtil.getDay();
                let week = HrefUtils.getVal("week");
                if (week) {
                    day = week;
                }
                let n = day % 2;
                switch (n) {
                    case 0:
                        let func_id = EFuncDef.JuBaoPeng;
                        let _status = false;
                        if (this.isOpenByFuncId(func_id.toString())) {
                            if (TreasureModel.ins.isPay) {
                                _status = true;
                            }
                            else {
                                E.ViewMgr.OpenByFuncid(func_id);
                                this.savePop();
                                return;
                            }
                        }
                        else {
                            _status = true;
                        }
                        if (_status) {
                            if (ActivityModel.Ins.isOpenByPackid(EActivityType.RoleBorn)) {
                                let _activityVo = ActivityModel.Ins.getVo(EActivityType.RoleBorn);
                                if (_activityVo && _activityVo.isPay) ;
                                else {
                                    E.ViewMgr.Open(EViewType.JueSeChengZhang, null, "notopen");
                                    this.savePop();
                                }
                            }
                        }
                        break;
                    case 1:
                        if (ActivityModel.Ins.isOpenByPackid(EActivityType.t_Pack_MonthAndYear_Card)) {
                            if (this.monthCard && this.monthCard.val == ECardLingqu.Nothing) {
                                E.ViewMgr.Open(EViewType.YueKa);
                                this.savePop();
                                return;
                            }
                        }
                        if (ActivityModel.Ins.isOpenByPackid(EActivityType.BoxBorn)) {
                            let _activityVo = ActivityModel.Ins.getVo(EActivityType.BoxBorn);
                            if (_activityVo && _activityVo.isPay) ;
                            else {
                                E.ViewMgr.Open(EViewType.BoxChengZhang, null, "notopen");
                                this.savePop();
                                return;
                            }
                        }
                        break;
                }
            }
        }
        isCanRecharge() {
            let funcCfg = FuncProxy.Ins.getCfgByFid(EFuncDef.Recharge);
            if (funcCfg.f_close || this.isVerify(funcCfg)) {
                return false;
            }
            return true;
        }
        isVerify(cfg) {
            if (this.verify && cfg.f_ts) {
                return true;
            }
            return false;
        }
        onChestInfoUpdate(data) {
            this.mRoleData.setChestData(data);
            this.getView().UpdateBoxLv();
            let lvUpView = E.ViewMgr.Get(EViewType.ChestLevelUp);
            if (lvUpView.IsShow()) {
                lvUpView.RefreshView();
            }
            this.chestLvUpRed();
        }
        onChestUpLevelRevc(revc) {
            let lang = "";
            switch (revc.type) {
                case 1:
                    lang = "MoneyNotEnouth";
                    break;
                case 2:
                    lang = "CdTimeNotEnough";
                    break;
                case 3:
                    lang = "QuickNotEnough";
                    break;
            }
            E.ViewMgr.ShowMidError(E.LangMgr.getLang(lang));
        }
        openMainView() {
            E.taLoginTrack("SpineUtilInit");
            SpineUtil.init(new Laya.Handler(this, this.OnDownLoad));
        }
        OnDownLoad() {
            this.onLoadHandler();
        }
        onLoadHandler() {
            E.taLoginTrack("loginComplete");
            if (MainModel.Ins.loginTime != 0) {
                let time = Laya.timer.currTimer - MainModel.Ins.loginTime;
                E.sendTrack("loginTime", { loginTime: time });
                MainModel.Ins.loginTime = 0;
            }
            let mainView = E.ViewMgr.Get(EViewType.Main);
            if (mainView.IsShow()) {
                mainView.onDisplay();
            }
            else {
                E.ViewMgr.Open(EViewType.Main);
            }
        }
        PlayChestAnim(handler, _equipVo) {
            let mainView = E.ViewMgr.Get(EViewType.Main);
            if (initConfig.noBoxAnim) {
                handler.run();
            }
            else {
                if (mainView.IsShow()) {
                    mainView.PlayAnim(handler, _equipVo);
                }
            }
        }
        getEquipWearVo(type) {
            return PlayerVoFactory.getEquipVoByType(this.equipList, type);
        }
        getAttrNameIdByID(id, qz = false) {
            let proxy = GameconfigProxy.Ins;
            let cfg = proxy.GetDataById(id);
            if (cfg) {
                if (qz) {
                    return cfg.f_PalaceChar + cfg.f_name;
                }
                else {
                    return cfg.f_name;
                }
            }
            return id.toString();
        }
        getAttrDesc(id) {
            let cfg = GameconfigProxy.Ins.GetDataById(id);
            if (cfg) {
                return cfg.f_desc;
            }
            return id.toString();
        }
        removeTempEquipList(uid) {
            let index = this._mEquipList.indexOf(uid);
            if (index != -1) {
                this._mEquipList = this._mEquipList.splice(index, 1);
            }
            index = this._mSellList.indexOf(uid);
            if (index != -1) {
                this._mSellList = this._mSellList.splice(index, 1);
            }
        }
        equip(vo) {
            let uid = vo.uid;
            this._mEquipList.push(uid.toString());
            let _equipAction = new ActionEquip_req();
            _equipAction.type = EActionEquip.Equip;
            _equipAction.value = uid;
            SocketMgr.Ins.SendMessageBin(_equipAction);
        }
        sell(uid) {
            this.mSellStatus = exports.ESellStatus.Start;
            let _equipAction = new ActionEquip_req();
            _equipAction.type = EActionEquip.Sell;
            _equipAction.value = uid;
            this._mSellList.push(uid.toString());
            SocketMgr.Ins.SendMessageBin(_equipAction);
        }
        canOpenSwicthUI(uid) {
            if (!this.canCheckOpenUI(uid)) {
                return false;
            }
            return true;
        }
        canOpenUpdateEquipUI(uid) {
            if (!this.canCheckOpenUI(uid)) {
                return false;
            }
            return true;
        }
        canCheckOpenUI(uid) {
            return true;
        }
        reset() {
        }
        initCD(time) {
            if (!this.timeCtl) {
                this.timeCtl = new TimeCheckCtl();
                this.timeCtl.setTime(time * 1000, new Laya.Handler(this, this.onGet_chestCallBack));
            }
        }
        get isAnimIdel() {
            let view = E.ViewMgr.Get(EViewType.Main);
            if (view.IsShow() && view.chestAnim) {
                let animType = view.chestAnim.anim.curIndex;
                if (animType == EChestSpineAnim.Close || animType == EChestSpineAnim.Open) {
                    return true;
                }
            }
            return false;
        }
        reelPlay(end, time) {
            if (this.reelCtl) {
                this.reelCtl.play(end, time);
            }
        }
        onGet_chestCallBack(time) {
            if (time != 0) ;
            else {
                if (this.curChest.type == EOpenChest.Normal) {
                    SocketMgr.Ins.SendMessageBin(new ExchangeEquip_req());
                }
                else {
                    if (this.boxAuto.open) {
                        let req = new BoxAuto_req();
                        req.boxNum = this.boxAutoVo.boxAutoUseCount;
                        SocketMgr.Ins.SendMessageBin(req);
                    }
                    else {
                        SocketMgr.Ins.SendMessageBin(new ExchangeEquipProxy_req());
                    }
                }
            }
        }
        get isTest() {
            return HrefUtils.getHref("box") != undefined;
        }
        getChestLvCfg(lv) {
            let res = {};
            let proxy = t_BoxGachaProxy.Ins;
            let l = BoxCdProxy.Ins.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                if (cfg.f_BoxLevel == lv) {
                    res.cur = cfg;
                    res.curInfo = proxy.getCfgByLv(lv);
                    let next = l[i + 1];
                    if (next) {
                        res.next = next;
                        res.nextInfo = proxy.getCfgByLv(next.f_BoxLevel);
                    }
                    break;
                }
            }
            return res;
        }
        getProbability(cfg) {
            if (!cfg) {
                return [
                    "0-0", "0-0", "0-0", "0-0",
                    "0-0", "0-0", "0-0", "0-0", "0-0"
                ];
            }
            let arr = [];
            let l = cfg.f_Quality_Client.split("|");
            for (let i = 0; i < l.length; i++) {
                let st = l[i].split("-")[0];
                let qua = l[i].split("-")[1];
                arr.push(cfg[st] + "-" + qua);
            }
            return arr;
        }
        getChestCfgByPos(pos, lv, time) {
            let l = BoxCdProxy.Ins.List;
            let result = {};
            let last = l[l.length - 1];
            let index = 0;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                index += cfg.f_ClickTimes;
                let next = l[i + 1];
                if (next) {
                    if (pos >= index) {
                        if (pos < next.f_ClickTimes + index || next.f_id == last.f_id) {
                            if (lv == next.f_BoxLevel) {
                                result.cur = pos - index;
                                result.max = next.f_ClickTimes;
                                result.status = EChestLevelUp.UseMoney;
                            }
                            else {
                                result.status = EChestLevelUp.Full;
                                result.cur = result.max = cfg.f_ClickTimes;
                            }
                            if (time != 0) {
                                result.status = EChestLevelUp.Time;
                            }
                            if (lv >= last.f_BoxLevel) {
                                result.status = EChestLevelUp.End;
                            }
                            result.cfg = next;
                            if (result.status == EChestLevelUp.Full) {
                                result.cdTime = cfg.f_BoxCD;
                            }
                            else {
                                result.cdTime = next.f_BoxCD;
                            }
                            return result;
                        }
                    }
                }
            }
            if (pos == 0) {
                result.cfg = l[0];
                result.cur = pos;
                result.cdTime = result.cfg.f_BoxCD;
                result.max = result.cfg.f_ClickTimes;
                result.status = EChestLevelUp.UseMoney;
            }
            else {
                result.cfg = last;
                result.max = last.f_ClickTimes;
                result.cur = last.f_ClickTimes;
                result.status = EChestLevelUp.End;
            }
            return result;
        }
        levelUpChest() {
            let req = new ChestUpLevel_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        getMoeny() {
            return this.mRoleData.getVal(ECellType.COPPER_MONEY);
        }
        get chestQuickCnt() {
            return this.mRoleData.getVal(ECellType.ChestQuick);
        }
        initEquipList(_l) {
            this.equipList = [];
            for (let i = 0; i < _l.length; i++) {
                let cell = _l[i];
                this.equipList.push(DateFactory.createOwnerEquipVo(cell));
            }
        }
        BeginChest(delay = true) {
            this.curChest.BeginChest(delay);
        }
        goonQuick() {
            if (this.curChest.type == EOpenChest.Auto && this.quickCfg) {
                this.QuickStart(this.quickCfg);
            }
        }
        QuickStart(curCfg) {
            if (this.curChest.type == EOpenChest.Normal) {
                let _equipVo = this.getNotWear();
                if (_equipVo) {
                    E.ViewMgr.ShowMidLabel(E.LangMgr.getLang(`WeiTuoTips`));
                    return;
                }
            }
            this.SetChestProxy(curCfg);
            this.BeginChest(false);
        }
        StopChestProxy(msg = true) {
            LogSys$1.Log("终止委托...");
            this.getView().gear = false;
            if (this.quickCfg) {
                this.quickCfg = null;
                if (msg) {
                    E.ViewMgr.ShowMidLabel(E.LangMgr.getLang("OpenChestFinished"));
                }
            }
            this.curChest.Stop();
            this.curChest = this.normalChest;
            this.event(MainEvent.ChestProxy, false);
        }
        ClickChest() {
            if (this.curChest.status == EChestOpenStatus.GetBetterEquip) {
                if (this.curChest.BetterAction()) {
                    return;
                }
            }
            if (this.mainView.chestAnim && this.curChest.type == EOpenChest.Auto && this.mainView.chestAnim.mStatus == EChestAnimStatus.Open ||
                this.curChest.type == EOpenChest.Auto) ;
            else {
                this.StopChestProxy();
            }
            if (this.getView().isPlaying) {
                return;
            }
            this.BeginChest();
        }
        SetChestProxy(cfg) {
            this.quickCfg = cfg;
            this.curChest.Stop();
            this.curChest = this.autoChest;
            this.getView().gear = true;
            this.event(MainEvent.ChestProxy, true);
        }
        showSmallTips(title, content, target, algin) {
            let _smallTipsData = {};
            _smallTipsData.content = content;
            _smallTipsData.title = title;
            _smallTipsData.target = target;
            _smallTipsData.algin = algin;
            let _viewType = EViewType.SmallTips;
            if (E.ViewMgr.IsOpen(_viewType)) {
                let view = E.ViewMgr.Get(_viewType);
                view.setData(_smallTipsData);
            }
            else {
                E.ViewMgr.Open(_viewType, null, _smallTipsData);
            }
        }
        sweep(f_id) {
            let req = new Adventure_Boss_req();
            req.type = 2;
            req.f_id = f_id;
            SocketMgr.Ins.SendMessageBin(req);
        }
        openGold() {
            if (this.isCanRecharge()) {
                let vo = ActivityModel.Ins.getVo(EActivityType.Voucher);
                if (vo && vo.isOpen) {
                    ShopModel.Ins.showVoucherView();
                }
                else {
                    ShopModel.Ins.showShopView();
                }
            }
        }
        openMoney() {
            if (this.isCanRecharge()) {
                ShopModel.Ins.showEveryDay();
            }
        }
        set treasureEffect(v) {
            LogSys$1.Log("显示小宝箱特效 " + v);
            this.playChestEffect(v);
        }
        playChestEffect(v) {
            if (v) {
                this.reelEffect.play("o/spine/glow01/glow01");
            }
            else {
                this.reelEffect.stop();
            }
        }
        getModelByType(fid) {
            switch (fid) {
                case EFuncDef.DuanWu:
                    return DuanWuModel.Ins;
                case EFuncDef.GemFeast:
                    return GemFeastModel.Ins;
                case EFuncDef.JuBaoPeng:
                    return TreasureModel.ins;
                case EFuncDef.JJZML:
                    return JjzmlModel.Ins;
                case EFuncDef.FuJiangFeast:
                    return FuJiangFeastModel.Ins;
                case EFuncDef.JiShaoChengDuo:
                    return JiShaoChengDuoModel.Ins;
                case EFuncDef.PetFeast:
                    return LingChongFeastModel.Ins;
                case EFuncDef.ZhengTu:
                    return ZhengTuModel.Ins;
                case EFuncDef.ShenBinSY:
                    return ShenBinFeastModel.Ins;
                case EFuncDef.MountDQ:
                    return NewPlayerRideFeastModel.Ins;
                case EFuncDef.PetQD:
                    return NewPlayerPetFeastModel.Ins;
                case EFuncDef.GemQD:
                    return NewPlayerGemFeastModel.Ins;
                case EFuncDef.NamingRename:
                    return NamingChargeModel.Ins;
            }
        }
        isNewPlayerAllGet(vo) {
            let l1 = t_Pack_FirstPay_Equip.Ins.List;
            let l2 = t_Pack_FirstPay_Skin.Ins.List;
            let ids = [];
            for (let i = 0; i < l1.length; i++) {
                ids.push(l1[i].f_id);
            }
            for (let i = 0; i < l2.length; i++) {
                ids.push(l2[i].f_id);
            }
            let lingquLen = 0;
            for (let i = 0; i < ids.length; i++) {
                let id = ids[i];
                let cell = vo.dataList.find(o => o.id == id);
                if (cell && cell.param1 == EActivityLingQu.YiLingQu) {
                    lingquLen++;
                }
            }
            return lingquLen >= ids.length;
        }
        isOpenByFuncId(funid) {
            if (FuncProxy.Ins.isClose(parseInt(funid))) {
                return false;
            }
            let fid = parseInt(funid);
            if (fid == EFuncDef.NewPlayer) {
                let _vo = ActivityModel.Ins.getVo(EActivityType.t_Pack_NewPlayer);
                if (_vo && this.isNewPlayerAllGet(_vo) || !_vo) {
                    return false;
                }
                return true;
            }
            else if (fid == EFuncDef.PopWin) {
                return ActivityModel.Ins.isPopIconShow;
            }
            else if (fid == EFuncDef.SignIn) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.SignIn);
            }
            else if (fid == EFuncDef.SignInNew) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.SignInNew);
            }
            else if (fid == EFuncDef.Combopack) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.Combopack);
            }
            else if (fid == EFuncDef.MountLB) {
                if (LiBaoModel.Ins.isOpenByFid(49)) {
                    return true;
                }
                return false;
            }
            else if (fid == EFuncDef.PetLB) {
                if (LiBaoModel.Ins.isOpenByFid(50)) {
                    return true;
                }
                return false;
            }
            else if (fid == EFuncDef.CJKF) {
                let vipOpen = parseInt(System_RefreshTimeProxy.Ins.getVal(26));
                if (MainModel.Ins.mPlayinfo && MainModel.Ins.mPlayinfo.isVip && vipOpen) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (fid == EFuncDef.LibaoZi) {
                return ActivityModel.Ins.isOpenByPackid([
                    EActivityType.t_Pack_MonthAndYear_Card,
                    EActivityType.TeQuanKa,
                ]);
            }
            else if (fid == EFuncDef.JiJing) {
                return ActivityModel.Ins.isOpenByPackid([EActivityType.RoleBorn,
                    EActivityType.BoxBorn,
                    EActivityType.ZuoqiChengZhang,
                    EActivityType.LingchongChengZhang,
                    EActivityType.BaoshiChengZhang]);
            }
            else if (fid == EFuncDef.KaiFuKuangHuang) {
                return ActivityModel.Ins.isOpenByPackid([EActivityType.KaiXaingDaji,
                    EActivityType.TeHuiLiBao,
                    EActivityType.Pack_Shop_Mart]);
            }
            else if (fid == EFuncDef.ZhuHouBuji) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.Pack_Supply);
            }
            else if (fid == EFuncDef.SaoGuoMark) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.SanGuo);
            }
            else if (fid == EFuncDef.MeiRiZhuanPan) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.DayZhuanPan);
            }
            else if (fid == EFuncDef.KaiFuChongBang) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.KaiFuChongBang);
            }
            else if (fid == EFuncDef.JieDongFeng) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.JieDongFeng);
            }
            else if (fid == EFuncDef.ServerTask) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.ServerTask);
            }
            else if (fid === EFuncDef.SkinLiBao) {
                let vo = ActivityModel.Ins.getVo(EActivityType.t_Pack_NewPlayer);
                return ActivityModel.Ins.isOpenByPackid(EActivityType.SkinLiBao);
            }
            else if (fid == EFuncDef.WanShengJie) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.WanShengJie);
            }
            else if (fid == EFuncDef.ZhanLing) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.ZhanLing);
            }
            else if (fid == EFuncDef.Monopoly) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.Monopoly);
            }
            else if (fid == EFuncDef.DrawEvent) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.DrawEvent);
            }
            else if (fid == EFuncDef.SpringFestival) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.SpringFestival);
            }
            else if (fid == EFuncDef.EveryDayPackage) {
                return ActivityModel.Ins.isOpenByPackid(EActivityType.EveryDayBorn) && ActivityModel.Ins.isOpenByPackid(EActivityType.ZKShopWeek);
            }
            else if (fid == EFuncDef.SiderView) {
                return E.sdk.isFromSidebarCard || this.canBarStatusLingQu;
            }
            let base = this.getModelByType(fid);
            if (base) {
                return base.isOpen;
            }
            let l = E.MsgMgr.LabordayList;
            for (let i = 0; i < l.length; i++) {
                let model = l[i];
                if (model.funcid == fid) {
                    return model.isOpen;
                }
            }
            return true;
        }
        get nextTime() {
            let zero = TimeUtil.getZeroSecond(TimeUtil.serverTime);
            zero += G.gameData.refreshSec;
            let sub = 0;
            if (zero > TimeUtil.serverTime) {
                sub = zero;
            }
            else {
                sub = zero + 86400;
            }
            return sub;
        }
        get subNextSecond() {
            return this.nextTime - TimeUtil.serverTime;
        }
        get isGemOpen() {
            return GemFeastModel.Ins.isOpen;
        }
        queryMsg(desc, moneyCfgId, moneyVal, type, callBack, chanelLab = "取消", okLab = "确定") {
            if (type != EQuickMsg.NULL && this.isAutoSelect(type)) {
                callBack.run();
                return;
            }
            let selected = false;
            let cell = this.quickMsgList.find(item => item.type == type);
            if (cell) {
                selected = cell.selected;
            }
            let _vo = {};
            _vo.desc = desc;
            _vo.money = moneyVal;
            _vo.moneyCfgId = moneyCfgId;
            _vo.selected = selected;
            _vo.callBack = callBack;
            _vo.type = type;
            _vo.chanelLab = chanelLab;
            _vo.okLab = okLab;
            E.ViewMgr.Open(EViewType.QueryMsg, null, _vo);
        }
        queryMsgs(desc, moneyArr, type, callBack, chanelLab = "取消", okLab = "确定") {
            if (type != EQuickMsg.NULL && this.isAutoSelect(type)) {
                callBack.run();
                return;
            }
            let selected = false;
            let cell = this.quickMsgList.find(item => item.type == type);
            if (cell) {
                selected = cell.selected;
            }
            let _vo = {};
            _vo.desc = desc;
            _vo.moneyArr = moneyArr.map(o => ({ money: o.moneyVal, moneyCfgId: o.moneyCfgId, }));
            _vo.selected = selected;
            _vo.callBack = callBack;
            _vo.type = type;
            _vo.chanelLab = chanelLab;
            _vo.okLab = okLab;
            E.ViewMgr.Open(EViewType.QueryMsg, null, _vo);
        }
        isItemEnough(itemid, count, tips = false) {
            let have = this.mRoleData.getVal(itemid);
            let _status = false;
            if (have >= count) {
                _status = true;
            }
            if (!_status && tips) {
                let itemCfg = ItemProxy.Ins.getCfg(itemid);
                E.ViewMgr.ShowMidError(`${main.itemName(itemCfg.f_name)}` + E.getLang("NotEnough"));
            }
            return _status;
        }
        isItemEnoughSt(st, tips = false) {
            let itemid = parseInt(st.split("-")[0]);
            let count = parseInt(st.split("-")[1]);
            let have = this.mRoleData.getVal(itemid);
            let _status = false;
            if (have >= count) {
                _status = true;
            }
            if (!_status && tips) {
                if (E.Debug) {
                    LogSys$1.Log(`client isItemEnoughSt itemid:${itemid}`);
                }
                let itemCfg = ItemProxy.Ins.getCfg(itemid);
                let str = `${this.itemName(itemCfg.f_name)}` + E.getLang("NotEnough");
                E.ViewMgr.ShowMidError(str);
            }
            if (!_status) {
                switch (itemid) {
                    case ECellType.QiYun:
                    case ECellType.DaoQi:
                        ActivityModel.Ins.checkItem(itemid);
                        break;
                }
            }
            return _status;
        }
        itemName(str) {
            if (str.indexOf("|") == -1) {
                return str;
            }
            let index = this.skinStyle - 1;
            return str.split("|")[index];
        }
        isItemEnoughStArr(st, tips = false) {
            let arr = st.split("|");
            for (let i = 0; i < arr.length; i++) {
                if (!this.isItemEnoughSt(arr[i], tips)) {
                    return false;
                }
            }
            return true;
        }
        fastUseItem(itemId, type = EUseItemScene.Normal, lvTime = 0) {
            let have = this.mRoleData.getVal(itemId);
            if (have <= 0) {
                this.isItemEnoughSt(`${itemId}-1`, true);
                return;
            }
            let cell = new QuickViewVo();
            cell.itemId = itemId;
            cell.sceneType = type;
            cell.lvTime = lvTime;
            E.ViewMgr.Open(EViewType.ChestQuickUse, null, cell);
        }
        getItemList(subType) {
            return this.mRoleData.getItemVoListBySubtype(subType);
        }
        bindBtn(mSkin, label, funcid) {
            mSkin.on(Laya.Event.CLICK, this, () => {
                E.ViewMgr.OpenByFuncid(funcid);
            });
            mSkin.redimg.visible = false;
            mSkin.tf1.text = "";
            mSkin.quality.skin = "";
            mSkin.typename.text = label;
        }
        getTitleImg() {
            let cfg = ChengHaoListProxy.Ins.getCfgByID(ChengHaoModel.Ins.wearedTitleId);
            if (cfg) {
                return "o/title/" + cfg.f_titlePic;
            }
        }
        convertHead(url) {
            return url == "" ? `o/basehead/1.png` : url;
        }
        buy(needItemId, needCount, targetId, targetCount, okHandler, type = exports.EBuyType.Item, notClose = false) {
            let cell = {};
            cell.needCount = needCount;
            cell.needItemId = needItemId;
            cell.targetId = targetId;
            cell.targetCount = targetCount;
            cell.ok = okHandler;
            cell.type = type || exports.EBuyType.Item;
            cell.buyEndNotClose = notClose;
            E.ViewMgr.Open(EViewType.ShopBuy, null, cell);
        }
        buyItem(inItem, outItem, okHandler, type = exports.EBuyType.Item, notClose = false) {
            this.buy(inItem.cfgId, inItem.count, outItem.cfgId, outItem.count, okHandler, type, notClose);
        }
        addTs(value) {
            if (!this.tsList) {
                this.tsList = [];
            }
            this.tsList.push(value);
            if (this.tsList.length == 1) {
                let view = E.ViewMgr.Get(EViewType.Main);
                if (view && view.IsShow()) {
                    view.playTS();
                }
            }
        }
        get mainView() {
            let view = E.ViewMgr.Get(EViewType.Main);
            return view;
        }
        drawCall() {
            for (let i = 0; i < this._drawList.length; i++) {
                let cell = this._drawList[i];
                cell.refresh();
            }
        }
        isFromDc(key) {
            let cell = this._drawList.find(o => o.key == key);
            return cell;
        }
        getDcNode(node, newParent, key, curSkin, type = 0) {
            let cell = this._drawList.find(o => o.node == node);
            if (!cell) {
                let a = new DrawCallNode();
                a.oldParent = node.parent;
                a.type = type;
                a.node = node;
                a.curSkin = curSkin;
                if (key && key.indexOf("-") == -1) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, "key" + key);
                }
                a.key = key;
                a.newParent = newParent;
                this._drawList.push(a);
                cell = a;
            }
            return cell;
        }
        disposeHtmlCanvas() {
            if (this._htmlHTMLCanvas) {
                this._htmlHTMLCanvas.release();
                this._htmlHTMLCanvas.clear();
                this._htmlHTMLCanvas.destroy();
            }
            this._snapSpr.graphics.clear();
        }
        set mainMask(v) {
            if (!DrawCallConfig.snapshotMask) {
                return;
            }
            if (v) {
                LayerMgr.Ins.sceneMaskLayer.addChild(this._snapSpr);
                E.ViewMgr.Close(EViewType.Main);
            }
            else {
                E.ViewMgr.Open(EViewType.Main);
                this._snapSpr.removeSelf();
            }
        }
        drawLater() {
            if (!DrawCallConfig.snapshotMask) {
                return;
            }
            if (this._htmlHTMLCanvas) {
                return;
            }
            this.disposeHtmlCanvas();
            let w = Laya.Render['_mainCanvas'].width;
            let h = Laya.Render['_mainCanvas'].height;
            let htmlHTMLCanvas = Laya.stage.drawToCanvas(w, h, 0, 0);
            this._htmlHTMLCanvas = htmlHTMLCanvas;
            let spr = this._snapSpr;
            if (E.Debug) {
                let offset = 2;
                spr.graphics.drawRect(offset, offset, w, h, null, "#ff0000", offset * 2);
            }
            let tex = htmlHTMLCanvas.getTexture();
            spr.graphics.drawTexture(tex, 0, 0, w, h);
            spr.scaleX = 1 / (w / Laya.stage.width);
            spr.scaleY = 1 / (h / Laya.stage.height);
        }
        snapshot() {
            Laya.timer.frameOnce(60, this, this.drawLater);
        }
        showSnap(v) {
            if (v) {
                if (this._snapSpr) {
                    Laya.stage.addChild(this._snapSpr);
                }
            }
            else {
                if (this._snapSpr) {
                    this._snapSpr.removeSelf();
                    this._snapSpr.graphics.clear();
                }
            }
        }
        connectRegist() {
            E.taLoginTrack("serverInfoReq");
            E.ViewMgr.openWait(true);
            this.curVer = this.ver;
            HttpUtil.httpGet(this.url, new Laya.Handler(this, this.loginComplete));
        }
        get url() {
            let openId;
            let user = HrefUtils.getHref("user");
            if (user) {
                openId = user;
            }
            else {
                openId = E.sdk.getOpenId();
            }
            let _url = `${InitConfig.getSyURL()}/login?appid=${E.sdk.getAppId()}&openid=${openId}&platform=${initConfig.platform}&ver=${this.ver}`;
            return _url;
        }
        get suffix() {
            return "";
        }
        get ver() {
            let ver = Version.curValue;
            if (Laya.Utils.getQueryString("ver")) {
                ver = Laya.Utils.getQueryString("ver");
                return ver;
            }
            if (initConfig.ver) {
                ver = initConfig.ver;
                return ver;
            }
            if (initConfig.littlegame) {
                ver += Version.SIGN;
            }
            return ver + this.suffix;
        }
        set mJJC_Red(v) {
            MainModel.Ins.funcSetRed(EFuncDef.Jjc, v);
        }
        updateJJC_Red() {
            if (JjcModel.Ins.mRed || PeakJjcModel.Ins.mRed || XXZDZModel.Ins.isRedTip()) {
                this.mJJC_Red = true;
            }
            else {
                this.mJJC_Red = false;
            }
        }
        loginComplete(data) {
            E.ViewMgr.closeWait();
            LogSys$1.Log(data);
            let obj = JSON.parse(data);
            InitConfig.wxLoginResult = obj;
            let serid = HrefUtils.getVal("serid");
            if (obj.code != 0) {
                E.sendTrack("onWebSocketError", { code: obj.code, val: obj.msg });
                E.ViewMgr.closeLoading();
                let msg = "";
                if (E.Debug) {
                    msg += data;
                }
                msg += E.getLang("server_err");
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, obj.msg || "");
                return;
            }
            if (serid) {
                InitConfig.wxLoginResult.result.tcp = `wss://dev-ws-server.game.wanhuir.com/${serid}`;
            }
            let tcp = InitConfig.tcp;
            if (tcp) {
                InitConfig.wxLoginResult.result.tcp = tcp;
            }
            if (Laya.Utils.getQueryString("tcp")) {
                InitConfig.wxLoginResult.result.tcp = Laya.Utils.getQueryString("tcp");
            }
            E.taLoginTrack("linkSocket");
            SocketMgr.Ins.ConnectWebsocket(this, () => {
                if (obj.code == ELoginCode.Succeed) {
                    LoginClient.Ins.wxNormalLogin();
                }
            });
        }
        getQuaList(cfg) {
            let quaArr = [
                cfg.f_grey,
                cfg.f_green,
                cfg.f_blue,
                cfg.f_purple,
                cfg.f_gold,
                cfg.f_orange,
                cfg.f_pink,
                cfg.f_red,
                cfg.f_skyblue,
                cfg.f_LightGreen,
                cfg.f_LightBlue,
                cfg.f_LightPurple,
                cfg.f_LightGold
            ];
            return quaArr;
        }
        getProbabilityByQua(qua) {
            let index = qua - 1;
            let cfg = t_BoxGachaProxy.Ins.getCfgByLv(this.mRoleData.boxlv);
            let quaArr = this.getQuaList(cfg);
            let quaVal = quaArr[index];
            return quaVal;
        }
        get chestQuaSelectConfigList() {
            let _listData = [];
            let l = EquipmentQualityProxy.Ins.List;
            for (let i = 0; i < l.length; i++) {
                let _cfg = l[i];
                if (this.getProbabilityByQua(_cfg.f_id) > 0) {
                    let vo = new QuickQua();
                    vo.f_id = _cfg.f_id;
                    vo.color = _cfg.f_Color;
                    vo.txt = _cfg.f_EquipmentLevel + E.getLang("up_01");
                    _listData.push(vo);
                }
            }
            _listData.reverse();
            return _listData;
        }
        getMinQua() {
            let cfg = t_BoxGachaProxy.Ins.getCfgByLv(this.mRoleData.boxlv);
            let quaArr = this.getQuaList(cfg);
            for (let i = 0; i < quaArr.length; i++) {
                let qua = quaArr[i];
                if (qua > 0) {
                    return this.boxMinQua + i;
                }
            }
            return this.boxMinQua;
        }
        showPlayer(accountId, id) {
            if (accountId != MainModel.Ins.mRoleData.mPlayer.AccountId) {
                if (E.ViewMgr.IsOpen(EViewType.JjcMain)) {
                    let req = new WatchPlayerInfo_req();
                    req.playerId = id;
                    SocketMgr.Ins.SendMessageBin(req);
                }
                else if (E.ViewMgr.IsOpen(EViewType.DF_JJC)) {
                    let req = new PeakWatchPlayerInfo_req();
                    req.playerId = id;
                    SocketMgr.Ins.SendMessageBin(req);
                }
                else {
                    let req = new JustWatchPlayer_req();
                    req.playerId = accountId;
                    SocketMgr.Ins.SendMessageBin(req);
                }
            }
        }
        get isKotoWBuy() {
            return false;
        }
        get boxSettingRed() {
            return this.isKotoWBuy;
        }
        isVipKFRedTip() {
            let vipOpen = parseInt(System_RefreshTimeProxy.Ins.getVal(26));
            if (MainModel.Ins.mPlayinfo && MainModel.Ins.mPlayinfo.isVip && vipOpen) {
                let val = RedUpdateModel.Ins.getValByID(RedEnum.VIP_KEFU);
                if (val == 0) {
                    return true;
                }
            }
            return false;
        }
        createFuncIcon(name, funcId, btnStyle) {
            let o = this.redNameKeyList.find(cell => cell.func_id == funcId);
            if (!o) {
                let obj = {};
                obj.func_id = funcId;
                obj.name = name;
                this.redNameKeyList.push(obj);
            }
            let icon = new FuncSmallIcon();
            icon.refresh(name, funcId, btnStyle);
            return icon;
        }
        getTaskGuideCfg(cfg) {
            let v = cfg[`f_TaskID${this.tabelSuffix}`];
            return v;
        }
        hasRedMainCfg(id) {
            let cfg = MainIconProxy.Ins.GetDataById(id);
            let _checkSubFuncList = MainIconProxy.Ins.getFuncListByF_ui_id(cfg.f_ui_id);
            let red = false;
            if (_checkSubFuncList.length) {
                for (let i = 0; i < _checkSubFuncList.length; i++) {
                    let funcId = _checkSubFuncList[i];
                    if (this.getHasRed(funcId)) {
                        red = true;
                        break;
                    }
                }
            }
            if (!red) {
                let funcId = parseInt(cfg.f_funid);
                if (this.getHasRed(funcId)) {
                    red = true;
                }
            }
            return red;
        }
        updateMuchReds() {
            let redl = [];
            redl.push(HuanZhuangModel.Ins, NewAdventureModel.Ins, MainModel.Ins, ZuoQiModel.Ins, WingModel.Ins, JjcModel.Ins, SoulModel.Ins, HeroHouseModel.Ins, ShopModel.Ins);
            let l = E.MsgMgr.LabordayList;
            for (let i = 0; i < l.length; i++) {
                let model = l[i];
                redl.push(model);
            }
            this.redl = redl;
            this.checkRed();
        }
        checkRed() {
            if (this.redl.length <= 0) {
                MainModel.Ins.event(MainEvent.MainViewInit);
            }
            else {
                let cell = this.redl.shift();
                cell.updateRed();
                Laya.timer.frameOnce(1, this, this.checkRed);
            }
        }
        setTTHead(headImg, t) {
            if ("http" == t.slice(0, 4) && Laya.Browser.onTTMiniGame) {
                const i = new Image();
                i.src = t, i.onload = (() => {
                    const t = i.width / headImg.width, s = new Laya.Texture2D(i.width / t, i.height / t, Laya.TextureFormat.R8G8B8A8);
                    headImg.graphics.drawImage(new Laya.Texture(s), 0, (headImg.height - i.height / t) / 2),
                        s.loadImageSource(i);
                });
            }
            else {
                headImg.skin = t;
            }
        }
    }
    class DrawCallNode {
        constructor() {
            this.type = 0;
            this.offsetX = 0;
            this.offsetY = 0;
            this.mInit = false;
            this.v = false;
            this.oldX = 0;
            this.oldY = 0;
            this.newX = 0;
            this.newY = 0;
        }
        refresh() {
            let v = this.v;
            if (!this.mInit) {
                this.mInit = true;
                this.oldX = this.node.x;
                this.oldY = this.node.y;
                let pos = this.node.parent.localToGlobal(new Laya.Point(this.node.x, this.node.y));
                this.newParent.addChild(this.node);
                let skin = MainModel.Ins.mainView.skin;
                if (this.curSkin) {
                    skin = this.curSkin;
                }
                this.node.x = pos.x - skin.x + skin.width / 2;
                this.node.y = pos.y - skin.y + skin.height / 2;
                this.newX = this.node.x;
                this.newY = this.node.y;
            }
            else {
                this.reset();
            }
            this.visible = v;
        }
        resetOldParent() {
            this.oldParent.addChild(this.node);
            this.refreshPos();
        }
        reset() {
            this.newParent.addChild(this.node);
            this.refreshPos();
        }
        refreshPos() {
            if (this.node.parent == this.newParent) {
                this.node.x = this.newX + this.offsetX;
                this.node.y = this.newY + this.offsetY;
            }
            else {
                this.node.x = this.oldX + this.offsetX;
                this.node.y = this.oldY + this.offsetY;
            }
        }
        set visible(v) {
            this.v = v;
            if (v && this.oldParent && !this.oldParent.displayedInStage) {
                v = false;
            }
            this.node.visible = v;
        }
    }
    DrawCallNode.TYPE_LABEL = 0;
    DrawCallNode.TYPE_DOT = 1;

    exports.DrawCallNode = DrawCallNode;
    exports.MainModel = MainModel;
    exports.NoticePopTipSelVo = NoticePopTipSelVo;
    exports.SignStatus = SignStatus;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function getParseObj(id) {
        switch (id) {
            case 1000: return new Gm_req();
            case 1001: return new Heartbeat_req();
            case 1002: return new Heartbeat_revc();
            case 1003: return new Kick_revc();
            case 1004: return new Err_revc();
            case 1005: return new PlayerLevel_revc();
            case 1006: return new PlayerCurExp_revc();
            case 3001: return new WebClientRegist_req();
            case 3002: return new WebClientRegist_revc();
            case 3003: return new WebClientLogin_req();
            case 3004: return new WebClientLogin_revc();
            case 3005: return new ExchangeEquip_req();
            case 3006: return new ExchangeEquip_revc();
            case 3007: return new EquipChange_revc();
            case 3008: return new ActionEquip_req();
            case 3009: return new ValChanel_revc();
            case 3010: return new Init_revc();
            case 3011: return new ChestUpLevel_req();
            case 3012: return new ChestInfoUpdate_revc();
            case 3013: return new ChestUpLevel_revc();
            case 3014: return new FightResult_revc();
            case 3015: return new FightStart_req();
            case 3016: return new ItemDel_revc();
            case 3017: return new Sell_revc();
            case 3018: return new Task_req();
            case 3019: return new Task_revc();
            case 3020: return new Adventure_revc();
            case 3021: return new Adventure_req();
            case 3022: return new FightEnd_req();
            case 3023: return new DebugFightVal_revc();
            case 3024: return new Reward_req();
            case 3025: return new Reward_revc();
            case 3026: return new ExchangeEquipProxy_req();
            case 3027: return new Adventure_Boss_req();
            case 3028: return new Adventure_Boss_revc();
            case 3029: return new GetRide_req();
            case 3030: return new GetRide_revc();
            case 3031: return new RideInfo_revc();
            case 3032: return new RideLv_req();
            case 3033: return new RideLv_revc();
            case 3034: return new RideQua_req();
            case 3035: return new RideQua_revc();
            case 3036: return new RideMission_req();
            case 3037: return new RideMission_revc();
            case 3039: return new RideStorgeUp_req();
            case 3040: return new RideStorgeUp_revc();
            case 3041: return new WingList_revc();
            case 3042: return new RideOwnerInfo_revc();
            case 3043: return new RideOwnerCnt_revc();
            case 3045: return new RideUpdate_req();
            case 3046: return new RideMissionList_revc();
            case 3047: return new RideMissionList_req();
            case 3048: return new RideMissionLingQu_req();
            case 3049: return new RideMissionDel_req();
            case 3050: return new RideMissionData_revc();
            case 3051: return new WingLevelUp_req();
            case 3052: return new WearedWingData_revc();
            case 3053: return new WingExchange_req();
            case 3054: return new WingInfo_revc();
            case 3055: return new GetWingList_req();
            case 3056: return new RideMissionTimeEnd_req();
            case 3057: return new wingTreasureUpgrade_req();
            case 3058: return new wingTreasureStage_revc();
            case 3059: return new JjcList_req();
            case 3060: return new JjcList_revc();
            case 3061: return new JjcRefreshList_req();
            case 3062: return new JjcRefreshList_revc();
            case 3065: return new JjcInfo_revc();
            case 3066: return new JjcFight_req();
            case 3067: return new JjcFight_revc();
            case 3068: return new JjcFightLog_req();
            case 3069: return new JjcFightLog_revc();
            case 3070: return new WatchPlayerInfo_req();
            case 3071: return new WatchPlayerInfo_revc();
            case 3072: return new JjcRewardGain_req();
            case 3073: return new JjcRewardGain_revc();
            case 3074: return new JjcListChange_revc();
            case 3075: return new JjcBuyFightCnt_req();
            case 3076: return new JjcBuyFightCnt_revc();
            case 3077: return new JjcMoneyUpdate_revc();
            case 3078: return new JjcOpen_revc();
            case 3079: return new JjcRankChange_revc();
            case 3080: return new TipsVoList_revc();
            case 3081: return new TipsVoList_req();
            case 3082: return new BuyItem_req();
            case 3083: return new BuyItemResult_revc();
            case 3084: return new ActivityList_revc();
            case 3085: return new ActivityChange_revc();
            case 3086: return new ActivityStatus_revc();
            case 3087: return new ActivityAction_req();
            case 3088: return new ActivityRedListInit_req();
            case 3089: return new ActivityRedListChange_revc();
            case 3092: return new SaoMarkRefresh_req();
            case 3093: return new BuyWing_req();
            case 3094: return new RechargeBill_req();
            case 3095: return new RechargeBill_revc();
            case 3096: return new reloadEquip_req();
            case 3097: return new reloadEquip_revc();
            case 3098: return new suitEquipList_revc();
            case 3099: return new suitEquip_req();
            case 3101: return new popWin_req();
            case 3102: return new popWin_revc();
            case 3103: return new StyleUpdate_revc();
            case 3104: return new GetEquipSkinList_req();
            case 3105: return new ShopBoughtItems_revc();
            case 3106: return new UseItem_req();
            case 3107: return new ItemNotEnoughCode_revc();
            case 3108: return new BoxUsedCount_revc();
            case 3109: return new GymInfo_revc();
            case 3110: return new GymLock_req();
            case 3111: return new GymGoto_req();
            case 3112: return new GymInvite_req();
            case 3113: return new GymInvite_revc();
            case 3114: return new GymForgetEquip_req();
            case 3115: return new GymSwicthEquip_req();
            case 3116: return new GymEquipInit_revc();
            case 3117: return new GymEquipChange_revc();
            case 3118: return new JjcSucceedReward_revc();
            case 3119: return new JjcSurplusRefreshCount_revc();
            case 3120: return new JjcActiveRefresh_req();
            case 3121: return new JjcWeekInfo_req();
            case 3122: return new JjcWeekInfo_revc();
            case 3123: return new GymFacilityList_revc();
            case 3124: return new GymUpgrade_req();
            case 3125: return new GymUpgrade_revc();
            case 3126: return new GymForgetEquip_revc();
            case 3127: return new ActivityGetInfo_req();
            case 3129: return new GymRoomUpgrade_req();
            case 3130: return new GymRoomLevel_revc();
            case 3131: return new GymFacilityRefinementList_revc();
            case 3132: return new GymFacilityRefinement_req();
            case 3133: return new GymFacilityRefinement_revc();
            case 3134: return new GymMissionList_revc();
            case 3135: return new GymMissionUpdate_revc();
            case 3136: return new GymMissionReward_req();
            case 3137: return new GymMissionRefresh_req();
            case 3154: return new BlessingMaxLevelRewards_revc();
            case 3155: return new BlessingLevel_req();
            case 3157: return new BlessingAuto_req();
            case 3158: return new BlessingInit_revc();
            case 3159: return new BlessingChange_revc();
            case 3160: return new BlessingOnce_req();
            case 3161: return new BlessingRes_revc();
            case 3162: return new BlessingConvert_req();
            case 3163: return new BlessingWear_req();
            case 3164: return new BlessingItemRemove_revc();
            case 3165: return new BlessingSlotStatus_revc();
            case 3166: return new BlessingLevelUp_req();
            case 3167: return new BlessingShop_req();
            case 3168: return new GymShop_req();
            case 3169: return new GymInviteGetList_req();
            case 3170: return new GymBondListInit_revc();
            case 3171: return new GymBond_req();
            case 3172: return new GymBondChange_revc();
            case 3173: return new GymBondNpcChange_revc();
            case 3175: return new GymInvitation_req();
            case 3176: return new GymInvitation_revc();
            case 3177: return new GymMissionCronRefresh_req();
            case 3178: return new GymFacilitySummary_revc();
            case 3179: return new GymRoomSummary_revc();
            case 3180: return new GymMapTasks_revc();
            case 3181: return new AfkInit_revc();
            case 3182: return new AfkUpdate_revc();
            case 3183: return new AfkFastUpdate_revc();
            case 3184: return new AfkInviteeUpdate_revc();
            case 3185: return new AfkReward_req();
            case 3186: return new AfkFast_req();
            case 3187: return new AfkInviteeBuy_req();
            case 3188: return new AfkRewardTimeUp_req();
            case 3189: return new AfkInviteeTimeUp_req();
            case 3190: return new AfkPackUpdate_revc();
            case 3191: return new AfkInvite_req();
            case 3192: return new AfkPackTimeUp_req();
            case 3193: return new StationInit_revc();
            case 3194: return new StationMainChange_revc();
            case 3195: return new StationRewards_req();
            case 3196: return new UpgradePassportSlot_req();
            case 3197: return new UpgradePassportSlot_revc();
            case 3198: return new DelegatePage_req();
            case 3199: return new FreshMission_req();
            case 3201: return new MissionList_revc();
            case 3202: return new DoMissions_req();
            case 3203: return new NewAdventureInit_revc();
            case 3204: return new NewAdventureFight_req();
            case 3205: return new NewAdventureUpdate_revc();
            case 3206: return new NewAdventureCtnUpdate_revc();
            case 3207: return new OpenStation_req();
            case 3208: return new RecoverPassport_req();
            case 3209: return new OpenStationNearBy_req();
            case 3210: return new OpenStationNearBy_revc();
            case 3211: return new FreshStationNearBy_req();
            case 3212: return new StationNearByDetail_req();
            case 3213: return new StationOtherChange_revc();
            case 3214: return new HandleStationNearBy_req();
            case 3215: return new RemarkStationNearBy_req();
            case 3216: return new RemarkStationList_req();
            case 3217: return new RemarkStationList_revc();
            case 3218: return new RemRemarkStationNearBy_req();
            case 3219: return new HandleStationLogs_req();
            case 3220: return new HandleStationLogs_revc();
            case 3221: return new HandleStationRevenge_req();
            case 3222: return new StationBySlot_req();
            case 3223: return new SpiritList_revc();
            case 3224: return new SpiritQuickWear_req();
            case 3225: return new SpiritListUpdate_revc();
            case 3226: return new SpiritListDel_revc();
            case 3227: return new SpiritUpgrade_req();
            case 3228: return new SpiritWear_req();
            case 3229: return new SpiritUnwear_req();
            case 3230: return new NewAdventureRewardUpdate_revc();
            case 3231: return new StationDaliyInfo_revc();
            case 3232: return new StationBuy_req();
            case 3233: return new StationBuy_revc();
            case 3234: return new AfkRefresh_req();
            case 3235: return new PurchasePriceSucceed_revc();
            case 3236: return new SmashInit_revc();
            case 3237: return new SmashEnroll_req();
            case 3238: return new SmashEnroll_revc();
            case 3239: return new SmashFightOpenReq_req();
            case 3240: return new SmashFightUpdataRep_req();
            case 3241: return new SmashUpdate_revc();
            case 3242: return new ServerNumReq_req();
            case 3243: return new ServerNumRevc_revc();
            case 3244: return new ServerListReq_req();
            case 3245: return new ServerListRevc_revc();
            case 3246: return new SelectServerIDReq_req();
            case 3247: return new SelectServerIDRevc_revc();
            case 3248: return new SmashStateUpdate_revc();
            case 3249: return new SmashFight_revc();
            case 3250: return new Success_revc();
            case 3251: return new BlessingAutoZH_revc_revc();
            case 3252: return new wxLogin_req();
            case 3253: return new wxPlayerInfo_req();
            case 3254: return new DingYueReq_req();
            case 3255: return new DingYueRevc_revc();
            case 3256: return new DingYueSelectReq_req();
            case 3257: return new DingYueSelectRevc_revc();
            case 3258: return new ConfigHash_revc();
            case 3259: return new GymPack_revc();
            case 3260: return new reloadEquipUpdate_revc();
            case 3261: return new weeklyReward_revc();
            case 3262: return new ServerVersion_revc();
            case 3263: return new MailRed_revc();
            case 3264: return new MailList_req();
            case 3265: return new MailList_revc();
            case 3266: return new GymMissionRefreshUpdate_revc();
            case 3267: return new RedDotUpdate_revc();
            case 3268: return new RedDotUpdate_req();
            case 3269: return new RedDotDel_req();
            case 3270: return new GmResult_revc();
            case 3271: return new AdCdInit_revc();
            case 3272: return new AdCdChange_revc();
            case 3273: return new AdWatchDone_req();
            case 3274: return new JjcRankDrop_revc();
            case 3275: return new SignStatus_revc();
            case 3276: return new SignStatus_req();
            case 3277: return new MonthCard_revc();
            case 3278: return new MonthCardGet_req();
            case 3279: return new AllLifeCard_revc();
            case 3280: return new AllLifeCardGet_req();
            case 3281: return new GemInit_revc();
            case 3282: return new GemBuy_req();
            case 3283: return new GemBuy_revc();
            case 3284: return new GemHandler_req();
            case 3285: return new GemChange_revc();
            case 3286: return new GemRemove_revc();
            case 3287: return new GemFormationWear_req();
            case 3288: return new GemFormationBuy_req();
            case 3289: return new GemFormationBuy_revc();
            case 3290: return new GemFormationChange_req();
            case 3291: return new GemFormationChange_revc();
            case 3292: return new NoticeList_revc();
            case 3293: return new GemHandler_revc();
            case 3294: return new ArtifactList_revc();
            case 3295: return new OpenArtifactBox_req();
            case 3296: return new OpenArtifactBox_revc();
            case 3297: return new ArtifactHandler_req();
            case 3298: return new ArtifactUpdate_revc();
            case 3299: return new ArtifactLogList_req();
            case 3300: return new ArtifactLogList_revc();
            case 3301: return new LabourPackGet_req();
            case 3302: return new LabourPackBuy_req();
            case 3303: return new LabourCapsuleToys_req();
            case 3304: return new LabourExchange_req();
            case 3305: return new LabourShop_req();
            case 3306: return new LabourShopInit_revc();
            case 3307: return new LabourShopChange_revc();
            case 3308: return new ArtifactPackList_revc();
            case 3309: return new ArtifactPackUpdate_revc();
            case 3310: return new ArtifactPack_req();
            case 3311: return new LabourCapsuleToys_revc();
            case 3312: return new LabourTicket_revc();
            case 3313: return new LabourItemRedChange_revc();
            case 3314: return new LabourBaodiLeft_revc();
            case 3315: return new refreshItems_req();
            case 3316: return new dailyReward_revc();
            case 3317: return new BoxAuto_req();
            case 3318: return new BoxAuto_revc();
            case 3319: return new PeakJjcList_req();
            case 3320: return new PeakJjcList_revc();
            case 3321: return new PeakJjcRefreshList_req();
            case 3322: return new PeakJjcRefreshList_revc();
            case 3323: return new PeakJjcInfo_revc();
            case 3324: return new PeakJjcFight_req();
            case 3326: return new PeakJjcFightLog_req();
            case 3327: return new PeakJjcFightLog_revc();
            case 3328: return new PeakWatchPlayerInfo_req();
            case 3329: return new PeakWatchPlayerInfo_revc();
            case 3330: return new PeakJjcRewardGain_req();
            case 3331: return new PeakJjcRewardGain_revc();
            case 3332: return new PeakJjcListChange_revc();
            case 3333: return new PeakJjcBuyFightCnt_req();
            case 3334: return new PeakJjcBuyFightCnt_revc();
            case 3335: return new PeakJjcOpen_revc();
            case 3336: return new PeakJjcRankChange_revc();
            case 3337: return new PeakJjcWeeklyRewardUnix_revc();
            case 3338: return new PeakJjcDailyRewardUnix_revc();
            case 3339: return new PeakJjcSucceedReward_revc();
            case 3340: return new PeakJjcSurplusRefreshCount_revc();
            case 3341: return new PeakJjcActiveRefresh_req();
            case 3342: return new PeakJjcWeekInfo_req();
            case 3343: return new PeakJjcWeekInfo_revc();
            case 3344: return new TitleInfo_revc();
            case 3345: return new TitleUpdate_revc();
            case 3346: return new TitleReward_req();
            case 3347: return new TitleReward_revc();
            case 3348: return new TitleChange_req();
            case 3349: return new TitleChange_revc();
            case 3350: return new TitleRefresh_req();
            case 3351: return new TitleExpire_revc();
            case 3352: return new TitleStateUpdate_revc();
            case 3353: return new TitleRefresh_revc();
            case 3354: return new RedMod_req();
            case 3355: return new PeakJjcMoneyUpdate_revc();
            case 3356: return new PeakJjcAvatar_req();
            case 3357: return new PeakJjcAvatar_revc();
            case 3358: return new MountReturn_req();
            case 3359: return new MountReturnPreView_req();
            case 3360: return new MountReturnPreView_revc();
            case 3361: return new MountRefinement_req();
            case 3362: return new MountRefinement_revc();
            case 3363: return new MountRefinementReplace_req();
            case 3364: return new MountRefinementLock_revc();
            case 3365: return new MountReturn_revc();
            case 3366: return new PeakJjcOpenUnix_revc();
            case 3367: return new JjcRewardPreview_revc();
            case 3368: return new ChiefInit_revc();
            case 3369: return new ChiefMainChange_revc();
            case 3370: return new RecruitChief_req();
            case 3371: return new RecruitChief_revc();
            case 3372: return new ChiefIntoBattle_req();
            case 3373: return new BuyMilitaryPledge_req();
            case 3374: return new BuyMilitaryPledge_revc();
            case 3375: return new CheifFightChange_revc();
            case 3376: return new CheifUpgrade_req();
            case 3377: return new CheifStarUp_req();
            case 3378: return new CheifEquipUp_req();
            case 3379: return new CheifReturn_req();
            case 3380: return new CheifSkillUp_req();
            case 3381: return new CheifMoraleReward_req();
            case 3382: return new CheifMoraleReward_revc();
            case 3383: return new InvitationRed_revc();
            case 3384: return new Invitation_req();
            case 3385: return new Invitation_revc();
            case 3386: return new InvitationGetReward_req();
            case 3387: return new InvitationGetActivation_req();
            case 3388: return new InvitationUpdate_revc();
            case 3389: return new InvitationActivationUpdate_revc();
            case 3390: return new CheifStarUp_revc();
            case 3391: return new MountChief_revc();
            case 3392: return new MountChiefChange_req();
            case 3393: return new FundInit_revc();
            case 3394: return new FundRefresh_req();
            case 3395: return new FundReward_req();
            case 3396: return new FundReward_revc();
            case 3398: return new ChiefLosslessReplacement_req();
            case 3399: return new ChiefLosslessReplacement_revc();
            case 3400: return new GetServerTimeMS_req();
            case 3401: return new GetServerTimeMS_revc();
            case 3402: return new MountFeastInit_revc();
            case 3403: return new MountFeastRecords_req();
            case 3404: return new MountFeastRecords_revc();
            case 3405: return new MountFeastSelfRecords_revc();
            case 3406: return new MountFeastNums_req();
            case 3407: return new MountFeastNums_revc();
            case 3408: return new MountFeastTotalCntReward_req();
            case 3409: return new MountFeastTotalCntReward_revc();
            case 3410: return new MountFeastTotalCnt_revc();
            case 3411: return new Conquest_revc();
            case 3412: return new ConquestChapterReward_req();
            case 3413: return new ConquestFight_req();
            case 3414: return new StarBattleInit_revc();
            case 3415: return new StarBattleKeyRecovery_req();
            case 3416: return new StarBattleKeyRecovery_revc();
            case 3417: return new StarBattleReward_req();
            case 3418: return new StarBattleReward_revc();
            case 3419: return new TurnWheel_req();
            case 3420: return new TurnWheel_revc();
            case 3421: return new StarBattleEnemys_req();
            case 3422: return new StarBattleEnemys_revc();
            case 3423: return new StarBattleFight_req();
            case 3424: return new StarBattleFight_revc();
            case 3425: return new StarNumChange_revc();
            case 3426: return new SilkBagHandler_req();
            case 3427: return new SilkBagHandler_revc();
            case 3428: return new StarBattleLog_req();
            case 3429: return new StarBattleLog_revc();
            case 3430: return new StarBattleRank_req();
            case 3431: return new StarBattleRank_revc();
            case 3432: return new StarBattleRankReward_req();
            case 3433: return new StarBattleRankReward_revc();
            case 3434: return new StarWatchPlayerInfo_req();
            case 3435: return new StarShopBuy_req();
            case 3436: return new StarShopBuy_revc();
            case 3437: return new ActivityInit_revc();
            case 3438: return new ActivityRecords_req();
            case 3439: return new ActivityRecords_revc();
            case 3440: return new ActivitySelfRecords_revc();
            case 3441: return new ActivityNums_req();
            case 3442: return new ActivityNums_revc();
            case 3443: return new ActivityTotalCntReward_req();
            case 3444: return new ActivityTotalCntReward_revc();
            case 3445: return new ActivityTotalCnt_revc();
            case 3446: return new TeamFightInit_revc();
            case 3447: return new TeamFightRankList_revc();
            case 3448: return new TeamFightHarmReward_req();
            case 3449: return new TeamFightHarmReward_revc();
            case 3450: return new TeamFightRankReward_req();
            case 3451: return new TeamFightRankReward_revc();
            case 3452: return new TeamFight_req();
            case 3453: return new TeamFight_revc();
            case 3454: return new TeamFightRankList_req();
            case 3455: return new TeamFightNum_revc();
            case 3456: return new CheifChangeSkin_req();
            case 3457: return new RedemptionCode_req();
            case 3458: return new StarStrike_req();
            case 3459: return new PalaceInit_revc();
            case 3460: return new PalaceReset_req();
            case 3461: return new PalaceFight_req();
            case 3462: return new PalaceChooseBuff_revc();
            case 3463: return new PalaceChooseBuff_req();
            case 3464: return new PalaceBuffList_revc();
            case 3465: return new PalaceRefreshBuff_req();
            case 3466: return new PalaceChooseCoreBuff_revc();
            case 3467: return new PalaceChooseCoreBuff_req();
            case 3468: return new PalaceCoreBuffList_revc();
            case 3469: return new PalaceRankList_req();
            case 3470: return new PalaceRankList_revc();
            case 3471: return new PalaceReward_req();
            case 3472: return new PalaceReward_revc();
            case 3473: return new PalaceUpdateRanking_revc();
            case 3474: return new PalaceShop_revc();
            case 3475: return new PalaceShopUpdate_revc();
            case 3476: return new PalaceUnlockBuff_req();
            case 3477: return new PalaceUpdateShop_req();
            case 3478: return new PalaceRefresh_req();
            case 3479: return new PalaceRefresh_revc();
            case 3480: return new PalaceShop_req();
            case 3481: return new GrowPackUnlock_revc();
            case 3482: return new StarShopOpen_req();
            case 3483: return new DailyWheelBigPrize_req();
            case 3484: return new DailyWheelBigPrize_revc();
            case 3485: return new DailyWheelTurn_req();
            case 3486: return new DailyWheelTurn_revc();
            case 3487: return new AdFreeCard_revc();
            case 3488: return new AdFreeCardGet_req();
            case 3489: return new OpenServerAdventureRank_req();
            case 3490: return new OpenServerAdventureRank_revc();
            case 3491: return new CommonWatchPlayerInfo_req();
            case 3492: return new OpenServerAccPaid_revc();
            case 3493: return new NewPlayerAttr_req();
            case 3494: return new NewPlayerAttr_revc();
            case 3495: return new TrammelsChiefInit_revc();
            case 3496: return new TrammelsChief_req();
            case 3497: return new TrammelsChief_revc();
            case 3498: return new TrammelsChiefUnlock_req();
            case 3499: return new PetInit_revc();
            case 3500: return new PetBuyFlute_req();
            case 3501: return new PetBuyFlute_revc();
            case 3502: return new PetExtract_req();
            case 3503: return new PetChange_revc();
            case 3504: return new PetFreeChange_revc();
            case 3505: return new PetBaoDiChange_revc();
            case 3506: return new PetOnBattle_req();
            case 3507: return new PetRebirth_req();
            case 3508: return new PetUpgradeLevel_req();
            case 3509: return new PetUpgradeStar_req();
            case 3510: return new PetRemove_revc();
            case 3511: return new PetNewTalent_req();
            case 3512: return new PetHandleNewTalent_req();
            case 3513: return new PetHandleNewTalent_revc();
            case 3514: return new PetUpgradeTalent_req();
            case 3515: return new PetExtractSuccess_revc();
            case 3516: return new PetFusion_revc();
            case 3517: return new PetFusion_req();
            case 3518: return new PetUpgradeTalent_revc();
            case 3519: return new PetNewTalent_revc();
            case 3520: return new NewPlayerFeast_revc();
            case 3521: return new NewPlayerFeastSelfRecords_revc();
            case 3522: return new NewPlayerFeastRewards_revc();
            case 3523: return new NewPlayerFeastScore_revc();
            case 3524: return new NewPlayerFeastScoreDraw_req();
            case 3525: return new NewServer_revc();
            case 3526: return new JjcScoreUpdate_revc();
            case 3527: return new PetFusionBaoDi_revc();
            case 3528: return new StationPillagesNew_req();
            case 3529: return new StationPillagesNew_revc();
            case 3530: return new GetFuncGuide_req();
            case 3531: return new GetFuncGuide_revc();
            case 3532: return new BoxCommitState_revc();
            case 3533: return new PetDecompose_req();
            case 3534: return new PlayerTotalCnt_revc();
            case 3535: return new SevenTask_revc();
            case 3536: return new SevenScore_revc();
            case 3537: return new SevenEvent_req();
            case 3538: return new SellEquipFinish_revc();
            case 3539: return new ShareReward_req();
            case 3540: return new ShareReward_revc();
            case 3541: return new BoxExtraItemInit_revc();
            case 3542: return new BoxExtraItemChange_revc();
            case 3543: return new ClubReward_req();
            case 3544: return new ClubReward_revc();
            case 3545: return new GemFreeChange_revc();
            case 3546: return new DailyShopWeekCard_revc();
            case 3547: return new NewPlayerFeastTask_revc();
            case 3548: return new NewPlayerFeastTask_req();
            case 3549: return new LabourShopFreeChange_revc();
            case 3550: return new LabourShopFree_req();
            case 3551: return new WorldChatList_revc();
            case 3552: return new WorldChatListChange_revc();
            case 3553: return new WorldChat_req();
            case 3554: return new AllianceList_req();
            case 3555: return new AllianceList_revc();
            case 3556: return new AllianceInfo_revc();
            case 3557: return new AlliancePlayerList_revc();
            case 3558: return new AllianceJoin_req();
            case 3559: return new AlliancePlayerManage_req();
            case 3560: return new AllianceSet_req();
            case 3561: return new AllianceCreate_req();
            case 3562: return new AllianceApplyList_revc();
            case 3563: return new CheifOnOpen_req();
            case 3564: return new ChiefAssist_req();
            case 3565: return new ChiefBuyFlag_req();
            case 3566: return new ChiefBuyFlag_revc();
            case 3567: return new ChiefChangeFlag_req();
            case 3568: return new ChiefChangeFlag_revc();
            case 3569: return new ChiefUpgradeFlag_req();
            case 3570: return new ChiefUpgradeFlag_revc();
            case 3571: return new AllianceSearch_req();
            case 3572: return new AllianceSearch_revc();
            case 3573: return new AllianceApplyList_req();
            case 3574: return new CheifStarUpMulti_req();
            case 3575: return new AllianceBossInit_revc();
            case 3576: return new AllianceBossRankList_req();
            case 3577: return new AllianceBossRankList_revc();
            case 3578: return new AllianceInnerRankList_req();
            case 3579: return new AllianceInnerRankList_revc();
            case 3580: return new AllianceMember_req();
            case 3581: return new AllianceRankReward_revc();
            case 3582: return new AllianceBossFight_req();
            case 3583: return new AllianceBossFight_revc();
            case 3584: return new CheifStarUpMulti_revc();
            case 3585: return new SkyRank_req();
            case 3586: return new SkyRank_revc();
            case 3587: return new WatchSkyRank_req();
            case 3588: return new WatchSkyRank_revc();
            case 3589: return new DrawLevelChange_revc();
            case 3590: return new TotalCntInit_revc();
            case 3591: return new TotalCntReward_req();
            case 3592: return new TotalCntReward_revc();
            case 3593: return new TotalCntChange_revc();
            case 3594: return new PetSoulExchange_req();
            case 3595: return new PromotionInit_revc();
            case 3596: return new PromotionUgraded_revc();
            case 3597: return new PromotionDataChange_revc();
            case 3598: return new PromotionReward_req();
            case 3599: return new Promotion_req();
            case 3600: return new AllianceShop_req();
            case 3601: return new AllianceShop_revc();
            case 3602: return new AllianceShopInit_revc();
            case 3603: return new WxAuthInfo_revc();
            case 3604: return new WxAuthInfo_req();
            case 3605: return new AllianceSetWord_req();
            case 3606: return new JustWatchPlayer_req();
            case 3607: return new AllianceJoinWait_revc();
            case 3608: return new AllianceWarInit_revc();
            case 3609: return new AllianceWarTimeChange_revc();
            case 3610: return new AllianceWarSignUp_req();
            case 3611: return new AllianceWarSignUp_revc();
            case 3612: return new AllianceWarPsChange_revc();
            case 3613: return new AllianceWarEnterActivity_req();
            case 3614: return new AllianceWarEnemyLife_req();
            case 3615: return new GameStyle_req();
            case 3616: return new AllianceWarEnemyLife_revc();
            case 3617: return new AllianceWarFight_req();
            case 3618: return new GetChestQua_req();
            case 3619: return new GetChestQua_revc();
            case 3620: return new AllianceWarCityPreview_revc();
            case 3621: return new AllianceWarCityDetail_req();
            case 3622: return new AllianceWarCityDetail_revc();
            case 3623: return new AllianceWarCityEvent_req();
            case 3624: return new AllianceWarCityFresh_req();
            case 3625: return new AllianceWarBounsEnd_req();
            case 3626: return new AllianceWarBossDamage_req();
            case 3627: return new AllianceWarBossDamage_revc();
            case 3628: return new AllianceWarCityLog_req();
            case 3629: return new AllianceWarCityLog_revc();
            case 3630: return new AllianceWarAllianceRank_req();
            case 3631: return new AllianceWarAllianceRank_revc();
            case 3632: return new AllianceWarInnerRank_req();
            case 3633: return new AllianceWarInnerRank_revc();
            case 3634: return new AllianceWarRewardRank_req();
            case 3635: return new AllianceWarRewardRank_revc();
            case 3636: return new AllianceWarGetRankReward_req();
            case 3637: return new AllianceWarGetRankReward_revc();
            case 3638: return new BattlePass_revc();
            case 3639: return new BattlePassMonth_revc();
            case 3640: return new BattlePassWeek_revc();
            case 3641: return new BattlePassReward_req();
            case 3642: return new BattlePassTask_revc();
            case 3643: return new BattlePassTaskUpdate_revc();
            case 3644: return new BattlePassPack_revc();
            case 3645: return new BattlePassMonthUpdate_revc();
            case 3646: return new BattlePassWeekUpdate_revc();
            case 3647: return new BattlePassTask_req();
            case 3648: return new BattlePassPackFree_req();
            case 3649: return new BattlePassPackFree_revc();
            case 3650: return new BattlePassPackAccTimes_req();
            case 3651: return new BattlePassPackAccTimes_revc();
            case 3652: return new BattlePassPackUpdate_revc();
            case 3653: return new GameStyle_revc();
            case 3654: return new NewCrossGroup_revc();
            case 3655: return new DailyEventInit_revc();
            case 3656: return new DailyEventTaskUpdate_revc();
            case 3657: return new DailyEventTask_req();
            case 3658: return new DailyEventSearch_req();
            case 3659: return new DailyEventSearch_revc();
            case 3660: return new MonopolyInit_revc();
            case 3661: return new MonopolyGo_req();
            case 3662: return new MonopolyMapUpdate_revc();
            case 3663: return new MonopolyTaskUpdate_revc();
            case 3664: return new MonopolyTask_req();
            case 3665: return new MonopolyPack_req();
            case 3666: return new MonopolyPackUpdate_revc();
            case 3667: return new MonopolyReward_req();
            case 3668: return new DrawEventInit_revc();
            case 3669: return new DrawEventChoose_req();
            case 3670: return new DrawEventChoose_revc();
            case 3671: return new DrawEvent_req();
            case 3672: return new DrawEventRewardUpdate_revc();
            case 3673: return new DrawEventTaskUpdate_revc();
            case 3674: return new DrawEventTask_req();
            case 3675: return new DrawEventPack_req();
            case 3676: return new DrawEventPack_revc();
            case 3677: return new DrawEventCumulateReward_req();
            case 3678: return new DrawEventCumulateReward_revc();
            case 3679: return new DrawEventReward_req();
            case 3680: return new ArtifactSuitInit_revc();
            case 3681: return new ArtifactSuit_req();
            case 3682: return new ArtifactSuitUpdate_revc();
            case 3684: return new GemLifeBlood_req();
            case 3685: return new GemLifeBlood_revc();
            case 3686: return new AllianceWarCan_revc();
            case 3687: return new AllianceWarPlayerDamage_revc();
            case 3688: return new AllianceWarSkins_revc();
            case 3689: return new AllianceWarRank_req();
            case 3690: return new AllianceWarRank_revc();
            case 3691: return new AllianceWarBounsEnd_revc();
            case 3692: return new NamingInit_revc();
            case 3693: return new FirstDayCharge_revc();
            case 3694: return new NamingReward_revc();
            case 3695: return new NameingChange_revc();
            case 3696: return new GetNamingReward_req();
            case 3697: return new NameingServer_req();
            case 3698: return new NameingServer_revc();
            case 3699: return new NamingChargeRank_req();
            case 3700: return new NamingChargeRankFirstDay_revc();
            case 3701: return new NamingChargeRank_revc();
            case 3703: return new AllianceWarBounsCan_revc();
            case 3704: return new AllianceWarGetRankRewardState_req();
            case 3705: return new SpringFestivalInit_revc();
            case 3706: return new SpringFestivalCanJoin_req();
            case 3707: return new SpringFestivalCanJoin_revc();
            case 3708: return new SpringFestivalEnroll_req();
            case 3709: return new SpringFestivalEnroll_revc();
            case 3710: return new SpringFestivalFire_req();
            case 3711: return new SpringFestivalTaskUpdate_revc();
            case 3712: return new SpringFestivalTask_req();
            case 3713: return new SpringFestivalPack_req();
            case 3714: return new SpringFestivalPack_revc();
            case 3715: return new SpringFestivalReward_req();
            case 3716: return new SpringFestivalReward_revc();
            case 3717: return new SpringFestivalAllianceRank_req();
            case 3718: return new SpringFestivalAllianceRank_revc();
            case 3719: return new SpringFestivalAllianceRankReward_req();
            case 3720: return new SpringFestivalAllianceRankReward_revc();
            case 3721: return new SpringFestivalShop_req();
            case 3722: return new SpringFestivalShop_revc();
            case 3723: return new SpringFestivalPrestige_revc();
            case 3724: return new SideBarReward_req();
            case 3725: return new SideBarReward_revc();
            case 3726: return new SpringFestivalFire_revc();
            case 3727: return new WarcraftSkinInit_revc();
            case 3728: return new WarcraftSkin_req();
            case 3729: return new WarcraftSkin_revc();
            case 3730: return new WarcraftSkinListUpdate_revc();
            case 3731: return new WarcraftAttrListUpdate_revc();
            case 3732: return new WarcraftSkinAttr_req();
            default: return null;
        }
    }

    exports.getParseObj = getParseObj;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (SERVERTYPE) {
        SERVERTYPE[SERVERTYPE["CLOSE"] = 1] = "CLOSE";
        SERVERTYPE[SERVERTYPE["SELECTTYPE"] = 2] = "SELECTTYPE";
        SERVERTYPE[SERVERTYPE["KickNtf"] = 3] = "KickNtf";
    })(exports.SERVERTYPE || (exports.SERVERTYPE = {}));
    class ClientSocket {
        constructor() {
            this.blen = 0;
            this.needReconnect = false;
            this.totalReconnectCount = 3;
            this.curReconnectCount = 0;
        }
        get HEART_TIME() {
            let v = SocketMgr.Ins.HeartMillisecond;
            if (!v) {
                v = 2000;
            }
            return v;
        }
        ConnectByUrl(url, target, callback) {
            this._url = url;
            if (!this._socket) {
                this._socket = new Laya.Socket();
                this._socket.endian = Laya.Socket.BIG_ENDIAN;
            }
            this._target = target;
            this._callback = callback;
            console.log('ConnectByUrl:' + url);
            this._socket.connectByUrl(url);
            this.regEvents();
        }
        regEvents() {
            if (this._socket) {
                this._socket.on(Laya.Event.OPEN, this, this.socketOpenHandler);
                this._socket.on(Laya.Event.MESSAGE, this, this.socketMessageHandler);
                this._socket.on(Laya.Event.CLOSE, this, this.socketCloseHandler);
                this._socket.on(Laya.Event.ERROR, this, this.socketErrorHandler);
            }
        }
        remEvents() {
            if (this._socket) {
                this._socket.off(Laya.Event.OPEN, this, this.socketOpenHandler);
                this._socket.off(Laya.Event.MESSAGE, this, this.socketMessageHandler);
                this._socket.off(Laya.Event.CLOSE, this, this.socketCloseHandler);
                this._socket.off(Laya.Event.ERROR, this, this.socketErrorHandler);
            }
        }
        get hasLog() {
            return initConfig.proto_log || Laya.Utils.getQueryString("proto_log");
        }
        binSendMsg(msg) {
            if (!this.IsConnect()) {
                console.log("socket 为空");
                return;
            }
            let cmd = msg.protoid;
            let data = new Laya.Byte();
            data.pos = 0;
            data.endian = Laya.Byte.BIG_ENDIAN;
            if (typeof msg == "string") {
                throw Error("检查是否是json格式的协议");
            }
            msg.write(data);
            if (this.hasLog) {
                this.blen += data.length;
                if (cmd != MSGID.HeartbeatReq) {
                    console.log("..send:" + TimeUtil.serverTimeOutStr, msg, data.length + " bytes ");
                }
            }
            let msgByteArr = new Laya.Byte();
            msgByteArr.pos = 0;
            msgByteArr.endian = Laya.Byte.BIG_ENDIAN;
            msgByteArr.writeUint16(cmd);
            msgByteArr.writeUint32(data.length);
            if (data.length > 0) {
                msgByteArr.writeArrayBuffer(data.buffer);
            }
            this._socket.send(msgByteArr.buffer);
        }
        SendMessage(msgId, msg) {
            if (!this.IsConnect()) {
                console.log("socket 为空");
                return;
            }
            let data = new Laya.Byte();
            data.pos = 0;
            data.endian = Laya.Byte.BIG_ENDIAN;
            data.writeUTFBytes(msg);
            let msgByteArr = new Laya.Byte();
            msgByteArr.pos = 0;
            msgByteArr.endian = Laya.Byte.BIG_ENDIAN;
            msgByteArr.writeUint16(msgId);
            msgByteArr.writeUint32(data.length);
            if (data.length > 0) {
                msgByteArr.writeArrayBuffer(data.buffer);
            }
            this._socket.send(msgByteArr.buffer);
            if (msgId != MSGID.HeartbeatReq) ;
        }
        readMessage(msg) {
            let data = new Laya.Byte();
            data.writeArrayBuffer(msg);
            data.pos = 0;
            data.endian = Laya.Byte.BIG_ENDIAN;
            let cmdId = data.getUint16();
            let datalen = data.getUint32();
            let protoByte = new Laya.Byte();
            let protoUint8Arr = data.getUint8Array(data.pos, datalen);
            protoByte.writeArrayBuffer(protoUint8Arr.buffer);
            protoByte.pos = 0;
            protoByte.endian = Laya.Byte.BIG_ENDIAN;
            let obj = getParseObj(cmdId);
            if (obj) {
                if (this.hasLog) {
                    this.blen += protoByte.length;
                    if (cmdId != MSGID.HeartbeatRsp) {
                        console.log("readIndex:" + SocketMgr.Ins.readIndex + " " + Laya.timer.currTimer + ",read:" + TimeUtil.serverTimeOutStr, obj, "cmd:" + cmdId + " len:" + protoByte.length);
                    }
                }
                if (cmdId != MSGID.HeartbeatRsp) {
                    if (obj.read) {
                        obj.read(protoByte);
                        protoByte.clear();
                        let msgInfo = { msgId: cmdId, data: obj };
                        E.EventMgr.emit(EventID.WEBSOCKET_MESSAGE, msgInfo);
                        SocketMgr.Ins.readIndex++;
                    }
                    else {
                        console.error(cmdId + " 协议未添加监听!");
                    }
                }
            }
            else {
                console.error("协议:" + cmdId + "未定义");
            }
        }
        IsConnect() {
            return this._socket && this._socket.connected;
        }
        close() {
            if (this._socket)
                this._socket.close();
        }
        socketOpenHandler() {
            LogSys$1.Log("webSocket is open");
            this.StartOrStopHeartbeat(true);
            this.totalReconnectCount = 10;
            this.curReconnectCount = 0;
            this.serverType = exports.SERVERTYPE.CLOSE;
            if (this._callback != null)
                this._callback.bind(this._target)();
        }
        onReadList() {
            if (this._msgList.length > 0) {
                let cell = this._msgList.shift();
                this.readMessage(cell);
            }
        }
        socketMessageHandler(msg = null) {
            this.readMessage(msg);
        }
        SetReconnectCall(callback) {
            this.reconnectCallback = callback;
        }
        socketCloseHandler() {
            LogSys$1.Log("webSocket is close");
            E.sendTrack("webSocket is close", { "curReconnectCount": this.curReconnectCount });
            this.StartOrStopHeartbeat(false);
            this.clean();
            if (this.serverType == exports.SERVERTYPE.SELECTTYPE) {
                E.MsgMgr.reset();
                E.ViewMgr.Close(EViewType.SheZhiView);
                E.ViewMgr.Close(EViewType.QuFuView);
                MainModel.Ins.connectRegist();
            }
            else if (this.serverType == exports.SERVERTYPE.KickNtf) {
                E.EventMgr.emit(EventID.KickNtf, null);
            }
            else {
                if (this.curReconnectCount == 0)
                    this.needReconnect = true;
                if (this.needReconnect && this.curReconnectCount < this.totalReconnectCount) {
                    ++this.curReconnectCount;
                    LogSys$1.Warn("curReconnectCount:::" + this.curReconnectCount);
                    Laya.timer.callLater(this, () => {
                        if (this.reconnectCallback != null)
                            this.reconnectCallback.Invoke({ caller: this, callback: null });
                    });
                }
                else {
                    this.needReconnect = false;
                    if (this._callback != "")
                        this._callback = "";
                    E.EventMgr.emit(EventID.WEBSOCKET_CLOSED, null);
                }
            }
        }
        socketErrorHandler() {
            if (E.Debug) {
                E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, `${this._url} connect fail!`);
            }
            LogSys$1.Log("webSocket Error is close");
            E.sendTrack("webSocket Error is close", { "curReconnectCount": this.curReconnectCount });
            this.StartOrStopHeartbeat(false);
            this.clean();
            Laya.timer.once(1000, this, this.onCurRec);
        }
        onCurRec() {
            LogSys$1.Log("onCurRec>>>>>>>>>>");
            E.sendTrack("onCurRec", { "curReconnectCount": this.curReconnectCount });
            if (this.curReconnectCount >= this.totalReconnectCount) {
                E.EventMgr.emit(EventID.WEBSOCKET_ERROR, null);
                LogSys$1.Log("onCurRec>>>>>>>>>>,EventID.WEBSOCKET_ERROR");
                return;
            }
            if (this._socket && this._socket.connected) {
                LogSys$1.Log("onCurRec>>>>>>>>>>,connectedOKOKOK>>>>");
                return;
            }
            else {
                if (this.reconnectCallback != null)
                    this.reconnectCallback.Invoke({ caller: this, callback: null });
                this.curReconnectCount++;
                LogSys$1.Log("onCurRec>>>>>>>>>>,connected>>>>", this.curReconnectCount);
            }
        }
        clean() {
            if (this._socket) {
                this._socket.close();
                this.remEvents();
                this._socket = null;
            }
        }
        SetHeartbeatCall(callback) {
            this._heartbeatCallback = callback;
        }
        StartOrStopHeartbeat(b) {
            if (this._heartbeatTimer)
                this._heartbeatTimer.clear(this, this.headbeatHandler);
            if (b) {
                if (this._heartbeatTimer == null)
                    this._heartbeatTimer = new Laya.Timer();
                this._heartbeatTimer.once(this.HEART_TIME, this, this.headbeatHandler);
            }
        }
        headbeatHandler() {
            if (this._heartbeatCallback != null)
                this._heartbeatCallback.Invoke();
            this._heartbeatTimer.once(this.HEART_TIME, this, this.headbeatHandler);
        }
    }
    ClientSocket.mJsonString = false;

    exports.ClientSocket = ClientSocket;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class LoginClient extends BaseModel {
        constructor() {
            super(...arguments);
            this.openId = "";
        }
        static get Ins() {
            if (!this._ins)
                this._ins = new LoginClient();
            return this._ins;
        }
        onInitCallBack() {
        }
        initMsg() {
            E.MsgMgr.AddMsg(MSGID.WebClientRegistRsp, this.onRegistRsp, this);
            E.MsgMgr.AddMsg(MSGID.WebClientLoginRsp, this.onLoginRsp, this);
            E.MsgMgr.AddMsg(MSGID.KickNtf, this.onKickNtf, this);
        }
        ReqRegist(acc, pwd) {
            if (SocketMgr.Ins.IsConnect()) {
                let obj = new WebClientRegist_req();
                obj.pid = EPID.Internal;
                obj.account = acc;
                obj.password = pwd;
                SocketMgr.Ins.SendMessageBin(obj);
                return;
            }
            else {
                SocketMgr.Ins.ConnectWebsocket(this, () => {
                    this.ReqRegist(acc, pwd);
                });
            }
        }
        wxLogin(type) {
            let req = new wxLogin_req();
            let _data = InitConfig.wxLoginResult.result;
            req.appid = _data.appid;
            req.openid = _data.openid;
            req.token = _data.token;
            req.type = type;
            req.inviterId = 0;
            let distinctId = "";
            if (E.ta) {
                if (E.ta.store) {
                    distinctId = E.ta.store._state.distinct_id;
                }
                else if (E.ta.persistence) {
                    distinctId = E.ta.persistence._state.distinct_id;
                }
            }
            req.distinctId = distinctId;
            req.scene = 0;
            req.tunnelId = E.sdk.cbsgTunnelId;
            if (window['wx']) {
                const data = wx.getLaunchOptionsSync();
                req.scene = data['scene'];
                const inviterId = Number(data['query'] && data['query']['inviterId']);
                if (inviterId) {
                    req.inviterId = inviterId;
                }
            }
            else {
                const inviterId = Number(Laya.Utils.getQueryString("inviterId"));
                if (inviterId) {
                    req.inviterId = inviterId;
                }
            }
            LogSys$1.Log("wxLogin:" + req.appid + "," + req.openid + "," + req.token + "," + req.type + "," + req.distinctId + "," + req.scene + "," + req.inviterId);
            SocketMgr.Ins.SendMessageBin(req);
        }
        wxNormalLogin() {
            if (SocketMgr.Ins.IsConnect()) {
                this.wxLogin(0);
                E.taLoginTrack("socketLinkComplete");
            }
            else {
                SocketMgr.Ins.ConnectWebsocket(this, this.onConnectSucceed);
            }
        }
        onConnectSucceed() {
            let id = EViewType.LoginNew;
            if (E.ViewMgr.IsOpen(id)) {
                let view = E.ViewMgr.Get(id);
                if (view) {
                    view.onUnlockEnter();
                    E.ViewMgr.closeWait();
                }
            }
        }
        wxReconnetLogin() {
            this.wxLogin(1);
        }
        onRegistRsp(data) {
            E.EventMgr.emit(EventID.WebClientRegistRsp, { errorID: data.errorID });
        }
        ReqLogin(acc, pwd) {
            if (SocketMgr.Ins.IsConnect()) {
                let msg = new WebClientLogin_req();
                msg.account = acc;
                msg.password = pwd;
                msg.pid = EPID.Internal;
                SocketMgr.Ins.SendMessageBin(msg);
                E.ViewMgr.openWait(true);
                return;
            }
            SocketMgr.Ins.ConnectWebsocket(this, () => {
                this.ReqLogin(acc, pwd);
            });
        }
        onAudioComplete() {
            LogSys$1.Log("onAudioComplete...");
            E.AudioMgr.PlayBGM(Frame.BGMDefine.bgm);
        }
        startPlayAudio() {
            E.AudioMgr.LoadAudio(this, this.onAudioComplete, this.loadAudioProgress);
        }
        loadAudioProgress(v) {
            LogSys$1.Log("loadAudioProgress:" + v);
        }
        onLoginRsp(data) {
            if (data.errorID == 0) {
                let model = MainModel.Ins;
                model.clearUI();
                SocketMgr.Ins.HeartMillisecond = data.serverConfig.HeartMillisecond;
                TimeUtil.serverTimeV = data.serverConfig.ServerTime;
                let opentime = data.serverConfig.openTime;
                if (opentime.isZero()) {
                    opentime = new uint64(TimeUtil.serverTime);
                }
                TimeUtil.openTime = opentime;
                LogSys$1.Log("开服时间:" + TimeUtil.timestamtoTime(TimeUtil.serverTime * 1000));
                model.isNewRole = data.newRole == 1;
                let mRoleData = model.mRoleData;
                mRoleData.mBaseInfo = data.BaseInfo;
                mRoleData.mPlayer = data.playerData;
                LogSys$1.Log("url1:" + mRoleData.mPlayer.HeadUrl);
                mRoleData.NickName = data.playerData.NickName;
                mRoleData.AccountId = data.playerData.AccountId;
                mRoleData.serverId = data.playerData.serverId;
                if (!StringUtil.IsNullOrEmpty(data.playerData.naming)) {
                    mRoleData.serverName = data.playerData.naming;
                }
                else {
                    mRoleData.serverName = data.playerData.serverName;
                }
                model.initEquipList(data.BaseInfo.equipItem);
                model.initCD(1);
                this.startPlayAudio();
            }
            E.ViewMgr.closeWait();
            E.EventMgr.emit(EventID.WebClientLoginRsp, { errorID: data.errorID });
        }
        onKickNtf(data) {
            SocketMgr.Ins.KickNtfType = data.reason;
            SocketMgr.Ins.setServerType(SERVERTYPE.KickNtf);
        }
    }

    exports.LoginClient = LoginClient;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class SocketMgr {
        constructor() {
            this.readIndex = 0;
            this._hearbeatMsg = JSON.stringify({});
            this.initData();
        }
        static get Ins() {
            if (!this._ins)
                this._ins = new SocketMgr();
            return this._ins;
        }
        initData() {
            if (!this._socket) {
                this._socket = new ClientSocket();
                this._socket.SetHeartbeatCall(Callback.Create(this, this.hearbeatCallback));
                this._socket.SetReconnectCall(Callback.Create(this, this.connectWebSocket));
            }
        }
        ConnectWebsocket(target, callback) {
            let sendUrl = InitConfig.getServerIp();
            this._socket.ConnectByUrl(sendUrl, target, callback);
        }
        connectWebSocket() {
            this.ConnectWebsocket(this, () => {
                E.sendTrack("connectWebSocket>>>>>>>>>>");
                if (SocketMgr.Ins.IsConnect()) {
                    LoginClient.Ins.wxReconnetLogin();
                }
            });
        }
        SendMessageBin(msg) {
            if (!this._socket.IsConnect()) {
                LogSys$1.Log("websocket not connect");
                return;
            }
            this._socket.binSendMsg(msg);
        }
        setServerType(value) {
            this._socket.serverType = value;
        }
        getServerType() {
            return this._socket.serverType;
        }
        IsConnect() {
            return this._socket && this._socket.IsConnect();
        }
        CloseSocket() {
            if (this._socket)
                this._socket.close();
        }
        hearbeatCallback() {
            SocketMgr.Ins.SendMessageBin(new Heartbeat_req());
            SocketMgr.Ins.SendMessageBin(new GetServerTimeMS_req());
        }
    }

    exports.SocketMgr = SocketMgr;

    return exports;

}(window));
(function (exports) {
	'use strict';

	class LayerEvent {
	}
	LayerEvent.AddChild = "AddChild";
	LayerEvent.RemoveChlid = "RemoveChlid";
	LayerEvent.AnimationComplete = "AnimationComplete";

	exports.LayerEvent = LayerEvent;

	return exports;

}(window));
(function (exports) {
    'use strict';

    class MaskLayer extends LayerBase {
        constructor(layerid, name) {
            super(layerid, name);
            this._maskEnable = false;
            this._useAnimation = false;
            this._animationComplete = false;
            this._handler = [];
            this._useCustomMask = false;
            this._customMask = null;
            this._customMaskParent = null;
            this._customMaskIndex = 0;
            this.InitMask();
            this._handler = [];
            this._maskEnable = false;
            this._useAnimation = true;
        }
        set MaskEnable(b) {
        }
        set MaskAlpha(a) {
        }
        set UseAnimation(b) {
            this._useAnimation = b;
        }
        get AnimationComplete() {
            return this._animationComplete;
        }
        AddChlidWithMaskCall(caller, listener, args = null, alpha = MaskLayer.DEF_MASK_ALPHA) {
            this.MaskEnable = false;
            if (this.MaskAlpha !== MaskLayer.DEF_MASK_ALPHA)
                this.MaskAlpha = alpha;
            this.addChild(caller);
            this._handler.push(Laya.Handler.create(caller, listener, args));
        }
        AddChildWithCustomMask(mask, caller, listener, args = null) {
            if (!mask)
                return;
            this.MaskEnable = false;
            this._useCustomMask = true;
            this._customMask = mask;
            if (this._customMask.parent) {
                this._customMaskParent = this._customMask.parent;
                this._customMaskIndex = this._customMaskParent.getChildIndex(this._customMask);
            }
            this.addChild(caller);
            this._handler.push(Laya.Handler.create(caller, listener, args));
        }
        addChild(node) {
            this.SuperAddChild(node);
            if (this._useCustomMask && this._customMask) {
                super.addChildAt(this._customMask, 0);
            }
            if (this._maskEnable) ;
            this.event(LayerEvent.AddChild, this.numChildren);
            return node;
        }
        removeChild(node) {
            super.removeChild(node);
            if (this.numChildren == 2 && this._useCustomMask) {
                if (this._customMask) {
                    if (this._customMaskParent) {
                        this._customMaskParent.addChildAt(this._customMask, this._customMaskIndex);
                    }
                    this._useCustomMask = false;
                    this._customMask = null;
                    this._customMaskParent = null;
                    this._customMaskIndex = 0;
                }
            }
            this.event(LayerEvent.RemoveChlid, this.numChildren);
            return node;
        }
        InitMask() {
        }
        SuperAddChild(node, index) {
            if (this.UseAnimation && !this.AnimationComplete) {
                let sp = node;
                if (sp) {
                    let comp = node;
                    let size = new Laya.Point();
                    if (comp)
                        size.setTo(sp.displayWidth, sp.displayHeight);
                    else {
                        let rect = sp.getBounds();
                        size.setTo(rect.width, rect.height);
                    }
                    Laya.Tween.from(node, { x: sp.x + (size.x >> 1), y: sp.y + (size.y >> 1), ScaleX: 0, ScaleY: 0 }, 300, Laya.Ease.backInOut, Laya.Handler.create(this, () => {
                        this._animationComplete = true;
                        this.event(LayerEvent.AnimationComplete, this.AnimationComplete);
                    }));
                }
            }
            if (index)
                super.addChildAt(node, index);
            else
                super.addChild(node);
            return node;
        }
        ApplyClick() {
            if (this._handler.length)
                this._handler.pop().run();
        }
    }
    MaskLayer.DEF_MASK_ALPHA = 0;

    exports.MaskLayer = MaskLayer;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (ELayerType) {
        ELayerType[ELayerType["none"] = 0] = "none";
        ELayerType[ELayerType["sceneLayer"] = 1] = "sceneLayer";
        ELayerType[ELayerType["sceneMaskLayer"] = 2] = "sceneMaskLayer";
        ELayerType[ELayerType["battleLayer"] = 3] = "battleLayer";
        ELayerType[ELayerType["navLayer"] = 4] = "navLayer";
        ELayerType[ELayerType["flyLayer"] = 5] = "flyLayer";
        ELayerType[ELayerType["frameLayer"] = 6] = "frameLayer";
        ELayerType[ELayerType["subFrameLayer"] = 7] = "subFrameLayer";
        ELayerType[ELayerType["alertLayer"] = 8] = "alertLayer";
        ELayerType[ELayerType["screenEffectLayer"] = 9] = "screenEffectLayer";
        ELayerType[ELayerType["rollMessageLayer"] = 10] = "rollMessageLayer";
        ELayerType[ELayerType["guideLayer"] = 11] = "guideLayer";
        ELayerType[ELayerType["smallLoadingLayer"] = 12] = "smallLoadingLayer";
        ELayerType[ELayerType["noteLayer"] = 13] = "noteLayer";
        ELayerType[ELayerType["debugLayer"] = 14] = "debugLayer";
    })(exports.ELayerType || (exports.ELayerType = {}));
    class LayerMgr {
        constructor() {
            this._topMask = new Laya.Sprite();
            this._layers = [];
            this._layerMgr = Laya.stage.getChildByName(this.constructor.name);
            if (this._layerMgr != null)
                this._layerMgr.destroy();
            this._layerMgr = new Laya.Sprite();
            this._layerMgr.name = this.constructor.name;
            Laya.stage.addChild(this._layerMgr);
            Laya.stage.addChild(this._topMask);
            Laya.stage.on(Laya.Event.RESIZE, this, this.onStageResize, null);
            Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
            E.EventMgr.on(EventID.WEBSOCKET_CLOSED, this, this.onSockectClosed);
            E.EventMgr.on(EventID.WEBSOCKET_ERROR, this, this.onSockectError);
            E.EventMgr.on(EventID.WEBSOCKET_SELECTSERVER, this, this.onSockectSelectServer);
            E.EventMgr.on(EventID.PlayerKickTheLineNtf, this, this.onPlayerKickTheLineNtf);
            E.EventMgr.on(EventID.KickNtf, this, this.onKickNtf);
        }
        static get Ins() {
            if (!this._ins)
                this._ins = new LayerMgr();
            return this._ins;
        }
        static get mouseX() { return Laya.stage.mouseX / LayerMgr.adaptScaleX; }
        static get mouseY() { return Laya.stage.mouseY / LayerMgr.adaptScaleY; }
        get Layers() { return this._layers; }
        drawTopMask() {
            if (Laya.Utils.getQueryString("maskhide")) {
                return;
            }
            let cellw = 0;
            let w = ScreenAdapter.UIRefWidth;
            if (Laya.stage.width > w) {
                cellw = (Laya.stage.width - w) / 2;
            }
            let _topMask = this._topMask;
            _topMask.graphics.clear();
            if (cellw) {
                _topMask.graphics.drawRect(0, 0, cellw, Laya.stage.height, "#000000");
                _topMask.graphics.drawRect(cellw + w, 0, cellw, Laya.stage.height, "#000000");
            }
        }
        onStageResize() {
            LayerMgr.Ins.ResizeStage();
            LayerMgr.Ins.ResizeLayers();
            E.ViewMgr.SetLayout();
        }
        onMouseDown() {
            if (this._clickEffect != null) {
                this._clickEffect.ShowEffect();
            }
        }
        onSockectError() {
            E.ViewMgr.closeLoading();
            E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, E.LangMgr.getLang("MSG_SOCKETERROR"), new Laya.Handler(this, this.pageToLogin));
        }
        onSockectClosed() {
            E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, E.LangMgr.getLang("MSG_SOCKETCLOSED"), new Laya.Handler(this, this.pageToLogin));
        }
        onSockectSelectServer() {
            this.pageToLogin();
        }
        reConnect() {
        }
        pageToLogin() {
            E.ViewMgr.CloseAll();
            SocketMgr.Ins.CloseSocket();
            E.ViewMgr.Open(EViewType.LoginNew);
            E.AudioMgr.StopBGM();
        }
        onPlayerKickTheLineNtf() {
            this.pageToLogin();
        }
        onKickNtf() {
            let st = "";
            if (SocketMgr.Ins.KickNtfType == 0) {
                st = "同名账号登录";
            }
            else {
                st = "您已被踢下线";
            }
            E.ViewMgr.ShowMsgBox(EMsgBoxType.OnlyOk, st, null, null, new Laya.Handler(this, () => {
                this.pageToLogin();
            }));
        }
        Init() {
            this.initLayer(GameConfig.width, GameConfig.height);
            this._clickEffect = new SpineClick();
            Laya.stage.addChild(this._clickEffect);
        }
        initLayer(designWidth, designHeight) {
            let pixelRatio = Laya.Browser.pixelRatio;
            let clientWidth = Laya.Browser.clientWidth * pixelRatio;
            let clientHeight = Laya.Browser.clientHeight * pixelRatio;
            let adaptScaleX = clientWidth / designWidth;
            let adaptScaleY = clientHeight / designHeight;
            let adaptScale = Math.min(adaptScaleX, adaptScaleY);
            let stageWidth = designWidth * adaptScaleX;
            let stageHeight = designHeight * adaptScaleY;
            let top = 0;
            let left = 0;
            if (adaptScale === adaptScaleX)
                top = (stageHeight - designHeight * adaptScale) * 0.5;
            else
                left = (stageWidth - designWidth * adaptScale) * 0.5;
            LayerMgr.stageDesignWidth = designWidth;
            LayerMgr.stageDesignHeight = designHeight;
            LayerMgr.clientWidth = Laya.Browser.clientWidth;
            LayerMgr.clientHeight = Laya.Browser.clientHeight;
            LayerMgr.adaptScaleX = adaptScaleX;
            LayerMgr.adaptScaleY = adaptScaleY;
            LayerMgr.adaptScale = adaptScale;
            LayerMgr.pixelRatio = pixelRatio;
            LayerMgr.top = top;
            LayerMgr.left = left;
            LayerMgr.clientTop = (top / pixelRatio);
            LayerMgr.clientLeft = (left / pixelRatio);
            this.rootLayer = this._layerMgr;
            let idx = 0;
            this.sceneLayer = this.createMaskLayer(idx++, "sceneLayer", this.rootLayer);
            this.sceneMaskLayer = this.createMaskLayer(idx++, "sceneMaskLayer", this.rootLayer);
            this.battleLayer = this.createMaskLayer(idx++, "battleLayer", this.rootLayer);
            this.navLayer = this.createMaskLayer(idx++, "navLayer", this.rootLayer);
            this.flyLayer = this.createMaskLayer(idx++, "flyLayer", this.rootLayer);
            this.frameLayer = this.createMaskLayer(idx++, "frameLayer", this.rootLayer);
            this.subFrameLayer = this.createMaskLayer(idx++, "subFrameLayer", this.rootLayer);
            this.alertLayer = this.createMaskLayer(idx++, "alertLayer", this.rootLayer);
            this.screenEffectLayer = this.createMaskLayer(idx++, "screenEffectLayer", this.rootLayer);
            this.rollMessageLayer = this.createMaskLayer(idx++, "rollMessageLayer", this.rootLayer);
            this.guideLayer = this.createMaskLayer(idx++, "guideLayer", this.rootLayer);
            this.smallLoadingLayer = this.createMaskLayer(idx++, "smallLoadingLayer", this.rootLayer);
            this.noteLayer = this.createMaskLayer(idx++, "noteLayer", this.rootLayer);
            this.debugLayer = this.createMaskLayer(idx++, "debugLayer", this.rootLayer);
            this.ResizeStage();
            this.ResizeLayers();
        }
        UdpateStaticData() {
            let designWidth = LayerMgr.stageDesignWidth;
            let designHeight = LayerMgr.stageDesignHeight;
            let pixelRatio = LayerMgr.pixelRatio;
            let clientWidth = Laya.Browser.clientWidth * pixelRatio;
            let clientHeight = Laya.Browser.clientHeight * pixelRatio;
            let adaptScaleX = clientWidth / designWidth;
            let adaptScaleY = clientHeight / designHeight;
            let adaptScale = Math.min(adaptScaleX, adaptScaleY);
            LayerMgr.clientWidth = Laya.Browser.clientWidth;
            LayerMgr.clientHeight = Laya.Browser.clientHeight;
            LayerMgr.adaptScaleX = adaptScaleX;
            LayerMgr.adaptScaleY = adaptScaleY;
            LayerMgr.adaptScale = adaptScale;
            if (Laya.stage.scaleMode == Laya.Stage.SCALE_FIXED_HEIGHT) {
                LayerMgr.LayerLeft = 0;
                LayerMgr.LayerTop = 0;
            }
            else if (Laya.stage.scaleMode == Laya.Stage.SCALE_FIXED_WIDTH) {
                LayerMgr.LayerLeft = 0;
                LayerMgr.LayerTop = 0;
            }
        }
        ResizeStage() {
            if (Laya.Browser.clientWidth > Laya.Browser.clientHeight &&
                Laya.stage.scaleMode != Laya.Stage.SCALE_FIXED_HEIGHT) {
                Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_HEIGHT;
            }
            else if (Laya.Browser.clientWidth < Laya.Browser.clientHeight &&
                Laya.stage.scaleMode != Laya.Stage.SCALE_FIXED_WIDTH) {
                Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
            }
            this.UdpateStaticData();
            this.drawTopMask();
        }
        ResizeLayers() {
            for (let layer of this._layers) {
                layer.size(Laya.stage.width, Laya.stage.height).pos(LayerMgr.LayerLeft, LayerMgr.LayerTop);
            }
        }
        static getRealStageRect(target) {
            let loc = PointUtil.localToGlobal(target);
            let rect = new Laya.Rectangle(loc.x * LayerMgr.adaptScale + this.left, loc.y * LayerMgr.adaptScale + this.top, target.width * LayerMgr.adaptScale, target.height * LayerMgr.adaptScale);
            let scaleFactor = Laya.stage.designWidth / Laya.Browser.clientWidth;
            rect.x = Math.round(rect.x / scaleFactor);
            rect.y = Math.round(rect.y / scaleFactor);
            rect.width = Math.round(rect.width / scaleFactor);
            rect.height = Math.round(rect.height / scaleFactor);
            return rect;
        }
        createLayer(idx, name, container) {
            this._layers.push(container.addChild(new LayerBase(idx, name)));
            return this._layers[this._layers.length - 1];
        }
        createMaskLayer(idx, name, contianer) {
            this._layers.push(contianer.addChild(new MaskLayer(idx, name)));
            return this._layers[this._layers.length - 1];
        }
    }
    LayerMgr.stageDesignWidth = 0;
    LayerMgr.stageDesignHeight = 0;
    LayerMgr.clientWidth = 0;
    LayerMgr.clientHeight = 0;
    LayerMgr.adaptScaleX = 0;
    LayerMgr.adaptScaleY = 0;
    LayerMgr.adaptScale = 0;
    LayerMgr.pixelRatio = 1;
    LayerMgr.top = 0;
    LayerMgr.left = 0;
    LayerMgr.clientTop = 0;
    LayerMgr.clientLeft = 0;
    LayerMgr.LayerLeft = 0;
    LayerMgr.LayerTop = 0;

    exports.LayerMgr = LayerMgr;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class Scene2DManager {
        constructor() {
            this._hasInit = false;
        }
        Init() {
            if (this._hasInit)
                return false;
            this._hasInit = true;
            this._scenes = new Map();
            this._openScenes = [];
            this.initRegScenes();
            return true;
        }
        initRegScenes() {
        }
        Reg(type, view) {
            if (view == null)
                return;
            if (this._scenes[type])
                return;
            this._scenes[type] = view;
        }
        UnReg(type) {
            if (!this._scenes[type])
                return;
            this._scenes[type] = null;
            delete this._scenes[type];
        }
        Get(type) {
            return this._scenes[type];
        }
        CurOpenNum() {
            return this.CurOpenNum.length;
        }
        Open(type, callback, data) {
            let scene = this.Get(type);
            if (scene == null) {
                LogSys$1.Warn("场景未注册 type:" + type);
                return;
            }
            E.ResMgr.LoadGroup(scene.ResGroup, Callback.Create(this, () => {
                scene.Enter(data);
                this._openScenes.push(type);
                if (callback != null)
                    callback.Invoke();
            }), Callback.Create(this, (v) => {
            }));
        }
        Close(type) {
            let scene = this.Get(type);
            if (scene == null)
                return;
            ListUtil.Remove(this._openScenes, type);
            scene.Exit();
        }
        HasReg(type) {
            if (this._scenes[type])
                return true;
            return false;
        }
        Clear() {
            this.CloseAll();
            this._scenes = null;
        }
        CloseAll() {
            for (let i = 0; i < this._openScenes.length; i++) {
                this.Close(this._openScenes[i]);
            }
        }
        Destroy(type, newScene = null) {
            let oldScene = this.Get(type);
            if (oldScene) {
                this.UnReg(type);
                oldScene.Exit();
                oldScene = null;
            }
            this.Reg(type, newScene);
        }
    }

    exports.Scene2DManager = Scene2DManager;

    return exports;

}(window));
(function (exports) {
    'use strict';

    function addVersionPrefix(url) {
        let key = Laya.ResourceVersion.manifest;
        let arr = url.split("?");
        if (arr.length > 1) {
            url = arr[0];
        }
        if (url && key[url]) {
            let u;
            if (arr.length > 1) {
                u = key[url] + "?" + arr[1];
            }
            else {
                u = key[url];
            }
            return "e/" + u + "/" + url;
        }
        return url;
    }
    class LoadMainnfestParse {
        constructor(end) {
            this._end = end;
            let fManifestUrl = `${InitConfig.getAsset()}manifest.json?${Math.random()}`;
            this.mManifestUrl = fManifestUrl;
            LogSys$1.Log("fManifestUrl:" + fManifestUrl);
            Laya.loader.load(fManifestUrl, new Laya.Handler(this, this.onLoadComplete), null, Laya.Loader.JSON);
        }
        onLoadComplete() {
            let data = Laya.Loader.getRes(this.mManifestUrl);
            data["o/config/game.json"] = null;
            this.data = data;
            Laya.ResourceVersion.manifest = data;
            Laya.URL.customFormat = addVersionPrefix;
            this._end.run();
        }
    }

    exports.LoadMainnfestParse = LoadMainnfestParse;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceWarConfig extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceWarConfig();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alliance_War_Config";
        }
        getCfg() {
            return this.List[0];
        }
        get pointNum() {
            let count = this.getCfg().f_ActionPoint.split("-")[1];
            return parseInt(count);
        }
    }
    class AllianceWarSixBossProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceWarSixBossProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alliance_War_SixBoss";
        }
    }
    class AllianceWarCityProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceWarCityProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alliance_War_City";
        }
        getCfgByType(type) {
            return this.List.find(item => item.f_CityType == type);
        }
    }
    class AllianceWarBasePointProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let cType = this.List[i].f_CityType;
                if (!this._map[cType]) {
                    this._map[cType] = {};
                }
                let num = this.List[i].f_BaseNum;
                this._map[cType][num] = this.List[i];
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceWarBasePointProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alliance_War_BasePoint";
        }
        getCfgByCTypeAndNum(cType, num) {
            return this._map[cType][num];
        }
    }
    class AllianceWarRankAllianceProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceWarRankAllianceProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alliance_War_Rank_Alliance";
        }
    }
    class AllianceWarRankPersonalProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceWarRankPersonalProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alliance_War_Rank_Personal";
        }
    }
    class AllianceWarBounsProxy extends BaseCfg {
        constructor() {
            super();
            this._map = {};
            for (let i = 0; i < this.List.length; i++) {
                let rank = this.List[i].f_BounsRank;
                if (!this._map[rank]) {
                    this._map[rank] = [];
                }
                this._map[rank].push(this.List[i]);
            }
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceWarBounsProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alliance_War_Bouns";
        }
        getCfgByRank(rank) {
            return this._map[rank];
        }
    }

    exports.AllianceWarBasePointProxy = AllianceWarBasePointProxy;
    exports.AllianceWarBounsProxy = AllianceWarBounsProxy;
    exports.AllianceWarCityProxy = AllianceWarCityProxy;
    exports.AllianceWarConfig = AllianceWarConfig;
    exports.AllianceWarRankAllianceProxy = AllianceWarRankAllianceProxy;
    exports.AllianceWarRankPersonalProxy = AllianceWarRankPersonalProxy;
    exports.AllianceWarSixBossProxy = AllianceWarSixBossProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceCfgProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceCfgProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alliance_Config";
        }
    }
    class AllianceShopProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceShopProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alliance_Shop";
        }
    }
    class AllianceBossAttributeProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceBossAttributeProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alliance_Boss_Attribute";
        }
        getByBossId(bossId) {
            return AllianceBossAttributeProxy.Ins.List.find(o => o.f_BossID === bossId);
        }
    }
    class AllianceBossSkillProxy extends BaseCfg {
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceBossSkillProxy();
            }
            return this._ins;
        }
        GetTabelName() {
            return "t_Alliance_BossSkill";
        }
        getSkillList(bossId) {
            return this.List.filter(o => o.f_BossId === bossId);
        }
    }

    exports.AllianceBossAttributeProxy = AllianceBossAttributeProxy;
    exports.AllianceBossSkillProxy = AllianceBossSkillProxy;
    exports.AllianceCfgProxy = AllianceCfgProxy;
    exports.AllianceShopProxy = AllianceShopProxy;

    return exports;

}(window));
(function (exports) {
    'use strict';

    (function (AlliancePosition) {
        AlliancePosition[AlliancePosition["Normal"] = 0] = "Normal";
        AlliancePosition[AlliancePosition["VicePresident"] = 1] = "VicePresident";
        AlliancePosition[AlliancePosition["President"] = 2] = "President";
    })(exports.AlliancePosition || (exports.AlliancePosition = {}));
    (function (AllianceJoin) {
        AllianceJoin[AllianceJoin["Quit"] = 0] = "Quit";
        AllianceJoin[AllianceJoin["Join"] = 1] = "Join";
        AllianceJoin[AllianceJoin["Disband"] = 2] = "Disband";
    })(exports.AllianceJoin || (exports.AllianceJoin = {}));
    (function (AllianceManage) {
        AllianceManage[AllianceManage["AppointVicePresident"] = 1] = "AppointVicePresident";
        AllianceManage[AllianceManage["AppointPresident"] = 2] = "AppointPresident";
        AllianceManage[AllianceManage["KickOut"] = 3] = "KickOut";
        AllianceManage[AllianceManage["Agree"] = 4] = "Agree";
        AllianceManage[AllianceManage["Impeach"] = 5] = "Impeach";
        AllianceManage[AllianceManage["Demotion"] = 6] = "Demotion";
        AllianceManage[AllianceManage["WatchPlayer"] = 7] = "WatchPlayer";
        AllianceManage[AllianceManage["Quit"] = 8] = "Quit";
        AllianceManage[AllianceManage["Refuse"] = 9] = "Refuse";
    })(exports.AllianceManage || (exports.AllianceManage = {}));
    class AllianceModel extends Laya.EventDispatcher {
        constructor() {
            super(...arguments);
            this.playerList = [];
            this.applyList = [];
            this.innerRankList = [];
            this.rankRewardState = 0;
            this.bossFightNum = 0;
            this.shopList = [];
            this.updatedShopCfgs = [];
            this.joinWaitSeconds = 0;
            this.isMainViewOpened = false;
            this.warRedState = false;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new AllianceModel();
            }
            return this._ins;
        }
        refreshShopList() {
            const list = AllianceShopProxy.Ins.List;
            const shopList = AllianceModel.Ins.shopList;
            for (const item of list) {
                const shopItem = shopList.find(o => o.fid === item.f_id);
                if (shopItem) {
                    item['count'] = shopItem.count;
                }
            }
            AllianceModel.Ins.updatedShopCfgs = list;
        }
        setPlayerPosition() {
            var _a;
            const playerList = AllianceModel.Ins.playerList;
            const playerId = MainModel.Ins.mRoleData.mPlayer.AccountId;
            const position = (_a = playerList.find(o => o.playerId === playerId)) === null || _a === void 0 ? void 0 : _a.position;
            if (position === undefined)
                return;
            AllianceModel.Ins.position = position;
        }
        getBossMonster(that, func) {
            const bossRevc = AllianceModel.Ins.bossInitRevc;
            if (!bossRevc)
                return;
            const bossId = bossRevc.bossId;
            let cfg = AllianceBossAttributeProxy.Ins.getByBossId(bossId);
            let key = cfg.f_Res;
            let url = `o/spine/${key}/${key}`;
            let _avatar = AvatarFactory.createBossMonster(url, that, func);
            return _avatar;
        }
        get subTime() {
            const bossRevc = AllianceModel.Ins.bossInitRevc;
            if (!bossRevc)
                return;
            let sub = bossRevc.closeUnix - TimeUtil.serverTime;
            return sub;
        }
        checkWarRedState() {
            const isEnrollTime = AllianceFightModel.Ins.warStatus === WarStatus.Enroll;
            const isEnrolled = AllianceFightModel.Ins.isEnrolled;
            const num = AllianceModel.Ins.playerList.length;
            const conf = AllianceWarConfig.Ins.getCfg();
            const hasEnrollRole = [exports.AlliancePosition.President, exports.AlliancePosition.VicePresident].indexOf(AllianceModel.Ins.position) !== -1;
            let warRedState1 = isEnrollTime && !isEnrolled && (num >= conf.f_ApplyLimitNum) && hasEnrollRole;
            let warRedState2 = isEnrolled && (AllianceFightModel.Ins.warStatus === WarStatus.Fight) && !AllianceFightModel.Ins.entered;
            let warRedState3 = isEnrolled && (AllianceFightModel.Ins.warStatus === WarStatus.Reward) && AllianceFightModel.Ins.showRewardChapter;
            let warRedState4 = (AllianceFightModel.Ins.myAllianceRewardState === 1) || (AllianceFightModel.Ins.myInnerRewardState === 1);
            let warRedState = warRedState1 || warRedState2 || warRedState3 || warRedState4;
            AllianceModel.Ins.warRedState = warRedState;
            AllianceModel.Ins.event(AllianceModel.UPDATE_WAR_RED);
            if (warRedState) {
                MainModel.Ins.funcSetRed(EFuncDef.Alliance, true);
            }
            else {
                MainModel.Ins.funcSetRed(EFuncDef.Alliance, false);
            }
        }
    }
    AllianceModel.SHOP_UPDATE = 'shop_update';
    AllianceModel.BOSS_RANK_UPDATE = 'boss_rank_update';
    AllianceModel.ALLIANCE_INFO_UPDATE = 'alliance_info_update';
    AllianceModel.ALLIANCE_LIST_UPDATE = 'alliance_list_update';
    AllianceModel.ALLIANCE_PLAYER_LIST_UPDATE = 'alliance_player_list_update';
    AllianceModel.ALLIANCE_POSITION_UPDATE = 'alliance_position_update';
    AllianceModel.ALLIANCE_APPLY_UPDATE = 'alliance_apply_update';
    AllianceModel.UPDATE_BOSS_FIGHT_NUM = 'alliance_boss_update';
    AllianceModel.BOSS_INFO_UPDATE = 'boss_info_update';
    AllianceModel.INNER_RANK_UPDATE = 'inner_rank_update';
    AllianceModel.ALLIANCE_FIGHT_STATE = 'alliance_fight_state';
    AllianceModel.UPDATE_WAR_RED = 'UPDATE_WAR_RED';

    exports.AllianceModel = AllianceModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ApplyItem extends ui.views.alliance.ui_alliance_apply_itemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.agree_btn, new Laya.Handler(this, this.onAgreeBtnClick));
            ButtonCtl.Create(this.refuse_btn, new Laya.Handler(this, this.onRefuseBtnClick));
            this._plusCtl = FontCtlFactory.createMainPlus();
        }
        showMenu(playerId, position, target) {
            let menuData = {};
            menuData.playerId = playerId;
            menuData.target = target;
            menuData.position = position;
            let _viewType = EViewType.AllianceMenuView;
            if (E.ViewMgr.IsOpen(_viewType)) {
                let view = E.ViewMgr.Get(_viewType);
                view.setData(menuData);
            }
            else {
                E.ViewMgr.Open(_viewType, null, menuData);
            }
        }
        onAgreeBtnClick() {
            if (!this._data)
                return;
            const alliance = AllianceModel.Ins.alliance;
            if (!alliance)
                return;
            let req = new AlliancePlayerManage_req();
            req.playerId = this._data.playerId;
            req.type = AllianceManage.Agree;
            SocketMgr.Ins.SendMessageBin(req);
            if (E.ViewMgr.isOpenReg(EViewType.AllianceApplyView)) {
                E.ViewMgr.Close(EViewType.AllianceApplyView);
            }
        }
        onRefuseBtnClick() {
            let req = new AlliancePlayerManage_req();
            req.playerId = this._data.playerId;
            req.type = AllianceManage.Refuse;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            MainModel.Ins.setTTHead(this.head.icon, MainModel.Ins.convertHead(value.headUrl));
            this.head.titleIcon.visible = false;
            this.head.lvtf.text = "Lv." + value.playerLevel;
            this.nametf.text = StringUtil.convertName(value.name);
            this.img_title.skin = ChengHaoModel.Ins.getTitleImg(value.titleId);
            const v = StringUtil.val2Atlas(value.plus);
            this._plusCtl.setValue(this.toplug, v);
        }
    }

    exports.ApplyItem = ApplyItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceApplyListView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('alliance.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.alliance.ui_allianceApplyViewUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = ApplyItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list.vScrollBarSkin = ' ';
            }
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            this.onAllianceListUpdate();
            AllianceModel.Ins.on(AllianceModel.ALLIANCE_APPLY_UPDATE, this, this.onAllianceListUpdate);
        }
        onAllianceListUpdate() {
            this._ui.list.array = AllianceModel.Ins.applyList;
        }
        onExit() {
            AllianceModel.Ins.off(AllianceModel.ALLIANCE_APPLY_UPDATE, this, this.onAllianceListUpdate);
        }
    }

    exports.AllianceApplyListView = AllianceApplyListView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class FighthardAvatarItem$1 extends ui.views.alliance.ui_alliance_boss_avatarUI {
        refresh() {
            this.cfg = this.dataSource;
            this.qua.skin = IconUtils.getQuaIcon(this.cfg.f_BossQuality);
            this.icon.skin = `o/boss/${this.cfg.f_BossID}.png`;
            const bossId = this.cfg.f_BossID;
            const cfg = AllianceBossAttributeProxy.Ins.getByBossId(bossId);
            if (cfg.f_isopen) {
                this.icon.skin = `o/boss/${this.cfg.f_BossID}.png`;
            }
            else {
                this.icon.skin = `remote/main/main/weikaifang.png`;
            }
            this.tf1.text = this.cfg.f_BossName;
        }
    }
    class FighthardCirle$1 extends ui.views.alliance.ui_alliance_boss_cirleUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClickHandler);
        }
        onClickHandler(e) {
            e.stopPropagation();
            MainModel.Ins.showSmallTips(this.cfg.f_SkillName, this.cfg.f_SkillDes, this);
        }
        refresh() {
            let cfg = this.dataSource;
            this.cfg = cfg;
            this.tf.text = cfg.f_SkillName;
        }
    }
    class AllianceBossDetailView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() { }
        onExit() {
            this._ui.list1.selectedIndex = -1;
            this.disposeAvatar();
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.alliance.ui_alliance_boss_tujianUI();
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = FighthardAvatarItem$1;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list1.vScrollBarSkin = ' ';
                this._ui.list1.selectEnable = true;
                this._ui.list1.selectHandler = new Laya.Handler(this, this.onSelectHandler);
                this._ui.list2.itemRender = FighthardCirle$1;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onList2Handler);
                this._ui.list2.vScrollBarSkin = ' ';
                this._ui.avatarCon.scaleX = this._ui.avatarCon.scaleY = 0.5;
            }
        }
        onList2Handler(item) {
            item.refresh();
        }
        disposeAvatar() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        onSelectHandler(index) {
            let _attrCfg = AllianceBossAttributeProxy.Ins.List[index];
            if (!_attrCfg) {
                return;
            }
            const bossId = _attrCfg.f_BossID;
            const cfg = AllianceBossAttributeProxy.Ins.getByBossId(bossId);
            if (!cfg.f_isopen) {
                this._ui.list1.selectedIndex = this.oldIndex;
                E.ViewMgr.ShowMidError(E.getLang("please_wait"));
                return;
            }
            if (index >= 0) {
                this.oldIndex = index;
                let cfg = _attrCfg;
                if (this._avatar && this._avatar.vo == cfg) ;
                else {
                    this.disposeAvatar();
                    let key = cfg.f_Res;
                    this._avatar = AvatarFactory.createBossMonster(`o/spine/${key}/${key}`);
                    this._avatar.vo = cfg;
                    this._avatar.play(EAvatarAnim.NormalStand);
                    this._ui.avatarCon.addChild(this._avatar);
                    this._ui.tf3.text = cfg.f_BossChar;
                    this._ui.list2.array = AllianceBossSkillProxy.Ins.getSkillList(cfg.f_BossID);
                    this._ui.nametf.text = cfg.f_BossName;
                }
            }
        }
        onItemRender(item, index) {
            item.refresh();
            if (this._ui.list1.selectedIndex == index) {
                item.sel.visible = true;
            }
            else {
                item.sel.visible = false;
            }
        }
        onInit() {
            let _openIndex = 0;
            let l = AllianceBossAttributeProxy.Ins.List;
            for (let i = 0; i < l.length; i++) {
                let cfg = l[i];
                _openIndex = i;
                break;
            }
            this.oldIndex = _openIndex;
            this._ui.list1.array = l;
            this._ui.list1.selectedIndex = _openIndex;
        }
    }

    exports.AllianceBossDetailView = AllianceBossDetailView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceBossView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas("fighthard.atlas");
            this.addAtlas("zhengzhan.atlas");
        }
        onExit() {
            this.timeCtl.stop();
            this.model.off(AllianceModel.BOSS_INFO_UPDATE, this, this.refreshEvt);
            AllianceModel.Ins.on(AllianceModel.UPDATE_BOSS_FIGHT_NUM, this, this.updateBossFightNum);
            this.disposeAvatar();
        }
        updateBossFightNum() {
            const times = AllianceModel.Ins.bossFightNum;
            this._ui.tf7.text = E.getLang("AllianceFreeFightWord") + ":" + times;
            if (times > 0) {
                this.fightBtnCtl.grayMouseDisable = false;
            }
            else {
                this.fightBtnCtl.grayMouseDisable = true;
            }
        }
        disposeAvatar() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        onFirstInit() {
            if (!this.UI) {
                this.model = AllianceModel.Ins;
                this.UI = this._ui = new ui.views.alliance.ui_allianceBossViewUI();
                this.timeCtl = new TimeCtlV2(this._ui.timeTf, "{0}");
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.tujianBtn, this, this.onhandbookHandler);
                ButtonCtl.CreateBtn(this._ui.help1, this, this.onHelpHandler);
                this.fightBtnCtl = ButtonCtl.CreateBtn(this._ui.fightBtn, this, this.onFightHandler);
                ButtonCtl.CreateBtn(this._ui.rankBtn, this, this.onRankHandler);
            }
        }
        onFightHandler() {
            const times = AllianceModel.Ins.bossFightNum;
            if (times <= 0) {
                E.ViewMgr.ShowMidError(E.getLang("AllianceFightOverTips"));
                return;
            }
            const req = new AllianceBossFight_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onRankHandler() {
            const req = new AllianceInnerRankList_req();
            SocketMgr.Ins.SendMessageBin(req);
            E.ViewMgr.Open(EViewType.AllianceRankListView);
        }
        onHelpHandler() {
            E.ViewMgr.openHelpView("Alliancexiongshou01", "Alliancexiongshou02");
        }
        onTimeEnd() {
            this.timeUpdate();
        }
        onhandbookHandler() {
            E.ViewMgr.Open(EViewType.AllianceBossDetailView);
        }
        onTimeUpdate() {
            let w = this._ui.timeTf.textField.width + this._ui.tf1.textField.width;
            this._ui.timeTf.x = (this._ui.width - w) / 2;
            this._ui.tf1.x = this._ui.timeTf.x + this._ui.timeTf.textField.width;
        }
        timeUpdate() {
            let sub = this.model.subTime;
            if (sub <= 0) {
                this._ui.tf1.visible = false;
                this._ui.timeTf.visible = false;
            }
            else {
                this._ui.tf1.visible = true;
                this._ui.timeTf.visible = true;
                this.timeCtl.start(sub);
                this.timeCtl.on(Laya.Event.CHANGE, this, this.onTimeUpdate);
                this.timeCtl.on(Laya.Event.COMPLETE, this, this.onTimeEnd);
            }
        }
        refreshEvt() {
            this.timeUpdate();
            const bossRevc = AllianceModel.Ins.bossInitRevc;
            if (!bossRevc)
                return;
            const bossId = bossRevc.bossId;
            const bossCfg = AllianceBossAttributeProxy.Ins.getByBossId(bossId);
            this._ui.nametf.text = (bossCfg === null || bossCfg === void 0 ? void 0 : bossCfg.f_BossName) || '';
            this.disposeAvatar();
            this._avatar = this.model.getBossMonster();
            this._avatar.play(EAvatarAnim.NormalStand);
            this._ui.avatarCon.addChild(this._avatar);
            this.fightBtnCtl.grayMouseDisable = false;
        }
        onInit() {
            this.model.on(AllianceModel.BOSS_INFO_UPDATE, this, this.refreshEvt);
            AllianceModel.Ins.on(AllianceModel.UPDATE_BOSS_FIGHT_NUM, this, this.updateBossFightNum);
            this.refreshEvt();
            this.updateBossFightNum();
        }
    }

    exports.AllianceBossView = AllianceBossView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceCreateView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.isModify = false;
        }
        onAddLoadRes() {
            this.addAtlas('alliance.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.alliance.ui_allianceCreateViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.create_btn, this, this.onCreateHandler);
            }
        }
        onCreateHandler() {
            const text = (this._ui.input.text).trim();
            const nameLimit = AllianceCfgProxy.Ins.GetDataById(1).f_namemax;
            if (StringUtil.getNumBytes(text) > nameLimit * 2) {
                E.ViewMgr.ShowMidError(E.getLang('AllianceNameLimit', nameLimit));
                return;
            }
            let req;
            if (this.isModify) {
                req = new AllianceSetWord_req();
                req.type = 2;
                req.value = text;
            }
            else {
                req = new AllianceCreate_req();
                req.name = text;
            }
            SocketMgr.Ins.SendMessageBin(req);
        }
        onInit() {
            const conf = AllianceCfgProxy.Ins.GetDataById(1);
            this.isModify = this.Data || false;
            if (this.Data) {
                const alliance = AllianceModel.Ins.alliance;
                if (!alliance)
                    return;
                const modifyItems = ItemViewFactory.convertItemList(conf.f_changenamecost);
                this._ui.money_label.text = ((modifyItems === null || modifyItems === void 0 ? void 0 : modifyItems[0].count) || 0) + '';
                this._ui.input.text = alliance.name;
                this._ui.title_tf.text = E.getLang('AllianceName');
            }
            else {
                this._ui.input.text = "";
                this._ui.title_tf.text = E.getLang('AllianceCreate');
                const createItems = ItemViewFactory.convertItemList(conf.f_createcost);
                this._ui.money_label.text = ((createItems === null || createItems === void 0 ? void 0 : createItems[0].count) || 0) + '';
            }
        }
        onExit() {
        }
    }

    exports.AllianceCreateView = AllianceCreateView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceCheckBoxCtl extends CheckBoxCtl {
        constructor(skin) {
            super(skin);
        }
    }
    class AllianceEditView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('alliance.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.alliance.ui_allianceEditViewUI;
                this.bindClose(this._ui.close1);
                this.join1Ck = new AllianceCheckBoxCtl(this._ui.join1ck);
                this.join1Ck.selectHander = new Laya.Handler(this, this.onJoin1Handler);
                this.join0Ck = new AllianceCheckBoxCtl(this._ui.join0ck);
                this.join0Ck.selectHander = new Laya.Handler(this, this.onJoin0Handler);
                this.search1Ck = new AllianceCheckBoxCtl(this._ui.search1ck);
                this.search1Ck.selectHander = new Laya.Handler(this, this.onSearch1Handler);
                this.search0Ck = new AllianceCheckBoxCtl(this._ui.search0ck);
                this.search0Ck.selectHander = new Laya.Handler(this, this.onSearch0Handler);
                ButtonCtl.CreateBtn(this._ui.confirm_btn, this, this.onConfirmHandler);
                this._ui.name_bg.on(Laya.Event.CLICK, this, this.onNameClick);
                ButtonCtl.CreateBtn(this._ui.jiesan_btn, this, this.onJiesanHandler);
                this._ui.level_input.on(Laya.Event.INPUT, this, this.onInputChange);
            }
        }
        onInputChange() {
            const val = Number(this._ui.level_input.text);
            if (isNaN(val) || val <= 0) {
                this._ui.level_input.text = '1';
            }
            else if (val > 425) {
                this._ui.level_input.text = '425';
            }
        }
        onJiesanHandler() {
            E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.LangMgr.getLang("AllianceDisbandWords"), new Laya.Handler(this, this.doJieSan));
        }
        doJieSan() {
            const alliance = AllianceModel.Ins.alliance;
            if (!alliance)
                return;
            let req = new AllianceJoin_req();
            req.uid = alliance.uid;
            req.type = AllianceJoin.Disband;
            SocketMgr.Ins.SendMessageBin(req);
            if (E.ViewMgr.isOpenReg(EViewType.AllianceEditView))
                E.ViewMgr.Close(EViewType.AllianceEditView);
        }
        onNameClick() {
            if ([AlliancePosition.President, AlliancePosition.VicePresident].indexOf(AllianceModel.Ins.position) !== -1) {
                E.ViewMgr.Open(EViewType.AllianceCreateView, null, true);
            }
        }
        onConfirmHandler() {
            const level = Number(this._ui.level_input.text);
            const arr = ['join', 'search'];
            const req = new AllianceSet_req;
            req.level = level;
            for (const key of arr) {
                if (this[`${key}0Ck`].selected === this[`${key}1Ck`].selected) {
                    return;
                }
                req[key] = this[`${key}0Ck`].selected ? 0 : 1;
            }
            SocketMgr.Ins.SendMessageBin(req);
        }
        onJoin1Handler() {
            this.join0Ck.selected = !this.join1Ck.selected;
        }
        onJoin0Handler() {
            this.join1Ck.selected = !this.join0Ck.selected;
        }
        onSearch1Handler() {
            this.search0Ck.selected = !this.search1Ck.selected;
        }
        onSearch0Handler() {
            this.search1Ck.selected = !this.search0Ck.selected;
        }
        onAllianceUpdate() {
            const alliance = AllianceModel.Ins.alliance;
            if (!alliance)
                return;
            this._ui.name_tf.text = alliance.name;
            this._ui.level_input.text = alliance.playerLevel + '';
            this.join0Ck.selected = !alliance.auto;
            this.join1Ck.selected = Boolean(alliance.auto);
            this.search0Ck.selected = !alliance.show;
            this.search1Ck.selected = Boolean(alliance.show);
        }
        onInit() {
            this.onAllianceUpdate();
            AllianceModel.Ins.on(AllianceModel.ALLIANCE_INFO_UPDATE, this, this.onAllianceUpdate);
        }
        onExit() {
            AllianceModel.Ins.off(AllianceModel.ALLIANCE_INFO_UPDATE, this, this.onAllianceUpdate);
        }
    }

    exports.AllianceEditView = AllianceEditView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceItem extends ui.views.alliance.ui_alliance_list_itemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.join_btn, new Laya.Handler(this, this.onBtnClick));
        }
        onBtnClick() {
            console.log(3, this._data);
            if (this._data) {
                let req = new AllianceJoin_req();
                req.uid = this._data.uid;
                req.type = AllianceJoin.Join;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            const maxNum = AllianceCfgProxy.Ins.GetDataById(1).f_maxjoin;
            this.nametf.text = StringUtil.convertName(value.name);
            this.leveltf.text = value.playerLevel + '';
            this.numtf.text = value.num + '/' + maxNum;
            if (value.auto) {
                this.join_tf.text = E.getLang('AllianceJoin');
            }
            else {
                this.join_tf.text = E.getLang('AllianceApplyJoin');
            }
        }
    }

    exports.AllianceItem = AllianceItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceListView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('alliance.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.alliance.ui_allianceListViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.refresh_btn, this, this.onRefreshHandler);
                ButtonCtl.CreateBtn(this._ui.create_btn, this, this.onCreateHandler);
                ButtonCtl.CreateBtn(this._ui.search_btn, this, this.onSearchHandler);
                this._ui.list.itemRender = AllianceItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list.vScrollBarSkin = ' ';
            }
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        onRefreshHandler() {
            let req = new AllianceList_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onCreateHandler() {
            E.ViewMgr.Open(EViewType.AllianceCreateView);
        }
        onSearchHandler() {
            const text = (this._ui.input.text).trim();
            if (!text)
                return;
            let req = new AllianceSearch_req();
            req.value = text;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onInit() {
            AllianceModel.Ins.isMainViewOpened = true;
            this.onAllianceListUpdate();
            AllianceModel.Ins.on(AllianceModel.ALLIANCE_LIST_UPDATE, this, this.onAllianceListUpdate);
        }
        onAllianceListUpdate() {
            this._ui.list.array = AllianceModel.Ins.allianceList;
        }
        onExit() {
            AllianceModel.Ins.off(AllianceModel.ALLIANCE_LIST_UPDATE, this, this.onAllianceListUpdate);
        }
    }

    exports.AllianceListView = AllianceListView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MemberItem$1 extends ui.views.alliance.ui_alliance_member_itemUI {
        constructor() {
            super();
            ButtonCtl.Create(this.manage_btn, new Laya.Handler(this, this.onBtnClick));
            this._plusCtl = FontCtlFactory.createMainPlus();
        }
        showMenu(playerId, position, target) {
            let menuData = {};
            menuData.playerId = playerId;
            menuData.target = target;
            menuData.position = position;
            let _viewType = EViewType.AllianceMenuView;
            if (E.ViewMgr.IsOpen(_viewType)) {
                let view = E.ViewMgr.Get(_viewType);
                view.setData(menuData);
            }
            else {
                E.ViewMgr.Open(_viewType, null, menuData);
            }
        }
        onBtnClick() {
            if (!this._data)
                return;
            this.showMenu(this._data.playerId, this._data.position, this);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            MainModel.Ins.setTTHead(this.head.icon, MainModel.Ins.convertHead(value.headUrl));
            this.head.titleIcon.visible = false;
            this.head.lvtf.text = "Lv." + value.playerLevel;
            this.nametf.text = StringUtil.convertName(value.name);
            this.img_title.skin = ChengHaoModel.Ins.getTitleImg(value.titleId);
            const v = StringUtil.val2Atlas(value.plus);
            this._plusCtl.setValue(this.toplug, v);
            switch (value.position) {
                case AlliancePosition.Normal:
                    this.position_bg.skin = 'remote/alliance/cy.png';
                    this.position_tf.text = E.getLang('AlliancePositionNormal');
                    break;
                case AlliancePosition.VicePresident:
                    this.position_bg.skin = 'remote/alliance/fmz.png';
                    this.position_tf.text = E.getLang('AlliancePositionVicePresident');
                    break;
                case AlliancePosition.President:
                    this.position_bg.skin = 'remote/alliance/mz.png';
                    this.position_tf.text = E.getLang('AlliancePositionPresident');
                    break;
            }
        }
    }

    exports.MemberItem = MemberItem$1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RankItem1$1 extends ui.views.alliance.ui_alliance_list_item1UI {
        constructor() {
            super();
        }
        setData(value) {
            if (!value)
                return;
            const maxNum = AllianceCfgProxy.Ins.GetDataById(1).f_maxjoin;
            this.ranktf.text = value.rank + '';
            this.nametf.text = value.name;
            this.leveltf.text = value.accHarm + '';
            this.numtf.text = value.num + '/' + maxNum;
        }
    }

    exports.RankItem1 = RankItem1$1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ShopItem extends ui.views.alliance.ui_alliance_mall_itemUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onClick);
        }
        onClick() {
            const shopItem = this._data;
            if (!shopItem)
                return;
            MainModel.Ins.buy(shopItem.priceItemList[0].cfgId, shopItem.priceItemList[0].count, shopItem.itemList[0].cfgId, shopItem.itemList[0].count, new Laya.Handler(this, this.onGameCoinConfirm, [shopItem]), EBuyType.Item, false);
        }
        onGameCoinConfirm() {
            let req = new AllianceShop_req;
            req.fid = this._data.fid;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setData(value) {
            if (!value)
                return;
            this.clearUI();
            const itemList = ItemViewFactory.convertItemList(value.f_goods);
            if (!itemList)
                return;
            let skin = this;
            skin.icon.skin = itemList[0].getIcon();
            skin.countLabel.text = itemList[0].count.toString();
            skin.itemNameLabel.text = itemList[0].getName();
            skin.iconBg.skin = itemList[0].quaIcon();
            const priceItemList = ItemViewFactory.convertItemList(value.f_price);
            const payResourceId = priceItemList[0].cfgId;
            const payResourceAmount = priceItemList[0].count;
            const bought = value['count'] || 0;
            skin.doubleIcon.visible = false;
            let _showLabel = "";
            skin.moneyIcon.skin = ItemViewFactory.getResourceIcon(payResourceId);
            skin.moneyIcon.visible = true;
            _showLabel = payResourceAmount.toString();
            this._data = {
                fid: value.f_id,
                bought,
                itemList,
                priceItemList,
                limit: value.f_limit
            };
            let red = false;
            if (priceItemList.length) {
                if (bought >= value.f_limit) {
                    this.yilingQuMask(true);
                }
            }
            else {
                _showLabel = E.getLang("Free");
                if (bought >= value.f_limit) {
                    this.yilingQuMask(true);
                }
                else {
                    red = true;
                }
            }
            skin.dotimg.visible = red;
            skin.moneyNumLabel.text = _showLabel;
            skin.limit_tf.text = E.LangMgr.getLang('AllianceShopLimit', bought, value.f_limit);
        }
        yilingQuMask(v) {
            this.yilingquMask.visible = this.yilingquLb.visible = v;
        }
        clearUI() {
            this.dotimg.visible = false;
            this.yilingQuMask(false);
        }
    }

    exports.ShopItem = ShopItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceMainView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('alliance.atlas');
            this.addAtlas('huodong.atlas');
            this.addAtlas('jjc.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.alliance.ui_allianceMainViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.set_btn, this, this.onSetHandler);
                ButtonCtl.CreateBtn(this._ui.edit_btn, this, this.onEditHandler);
                ButtonCtl.CreateBtn(this._ui.member_btn, this, this.onMemberHandler);
                ButtonCtl.CreateBtn(this._ui.boss_btn, this, this.onBossHandler);
                ButtonCtl.CreateBtn(this._ui.shop_btn, this, this.onShopHandler);
                ButtonCtl.CreateBtn(this._ui.apply_llist_btn, this, this.onApplyHandler);
                ButtonCtl.CreateBtn(this._ui.boss_fight_btn, this, this.onBossFightHandler);
                ButtonCtl.CreateBtn(this._ui.alliance_fight_btn, this, this.onAllianceFightHandler);
                ButtonCtl.CreateBtn(this._ui.copy_tf, this, this.onCopyHandler);
                this._ui.member_list.itemRender = MemberItem$1;
                this._ui.member_list.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.member_list.vScrollBarSkin = ' ';
                this._ui.shop_list.itemRender = ShopItem;
                this._ui.shop_list.renderHandler = new Laya.Handler(this, this.onShopItemRender);
                this._ui.shop_list.vScrollBarSkin = ' ';
                this._ui.rank_list.itemRender = RankItem1$1;
                this._ui.rank_list.renderHandler = new Laya.Handler(this, this.onRankRender);
                this._ui.rank_list.vScrollBarSkin = ' ';
                this._ui.apply_llist_btn.visible = false;
                this._ui.rank_btn.visible = false;
                ValCtl.Create(this._ui.lab0, this._ui.img0, ECellType.GreenDragonPiece);
                ValCtl.Create(this._ui.lab1, this._ui.img1, ECellType.AllianceLing);
                ValCtl.Create(this._ui.lab2, this._ui.img2, ECellType.Gongxun);
                this._ui.ranktf.visible = this._ui.rank_title_tf.visible = false;
            }
        }
        onCopyHandler() {
            const alliance = AllianceModel.Ins.alliance;
            if (!alliance)
                return;
            const uid = alliance.uid.toString();
            E.sdk.setCopy(uid);
        }
        onBossFightHandler() {
            E.ViewMgr.Open(EViewType.AllianceBossView);
        }
        onAllianceFightHandler() {
            AllianceFightModel.Ins.showMainPage();
        }
        onApplyHandler() {
            E.ViewMgr.Open(EViewType.AllianceApplyView);
            let req = new AllianceApplyList_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onRankRender(item) {
            item.setData(item.dataSource);
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        onShopItemRender(item) {
            item.setData(item.dataSource);
        }
        onSetHandler() {
            E.ViewMgr.Open(EViewType.AllianceEditView);
        }
        onEditHandler() {
            E.ViewMgr.Open(EViewType.AllianceNoticeView);
        }
        btnSelected(type) {
            const arr = [
                { type: 'member', ui: this._ui.member_btn, view: this._ui.member_block },
                { type: 'boss', ui: this._ui.boss_btn, view: this._ui.boss_block },
                { type: 'rank', ui: this._ui.rank_btn, view: this._ui.rank_block },
                { type: 'shop', ui: this._ui.shop_btn, view: this._ui.shop_block },
            ];
            for (const item of arr) {
                if (item.type === type) {
                    item.ui.skin = 'remote/main/main/anniu_2.png';
                    item.view.visible = true;
                }
                else {
                    item.ui.skin = 'remote/main/main/anniu_1.png';
                    item.view.visible = false;
                }
            }
        }
        updateRedDot() {
            if (AllianceModel.Ins.warRedState) {
                DotManager.addDot(this._ui.boss_btn);
                DotManager.addDot(this._ui.alliance_fight_btn);
            }
            else {
                DotManager.removeDot(this._ui.boss_btn);
                DotManager.removeDot(this._ui.alliance_fight_btn);
            }
        }
        onMemberHandler() {
            this.btnSelected('member');
            AllianceModel.Ins.playerList = [];
            let req = new AllianceMember_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBossHandler() {
            this.btnSelected('boss');
        }
        onRankHandler() {
            this.btnSelected('rank');
            let req = new AllianceBossRankList_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onShopHandler() {
            this.btnSelected('shop');
        }
        onInit() {
            AllianceModel.Ins.isMainViewOpened = true;
            this.onMemberHandler();
            AllianceModel.Ins.refreshShopList();
            this._ui.shop_list.array = AllianceModel.Ins.updatedShopCfgs;
            this._ui.member_list.array = AllianceModel.Ins.playerList;
            this.onAllianceUpdate();
            AllianceModel.Ins.on(AllianceModel.SHOP_UPDATE, this, this.onShopUpdate);
            AllianceModel.Ins.on(AllianceModel.BOSS_RANK_UPDATE, this, this.onBossRankUpdate);
            AllianceModel.Ins.on(AllianceModel.ALLIANCE_INFO_UPDATE, this, this.onAllianceUpdate);
            AllianceModel.Ins.on(AllianceModel.ALLIANCE_PLAYER_LIST_UPDATE, this, this.updatePlayerList);
            AllianceModel.Ins.on(AllianceModel.ALLIANCE_POSITION_UPDATE, this, this.updatePlayerPosition);
            AllianceModel.Ins.on(AllianceModel.UPDATE_BOSS_FIGHT_NUM, this, this.updateBossFightNum);
            AllianceModel.Ins.on(AllianceModel.UPDATE_WAR_RED, this, this.updateRedDot);
            this.updatePlayerPosition();
            this.updateBossFightNum();
            this.updateRedDot();
            this.updateEnrollTf();
        }
        updateEnrollTf() {
            const conf = AllianceWarConfig.Ins.getCfg();
            const ranges = [Number(conf.f_ApplyStartDay), Number(conf.f_ApplyEndDay)];
            const days = [];
            for (const range of ranges) {
                if (range < 7) {
                    days.push(TimeUtil.getDayString(range));
                }
                else {
                    days.push(TimeUtil.getDayString(0));
                }
            }
            this._ui.enroll_tf.text = `报名时间：周${TimeUtil.getDayString(ranges[0])} ${conf.f_ApplyStartTime}到周${TimeUtil.getDayString(ranges[1])} ${conf.f_ApplyEndTime}`;
        }
        updateBossFightNum() {
            const times = AllianceModel.Ins.bossFightNum;
            this._ui.fight_num_tf.text = E.getLang('AllianceFightWord') + times;
        }
        onAllianceUpdate() {
            const alliance = AllianceModel.Ins.alliance;
            if (!alliance)
                return;
            this._ui.name_tf.text = alliance.name;
            this._ui.idtf.text = alliance.uid + '';
            const maxNum = AllianceCfgProxy.Ins.GetDataById(1).f_maxjoin;
            this._ui.numtf.text = alliance.num + '/' + maxNum;
            this._ui.ranktf.text = alliance.rank + '';
            this._ui.notice_tf.text = alliance.notice || E.getLang('NoAllianceNotice');
        }
        onShopUpdate() {
            const updatedShopItem = AllianceModel.Ins.updatedShopItem;
            if (updatedShopItem) {
                const shopList = AllianceModel.Ins.shopList;
                const shopItem = shopList.find(o => o.fid === updatedShopItem.fid);
                if (shopItem) {
                    shopItem.count = updatedShopItem.count;
                }
                else {
                    shopList.push(updatedShopItem);
                }
                AllianceModel.Ins.shopList = shopList;
                AllianceModel.Ins.refreshShopList();
                this._ui.shop_list.array = AllianceModel.Ins.updatedShopCfgs;
            }
        }
        onBossRankUpdate() {
            const value = AllianceModel.Ins.bossRankRevc;
            const alliance = AllianceModel.Ins.alliance;
            if (!value || !alliance)
                return;
            const maxNum = AllianceCfgProxy.Ins.GetDataById(1).f_maxjoin;
            this._ui.my.ranktf.text = value.rank + '';
            this._ui.my.nametf.text = alliance.name;
            this._ui.my.leveltf.text = value.accHarm + '';
            this._ui.my.numtf.text = alliance.num + '/' + maxNum;
            this._ui.rank_list.array = AllianceModel.Ins.bossRankRevc.dataList;
        }
        updatePlayerList() {
            this._ui.member_list.array = AllianceModel.Ins.playerList;
            const maxNum = AllianceCfgProxy.Ins.GetDataById(1).f_maxjoin;
            this._ui.numtf.text = AllianceModel.Ins.playerList.length + '/' + maxNum;
        }
        updatePlayerPosition() {
            const position = AllianceModel.Ins.position;
            if (position === undefined)
                return;
            if (position === AlliancePosition.Normal) {
                this._ui.edit_btn.visible = this._ui.set_btn.visible = this._ui.apply_llist_btn.visible = false;
            }
            else {
                this._ui.edit_btn.visible = this._ui.set_btn.visible = this._ui.apply_llist_btn.visible = true;
            }
        }
        onExit() {
            AllianceModel.Ins.isMainViewOpened = false;
            AllianceModel.Ins.off(AllianceModel.SHOP_UPDATE, this, this.onShopUpdate);
            AllianceModel.Ins.off(AllianceModel.BOSS_RANK_UPDATE, this, this.onBossRankUpdate);
            AllianceModel.Ins.off(AllianceModel.ALLIANCE_INFO_UPDATE, this, this.onAllianceUpdate);
            AllianceModel.Ins.off(AllianceModel.ALLIANCE_PLAYER_LIST_UPDATE, this, this.updatePlayerList);
            AllianceModel.Ins.off(AllianceModel.ALLIANCE_POSITION_UPDATE, this, this.updatePlayerPosition);
            AllianceModel.Ins.off(AllianceModel.UPDATE_BOSS_FIGHT_NUM, this, this.updateBossFightNum);
            AllianceModel.Ins.off(AllianceModel.UPDATE_WAR_RED, this, this.updateRedDot);
        }
    }

    exports.AllianceMainView = AllianceMainView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MenuItem extends ui.views.alliance.ui_alliance_menu_itemUI {
        constructor() {
            super();
            this.on(Laya.Event.CLICK, this, this.onMenuClick);
        }
        onMenuClick() {
            if (!this._data)
                return;
            const alliance = AllianceModel.Ins.alliance;
            if (!alliance)
                return;
            let req = new AlliancePlayerManage_req();
            req.playerId = this._data.playerId;
            switch (this._data.manageType) {
                case AllianceManage.WatchPlayer:
                    req = new JustWatchPlayer_req;
                    req.playerId = this._data.playerId;
                    break;
                case AllianceManage.Quit:
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.LangMgr.getLang("AllianceQuitWords"), new Laya.Handler(this, this.doJoin, [AllianceJoin.Quit]));
                    return;
                case AllianceManage.AppointPresident:
                    req.type = this._data.manageType;
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, E.LangMgr.getLang("AllianceAppointPresidentWords"), new Laya.Handler(this, this.doManage, [req]));
                    return;
                default:
                    req.type = this._data.manageType;
            }
            SocketMgr.Ins.SendMessageBin(req);
            if (E.ViewMgr.isOpenReg(EViewType.AllianceMenuView)) {
                E.ViewMgr.Close(EViewType.AllianceMenuView);
            }
        }
        doJoin(type) {
            const alliance = AllianceModel.Ins.alliance;
            if (!alliance)
                return;
            const req = new AllianceJoin_req;
            req.type = type;
            req.uid = alliance.uid;
            SocketMgr.Ins.SendMessageBin(req);
            if (E.ViewMgr.isOpenReg(EViewType.AllianceMenuView)) {
                E.ViewMgr.Close(EViewType.AllianceMenuView);
            }
        }
        doManage(req) {
            if (req)
                SocketMgr.Ins.SendMessageBin(req);
            if (E.ViewMgr.isOpenReg(EViewType.AllianceMenuView)) {
                E.ViewMgr.Close(EViewType.AllianceMenuView);
            }
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            let text = '';
            switch (value.manageType) {
                case AllianceManage.WatchPlayer:
                    text = E.getLang('AllianceWatchPlayer');
                    break;
                case AllianceManage.AppointVicePresident:
                    text = E.getLang('AllianceAppointVicePresident');
                    break;
                case AllianceManage.AppointPresident:
                    text = E.getLang('AllianceAppointPresident');
                    break;
                case AllianceManage.KickOut:
                    text = E.getLang('AllianceKickOut');
                    break;
                case AllianceManage.Impeach:
                    text = E.getLang('AllianceImpeach');
                    break;
                case AllianceManage.Demotion:
                    text = E.getLang('AllianceDemotion');
                    break;
                case AllianceManage.Quit:
                    text = E.getLang('AllianceQuit');
                    break;
            }
            this.item_tf.text = text;
        }
    }

    exports.MenuItem = MenuItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceMenuView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.maskAlpha = 0.1;
            this.PageType = EPageType.None;
        }
        onAddLoadRes() {
            this.addAtlas('alliance.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.alliance.ui_alliance_menuUI;
                DebugUtil.draw(this._ui);
            }
        }
        resetMenuItems(playerId, playerPosition, myPosition) {
            const parent = this._ui.paimngBg;
            while (parent.numChildren > 0) {
                parent.removeChildAt(0);
            }
            let arr = [];
            switch (myPosition) {
                case AlliancePosition.Normal:
                    arr = [AllianceManage.Impeach];
                    break;
                case AlliancePosition.VicePresident:
                    arr = [AllianceManage.Impeach, AllianceManage.KickOut];
                    break;
                case AlliancePosition.President:
                    arr = [AllianceManage.AppointVicePresident, AllianceManage.AppointPresident, AllianceManage.KickOut, AllianceManage.Demotion];
                    break;
            }
            if (playerPosition === AlliancePosition.President) {
                arr = arr.filter(o => [AllianceManage.KickOut, AllianceManage.Demotion].indexOf(o) === -1);
            }
            else {
                if (playerPosition === AlliancePosition.VicePresident) {
                    if (myPosition === AlliancePosition.VicePresident) {
                        arr = [];
                    }
                }
                else {
                    arr = arr.filter(o => o !== AllianceManage.Demotion);
                }
                arr = arr.filter(o => o !== AllianceManage.Impeach);
            }
            const curPlayerId = MainModel.Ins.mRoleData.mPlayer.AccountId;
            if (playerId === curPlayerId) {
                arr = [AllianceManage.Quit];
            }
            else {
                arr.push(AllianceManage.WatchPlayer);
            }
            const height = 58;
            parent.height = this._ui.height = arr.length * height;
            for (let i = 0; i < arr.length; i++) {
                const manage = arr[i];
                const menu = new MenuItem();
                menu.setData({ playerId, manageType: manage });
                menu.x = 0;
                menu.y = i * height;
                if (i === arr.length - 1) {
                    menu.line.visible = false;
                }
                parent.addChild(menu);
            }
        }
        setData(_data) {
            Laya.timer.callLater(this, this.onLayer, [_data]);
        }
        onLayer(_data) {
            const position = AllianceModel.Ins.position;
            const playerPosition = _data.position;
            this.resetMenuItems(_data.playerId, playerPosition, position);
            this._data = _data;
            let t = _data.target;
            let pos = t.parent.localToGlobal(new Laya.Point(t.x, t.y));
            this._tempPos = pos;
            this.SetCenter();
        }
        SetCenter() {
            if (this._tempPos) {
                let pos = new Laya.Point(0, 0);
                let btn = this._data.target.getChildByName("manage_btn");
                if (btn) {
                    pos.x = btn.x;
                    pos.y = btn.y;
                }
                this._ui.x = this._tempPos.x + pos.x;
                this._ui.y = this._tempPos.y + pos.y;
            }
        }
        onInit() {
            this.setData(this.Data);
        }
        onExit() {
        }
    }

    exports.AllianceMenuView = AllianceMenuView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceNoticeView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('alliance.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.alliance.ui_allianceNoticeViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.confirm_btn, this, this.onConfirmHandler);
                this._ui.textarea.prompt = E.getLang('NoAllianceNotice');
                this._ui.textarea.promptColor = '#ae6c39';
            }
        }
        onConfirmHandler() {
            const text = (this._ui.textarea.text).trim();
            const nameLimit = AllianceCfgProxy.Ins.GetDataById(1).f_noticemax;
            if (StringUtil.getNumBytes(text) > nameLimit * 2) {
                E.ViewMgr.ShowMidError(E.getLang('AllianceNoticeLimit', nameLimit));
                return;
            }
            let req = new AllianceSetWord_req();
            req.type = 1;
            req.value = text;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onAllianceUpdate() {
            const alliance = AllianceModel.Ins.alliance;
            if (!alliance)
                return;
            this._ui.textarea.text = alliance.notice;
        }
        onInit() {
            this.onAllianceUpdate();
            AllianceModel.Ins.on(AllianceModel.ALLIANCE_INFO_UPDATE, this, this.onAllianceUpdate);
        }
        onExit() {
            AllianceModel.Ins.off(AllianceModel.ALLIANCE_INFO_UPDATE, this, this.onAllianceUpdate);
        }
    }

    exports.AllianceNoticeView = AllianceNoticeView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeadCtl$3 {
        constructor(ui) {
            this.ui = ui;
            this._plusCtl = FontCtlFactory.createMainPlus();
        }
        updateView(value) {
            this.ui.mingcitf.text = value.rank + '';
            this.ui.nametf.text = value.name;
            MainModel.Ins.setTTHead(this.ui.head.icon, MainModel.Ins.convertHead(value.headUrl));
            this.ui.head.titleIcon.visible = false;
            this.ui.head.lvtf.text = "Lv." + value.lv;
            this.ui.img_title.skin = ChengHaoModel.Ins.getTitleImg(value.titleId);
            const v = StringUtil.val2Atlas(value.plus);
            this._plusCtl.setValue(this.ui.toplug, v);
            this.ui.countTf.text = value.accHarm + '';
            this.ui.sever_lab.text = `(${value.serverName})`;
            switch (value.position) {
                case AlliancePosition.Normal:
                    this.ui.position_bg.skin = 'remote/alliance/cy.png';
                    this.ui.position_tf.text = E.getLang('AlliancePositionNormal');
                    break;
                case AlliancePosition.VicePresident:
                    this.ui.position_bg.skin = 'remote/alliance/fmz.png';
                    this.ui.position_tf.text = E.getLang('AlliancePositionVicePresident');
                    break;
                case AlliancePosition.President:
                    this.ui.position_bg.skin = 'remote/alliance/mz.png';
                    this.ui.position_tf.text = E.getLang('AlliancePositionPresident');
                    break;
            }
        }
    }
    class RankItemCtl {
        constructor(skin) {
            this.headCtl = new HeadCtl$3(skin);
        }
        updateView(data) {
            this.headCtl.updateView(data);
        }
    }

    exports.RankItemCtl = RankItemCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RankItem$1 extends ui.views.alliance.ui_alliance_rank_itemUI {
        constructor() {
            super();
            this.rankItemCtl = new RankItemCtl(this);
        }
        setData(value) {
            if (!value)
                return;
            this.rankItemCtl.updateView(value);
        }
    }

    exports.RankItem = RankItem$1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceRankListView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('alliance.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.alliance.ui_alliance_rankUI;
                this.bindClose(this._ui.close1);
                this._ui.list1.itemRender = RankItem$1;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list1.vScrollBarSkin = ' ';
                this._ownerCtl = new RankItemCtl(this._ui.self);
            }
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        onInit() {
            this.onInnerRankUpdate();
            AllianceModel.Ins.on(AllianceModel.INNER_RANK_UPDATE, this, this.onInnerRankUpdate);
        }
        onInnerRankUpdate() {
            this._ui.list1.array = AllianceModel.Ins.innerRankList;
            const playerId = MainModel.Ins.mRoleData.mPlayer.AccountId;
            const player = AllianceModel.Ins.innerRankList.find(o => o.accountId === playerId);
            if (player) {
                this._ownerCtl.updateView(player);
            }
        }
        onExit() {
            AllianceModel.Ins.off(AllianceModel.INNER_RANK_UPDATE, this, this.onInnerRankUpdate);
        }
    }

    exports.AllianceRankListView = AllianceRankListView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceModule extends BaseModel {
        static get ins() {
            if (!this._ins) {
                this._ins = new AllianceModule();
            }
            return this._ins;
        }
        onInitCallBack() {
            AllianceModel.Ins.allianceList = undefined;
            AllianceModel.Ins.alliance = undefined;
            AllianceModel.Ins.playerList = [];
            AllianceModel.Ins.applyList = [];
            AllianceModel.Ins.searchInfo = undefined;
            AllianceModel.Ins.bossInitRevc = undefined;
            AllianceModel.Ins.bossRankRevc = undefined;
            AllianceModel.Ins.innerRankList = [];
            AllianceModel.Ins.rankRewardState = 0;
            AllianceModel.Ins.bossFightNum = 0;
            AllianceModel.Ins.updatedShopItem = undefined;
            AllianceModel.Ins.shopList = [];
            AllianceModel.Ins.updatedShopCfgs = [];
            AllianceModel.Ins.position = undefined;
            AllianceShopProxy.Ins.List.map(o => o['count'] = undefined);
            AllianceModel.Ins.joinWaitSeconds = 0;
            AllianceModel.Ins.isMainViewOpened = false;
        }
        initMsg() {
            this.Reg(new AllianceCreateView(EViewType.AllianceCreateView));
            this.Reg(new AllianceListView(EViewType.AllianceListView));
            this.Reg(new AllianceMainView(EViewType.AllianceMainView));
            this.Reg(new AllianceEditView(EViewType.AllianceEditView));
            this.Reg(new AllianceNoticeView(EViewType.AllianceNoticeView));
            this.Reg(new AllianceMenuView(EViewType.AllianceMenuView, ELayerType.subFrameLayer));
            this.Reg(new AllianceApplyListView(EViewType.AllianceApplyView));
            this.Reg(new AllianceBossView(EViewType.AllianceBossView));
            this.Reg(new AllianceBossDetailView(EViewType.AllianceBossDetailView));
            this.Reg(new AllianceRankListView(EViewType.AllianceRankListView));
            E.MsgMgr.AddMsg(MSGID.AllianceList, this.onAllianceList, this);
            E.MsgMgr.AddMsg(MSGID.AllianceInfo, this.onAllianceInfo, this);
            E.MsgMgr.AddMsg(MSGID.AlliancePlayerList, this.onAlliancePlayerList, this);
            E.MsgMgr.AddMsg(MSGID.AllianceApplyList, this.onAllianceApplyList, this);
            E.MsgMgr.AddMsg(MSGID.AllianceSearch, this.onAllianceSearch, this);
            E.MsgMgr.AddMsg(MSGID.AllianceBossInit, this.onAllianceBossInit, this);
            E.MsgMgr.AddMsg(MSGID.AllianceBossRankList, this.onAllianceBossRankList, this);
            E.MsgMgr.AddMsg(MSGID.AllianceInnerRankList, this.onAllianceInnerRankList, this);
            E.MsgMgr.AddMsg(MSGID.AllianceRankReward, this.onAllianceRankReward, this);
            E.MsgMgr.AddMsg(MSGID.AllianceBossFight, this.onAllianceBossFight, this);
            E.MsgMgr.AddMsg(MSGID.AllianceShop, this.onAllianceShop, this);
            E.MsgMgr.AddMsg(MSGID.AllianceShopInit, this.onAllianceShopInit, this);
            E.MsgMgr.AddMsg(MSGID.AllianceJoinWait, this.onAllianceJoinWait, this);
        }
        onAllianceJoinWait(revc) {
            if (revc.seconds > 0) {
                const mins = Math.ceil(revc.seconds / 60);
                E.ViewMgr.ShowMidError(E.getLang('AllianceJoinWait', mins));
            }
        }
        onAllianceShopInit(revc) {
            AllianceModel.Ins.shopList = revc.dataList;
        }
        onAllianceShop(revc) {
            AllianceModel.Ins.updatedShopItem = revc.data;
            AllianceModel.Ins.event(AllianceModel.SHOP_UPDATE);
        }
        onAllianceBossFight(revc) {
            const fightLimit = AllianceCfgProxy.Ins.GetDataById(1).f_bossplaytimes;
            const times = Math.max(fightLimit - revc.fightNum, 0);
            AllianceModel.Ins.bossFightNum = times;
            AllianceModel.Ins.event(AllianceModel.UPDATE_BOSS_FIGHT_NUM);
        }
        onAllianceRankReward(revc) {
            AllianceModel.Ins.rankRewardState = revc.rankRewardState;
        }
        onAllianceInnerRankList(revc) {
            AllianceModel.Ins.innerRankList = revc.dataList;
            AllianceModel.Ins.event(AllianceModel.INNER_RANK_UPDATE);
        }
        onAllianceBossRankList(revc) {
            AllianceModel.Ins.bossRankRevc = revc;
            AllianceModel.Ins.event(AllianceModel.BOSS_RANK_UPDATE);
        }
        onAllianceBossInit(revc) {
            AllianceModel.Ins.bossInitRevc = revc;
            const fightLimit = AllianceCfgProxy.Ins.GetDataById(1).f_bossplaytimes;
            const times = Math.max(fightLimit - revc.fightNum, 0);
            AllianceModel.Ins.bossFightNum = times;
        }
        onAllianceSearch(revc) {
            AllianceModel.Ins.searchInfo = revc.info;
        }
        onAllianceApplyList(revc) {
            AllianceModel.Ins.applyList = revc.datalist;
            AllianceModel.Ins.event(AllianceModel.ALLIANCE_APPLY_UPDATE);
        }
        onAllianceList(revc) {
            if (AllianceModel.Ins.isMainViewOpened) {
                if (E.ViewMgr.isOpenReg(EViewType.AllianceMainView))
                    E.ViewMgr.Close(EViewType.AllianceMainView);
                if (!E.ViewMgr.isOpenReg(EViewType.AllianceListView))
                    E.ViewMgr.Open(EViewType.AllianceListView);
            }
            AllianceModel.Ins.allianceList = revc.datalist;
            AllianceModel.Ins.alliance = undefined;
            AllianceModel.Ins.event(AllianceModel.ALLIANCE_LIST_UPDATE);
        }
        onAllianceInfo(revc) {
            if (AllianceModel.Ins.isMainViewOpened) {
                if (E.ViewMgr.isOpenReg(EViewType.AllianceCreateView))
                    E.ViewMgr.Close(EViewType.AllianceCreateView);
                if (E.ViewMgr.isOpenReg(EViewType.AllianceListView))
                    E.ViewMgr.Close(EViewType.AllianceListView);
                if (!E.ViewMgr.isOpenReg(EViewType.AllianceMainView))
                    E.ViewMgr.Open(EViewType.AllianceMainView);
            }
            AllianceModel.Ins.alliance = revc.info;
            AllianceModel.Ins.allianceList = undefined;
            AllianceModel.Ins.event(AllianceModel.ALLIANCE_INFO_UPDATE);
        }
        onAlliancePlayerList(revc) {
            const oldPosition = AllianceModel.Ins.position;
            let updateWarRed = false;
            if (revc.playerList.length !== AllianceModel.Ins.playerList.length) {
                updateWarRed = true;
            }
            AllianceModel.Ins.playerList = revc.playerList;
            AllianceModel.Ins.setPlayerPosition();
            const newPosition = AllianceModel.Ins.position;
            AllianceModel.Ins.event(AllianceModel.ALLIANCE_PLAYER_LIST_UPDATE);
            if (oldPosition !== newPosition) {
                updateWarRed = true;
                AllianceModel.Ins.event(AllianceModel.ALLIANCE_POSITION_UPDATE);
            }
            if (updateWarRed) {
                AllianceModel.Ins.checkWarRedState();
            }
        }
    }

    exports.AllianceModule = AllianceModule;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightGCTZCtl {
        constructor(skin) {
            this.skin = skin;
            this._plusCtl = FontCtlFactory.createPlus();
            this.skin.on(Laya.Event.DISPLAY, this, this.onAdd);
            this.skin.on(Laya.Event.UNDISPLAY, this, this.onRemove);
            ButtonCtl.CreateBtn(this.skin.btn_zl, this, this.onBtnZLClick);
            ButtonCtl.CreateBtn(this.skin.btn_tz, this, this.onBtnTZClick);
        }
        onBtnZLClick() {
            if (this._cfg) {
                let req = new AllianceWarCityEvent_req;
                req.flag = 0;
                req.cityType = this._cfg.f_CityType;
                req.baseNum = this._cfg.f_BaseNum;
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onBtnTZClick() {
            if (this._data && AllianceModel.Ins.alliance && this._cfg) {
                if (AllianceModel.Ins.alliance.name === this._data.allianceName) {
                    E.ViewMgr.ShowMsgBox(EMsgBoxType.OkOrCancel, "当前挑战的目标为我方同盟成员\n确定要挑战吗？", new Laya.Handler(this, () => {
                        this.sendCmd();
                    }));
                    return;
                }
            }
            if (this._cfg) {
                this.sendCmd();
            }
        }
        sendCmd() {
            let req = new AllianceWarCityEvent_req;
            req.flag = 1;
            req.cityType = this._cfg.f_CityType;
            req.baseNum = this._cfg.f_BaseNum;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onAdd() {
        }
        onRemove() {
            this.clearAvatar();
        }
        setData(value, cfg) {
            this._cfg = cfg;
            this._data = value;
            this.skin.bg1.skin = `remote/allianceFight/${cfg.f_UI1}.png`;
            this.skin.bg2.skin = `remote/allianceFight/${cfg.f_UI2}.png`;
            this.skin.bg3.skin = `remote/allianceFight/${cfg.f_UI3}.png`;
            if (!value) {
                this.skin.sp1.visible = true;
                this.skin.sp2.visible = false;
                this.skin.lab1.text = cfg.f_BaseNum + "号据点";
                this.skin.lab_time.text = cfg.f_GetPoint + "点/秒";
                let flag = false;
                for (let i = 0; i < AllianceFightModel.Ins.takeOverList.length; i++) {
                    let vo = AllianceFightModel.Ins.takeOverList[i];
                    if (vo.cityType == cfg.f_CityType && vo.baseNum == cfg.f_BaseNum) {
                        if (vo.firsted) {
                            flag = true;
                            break;
                        }
                    }
                }
                if (flag) {
                    this.skin.lab2.text = "";
                }
                else {
                    this.skin.lab2.text = "首次占领+" + cfg.f_FirstRewards + "点";
                }
                this.skin.btn_zl.visible = true;
                this.skin.lab_zl.text = "占领";
                this.skin.btn_zl.disabled = false;
                this.skin.btn_tz.visible = false;
                this.clearAvatar();
            }
            else {
                this.skin.sp1.visible = false;
                this.skin.sp2.visible = true;
                this.skin.lab_time1.text = cfg.f_GetPoint + "点/秒";
                this.skin.lab_tmname.text = "同盟:" + value.allianceName;
                this.skin.img_title.skin = ChengHaoModel.Ins.getTitleImg(value.titleid);
                this.skin.b1.width = value.life / value.lifeTotal * 109;
                this.clearAvatar();
                this.avatar = AvatarFactory.createAvatarByStSkin(value.enemySkin);
                this.avatar.dir = EAvatarDir.Right;
                this.skin.sp.addChild(this.avatar);
                let v = StringUtil.val2Atlas(value.plus);
                this._plusCtl.setValue(this.skin.toplug, v);
                this.skin.lab_name.text = value.name + "(" + value.serverName + ")";
                this.skin.lab3.text = "已占领:" + StringUtil.minuteFormat(value.seconds);
                this.skin.lab4.text = "+" + value.points + "点";
                if (value.playerId == MainModel.Ins.mRoleData.mPlayer.AccountId) {
                    this.skin.btn_zl.visible = true;
                    this.skin.btn_zl.disabled = true;
                    this.skin.lab_zl.text = "已占领";
                    this.skin.btn_tz.visible = false;
                }
                else {
                    this.skin.btn_zl.visible = false;
                    this.skin.btn_tz.visible = true;
                }
            }
        }
        clearAvatar() {
            if (this.avatar) {
                this.avatar.dispose();
                this.avatar = null;
            }
        }
    }

    exports.AllianceFightGCTZCtl = AllianceFightGCTZCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightGCTZView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightGCTZViewUI;
                this.timeCtl = new TimeCtl(this._ui.lab_time1);
                this._ui.img.on(Laya.Event.CLICK, this, this.onImgClick);
                this.bindClose(this._ui.btn);
                this._ctl1 = new AllianceFightGCTZCtl(this._ui.item1);
                this._ctl2 = new AllianceFightGCTZCtl(this._ui.item2);
                this._ctl3 = new AllianceFightGCTZCtl(this._ui.item3);
                this._timeCtl1 = new TimeCtl(this._ui.lab_time);
            }
        }
        onImgClick(e) {
            e.stopPropagation();
            if (this._cfg) {
                MainModel.Ins.showSmallTips(this._cfg.f_skillname, this._cfg.f_skilleffect, this._ui.img);
            }
        }
        onInit() {
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATA_AWCC_VIEW, this, this.onUpdataView);
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_PS, this, this.onPsUpdate);
            this.onPsUpdate();
            this._cfg = AllianceWarCityProxy.Ins.getCfgByType(this.Data);
            let req = new AllianceWarCityDetail_req;
            req.cityType = this._cfg.f_CityType;
            SocketMgr.Ins.SendMessageBin(req);
            if (!this._timer) {
                this._timer = new Laya.Timer;
            }
            this._timer.loop(AllianceWarConfig.Ins.getCfg().f_RefreshTime * 1000, this, this.onTimer);
            this._ui.lab1.text = this._cfg.f_cityname;
            this._ui.lab.text = this._cfg.f_skillname;
            this._ui.img.skin = "remote/allianceFight/" + this._cfg.f_Icon;
            this.refreshTime1();
        }
        onExit() {
            if (this._timer) {
                this._timer.clear(this, this.onTimer);
                this._timer = null;
            }
            this.timeCtl.dispose();
            this._timeCtl1.dispose();
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATA_AWCC_VIEW, this, this.onUpdataView);
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_PS, this, this.onPsUpdate);
        }
        refreshTime1() {
            let t = AllianceFightModel.Ins.gctzSubTime;
            if (t > 0) {
                this._timeCtl1.start(t, new Laya.Handler(this, this.onUpdateTime1), new Laya.Handler(this, this.endTime1));
            }
            else {
                this.endTime1();
                this._timeCtl1.stop();
            }
        }
        onUpdateTime1() {
            let time_str = TimeUtil.subTime(this._timeCtl1.tickVal);
            this._timeCtl1.setText(time_str);
        }
        endTime1() {
            this._timeCtl1.setText("");
        }
        onTimer() {
            let req = new AllianceWarCityFresh_req;
            req.flag = 1;
            req.cityType = this._cfg.f_CityType;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onUpdataView() {
            for (let i = 1; i < 4; i++) {
                let vo = AllianceFightModel.Ins.awccList.find(item => item.baseNum == i);
                let cfg = AllianceWarBasePointProxy.Ins.getCfgByCTypeAndNum(this._cfg.f_CityType, i);
                if (vo) {
                    this["_ctl" + i].setData(vo, cfg);
                }
                else {
                    this["_ctl" + i].setData(null, cfg);
                }
            }
        }
        onPsUpdate() {
            let id = AllianceWarConfig.Ins.getCfg().f_ActionPoint.split("-")[0];
            this._ui.monetIcon.skin = IconUtils.getIconByCfgId(parseInt(id));
            let num = AllianceWarConfig.Ins.getCfg().f_ActionPoint.split("-")[1];
            this._ui.moneyTf.text = AllianceFightModel.Ins.psCount + "/" + num;
            if (AllianceFightModel.Ins.psCount >= parseInt(num)) {
                this.timeCtl.setText("");
                this.timeCtl.stop();
            }
            else {
                this.refreshTime();
            }
        }
        refreshTime() {
            let t = AllianceFightModel.Ins.psUnix - TimeUtil.serverTime;
            if (t <= 0) {
                t = AllianceWarConfig.Ins.getCfg().f_ActionRefillTime;
            }
            this.timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(time_str);
        }
        endTime() {
            this.timeCtl.setText("");
        }
    }

    exports.AllianceFightGCTZView = AllianceFightGCTZView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightGCTZView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightGCTZView1UI;
                this.timeCtl = new TimeCtl(this._ui.lab_time1);
                this._ui.img.on(Laya.Event.CLICK, this, this.onImgClick);
                this.bindClose(this._ui.btn);
                this._ctl1 = new AllianceFightGCTZCtl(this._ui.item1);
                this._ctl2 = new AllianceFightGCTZCtl(this._ui.item2);
                this._ctl3 = new AllianceFightGCTZCtl(this._ui.item3);
                this._ctl4 = new AllianceFightGCTZCtl(this._ui.item4);
                this._ctl5 = new AllianceFightGCTZCtl(this._ui.item5);
                this._timeCtl1 = new TimeCtl(this._ui.lab_time);
            }
        }
        onImgClick(e) {
            e.stopPropagation();
            if (this._cfg) {
                MainModel.Ins.showSmallTips(this._cfg.f_skillname, this._cfg.f_skilleffect, this._ui.img);
            }
        }
        onInit() {
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATA_AWCC_VIEW, this, this.onUpdataView);
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_PS, this, this.onPsUpdate);
            this.onPsUpdate();
            this._cfg = AllianceWarCityProxy.Ins.getCfgByType(this.Data);
            let req = new AllianceWarCityDetail_req;
            req.cityType = this._cfg.f_CityType;
            SocketMgr.Ins.SendMessageBin(req);
            if (!this._timer) {
                this._timer = new Laya.Timer;
            }
            this._timer.loop(AllianceWarConfig.Ins.getCfg().f_RefreshTime * 1000, this, this.onTimer);
            this._ui.lab1.text = this._cfg.f_cityname;
            this._ui.lab.text = this._cfg.f_skillname;
            this._ui.img.skin = "remote/allianceFight/" + this._cfg.f_Icon;
            this.refreshTime1();
        }
        onExit() {
            if (this._timer) {
                this._timer.clear(this, this.onTimer);
                this._timer = null;
            }
            this.timeCtl.dispose();
            this._timeCtl1.dispose();
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATA_AWCC_VIEW, this, this.onUpdataView);
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_PS, this, this.onPsUpdate);
        }
        refreshTime1() {
            let t = AllianceFightModel.Ins.gctzSubTime;
            if (t > 0) {
                this._timeCtl1.start(t, new Laya.Handler(this, this.onUpdateTime1), new Laya.Handler(this, this.endTime1));
            }
            else {
                this.endTime1();
                this._timeCtl1.stop();
            }
        }
        onUpdateTime1() {
            let time_str = TimeUtil.subTime(this._timeCtl1.tickVal);
            this._timeCtl1.setText(time_str);
        }
        endTime1() {
            this._timeCtl1.setText("");
        }
        onTimer() {
            let req = new AllianceWarCityFresh_req;
            req.flag = 1;
            req.cityType = this._cfg.f_CityType;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onUpdataView() {
            for (let i = 1; i < 6; i++) {
                let vo = AllianceFightModel.Ins.awccList.find(item => item.baseNum == i);
                let cfg = AllianceWarBasePointProxy.Ins.getCfgByCTypeAndNum(this._cfg.f_CityType, i);
                if (vo) {
                    this["_ctl" + i].setData(vo, cfg);
                }
                else {
                    this["_ctl" + i].setData(null, cfg);
                }
            }
        }
        onPsUpdate() {
            let id = AllianceWarConfig.Ins.getCfg().f_ActionPoint.split("-")[0];
            this._ui.monetIcon.skin = IconUtils.getIconByCfgId(parseInt(id));
            let num = AllianceWarConfig.Ins.getCfg().f_ActionPoint.split("-")[1];
            this._ui.moneyTf.text = AllianceFightModel.Ins.psCount + "/" + num;
            if (AllianceFightModel.Ins.psCount >= parseInt(num)) {
                this.timeCtl.setText("");
                this.timeCtl.stop();
            }
            else {
                this.refreshTime();
            }
        }
        refreshTime() {
            let t = AllianceFightModel.Ins.psUnix - TimeUtil.serverTime;
            if (t <= 0) {
                t = AllianceWarConfig.Ins.getCfg().f_ActionRefillTime;
            }
            this.timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(time_str);
        }
        endTime() {
            this.timeCtl.setText("");
        }
    }

    exports.AllianceFightGCTZView1 = AllianceFightGCTZView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightGCView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightGCViewUI;
                this.bindClose(this._ui.btn_close);
                this.btnList.push(ButtonCtl.Create(this._ui.btn_rank, new Laya.Handler(this, this.onRankHandler)), ButtonCtl.Create(this._ui.btn_rz, new Laya.Handler(this, this.onBtnRZClick)));
                for (let i = 1; i < 6; i++) {
                    this._ui["sp" + i].on(Laya.Event.CLICK, this, this.onClick, [i]);
                }
                this._timeCtl = new TimeCtl(this._ui.lab_time);
            }
        }
        onClick(index) {
            if (index != 5) {
                E.ViewMgr.Open(EViewType.AllianceFightGCTZView, null, index);
            }
            else {
                E.ViewMgr.Open(EViewType.AllianceFightGCTZView1, null, index);
            }
        }
        onRankHandler() {
            E.ViewMgr.Open(EViewType.AllianceFightRankView);
        }
        onBtnRZClick() {
            E.ViewMgr.Open(EViewType.AllianceFightRZView);
        }
        onInit() {
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATA_AWCP_VIEW, this, this.onUpdataView);
            let req = new AllianceWarEnterActivity_req;
            req.type = 2;
            SocketMgr.Ins.SendMessageBin(req);
            if (!this._timer) {
                this._timer = new Laya.Timer;
            }
            this._timer.loop(AllianceWarConfig.Ins.getCfg().f_RefreshTime * 1000, this, this.onTimer);
            for (let i = 0; i < AllianceWarCityProxy.Ins.List.length; i++) {
                let vo = AllianceWarCityProxy.Ins.List[i];
                this._ui["lab_name" + (i + 1)].text = vo.f_cityname;
            }
            this.refreshTime();
        }
        onExit() {
            if (this._timer) {
                this._timer.clear(this, this.onTimer);
                this._timer = null;
            }
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATA_AWCP_VIEW, this, this.onUpdataView);
            this._timeCtl.dispose();
        }
        refreshTime() {
            let t = AllianceFightModel.Ins.gctzSubTime;
            if (t > 0) {
                this._timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
                this._timeCtl.stop();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._timeCtl.setText("");
        }
        onTimer() {
            let req = new AllianceWarCityFresh_req;
            req.flag = 0;
            req.cityType = 0;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onUpdataView() {
            this.updataView();
        }
        updataView() {
            for (let i = 0; i < AllianceFightModel.Ins.awcpList.length; i++) {
                let data = AllianceFightModel.Ins.awcpList[i];
                let num = 0;
                for (let j = 1; j < 6; j++) {
                    if (this._ui["sp" + data.cityType + "_" + j]) {
                        if (data.baseNums.indexOf(j) == -1) {
                            this._ui["sp" + data.cityType + "_" + j].visible = false;
                            num++;
                        }
                        else {
                            this._ui["sp" + data.cityType + "_" + j].visible = true;
                        }
                    }
                }
                this._ui["lab" + (i + 1)].text = num + "";
            }
        }
    }

    exports.AllianceFightGCView = AllianceFightGCView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ColorUtil {
        static get RED() { return Laya.Color.RED; }
        static get GREEN() { return Laya.Color.GREEN; }
        static get BLUE() { return Laya.Color.BLUE; }
        static get CYAN() { return Laya.Color.CYAN; }
        static get YELLOW() { return Laya.Color.YELLOW; }
        static get MAGENTA() { return Laya.Color.MAGENTA; }
        static get GRAY() { return Laya.Color.GRAY; }
        static get WHITE() { return Laya.Color.WHITE; }
        static get BLACK() { return Laya.Color.BLACK; }
        static Same(c1, c2) {
            if (c1.r == c2.r &&
                c1.g == c2.g &&
                c1.b == c2.b &&
                c1.a == c2.a)
                return true;
            return true;
        }
        static IsRed(r, g, b) {
            if (r >= 180 && r <= 255 && g >= 0 && g <= 50 && b >= 0 && b <= 50) {
                return true;
            }
            return false;
        }
        static CreateColorFilter(type = 0) {
            if (type == 1) {
                var colorV = 0.6;
                var colorMat = [
                    colorV, 0, 0, 0, 0,
                    0, colorV, 0, 0, 0,
                    0, 0, colorV, 0, 0,
                    0, 0, 0, 1, 0,
                ];
                var colorFilter = new Laya.ColorFilter(colorMat);
                return [colorFilter];
            }
            else if (type == 2) {
                var colorV = 0;
                var colorMat = [
                    colorV, 0, 0, 0, 0,
                    0, colorV, 0, 0, 0,
                    0, 0, colorV, 0, 0,
                    0, 0, 0, 1, 0,
                ];
                var colorFilter = new Laya.ColorFilter(colorMat);
                return [colorFilter];
            }
            return [];
        }
    }

    exports.ColorUtil = ColorUtil;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class BossAvatarCtl {
        constructor() {
            this.mouseEnable = true;
        }
        refresh(bossId) {
            this.bossId = bossId;
            let skin = this.skin;
            if (bossId) {
                const cfg = AllianceWarSixBossProxy.Ins.GetDataById(bossId);
                this.skin.visible = true;
                skin.nameTf.text = cfg.f_name;
                if (this.avatar) {
                    this.avatar.dispose();
                    this.avatar = null;
                }
                const bossSkin = new stSkin();
                bossSkin.f_HeadID = cfg.f_HeadID;
                bossSkin.f_WeaponID = cfg.f_WeaponID;
                bossSkin.f_ShieldID = cfg.f_ShieldID;
                bossSkin.f_WingID = cfg.f_WingID;
                bossSkin.f_MountID = cfg.f_MountID;
                bossSkin.f_BodyID = cfg.f_BodyID;
                this.avatar = AvatarFactory.createAvatarByStSkin(bossSkin);
                this.avatar.dir = EAvatarDir.Left;
                skin.avatarCon.addChild(this.avatar);
            }
            else {
                this.skin.visible = false;
                this.releaseRes();
            }
            if (this.mouseEnable) {
                this.initClick();
            }
        }
        refreshBlood(vo) {
            var _a;
            if (!vo)
                return;
            let skin = this.skin;
            if (vo.life > 0) {
                const conf = AllianceWarSixBossProxy.Ins.GetDataById(vo.id);
                const bossTotalLife = ((_a = AllianceFightModel.Ins.parseAttrList(conf.f_attribute).find(o => o.equipAttrId === EAttrType.Life)) === null || _a === void 0 ? void 0 : _a.attrValue) || 0;
                const percent = vo.life / bossTotalLife;
                const bloodWidth = Math.round((skin.bg.width - 4) * percent);
                if (skin.b1 && skin.b2) {
                    skin.b1.width = bloodWidth;
                    skin.b2.width = bloodWidth;
                }
                this.setFilterNull();
            }
            else {
                skin.b1.width = skin.b2.width = 0;
                this.setFilterGray();
            }
        }
        initClick() {
            let con = this.skin.clickPart;
            this.skin.hitArea = new Laya.Rectangle(con.x, con.y, con.width, con.height);
            this.skin.on(Laya.Event.CLICK, this, this.onClickHanlder);
        }
        onClickHanlder() {
            console.log(111);
            E.ViewMgr.Open(EViewType.AllianceFightBossDetailView, null, this.bossId);
        }
        releaseRes() {
            if (this.avatar) {
                this.avatar.dispose();
                this.avatar = null;
            }
        }
        setFilterGray() {
            this.skin.avatarCon.filters = ColorUtil.CreateColorFilter(1);
            this.skin.win_tf.visible = true;
        }
        setFilterNull() {
            this.skin.avatarCon.filters = null;
            this.skin.win_tf.visible = false;
        }
    }

    exports.BossAvatarCtl = BossAvatarCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFight56View extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this._avatarShowList = [];
            this.autoFree = true;
            this.refreshSeconds = 0;
            this.hasTimer = false;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
            this.addAtlas('fighthard.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFight56ViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.rankBtn, this, this.onRankHandler);
                ButtonCtl.CreateBtn(this._ui.reward_chapter_btn, this, this.onChapterHandler);
                this.fightTimeCtl = new TimeCtl(this._ui.tf1);
                this.timeCtl = new TimeCtl(this._ui.lab_time1);
                this._avatarShowList = [];
                for (let i = 1; i <= 6; i++) {
                    let cell = new BossAvatarCtl();
                    cell.skin = this._ui[`boss${i}`];
                    this._avatarShowList.push(cell);
                    this._avatarShowList[i - 1].refresh(i);
                }
                if (!this.refreshSeconds) {
                    const conf = AllianceWarConfig.Ins.getCfg();
                    this.refreshSeconds = conf.f_RefreshTime;
                }
                this._ui.monetIcon.skin = IconUtils.getIconByCfgId(ECellType.AllianceEnergy);
                this.onPsUpdate();
            }
        }
        onPsUpdate() {
            let num = AllianceWarConfig.Ins.getCfg().f_ActionPoint.split("-")[1];
            this._ui.moneyTf.text = AllianceFightModel.Ins.psCount + "/" + num;
            if (AllianceFightModel.Ins.psCount >= parseInt(num)) {
                this.timeCtl.setText("");
                this.timeCtl.stop();
            }
            else {
                this.refreshTime();
            }
        }
        refreshTime() {
            let t = AllianceFightModel.Ins.psUnix - TimeUtil.serverTime;
            if (t <= 0) {
                t = AllianceWarConfig.Ins.getCfg().f_ActionRefillTime;
            }
            this.timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this.timeCtl.tickVal);
            this.timeCtl.setText(time_str);
        }
        endTime() {
            this.timeCtl.setText("");
        }
        onBossLifeUpdate() {
            const bossList = AllianceFightModel.Ins.bossLifeList;
            for (let i = 1; i <= 6; i++) {
                const boss = bossList.find(o => o.id === i);
                if (!boss)
                    continue;
                const avatar = this._avatarShowList.find(o => o.bossId === i);
                avatar.refreshBlood(boss);
            }
            if (AllianceFightModel.Ins.passLevel1) {
                this._ui.reward_chapter_btn.visible = true;
            }
            else {
                this._ui.reward_chapter_btn.visible = false;
                if (!this.hasTimer) {
                    this.hasTimer = true;
                    Laya.timer.loop(this.refreshSeconds * 1000, this, this.onLoopCheck);
                }
            }
        }
        refreshReq() {
            const req = new AllianceWarEnemyLife_req();
            SocketMgr.Ins.SendMessageBin(req);
        }
        onLoopCheck() {
            this.refreshReq();
        }
        onInit() {
            this.refreshReq();
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_PS, this, this.onPsUpdate);
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_BOSS_LIFE, this, this.onBossLifeUpdate);
            this.refreshTime2();
        }
        onExit() {
            this.timeCtl.dispose();
            this.fightTimeCtl.dispose();
            this._avatarShowList.forEach(o => {
                o.releaseRes();
            });
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_PS, this, this.onPsUpdate);
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_BOSS_LIFE, this, this.onBossLifeUpdate);
            if (this.hasTimer) {
                Laya.timer.clear(this, this.onLoopCheck);
                this.hasTimer = false;
            }
        }
        onRankHandler() {
            E.ViewMgr.Open(EViewType.AllianceFightRankView);
        }
        onChapterHandler() {
            if (!AllianceFightModel.Ins.passLevel1) {
                E.ViewMgr.ShowMidError("击败所有boss后开启");
                return;
            }
            E.ViewMgr.Open(EViewType.AllianceFightGCView);
        }
        refreshTime2() {
            let t = AllianceFightModel.Ins.gctzSubTime;
            if (t > 0) {
                this.fightTimeCtl.start(t, new Laya.Handler(this, this.onUpdateTime2), new Laya.Handler(this, this.endTime2));
            }
            else {
                this.endTime2();
                this.fightTimeCtl.stop();
            }
        }
        onUpdateTime2() {
            let time_str = TimeUtil.subTime(this.fightTimeCtl.tickVal);
            this.fightTimeCtl.setText('活动剩余时间：' + time_str);
        }
        endTime2() {
            this.fightTimeCtl.setText("");
        }
    }

    exports.AllianceFight56View = AllianceFight56View;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightBossDetailView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.bossId = 0;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
            this.addAtlas('alliance.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightBossDetailViewUI;
                this.bindClose(this._ui.close1);
                let cell = new BossAvatarCtl();
                this.bossAvatar = cell;
                ButtonCtl.CreateBtn(this._ui.fight_btn, this, this.onFightHandler);
                ButtonCtl.CreateBtn(this._ui.detail_btn, this, this.onDetailHandler);
            }
        }
        onFightHandler() {
            const req = new AllianceWarFight_req();
            req.id = this.bossId;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onDetailHandler() {
            const req = new AllianceWarBossDamage_req();
            req.id = this.bossId;
            SocketMgr.Ins.SendMessageBin(req);
            E.ViewMgr.Open(EViewType.AllianceFightHarmDetailView);
        }
        onInit() {
            this.bossId = this.Data;
            this.updateBoss();
            this.updateView();
            this.onBossLifeUpdate();
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_BOSS_LIFE, this, this.onBossLifeUpdate);
        }
        onBossLifeUpdate() {
            const cell = this.bossAvatar;
            const bossList = AllianceFightModel.Ins.bossLifeList;
            const boss = bossList.find(o => o.id === this.bossId);
            cell.refreshBlood(boss);
        }
        updateBoss() {
            const cell = this.bossAvatar;
            cell.skin = this._ui.boss_avt;
            cell.refresh(this.bossId);
        }
        updateView() {
            const conf = AllianceWarSixBossProxy.Ins.GetDataById(this.bossId);
            this._ui.boss_name_tf.text = conf.f_name;
            this._ui.reward_tf.text = `击败点数：${conf.f_points}`;
        }
        onExit() {
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_BOSS_LIFE, this, this.onBossLifeUpdate);
            this.bossAvatar.refresh(null);
        }
    }

    exports.AllianceFightBossDetailView = AllianceFightBossDetailView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ChatModel extends Laya.EventDispatcher {
        constructor() {
            super(...arguments);
            this.isChat = false;
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new ChatModel();
            }
            return this._ins;
        }
        setList(value) {
            this.chatKQList = [];
            this.chatLeagueList = [];
            this.chatWorldList = [];
            for (let i = 0; i < value.length; i++) {
                if (value[i].type == 1) {
                    this.chatKQList.push(value[i]);
                }
                else if (value[i].type == 2) {
                    this.chatLeagueList.push(value[i]);
                }
                else if (value[i].type == 3) {
                    this.chatWorldList.push(value[i]);
                }
            }
        }
    }
    ChatModel.UPDATA_VIEW = "UPDATA_VIEW";
    ChatModel.UPDATA_MAIN_VIEW = "UPDATA_MAIN_VIEW";

    exports.ChatModel = ChatModel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightEnrollView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
            this.addAtlas('fighthard.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightEnrollViewUI;
                this.bindClose(this._ui.close1);
                this.btnList.push(ButtonCtl.CreateBtn(this._ui.enroll_btn, this, this.onEnrollHandler), ButtonCtl.CreateBtn(this._ui.rankBtn, this, this.onRankHandler), ButtonCtl.CreateBtn(this._ui.reward_chapter_btn, this, this.onRewardChapterHandler), ButtonCtl.CreateBtn(this._ui.chatbg, this, this.onChatHandler, false), ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)));
                this.setEnrollTime();
                this.rewardTimeCtl = new TimeCtlV2(this._ui.count_down_tf2, "{0}");
                this.setRewardChapterVisible(false);
                this.updateChat();
            }
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("allianceFightTitle", "allianceFightDec");
        }
        onChatHandler() {
            E.ViewMgr.Open(EViewType.ChatView);
        }
        setRewardChapterVisible(visible) {
            this._ui.count_down_tf2.visible = visible;
            let arr = AllianceWarBounsProxy.Ins.getCfgByRank(AllianceFightModel.Ins.rank);
            if (arr && arr.length) {
                this._ui.count_down_lab.text = arr[0].f_BounsName;
            }
            else {
                this._ui.count_down_lab.text = "奖励关";
            }
        }
        onRankHandler() {
            E.ViewMgr.Open(EViewType.AllianceFightRankView);
        }
        onRewardChapterHandler() {
            E.ViewMgr.Open(EViewType.AllianceFightAwardView1);
        }
        setEnrollTime() {
            const conf = AllianceWarConfig.Ins.getCfg();
            const ranges = [Number(conf.f_EventStartDay), Number(conf.f_EventStartDay), Number(conf.f_ApplyStartDay), Number(conf.f_ApplyEndDay)];
            const days = [];
            for (const range of ranges) {
                if (range < 7) {
                    days.push(TimeUtil.getDayString(range));
                }
                else {
                    days.push(TimeUtil.getDayString(0));
                }
            }
            this._ui.tf1.text = `活动开启时间：周${TimeUtil.getDayString(ranges[0])} ${conf.f_EventStartTime}到周${TimeUtil.getDayString(ranges[1])} ${conf.f_EventEndTime}`;
            this._ui.count_down_tf1.text = `报名时间：周${TimeUtil.getDayString(ranges[2])} ${conf.f_ApplyStartTime}到周${TimeUtil.getDayString(ranges[3])} ${conf.f_ApplyEndTime}`;
        }
        onEnrollHandler() {
            if (AllianceFightModel.Ins.isEnrolled) {
                AllianceFightModel.Ins.entered = true;
                AllianceModel.Ins.checkWarRedState();
                const req = new AllianceWarEnterActivity_req();
                req.type = 1;
                SocketMgr.Ins.SendMessageBin(req);
            }
            else {
                let req = new AllianceWarSignUp_req();
                SocketMgr.Ins.SendMessageBin(req);
            }
        }
        onTimeEnd2() {
            this.timeUpdate2();
        }
        onTimeUpdate2() {
            this._ui.count_down_tf2.text = `剩余：${this._ui.count_down_tf2.text}`;
        }
        timeUpdate2() {
            let sub = AllianceFightModel.Ins.rewardSubTime;
            if (sub <= 0) ;
            else {
                this.rewardTimeCtl.start(sub);
                this.rewardTimeCtl.on(Laya.Event.CHANGE, this, this.onTimeUpdate2);
                this.rewardTimeCtl.on(Laya.Event.COMPLETE, this, this.onTimeEnd2);
            }
        }
        refreshBtnStatus() {
            this.setRewardChapterVisible(false);
            const warStatus = AllianceFightModel.Ins.warStatus;
            switch (warStatus) {
                case WarStatus.Enroll:
                    if (AllianceFightModel.Ins.isEnrolled) {
                        this._ui.enroll_btn.disabled = true;
                        this._ui.tf6.text = '已报名';
                    }
                    else {
                        this._ui.enroll_btn.disabled = false;
                        this._ui.enroll_btn.skin = `remote/allianceFight/anniu_blue.png`;
                        this._ui.tf6.text = '报名';
                    }
                    break;
                case WarStatus.EnrollEnd:
                    this._ui.enroll_btn.disabled = true;
                    if (AllianceFightModel.Ins.isEnrolled) {
                        this._ui.tf6.text = '已报名';
                    }
                    else {
                        this._ui.tf6.text = '未报名';
                    }
                    break;
                case WarStatus.Fight:
                    if (AllianceFightModel.Ins.isEnrolled) {
                        this._ui.enroll_btn.disabled = false;
                        this._ui.enroll_btn.skin = `remote/allianceFight/anniu_green.png`;
                        this._ui.tf6.text = '进入';
                    }
                    else {
                        this._ui.enroll_btn.disabled = true;
                        this._ui.tf6.text = '未报名';
                    }
                    break;
                case WarStatus.FightEnd:
                case WarStatus.Reward:
                    if (AllianceFightModel.Ins.isEnrolled && AllianceFightModel.Ins.showRewardChapter) {
                        this.setRewardChapterVisible(true);
                    }
                    this._ui.enroll_btn.disabled = true;
                    this._ui.tf6.text = '已结束';
                    break;
                case WarStatus.RewardEnd:
                    this._ui.enroll_btn.disabled = true;
                    this._ui.tf6.text = '已结束';
                    break;
            }
        }
        updateChat() {
            const list = ChatModel.Ins.chatLeagueList;
            const newChat = list.length ? list[list.length - 1] : null;
            this._ui.chatTf.text = newChat ? StringUtil.convertName(`${newChat.name}:${newChat.chat}`, 15) : '';
        }
        onInit() {
            this.timeUpdate2();
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_ENROLL, this, this.updateRedDot);
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_RANK, this, this.updateRedDot);
            AllianceModel.Ins.on(AllianceModel.UPDATE_WAR_RED, this, this.updateRedDot);
            ChatModel.Ins.on(ChatModel.UPDATA_VIEW, this, this.updateChat);
            this.updateRedDot();
        }
        onExit() {
            this.rewardTimeCtl.stop();
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_ENROLL, this, this.updateRedDot);
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_RANK, this, this.updateRedDot);
            AllianceModel.Ins.off(AllianceModel.UPDATE_WAR_RED, this, this.updateRedDot);
            ChatModel.Ins.off(ChatModel.UPDATA_VIEW, this, this.updateChat);
        }
        updateRedDot() {
            this.refreshBtnStatus();
            if (AllianceModel.Ins.warRedState) {
                let isReward = (AllianceFightModel.Ins.myAllianceRewardState === 1) || (AllianceFightModel.Ins.myInnerRewardState === 1);
                if (isReward) {
                    DotManager.addDot(this._ui.rankBtn);
                }
                else {
                    DotManager.removeDot(this._ui.rankBtn);
                }
                const warStatus = AllianceFightModel.Ins.warStatus;
                if (warStatus === WarStatus.Reward) {
                    DotManager.addDot(this._ui.reward_chapter_btn);
                    DotManager.removeDot(this._ui.enroll_btn);
                    return;
                }
                else if (warStatus === WarStatus.Fight) {
                    if (AllianceFightModel.Ins.entered) {
                        DotManager.removeDot(this._ui.enroll_btn);
                    }
                    else {
                        DotManager.addDot(this._ui.enroll_btn);
                    }
                    DotManager.removeDot(this._ui.reward_chapter_btn);
                    return;
                }
                else if (warStatus === WarStatus.Enroll) {
                    if (AllianceFightModel.Ins.isEnrolled) {
                        DotManager.removeDot(this._ui.enroll_btn);
                    }
                    else {
                        DotManager.addDot(this._ui.enroll_btn);
                    }
                    DotManager.removeDot(this._ui.reward_chapter_btn);
                    return;
                }
                else {
                    DotManager.removeDot(this._ui.enroll_btn);
                    DotManager.removeDot(this._ui.reward_chapter_btn);
                }
                return;
            }
            DotManager.removeDot(this._ui.rankBtn);
            DotManager.removeDot(this._ui.reward_chapter_btn);
            DotManager.removeDot(this._ui.enroll_btn);
        }
    }

    exports.AllianceFightEnrollView = AllianceFightEnrollView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HarmItem extends ui.views.allianceFight.ui_allianceFightRankItemUI {
        constructor() {
            super();
            this._plusCtl = FontCtlFactory.createMainPlus();
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            MainModel.Ins.setTTHead(this.head.icon, MainModel.Ins.convertHead(value.headUrl)),
                this.head.titleIcon.visible = false;
            this.head.lvtf.text = "Lv." + value.level;
            this.nametf.text = StringUtil.convertName(value.nickName);
            this.img_title.skin = ChengHaoModel.Ins.getTitleImg(value.titleid);
            const v = StringUtil.val2Atlas(value.plus);
            this._plusCtl.setValue(this.toplug, v);
            this.harm_percent_tf.text = (value.damagePercent / 100).toFixed(2) + '%';
            this.harm_tf.text = value.damage.toString();
            this.mingcitf.text = value.rank ? value.rank.toString() : '未上榜';
        }
    }

    exports.HarmItem = HarmItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightHarmDetailView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
            this.addAtlas('fighthard.atlas');
            this.addAtlas('jjc.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightHarmDetailViewUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = HarmItem;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onItemRender);
                this._ui.list.vScrollBarSkin = ' ';
            }
        }
        onItemRender(item) {
            item.setData(item.dataSource);
        }
        onRankUpdate() {
            this._ui.list.array = AllianceFightModel.Ins.bossHarmList;
        }
        onInit() {
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_BOSS_HARM_DETAIL, this, this.onRankUpdate);
        }
        onExit() {
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_BOSS_HARM_DETAIL, this, this.onRankUpdate);
        }
    }

    exports.AllianceFightHarmDetailView = AllianceFightHarmDetailView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeadCtl$3 {
        constructor(ui) {
            this.ui = ui;
        }
        updateView(value) {
            if (!value)
                return;
            this.data = value;
            this.ui.mingcitf.text = value.rank ? value.rank.toString() : '未上榜';
            this.ui.nametf.text = StringUtil.convertName(value.name);
            this.ui.count_tf.text = value.baseNum.toString();
            this.ui.totalCount_tf.text = value.point.toString();
        }
    }
    class RankItemCtl1 {
        constructor(skin) {
            this.headCtl = new HeadCtl$3(skin);
        }
        updateView(data) {
            this.headCtl.updateView(data);
        }
    }

    exports.RankItemCtl1 = RankItemCtl1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeadCtl$3 {
        constructor(ui) {
            this.ui = ui;
            this._plusCtl = FontCtlFactory.createMainPlus();
        }
        updateView(value) {
            if (!value)
                return;
            this.data = value;
            MainModel.Ins.setTTHead(this.ui.head.icon, MainModel.Ins.convertHead(value.headUrl));
            this.ui.head.titleIcon.visible = false;
            this.ui.head.lvtf.text = "Lv." + value.level;
            this.ui.nametf.text = StringUtil.convertName(value.nickName);
            this.ui.img_title.skin = ChengHaoModel.Ins.getTitleImg(value.titleid);
            const v = StringUtil.val2Atlas(value.plus);
            this._plusCtl.setValue(this.ui.toplug, v);
            this.ui.harm_tf.text = value.point.toString();
            this.ui.mingcitf.text = value.rank ? value.rank.toString() : '未上榜';
        }
    }
    class RankItemCtl2 {
        constructor(skin) {
            this.headCtl = new HeadCtl$3(skin);
        }
        updateView(data) {
            this.headCtl.updateView(data);
        }
    }

    exports.RankItemCtl2 = RankItemCtl2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class HeadCtl$3 {
        constructor(ui) {
            this.ui = ui;
            this._plusCtl = FontCtlFactory.createMainPlus();
        }
        updateView(value) {
            if (!value)
                return;
            this.data = value;
            MainModel.Ins.setTTHead(this.ui.head.icon, MainModel.Ins.convertHead(value.headUrl));
            this.ui.head.titleIcon.visible = false;
            this.ui.head.lvtf.text = "Lv." + value.level;
            this.ui.nametf.text = StringUtil.convertName(value.nickName);
            this.ui.img_title.skin = ChengHaoModel.Ins.getTitleImg(value.titleid);
            const v = StringUtil.val2Atlas(value.plus);
            this._plusCtl.setValue(this.ui.toplug, v);
            this.ui.harm_tf.text = value.count.toString();
            this.ui.mingcitf.text = value.rank ? value.rank.toString() : '未上榜';
        }
    }
    class RankItemCtl3 {
        constructor(skin) {
            this.headCtl = new HeadCtl$3(skin);
        }
        updateView(data) {
            this.headCtl.updateView(data);
        }
    }

    exports.RankItemCtl3 = RankItemCtl3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RankItem1$1 extends ui.views.allianceFight.ui_allianceFightRankItem1UI {
        constructor() {
            super();
            this.rankItemCtl = new RankItemCtl1(this);
            this.on(Laya.Event.CLICK, this, this.onClick);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.rankItemCtl.updateView(value);
        }
        onClick() {
            var _a;
            if (!((_a = this._data) === null || _a === void 0 ? void 0 : _a.uid))
                return;
            const name = this._data.name;
            const uid = this._data.uid;
            const rank = this._data.rank;
            AllianceFightModel.Ins.selectedAlliance = { name, uid, rank };
            const req = new AllianceMember_req();
            req.allianceId = this._data.uid;
            SocketMgr.Ins.SendMessageBin(req);
        }
    }

    exports.RankItem1 = RankItem1$1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RankItem2 extends ui.views.allianceFight.ui_allianceFightRankItem2UI {
        constructor() {
            super();
            this.rankItemCtl = new RankItemCtl2(this);
            this.on(Laya.Event.CLICK, this, this.onClick);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.rankItemCtl.updateView(value);
        }
        onClick() {
            var _a;
            if (!((_a = this._data) === null || _a === void 0 ? void 0 : _a.playerId))
                return;
            const req = new JustWatchPlayer_req();
            req.playerId = this._data.playerId;
            SocketMgr.Ins.SendMessageBin(req);
        }
    }

    exports.RankItem2 = RankItem2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RankItem3 extends ui.views.allianceFight.ui_allianceFightRankItem3UI {
        constructor() {
            super();
            this.rankItemCtl = new RankItemCtl3(this);
            this.on(Laya.Event.CLICK, this, this.onClick);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            this.rankItemCtl.updateView(value);
        }
        onClick() {
            var _a;
            if (!((_a = this._data) === null || _a === void 0 ? void 0 : _a.playerId))
                return;
            const req = new JustWatchPlayer_req();
            req.playerId = this._data.playerId;
            SocketMgr.Ins.SendMessageBin(req);
        }
    }

    exports.RankItem3 = RankItem3;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightRankView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.selectIndex = 0;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
            this.addAtlas('fighthard.atlas');
            this.addAtlas('jjc.atlas');
            this.addAtlas('alliance.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightRankViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.rewardBtn, this, this.onRewardHandler);
                ButtonCtl.CreateBtn(this._ui.btn1, this, this.onMenu1Handler);
                ButtonCtl.CreateBtn(this._ui.btn2, this, this.onMenu2Handler);
                ButtonCtl.CreateBtn(this._ui.btn3, this, this.onMenu3Handler);
                this._ui.list1.itemRender = RankItem1$1;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender1);
                this._ui.list1.vScrollBarSkin = ' ';
                this._ui.list1.array = [];
                this.rankCtl1 = new RankItemCtl1(this._ui.my1);
                this._ui.list2.itemRender = RankItem2;
                this._ui.list2.renderHandler = new Laya.Handler(this, this.onItemRender2);
                this._ui.list2.vScrollBarSkin = ' ';
                this._ui.list2.array = [];
                this.rankCtl2 = new RankItemCtl2(this._ui.my2);
                this._ui.list3.itemRender = RankItem3;
                this._ui.list3.renderHandler = new Laya.Handler(this, this.onItemRender3);
                this._ui.list3.vScrollBarSkin = ' ';
                this._ui.list3.array = [];
                this.rankCtl3 = new RankItemCtl3(this._ui.my3);
                this._ui.timeTf.text = ``;
                this.fightTimeCtl = new TimeCtlV2(this._ui.timeTf, "{0}");
            }
        }
        onRewardHandler() {
            if (this.selectIndex !== 2) {
                E.ViewMgr.Open(EViewType.AllianceFightRewardView, undefined, this.selectIndex + 1);
            }
        }
        onMenuSelected(index) {
            this.selectIndex = index;
            const arr = [
                { menu: this._ui.btn1, list: this._ui.list1, my: this._ui.my1, req: AllianceWarAllianceRank_req },
                { menu: this._ui.btn2, list: this._ui.list2, my: this._ui.my2, req: AllianceWarInnerRank_req },
                { menu: this._ui.btn3, list: this._ui.list3, my: this._ui.my3, req: AllianceWarRewardRank_req },
            ];
            for (let i = 0; i < arr.length; i++) {
                if (i === index) {
                    arr[i].menu.skin = 'remote/alliance/anniu_2.png';
                    arr[i].list.visible = arr[i].my.visible = true;
                }
                else {
                    arr[i].menu.skin = 'remote/alliance/anniu_1.png';
                    arr[i].list.visible = arr[i].my.visible = false;
                }
            }
            if (this.selectIndex === 2) {
                this._ui.rewardBtn.visible = false;
            }
            else {
                this._ui.rewardBtn.visible = true;
            }
            const req = new arr[index].req;
            SocketMgr.Ins.SendMessageBin(req);
            this.updateRedDot();
        }
        onMenu1Handler() {
            this.onMenuSelected(0);
        }
        onMenu2Handler() {
            this.onMenuSelected(1);
        }
        onMenu3Handler() {
            this.onMenuSelected(2);
        }
        onItemRender1(item) {
            item.setData(item.dataSource);
        }
        onItemRender2(item) {
            item.setData(item.dataSource);
        }
        onItemRender3(item) {
            item.setData(item.dataSource);
        }
        onAllianceRankUpdate() {
            this._ui.list1.array = AllianceFightModel.Ins.allianceRankList;
            this.rankCtl1.updateView(AllianceFightModel.Ins.myAllianceRankVal);
        }
        onInnerRankUpdate() {
            this._ui.list2.array = AllianceFightModel.Ins.innerRankList;
            this.rankCtl2.updateView(AllianceFightModel.Ins.myInnerRankVal);
        }
        onAllianceRewardUpdate() {
            this._ui.list3.array = AllianceFightModel.Ins.rewardRankList;
            this.rankCtl3.updateView(AllianceFightModel.Ins.myRewardRankVal);
        }
        showMemberView() {
            const data = AllianceFightModel.Ins.selectedAlliance;
            E.ViewMgr.Open(EViewType.AllianceFightMemberView, null, data);
        }
        onInit() {
            this.timeUpdate();
            this.onMenuSelected(0);
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_ALLIANCE_RANK, this, this.onAllianceRankUpdate);
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_INNER_RANK, this, this.onInnerRankUpdate);
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_REWARD_RANK, this, this.onAllianceRewardUpdate);
            AllianceModel.Ins.on(AllianceModel.UPDATE_WAR_RED, this, this.updateRedDot);
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_PLAYER_LIST, this, this.showMemberView);
            this.updateRedDot();
        }
        onExit() {
            this.fightTimeCtl.stop();
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_ALLIANCE_RANK, this, this.onAllianceRankUpdate);
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_INNER_RANK, this, this.onInnerRankUpdate);
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_REWARD_RANK, this, this.onAllianceRewardUpdate);
            AllianceModel.Ins.off(AllianceModel.UPDATE_WAR_RED, this, this.updateRedDot);
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_PLAYER_LIST, this, this.showMemberView);
        }
        onTimeEnd() {
            this.timeUpdate();
        }
        onTimeUpdate() {
            this._ui.timeTf.text = `排行榜刷新倒计时：${this._ui.timeTf.text}`;
        }
        timeUpdate() {
            let sub = AllianceFightModel.Ins.fightSubTime;
            if (sub <= 0) ;
            else {
                this.fightTimeCtl.start(sub);
                this.fightTimeCtl.on(Laya.Event.CHANGE, this, this.onTimeUpdate);
                this.fightTimeCtl.on(Laya.Event.COMPLETE, this, this.onTimeEnd);
            }
        }
        updateRedDot() {
            if (AllianceModel.Ins.warRedState) {
                if (((this.selectIndex === 0) && (AllianceFightModel.Ins.myAllianceRewardState === 1)) || (this.selectIndex === 1) && (AllianceFightModel.Ins.myInnerRewardState === 1)) {
                    DotManager.addDot(this._ui.rewardBtn);
                }
                else {
                    DotManager.removeDot(this._ui.rewardBtn);
                }
                if (AllianceFightModel.Ins.myAllianceRewardState === 1) {
                    DotManager.addDot(this._ui.btn1);
                }
                else {
                    DotManager.removeDot(this._ui.btn1);
                }
                if (AllianceFightModel.Ins.myInnerRewardState === 1) {
                    DotManager.addDot(this._ui.btn2);
                }
                else {
                    DotManager.removeDot(this._ui.btn2);
                }
            }
            else {
                DotManager.removeDot(this._ui.rewardBtn);
                DotManager.removeDot(this._ui.btn1);
                DotManager.removeDot(this._ui.btn2);
            }
        }
    }

    exports.AllianceFightRankView = AllianceFightRankView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightRZView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightRZViewUI;
                this.bindClose(this._ui.close1);
                this._ui.list.itemRender = ui.views.allianceFight.ui_allianceFightRZItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onRenderHandler(item) {
            let data = item.dataSource;
            MainModel.Ins.setTTHead(item.icon, MainModel.Ins.convertHead(data.headUrl));
            item.lab_time.text = TimeUtil.getTimeShow(TimeUtil.serverTime - data.unix) + "前";
            let bcfg = AllianceWarBasePointProxy.Ins.GetDataById(data.cityFID);
            let ccfg = AllianceWarCityProxy.Ins.getCfgByType(bcfg.f_CityType);
            if (data.playerId == MainModel.Ins.mRoleData.mPlayer.AccountId) {
                switch (data.action) {
                    case 1:
                        item.sp.visible = true;
                        item.sp1.visible = item.sp2.visible = item.sp3.visible = item.sp4.visible = false;
                        item.lab.text = "[" + ccfg.f_cityname + "]" + bcfg.f_BaseNum + "号据点";
                        break;
                    case 2:
                        item.sp1.visible = true;
                        item.sp.visible = item.sp2.visible = item.sp3.visible = item.sp4.visible = false;
                        item.lab1.text = data.allianceNameDefend + "联盟 " + data.nickNameDefend + "所在的";
                        item.lab2.text = "[" + ccfg.f_cityname + "]" + bcfg.f_BaseNum + "号据点";
                        item.lab3.text = "剩余血量" + data.lifeDefendPercent / 100 + "%";
                        break;
                    case 3:
                        item.sp2.visible = true;
                        item.sp.visible = item.sp1.visible = item.sp3.visible = item.sp4.visible = false;
                        item.lab4.text = data.allianceNameDefend + "联盟 " + data.nickNameDefend;
                        item.lab5.text = "[" + ccfg.f_cityname + "]" + bcfg.f_BaseNum + "号据点";
                        break;
                }
            }
            else {
                switch (data.action) {
                    case 2:
                        item.sp3.visible = true;
                        item.sp.visible = item.sp1.visible = item.sp2.visible = item.sp4.visible = false;
                        item.lab6.text = data.allianceName + "联盟 " + data.nickName + " 击败了你";
                        item.lab7.text = "[" + ccfg.f_cityname + "]" + bcfg.f_BaseNum + "号据点";
                        break;
                    case 3:
                        item.sp4.visible = true;
                        item.sp.visible = item.sp1.visible = item.sp2.visible = item.sp3.visible = false;
                        item.lab8.text = data.allianceName + "联盟 " + data.nickName + " 攻击了你所在的";
                        item.lab9.text = "[" + ccfg.f_cityname + "]" + bcfg.f_BaseNum + "号据点";
                        item.lab10.text = "剩余血量" + data.lifeDefendPercent / 100 + "%";
                        break;
                }
            }
        }
        onInit() {
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_LOG, this, this.onUpdataView);
            let req = new AllianceWarCityLog_req;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_LOG, this, this.onUpdataView);
        }
        onUpdataView() {
            this._ui.list.array = AllianceFightModel.Ins.logList;
        }
    }

    exports.AllianceFightRZView = AllianceFightRZView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class RewardItem extends ui.views.allianceFight.ui_allianceFightRewardItemViewUI {
        constructor() {
            super();
        }
        setData(data) {
            this.rankTf.text = data.f_Rank.toString().replace('|', '-');
            let f_Reward = data.f_Rewards;
            ItemViewFactory.renderItemSlots(this.rewardList, f_Reward, 10, 0.85, "right");
        }
    }

    exports.RewardItem = RewardItem;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightRewardView extends ViewBase {
        constructor() {
            super(...arguments);
            this.mMask = true;
            this.autoFree = true;
            this.type = 1;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightRewardViewUI;
                this.bindClose(this._ui.close1);
                ButtonCtl.CreateBtn(this._ui.lingquBtn, this, this.onRewardHandler);
                this._ui.list1.itemRender = RewardItem;
                this._ui.list1.renderHandler = new Laya.Handler(this, this.onItemRender1);
                this._ui.list1.vScrollBarSkin = ' ';
                this._ui.tf1.visible = this._ui.time1.visible = false;
            }
        }
        onRewardHandler() {
            if (!this.type)
                return;
            let req = new AllianceWarGetRankReward_req();
            req.flag = this.type;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onItemRender1(item) {
            item.setData(item.dataSource);
        }
        onRewardUpdate() {
            var _a, _b;
            let rank;
            let state;
            let arr = [];
            if (this.type === 1) {
                rank = (_a = AllianceFightModel.Ins.myAllianceRankVal) === null || _a === void 0 ? void 0 : _a.rank;
                state = AllianceFightModel.Ins.myAllianceRewardState;
                arr = AllianceWarRankAllianceProxy.Ins.List;
            }
            else {
                rank = (_b = AllianceFightModel.Ins.myInnerRankVal) === null || _b === void 0 ? void 0 : _b.rank;
                state = AllianceFightModel.Ins.myInnerRewardState;
                arr = AllianceWarRankPersonalProxy.Ins.List;
            }
            this._ui.myRankTf.text = rank ? rank.toString() : '0';
            this._ui.lingquBtn.disabled = state === 1 ? false : true;
            this._ui.list1.array = arr;
        }
        onInit() {
            this.type = this.Data;
            this.onRewardUpdate();
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_REWARD_STATE, this, this.onRewardUpdate);
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_ALLIANCE_RANK, this, this.onRewardUpdate);
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_INNER_RANK, this, this.onRewardUpdate);
        }
        onExit() {
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_REWARD_STATE, this, this.onRewardUpdate);
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_ALLIANCE_RANK, this, this.onRewardUpdate);
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_INNER_RANK, this, this.onRewardUpdate);
        }
    }

    exports.AllianceFightRewardView = AllianceFightRewardView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AvatarMainCtl {
        constructor() {
        }
        get rideModel() {
            return ZuoQiModel.Ins;
        }
        create(_initCallBack) {
            this.free();
            this.rideModel.once(ZuoQiEvent.InitRide, this, this.onRideCreate);
            this.avatar = AvatarFactory.getStandHorseMainAvatar();
            this.con.addChild(this.avatar);
            this.initCallBack = _initCallBack;
            this.initCallBack && this.initCallBack.run();
        }
        disposeAvatar() {
            if (this.avatar) {
                this.avatar.dispose();
            }
            this.avatar = null;
        }
        onRideCreate() {
            Laya.timer.callLater(this, this.init);
        }
        init() {
            this.create(this.initCallBack);
        }
        get mAvatar() {
            return this.avatar;
        }
        free() {
            this.disposeAvatar();
            this.rideModel.off(ZuoQiEvent.InitRide, this, this.onRideCreate);
        }
    }

    exports.AvatarMainCtl = AvatarMainCtl;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class ItemPopSkel extends BaseSpineCoreSkel {
        constructor() {
            super();
            this.anim = EAvatarAnim.Stop;
            this.loadProxy.pngCallBack = new Laya.Handler(this, this.onPngCallBack);
        }
        onPngCallBack(_baseSkel, url, slotName) {
            let tex = Laya.loader.getRes(url);
            let _uv = SpineUtil.createSize(tex.width, tex.height);
            if (_uv) {
                SpineUtil.f_setSlot(_baseSkel, url, slotName, _uv.u, _uv.v, _uv.u2, _uv.v2, _uv.w, _uv.h);
            }
        }
    }

    exports.ItemPopSkel = ItemPopSkel;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class t_BoxRangle {
    }
    class t_Box_AnimationRate extends BaseCfg {
        GetTabelName() {
            return "t_Box_AnimationRate";
        }
        static get Ins() {
            if (!this._ins) {
                this._ins = new t_Box_AnimationRate();
            }
            return this._ins;
        }
        getRandomVal() {
            if (!this._dataList) {
                this._dataList = [];
                let l = this.List;
                let v = 0;
                for (let i = 0; i < l.length; i++) {
                    let cfg = l[i];
                    let pre = l[i - 1];
                    let old = v;
                    v += cfg.f_animRate;
                    let vo = new t_BoxRangle();
                    if (!pre) {
                        vo.start = old;
                        vo.end = v - 1;
                    }
                    else {
                        vo.start = old;
                        if (i < l.length - 1) {
                            vo.end = v - 1;
                        }
                        else {
                            vo.end = v;
                        }
                    }
                    this._dataList.push(vo);
                }
            }
            let val = Math.random() * 10000;
            let index = 0;
            for (let i = 0; i < this._dataList.length; i++) {
                let vo = this._dataList[i];
                if (val >= vo.start && val < vo.end) {
                    index = i;
                }
            }
            let cfg = this.List[index];
            return cfg.f_animindex;
        }
    }
    var EAnimSource;
    (function (EAnimSource) {
        EAnimSource["Die"] = "Die";
        EAnimSource["ResetAvatar"] = "resetAvatar";
    })(EAnimSource || (EAnimSource = {}));
    class AvatarFight {
        constructor() {
            this.isFight = false;
            this._icon = "";
            this._atkVal = 1;
            this.mainCtl = new AvatarMainCtl();
            this.finishList = [];
            this.curTime = 0;
            this.isDoubleHit = false;
            this.delayTime = 1000;
            this.animIndex = 0;
        }
        get myAvatar() {
            return this.mainCtl.mAvatar;
        }
        saveEquip(_old, _new) {
            if (this.isFight) {
                return;
            }
            this.isFight = true;
            this._oldVo = _old;
            this._newVo = _new;
            this.setAvatarAttr(_new.equipVo);
            this.updateView();
        }
        updateView() {
            if (this.myAvatar && this._avatar) {
                if (this.myAvatar.x == 0) {
                    this.startFight();
                }
                else {
                    this.myAtk();
                }
            }
        }
        setAvatarAttr(equipVo) {
            let qua = equipVo.quality;
            let atk = MainModel.Ins.mRoleData.getVal(EAttrType.Attack);
            this._atkVal = atk;
            let lv = MainModel.Ins.mRoleData.getChestData().boxlv;
            let cfglv = MainModel.Ins.getChestLvCfg(lv);
            let curList = cfglv.curInfo.f_Quality_Client.split("|");
            let index = 0;
            for (let i = 0; i < curList.length; i++) {
                let arr = curList[i].split("-");
                if (parseInt(arr[0]) == qua) {
                    index = i;
                }
            }
            let qua1 = index + 1;
            let cfg = EquipmentQualityProxy.Ins.GetDataById(qua1);
            let arr = cfg.f_openvaluerd.split("|");
            let start = parseInt(arr[0]);
            let sub = parseInt(arr[1]) - start;
            let cur = (start + Math.random() * sub) / 10000;
            let blood = Math.ceil(atk * qua1 * cur);
            this.resetAvatarBloodAndUID(blood, equipVo.uid);
            DebugUtil.drawTF(this._ui, "blood:" + blood + " qua:" + qua + " atk:" + atk, "#0000ff");
        }
        animSell(vo, callBack) {
            this._sellBack = callBack;
            this.setAvatarAttr(vo);
            this.startFight();
        }
        onChestProxy(value) {
            if (value) {
                MainModel.Ins.ClickChest();
            }
        }
        onBoxUsed() {
        }
        onInit() {
            this.mainCtl.con = this._ui.role;
            this.onExit();
            LingChongModel.Ins.on(LingChongModel.Updata_LingChong, this, this.onUpdatePetView);
            MainModel.Ins.on(MainEvent.ChestProxy, this, this.onChestProxy);
            MainModel.Ins.on(MainEvent.BoxUsed, this, this.onBoxUsed);
            MainModel.Ins.on(MainEvent.FightAvatarAnim, this, this.playAnim);
            this.initMainAvatar();
            this.onUpdatePetView();
            if (!this._avatar) {
                this._avatar = AvatarFactory.createFightMonsterAvatar(EAvatarDir.Left, 0, 0, true, MainModel.Ins.randomImageID);
            }
            this._avatar.bloodParentType = EBloodParent.Self;
            this._avatar.blood.reverse();
            this._avatar.blood.setInit(100, 100);
            this.resetAvatarPos();
            this._ui.role1.addChild(this._avatar);
            this.updateSkin();
            this.myAvatar.on(Laya.Event.LABEL, this, this.onAvatarLabel);
            MainModel.Ins.on(MainEvent.EquipViewClose, this, this.onEquipClose);
            MainModel.Ins.on(MainEvent.SellSucceed, this, this.onSellSucceed);
            Laya.timer.loop(1000, this, this.onFrameEvt);
        }
        updateSkin() {
            let ran = RandomUtil.RandomRoundInt(1, 60);
            let cfg = Enemy_ImageProxy.Ins.getCfg(ran);
            if (this._avatar) {
                LogSys.Log("更新皮肤:" + JSON.stringify(cfg));
                this._avatar.mSkin = Enemy_ImageProxy.Ins.toTSkin(cfg);
            }
        }
        onFrameEvt() {
        }
        onSellSucceed() {
            this.resetAvatarPos();
        }
        onEquipClose() {
            this.resetAvatarPos();
        }
        addUid(vo) {
            if (vo && vo.equipVo) {
                let uid = vo.equipVo.uid.toString();
                if (this.finishList.indexOf(uid) == -1) {
                    this.finishList.push(uid);
                }
            }
        }
        onSpine1Complete() {
            this.itemSkel.skeleton.x = this._ui.width / 2;
            this.itemSkel.skeleton.y = this._ui.height / 2;
            this._ui.addChild(this.itemSkel.skeleton);
            SpineUtil.forEachSlot(this.itemSkel.skeleton);
        }
        onSetIcon(icon, that = null, func = null) {
            if (!this.itemSkel) {
                let itemSkel = new ItemPopSkel();
                this.itemSkel = itemSkel;
            }
            this.itemSkel.once(Laya.Event.COMPLETE, this, this.onSpine1Complete);
            this.itemSkel.load("o/spine/sell2/sell2.skel");
            this.itemSkel.setSlotSkin("icon_jy", icon);
            this.itemSkel.play(0, that, func, null, true);
        }
        onAvatarLabel(e) {
            let animEvent = e.name;
            if (this._avatar) {
                if (animEvent == EAnimEvent.Attack) {
                    this._avatar.playBlood(-this._atkVal);
                    if (this._avatar.blood.curBlood <= 0) {
                        this._avatar.playOnce(EAvatarAnim.Die, this, this.onAvatarDie);
                        if (this._newVo) {
                            this._icon = this._newVo.getIcon();
                            MainModel.Ins.openEquipUI(this._oldVo, this._newVo);
                        }
                        this.addUid(this._newVo);
                        this.addUid(this._oldVo);
                        this._oldVo = null;
                        this._newVo = null;
                        this.isFight = false;
                        LogSys.Log("fight end! start play die");
                    }
                }
                else if (animEvent == EAnimEvent.HitAnim) {
                    this._avatar.playOnce(EAvatarAnim.FightHit, this, this.onFightHit);
                }
            }
        }
        onAvatarDie() {
            let useTime = 500;
            Laya.timer.once(useTime, this, this.onDie);
        }
        onDie() {
            if (this._sellBack) {
                if (this._sellBack.args && this._sellBack.args.length > 0) {
                    this._icon = ItemViewFactory.getIcon(this._sellBack.args[0]);
                }
                this._sellBack.run();
                this._sellBack = null;
                LogSys.Log("卖掉之后回调!!!");
            }
            this.playStand(EAnimSource.Die);
            this.updateSkin();
        }
        resetAvatarBloodAndUID(hp, uid) {
            let vo = new AvatarFightVo();
            vo.hp = hp;
            vo.uid = uid;
            if (this._avatar) {
                this._avatar.fightVo = vo;
                this._avatar.blood.setInit(vo.hp, vo.hp);
                DebugUtil.drawTF(this._avatar, uid.toString());
            }
            else {
                LogSys.Error("your avatar is null!");
            }
        }
        onFightHit() {
            this.playStand("hit");
        }
        playStand(source) {
            if (this._avatar) {
                this._avatar.play(EAvatarAnim.Stand);
                LogSys.Log("设置stand " + source);
                if (source == EAnimSource.Die || source == EAnimSource.ResetAvatar) {
                    this.resetAvatarPos();
                }
            }
        }
        resetAvatarPos() {
            if (this._avatar) {
                let offsetX = -150;
                if (this._avatar.blood.percent == 1 && this._avatar.blood.isShow && this._avatar.x == offsetX ||
                    this._avatar.isMoving) {
                    return;
                }
                this._avatar.reset(0, 0);
                this._avatar.moveX(offsetX, 1000);
            }
        }
        initMainAvatar() {
            this.mainCtl.create(new Laya.Handler(this, this.initCallBack));
        }
        initCallBack() {
            this.myAvatar.reset();
            this.myAvatar.dir = EAvatarDir.Right;
            this.myAvatar.play(EAvatarAnim.Stand);
            this.myAvatar.on(Laya.Event.LABEL, this, this.onAvatarLabel);
        }
        disoiseEnemyAvatar() {
            if (this._avatar) {
                this._avatar.dispose();
                this._avatar = null;
            }
        }
        onExit() {
            this.disoiseEnemyAvatar();
            Laya.timer.clear(this, this.onFrameEvt);
            LingChongModel.Ins.off(LingChongModel.Updata_LingChong, this, this.onUpdatePetView);
            MainModel.Ins.off(MainEvent.EquipViewClose, this, this.onEquipClose);
            MainModel.Ins.off(MainEvent.ChestProxy, this, this.onChestProxy);
            MainModel.Ins.off(MainEvent.BoxUsed, this, this.onBoxUsed);
            MainModel.Ins.off(MainEvent.SellSucceed, this, this.onSellSucceed);
            MainModel.Ins.off(MainEvent.FightAvatarAnim, this, this.playAnim);
            this.disposePet();
            this.disposeMyAvatar();
        }
        onUpdatePetView() {
            this.disposePet();
            this.createPet();
        }
        createPet() {
            let myData = LingChongModel.Ins.getSZPetData();
            if (myData) {
                let petId = myData.petId;
                let _pet = AvatarFactory.createPet(petId, false);
                _pet.play(EAvatarAnim.Stand);
                let dir = EAvatarDir.Right;
                _pet.dir = dir;
                this._ui.pet.addChild(_pet);
                this._pet = _pet;
            }
        }
        disposeMyAvatar() {
            if (this.myAvatar) {
                this.myAvatar.off(Laya.Event.LABEL, this, this.onAvatarLabel);
            }
        }
        disposePet() {
            if (this._pet) {
                this._pet.dispose();
                this._pet = null;
            }
        }
        isExistUid(_uid) {
            for (let i = 0; i < this.finishList.length; i++) {
                let uid = this.finishList[i];
                if (uid == _uid) {
                    return true;
                }
            }
        }
        isDead() {
            let _equipVo = MainModel.Ins.getNotWear();
            if (_equipVo) {
                let find = this.isExistUid(_equipVo.equipVo.uid.toString());
                if (find) {
                    return true;
                }
            }
        }
        playAnim() {
            this.animIndex++;
            let index = this.animIndex % 2;
            this.animCtl.Play(null, index + 1);
        }
        fight() {
            let _equipVo = MainModel.Ins.getNotWear();
            if (_equipVo && this.isDead()) {
                MainModel.Ins.openUiByEquipVo(_equipVo.equipVo, true);
                return;
            }
            if (this._avatar && this._avatar.blood.percent == 1) {
                if (!MainModel.Ins.isItemEnoughSt(`${ECellType.BOX}-1`, true)) {
                    MainModel.Ins.discountPack.boxNotEnough();
                    return;
                }
            }
            this.playAnim();
            if (this.isFight) ;
            else {
                MainModel.Ins.ClickChest();
            }
            if (this.myAvatar.x == 0) {
                this.startFight();
            }
            else {
                let sub = Laya.timer.currTimer - this.curTime;
                if (sub < this.delayTime) {
                    this.isDoubleHit = true;
                    Laya.timer.once(this.delayTime, this, this.freeDoubleHit);
                }
                else {
                    this.curTime = Laya.timer.currTimer;
                }
            }
        }
        startFight() {
            this.myAvatar.moveX(350, 100, new Laya.Handler(this, this.myAtk));
        }
        freeDoubleHit() {
            this.isDoubleHit = false;
        }
        myAtk() {
            if (this._avatar) {
                let anim = t_Box_AnimationRate.Ins.getRandomVal();
                if (this._avatar.blood.curBlood < this._atkVal) {
                    anim = EAvatarAnim.FightLastAttck;
                }
                if (!this._avatar.blood.isShow) {
                    this.freeDoubleHit();
                }
                this.myAvatar.playOnce(anim, this, this.playEnd);
            }
        }
        playEnd() {
            if (MainModel.Ins.curChest.type == EOpenChest.Auto) {
                if (this._avatar && this._avatar.blood.curBlood > 0) {
                    this.myAtk();
                    return;
                }
            }
            if (this.isDoubleHit) {
                this.myAtk();
            }
            else {
                this.myAvatar.play(EAvatarAnim.Stand);
                this.myAvatar.moveX(0, 100);
            }
        }
    }

    exports.AvatarFight = AvatarFight;
    exports.t_Box_AnimationRate = t_Box_AnimationRate;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightAwardView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.mMainSnapshot = true;
            this.mMaskClick = false;
            this.curTime = 0;
            this.delayTime = 500;
            this.isDoubleHit = false;
            this._flag = false;
            this._num = 0;
            this._animList = [3, 5, 23];
            this._animList1 = [4, 6, 24];
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightAwardViewUI;
                this._timeCtl = new TimeCtl(this._ui.lab_time);
                let time_str = TimeUtil.subTime(parseInt(AllianceWarConfig.Ins.getCfg().f_BounsGameTime));
                this._timeCtl.setText(time_str);
                this._ui.lab.text = "快速点击战鼓";
                this._index = 0;
                this._ClickNum = 0;
                this._eff = new SimpleEffect(this._ui.sp, `o/spine/boxgulv14big/boxgulv14big`, 0, 0, 1.0);
                this._ui.sp.scale(0.8, 0.8);
                this._eff.play(0, true);
                this._ui.sp_click.on(Laya.Event.CLICK, this, this.onClick);
                this._avatar = AvatarFactory.getStandHorseMainAvatar();
                this._avatar.dir = EAvatarDir.Right;
                this._ui.sp_my.addChild(this._avatar);
                let key = AllianceWarBounsProxy.Ins.List[0].f_Res;
                this._bossAv = AvatarFactory.createBossMonster(`o/spine/${key}/${key}`);
                this._bossAv.play(EAvatarAnim.NormalStand);
                this._ui.sp_boss.addChild(this._bossAv);
                this._ui.sp_boss.scale(1.5, 1.5);
                this._isClick = false;
                this._ctl1 = new FontClipCtl(IconUtils.afAtlasPrefix);
                this._tw = new Laya.Tween;
                this._djsEff = new SimpleEffect(this._ui.sp_djs, `o/spine/uidaojishi/uidaojishi`, 0, 0, 1.0);
                this._djsEff.play(0, false, this, this.effEnd);
            }
        }
        effEnd() {
            this._djsEff.stop();
            this._isClick = true;
            this.refreshTime();
        }
        onClick() {
            if (!this._isClick)
                return;
            this._ClickNum++;
            this._ctl1.setValue(this._ui.sp_num, this._ClickNum.toString(), "middle");
            this._ui.sp_num.scaleX = this._ui.sp_num.scaleY = 1;
            this._tw.to(this._ui.sp_num, { scaleX: 1.5, scaleY: 1.5 }, 200, Laya.Ease.sineOut, Laya.Handler.create(this, this.onComplete));
            this.playAvatat();
            this.playAnim();
        }
        onComplete() {
            this._tw.to(this._ui.sp_num, { scaleX: 1, scaleY: 1 }, 200, Laya.Ease.sineOut);
        }
        playAvatat() {
            if (!this._flag) {
                this._flag = true;
                this.myAtk();
            }
            else {
                let sub = Laya.timer.currTimer - this.curTime;
                if (sub < this.delayTime) {
                    this.isDoubleHit = true;
                    Laya.timer.once(this.delayTime, this, this.freeDoubleHit);
                }
                else {
                    this.curTime = Laya.timer.currTimer;
                }
            }
        }
        freeDoubleHit() {
            this.isDoubleHit = false;
        }
        myAtk() {
            if (this._avatar) {
                let anim = t_Box_AnimationRate.Ins.getRandomVal();
                this._avatar.playOnce(anim, this, this.playEnd);
            }
        }
        playEnd() {
            if (this.isDoubleHit) {
                this.myAtk();
            }
            else {
                this._avatar.play(EAvatarAnim.Stand);
                this._flag = false;
            }
        }
        playAnim() {
            if (this._eff.anim.curIndex != 0) {
                return;
            }
            this._index++;
            let index = this._index % 2;
            if (index == 0) {
                index = 2;
            }
            this._eff.play(index, false, this, this.onEnd);
        }
        onEnd() {
            this._eff.play(0, true);
        }
        onAvatarLabel(e) {
            if (this._animList.indexOf(this._bossAv.curAnim) != -1) {
                return;
            }
            if (this._animList1.indexOf(this._bossAv.curAnim) != -1) {
                return;
            }
            let animEvent = e.name;
            let num = AllianceWarConfig.Ins.getCfg().f_BossHitBackTimes;
            if (animEvent == EAnimEvent.HitAnim) {
                this._num++;
                if (this._num % num == 0) {
                    this._ran = RandomUtil.RandomRoundInt(0, 3);
                    this._bossAv.playOnce(this._animList[this._ran], this, this.onAttack);
                }
                else {
                    this._bossAv.playOnce(EAvatarAnim.Hit, this, this.onFightHit);
                }
            }
        }
        onAttack() {
            this._bossAv.playOnce(this._animList1[this._ran], this, this.onFightHit);
        }
        onFightHit() {
            this._bossAv.play(EAvatarAnim.Stand);
        }
        onInit() {
            AllianceFightModel.Ins.on(AllianceFightModel.UPDATE_SKIN, this, this.setAv);
            this._avatar.on(Laya.Event.LABEL, this, this.onAvatarLabel);
            let req = new AllianceWarEnterActivity_req;
            req.type = 4;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onExit() {
            AllianceFightModel.Ins.off(AllianceFightModel.UPDATE_SKIN, this, this.setAv);
            this._avatar.off(Laya.Event.LABEL, this, this.onAvatarLabel);
            this._timeCtl.dispose();
            if (this._eff) {
                this._eff.dispose();
            }
            this._eff = null;
            if (this._djsEff) {
                this._djsEff.dispose();
            }
            this._djsEff = null;
            if (this._avatar) {
                this._avatar.dispose();
            }
            this._avatar = null;
            if (this._bossAv) {
                this._bossAv.dispose();
            }
            this._bossAv = null;
            for (let i = 1; i < 6; i++) {
                if (this["_avatar" + i]) {
                    this["_avatar" + i].dispose();
                }
                this["_avatar" + i] = null;
            }
            Laya.Tween.clearAll(this._ui.sp_num);
            this._tw.clear();
        }
        refreshTime() {
            let t = parseInt(AllianceWarConfig.Ins.getCfg().f_BounsGameTime);
            this._timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText(time_str);
        }
        endTime() {
            this._isClick = false;
            this._timeCtl.setText("00:00");
            let req = new AllianceWarBounsEnd_req;
            req.num = this._ClickNum;
            SocketMgr.Ins.SendMessageBin(req);
        }
        setAv() {
            for (let i = 1; i < 6; i++) {
                if (AllianceFightModel.Ins.skinList[i]) {
                    this["_avatar" + i] = AvatarFactory.createAvatarByStSkin(AllianceFightModel.Ins.skinList[i]);
                    this["_avatar" + i].dir = EAvatarDir.Right;
                    let ran = RandomUtil.RandomRoundInt(0, 2);
                    this["_avatar" + i].play(44 + ran);
                    this._ui["sp" + i].addChild(this["_avatar" + i]);
                }
            }
        }
    }

    exports.AllianceFightAwardView = AllianceFightAwardView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightJSAwardView extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.mMainSnapshot = true;
            this.mMaskClick = false;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightAwardJSViewUI;
                this.bindClose(this._ui.btn);
                this._ui.list.itemRender = ui.views.main.ui_slot_itemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
                this._eff = new SimpleEffect(this._ui.succeedContainer, `o/spine/succeed/shengli`, 0, 0, 1.0);
                this._eff.play(0, false, this, this.onCloseEnd);
            }
        }
        onCloseEnd() {
            this._eff.play(1, true);
        }
        onRenderHandler(item) {
            let itemVo = new ItemVo();
            itemVo.cfgId = item.dataSource.id;
            itemVo.count = item.dataSource.count;
            ItemViewFactory.refreshSlot(item, itemVo);
        }
        onInit() {
            let data = this.Data;
            this._ui.rewadTf.text = "本次点击次数: " + data.num;
            this._ui.list.array = data.rewardList;
            if (data.rewardList.length >= this._ui.list.repeatX) {
                this._ui.list.width = 590;
            }
            else {
                this._ui.list.width = (data.rewardList.length * 100) + (data.rewardList.length - 1) * this._ui.list.spaceX;
            }
        }
        onExit() {
            if (this._eff) {
                this._eff.dispose();
            }
            this._eff = null;
            E.ViewMgr.Close(EViewType.AllianceFightAwardView);
            this.Close();
        }
    }

    exports.AllianceFightJSAwardView = AllianceFightJSAwardView;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightAwardView1 extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightAwardView1UI;
                this.bindClose(this._ui.close1);
                this.btnList.push(ButtonCtl.Create(this._ui.btn, new Laya.Handler(this, this.onBtnClick)), ButtonCtl.Create(this._ui.btn_tip, new Laya.Handler(this, this.onBtnTipClick)), ButtonCtl.Create(this._ui.btn1, new Laya.Handler(this, this.onBtn1Click)));
                this._timeCtl = new TimeCtl(this._ui.lab_time);
            }
        }
        onBtnClick() {
            let warStatus = AllianceFightModel.Ins.warStatus;
            if (warStatus != WarStatus.Reward) {
                E.ViewMgr.ShowMidError("活动未开启");
                return;
            }
            if (!AllianceFightModel.Ins.showRewardChapter) {
                E.ViewMgr.ShowMidError("未获得资格");
                return;
            }
            let req = new AllianceWarEnterActivity_req;
            req.type = 3;
            SocketMgr.Ins.SendMessageBin(req);
        }
        onBtn1Click() {
            E.ViewMgr.Open(EViewType.AllianceFightAwardView2);
        }
        onBtnTipClick() {
            E.ViewMgr.openHelpView("allianceFightAwardTitle", "allianceFightAwardDec");
        }
        onInit() {
            let arr = AllianceWarBounsProxy.Ins.getCfgByRank(AllianceFightModel.Ins.rank);
            if (arr && arr.length) {
                this._ui.boss_name_tf.text = arr[0].f_BounsName;
            }
            else {
                this._ui.boss_name_tf.text = "奖励关";
            }
            this._ui.lab1.text = "限时30秒快速点击战鼓攻击青龙";
            this._ui.lab2.text = "奖励根据战鼓敲击次数发放";
            this._timeCtl.setText("");
            let warStatus = AllianceFightModel.Ins.warStatus;
            if (warStatus == WarStatus.Reward) {
                this.refreshTime();
            }
        }
        onExit() {
            this._timeCtl.dispose();
        }
        refreshTime() {
            let t = AllianceFightModel.Ins.rewardSubTime;
            if (t > 0) {
                this._timeCtl.start(t, new Laya.Handler(this, this.onUpdateTime), new Laya.Handler(this, this.endTime));
            }
            else {
                this.endTime();
            }
        }
        onUpdateTime() {
            let time_str = TimeUtil.subTime(this._timeCtl.tickVal);
            this._timeCtl.setText("活动剩余时间:" + time_str);
        }
        endTime() {
            this._timeCtl.stop();
            this._timeCtl.setText("");
        }
    }

    exports.AllianceFightAwardView1 = AllianceFightAwardView1;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class AllianceFightAwardView2 extends ViewBase {
        constructor() {
            super(...arguments);
            this.autoFree = true;
            this.mMask = true;
            this.mMainSnapshot = true;
        }
        onAddLoadRes() {
            this.addAtlas('allianceFight.atlas');
        }
        onFirstInit() {
            if (!this.UI) {
                this.UI = this._ui = new ui.views.allianceFight.ui_allianceFightAwardView2UI;
                this.bindClose(this._ui.close1);
                this.btnList.push(ButtonCtl.Create(this._ui.btn1, new Laya.Handler(this, this.onBtn1Click), false), ButtonCtl.Create(this._ui.btn2, new Laya.Handler(this, this.onBtn2Click), false), ButtonCtl.Create(this._ui.btn3, new Laya.Handler(this, this.onBtn3Click), false));
                this._ui.list.itemRender = ui.views.allianceFight.ui_allianceFightAwardItemUI;
                this._ui.list.renderHandler = new Laya.Handler(this, this.onRenderHandler);
            }
        }
        onRenderHandler(item) {
            item.lab.text = item.dataSource.f_ClickTimes;
            ItemViewFactory.renderItemSlots(item.sp, item.dataSource.f_Rewards, 10, 0.8, "right");
        }
        onBtn1Click() {
            let arr = AllianceWarBounsProxy.Ins.getCfgByRank(1);
            this._ui.list.array = arr;
            this._ui.btn1.skin = "remote/alliance/anniu_2.png";
            this._ui.btn2.skin = this._ui.btn3.skin = "remote/alliance/anniu_1.png";
        }
        onBtn2Click() {
            let arr = AllianceWarBounsProxy.Ins.getCfgByRank(2);
            this._ui.list.array = arr;
            this._ui.btn2.skin = "remote/alliance/anniu_2.png";
            this._ui.btn1.skin = this._ui.btn3.skin = "remote/alliance/anniu_1.png";
        }
        onBtn3Click() {
            let arr = AllianceWarBounsProxy.Ins.getCfgByRank(3);
            this._ui.list.array = arr;
            this._ui.btn3.skin = "remote/alliance/anniu_2.png";
            this._ui.btn1.skin = this._ui.btn2.skin = "remote/alliance/anniu_1.png";
        }
        onInit() {
            this.onBtn1Click();
            let arr = AllianceWarBounsProxy.Ins.getCfgByRank(1);
            this._ui.lab_tab1.text = arr[0].f_BounsName;
            arr = AllianceWarBounsProxy.Ins.getCfgByRank(2);
            this._ui.lab_tab2.text = arr[0].f_BounsName;
            arr = AllianceWarBounsProxy.Ins.getCfgByRank(3);
            this._ui.lab_tab3.text = arr[0].f_BounsName;
        }
        onExit() {
        }
    }

    exports.AllianceFightAwardView2 = AllianceFightAwardView2;

    return exports;

}(window));
(function (exports) {
    'use strict';

    class MemberItem$1 extends ui.views.allianceFight.ui_allianceFightMemberItemUI {
        constructor() {
            super();
            this._plusCtl = FontCtlFactory.createMainPlus();
            this.on(Laya.Event.CLICK, this, this.onClick);
        }
        setData(value) {
            if (!value)
                return;
            this._data = value;
            MainModel.Ins.setTTHead(this.head.icon, MainModel.Ins.convertHead(value.headUrl));
            this.head.titleIcon.visible = false;
            this.head.lvtf.text = "Lv." + value.playerLevel;
            this.nametf.text = StringUtil.convertName(value.name);
            this.img_title.skin = ChengHaoModel.Ins.getTitleImg(value.titleId);
            const v = StringUtil.val2Atlas(value.plus);
            this._plusCtl.setValue(this.toplug, v);
            switch (value.position) {
                case AlliancePosition.Normal:
                    this.position_bg.skin = 'remote/common/base/cy.png';
                    this.position_tf.text = E.getLang('AlliancePositionNormal');
                    break;
                case AlliancePosition.VicePresident:
                    this.position_bg.skin = 'remote/common/base/fmz.png';
                    this.position_tf.text = E.getLang('AlliancePositionVicePresident');
                    break;
                case AlliancePosition.President:
                    this.position_bg.skin = 'remote/common/base/mz.png';
                    this.position_tf.text = E.getLang('AlliancePositionPresident');
                    break;
            }
        }
        onClick() {
            var _a;
            if (!((_a = this._data) === null || _a === void 0 ? void 0 : _a.playerId))
                return;
            const req = new JustWatchPlayer_req();
            req.playerId = this._data.playerId;
            SocketMgr.Ins.SendMessageBin(req);
        }
    }

    exports.MemberItem = MemberItem$1;

    return exports;

}(window));
